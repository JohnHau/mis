
STM324xG_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001318c  0801f4f0  0801f4f0  0002f4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803267c  0803267c  0004267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032684  08032684  00042684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08032688  08032688  00042688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000350  20000000  0803268c  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00050350  2**0
                  CONTENTS
  8 .bss          00015df4  20000350  20000350  00050350  2**3
                  ALLOC
  9 ._user_heap_stack 00000604  20016144  20016144  00050350  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00050350  2**0
                  CONTENTS, READONLY
 11 .debug_line   00067d4e  00000000  00000000  00050380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000a5013  00000000  00000000  000b80ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00012877  00000000  00000000  0015d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cd8  00000000  00000000  0016f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011aa29  00000000  00000000  00172630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005738  00000000  00000000  0028d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00040135  00000000  00000000  00292798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003db01  00000000  00000000  002d28cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003103ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7e0  00000000  00000000  00310424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f4d8 	.word	0x0801f4d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0801f4d8 	.word	0x0801f4d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_dmul>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800029a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a2:	bf1d      	ittte	ne
 80002a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a8:	ea94 0f0c 	teqne	r4, ip
 80002ac:	ea95 0f0c 	teqne	r5, ip
 80002b0:	f000 f8de 	bleq	8000470 <__aeabi_dmul+0x1dc>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea81 0603 	eor.w	r6, r1, r3
 80002ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c6:	bf18      	it	ne
 80002c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d4:	d038      	beq.n	8000348 <__aeabi_dmul+0xb4>
 80002d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80002da:	f04f 0500 	mov.w	r5, #0
 80002de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ea:	f04f 0600 	mov.w	r6, #0
 80002ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f2:	f09c 0f00 	teq	ip, #0
 80002f6:	bf18      	it	ne
 80002f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80002fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000300:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000304:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000308:	d204      	bcs.n	8000314 <__aeabi_dmul+0x80>
 800030a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030e:	416d      	adcs	r5, r5
 8000310:	eb46 0606 	adc.w	r6, r6, r6
 8000314:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000318:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800031c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000320:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000324:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000328:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800032c:	bf88      	it	hi
 800032e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000332:	d81e      	bhi.n	8000372 <__aeabi_dmul+0xde>
 8000334:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000338:	bf08      	it	eq
 800033a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033e:	f150 0000 	adcs.w	r0, r0, #0
 8000342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800034c:	ea46 0101 	orr.w	r1, r6, r1
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800035c:	bfc2      	ittt	gt
 800035e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000362:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000366:	bd70      	popgt	{r4, r5, r6, pc}
 8000368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800036c:	f04f 0e00 	mov.w	lr, #0
 8000370:	3c01      	subs	r4, #1
 8000372:	f300 80ab 	bgt.w	80004cc <__aeabi_dmul+0x238>
 8000376:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800037a:	bfde      	ittt	le
 800037c:	2000      	movle	r0, #0
 800037e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000382:	bd70      	pople	{r4, r5, r6, pc}
 8000384:	f1c4 0400 	rsb	r4, r4, #0
 8000388:	3c20      	subs	r4, #32
 800038a:	da35      	bge.n	80003f8 <__aeabi_dmul+0x164>
 800038c:	340c      	adds	r4, #12
 800038e:	dc1b      	bgt.n	80003c8 <__aeabi_dmul+0x134>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f305 	lsl.w	r3, r0, r5
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f205 	lsl.w	r2, r1, r5
 80003a4:	ea40 0002 	orr.w	r0, r0, r2
 80003a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b4:	fa21 f604 	lsr.w	r6, r1, r4
 80003b8:	eb42 0106 	adc.w	r1, r2, r6
 80003bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c0:	bf08      	it	eq
 80003c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f1c4 040c 	rsb	r4, r4, #12
 80003cc:	f1c4 0520 	rsb	r5, r4, #32
 80003d0:	fa00 f304 	lsl.w	r3, r0, r4
 80003d4:	fa20 f005 	lsr.w	r0, r0, r5
 80003d8:	fa01 f204 	lsl.w	r2, r1, r4
 80003dc:	ea40 0002 	orr.w	r0, r0, r2
 80003e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e8:	f141 0100 	adc.w	r1, r1, #0
 80003ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f0:	bf08      	it	eq
 80003f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f205 	lsl.w	r2, r0, r5
 8000400:	ea4e 0e02 	orr.w	lr, lr, r2
 8000404:	fa20 f304 	lsr.w	r3, r0, r4
 8000408:	fa01 f205 	lsl.w	r2, r1, r5
 800040c:	ea43 0302 	orr.w	r3, r3, r2
 8000410:	fa21 f004 	lsr.w	r0, r1, r4
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	fa21 f204 	lsr.w	r2, r1, r4
 800041c:	ea20 0002 	bic.w	r0, r0, r2
 8000420:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000424:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000428:	bf08      	it	eq
 800042a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f094 0f00 	teq	r4, #0
 8000434:	d10f      	bne.n	8000456 <__aeabi_dmul+0x1c2>
 8000436:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800043a:	0040      	lsls	r0, r0, #1
 800043c:	eb41 0101 	adc.w	r1, r1, r1
 8000440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000444:	bf08      	it	eq
 8000446:	3c01      	subeq	r4, #1
 8000448:	d0f7      	beq.n	800043a <__aeabi_dmul+0x1a6>
 800044a:	ea41 0106 	orr.w	r1, r1, r6
 800044e:	f095 0f00 	teq	r5, #0
 8000452:	bf18      	it	ne
 8000454:	4770      	bxne	lr
 8000456:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800045a:	0052      	lsls	r2, r2, #1
 800045c:	eb43 0303 	adc.w	r3, r3, r3
 8000460:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000464:	bf08      	it	eq
 8000466:	3d01      	subeq	r5, #1
 8000468:	d0f7      	beq.n	800045a <__aeabi_dmul+0x1c6>
 800046a:	ea43 0306 	orr.w	r3, r3, r6
 800046e:	4770      	bx	lr
 8000470:	ea94 0f0c 	teq	r4, ip
 8000474:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000478:	bf18      	it	ne
 800047a:	ea95 0f0c 	teqne	r5, ip
 800047e:	d00c      	beq.n	800049a <__aeabi_dmul+0x206>
 8000480:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000484:	bf18      	it	ne
 8000486:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048a:	d1d1      	bne.n	8000430 <__aeabi_dmul+0x19c>
 800048c:	ea81 0103 	eor.w	r1, r1, r3
 8000490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd70      	pop	{r4, r5, r6, pc}
 800049a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049e:	bf06      	itte	eq
 80004a0:	4610      	moveq	r0, r2
 80004a2:	4619      	moveq	r1, r3
 80004a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a8:	d019      	beq.n	80004de <__aeabi_dmul+0x24a>
 80004aa:	ea94 0f0c 	teq	r4, ip
 80004ae:	d102      	bne.n	80004b6 <__aeabi_dmul+0x222>
 80004b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b4:	d113      	bne.n	80004de <__aeabi_dmul+0x24a>
 80004b6:	ea95 0f0c 	teq	r5, ip
 80004ba:	d105      	bne.n	80004c8 <__aeabi_dmul+0x234>
 80004bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c0:	bf1c      	itt	ne
 80004c2:	4610      	movne	r0, r2
 80004c4:	4619      	movne	r1, r3
 80004c6:	d10a      	bne.n	80004de <__aeabi_dmul+0x24a>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d8:	f04f 0000 	mov.w	r0, #0
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e6:	bd70      	pop	{r4, r5, r6, pc}

080004e8 <__aeabi_drsub>:
 80004e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e002      	b.n	80004f4 <__adddf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dsub>:
 80004f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f4 <__adddf3>:
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	bf1f      	itttt	ne
 800050a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051a:	f000 80e2 	beq.w	80006e2 <__adddf3+0x1ee>
 800051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000526:	bfb8      	it	lt
 8000528:	426d      	neglt	r5, r5
 800052a:	dd0c      	ble.n	8000546 <__adddf3+0x52>
 800052c:	442c      	add	r4, r5
 800052e:	ea80 0202 	eor.w	r2, r0, r2
 8000532:	ea81 0303 	eor.w	r3, r1, r3
 8000536:	ea82 0000 	eor.w	r0, r2, r0
 800053a:	ea83 0101 	eor.w	r1, r3, r1
 800053e:	ea80 0202 	eor.w	r2, r0, r2
 8000542:	ea81 0303 	eor.w	r3, r1, r3
 8000546:	2d36      	cmp	r5, #54	; 0x36
 8000548:	bf88      	it	hi
 800054a:	bd30      	pophi	{r4, r5, pc}
 800054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x70>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x84>
 8000572:	4252      	negs	r2, r2
 8000574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000578:	ea94 0f05 	teq	r4, r5
 800057c:	f000 80a7 	beq.w	80006ce <__adddf3+0x1da>
 8000580:	f1a4 0401 	sub.w	r4, r4, #1
 8000584:	f1d5 0e20 	rsbs	lr, r5, #32
 8000588:	db0d      	blt.n	80005a6 <__adddf3+0xb2>
 800058a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058e:	fa22 f205 	lsr.w	r2, r2, r5
 8000592:	1880      	adds	r0, r0, r2
 8000594:	f141 0100 	adc.w	r1, r1, #0
 8000598:	fa03 f20e 	lsl.w	r2, r3, lr
 800059c:	1880      	adds	r0, r0, r2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	4159      	adcs	r1, r3
 80005a4:	e00e      	b.n	80005c4 <__adddf3+0xd0>
 80005a6:	f1a5 0520 	sub.w	r5, r5, #32
 80005aa:	f10e 0e20 	add.w	lr, lr, #32
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b4:	bf28      	it	cs
 80005b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	d507      	bpl.n	80005da <__adddf3+0xe6>
 80005ca:	f04f 0e00 	mov.w	lr, #0
 80005ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005de:	d31b      	bcc.n	8000618 <__adddf3+0x124>
 80005e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e4:	d30c      	bcc.n	8000600 <__adddf3+0x10c>
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f0:	f104 0401 	add.w	r4, r4, #1
 80005f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005fc:	f080 809a 	bcs.w	8000734 <__adddf3+0x240>
 8000600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	ea41 0105 	orr.w	r1, r1, r5
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800061c:	4140      	adcs	r0, r0
 800061e:	eb41 0101 	adc.w	r1, r1, r1
 8000622:	3c01      	subs	r4, #1
 8000624:	bf28      	it	cs
 8000626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800062a:	d2e9      	bcs.n	8000600 <__adddf3+0x10c>
 800062c:	f091 0f00 	teq	r1, #0
 8000630:	bf04      	itt	eq
 8000632:	4601      	moveq	r1, r0
 8000634:	2000      	moveq	r0, #0
 8000636:	fab1 f381 	clz	r3, r1
 800063a:	bf08      	it	eq
 800063c:	3320      	addeq	r3, #32
 800063e:	f1a3 030b 	sub.w	r3, r3, #11
 8000642:	f1b3 0220 	subs.w	r2, r3, #32
 8000646:	da0c      	bge.n	8000662 <__adddf3+0x16e>
 8000648:	320c      	adds	r2, #12
 800064a:	dd08      	ble.n	800065e <__adddf3+0x16a>
 800064c:	f102 0c14 	add.w	ip, r2, #20
 8000650:	f1c2 020c 	rsb	r2, r2, #12
 8000654:	fa01 f00c 	lsl.w	r0, r1, ip
 8000658:	fa21 f102 	lsr.w	r1, r1, r2
 800065c:	e00c      	b.n	8000678 <__adddf3+0x184>
 800065e:	f102 0214 	add.w	r2, r2, #20
 8000662:	bfd8      	it	le
 8000664:	f1c2 0c20 	rsble	ip, r2, #32
 8000668:	fa01 f102 	lsl.w	r1, r1, r2
 800066c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000670:	bfdc      	itt	le
 8000672:	ea41 010c 	orrle.w	r1, r1, ip
 8000676:	4090      	lslle	r0, r2
 8000678:	1ae4      	subs	r4, r4, r3
 800067a:	bfa2      	ittt	ge
 800067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000680:	4329      	orrge	r1, r5
 8000682:	bd30      	popge	{r4, r5, pc}
 8000684:	ea6f 0404 	mvn.w	r4, r4
 8000688:	3c1f      	subs	r4, #31
 800068a:	da1c      	bge.n	80006c6 <__adddf3+0x1d2>
 800068c:	340c      	adds	r4, #12
 800068e:	dc0e      	bgt.n	80006ae <__adddf3+0x1ba>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0220 	rsb	r2, r4, #32
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f302 	lsl.w	r3, r1, r2
 80006a0:	ea40 0003 	orr.w	r0, r0, r3
 80006a4:	fa21 f304 	lsr.w	r3, r1, r4
 80006a8:	ea45 0103 	orr.w	r1, r5, r3
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f1c4 040c 	rsb	r4, r4, #12
 80006b2:	f1c4 0220 	rsb	r2, r4, #32
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 f304 	lsl.w	r3, r1, r4
 80006be:	ea40 0003 	orr.w	r0, r0, r3
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ca:	4629      	mov	r1, r5
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f094 0f00 	teq	r4, #0
 80006d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d6:	bf06      	itte	eq
 80006d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006dc:	3401      	addeq	r4, #1
 80006de:	3d01      	subne	r5, #1
 80006e0:	e74e      	b.n	8000580 <__adddf3+0x8c>
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf18      	it	ne
 80006e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ec:	d029      	beq.n	8000742 <__adddf3+0x24e>
 80006ee:	ea94 0f05 	teq	r4, r5
 80006f2:	bf08      	it	eq
 80006f4:	ea90 0f02 	teqeq	r0, r2
 80006f8:	d005      	beq.n	8000706 <__adddf3+0x212>
 80006fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fe:	bf04      	itt	eq
 8000700:	4619      	moveq	r1, r3
 8000702:	4610      	moveq	r0, r2
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	ea91 0f03 	teq	r1, r3
 800070a:	bf1e      	ittt	ne
 800070c:	2100      	movne	r1, #0
 800070e:	2000      	movne	r0, #0
 8000710:	bd30      	popne	{r4, r5, pc}
 8000712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000716:	d105      	bne.n	8000724 <__adddf3+0x230>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	4149      	adcs	r1, r1
 800071c:	bf28      	it	cs
 800071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000728:	bf3c      	itt	cc
 800072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072e:	bd30      	popcc	{r4, r5, pc}
 8000730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf1a      	itte	ne
 8000748:	4619      	movne	r1, r3
 800074a:	4610      	movne	r0, r2
 800074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000750:	bf1c      	itt	ne
 8000752:	460b      	movne	r3, r1
 8000754:	4602      	movne	r2, r0
 8000756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075a:	bf06      	itte	eq
 800075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000760:	ea91 0f03 	teqeq	r1, r3
 8000764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <__aeabi_ui2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f04f 0500 	mov.w	r5, #0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e750      	b.n	800062c <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_i2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e73e      	b.n	800062c <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_f2d>:
 80007b0:	0042      	lsls	r2, r0, #1
 80007b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007be:	bf1f      	itttt	ne
 80007c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007cc:	4770      	bxne	lr
 80007ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007d2:	bf08      	it	eq
 80007d4:	4770      	bxeq	lr
 80007d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007da:	bf04      	itt	eq
 80007dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	e71c      	b.n	800062c <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_ul2d>:
 80007f4:	ea50 0201 	orrs.w	r2, r0, r1
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	b530      	push	{r4, r5, lr}
 80007fe:	f04f 0500 	mov.w	r5, #0
 8000802:	e00a      	b.n	800081a <__aeabi_l2d+0x16>

08000804 <__aeabi_l2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000812:	d502      	bpl.n	800081a <__aeabi_l2d+0x16>
 8000814:	4240      	negs	r0, r0
 8000816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000826:	f43f aed8 	beq.w	80005da <__adddf3+0xe6>
 800082a:	f04f 0203 	mov.w	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083a:	bf18      	it	ne
 800083c:	3203      	addne	r2, #3
 800083e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	fa00 fc03 	lsl.w	ip, r0, r3
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000852:	ea40 000e 	orr.w	r0, r0, lr
 8000856:	fa21 f102 	lsr.w	r1, r1, r2
 800085a:	4414      	add	r4, r2
 800085c:	e6bd      	b.n	80005da <__adddf3+0xe6>
 800085e:	bf00      	nop

08000860 <__aeabi_ldivmod>:
 8000860:	b97b      	cbnz	r3, 8000882 <__aeabi_ldivmod+0x22>
 8000862:	b972      	cbnz	r2, 8000882 <__aeabi_ldivmod+0x22>
 8000864:	2900      	cmp	r1, #0
 8000866:	bfbe      	ittt	lt
 8000868:	2000      	movlt	r0, #0
 800086a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800086e:	e006      	blt.n	800087e <__aeabi_ldivmod+0x1e>
 8000870:	bf08      	it	eq
 8000872:	2800      	cmpeq	r0, #0
 8000874:	bf1c      	itt	ne
 8000876:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800087a:	f04f 30ff 	movne.w	r0, #4294967295
 800087e:	f000 b9d7 	b.w	8000c30 <__aeabi_idiv0>
 8000882:	f1ad 0c08 	sub.w	ip, sp, #8
 8000886:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088a:	2900      	cmp	r1, #0
 800088c:	db09      	blt.n	80008a2 <__aeabi_ldivmod+0x42>
 800088e:	2b00      	cmp	r3, #0
 8000890:	db1a      	blt.n	80008c8 <__aeabi_ldivmod+0x68>
 8000892:	f000 f86b 	bl	800096c <__udivmoddi4>
 8000896:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800089e:	b004      	add	sp, #16
 80008a0:	4770      	bx	lr
 80008a2:	4240      	negs	r0, r0
 80008a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db1b      	blt.n	80008e4 <__aeabi_ldivmod+0x84>
 80008ac:	f000 f85e 	bl	800096c <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4240      	negs	r0, r0
 80008bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008c0:	4252      	negs	r2, r2
 80008c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008c6:	4770      	bx	lr
 80008c8:	4252      	negs	r2, r2
 80008ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008ce:	f000 f84d 	bl	800096c <__udivmoddi4>
 80008d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008da:	b004      	add	sp, #16
 80008dc:	4240      	negs	r0, r0
 80008de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008e2:	4770      	bx	lr
 80008e4:	4252      	negs	r2, r2
 80008e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008ea:	f000 f83f 	bl	800096c <__udivmoddi4>
 80008ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f6:	b004      	add	sp, #16
 80008f8:	4252      	negs	r2, r2
 80008fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fe:	4770      	bx	lr

08000900 <__aeabi_uldivmod>:
 8000900:	b953      	cbnz	r3, 8000918 <__aeabi_uldivmod+0x18>
 8000902:	b94a      	cbnz	r2, 8000918 <__aeabi_uldivmod+0x18>
 8000904:	2900      	cmp	r1, #0
 8000906:	bf08      	it	eq
 8000908:	2800      	cmpeq	r0, #0
 800090a:	bf1c      	itt	ne
 800090c:	f04f 31ff 	movne.w	r1, #4294967295
 8000910:	f04f 30ff 	movne.w	r0, #4294967295
 8000914:	f000 b98c 	b.w	8000c30 <__aeabi_idiv0>
 8000918:	f1ad 0c08 	sub.w	ip, sp, #8
 800091c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000920:	f000 f824 	bl	800096c <__udivmoddi4>
 8000924:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800092c:	b004      	add	sp, #16
 800092e:	4770      	bx	lr

08000930 <__aeabi_d2ulz>:
 8000930:	b5d0      	push	{r4, r6, r7, lr}
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__aeabi_d2ulz+0x34>)
 8000934:	2200      	movs	r2, #0
 8000936:	4606      	mov	r6, r0
 8000938:	460f      	mov	r7, r1
 800093a:	f7ff fcab 	bl	8000294 <__aeabi_dmul>
 800093e:	f000 f979 	bl	8000c34 <__aeabi_d2uiz>
 8000942:	4604      	mov	r4, r0
 8000944:	f7ff ff12 	bl	800076c <__aeabi_ui2d>
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <__aeabi_d2ulz+0x38>)
 800094a:	2200      	movs	r2, #0
 800094c:	f7ff fca2 	bl	8000294 <__aeabi_dmul>
 8000950:	4602      	mov	r2, r0
 8000952:	460b      	mov	r3, r1
 8000954:	4630      	mov	r0, r6
 8000956:	4639      	mov	r1, r7
 8000958:	f7ff fdca 	bl	80004f0 <__aeabi_dsub>
 800095c:	f000 f96a 	bl	8000c34 <__aeabi_d2uiz>
 8000960:	4621      	mov	r1, r4
 8000962:	bdd0      	pop	{r4, r6, r7, pc}
 8000964:	3df00000 	.word	0x3df00000
 8000968:	41f00000 	.word	0x41f00000

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	4604      	mov	r4, r0
 8000974:	468c      	mov	ip, r1
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8083 	bne.w	8000a82 <__udivmoddi4+0x116>
 800097c:	428a      	cmp	r2, r1
 800097e:	4617      	mov	r7, r2
 8000980:	d947      	bls.n	8000a12 <__udivmoddi4+0xa6>
 8000982:	fab2 f282 	clz	r2, r2
 8000986:	b142      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000988:	f1c2 0020 	rsb	r0, r2, #32
 800098c:	fa24 f000 	lsr.w	r0, r4, r0
 8000990:	4091      	lsls	r1, r2
 8000992:	4097      	lsls	r7, r2
 8000994:	ea40 0c01 	orr.w	ip, r0, r1
 8000998:	4094      	lsls	r4, r2
 800099a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800099e:	0c23      	lsrs	r3, r4, #16
 80009a0:	fbbc f6f8 	udiv	r6, ip, r8
 80009a4:	fa1f fe87 	uxth.w	lr, r7
 80009a8:	fb08 c116 	mls	r1, r8, r6, ip
 80009ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b0:	fb06 f10e 	mul.w	r1, r6, lr
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x60>
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80009be:	f080 8119 	bcs.w	8000bf4 <__udivmoddi4+0x288>
 80009c2:	4299      	cmp	r1, r3
 80009c4:	f240 8116 	bls.w	8000bf4 <__udivmoddi4+0x288>
 80009c8:	3e02      	subs	r6, #2
 80009ca:	443b      	add	r3, r7
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d4:	fb08 3310 	mls	r3, r8, r0, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d909      	bls.n	80009f8 <__udivmoddi4+0x8c>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ea:	f080 8105 	bcs.w	8000bf8 <__udivmoddi4+0x28c>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	f240 8102 	bls.w	8000bf8 <__udivmoddi4+0x28c>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fc:	eba4 040e 	sub.w	r4, r4, lr
 8000a00:	2600      	movs	r6, #0
 8000a02:	b11d      	cbz	r5, 8000a0c <__udivmoddi4+0xa0>
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	2300      	movs	r3, #0
 8000a08:	e9c5 4300 	strd	r4, r3, [r5]
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	b902      	cbnz	r2, 8000a16 <__udivmoddi4+0xaa>
 8000a14:	deff      	udf	#255	; 0xff
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d150      	bne.n	8000ac0 <__udivmoddi4+0x154>
 8000a1e:	1bcb      	subs	r3, r1, r7
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	2601      	movs	r6, #1
 8000a2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a2e:	0c21      	lsrs	r1, r4, #16
 8000a30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb08 f30c 	mul.w	r3, r8, ip
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0xe4>
 8000a40:	1879      	adds	r1, r7, r1
 8000a42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0xe2>
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	f200 80e9 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a4e:	4684      	mov	ip, r0
 8000a50:	1ac9      	subs	r1, r1, r3
 8000a52:	b2a3      	uxth	r3, r4
 8000a54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a60:	fb08 f800 	mul.w	r8, r8, r0
 8000a64:	45a0      	cmp	r8, r4
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x10c>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x10a>
 8000a70:	45a0      	cmp	r8, r4
 8000a72:	f200 80d9 	bhi.w	8000c28 <__udivmoddi4+0x2bc>
 8000a76:	4618      	mov	r0, r3
 8000a78:	eba4 0408 	sub.w	r4, r4, r8
 8000a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a80:	e7bf      	b.n	8000a02 <__udivmoddi4+0x96>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0x12e>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f000 80b1 	beq.w	8000bee <__udivmoddi4+0x282>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a92:	4630      	mov	r0, r6
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f683 	clz	r6, r3
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d14a      	bne.n	8000b38 <__udivmoddi4+0x1cc>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0x140>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80b8 	bhi.w	8000c1c <__udivmoddi4+0x2b0>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0103 	sbc.w	r1, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0a8      	beq.n	8000a0c <__udivmoddi4+0xa0>
 8000aba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000abe:	e7a5      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac8:	4097      	lsls	r7, r2
 8000aca:	fa01 f002 	lsl.w	r0, r1, r2
 8000ace:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad2:	40d9      	lsrs	r1, r3
 8000ad4:	4330      	orrs	r0, r6
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae8:	fb06 f108 	mul.w	r1, r6, r8
 8000aec:	4299      	cmp	r1, r3
 8000aee:	fa04 f402 	lsl.w	r4, r4, r2
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x19c>
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000afa:	f080 808d 	bcs.w	8000c18 <__udivmoddi4+0x2ac>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 808a 	bls.w	8000c18 <__udivmoddi4+0x2ac>
 8000b04:	3e02      	subs	r6, #2
 8000b06:	443b      	add	r3, r7
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b281      	uxth	r1, r0
 8000b0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b18:	fb00 f308 	mul.w	r3, r0, r8
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x1c4>
 8000b20:	1879      	adds	r1, r7, r1
 8000b22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b26:	d273      	bcs.n	8000c10 <__udivmoddi4+0x2a4>
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d971      	bls.n	8000c10 <__udivmoddi4+0x2a4>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	4439      	add	r1, r7
 8000b30:	1acb      	subs	r3, r1, r3
 8000b32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b36:	e778      	b.n	8000a2a <__udivmoddi4+0xbe>
 8000b38:	f1c6 0c20 	rsb	ip, r6, #32
 8000b3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b44:	431c      	orrs	r4, r3
 8000b46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b56:	431f      	orrs	r7, r3
 8000b58:	0c3b      	lsrs	r3, r7, #16
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fa1f f884 	uxth.w	r8, r4
 8000b62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b6e:	458a      	cmp	sl, r1
 8000b70:	fa02 f206 	lsl.w	r2, r2, r6
 8000b74:	fa00 f306 	lsl.w	r3, r0, r6
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x220>
 8000b7a:	1861      	adds	r1, r4, r1
 8000b7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b80:	d248      	bcs.n	8000c14 <__udivmoddi4+0x2a8>
 8000b82:	458a      	cmp	sl, r1
 8000b84:	d946      	bls.n	8000c14 <__udivmoddi4+0x2a8>
 8000b86:	f1a9 0902 	sub.w	r9, r9, #2
 8000b8a:	4421      	add	r1, r4
 8000b8c:	eba1 010a 	sub.w	r1, r1, sl
 8000b90:	b2bf      	uxth	r7, r7
 8000b92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ba2:	45b8      	cmp	r8, r7
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x24a>
 8000ba6:	19e7      	adds	r7, r4, r7
 8000ba8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bac:	d22e      	bcs.n	8000c0c <__udivmoddi4+0x2a0>
 8000bae:	45b8      	cmp	r8, r7
 8000bb0:	d92c      	bls.n	8000c0c <__udivmoddi4+0x2a0>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4427      	add	r7, r4
 8000bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bba:	eba7 0708 	sub.w	r7, r7, r8
 8000bbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	46c6      	mov	lr, r8
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	d31a      	bcc.n	8000c00 <__udivmoddi4+0x294>
 8000bca:	d017      	beq.n	8000bfc <__udivmoddi4+0x290>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x27a>
 8000bce:	ebb3 020e 	subs.w	r2, r3, lr
 8000bd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bda:	40f2      	lsrs	r2, r6
 8000bdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000be0:	40f7      	lsrs	r7, r6
 8000be2:	e9c5 2700 	strd	r2, r7, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e70b      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e9      	b.n	80009cc <__udivmoddi4+0x60>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6fd      	b.n	80009f8 <__udivmoddi4+0x8c>
 8000bfc:	4543      	cmp	r3, r8
 8000bfe:	d2e5      	bcs.n	8000bcc <__udivmoddi4+0x260>
 8000c00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c04:	eb69 0104 	sbc.w	r1, r9, r4
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7df      	b.n	8000bcc <__udivmoddi4+0x260>
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e7d2      	b.n	8000bb6 <__udivmoddi4+0x24a>
 8000c10:	4660      	mov	r0, ip
 8000c12:	e78d      	b.n	8000b30 <__udivmoddi4+0x1c4>
 8000c14:	4681      	mov	r9, r0
 8000c16:	e7b9      	b.n	8000b8c <__udivmoddi4+0x220>
 8000c18:	4666      	mov	r6, ip
 8000c1a:	e775      	b.n	8000b08 <__udivmoddi4+0x19c>
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e74a      	b.n	8000ab6 <__udivmoddi4+0x14a>
 8000c20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c24:	4439      	add	r1, r7
 8000c26:	e713      	b.n	8000a50 <__udivmoddi4+0xe4>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	e724      	b.n	8000a78 <__udivmoddi4+0x10c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_d2uiz>:
 8000c34:	004a      	lsls	r2, r1, #1
 8000c36:	d211      	bcs.n	8000c5c <__aeabi_d2uiz+0x28>
 8000c38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c3c:	d211      	bcs.n	8000c62 <__aeabi_d2uiz+0x2e>
 8000c3e:	d50d      	bpl.n	8000c5c <__aeabi_d2uiz+0x28>
 8000c40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c48:	d40e      	bmi.n	8000c68 <__aeabi_d2uiz+0x34>
 8000c4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c56:	fa23 f002 	lsr.w	r0, r3, r2
 8000c5a:	4770      	bx	lr
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c66:	d102      	bne.n	8000c6e <__aeabi_d2uiz+0x3a>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	4770      	bx	lr
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7a:	e003      	b.n	8000c84 <LoopCopyDataInit>

08000c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c82:	3104      	adds	r1, #4

08000c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c8c:	d3f6      	bcc.n	8000c7c <CopyDataInit>
  ldr  r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c90:	e002      	b.n	8000c98 <LoopFillZerobss>

08000c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c94:	f842 3b04 	str.w	r3, [r2], #4

08000c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c9c:	d3f9      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9e:	f000 ff57 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f01b f971 	bl	801bf88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f000 fc57 	bl	8001558 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cb0:	0803268c 	.word	0x0803268c
  ldr  r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb8:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8000cbc:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8000cc0:	20016144 	.word	0x20016144

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8000cc8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <_sbrk+0x34>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
{
 8000cce:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000cd0:	b909      	cbnz	r1, 8000cd6 <_sbrk+0xe>
		heap_end = &end;
 8000cd2:	490b      	ldr	r1, [pc, #44]	; (8000d00 <_sbrk+0x38>)
 8000cd4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8000cd8:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000cda:	6809      	ldr	r1, [r1, #0]
 8000cdc:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000cde:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 8000ce0:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d906      	bls.n	8000cf6 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000ce8:	f01a feea 	bl	801bac0 <__errno>
 8000cec:	230c      	movs	r3, #12
 8000cee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000cf4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000cf6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000cf8:	e7fc      	b.n	8000cf4 <_sbrk+0x2c>
 8000cfa:	bf00      	nop
 8000cfc:	2000036c 	.word	0x2000036c
 8000d00:	20016148 	.word	0x20016148
 8000d04:	e000ed08 	.word	0xe000ed08

08000d08 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4770      	bx	lr

08000d0c <_kill>:

int _kill(int pid, int sig)
{
 8000d0c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000d0e:	f01a fed7 	bl	801bac0 <__errno>
 8000d12:	2316      	movs	r3, #22
 8000d14:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	bd08      	pop	{r3, pc}

08000d1c <_exit>:

void _exit (int status)
{
 8000d1c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000d1e:	f01a fecf 	bl	801bac0 <__errno>
 8000d22:	2316      	movs	r3, #22
 8000d24:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000d26:	e7fe      	b.n	8000d26 <_exit+0xa>

08000d28 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	460e      	mov	r6, r1
 8000d2c:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2500      	movs	r5, #0
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	db01      	blt.n	8000d38 <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000d34:	4620      	mov	r0, r4
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8000d38:	5d70      	ldrb	r0, [r6, r5]
 8000d3a:	f000 fd25 	bl	8001788 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	3501      	adds	r5, #1
 8000d40:	e7f6      	b.n	8000d30 <_write+0x8>

08000d42 <_close>:

int _close(int file)
{
	return -1;
}
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	4770      	bx	lr

08000d48 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000d4e:	2000      	movs	r0, #0
 8000d50:	4770      	bx	lr

08000d52 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000d52:	2001      	movs	r0, #1
 8000d54:	4770      	bx	lr

08000d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000d56:	2000      	movs	r0, #0
 8000d58:	4770      	bx	lr

08000d5a <_read>:

int _read(int file, char *ptr, int len)
{
 8000d5a:	b570      	push	{r4, r5, r6, lr}
 8000d5c:	460e      	mov	r6, r1
 8000d5e:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2500      	movs	r5, #0
 8000d62:	42a5      	cmp	r5, r4
 8000d64:	db01      	blt.n	8000d6a <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8000d66:	4620      	mov	r0, r4
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8000d6a:	f3af 8000 	nop.w
 8000d6e:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	3501      	adds	r5, #1
 8000d72:	e7f6      	b.n	8000d62 <_read+0x8>

08000d74 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 8000d74:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8000d78:	07db      	lsls	r3, r3, #31
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#else    
    /* Turn On LED 1 to indicate ETH and LwIP init success*/
    BSP_LED_On(LED1);
 8000d7a:	bf4c      	ite	mi
 8000d7c:	2000      	movmi	r0, #0
#endif  /* USE_DHCP */
#ifdef USE_LCD
    LCD_UsrLog ("The network cable is not connected \n");
#else    
    /* Turn On LED 2 to indicate ETH and LwIP init error */
    BSP_LED_On(LED2);
 8000d7e:	2001      	movpl	r0, #1
 8000d80:	f000 bdf0 	b.w	8001964 <BSP_LED_On>

08000d84 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000d84:	b530      	push	{r4, r5, lr}
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
#endif
  
  if(netif_is_link_up(netif))
 8000d86:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8000d8a:	f3c3 0580 	ubfx	r5, r3, #2, #1
 8000d8e:	075b      	lsls	r3, r3, #29
{
 8000d90:	b093      	sub	sp, #76	; 0x4c
 8000d92:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 8000d94:	d520      	bpl.n	8000dd8 <ethernetif_notify_conn_changed+0x54>
  {
#ifdef USE_LCD        
    LCD_UsrLog ("The network cable is now connected \n");
#else
    BSP_LED_Off(LED2);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fdf2 	bl	8001980 <BSP_LED_Off>
    BSP_LED_On(LED1);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 fde1 	bl	8001964 <BSP_LED_On>
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
    IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000da2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <ethernetif_notify_conn_changed+0x68>)
    IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000da8:	9206      	str	r2, [sp, #24]
    IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);  
 8000daa:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8000dae:	9300      	str	r3, [sp, #0]
    IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);  
 8000db0:	32c1      	adds	r2, #193	; 0xc1
    IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8000db2:	2300      	movs	r3, #0
 8000db4:	f88d 3014 	strb.w	r3, [sp, #20]
    IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000db8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);  
 8000dbc:	920c      	str	r2, [sp, #48]	; 0x30
 8000dbe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	ab0c      	add	r3, sp, #48	; 0x30
 8000dc6:	aa06      	add	r2, sp, #24
 8000dc8:	4669      	mov	r1, sp
 8000dca:	f00d ffff 	bl	800edcc <netif_set_addr>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#endif /* USE_LCD */
#endif /* USE_DHCP */   
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);     
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f00e f914 	bl	800effc <netif_set_up>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* USE_LCD */    
  }
}
 8000dd4:	b013      	add	sp, #76	; 0x4c
 8000dd6:	bd30      	pop	{r4, r5, pc}
    netif_set_down(netif);
 8000dd8:	f00e f934 	bl	800f044 <netif_set_down>
    BSP_LED_Off(LED1);
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f000 fdcf 	bl	8001980 <BSP_LED_Off>
    BSP_LED_On(LED2);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f000 fdbe 	bl	8001964 <BSP_LED_On>
}
 8000de8:	e7f4      	b.n	8000dd4 <ethernetif_notify_conn_changed+0x50>
 8000dea:	bf00      	nop
 8000dec:	0f01a8c0 	.word	0x0f01a8c0

08000df0 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <low_level_output+0x9c>)
 8000df6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 8000df8:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000dfc:	68b3      	ldr	r3, [r6, #8]
{
 8000dfe:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8000e00:	4647      	mov	r7, r8
 8000e02:	4691      	mov	r9, r2
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000e04:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 8000e08:	b92c      	cbnz	r4, 8000e16 <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8000e0a:	4820      	ldr	r0, [pc, #128]	; (8000e8c <low_level_output+0x9c>)
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	f001 f871 	bl	8001ef4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8000e12:	4620      	mov	r0, r4
 8000e14:	e004      	b.n	8000e20 <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e16:	6832      	ldr	r2, [r6, #0]
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	da11      	bge.n	8000e40 <low_level_output+0x50>
      errval = ERR_USE;
 8000e1c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000e20:	f8d9 3000 	ldr.w	r3, [r9]
 8000e24:	f241 0214 	movw	r2, #4116	; 0x1014
 8000e28:	5899      	ldr	r1, [r3, r2]
 8000e2a:	0689      	lsls	r1, r1, #26
 8000e2c:	d505      	bpl.n	8000e3a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 8000e2e:	2120      	movs	r1, #32
 8000e30:	5099      	str	r1, [r3, r2]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 8000e32:	f241 0204 	movw	r2, #4100	; 0x1004
 8000e36:	2100      	movs	r1, #0
 8000e38:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8000e3a:	b003      	add	sp, #12
 8000e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 8000e40:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000e42:	4645      	mov	r5, r8
    payloadoffset = 0;
 8000e44:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000e48:	6861      	ldr	r1, [r4, #4]
 8000e4a:	eb05 0802 	add.w	r8, r5, r2
 8000e4e:	45d8      	cmp	r8, fp
 8000e50:	eb03 0005 	add.w	r0, r3, r5
 8000e54:	4451      	add	r1, sl
 8000e56:	d808      	bhi.n	8000e6a <low_level_output+0x7a>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000e58:	e9cd 2300 	strd	r2, r3, [sp]
 8000e5c:	f01b f9f0 	bl	801c240 <memcpy>
    framelength = framelength + byteslefttocopy;
 8000e60:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 8000e62:	6824      	ldr	r4, [r4, #0]
 8000e64:	9b01      	ldr	r3, [sp, #4]
    framelength = framelength + byteslefttocopy;
 8000e66:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 8000e68:	e7ce      	b.n	8000e08 <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8000e6a:	ebab 0505 	sub.w	r5, fp, r5
 8000e6e:	462a      	mov	r2, r5
 8000e70:	f01b f9e6 	bl	801c240 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8000e74:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e76:	6833      	ldr	r3, [r6, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	dbcf      	blt.n	8000e1c <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8000e7c:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000e7e:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8000e80:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8000e82:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 8000e86:	2500      	movs	r5, #0
 8000e88:	e7de      	b.n	8000e48 <low_level_output+0x58>
 8000e8a:	bf00      	nop
 8000e8c:	20007334 	.word	0x20007334

08000e90 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e94:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000e96:	4c36      	ldr	r4, [pc, #216]	; (8000f70 <ethernetif_input+0xe0>)
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9e:	f003 fc43 	bl	8004728 <osSemaphoreWait>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d1f8      	bne.n	8000e98 <ethernetif_input+0x8>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 8000ea6:	4e33      	ldr	r6, [pc, #204]	; (8000f74 <ethernetif_input+0xe4>)
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f001 f897 	bl	8001fdc <HAL_ETH_GetReceivedFrame_IT>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d1f0      	bne.n	8000e96 <ethernetif_input+0x6>
  len = EthHandle.RxFrameInfos.length;
 8000eb4:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
 8000eb6:	bb01      	cbnz	r1, 8000efa <ethernetif_input+0x6a>
  struct pbuf *p = NULL, *q = NULL;
 8000eb8:	2500      	movs	r5, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000eba:	6b33      	ldr	r3, [r6, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000ebc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4282      	cmp	r2, r0
 8000ec2:	d14d      	bne.n	8000f60 <ethernetif_input+0xd0>
  EthHandle.RxFrameInfos.SegCount =0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000ec8:	f241 0214 	movw	r2, #4116	; 0x1014
 8000ecc:	6833      	ldr	r3, [r6, #0]
 8000ece:	5899      	ldr	r1, [r3, r2]
 8000ed0:	0609      	lsls	r1, r1, #24
 8000ed2:	d505      	bpl.n	8000ee0 <ethernetif_input+0x50>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	5099      	str	r1, [r3, r2]
    EthHandle.Instance->DMARPDR = 0;
 8000ed8:	f241 0208 	movw	r2, #4104	; 0x1008
 8000edc:	2100      	movs	r1, #0
 8000ede:	5099      	str	r1, [r3, r2]
      do
      {
        LOCK_TCPIP_CORE();

        p = low_level_input( netif );
        if (p != NULL)
 8000ee0:	2d00      	cmp	r5, #0
 8000ee2:	d0d8      	beq.n	8000e96 <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 8000ee4:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8000ee8:	4641      	mov	r1, r8
 8000eea:	4628      	mov	r0, r5
 8000eec:	4798      	blx	r3
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d0d9      	beq.n	8000ea6 <ethernetif_input+0x16>
          {
            pbuf_free(p);
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f00e fa44 	bl	800f380 <pbuf_free>
 8000ef8:	e7d5      	b.n	8000ea6 <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000efa:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000efe:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000f00:	f00e faa6 	bl	800f450 <pbuf_alloc>
  if (p != NULL)
 8000f04:	4605      	mov	r5, r0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d0d6      	beq.n	8000eb8 <ethernetif_input+0x28>
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000f0a:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000f0e:	46b9      	mov	r9, r7
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000f10:	f240 5bf4 	movw	fp, #1524	; 0x5f4
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000f14:	4607      	mov	r7, r0
      byteslefttocopy = q->len;
 8000f16:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000f1a:	46a4      	mov	ip, r4
      payloadoffset = 0;
 8000f1c:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	eb0c 040e 	add.w	r4, ip, lr
 8000f24:	455c      	cmp	r4, fp
 8000f26:	4418      	add	r0, r3
 8000f28:	eb09 010c 	add.w	r1, r9, ip
 8000f2c:	d806      	bhi.n	8000f3c <ethernetif_input+0xac>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000f2e:	4672      	mov	r2, lr
 8000f30:	f01b f986 	bl	801c240 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8000f34:	683f      	ldr	r7, [r7, #0]
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	d1ed      	bne.n	8000f16 <ethernetif_input+0x86>
 8000f3a:	e7be      	b.n	8000eba <ethernetif_input+0x2a>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000f3c:	ebab 020c 	sub.w	r2, fp, ip
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	9200      	str	r2, [sp, #0]
 8000f44:	f01b f97c 	bl	801c240 <memcpy>
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000f48:	e9dd 2300 	ldrd	r2, r3, [sp]
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000f4c:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000f50:	f2a4 5ef4 	subw	lr, r4, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8000f54:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000f58:	4413      	add	r3, r2
        bufferoffset = 0;
 8000f5a:	f04f 0c00 	mov.w	ip, #0
 8000f5e:	e7de      	b.n	8000f1e <ethernetif_input+0x8e>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000f66:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000f68:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000f6a:	3201      	adds	r2, #1
 8000f6c:	e7a8      	b.n	8000ec0 <ethernetif_input+0x30>
 8000f6e:	bf00      	nop
 8000f70:	20000370 	.word	0x20000370
 8000f74:	20007334 	.word	0x20007334

08000f78 <HAL_ETH_MspInit>:
{
 8000f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(heth->Instance==ETH)
 8000f7c:	6802      	ldr	r2, [r0, #0]
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <HAL_ETH_MspInit+0x144>)
 8000f80:	429a      	cmp	r2, r3
{
 8000f82:	b08d      	sub	sp, #52	; 0x34
 8000f84:	4605      	mov	r5, r0
  if(heth->Instance==ETH)
 8000f86:	d166      	bne.n	8001056 <HAL_ETH_MspInit+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f88:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	9400      	str	r4, [sp, #0]
 8000f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	484b      	ldr	r0, [pc, #300]	; (80010c0 <HAL_ETH_MspInit+0x148>)
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f94:	f042 0210 	orr.w	r2, r2, #16
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9c:	f002 0210 	and.w	r2, r2, #16
 8000fa0:	9200      	str	r2, [sp, #0]
 8000fa2:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	9401      	str	r4, [sp, #4]
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa8:	f042 0204 	orr.w	r2, r2, #4
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
 8000fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb0:	f002 0204 	and.w	r2, r2, #4
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	9402      	str	r4, [sp, #8]
 8000fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc4:	f002 0201 	and.w	r2, r2, #1
 8000fc8:	9202      	str	r2, [sp, #8]
 8000fca:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	9403      	str	r4, [sp, #12]
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	9409      	str	r4, [sp, #36]	; 0x24
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	f003 0302 	and.w	r3, r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2702      	movs	r7, #2
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	260b      	movs	r6, #11
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	f04f 0832 	mov.w	r8, #50	; 0x32
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	f04f 0903 	mov.w	r9, #3
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fee:	e9cd 960a 	strd	r9, r6, [sp, #40]	; 0x28
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	e9cd 8707 	strd	r8, r7, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f001 fae0 	bl	80025bc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ffc:	2386      	movs	r3, #134	; 0x86
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	4831      	ldr	r0, [pc, #196]	; (80010c4 <HAL_ETH_MspInit+0x14c>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001000:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	e9cd 3707 	strd	r3, r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f001 fad6 	bl	80025bc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001010:	f44f 5360 	mov.w	r3, #14336	; 0x3800
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	482c      	ldr	r0, [pc, #176]	; (80010c8 <HAL_ETH_MspInit+0x150>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001016:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	e9cd 3707 	strd	r3, r7, [sp, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	2601      	movs	r6, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f001 faca 	bl	80025bc <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <HAL_ETH_MspInit+0x14c>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	970a      	str	r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	e9cd 6607 	strd	r6, r6, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f001 fac3 	bl	80025bc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8001036:	4622      	mov	r2, r4
 8001038:	4631      	mov	r1, r6
 800103a:	4822      	ldr	r0, [pc, #136]	; (80010c4 <HAL_ETH_MspInit+0x14c>)
 800103c:	f001 fb98 	bl	8002770 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001040:	4640      	mov	r0, r8
 8001042:	f000 fdd5 	bl	8001bf0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <HAL_ETH_MspInit+0x14c>)
 8001048:	4632      	mov	r2, r6
 800104a:	4631      	mov	r1, r6
 800104c:	f001 fb90 	bl	8002770 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001050:	4640      	mov	r0, r8
 8001052:	f000 fdcd 	bl	8001bf0 <HAL_Delay>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2107      	movs	r1, #7
 800105a:	203d      	movs	r0, #61	; 0x3d
 800105c:	f000 fdf4 	bl	8001c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001060:	203d      	movs	r0, #61	; 0x3d
 8001062:	f000 fe23 	bl	8001cac <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_ETH_MspInit+0x154>)
 8001068:	2200      	movs	r2, #0
 800106a:	9204      	str	r2, [sp, #16]
 800106c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001072:	6319      	str	r1, [r3, #48]	; 0x30
 8001074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001076:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 800107a:	9104      	str	r1, [sp, #16]
 800107c:	9904      	ldr	r1, [sp, #16]
 800107e:	9205      	str	r2, [sp, #20]
 8001080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001082:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001086:	6319      	str	r1, [r3, #48]	; 0x30
 8001088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800108a:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 800108e:	9105      	str	r1, [sp, #20]
 8001090:	9905      	ldr	r1, [sp, #20]
 8001092:	9206      	str	r2, [sp, #24]
 8001094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001096:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800109a:	631a      	str	r2, [r3, #48]	; 0x30
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if (heth->Init.MediaInterface == ETH_MEDIA_INTERFACE_MII)
 800109e:	6a2a      	ldr	r2, [r5, #32]
  __HAL_RCC_ETH_CLK_ENABLE();
 80010a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	9b06      	ldr	r3, [sp, #24]
  if (heth->Init.MediaInterface == ETH_MEDIA_INTERFACE_MII)
 80010a8:	b922      	cbnz	r2, 80010b4 <HAL_ETH_MspInit+0x13c>
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80010aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80010ae:	4610      	mov	r0, r2
 80010b0:	f001 fd18 	bl	8002ae4 <HAL_RCC_MCOConfig>
}
 80010b4:	b00d      	add	sp, #52	; 0x34
 80010b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ba:	bf00      	nop
 80010bc:	40028000 	.word	0x40028000
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 80010d0:	4b01      	ldr	r3, [pc, #4]	; (80010d8 <HAL_ETH_RxCpltCallback+0x8>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f003 bb4e 	b.w	8004774 <osSemaphoreRelease>
 80010d8:	20000370 	.word	0x20000370

080010dc <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80010de:	4604      	mov	r4, r0
{
 80010e0:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80010e2:	b930      	cbnz	r0, 80010f2 <ethernetif_init+0x16>
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <ethernetif_init+0xe8>)
 80010e6:	4938      	ldr	r1, [pc, #224]	; (80011c8 <ethernetif_init+0xec>)
 80010e8:	4838      	ldr	r0, [pc, #224]	; (80011cc <ethernetif_init+0xf0>)
 80010ea:	f240 12f7 	movw	r2, #503	; 0x1f7
 80010ee:	f01b fd1b 	bl	801cb28 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80010f2:	f247 4373 	movw	r3, #29811	; 0x7473
 80010f6:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
  netif->name[1] = IFNAME1;

  netif->output = etharp_output;
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <ethernetif_init+0xf4>)
 80010fc:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  netif->linkoutput = low_level_output;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <ethernetif_init+0xf8>)
  EthHandle.Instance = ETH;
 8001102:	4d35      	ldr	r5, [pc, #212]	; (80011d8 <ethernetif_init+0xfc>)
  netif->linkoutput = low_level_output;
 8001104:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001108:	4b34      	ldr	r3, [pc, #208]	; (80011dc <ethernetif_init+0x100>)
 800110a:	2601      	movs	r6, #1
 800110c:	e9c5 3600 	strd	r3, r6, [r5]
  MACAddr[0] = MAC_ADDR0;
 8001110:	2302      	movs	r3, #2
 8001112:	9301      	str	r3, [sp, #4]
  EthHandle.Init.MACAddr = &MACAddr[0];
 8001114:	ab01      	add	r3, sp, #4
  EthHandle.Init.PhyAddress = 0;
 8001116:	2700      	movs	r7, #0
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8001118:	e9c5 3605 	strd	r3, r6, [r5, #20]
	HAL_ETH_Init(&EthHandle);
 800111c:	4628      	mov	r0, r5
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800111e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  EthHandle.Init.PhyAddress = 0;
 8001122:	822f      	strh	r7, [r5, #16]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001124:	61ef      	str	r7, [r5, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001126:	622b      	str	r3, [r5, #32]
  MACAddr[4] = MAC_ADDR4;
 8001128:	f8ad 7008 	strh.w	r7, [sp, #8]
	HAL_ETH_Init(&EthHandle);
 800112c:	f001 f848 	bl	80021c0 <HAL_ETH_Init>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8001130:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001134:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <ethernetif_init+0x104>)
 8001136:	492b      	ldr	r1, [pc, #172]	; (80011e4 <ethernetif_init+0x108>)
    netif->flags |= NETIF_FLAG_LINK_UP;
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001140:	4628      	mov	r0, r5
 8001142:	2305      	movs	r3, #5
 8001144:	f000 fe60 	bl	8001e08 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8001148:	4927      	ldr	r1, [pc, #156]	; (80011e8 <ethernetif_init+0x10c>)
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <ethernetif_init+0x110>)
 800114c:	2305      	movs	r3, #5
 800114e:	4628      	mov	r0, r5
 8001150:	f000 fe96 	bl	8001e80 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8001154:	2306      	movs	r3, #6
 8001156:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
  netif->hwaddr[0] =  EthHandle.Init.MACAddr[0];
 800115a:	696b      	ldr	r3, [r5, #20]
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
  netif->hwaddr[1] =  EthHandle.Init.MACAddr[1];
 8001162:	785a      	ldrb	r2, [r3, #1]
 8001164:	f884 20d5 	strb.w	r2, [r4, #213]	; 0xd5
  netif->hwaddr[2] =  EthHandle.Init.MACAddr[2];
 8001168:	789a      	ldrb	r2, [r3, #2]
 800116a:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
  netif->hwaddr[3] =  EthHandle.Init.MACAddr[3];
 800116e:	78da      	ldrb	r2, [r3, #3]
 8001170:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
  netif->hwaddr[4] =  EthHandle.Init.MACAddr[4];
 8001174:	791a      	ldrb	r2, [r3, #4]
 8001176:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
  netif->hwaddr[5] =  EthHandle.Init.MACAddr[5];
 800117a:	795b      	ldrb	r3, [r3, #5]
 800117c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
  netif->mtu = 1500;
 8001180:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001184:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001188:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800118c:	f043 030a 	orr.w	r3, r3, #10
 8001190:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
  HAL_ETH_Start(&EthHandle);
 8001194:	4628      	mov	r0, r5
 8001196:	f001 f911 	bl	80023bc <HAL_ETH_Start>
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800119a:	4631      	mov	r1, r6
 800119c:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 800119e:	9700      	str	r7, [sp, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80011a0:	f003 faac 	bl	80046fc <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80011a4:	4e12      	ldr	r6, [pc, #72]	; (80011f0 <ethernetif_init+0x114>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <ethernetif_init+0x118>)
 80011a8:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80011aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ac:	ad03      	add	r5, sp, #12
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	6833      	ldr	r3, [r6, #0]
 80011b2:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 80011b4:	4621      	mov	r1, r4
 80011b6:	a803      	add	r0, sp, #12
 80011b8:	f003 fa24 	bl	8004604 <osThreadCreate>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80011bc:	4638      	mov	r0, r7
 80011be:	b009      	add	sp, #36	; 0x24
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0802ae82 	.word	0x0802ae82
 80011c8:	0802c112 	.word	0x0802c112
 80011cc:	0802aecf 	.word	0x0802aecf
 80011d0:	0800a0c5 	.word	0x0800a0c5
 80011d4:	08000df1 	.word	0x08000df1
 80011d8:	20007334 	.word	0x20007334
 80011dc:	40028000 	.word	0x40028000
 80011e0:	20009280 	.word	0x20009280
 80011e4:	2000737c 	.word	0x2000737c
 80011e8:	200091e0 	.word	0x200091e0
 80011ec:	2000741c 	.word	0x2000741c
 80011f0:	0801f4f0 	.word	0x0801f4f0
 80011f4:	20000370 	.word	0x20000370

080011f8 <ethernetif_update_config>:
  *         to update low level driver configuration.
  * @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80011f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
  uint32_t regvalue = 0;
  
  if(netif_is_link_up(netif))
 80011fa:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
  __IO uint32_t tickstart = 0;
 80011fe:	2100      	movs	r1, #0
{
 8001200:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8001202:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8001204:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8001206:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8001208:	d544      	bpl.n	8001294 <ethernetif_update_config+0x9c>
  { 
    /* Restart the auto-negotiation */
    if(EthHandle.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800120a:	4c24      	ldr	r4, [pc, #144]	; (800129c <ethernetif_update_config+0xa4>)
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d035      	beq.n	800127e <ethernetif_update_config+0x86>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, PHY_AUTONEGOTIATION);
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	4620      	mov	r0, r4
 8001218:	f000 ff9a 	bl	8002150 <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 800121c:	f000 fce2 	bl	8001be4 <HAL_GetTick>
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8001220:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8001222:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8001224:	aa01      	add	r2, sp, #4
 8001226:	2101      	movs	r1, #1
 8001228:	4630      	mov	r0, r6
 800122a:	f000 ff56 	bl	80020da <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800122e:	f000 fcd9 	bl	8001be4 <HAL_GetTick>
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	1ac0      	subs	r0, r0, r3
 8001236:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800123a:	d820      	bhi.n	800127e <ethernetif_update_config+0x86>
        {
          /* In case of timeout */
          goto error;
        }
        
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	069a      	lsls	r2, r3, #26
 8001240:	d5f0      	bpl.n	8001224 <ethernetif_update_config+0x2c>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&EthHandle, PHY_SR, &regvalue);
 8001242:	aa01      	add	r2, sp, #4
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <ethernetif_update_config+0xa4>)
 8001246:	211f      	movs	r1, #31
 8001248:	f000 ff47 	bl	80020da <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800124c:	9b01      	ldr	r3, [sp, #4]
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 800124e:	f013 0210 	ands.w	r2, r3, #16
 8001252:	bf18      	it	ne
 8001254:	f44f 6200 	movne.w	r2, #2048	; 0x800
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8001258:	075b      	lsls	r3, r3, #29
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        EthHandle.Init.Speed = ETH_SPEED_10M; 
 800125a:	bf4c      	ite	mi
 800125c:	2300      	movmi	r3, #0
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        EthHandle.Init.Speed = ETH_SPEED_100M;
 800125e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8001262:	60e2      	str	r2, [r4, #12]
 8001264:	60a3      	str	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
                                                     (uint16_t)(EthHandle.Init.Speed >> 1))); 
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&EthHandle, (ETH_MACInitTypeDef *) NULL);
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <ethernetif_update_config+0xa4>)
 8001268:	2100      	movs	r1, #0
 800126a:	f001 f91b 	bl	80024a4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&EthHandle);   
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <ethernetif_update_config+0xa4>)
 8001270:	f001 f8a4 	bl	80023bc <HAL_ETH_Start>
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&EthHandle);
  }

  ethernetif_notify_conn_changed(netif);
 8001274:	4628      	mov	r0, r5
 8001276:	f7ff fd85 	bl	8000d84 <ethernetif_notify_conn_changed>
}
 800127a:	b002      	add	sp, #8
 800127c:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(EthHandle.Init.Speed >> 1))); 
 800127e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001282:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
 8001284:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8001288:	b292      	uxth	r2, r2
 800128a:	2100      	movs	r1, #0
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <ethernetif_update_config+0xa4>)
 800128e:	f000 ff5f 	bl	8002150 <HAL_ETH_WritePHYRegister>
 8001292:	e7e8      	b.n	8001266 <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&EthHandle);
 8001294:	4801      	ldr	r0, [pc, #4]	; (800129c <ethernetif_update_config+0xa4>)
 8001296:	f001 f8cb 	bl	8002430 <HAL_ETH_Stop>
 800129a:	e7eb      	b.n	8001274 <ethernetif_update_config+0x7c>
 800129c:	20007334 	.word	0x20007334

080012a0 <sys_now>:
  */  
}

u32_t sys_now(void)
{
  return HAL_GetTick();
 80012a0:	f000 bca0 	b.w	8001be4 <HAL_GetTick>

080012a4 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 80012a4:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 2, WEBSERVER_THREAD_PRIO);
 80012a6:	2301      	movs	r3, #1
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4905      	ldr	r1, [pc, #20]	; (80012c0 <http_server_socket_init+0x1c>)
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <http_server_socket_init+0x20>)
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	2200      	movs	r2, #0
 80012b4:	f013 fae0 	bl	8014878 <sys_thread_new>
}
 80012b8:	b003      	add	sp, #12
 80012ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80012be:	bf00      	nop
 80012c0:	08001429 	.word	0x08001429
 80012c4:	0802aef7 	.word	0x0802aef7

080012c8 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 80012c8:	b530      	push	{r4, r5, lr}
  portCHAR pagehits[10];

  memset(PAGE_BODY, 0,512);
 80012ca:	4c1d      	ldr	r4, [pc, #116]	; (8001340 <DynWebPage+0x78>)
{
 80012cc:	b085      	sub	sp, #20
 80012ce:	4605      	mov	r5, r0
  memset(PAGE_BODY, 0,512);
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	2100      	movs	r1, #0
 80012d6:	4620      	mov	r0, r4
 80012d8:	f01a ffda 	bl	801c290 <memset>

  /* Update the hit count */
  nPageHits++;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <DynWebPage+0x7c>)
  sprintf( pagehits, "%d", (int)nPageHits );
 80012de:	491a      	ldr	r1, [pc, #104]	; (8001348 <DynWebPage+0x80>)
  nPageHits++;
 80012e0:	681a      	ldr	r2, [r3, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 80012e2:	a801      	add	r0, sp, #4
  nPageHits++;
 80012e4:	3201      	adds	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 80012e8:	f01b fcf0 	bl	801cccc <siprintf>
  strcat(PAGE_BODY, pagehits);
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	4620      	mov	r0, r4
 80012f0:	f01b fd51 	bl	801cd96 <strcat>
  strcat((char *) PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 80012f4:	4915      	ldr	r1, [pc, #84]	; (800134c <DynWebPage+0x84>)
 80012f6:	4620      	mov	r0, r4
 80012f8:	f01b fd4d 	bl	801cd96 <strcat>
  strcat((char *) PAGE_BODY, "<br>---------------------------------------------<br>"); 
 80012fc:	4914      	ldr	r1, [pc, #80]	; (8001350 <DynWebPage+0x88>)
 80012fe:	4620      	mov	r0, r4
 8001300:	f01b fd49 	bl	801cd96 <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001304:	4620      	mov	r0, r4
 8001306:	f7fe ffbd 	bl	8000284 <strlen>
 800130a:	4420      	add	r0, r4
 800130c:	f003 faa6 	bl	800485c <osThreadList>
  strcat((char *) PAGE_BODY, "<br><br>---------------------------------------------"); 
 8001310:	4910      	ldr	r1, [pc, #64]	; (8001354 <DynWebPage+0x8c>)
 8001312:	4620      	mov	r0, r4
 8001314:	f01b fd3f 	bl	801cd96 <strcat>
  strcat((char *) PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001318:	490f      	ldr	r1, [pc, #60]	; (8001358 <DynWebPage+0x90>)
 800131a:	4620      	mov	r0, r4
 800131c:	f01b fd3b 	bl	801cd96 <strcat>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <DynWebPage+0x94>)
 8001322:	f240 623b 	movw	r2, #1595	; 0x63b
 8001326:	4628      	mov	r0, r5
 8001328:	f006 ff42 	bl	80081b0 <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 800132c:	4620      	mov	r0, r4
 800132e:	f7fe ffa9 	bl	8000284 <strlen>
 8001332:	4621      	mov	r1, r4
 8001334:	4602      	mov	r2, r0
 8001336:	4628      	mov	r0, r5
 8001338:	f006 ff3a 	bl	80081b0 <lwip_write>
}
 800133c:	b005      	add	sp, #20
 800133e:	bd30      	pop	{r4, r5, pc}
 8001340:	2000b044 	.word	0x2000b044
 8001344:	20000374 	.word	0x20000374
 8001348:	080323d4 	.word	0x080323d4
 800134c:	0802aefc 	.word	0x0802aefc
 8001350:	0802af30 	.word	0x0802af30
 8001354:	0802af66 	.word	0x0802af66
 8001358:	0802af9c 	.word	0x0802af9c
 800135c:	0801f504 	.word	0x0801f504

08001360 <http_server_serve>:
{
 8001360:	b510      	push	{r4, lr}
 8001362:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
  ret = read(conn, recv_buffer, buflen); 
 8001366:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800136a:	a905      	add	r1, sp, #20
{
 800136c:	4604      	mov	r4, r0
  ret = read(conn, recv_buffer, buflen); 
 800136e:	f006 fc6b 	bl	8007c48 <lwip_read>
  if(ret < 0) return;
 8001372:	2800      	cmp	r0, #0
 8001374:	db2e      	blt.n	80013d4 <http_server_serve+0x74>
  if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/ST.gif",27)==0)
 8001376:	4921      	ldr	r1, [pc, #132]	; (80013fc <http_server_serve+0x9c>)
 8001378:	221b      	movs	r2, #27
 800137a:	a805      	add	r0, sp, #20
 800137c:	f01c fc6e 	bl	801dc5c <strncmp>
 8001380:	b960      	cbnz	r0, 800139c <http_server_serve+0x3c>
    fs_open(&file, "/STM32F4xx_files/ST.gif"); 
 8001382:	491f      	ldr	r1, [pc, #124]	; (8001400 <http_server_serve+0xa0>)
    fs_open(&file, "/404.html");
 8001384:	4668      	mov	r0, sp
 8001386:	f013 fa99 	bl	80148bc <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 800138a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800138e:	4620      	mov	r0, r4
 8001390:	f006 ff0e 	bl	80081b0 <lwip_write>
    fs_close(&file);
 8001394:	4668      	mov	r0, sp
 8001396:	f013 fab1 	bl	80148fc <fs_close>
 800139a:	e018      	b.n	80013ce <http_server_serve+0x6e>
  else if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/stm32.jpg",30)==0)
 800139c:	4919      	ldr	r1, [pc, #100]	; (8001404 <http_server_serve+0xa4>)
 800139e:	221e      	movs	r2, #30
 80013a0:	a805      	add	r0, sp, #20
 80013a2:	f01c fc5b 	bl	801dc5c <strncmp>
 80013a6:	b908      	cbnz	r0, 80013ac <http_server_serve+0x4c>
    fs_open(&file, "/STM32F4xx_files/stm32.jpg"); 
 80013a8:	4917      	ldr	r1, [pc, #92]	; (8001408 <http_server_serve+0xa8>)
 80013aa:	e7eb      	b.n	8001384 <http_server_serve+0x24>
  else if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/logo.jpg", 29) == 0)
 80013ac:	4917      	ldr	r1, [pc, #92]	; (800140c <http_server_serve+0xac>)
 80013ae:	221d      	movs	r2, #29
 80013b0:	a805      	add	r0, sp, #20
 80013b2:	f01c fc53 	bl	801dc5c <strncmp>
 80013b6:	b908      	cbnz	r0, 80013bc <http_server_serve+0x5c>
    fs_open(&file, "/STM32F4xx_files/logo.jpg"); 
 80013b8:	4915      	ldr	r1, [pc, #84]	; (8001410 <http_server_serve+0xb0>)
 80013ba:	e7e3      	b.n	8001384 <http_server_serve+0x24>
  else if(strncmp((char *)recv_buffer, "GET /STM32F4xxTASKS.html", 24) == 0)
 80013bc:	4915      	ldr	r1, [pc, #84]	; (8001414 <http_server_serve+0xb4>)
 80013be:	2218      	movs	r2, #24
 80013c0:	a805      	add	r0, sp, #20
 80013c2:	f01c fc4b 	bl	801dc5c <strncmp>
 80013c6:	b940      	cbnz	r0, 80013da <http_server_serve+0x7a>
    DynWebPage(conn);
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ff7d 	bl	80012c8 <DynWebPage>
  close(conn);
 80013ce:	4620      	mov	r0, r4
 80013d0:	f006 fae6 	bl	80079a0 <lwip_close>
}
 80013d4:	f50d 6dbe 	add.w	sp, sp, #1520	; 0x5f0
 80013d8:	bd10      	pop	{r4, pc}
  else if((strncmp((char *)recv_buffer, "GET /STM32F4xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 80013da:	490f      	ldr	r1, [pc, #60]	; (8001418 <http_server_serve+0xb8>)
 80013dc:	2213      	movs	r2, #19
 80013de:	a805      	add	r0, sp, #20
 80013e0:	f01c fc3c 	bl	801dc5c <strncmp>
 80013e4:	b128      	cbz	r0, 80013f2 <http_server_serve+0x92>
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <http_server_serve+0xbc>)
 80013e8:	2206      	movs	r2, #6
 80013ea:	a805      	add	r0, sp, #20
 80013ec:	f01c fc36 	bl	801dc5c <strncmp>
 80013f0:	b908      	cbnz	r0, 80013f6 <http_server_serve+0x96>
    fs_open(&file, "/STM32F4xx.html"); 
 80013f2:	490b      	ldr	r1, [pc, #44]	; (8001420 <http_server_serve+0xc0>)
 80013f4:	e7c6      	b.n	8001384 <http_server_serve+0x24>
    fs_open(&file, "/404.html");
 80013f6:	490b      	ldr	r1, [pc, #44]	; (8001424 <http_server_serve+0xc4>)
 80013f8:	e7c4      	b.n	8001384 <http_server_serve+0x24>
 80013fa:	bf00      	nop
 80013fc:	0802afd7 	.word	0x0802afd7
 8001400:	0802afdb 	.word	0x0802afdb
 8001404:	0802aff3 	.word	0x0802aff3
 8001408:	0802aff7 	.word	0x0802aff7
 800140c:	0802b012 	.word	0x0802b012
 8001410:	0802b016 	.word	0x0802b016
 8001414:	0802b030 	.word	0x0802b030
 8001418:	0802b049 	.word	0x0802b049
 800141c:	0802b05d 	.word	0x0802b05d
 8001420:	0802b04d 	.word	0x0802b04d
 8001424:	0802b064 	.word	0x0802b064

08001428 <http_server_socket_thread>:
{
 8001428:	b510      	push	{r4, lr}
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 800142a:	2200      	movs	r2, #0
{
 800142c:	b08a      	sub	sp, #40	; 0x28
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 800142e:	2101      	movs	r1, #1
 8001430:	2002      	movs	r0, #2
 8001432:	f006 fe77 	bl	8008124 <lwip_socket>
 8001436:	1e04      	subs	r4, r0, #0
 8001438:	db1e      	blt.n	8001478 <http_server_socket_thread+0x50>
  address.sin_family = AF_INET;
 800143a:	2302      	movs	r3, #2
  address.sin_port = htons(80);
 800143c:	2050      	movs	r0, #80	; 0x50
  address.sin_family = AF_INET;
 800143e:	f88d 3009 	strb.w	r3, [sp, #9]
  address.sin_port = htons(80);
 8001442:	f00c fe2d 	bl	800e0a0 <lwip_htons>
  address.sin_addr.s_addr = INADDR_ANY;
 8001446:	2300      	movs	r3, #0
  address.sin_port = htons(80);
 8001448:	f8ad 000a 	strh.w	r0, [sp, #10]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 800144c:	2210      	movs	r2, #16
 800144e:	a902      	add	r1, sp, #8
 8001450:	4620      	mov	r0, r4
  address.sin_addr.s_addr = INADDR_ANY;
 8001452:	9303      	str	r3, [sp, #12]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8001454:	f006 fa4a 	bl	80078ec <lwip_bind>
 8001458:	2800      	cmp	r0, #0
 800145a:	db0d      	blt.n	8001478 <http_server_socket_thread+0x50>
  listen(sock, 5);
 800145c:	2105      	movs	r1, #5
 800145e:	4620      	mov	r0, r4
 8001460:	f006 fb70 	bl	8007b44 <lwip_listen>
  size = sizeof(remotehost);
 8001464:	2310      	movs	r3, #16
 8001466:	9301      	str	r3, [sp, #4]
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001468:	aa01      	add	r2, sp, #4
 800146a:	a906      	add	r1, sp, #24
 800146c:	4620      	mov	r0, r4
 800146e:	f006 f983 	bl	8007778 <lwip_accept>
    http_server_serve(newconn);
 8001472:	f7ff ff75 	bl	8001360 <http_server_serve>
  while (1) 
 8001476:	e7f7      	b.n	8001468 <http_server_socket_thread+0x40>
}
 8001478:	b00a      	add	sp, #40	; 0x28
 800147a:	bd10      	pop	{r4, pc}

0800147c <ToggleLed4>:
  * @brief  Toggle LED4 thread
  * @param  pvParameters not used
  * @retval None
  */
static void ToggleLed4(void const * argument)
{
 800147c:	b508      	push	{r3, lr}
  for( ;; )
  {
    /* Toggle LED4 each 250ms */
    BSP_LED_Toggle(LED4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 fa8c 	bl	800199c <BSP_LED_Toggle>
    osDelay(250);
 8001484:	20fa      	movs	r0, #250	; 0xfa
 8001486:	f003 f8da 	bl	800463e <osDelay>
  for( ;; )
 800148a:	e7f8      	b.n	800147e <ToggleLed4+0x2>

0800148c <StartThread>:
{
 800148c:	b500      	push	{lr}
  BSP_LED_Init(LED1);
 800148e:	2000      	movs	r0, #0
{
 8001490:	b097      	sub	sp, #92	; 0x5c
  BSP_LED_Init(LED1);
 8001492:	f000 fa13 	bl	80018bc <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fa10 	bl	80018bc <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 fa0d 	bl	80018bc <BSP_LED_Init>
  tcpip_init(NULL, NULL);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4608      	mov	r0, r1
 80014a6:	f007 f96d 	bl	8008784 <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 80014aa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80014ae:	920a      	str	r2, [sp, #40]	; 0x28
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 80014b0:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
 80014b4:	32c1      	adds	r2, #193	; 0xc1
 80014b6:	9210      	str	r2, [sp, #64]	; 0x40
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <StartThread+0xb4>)
 80014ba:	4c22      	ldr	r4, [pc, #136]	; (8001544 <StartThread+0xb8>)
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <StartThread+0xbc>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014be:	9202      	str	r2, [sp, #8]
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <StartThread+0xc0>)
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014c6:	e9cd 3200 	strd	r3, r2, [sp]
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 80014ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 80014ce:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 80014d2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014d6:	aa0a      	add	r2, sp, #40	; 0x28
 80014d8:	ab10      	add	r3, sp, #64	; 0x40
 80014da:	a904      	add	r1, sp, #16
 80014dc:	4620      	mov	r0, r4
 80014de:	f00d fca7 	bl	800ee30 <netif_add>
  netif_set_default(&gnetif);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f00d fd84 	bl	800eff0 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80014e8:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 80014ec:	075b      	lsls	r3, r3, #29
    netif_set_up(&gnetif);
 80014ee:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 80014f0:	d522      	bpl.n	8001538 <StartThread+0xac>
    netif_set_up(&gnetif);
 80014f2:	f00d fd83 	bl	800effc <netif_set_up>
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80014f6:	4916      	ldr	r1, [pc, #88]	; (8001550 <StartThread+0xc4>)
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <StartThread+0xb8>)
  osThreadDef(LED4, ToggleLed4, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 80014fa:	4c16      	ldr	r4, [pc, #88]	; (8001554 <StartThread+0xc8>)
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80014fc:	f00d fdc6 	bl	800f08c <netif_set_link_callback>
  http_server_socket_init();
 8001500:	f7ff fed0 	bl	80012a4 <http_server_socket_init>
  User_notification(&gnetif);
 8001504:	480f      	ldr	r0, [pc, #60]	; (8001544 <StartThread+0xb8>)
 8001506:	f7ff fc35 	bl	8000d74 <User_notification>
  osThreadDef(LED4, ToggleLed4, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	ad0a      	add	r5, sp, #40	; 0x28
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	f854 3b04 	ldr.w	r3, [r4], #4
 8001514:	602b      	str	r3, [r5, #0]
  osThreadCreate(osThread(LED4), NULL);
 8001516:	2100      	movs	r1, #0
 8001518:	a80a      	add	r0, sp, #40	; 0x28
 800151a:	f003 f873 	bl	8004604 <osThreadCreate>
  osThreadDef(coap_th, coap_server, osPriorityLow, 0, configMINIMAL_STACK_SIZE *8);
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	ad10      	add	r5, sp, #64	; 0x40
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	602b      	str	r3, [r5, #0]
  osThreadCreate(osThread(coap_th), NULL);
 8001528:	2100      	movs	r1, #0
 800152a:	a810      	add	r0, sp, #64	; 0x40
 800152c:	f003 f86a 	bl	8004604 <osThreadCreate>
    osThreadTerminate(NULL);
 8001530:	2000      	movs	r0, #0
 8001532:	f003 f87f 	bl	8004634 <osThreadTerminate>
  for( ;; )
 8001536:	e7fb      	b.n	8001530 <StartThread+0xa4>
    netif_set_down(&gnetif);
 8001538:	f00d fd84 	bl	800f044 <netif_set_down>
 800153c:	e7db      	b.n	80014f6 <StartThread+0x6a>
 800153e:	bf00      	nop
 8001540:	080086ad 	.word	0x080086ad
 8001544:	2000b24c 	.word	0x2000b24c
 8001548:	0f01a8c0 	.word	0x0f01a8c0
 800154c:	080010dd 	.word	0x080010dd
 8001550:	080011f9 	.word	0x080011f9
 8001554:	0801fb40 	.word	0x0801fb40

08001558 <main>:
{
 8001558:	b500      	push	{lr}
 800155a:	b095      	sub	sp, #84	; 0x54
  HAL_Init();  
 800155c:	f000 fb20 	bl	8001ba0 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2400      	movs	r4, #0
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <main+0xb0>)
 8001564:	9401      	str	r4, [sp, #4]
 8001566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001568:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <main+0xb4>)
 800157a:	9402      	str	r4, [sp, #8]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	9302      	str	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001598:	2502      	movs	r5, #2
 800159a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800159e:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a2:	2119      	movs	r1, #25
 80015a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015a8:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015ac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ae:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b2:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015b4:	f001 f8ea 	bl	800278c <HAL_RCC_OscConfig>
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80015b8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80015be:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80015ca:	2105      	movs	r1, #5
 80015cc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80015d0:	f001 fb02 	bl	8002bd8 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80015d4:	f000 fb20 	bl	8001c18 <HAL_GetREVID>
 80015d8:	f241 0301 	movw	r3, #4097	; 0x1001
 80015dc:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015de:	bf08      	it	eq
 80015e0:	4a0b      	ldreq	r2, [pc, #44]	; (8001610 <main+0xb8>)
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80015e2:	4d0c      	ldr	r5, [pc, #48]	; (8001614 <main+0xbc>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	bf02      	ittt	eq
 80015e6:	6813      	ldreq	r3, [r2, #0]
 80015e8:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80015ec:	6013      	streq	r3, [r2, #0]
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	ac08      	add	r4, sp, #32
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 80015f8:	2100      	movs	r1, #0
 80015fa:	a808      	add	r0, sp, #32
 80015fc:	f003 f802 	bl	8004604 <osThreadCreate>
  osKernelStart();
 8001600:	f002 fff4 	bl	80045ec <osKernelStart>
  for( ;; );
 8001604:	e7fe      	b.n	8001604 <main+0xac>
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000
 8001610:	40023c00 	.word	0x40023c00
 8001614:	0801fb68 	.word	0x0801fb68

08001618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001618:	b510      	push	{r4, lr}
 800161a:	4601      	mov	r1, r0
 800161c:	b088      	sub	sp, #32
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800161e:	2200      	movs	r2, #0
 8001620:	2036      	movs	r0, #54	; 0x36
 8001622:	f000 fb11 	bl	8001c48 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001626:	2036      	movs	r0, #54	; 0x36
 8001628:	f000 fb40 	bl	8001cac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_InitTick+0x78>)
 8001632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001634:	f042 0210 	orr.w	r2, r2, #16
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001642:	a901      	add	r1, sp, #4
 8001644:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001646:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f001 fb78 	bl	8002d3c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 800164c:	9b06      	ldr	r3, [sp, #24]
 800164e:	b9cb      	cbnz	r3, 8001684 <HAL_InitTick+0x6c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001650:	f001 fb64 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001654:	4c0f      	ldr	r4, [pc, #60]	; (8001694 <HAL_InitTick+0x7c>)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_InitTick+0x80>)
 8001658:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800165a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800165e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_InitTick+0x84>)
 8001662:	fbb0 f0f3 	udiv	r0, r0, r3
 8001666:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001668:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800166a:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800166c:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 800166e:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001674:	f001 fcc8 	bl	8003008 <HAL_TIM_Base_Init>
 8001678:	b940      	cbnz	r0, 800168c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800167a:	4620      	mov	r0, r4
 800167c:	f001 fb7e 	bl	8002d7c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001680:	b008      	add	sp, #32
 8001682:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001684:	f001 fb4a 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 8001688:	0040      	lsls	r0, r0, #1
 800168a:	e7e3      	b.n	8001654 <HAL_InitTick+0x3c>
  return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e7f7      	b.n	8001680 <HAL_InitTick+0x68>
 8001690:	40023800 	.word	0x40023800
 8001694:	2000b334 	.word	0x2000b334
 8001698:	40001000 	.word	0x40001000
 800169c:	000f4240 	.word	0x000f4240

080016a0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 80016a0:	f000 ba94 	b.w	8001bcc <HAL_IncTick>

080016a4 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <TIM6_DAC_IRQHandler+0x8>)
 80016a6:	f001 bba7 	b.w	8002df8 <HAL_TIM_IRQHandler>
 80016aa:	bf00      	nop
 80016ac:	2000b334 	.word	0x2000b334

080016b0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80016b0:	4770      	bx	lr

080016b2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler>

080016b4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler>

080016b6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler>

080016b8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler>

080016ba <DebugMon_Handler>:
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 80016bc:	f003 b8c4 	b.w	8004848 <osSystickHandler>

080016c0 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 80016c0:	4801      	ldr	r0, [pc, #4]	; (80016c8 <ETH_IRQHandler+0x8>)
 80016c2:	f000 bcd2 	b.w	800206a <HAL_ETH_IRQHandler>
 80016c6:	bf00      	nop
 80016c8:	20007334 	.word	0x20007334

080016cc <clock_gettime>:
#include "time.h"
extern RTC_HandleTypeDef RtcHandle;

//int clock_gettime_test (struct timespec *tp)
int clock_gettime (clockid_t clock_id, struct timespec *tp)
{
 80016cc:	b570      	push	{r4, r5, r6, lr}
  
//  RTC_DateTypeDef sdatestructureget;
//  RTC_TimeTypeDef stimestructureget;
  
  
  if (tp == NULL) {
 80016ce:	460c      	mov	r4, r1
 80016d0:	b199      	cbz	r1, 80016fa <clock_gettime+0x2e>
//  /* Get the RTC current Date */
//  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
//
//  tp->tv_sec = stimestructureget.Seconds + stimestructureget.Minutes * 60;
//  tp->tv_nsec = 0;
  tp->tv_sec= osKernelSysTick()/1000;
 80016d2:	f002 ff90 	bl	80045f6 <osKernelSysTick>
 80016d6:	2500      	movs	r5, #0
 80016d8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80016dc:	fbb0 f0f6 	udiv	r0, r0, r6
 80016e0:	e9c4 0500 	strd	r0, r5, [r4]
  tp->tv_nsec = (osKernelSysTick() % 1000 ) *1000000;
 80016e4:	f002 ff87 	bl	80045f6 <osKernelSysTick>
 80016e8:	fbb0 f3f6 	udiv	r3, r0, r6
 80016ec:	fb03 0616 	mls	r6, r3, r6, r0
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <clock_gettime+0x34>)
 80016f2:	4346      	muls	r6, r0
 80016f4:	60a6      	str	r6, [r4, #8]
  return 0;
 80016f6:	4628      	mov	r0, r5
} 
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
          return -1;
 80016fa:	f04f 30ff 	mov.w	r0, #4294967295
 80016fe:	e7fb      	b.n	80016f8 <clock_gettime+0x2c>
 8001700:	000f4240 	.word	0x000f4240

08001704 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001708:	4d1c      	ldr	r5, [pc, #112]	; (800177c <LCD_LOG_UpdateDisplay+0x78>)
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <LCD_LOG_UpdateDisplay+0x7c>)
 800170c:	882b      	ldrh	r3, [r5, #0]
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	4f1c      	ldr	r7, [pc, #112]	; (8001784 <LCD_LOG_UpdateDisplay+0x80>)
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d811      	bhi.n	800173a <LCD_LOG_UpdateDisplay+0x36>
 8001716:	4293      	cmp	r3, r2
 8001718:	d311      	bcc.n	800173e <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800171a:	2484      	movs	r4, #132	; 0x84
 800171c:	fb04 7303 	mla	r3, r4, r3, r7
 8001720:	f8b3 0080 	ldrh.w	r0, [r3, #128]	; 0x80
 8001724:	f000 f94e 	bl	80019c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001728:	8829      	ldrh	r1, [r5, #0]
 800172a:	1d08      	adds	r0, r1, #4
 800172c:	b280      	uxth	r0, r0
 800172e:	fb04 7101 	mla	r1, r4, r1, r7
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8001732:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001736:	f000 b9fd 	b.w	8001b34 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800173a:	4293      	cmp	r3, r2
 800173c:	d201      	bcs.n	8001742 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800173e:	3375      	adds	r3, #117	; 0x75
 8001740:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8001742:	3b10      	subs	r3, #16
 8001744:	b29c      	uxth	r4, r3
 8001746:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001748:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800174c:	f04f 0984 	mov.w	r9, #132	; 0x84
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001750:	19a1      	adds	r1, r4, r6
 8001752:	fbb1 f5f8 	udiv	r5, r1, r8
 8001756:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800175a:	fb09 7505 	mla	r5, r9, r5, r7
 800175e:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
 8001762:	f000 f92f 	bl	80019c4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001766:	1d30      	adds	r0, r6, #4
 8001768:	4629      	mov	r1, r5
 800176a:	b280      	uxth	r0, r0
 800176c:	3601      	adds	r6, #1
 800176e:	f000 f9e1 	bl	8001b34 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001772:	2e11      	cmp	r6, #17
 8001774:	d1ec      	bne.n	8001750 <LCD_LOG_UpdateDisplay+0x4c>
}
 8001776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800177a:	bf00      	nop
 800177c:	2000b380 	.word	0x2000b380
 8001780:	2000b388 	.word	0x2000b388
 8001784:	2000b38c 	.word	0x2000b38c

08001788 <__io_putchar>:
{
 8001788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178c:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800178e:	f000 f91f 	bl	80019d0 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <__io_putchar+0x104>)
 8001794:	781b      	ldrb	r3, [r3, #0]
  sFONT *cFont = BSP_LCD_GetFont();
 8001796:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 8001798:	bb43      	cbnz	r3, 80017ec <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <__io_putchar+0x108>)
 800179c:	4c3d      	ldr	r4, [pc, #244]	; (8001894 <__io_putchar+0x10c>)
 800179e:	7811      	ldrb	r1, [r2, #0]
 80017a0:	2901      	cmp	r1, #1
 80017a2:	d10b      	bne.n	80017bc <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80017a4:	493c      	ldr	r1, [pc, #240]	; (8001898 <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 80017a6:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80017a8:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80017ac:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80017ae:	493c      	ldr	r1, [pc, #240]	; (80018a0 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 80017b0:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80017b2:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 80017b4:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80017b6:	493c      	ldr	r1, [pc, #240]	; (80018a8 <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 80017b8:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80017ba:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80017bc:	4f3b      	ldr	r7, [pc, #236]	; (80018ac <__io_putchar+0x124>)
 80017be:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80018b8 <__io_putchar+0x130>
 80017c2:	883e      	ldrh	r6, [r7, #0]
 80017c4:	f000 f8f6 	bl	80019b4 <BSP_LCD_GetXSize>
 80017c8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80017cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80017d0:	4286      	cmp	r6, r0
 80017d2:	463e      	mov	r6, r7
 80017d4:	d20d      	bcs.n	80017f2 <__io_putchar+0x6a>
 80017d6:	2d0a      	cmp	r5, #10
 80017d8:	d00b      	beq.n	80017f2 <__io_putchar+0x6a>
 80017da:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80017dc:	8823      	ldrh	r3, [r4, #0]
 80017de:	1c51      	adds	r1, r2, #1
 80017e0:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80017e2:	2184      	movs	r1, #132	; 0x84
 80017e4:	fb01 9903 	mla	r9, r1, r3, r9
 80017e8:	f809 5002 	strb.w	r5, [r9, r2]
}
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80017f2:	4f2d      	ldr	r7, [pc, #180]	; (80018a8 <__io_putchar+0x120>)
 80017f4:	8822      	ldrh	r2, [r4, #0]
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d809      	bhi.n	8001810 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 80017fc:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <__io_putchar+0x128>)
 80017fe:	7811      	ldrb	r1, [r2, #0]
 8001800:	2900      	cmp	r1, #0
 8001802:	d135      	bne.n	8001870 <__io_putchar+0xe8>
          LCD_CacheBuffer_yptr_top++;
 8001804:	3301      	adds	r3, #1
 8001806:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001808:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 800180a:	bf14      	ite	ne
 800180c:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 800180e:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001810:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001814:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001818:	f000 f8cc 	bl	80019b4 <BSP_LCD_GetXSize>
 800181c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8001820:	fbb0 f0f2 	udiv	r0, r0, r2
 8001824:	4550      	cmp	r0, sl
 8001826:	f04f 0320 	mov.w	r3, #32
 800182a:	d824      	bhi.n	8001876 <__io_putchar+0xee>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800182c:	8823      	ldrh	r3, [r4, #0]
 800182e:	2284      	movs	r2, #132	; 0x84
 8001830:	fb02 9303 	mla	r3, r2, r3, r9
 8001834:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <__io_putchar+0x12c>)
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_CacheBuffer_xptr = 0;
 800183c:	f04f 0800 	mov.w	r8, #0
 8001840:	f8a6 8000 	strh.w	r8, [r6]
      LCD_LOG_UpdateDisplay (); 
 8001844:	f7ff ff5e 	bl	8001704 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8001848:	8823      	ldrh	r3, [r4, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800184e:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001850:	bf09      	itett	eq
 8001852:	4a17      	ldreq	r2, [pc, #92]	; (80018b0 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 8001854:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8001856:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_bottom = 0;
 8001858:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 800185c:	bf04      	itt	eq
 800185e:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001860:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 8001862:	2d0a      	cmp	r5, #10
 8001864:	d0c2      	beq.n	80017ec <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001866:	8832      	ldrh	r2, [r6, #0]
 8001868:	8823      	ldrh	r3, [r4, #0]
 800186a:	1c51      	adds	r1, r2, #1
 800186c:	8031      	strh	r1, [r6, #0]
 800186e:	e7b8      	b.n	80017e2 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	7013      	strb	r3, [r2, #0]
 8001874:	e7cc      	b.n	8001810 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001876:	8822      	ldrh	r2, [r4, #0]
 8001878:	8831      	ldrh	r1, [r6, #0]
 800187a:	fb0b 9202 	mla	r2, fp, r2, r9
 800187e:	1c48      	adds	r0, r1, #1
 8001880:	5453      	strb	r3, [r2, r1]
 8001882:	8030      	strh	r0, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001884:	f10a 0a01 	add.w	sl, sl, #1
 8001888:	e7c6      	b.n	8001818 <__io_putchar+0x90>
 800188a:	bf00      	nop
 800188c:	2000b385 	.word	0x2000b385
 8001890:	2000b38a 	.word	0x2000b38a
 8001894:	2000b380 	.word	0x2000b380
 8001898:	2000b37c 	.word	0x2000b37c
 800189c:	2000b386 	.word	0x2000b386
 80018a0:	2000b37e 	.word	0x2000b37e
 80018a4:	2000efe4 	.word	0x2000efe4
 80018a8:	2000b388 	.word	0x2000b388
 80018ac:	2000b382 	.word	0x2000b382
 80018b0:	2000b384 	.word	0x2000b384
 80018b4:	2000efe0 	.word	0x2000efe0
 80018b8:	2000b38c 	.word	0x2000b38c

080018bc <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80018bc:	b500      	push	{lr}
 80018be:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80018c0:	b9e0      	cbnz	r0, 80018fc <BSP_LED_Init+0x40>
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <BSP_LED_Init+0x9c>)
 80018c4:	9001      	str	r0, [sp, #4]
 80018c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c8:	f042 0208 	orr.w	r2, r2, #8
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <BSP_LED_Init+0xa0>)
 80018da:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80018de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80018e6:	2302      	movs	r3, #2
 80018e8:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <BSP_LED_Init+0xa4>)
 80018ec:	a905      	add	r1, sp, #20
 80018ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80018f2:	f000 fe63 	bl	80025bc <HAL_GPIO_Init>
}
 80018f6:	b00b      	add	sp, #44	; 0x2c
 80018f8:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 80018fc:	2801      	cmp	r0, #1
 80018fe:	d10c      	bne.n	800191a <BSP_LED_Init+0x5e>
 8001900:	2300      	movs	r3, #0
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <BSP_LED_Init+0x9c>)
 8001906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001908:	f042 0208 	orr.w	r2, r2, #8
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	9b02      	ldr	r3, [sp, #8]
 8001918:	e7de      	b.n	80018d8 <BSP_LED_Init+0x1c>
 800191a:	2802      	cmp	r0, #2
 800191c:	d10c      	bne.n	8001938 <BSP_LED_Init+0x7c>
 800191e:	2300      	movs	r3, #0
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <BSP_LED_Init+0x9c>)
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	f042 0208 	orr.w	r2, r2, #8
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	9303      	str	r3, [sp, #12]
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	e7cf      	b.n	80018d8 <BSP_LED_Init+0x1c>
 8001938:	2803      	cmp	r0, #3
 800193a:	d1cd      	bne.n	80018d8 <BSP_LED_Init+0x1c>
 800193c:	2300      	movs	r3, #0
 800193e:	9304      	str	r3, [sp, #16]
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <BSP_LED_Init+0x9c>)
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001944:	f042 0208 	orr.w	r2, r2, #8
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	9304      	str	r3, [sp, #16]
 8001952:	9b04      	ldr	r3, [sp, #16]
 8001954:	e7c0      	b.n	80018d8 <BSP_LED_Init+0x1c>
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	0801fb7c 	.word	0x0801fb7c
 8001960:	20000000 	.word	0x20000000

08001964 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <BSP_LED_On+0x14>)
 8001966:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <BSP_LED_On+0x18>)
 800196c:	2201      	movs	r2, #1
 800196e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001972:	f000 befd 	b.w	8002770 <HAL_GPIO_WritePin>
 8001976:	bf00      	nop
 8001978:	0801fb7c 	.word	0x0801fb7c
 800197c:	20000000 	.word	0x20000000

08001980 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <BSP_LED_Off+0x14>)
 8001982:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <BSP_LED_Off+0x18>)
 8001988:	2200      	movs	r2, #0
 800198a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800198e:	f000 beef 	b.w	8002770 <HAL_GPIO_WritePin>
 8001992:	bf00      	nop
 8001994:	0801fb7c 	.word	0x0801fb7c
 8001998:	20000000 	.word	0x20000000

0800199c <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <BSP_LED_Toggle+0x10>)
 800199e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <BSP_LED_Toggle+0x14>)
 80019a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80019a8:	f000 bee7 	b.w	800277a <HAL_GPIO_TogglePin>
 80019ac:	0801fb7c 	.word	0x0801fb7c
 80019b0:	20000000 	.word	0x20000000

080019b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80019b4:	b508      	push	{r3, lr}
  return(lcd_drv->GetLcdPixelWidth());
 80019b6:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <BSP_LCD_GetXSize+0xc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	4798      	blx	r3
}
 80019be:	bd08      	pop	{r3, pc}
 80019c0:	20000378 	.word	0x20000378

080019c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 80019c4:	4b01      	ldr	r3, [pc, #4]	; (80019cc <BSP_LCD_SetTextColor+0x8>)
 80019c6:	6018      	str	r0, [r3, #0]
}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2000efe8 	.word	0x2000efe8

080019d0 <BSP_LCD_GetFont>:
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp.pFont;
}
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <BSP_LCD_GetFont+0x8>)
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000efe8 	.word	0x2000efe8

080019dc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(lcd_drv->WritePixel != NULL)
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <BSP_LCD_DrawPixel+0xc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	b103      	cbz	r3, 80019e6 <BSP_LCD_DrawPixel+0xa>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80019e4:	4718      	bx	r3
  }
}
 80019e6:	4770      	bx	lr
 80019e8:	20000378 	.word	0x20000378

080019ec <BSP_LCD_DisplayChar>:
{
 80019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <BSP_LCD_DisplayChar+0xa8>)
{
 80019f2:	b085      	sub	sp, #20
 80019f4:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80019f8:	6899      	ldr	r1, [r3, #8]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80019fa:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 80019fe:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001a02:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001a06:	f10b 0607 	add.w	r6, fp, #7
 8001a0a:	680a      	ldr	r2, [r1, #0]
 8001a0c:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001a0e:	fb0a f505 	mul.w	r5, sl, r5
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a12:	ebcb 09c6 	rsb	r9, fp, r6, lsl #3
  
  for(i = 0; i < height; i++)
 8001a16:	fb06 2505 	mla	r5, r6, r5, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a1a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001a1e:	fa52 f389 	uxtab	r3, r2, r9
  for(i = 0; i < height; i++)
 8001a22:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8001a2a:	45d0      	cmp	r8, sl
 8001a2c:	eb03 0108 	add.w	r1, r3, r8
 8001a30:	b289      	uxth	r1, r1
 8001a32:	d302      	bcc.n	8001a3a <BSP_LCD_DisplayChar+0x4e>
}
 8001a34:	b005      	add	sp, #20
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001a3a:	2e01      	cmp	r6, #1
 8001a3c:	782c      	ldrb	r4, [r5, #0]
 8001a3e:	d004      	beq.n	8001a4a <BSP_LCD_DisplayChar+0x5e>
 8001a40:	2e02      	cmp	r6, #2
 8001a42:	d10b      	bne.n	8001a5c <BSP_LCD_DisplayChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8001a44:	882c      	ldrh	r4, [r5, #0]
 8001a46:	ba64      	rev16	r4, r4
 8001a48:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001a4a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001a94 <BSP_LCD_DisplayChar+0xa8>
 8001a4e:	2700      	movs	r7, #0
 8001a50:	45bb      	cmp	fp, r7
 8001a52:	d80a      	bhi.n	8001a6a <BSP_LCD_DisplayChar+0x7e>
  for(i = 0; i < height; i++)
 8001a54:	f108 0801 	add.w	r8, r8, #1
 8001a58:	4435      	add	r5, r6
 8001a5a:	e7e5      	b.n	8001a28 <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001a5c:	786a      	ldrb	r2, [r5, #1]
 8001a5e:	0424      	lsls	r4, r4, #16
 8001a60:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001a64:	78aa      	ldrb	r2, [r5, #2]
 8001a66:	4314      	orrs	r4, r2
      break;
 8001a68:	e7ef      	b.n	8001a4a <BSP_LCD_DisplayChar+0x5e>
      if(line & (1 << (width- j + offset- 1))) 
 8001a6a:	9b00      	ldr	r3, [sp, #0]
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001a6c:	9103      	str	r1, [sp, #12]
 8001a6e:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001a70:	9b02      	ldr	r3, [sp, #8]
 8001a72:	2201      	movs	r2, #1
 8001a74:	eba3 0c07 	sub.w	ip, r3, r7
 8001a78:	fa02 f20c 	lsl.w	r2, r2, ip
 8001a7c:	4222      	tst	r2, r4
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8001a7e:	bf14      	ite	ne
 8001a80:	f8b9 2000 	ldrhne.w	r2, [r9]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001a84:	f8b9 2004 	ldrheq.w	r2, [r9, #4]
 8001a88:	b280      	uxth	r0, r0
 8001a8a:	f7ff ffa7 	bl	80019dc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001a8e:	3701      	adds	r7, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001a90:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001a92:	e7dd      	b.n	8001a50 <BSP_LCD_DisplayChar+0x64>
 8001a94:	2000efe8 	.word	0x2000efe8

08001a98 <BSP_LCD_DisplayStringAt>:
{
 8001a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	460f      	mov	r7, r1
 8001aa2:	4615      	mov	r5, r2
  uint8_t  *ptr = Text;
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	d1fa      	bne.n	8001aa6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001ab0:	f7ff ff80 	bl	80019b4 <BSP_LCD_GetXSize>
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <BSP_LCD_DisplayStringAt+0x98>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
  switch (Mode)
 8001ab8:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001abc:	8892      	ldrh	r2, [r2, #4]
 8001abe:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8001ac2:	4698      	mov	r8, r3
 8001ac4:	d017      	beq.n	8001af6 <BSP_LCD_DisplayStringAt+0x5e>
 8001ac6:	f1b9 0f02 	cmp.w	r9, #2
 8001aca:	d01b      	beq.n	8001b04 <BSP_LCD_DisplayStringAt+0x6c>
 8001acc:	3d01      	subs	r5, #1
  uint8_t  *ptr = Text;
 8001ace:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001ad2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001ad6:	3c00      	subs	r4, #0
 8001ad8:	bf18      	it	ne
 8001ada:	2401      	movne	r4, #1
 8001adc:	f7ff ff6a 	bl	80019b4 <BSP_LCD_GetXSize>
 8001ae0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	fb03 0019 	mls	r0, r3, r9, r0
 8001aea:	b280      	uxth	r0, r0
 8001aec:	4298      	cmp	r0, r3
 8001aee:	d300      	bcc.n	8001af2 <BSP_LCD_DisplayStringAt+0x5a>
 8001af0:	b974      	cbnz	r4, 8001b10 <BSP_LCD_DisplayStringAt+0x78>
}
 8001af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001af6:	1b2c      	subs	r4, r5, r4
 8001af8:	4420      	add	r0, r4
 8001afa:	4350      	muls	r0, r2
 8001afc:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001b00:	b286      	uxth	r6, r0
      break;
 8001b02:	e7e3      	b.n	8001acc <BSP_LCD_DisplayStringAt+0x34>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001b04:	1b2c      	subs	r4, r5, r4
 8001b06:	4404      	add	r4, r0
 8001b08:	fb14 f402 	smulbb	r4, r4, r2
 8001b0c:	1ba0      	subs	r0, r4, r6
 8001b0e:	e7f7      	b.n	8001b00 <BSP_LCD_DisplayStringAt+0x68>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001b10:	4630      	mov	r0, r6
 8001b12:	782a      	ldrb	r2, [r5, #0]
 8001b14:	4639      	mov	r1, r7
 8001b16:	f7ff ff69 	bl	80019ec <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 8001b1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001b1e:	8898      	ldrh	r0, [r3, #4]
    i++;
 8001b20:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp.pFont->Width;
 8001b24:	4430      	add	r0, r6
 8001b26:	b286      	uxth	r6, r0
    i++;
 8001b28:	fa1f f989 	uxth.w	r9, r9
 8001b2c:	e7d1      	b.n	8001ad2 <BSP_LCD_DisplayStringAt+0x3a>
 8001b2e:	bf00      	nop
 8001b30:	2000efe8 	.word	0x2000efe8

08001b34 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp.pFont;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <BSP_LCD_DisplayStringAtLine+0x18>)
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	88db      	ldrh	r3, [r3, #6]
 8001b3a:	fb13 f000 	smulbb	r0, r3, r0
{
 8001b3e:	460a      	mov	r2, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001b40:	2303      	movs	r3, #3
 8001b42:	b281      	uxth	r1, r0
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff bfa7 	b.w	8001a98 <BSP_LCD_DisplayStringAt>
 8001b4a:	bf00      	nop
 8001b4c:	2000efe8 	.word	0x2000efe8

08001b50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	490f      	ldr	r1, [pc, #60]	; (8001b90 <SystemInit+0x40>)
 8001b52:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <SystemInit+0x44>)
 8001b60:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b62:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b6a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b76:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <SystemInit+0x48>)
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b84:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b8a:	608b      	str	r3, [r1, #8]
#endif
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	24003010 	.word	0x24003010

08001b9c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_Init>:
{
 8001ba0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_Init+0x28>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f835 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f7ff fd2c 	bl	8001618 <HAL_InitTick>
  HAL_MspInit();
 8001bc0:	f7ff ffec 	bl	8001b9c <HAL_MspInit>
}
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	bd08      	pop	{r3, pc}
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x10>)
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_IncTick+0x14>)
 8001bd0:	6811      	ldr	r1, [r2, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	440b      	add	r3, r1
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000eff4 	.word	0x2000eff4
 8001be0:	2000002c 	.word	0x2000002c

08001be4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <HAL_GetTick+0x8>)
 8001be6:	6818      	ldr	r0, [r3, #0]
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000eff4 	.word	0x2000eff4

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff fff6 	bl	8001be4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	bf1c      	itt	ne
 8001bfc:	4b05      	ldrne	r3, [pc, #20]	; (8001c14 <HAL_Delay+0x24>)
 8001bfe:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001c02:	bf18      	it	ne
 8001c04:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	f7ff ffed 	bl	8001be4 <HAL_GetTick>
 8001c0a:	1b43      	subs	r3, r0, r5
 8001c0c:	42a3      	cmp	r3, r4
 8001c0e:	d3fa      	bcc.n	8001c06 <HAL_Delay+0x16>
  {
  }
}
 8001c10:	bd38      	pop	{r3, r4, r5, pc}
 8001c12:	bf00      	nop
 8001c14:	2000002c 	.word	0x2000002c

08001c18 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001c18:	4b01      	ldr	r3, [pc, #4]	; (8001c20 <HAL_GetREVID+0x8>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
}
 8001c1c:	0c00      	lsrs	r0, r0, #16
 8001c1e:	4770      	bx	lr
 8001c20:	e0042000 	.word	0xe0042000

08001c24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b530      	push	{r4, r5, lr}
 8001c4c:	68dc      	ldr	r4, [r3, #12]
 8001c4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c52:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	2d04      	cmp	r5, #4
 8001c5a:	bf28      	it	cs
 8001c5c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c64:	bf8c      	ite	hi
 8001c66:	3c03      	subhi	r4, #3
 8001c68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6a:	fa03 f505 	lsl.w	r5, r3, r5
 8001c6e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c72:	40a3      	lsls	r3, r4
 8001c74:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	bfac      	ite	ge
 8001c82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	4a08      	ldrlt	r2, [pc, #32]	; (8001ca8 <HAL_NVIC_SetPriority+0x60>)
 8001c88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001c8c:	bfb8      	it	lt
 8001c8e:	f000 000f 	andlt.w	r0, r0, #15
 8001c92:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	bfaa      	itet	ge
 8001c96:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ca0:	bd30      	pop	{r4, r5, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00
 8001ca8:	e000ed14 	.word	0xe000ed14

08001cac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cac:	2800      	cmp	r0, #0
 8001cae:	db08      	blt.n	8001cc2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb0:	0942      	lsrs	r2, r0, #5
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f000 001f 	and.w	r0, r0, #31
 8001cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <HAL_NVIC_EnableIRQ+0x18>)
 8001cbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <ETH_Delay.constprop.0>:
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <ETH_Delay.constprop.0+0x20>)
static void ETH_Delay(uint32_t mdelay)
 8001cca:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cd6:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8001cd8:	bf00      	nop
  } 
  while (Delay --);
 8001cda:	9b01      	ldr	r3, [sp, #4]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f9      	bne.n	8001cd8 <ETH_Delay.constprop.0+0x10>
}
 8001ce4:	b002      	add	sp, #8
 8001ce6:	4770      	bx	lr
 8001ce8:	20000028 	.word	0x20000028

08001cec <ETH_FlushTransmitFIFO>:
{
 8001cec:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cf2:	f241 0118 	movw	r1, #4120	; 0x1018
 8001cf6:	6803      	ldr	r3, [r0, #0]
 8001cf8:	585a      	ldr	r2, [r3, r1]
 8001cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cfe:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d00:	585b      	ldr	r3, [r3, r1]
 8001d02:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d04:	f7ff ffe0 	bl	8001cc8 <ETH_Delay.constprop.0>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d08:	9a01      	ldr	r2, [sp, #4]
 8001d0a:	6803      	ldr	r3, [r0, #0]
 8001d0c:	505a      	str	r2, [r3, r1]
}
 8001d0e:	b003      	add	sp, #12
 8001d10:	f85d fb04 	ldr.w	pc, [sp], #4

08001d14 <ETH_MACDMAConfig>:
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d18:	b129      	cbz	r1, 8001d26 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d22:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d26:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001d28:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d2a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001d2c:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d30:	bf0c      	ite	eq
 8001d32:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001d36:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8001d38:	432b      	orrs	r3, r5
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3a:	6810      	ldr	r0, [r2, #0]
                       (heth->Init).DuplexMode | 
 8001d3c:	430b      	orrs	r3, r1
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d3e:	492d      	ldr	r1, [pc, #180]	; (8001df4 <ETH_MACDMAConfig+0xe0>)
 8001d40:	4001      	ands	r1, r0
 8001d42:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d48:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4a:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001d4c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4e:	f7ff ff4f 	bl	8001bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001d52:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d54:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8001d56:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d5a:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001d5c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	f7ff ff47 	bl	8001bf0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d66:	2500      	movs	r5, #0
 8001d68:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d6a:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d6c:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d6e:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001d72:	0412      	lsls	r2, r2, #16
 8001d74:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d7a:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7c:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d7e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d80:	f7ff ff36 	bl	8001bf0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001d84:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d86:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8001d88:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d8a:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d8c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8e:	f7ff ff2f 	bl	8001bf0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d92:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d96:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d98:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9c:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d9e:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001da0:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001da2:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8001da6:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001daa:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001dac:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dae:	f7ff ff1f 	bl	8001bf0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001db2:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg1;
 8001db6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbc:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dbe:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8001dc0:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc2:	f7ff ff15 	bl	8001bf0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001dcc:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001dce:	69a3      	ldr	r3, [r4, #24]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dd4:	f241 011c 	movw	r1, #4124	; 0x101c
 8001dd8:	5853      	ldr	r3, [r2, r1]
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de2:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001de4:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <ETH_MACDMAConfig+0xec>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001de8:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dea:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dec:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <ETH_MACDMAConfig+0xf0>)
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
 8001df4:	ff20810f 	.word	0xff20810f
 8001df8:	f8de3f23 	.word	0xf8de3f23
 8001dfc:	02c12080 	.word	0x02c12080
 8001e00:	40028040 	.word	0x40028040
 8001e04:	40028044 	.word	0x40028044

08001e08 <HAL_ETH_DMATxDescListInit>:
{
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8001e0c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001e10:	2c01      	cmp	r4, #1
 8001e12:	f04f 0402 	mov.w	r4, #2
 8001e16:	d031      	beq.n	8001e7c <HAL_ETH_DMATxDescListInit+0x74>
 8001e18:	2501      	movs	r5, #1
 8001e1a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001e1e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8001e22:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8001e24:	460c      	mov	r4, r1
 8001e26:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e28:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001e2c:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8001e30:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8001e34:	429d      	cmp	r5, r3
 8001e36:	d10c      	bne.n	8001e52 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001e38:	6802      	ldr	r2, [r0, #0]
 8001e3a:	f241 0310 	movw	r3, #4112	; 0x1010
 8001e3e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001e46:	2300      	movs	r3, #0
 8001e48:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001e4c:	4618      	mov	r0, r3
}
 8001e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001e52:	fb0c 2605 	mla	r6, ip, r5, r2
 8001e56:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e58:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e5a:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e5c:	b91e      	cbnz	r6, 8001e66 <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001e5e:	6826      	ldr	r6, [r4, #0]
 8001e60:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001e64:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1U))
 8001e66:	f104 0620 	add.w	r6, r4, #32
 8001e6a:	45ae      	cmp	lr, r5
 8001e6c:	bf94      	ite	ls
 8001e6e:	4688      	movls	r8, r1
 8001e70:	46b0      	movhi	r8, r6
 8001e72:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001e76:	3501      	adds	r5, #1
 8001e78:	4634      	mov	r4, r6
 8001e7a:	e7db      	b.n	8001e34 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	e7e6      	b.n	8001e4e <HAL_ETH_DMATxDescListInit+0x46>

08001e80 <HAL_ETH_DMARxDescListInit>:
{
 8001e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8001e84:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001e88:	2c01      	cmp	r4, #1
 8001e8a:	f04f 0402 	mov.w	r4, #2
 8001e8e:	d02f      	beq.n	8001ef0 <HAL_ETH_DMARxDescListInit+0x70>
 8001e90:	2501      	movs	r5, #1
 8001e92:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001e96:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8001e9a:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001ea0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001ea4:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001ea8:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8001eac:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8001eb0:	42ab      	cmp	r3, r5
 8001eb2:	d10c      	bne.n	8001ece <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	f241 030c 	movw	r3, #4108	; 0x100c
 8001eba:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001ec8:	4618      	mov	r0, r3
}
 8001eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001ece:	fb0e 2605 	mla	r6, lr, r5, r2
 8001ed2:	60a6      	str	r6, [r4, #8]
 8001ed4:	f104 0620 	add.w	r6, r4, #32
 8001ed8:	45a8      	cmp	r8, r5
 8001eda:	bf94      	ite	ls
 8001edc:	4689      	movls	r9, r1
 8001ede:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001ee0:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001ee2:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1U))
 8001ee6:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001eea:	3501      	adds	r5, #1
 8001eec:	4634      	mov	r4, r6
 8001eee:	e7df      	b.n	8001eb0 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	e7ea      	b.n	8001eca <HAL_ETH_DMARxDescListInit+0x4a>

08001ef4 <HAL_ETH_TransmitFrame>:
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001ef6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f04f 0302 	mov.w	r3, #2
 8001f00:	d068      	beq.n	8001fd4 <HAL_ETH_TransmitFrame+0xe0>
 8001f02:	2201      	movs	r2, #1
 8001f04:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001f08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8001f0c:	b929      	cbnz	r1, 8001f1a <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8001f0e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001f12:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8001f16:	4610      	mov	r0, r2
}
 8001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f1c:	681c      	ldr	r4, [r3, #0]
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	da06      	bge.n	8001f30 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001f22:	2312      	movs	r3, #18
 8001f24:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8001f2e:	e7f2      	b.n	8001f16 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001f30:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001f34:	42a1      	cmp	r1, r4
 8001f36:	d92e      	bls.n	8001f96 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001f38:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001f3c:	fb04 1412 	mls	r4, r4, r2, r1
 8001f40:	b33c      	cbz	r4, 8001f92 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 8001f42:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f44:	4c24      	ldr	r4, [pc, #144]	; (8001fd8 <HAL_ETH_TransmitFrame+0xe4>)
 8001f46:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8001f4a:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f4e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    for (i=0U; i< bufcount; i++)
 8001f52:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f54:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8001f58:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001f5a:	681d      	ldr	r5, [r3, #0]
 8001f5c:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001f60:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 8001f62:	b91c      	cbnz	r4, 8001f6c <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f64:	681d      	ldr	r5, [r3, #0]
 8001f66:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001f6a:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8001f6c:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f6e:	bf08      	it	eq
 8001f70:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f72:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f74:	bf04      	itt	eq
 8001f76:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8001f7a:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f7c:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f7e:	bf08      	it	eq
 8001f80:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 8001f82:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f84:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8001f88:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f8a:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f8c:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8001f8e:	d1e4      	bne.n	8001f5a <HAL_ETH_TransmitFrame+0x66>
 8001f90:	e00d      	b.n	8001fae <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8001f92:	2a01      	cmp	r2, #1
 8001f94:	d1d6      	bne.n	8001f44 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001f9c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f9e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001fa0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001fa4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001fa8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001faa:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001fb0:	f241 0214 	movw	r2, #4116	; 0x1014
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	5899      	ldr	r1, [r3, r2]
 8001fb8:	0749      	lsls	r1, r1, #29
 8001fba:	d505      	bpl.n	8001fc8 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8001fc0:	f241 0204 	movw	r2, #4100	; 0x1004
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	e79f      	b.n	8001f18 <HAL_ETH_TransmitFrame+0x24>
 8001fd8:	fffffa0c 	.word	0xfffffa0c

08001fdc <HAL_ETH_GetReceivedFrame_IT>:
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8001fde:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f04f 0302 	mov.w	r3, #2
 8001fe8:	d03b      	beq.n	8002062 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8001fea:	2201      	movs	r2, #1
 8001fec:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001ff0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ff4:	2406      	movs	r4, #6
      heth->RxFrameInfos.SegCount = 1U;   
 8001ff6:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	db01      	blt.n	8002004 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8002000:	3c01      	subs	r4, #1
 8002002:	d106      	bne.n	8002012 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8002004:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002006:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8002008:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800200c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002010:	e027      	b.n	8002062 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68dd      	ldr	r5, [r3, #12]
 8002016:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800201a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800201e:	d103      	bne.n	8002028 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002020:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002022:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002024:	6285      	str	r5, [r0, #40]	; 0x28
 8002026:	e7e7      	b.n	8001ff8 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002028:	681e      	ldr	r6, [r3, #0]
 800202a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800202c:	f416 7f40 	tst.w	r6, #768	; 0x300
 8002030:	f102 0201 	add.w	r2, r2, #1
 8002034:	d101      	bne.n	800203a <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8002036:	6382      	str	r2, [r0, #56]	; 0x38
 8002038:	e7f4      	b.n	8002024 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800203a:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800203c:	bf08      	it	eq
 800203e:	6303      	streq	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos.SegCount)++;
 8002040:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800204a:	3b04      	subs	r3, #4
 800204c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800204e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8002054:	2301      	movs	r3, #1
 8002056:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800205a:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800205c:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 800205e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd70      	pop	{r4, r5, r6, pc}

08002066 <HAL_ETH_TxCpltCallback>:
 8002066:	4770      	bx	lr

08002068 <HAL_ETH_ErrorCallback>:
 8002068:	4770      	bx	lr

0800206a <HAL_ETH_IRQHandler>:
{
 800206a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8002072:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002074:	5995      	ldr	r5, [r2, r6]
 8002076:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800207a:	d021      	beq.n	80020c0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 800207c:	f7ff f828 	bl	80010d0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002086:	2301      	movs	r3, #1
 8002088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800208c:	2300      	movs	r3, #0
 800208e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f241 0514 	movw	r5, #4116	; 0x1014
 8002098:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800209c:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800209e:	595b      	ldr	r3, [r3, r5]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	d50c      	bpl.n	80020be <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff ffdf 	bl	8002068 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80020b8:	2300      	movs	r3, #0
 80020ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80020be:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80020c0:	5993      	ldr	r3, [r2, r6]
 80020c2:	07da      	lsls	r2, r3, #31
 80020c4:	d5e5      	bpl.n	8002092 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80020c6:	f7ff ffce 	bl	8002066 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80020d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80020d4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80020d8:	e7db      	b.n	8002092 <HAL_ETH_IRQHandler+0x28>

080020da <HAL_ETH_ReadPHYRegister>:
{
 80020da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80020dc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80020e0:	2b82      	cmp	r3, #130	; 0x82
{
 80020e2:	4606      	mov	r6, r0
 80020e4:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80020e6:	d031      	beq.n	800214c <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020e8:	2382      	movs	r3, #130	; 0x82
 80020ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020ee:	8a34      	ldrh	r4, [r6, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 80020f0:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020f2:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 80020f4:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80020f6:	0189      	lsls	r1, r1, #6
 80020f8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020fc:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020fe:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002102:	430c      	orrs	r4, r1
 8002104:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002106:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 800210a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800210c:	f7ff fd6a 	bl	8001be4 <HAL_GetTick>
 8002110:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002112:	f014 0401 	ands.w	r4, r4, #1
 8002116:	d108      	bne.n	800212a <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002118:	6833      	ldr	r3, [r6, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	b29b      	uxth	r3, r3
 800211e:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002120:	2301      	movs	r3, #1
 8002122:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 8002126:	4620      	mov	r0, r4
 8002128:	e00c      	b.n	8002144 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800212a:	f7ff fd5b 	bl	8001be4 <HAL_GetTick>
 800212e:	1bc0      	subs	r0, r0, r7
 8002130:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8002134:	d307      	bcc.n	8002146 <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 8002136:	2301      	movs	r3, #1
 8002138:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800213c:	2300      	movs	r3, #0
 800213e:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
      return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
}
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	691c      	ldr	r4, [r3, #16]
 800214a:	e7e2      	b.n	8002112 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800214c:	2002      	movs	r0, #2
 800214e:	e7f9      	b.n	8002144 <HAL_ETH_ReadPHYRegister+0x6a>

08002150 <HAL_ETH_WritePHYRegister>:
{
 8002150:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002152:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002156:	2b42      	cmp	r3, #66	; 0x42
{
 8002158:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800215a:	d02f      	beq.n	80021bc <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800215c:	2342      	movs	r3, #66	; 0x42
 800215e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002162:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8002164:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002166:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 8002168:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800216a:	0189      	lsls	r1, r1, #6
 800216c:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002170:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002172:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002176:	430c      	orrs	r4, r1
 8002178:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800217a:	b292      	uxth	r2, r2
 800217c:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002180:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002182:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002184:	f7ff fd2e 	bl	8001be4 <HAL_GetTick>
 8002188:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800218a:	f014 0401 	ands.w	r4, r4, #1
 800218e:	d104      	bne.n	800219a <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 8002190:	2301      	movs	r3, #1
 8002192:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8002196:	4620      	mov	r0, r4
 8002198:	e00c      	b.n	80021b4 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800219a:	f7ff fd23 	bl	8001be4 <HAL_GetTick>
 800219e:	1b80      	subs	r0, r0, r6
 80021a0:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 80021a4:	d307      	bcc.n	80021b6 <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80021ac:	2300      	movs	r3, #0
 80021ae:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80021b2:	2003      	movs	r0, #3
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	691c      	ldr	r4, [r3, #16]
 80021ba:	e7e6      	b.n	800218a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80021bc:	2002      	movs	r0, #2
 80021be:	e7f9      	b.n	80021b4 <HAL_ETH_WritePHYRegister+0x64>

080021c0 <HAL_ETH_Init>:
{
 80021c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80021c6:	4604      	mov	r4, r0
 80021c8:	2800      	cmp	r0, #0
 80021ca:	f000 80e0 	beq.w	800238e <HAL_ETH_Init+0x1ce>
  if(heth->State == HAL_ETH_STATE_RESET)
 80021ce:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80021d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021d6:	b91b      	cbnz	r3, 80021e0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80021d8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80021dc:	f7fe fecc 	bl	8000f78 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_ETH_Init+0x1d4>)
 80021e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021f8:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_ETH_Init+0x1d8>)
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002200:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	6a21      	ldr	r1, [r4, #32]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002218:	f7ff fce4 	bl	8001be4 <HAL_GetTick>
 800221c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	07d0      	lsls	r0, r2, #31
 8002228:	d41d      	bmi.n	8002266 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800222a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800222c:	f000 fd70 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002230:	4b5a      	ldr	r3, [pc, #360]	; (800239c <HAL_ETH_Init+0x1dc>)
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_ETH_Init+0x1e0>)
 8002234:	4403      	add	r3, r0
 8002236:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002238:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800223c:	d222      	bcs.n	8002284 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800223e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002242:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002248:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800224a:	2100      	movs	r1, #0
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ff7f 	bl	8002150 <HAL_ETH_WritePHYRegister>
 8002252:	4605      	mov	r5, r0
 8002254:	b368      	cbz	r0, 80022b2 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8002256:	2101      	movs	r1, #1
 8002258:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 800225a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 800225c:	f7ff fd5a 	bl	8001d14 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002260:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002264:	e00b      	b.n	800227e <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002266:	f7ff fcbd 	bl	8001be4 <HAL_GetTick>
 800226a:	1b40      	subs	r0, r0, r5
 800226c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002270:	d9d5      	bls.n	800221e <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002272:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002274:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002276:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800227a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800227e:	4628      	mov	r0, r5
 8002280:	b003      	add	sp, #12
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_ETH_Init+0x1e4>)
 8002286:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_ETH_Init+0x1e8>)
 8002288:	4403      	add	r3, r0
 800228a:	4293      	cmp	r3, r2
 800228c:	d802      	bhi.n	8002294 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800228e:	f045 050c 	orr.w	r5, r5, #12
 8002292:	e7d6      	b.n	8002242 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002294:	4b45      	ldr	r3, [pc, #276]	; (80023ac <HAL_ETH_Init+0x1ec>)
 8002296:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <HAL_ETH_Init+0x1f0>)
 8002298:	4403      	add	r3, r0
 800229a:	4293      	cmp	r3, r2
 800229c:	d3d1      	bcc.n	8002242 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_ETH_Init+0x1f4>)
 80022a0:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <HAL_ETH_Init+0x1f8>)
 80022a2:	4403      	add	r3, r0
 80022a4:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022a6:	bf94      	ite	ls
 80022a8:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80022ac:	f045 0510 	orrhi.w	r5, r5, #16
 80022b0:	e7c7      	b.n	8002242 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 80022b2:	f240 20ff 	movw	r0, #767	; 0x2ff
 80022b6:	f7ff fc9b 	bl	8001bf0 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d054      	beq.n	800236a <HAL_ETH_Init+0x1aa>
    tickstart = HAL_GetTick();
 80022c0:	f7ff fc90 	bl	8001be4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80022c4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022c8:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80022ca:	466a      	mov	r2, sp
 80022cc:	2101      	movs	r1, #1
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff ff03 	bl	80020da <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80022d4:	f7ff fc86 	bl	8001be4 <HAL_GetTick>
 80022d8:	1b80      	subs	r0, r0, r6
 80022da:	42b8      	cmp	r0, r7
 80022dc:	d90b      	bls.n	80022f6 <HAL_ETH_Init+0x136>
        ETH_MACDMAConfig(heth, err);
 80022de:	2101      	movs	r1, #1
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fd17 	bl	8001d14 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80022ec:	2300      	movs	r3, #0
 80022ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80022f2:	2503      	movs	r5, #3
 80022f4:	e7c3      	b.n	800227e <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80022f6:	9b00      	ldr	r3, [sp, #0]
 80022f8:	0759      	lsls	r1, r3, #29
 80022fa:	d5e6      	bpl.n	80022ca <HAL_ETH_Init+0x10a>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80022fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002300:	2100      	movs	r1, #0
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff ff24 	bl	8002150 <HAL_ETH_WritePHYRegister>
 8002308:	2800      	cmp	r0, #0
 800230a:	d1a4      	bne.n	8002256 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 800230c:	f7ff fc6a 	bl	8001be4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002310:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002314:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002316:	466a      	mov	r2, sp
 8002318:	2101      	movs	r1, #1
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff fedd 	bl	80020da <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002320:	f7ff fc60 	bl	8001be4 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	42b8      	cmp	r0, r7
 8002328:	d8d9      	bhi.n	80022de <HAL_ETH_Init+0x11e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800232a:	9b00      	ldr	r3, [sp, #0]
 800232c:	069a      	lsls	r2, r3, #26
 800232e:	d5f2      	bpl.n	8002316 <HAL_ETH_Init+0x156>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002330:	466a      	mov	r2, sp
 8002332:	211f      	movs	r1, #31
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff fed0 	bl	80020da <HAL_ETH_ReadPHYRegister>
 800233a:	2800      	cmp	r0, #0
 800233c:	d18b      	bne.n	8002256 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800233e:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002340:	f013 0210 	ands.w	r2, r3, #16
 8002344:	bf18      	it	ne
 8002346:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800234a:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 800234c:	bf58      	it	pl
 800234e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8002352:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002354:	bf4c      	ite	mi
 8002356:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002358:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800235a:	2100      	movs	r1, #0
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fcd9 	bl	8001d14 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002362:	2301      	movs	r3, #1
 8002364:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002368:	e789      	b.n	800227e <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800236a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800236e:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002370:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8002374:	b292      	uxth	r2, r2
 8002376:	4629      	mov	r1, r5
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff fee9 	bl	8002150 <HAL_ETH_WritePHYRegister>
 800237e:	2800      	cmp	r0, #0
 8002380:	f47f af69 	bne.w	8002256 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002388:	f7ff fc32 	bl	8001bf0 <HAL_Delay>
 800238c:	e7e5      	b.n	800235a <HAL_ETH_Init+0x19a>
    return HAL_ERROR;
 800238e:	2501      	movs	r5, #1
 8002390:	e775      	b.n	800227e <HAL_ETH_Init+0xbe>
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	feced300 	.word	0xfeced300
 80023a0:	00e4e1c0 	.word	0x00e4e1c0
 80023a4:	fde9f140 	.word	0xfde9f140
 80023a8:	017d783f 	.word	0x017d783f
 80023ac:	fc6c7900 	.word	0xfc6c7900
 80023b0:	02625a00 	.word	0x02625a00
 80023b4:	fa0a1f00 	.word	0xfa0a1f00
 80023b8:	02faf07f 	.word	0x02faf07f

080023bc <HAL_ETH_Start>:
{  
 80023bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 80023be:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f04f 0402 	mov.w	r4, #2
 80023c8:	d02f      	beq.n	800242a <HAL_ETH_Start+0x6e>
  heth->State = HAL_ETH_STATE_BUSY;
 80023ca:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023ce:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 80023d0:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 80023d2:	2501      	movs	r5, #1
 80023d4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  __IO uint32_t tmpreg1 = 0U;
 80023d8:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f042 0208 	orr.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023e6:	f7ff fc6f 	bl	8001cc8 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	9a01      	ldr	r2, [sp, #4]
 80023ee:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 80023f0:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f042 0204 	orr.w	r2, r2, #4
 80023f8:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023fe:	f7ff fc63 	bl	8001cc8 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	9a00      	ldr	r2, [sp, #0]
 8002406:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002408:	f7ff fc70 	bl	8001cec <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800240c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002410:	6802      	ldr	r2, [r0, #0]
 8002412:	58d1      	ldr	r1, [r2, r3]
 8002414:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002418:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800241a:	58d1      	ldr	r1, [r2, r3]
 800241c:	f041 0102 	orr.w	r1, r1, #2
 8002420:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002422:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002426:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800242a:	4620      	mov	r0, r4
}
 800242c:	b003      	add	sp, #12
 800242e:	bd30      	pop	{r4, r5, pc}

08002430 <HAL_ETH_Stop>:
{  
 8002430:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 8002432:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002436:	2b01      	cmp	r3, #1
 8002438:	f04f 0402 	mov.w	r4, #2
 800243c:	d02f      	beq.n	800249e <HAL_ETH_Stop+0x6e>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800243e:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002440:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002444:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 8002448:	2501      	movs	r5, #1
 800244a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800244e:	5899      	ldr	r1, [r3, r2]
 8002450:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002454:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002456:	5899      	ldr	r1, [r3, r2]
 8002458:	f021 0102 	bic.w	r1, r1, #2
 800245c:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 800245e:	2400      	movs	r4, #0
 8002460:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	f022 0204 	bic.w	r2, r2, #4
 8002468:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800246e:	f7ff fc2b 	bl	8001cc8 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8002472:	6803      	ldr	r3, [r0, #0]
 8002474:	9a01      	ldr	r2, [sp, #4]
 8002476:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002478:	f7ff fc38 	bl	8001cec <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800247c:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 800247e:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f022 0208 	bic.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800248c:	f7ff fc1c 	bl	8001cc8 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8002490:	6803      	ldr	r3, [r0, #0]
 8002492:	9a00      	ldr	r2, [sp, #0]
 8002494:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002496:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800249a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800249e:	4620      	mov	r0, r4
}
 80024a0:	b003      	add	sp, #12
 80024a2:	bd30      	pop	{r4, r5, pc}

080024a4 <HAL_ETH_ConfigMAC>:
{
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80024a6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80024aa:	2b01      	cmp	r3, #1
{
 80024ac:	4605      	mov	r5, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80024b4:	d071      	beq.n	800259a <HAL_ETH_ConfigMAC+0xf6>
 80024b6:	2601      	movs	r6, #1
  heth->State= HAL_ETH_STATE_BUSY;
 80024b8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
 80024bc:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(heth);
 80024be:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  if (macconf != NULL)
 80024c2:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
 80024c6:	2900      	cmp	r1, #0
 80024c8:	d068      	beq.n	800259c <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 80024ca:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024cc:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80025b8 <HAL_ETH_ConfigMAC+0x114>
 80024d0:	ea0c 0c03 	and.w	ip, ip, r3
                         macconf->BackOffLimit | 
 80024d4:	e9d1 3100 	ldrd	r3, r1, [r1]
 80024d8:	430b      	orrs	r3, r1
 80024da:	68a1      	ldr	r1, [r4, #8]
 80024dc:	430b      	orrs	r3, r1
 80024de:	68e1      	ldr	r1, [r4, #12]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6921      	ldr	r1, [r4, #16]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6961      	ldr	r1, [r4, #20]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	69a1      	ldr	r1, [r4, #24]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	69e1      	ldr	r1, [r4, #28]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6a21      	ldr	r1, [r4, #32]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024fc:	430b      	orrs	r3, r1
 80024fe:	433b      	orrs	r3, r7
 8002500:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002502:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002506:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002508:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 800250a:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	f7ff fb70 	bl	8001bf0 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002510:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 8002514:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8002516:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1; 
 8002518:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 800251a:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800251c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1; 
 800251e:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 8002520:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8002522:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002524:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8002526:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002528:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800252a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800252c:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800252e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002530:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002532:	6053      	str	r3, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002534:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFFR;
 8002536:	6857      	ldr	r7, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002538:	f7ff fb5a 	bl	8001bf0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800253c:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800253e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACFFR = tmpreg1;
 8002540:	6057      	str	r7, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002542:	6093      	str	r3, [r2, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002544:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002546:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 8002548:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800254c:	4303      	orrs	r3, r0
 800254e:	6e20      	ldr	r0, [r4, #96]	; 0x60
     tmpreg1 = (heth->Instance)->MACFCR;
 8002550:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8002552:	4303      	orrs	r3, r0
 8002554:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002556:	4303      	orrs	r3, r0
 8002558:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800255a:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 800255e:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002560:	6d60      	ldr	r0, [r4, #84]	; 0x54
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002562:	0409      	lsls	r1, r1, #16
 8002564:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8002566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800256a:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800256c:	6193      	str	r3, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800256e:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFCR;
 8002570:	6997      	ldr	r7, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	f7ff fb3d 	bl	8001bf0 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002576:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg1;
 800257a:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800257c:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg1;
 800257e:	619f      	str	r7, [r3, #24]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002580:	4630      	mov	r0, r6
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002582:	61da      	str	r2, [r3, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002584:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002586:	f7ff fb33 	bl	8001bf0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800258a:	682b      	ldr	r3, [r5, #0]
 800258c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800258e:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002590:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 8002592:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002596:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 800259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 800259c:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800259e:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 80025a2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80025a6:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025a8:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025aa:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 80025ac:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ae:	f7ff fb1f 	bl	8001bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025b2:	682b      	ldr	r3, [r5, #0]
 80025b4:	601c      	str	r4, [r3, #0]
 80025b6:	e7ea      	b.n	800258e <HAL_ETH_ConfigMAC+0xea>
 80025b8:	ff20810f 	.word	0xff20810f

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c0:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800276c <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80025ca:	2401      	movs	r4, #1
 80025cc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80025d2:	43ac      	bics	r4, r5
 80025d4:	f040 80b0 	bne.w	8002738 <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d8:	684d      	ldr	r5, [r1, #4]
 80025da:	f005 0403 	and.w	r4, r5, #3
 80025de:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80025e2:	2603      	movs	r6, #3
 80025e4:	1e67      	subs	r7, r4, #1
 80025e6:	fa06 f608 	lsl.w	r6, r6, r8
 80025ea:	2f01      	cmp	r7, #1
 80025ec:	ea6f 0606 	mvn.w	r6, r6
 80025f0:	d834      	bhi.n	800265c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80025f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f8:	68cf      	ldr	r7, [r1, #12]
 80025fa:	fa07 f708 	lsl.w	r7, r7, r8
 80025fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002602:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002604:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002606:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800260a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800260e:	409f      	lsls	r7, r3
 8002610:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002614:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002616:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002618:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	688f      	ldr	r7, [r1, #8]
 800261e:	fa07 f708 	lsl.w	r7, r7, r8
 8002622:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002628:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	d119      	bne.n	8002660 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800262c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002630:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002634:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002638:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002640:	f04f 0e0f 	mov.w	lr, #15
 8002644:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002648:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	690f      	ldr	r7, [r1, #16]
 800264e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002652:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	f8ca 7020 	str.w	r7, [sl, #32]
 800265a:	e001      	b.n	8002660 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265c:	2c03      	cmp	r4, #3
 800265e:	d1da      	bne.n	8002616 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002660:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002662:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002668:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266a:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 800266c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266e:	d563      	bpl.n	8002738 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002670:	f04f 0a00 	mov.w	sl, #0
 8002674:	f8cd a004 	str.w	sl, [sp, #4]
 8002678:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267c:	4c3a      	ldr	r4, [pc, #232]	; (8002768 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002682:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002686:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800268a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800268e:	9601      	str	r6, [sp, #4]
 8002690:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	f023 0603 	bic.w	r6, r3, #3
 8002696:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800269a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80026aa:	270f      	movs	r7, #15
 80026ac:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b0:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b2:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	d046      	beq.n	8002746 <HAL_GPIO_Init+0x18a>
 80026b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026bc:	42a0      	cmp	r0, r4
 80026be:	d044      	beq.n	800274a <HAL_GPIO_Init+0x18e>
 80026c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026c4:	42a0      	cmp	r0, r4
 80026c6:	d042      	beq.n	800274e <HAL_GPIO_Init+0x192>
 80026c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d040      	beq.n	8002752 <HAL_GPIO_Init+0x196>
 80026d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026d4:	42a0      	cmp	r0, r4
 80026d6:	d03e      	beq.n	8002756 <HAL_GPIO_Init+0x19a>
 80026d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026dc:	42a0      	cmp	r0, r4
 80026de:	d03c      	beq.n	800275a <HAL_GPIO_Init+0x19e>
 80026e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026e4:	42a0      	cmp	r0, r4
 80026e6:	d03a      	beq.n	800275e <HAL_GPIO_Init+0x1a2>
 80026e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026ec:	42a0      	cmp	r0, r4
 80026ee:	bf0c      	ite	eq
 80026f0:	2407      	moveq	r4, #7
 80026f2:	2408      	movne	r4, #8
 80026f4:	fa04 f40e 	lsl.w	r4, r4, lr
 80026f8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fa:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80026fc:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002702:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002704:	bf54      	ite	pl
 8002706:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002708:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800270c:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800270e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002712:	bf54      	ite	pl
 8002714:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002716:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800271a:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800271e:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002720:	bf54      	ite	pl
 8002722:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002724:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002728:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800272a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800272e:	bf54      	ite	pl
 8002730:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002732:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002736:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002738:	3301      	adds	r3, #1
 800273a:	2b10      	cmp	r3, #16
 800273c:	f47f af44 	bne.w	80025c8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002740:	b003      	add	sp, #12
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002746:	4654      	mov	r4, sl
 8002748:	e7d4      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 800274a:	2401      	movs	r4, #1
 800274c:	e7d2      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 800274e:	2402      	movs	r4, #2
 8002750:	e7d0      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 8002752:	2403      	movs	r4, #3
 8002754:	e7ce      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 8002756:	2404      	movs	r4, #4
 8002758:	e7cc      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 800275a:	2405      	movs	r4, #5
 800275c:	e7ca      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 800275e:	2406      	movs	r4, #6
 8002760:	e7c8      	b.n	80026f4 <HAL_GPIO_Init+0x138>
 8002762:	bf00      	nop
 8002764:	40013c00 	.word	0x40013c00
 8002768:	40020000 	.word	0x40020000
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	b10a      	cbz	r2, 8002776 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	6181      	str	r1, [r0, #24]
  }
}
 8002774:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	0409      	lsls	r1, r1, #16
 8002778:	e7fb      	b.n	8002772 <HAL_GPIO_WritePin+0x2>

0800277a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800277a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800277c:	ea01 0203 	and.w	r2, r1, r3
 8002780:	ea21 0103 	bic.w	r1, r1, r3
 8002784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002788:	6181      	str	r1, [r0, #24]
}
 800278a:	4770      	bx	lr

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002790:	4604      	mov	r4, r0
 8002792:	b340      	cbz	r0, 80027e6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002794:	6803      	ldr	r3, [r0, #0]
 8002796:	07dd      	lsls	r5, r3, #31
 8002798:	d410      	bmi.n	80027bc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	0798      	lsls	r0, r3, #30
 800279e:	d45e      	bmi.n	800285e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	071a      	lsls	r2, r3, #28
 80027a4:	f100 80a0 	bmi.w	80028e8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	075b      	lsls	r3, r3, #29
 80027ac:	f100 80be 	bmi.w	800292c <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	69a0      	ldr	r0, [r4, #24]
 80027b2:	2800      	cmp	r0, #0
 80027b4:	f040 811f 	bne.w	80029f6 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2000      	movs	r0, #0
 80027ba:	e02b      	b.n	8002814 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027bc:	4ba6      	ldr	r3, [pc, #664]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	f002 020c 	and.w	r2, r2, #12
 80027c4:	2a04      	cmp	r2, #4
 80027c6:	d007      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ce:	2a08      	cmp	r2, #8
 80027d0:	d10b      	bne.n	80027ea <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	0251      	lsls	r1, r2, #9
 80027d6:	d508      	bpl.n	80027ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b9f      	ldr	r3, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	039a      	lsls	r2, r3, #14
 80027de:	d5dc      	bpl.n	800279a <HAL_RCC_OscConfig+0xe>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1d9      	bne.n	800279a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80027f0:	d113      	bne.n	800281a <HAL_RCC_OscConfig+0x8e>
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027fa:	f7ff f9f3 	bl	8001be4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4e96      	ldr	r6, [pc, #600]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002800:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	6833      	ldr	r3, [r6, #0]
 8002804:	039b      	lsls	r3, r3, #14
 8002806:	d4c8      	bmi.n	800279a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff f9ec 	bl	8001be4 <HAL_GetTick>
 800280c:	1b40      	subs	r0, r0, r5
 800280e:	2864      	cmp	r0, #100	; 0x64
 8002810:	d9f7      	bls.n	8002802 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002812:	2003      	movs	r0, #3
}
 8002814:	b002      	add	sp, #8
 8002816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281a:	4d8f      	ldr	r5, [pc, #572]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 800281c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0xa8>
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	602b      	str	r3, [r5, #0]
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002832:	e7e2      	b.n	80027fa <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	602b      	str	r3, [r5, #0]
 800283a:	682b      	ldr	r3, [r5, #0]
 800283c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002840:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002842:	2a00      	cmp	r2, #0
 8002844:	d1d9      	bne.n	80027fa <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002846:	f7ff f9cd 	bl	8001be4 <HAL_GetTick>
 800284a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284c:	682b      	ldr	r3, [r5, #0]
 800284e:	039f      	lsls	r7, r3, #14
 8002850:	d5a3      	bpl.n	800279a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002852:	f7ff f9c7 	bl	8001be4 <HAL_GetTick>
 8002856:	1b80      	subs	r0, r0, r6
 8002858:	2864      	cmp	r0, #100	; 0x64
 800285a:	d9f7      	bls.n	800284c <HAL_RCC_OscConfig+0xc0>
 800285c:	e7d9      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	4b7e      	ldr	r3, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	f012 0f0c 	tst.w	r2, #12
 8002866:	d007      	beq.n	8002878 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286e:	2a08      	cmp	r2, #8
 8002870:	d111      	bne.n	8002896 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	025e      	lsls	r6, r3, #9
 8002876:	d40e      	bmi.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002878:	4b77      	ldr	r3, [pc, #476]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	0795      	lsls	r5, r2, #30
 800287e:	d502      	bpl.n	8002886 <HAL_RCC_OscConfig+0xfa>
 8002880:	68e2      	ldr	r2, [r4, #12]
 8002882:	2a01      	cmp	r2, #1
 8002884:	d1af      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	6921      	ldr	r1, [r4, #16]
 800288a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800288e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002892:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002894:	e784      	b.n	80027a0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002896:	68e2      	ldr	r2, [r4, #12]
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <HAL_RCC_OscConfig+0x2d0>)
 800289a:	b1b2      	cbz	r2, 80028ca <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028a0:	f7ff f9a0 	bl	8001be4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4d6c      	ldr	r5, [pc, #432]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80028a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	0798      	lsls	r0, r3, #30
 80028ac:	d507      	bpl.n	80028be <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	6922      	ldr	r2, [r4, #16]
 80028b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028ba:	602b      	str	r3, [r5, #0]
 80028bc:	e770      	b.n	80027a0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff f991 	bl	8001be4 <HAL_GetTick>
 80028c2:	1b80      	subs	r0, r0, r6
 80028c4:	2802      	cmp	r0, #2
 80028c6:	d9ef      	bls.n	80028a8 <HAL_RCC_OscConfig+0x11c>
 80028c8:	e7a3      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80028ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028cc:	f7ff f98a 	bl	8001be4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d0:	4e61      	ldr	r6, [pc, #388]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80028d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	0799      	lsls	r1, r3, #30
 80028d8:	f57f af62 	bpl.w	80027a0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028dc:	f7ff f982 	bl	8001be4 <HAL_GetTick>
 80028e0:	1b40      	subs	r0, r0, r5
 80028e2:	2802      	cmp	r0, #2
 80028e4:	d9f6      	bls.n	80028d4 <HAL_RCC_OscConfig+0x148>
 80028e6:	e794      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e8:	6962      	ldr	r2, [r4, #20]
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x2d4>)
 80028ec:	b17a      	cbz	r2, 800290e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028f2:	f7ff f977 	bl	8001be4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4e58      	ldr	r6, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80028f8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80028fc:	079f      	lsls	r7, r3, #30
 80028fe:	f53f af53 	bmi.w	80027a8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002902:	f7ff f96f 	bl	8001be4 <HAL_GetTick>
 8002906:	1b40      	subs	r0, r0, r5
 8002908:	2802      	cmp	r0, #2
 800290a:	d9f6      	bls.n	80028fa <HAL_RCC_OscConfig+0x16e>
 800290c:	e781      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800290e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002910:	f7ff f968 	bl	8001be4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4e50      	ldr	r6, [pc, #320]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002916:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800291a:	0798      	lsls	r0, r3, #30
 800291c:	f57f af44 	bpl.w	80027a8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff f960 	bl	8001be4 <HAL_GetTick>
 8002924:	1b40      	subs	r0, r0, r5
 8002926:	2802      	cmp	r0, #2
 8002928:	d9f6      	bls.n	8002918 <HAL_RCC_OscConfig+0x18c>
 800292a:	e772      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292c:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 800292e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002930:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002934:	d128      	bne.n	8002988 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	9201      	str	r2, [sp, #4]
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800294a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4d45      	ldr	r5, [pc, #276]	; (8002a64 <HAL_RCC_OscConfig+0x2d8>)
 800294e:	682b      	ldr	r3, [r5, #0]
 8002950:	05d9      	lsls	r1, r3, #23
 8002952:	d51b      	bpl.n	800298c <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	68a3      	ldr	r3, [r4, #8]
 8002956:	4d40      	ldr	r5, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 8002958:	2b01      	cmp	r3, #1
 800295a:	d127      	bne.n	80029ac <HAL_RCC_OscConfig+0x220>
 800295c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002964:	f7ff f93e 	bl	8001be4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4e3b      	ldr	r6, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800296a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002972:	079b      	lsls	r3, r3, #30
 8002974:	d539      	bpl.n	80029ea <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8002976:	2f00      	cmp	r7, #0
 8002978:	f43f af1a 	beq.w	80027b0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	4a36      	ldr	r2, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 800297e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	e713      	b.n	80027b0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002988:	2700      	movs	r7, #0
 800298a:	e7df      	b.n	800294c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002994:	f7ff f926 	bl	8001be4 <HAL_GetTick>
 8002998:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	05da      	lsls	r2, r3, #23
 800299e:	d4d9      	bmi.n	8002954 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7ff f920 	bl	8001be4 <HAL_GetTick>
 80029a4:	1b80      	subs	r0, r0, r6
 80029a6:	2802      	cmp	r0, #2
 80029a8:	d9f7      	bls.n	800299a <HAL_RCC_OscConfig+0x20e>
 80029aa:	e732      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d104      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
 80029b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	672b      	str	r3, [r5, #112]	; 0x70
 80029b8:	e7d0      	b.n	800295c <HAL_RCC_OscConfig+0x1d0>
 80029ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	672a      	str	r2, [r5, #112]	; 0x70
 80029c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029c4:	f022 0204 	bic.w	r2, r2, #4
 80029c8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ca      	bne.n	8002964 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 80029ce:	f7ff f909 	bl	8001be4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029da:	0798      	lsls	r0, r3, #30
 80029dc:	d5cb      	bpl.n	8002976 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7ff f901 	bl	8001be4 <HAL_GetTick>
 80029e2:	1b80      	subs	r0, r0, r6
 80029e4:	4540      	cmp	r0, r8
 80029e6:	d9f7      	bls.n	80029d8 <HAL_RCC_OscConfig+0x24c>
 80029e8:	e713      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff f8fb 	bl	8001be4 <HAL_GetTick>
 80029ee:	1b40      	subs	r0, r0, r5
 80029f0:	4540      	cmp	r0, r8
 80029f2:	d9bd      	bls.n	8002970 <HAL_RCC_OscConfig+0x1e4>
 80029f4:	e70d      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f6:	4d18      	ldr	r5, [pc, #96]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
 80029f8:	68ab      	ldr	r3, [r5, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d047      	beq.n	8002a92 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a02:	4e19      	ldr	r6, [pc, #100]	; (8002a68 <HAL_RCC_OscConfig+0x2dc>)
 8002a04:	2300      	movs	r3, #0
 8002a06:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002a08:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0a:	d135      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8002a0c:	f7ff f8ea 	bl	8001be4 <HAL_GetTick>
 8002a10:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	0199      	lsls	r1, r3, #6
 8002a16:	d429      	bmi.n	8002a6c <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a18:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a20:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a34:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a36:	2301      	movs	r3, #1
 8002a38:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002a3a:	f7ff f8d3 	bl	8001be4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4d06      	ldr	r5, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002a40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	f53f aeb7 	bmi.w	80027b8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff f8cb 	bl	8001be4 <HAL_GetTick>
 8002a4e:	1b00      	subs	r0, r0, r4
 8002a50:	2802      	cmp	r0, #2
 8002a52:	d9f6      	bls.n	8002a42 <HAL_RCC_OscConfig+0x2b6>
 8002a54:	e6dd      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	42470000 	.word	0x42470000
 8002a60:	42470e80 	.word	0x42470e80
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff f8ba 	bl	8001be4 <HAL_GetTick>
 8002a70:	1bc0      	subs	r0, r0, r7
 8002a72:	2802      	cmp	r0, #2
 8002a74:	d9cd      	bls.n	8002a12 <HAL_RCC_OscConfig+0x286>
 8002a76:	e6cc      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002a78:	f7ff f8b4 	bl	8001be4 <HAL_GetTick>
 8002a7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	f57f ae99 	bpl.w	80027b8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff f8ad 	bl	8001be4 <HAL_GetTick>
 8002a8a:	1b00      	subs	r0, r0, r4
 8002a8c:	2802      	cmp	r0, #2
 8002a8e:	d9f6      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2f2>
 8002a90:	e6bf      	b.n	8002812 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a92:	2801      	cmp	r0, #1
 8002a94:	f43f aebe 	beq.w	8002814 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002a98:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	4291      	cmp	r1, r2
 8002aa2:	f47f aea0 	bne.w	80027e6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	428a      	cmp	r2, r1
 8002aae:	f47f ae9a 	bne.w	80027e6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ab8:	401a      	ands	r2, r3
 8002aba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002abe:	f47f ae92 	bne.w	80027e6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ac4:	0852      	lsrs	r2, r2, #1
 8002ac6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002aca:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002acc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ad0:	f47f ae89 	bne.w	80027e6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ad6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ada:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002ade:	f43f ae6b 	beq.w	80027b8 <HAL_RCC_OscConfig+0x2c>
 8002ae2:	e680      	b.n	80027e6 <HAL_RCC_OscConfig+0x5a>

08002ae4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4c22      	ldr	r4, [pc, #136]	; (8002b70 <HAL_RCC_MCOConfig+0x8c>)
 8002ae8:	b088      	sub	sp, #32
 8002aea:	460e      	mov	r6, r1
 8002aec:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002aee:	b9f8      	cbnz	r0, 8002b30 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002af0:	9001      	str	r0, [sp, #4]
 8002af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6323      	str	r3, [r4, #48]	; 0x30
 8002afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002afc:	9007      	str	r0, [sp, #28]
    __MCO1_CLK_ENABLE();
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002b16:	a903      	add	r1, sp, #12
 8002b18:	4816      	ldr	r0, [pc, #88]	; (8002b74 <HAL_RCC_MCOConfig+0x90>)
 8002b1a:	f7ff fd4f 	bl	80025bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002b1e:	68a3      	ldr	r3, [r4, #8]
 8002b20:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8002b24:	ea43 0106 	orr.w	r1, r3, r6
 8002b28:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002b2a:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002b2c:	b008      	add	sp, #32
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002b36:	4810      	ldr	r0, [pc, #64]	; (8002b78 <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 8002b38:	f042 0204 	orr.w	r2, r2, #4
 8002b3c:	6322      	str	r2, [r4, #48]	; 0x30
 8002b3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002b40:	9307      	str	r3, [sp, #28]
    __MCO2_CLK_ENABLE();
 8002b42:	f002 0204 	and.w	r2, r2, #4
 8002b46:	9202      	str	r2, [sp, #8]
 8002b48:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4e:	2202      	movs	r2, #2
 8002b50:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2203      	movs	r2, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002b56:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	e9cd 3205 	strd	r3, r2, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002b5c:	f7ff fd2e 	bl	80025bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002b60:	68a3      	ldr	r3, [r4, #8]
 8002b62:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b66:	ea43 0106 	orr.w	r1, r3, r6
 8002b6a:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
 8002b6e:	e7dc      	b.n	8002b2a <HAL_RCC_MCOConfig+0x46>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020800 	.word	0x40020800

08002b7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4913      	ldr	r1, [pc, #76]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b80:	688b      	ldr	r3, [r1, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d01c      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x48>
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b94:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	bf14      	ite	ne
 8002b9a:	480d      	ldrne	r0, [pc, #52]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9c:	480d      	ldreq	r0, [pc, #52]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ba2:	bf18      	it	ne
 8002ba4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	fba1 0100 	umull	r0, r1, r1, r0
 8002bae:	f7fd fea7 	bl	8000900 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x50>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002bbe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bc2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x54>)
 8002bc6:	e7fc      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002bca:	e7fa      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	017d7840 	.word	0x017d7840
 8002bd4:	00f42400 	.word	0x00f42400

08002bd8 <HAL_RCC_ClockConfig>:
{
 8002bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bdc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002bde:	4604      	mov	r4, r0
 8002be0:	b910      	cbnz	r0, 8002be8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
}
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_RCC_ClockConfig+0x124>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f002 0207 	and.w	r2, r2, #7
 8002bf0:	428a      	cmp	r2, r1
 8002bf2:	d328      	bcc.n	8002c46 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	0797      	lsls	r7, r2, #30
 8002bf8:	d42d      	bmi.n	8002c56 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	07d0      	lsls	r0, r2, #31
 8002bfc:	d441      	bmi.n	8002c82 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_ClockConfig+0x124>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f002 0207 	and.w	r2, r2, #7
 8002c06:	42aa      	cmp	r2, r5
 8002c08:	d866      	bhi.n	8002cd8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	0751      	lsls	r1, r2, #29
 8002c0e:	d46c      	bmi.n	8002cea <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	0713      	lsls	r3, r2, #28
 8002c12:	d507      	bpl.n	8002c24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c14:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c16:	6921      	ldr	r1, [r4, #16]
 8002c18:	6893      	ldr	r3, [r2, #8]
 8002c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c24:	f7ff ffaa 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c2a:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_RCC_ClockConfig+0x12c>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	40d8      	lsrs	r0, r3
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x130>)
 8002c38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002c3a:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <HAL_RCC_ClockConfig+0x134>)
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	f7fe fceb 	bl	8001618 <HAL_InitTick>
  return HAL_OK;
 8002c42:	2000      	movs	r0, #0
 8002c44:	e7ce      	b.n	8002be4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	b2ca      	uxtb	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d1c6      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xa>
 8002c54:	e7ce      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c58:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	bf1e      	ittt	ne
 8002c5e:	6899      	ldrne	r1, [r3, #8]
 8002c60:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002c64:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c68:	bf42      	ittt	mi
 8002c6a:	6899      	ldrmi	r1, [r3, #8]
 8002c6c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002c70:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c72:	4923      	ldr	r1, [pc, #140]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c74:	68a0      	ldr	r0, [r4, #8]
 8002c76:	688b      	ldr	r3, [r1, #8]
 8002c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7c:	4303      	orrs	r3, r0
 8002c7e:	608b      	str	r3, [r1, #8]
 8002c80:	e7bb      	b.n	8002bfa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	6862      	ldr	r2, [r4, #4]
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c86:	2a01      	cmp	r2, #1
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	d0a7      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4e1b      	ldr	r6, [pc, #108]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002c94:	68b3      	ldr	r3, [r6, #8]
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c9e:	f7fe ffa1 	bl	8001be4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ca6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca8:	68b3      	ldr	r3, [r6, #8]
 8002caa:	6862      	ldr	r2, [r4, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cb4:	d0a3      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe ff95 	bl	8001be4 <HAL_GetTick>
 8002cba:	1bc0      	subs	r0, r0, r7
 8002cbc:	4540      	cmp	r0, r8
 8002cbe:	d9f3      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e78f      	b.n	8002be4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc4:	1e91      	subs	r1, r2, #2
 8002cc6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	d802      	bhi.n	8002cd2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ccc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cd0:	e7de      	b.n	8002c90 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	f013 0f02 	tst.w	r3, #2
 8002cd6:	e7db      	b.n	8002c90 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd8:	b2ea      	uxtb	r2, r5
 8002cda:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	42ab      	cmp	r3, r5
 8002ce4:	f47f af7d 	bne.w	8002be2 <HAL_RCC_ClockConfig+0xa>
 8002ce8:	e78f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cea:	4905      	ldr	r1, [pc, #20]	; (8002d00 <HAL_RCC_ClockConfig+0x128>)
 8002cec:	68e0      	ldr	r0, [r4, #12]
 8002cee:	688b      	ldr	r3, [r1, #8]
 8002cf0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002cf4:	4303      	orrs	r3, r0
 8002cf6:	608b      	str	r3, [r1, #8]
 8002cf8:	e78a      	b.n	8002c10 <HAL_RCC_ClockConfig+0x38>
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	0801fb98 	.word	0x0801fb98
 8002d08:	20000028 	.word	0x20000028
 8002d0c:	20000030 	.word	0x20000030

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000028 	.word	0x20000028

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	4a03      	ldr	r2, [pc, #12]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d2a:	6810      	ldr	r0, [r2, #0]
}
 8002d2c:	40d8      	lsrs	r0, r3
 8002d2e:	4770      	bx	lr
 8002d30:	40023800 	.word	0x40023800
 8002d34:	0801fba8 	.word	0x0801fba8
 8002d38:	20000028 	.word	0x20000028

08002d3c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_GetClockConfig+0x34>)
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	f002 0203 	and.w	r2, r2, #3
 8002d48:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d50:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d58:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	08db      	lsrs	r3, r3, #3
 8002d5e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002d62:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCC_GetClockConfig+0x38>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	600b      	str	r3, [r1, #0]
}
 8002d6e:	4770      	bx	lr
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40023c00 	.word	0x40023c00

08002d78 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d7c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d130      	bne.n	8002de6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_TIM_Base_Start_IT+0x70>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01a      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d017      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002da0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00f      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002db8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002dc0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x54>
 8002dc8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	2a06      	cmp	r2, #6
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2000      	movs	r0, #0
}
 8002de4:	4770      	bx	lr
    return HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000

08002df0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_IC_CaptureCallback>:
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIM_TriggerCallback>:
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df8:	6803      	ldr	r3, [r0, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	0791      	lsls	r1, r2, #30
{
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e02:	d50e      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	0792      	lsls	r2, r2, #30
 8002e08:	d50b      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e0a:	f06f 0202 	mvn.w	r2, #2
 8002e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e10:	2201      	movs	r2, #1
 8002e12:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	079b      	lsls	r3, r3, #30
 8002e18:	d077      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	f7ff ffea 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	0750      	lsls	r0, r2, #29
 8002e28:	d510      	bpl.n	8002e4c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	0751      	lsls	r1, r2, #29
 8002e2e:	d50d      	bpl.n	8002e4c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e30:	f06f 0204 	mvn.w	r2, #4
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e36:	2202      	movs	r2, #2
 8002e38:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e42:	d068      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	f7ff ffd5 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	0712      	lsls	r2, r2, #28
 8002e52:	d50f      	bpl.n	8002e74 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	0710      	lsls	r0, r2, #28
 8002e58:	d50c      	bpl.n	8002e74 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e5a:	f06f 0208 	mvn.w	r2, #8
 8002e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e60:	2204      	movs	r2, #4
 8002e62:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6a:	d05a      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6c:	f7ff ffc1 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	2300      	movs	r3, #0
 8002e72:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	06d2      	lsls	r2, r2, #27
 8002e7a:	d510      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	06d0      	lsls	r0, r2, #27
 8002e80:	d50d      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e82:	f06f 0210 	mvn.w	r2, #16
 8002e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e88:	2208      	movs	r2, #8
 8002e8a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e94:	d04b      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	f7ff ffac 	bl	8002df2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	07d1      	lsls	r1, r2, #31
 8002ea4:	d508      	bpl.n	8002eb8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	07d2      	lsls	r2, r2, #31
 8002eaa:	d505      	bpl.n	8002eb8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eac:	f06f 0201 	mvn.w	r2, #1
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f7fe fbf4 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	0610      	lsls	r0, r2, #24
 8002ebe:	d508      	bpl.n	8002ed2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	0611      	lsls	r1, r2, #24
 8002ec4:	d505      	bpl.n	8002ed2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 f8c8 	bl	8003062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	0652      	lsls	r2, r2, #25
 8002ed8:	d508      	bpl.n	8002eec <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	0650      	lsls	r0, r2, #25
 8002ede:	d505      	bpl.n	8002eec <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7ff ff85 	bl	8002df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	0691      	lsls	r1, r2, #26
 8002ef2:	d522      	bpl.n	8002f3a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	0692      	lsls	r2, r2, #26
 8002ef8:	d51f      	bpl.n	8002f3a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efa:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f00:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f06:	f000 b8ab 	b.w	8003060 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	f7ff ff71 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff ff70 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f14:	e783      	b.n	8002e1e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	f7ff ff6b 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7ff ff6a 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f20:	e792      	b.n	8002e48 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	f7ff ff65 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ff64 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f2c:	e7a0      	b.n	8002e70 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	f7ff ff5f 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7ff ff5e 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f38:	e7af      	b.n	8002e9a <HAL_TIM_IRQHandler+0xa2>
}
 8002f3a:	bd10      	pop	{r4, pc}

08002f3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	4a30      	ldr	r2, [pc, #192]	; (8003000 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002f3e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	4290      	cmp	r0, r2
 8002f42:	d012      	beq.n	8002f6a <TIM_Base_SetConfig+0x2e>
 8002f44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0x2e>
 8002f4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f4e:	4290      	cmp	r0, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0x2e>
 8002f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f56:	4290      	cmp	r0, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0x2e>
 8002f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f5e:	4290      	cmp	r0, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0x2e>
 8002f62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f66:	4290      	cmp	r0, r2
 8002f68:	d119      	bne.n	8002f9e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002f6a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f70:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	4a23      	ldr	r2, [pc, #140]	; (8003000 <TIM_Base_SetConfig+0xc4>)
 8002f74:	4290      	cmp	r0, r2
 8002f76:	d029      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f7c:	d026      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f82:	4290      	cmp	r0, r2
 8002f84:	d022      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f8a:	4290      	cmp	r0, r2
 8002f8c:	d01e      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f92:	4290      	cmp	r0, r2
 8002f94:	d01a      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f9a:	4290      	cmp	r0, r2
 8002f9c:	d016      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002f9e:	4a19      	ldr	r2, [pc, #100]	; (8003004 <TIM_Base_SetConfig+0xc8>)
 8002fa0:	4290      	cmp	r0, r2
 8002fa2:	d013      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa8:	4290      	cmp	r0, r2
 8002faa:	d00f      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002fb4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002fb8:	4290      	cmp	r0, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002fbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fc0:	4290      	cmp	r0, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x90>
 8002fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fc8:	4290      	cmp	r0, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fcc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	694a      	ldr	r2, [r1, #20]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002fdc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fde:	688b      	ldr	r3, [r1, #8]
 8002fe0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe2:	680b      	ldr	r3, [r1, #0]
 8002fe4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <TIM_Base_SetConfig+0xc4>)
 8002fe8:	4298      	cmp	r0, r3
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0xb8>
 8002fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d101      	bne.n	8002ff8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff4:	690b      	ldr	r3, [r1, #16]
 8002ff6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	6143      	str	r3, [r0, #20]
}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40014000 	.word	0x40014000

08003008 <HAL_TIM_Base_Init>:
{
 8003008:	b510      	push	{r4, lr}
  if (htim == NULL)
 800300a:	4604      	mov	r4, r0
 800300c:	b330      	cbz	r0, 800305c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003016:	b91b      	cbnz	r3, 8003020 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003018:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800301c:	f7ff feac 	bl	8002d78 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003022:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	1d21      	adds	r1, r4, #4
 800302a:	f7ff ff87 	bl	8002f3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302e:	2301      	movs	r3, #1
 8003030:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003034:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800303a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800303e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800304a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800305a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800305c:	2001      	movs	r0, #1
 800305e:	e7fc      	b.n	800305a <HAL_TIM_Base_Init+0x52>

08003060 <HAL_TIMEx_CommutCallback>:
 8003060:	4770      	bx	lr

08003062 <HAL_TIMEx_BreakCallback>:
 8003062:	4770      	bx	lr

08003064 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003064:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003068:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003072:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003078:	4770      	bx	lr

0800307a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800307e:	4770      	bx	lr

08003080 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003080:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003082:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800308c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800308e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003090:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003092:	3301      	adds	r3, #1
 8003094:	6003      	str	r3, [r0, #0]
}
 8003096:	4770      	bx	lr

08003098 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003098:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800309a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	d10a      	bne.n	80030b6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030a0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030a8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80030aa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80030ac:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80030ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80030b0:	3301      	adds	r3, #1
 80030b2:	6003      	str	r3, [r0, #0]
}
 80030b4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030b6:	f100 0208 	add.w	r2, r0, #8
 80030ba:	4613      	mov	r3, r2
 80030bc:	6852      	ldr	r2, [r2, #4]
 80030be:	6815      	ldr	r5, [r2, #0]
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d9fa      	bls.n	80030ba <vListInsert+0x22>
 80030c4:	e7ed      	b.n	80030a2 <vListInsert+0xa>

080030c6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030c6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80030ca:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030cc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030d4:	bf08      	it	eq
 80030d6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030d8:	2200      	movs	r2, #0
 80030da:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	3a01      	subs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030e2:	6818      	ldr	r0, [r3, #0]
}
 80030e4:	4770      	bx	lr

080030e6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030ea:	f001 fd0b 	bl	8004b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030ee:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80030f0:	f001 fd2a 	bl	8004b48 <vPortExitCritical>

	return xReturn;
}
 80030f4:	fab4 f084 	clz	r0, r4
 80030f8:	0940      	lsrs	r0, r0, #5
 80030fa:	bd10      	pop	{r4, pc}

080030fc <prvCopyDataToQueue>:
{
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003100:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003102:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8003104:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003106:	b952      	cbnz	r2, 800311e <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003108:	6807      	ldr	r7, [r0, #0]
 800310a:	bb47      	cbnz	r7, 800315e <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800310c:	6880      	ldr	r0, [r0, #8]
 800310e:	f001 f95d 	bl	80043cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003112:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003114:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003116:	3601      	adds	r6, #1
 8003118:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800311a:	4628      	mov	r0, r5
 800311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800311e:	b965      	cbnz	r5, 800313a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003120:	6840      	ldr	r0, [r0, #4]
 8003122:	f019 f88d 	bl	801c240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800312a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800312c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800312e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003130:	4293      	cmp	r3, r2
 8003132:	d3f0      	bcc.n	8003116 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	6063      	str	r3, [r4, #4]
 8003138:	e7ed      	b.n	8003116 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800313a:	68c0      	ldr	r0, [r0, #12]
 800313c:	f019 f880 	bl	801c240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003140:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003142:	68e3      	ldr	r3, [r4, #12]
 8003144:	4251      	negs	r1, r2
 8003146:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003148:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800314a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314c:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800314e:	bf3e      	ittt	cc
 8003150:	68a3      	ldrcc	r3, [r4, #8]
 8003152:	185b      	addcc	r3, r3, r1
 8003154:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003156:	2d02      	cmp	r5, #2
 8003158:	d101      	bne.n	800315e <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315a:	b116      	cbz	r6, 8003162 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800315c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800315e:	2500      	movs	r5, #0
 8003160:	e7d9      	b.n	8003116 <prvCopyDataToQueue+0x1a>
 8003162:	4635      	mov	r5, r6
 8003164:	e7d7      	b.n	8003116 <prvCopyDataToQueue+0x1a>

08003166 <prvCopyDataFromQueue>:
{
 8003166:	4603      	mov	r3, r0
 8003168:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800316c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800316e:	b16a      	cbz	r2, 800318c <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003170:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003172:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003174:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003176:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003178:	bf28      	it	cs
 800317a:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800317c:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800317e:	bf28      	it	cs
 8003180:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003182:	68d9      	ldr	r1, [r3, #12]
}
 8003184:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003188:	f019 b85a 	b.w	801c240 <memcpy>
}
 800318c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003190:	4770      	bx	lr

08003192 <prvUnlockQueue>:
{
 8003192:	b570      	push	{r4, r5, r6, lr}
 8003194:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003196:	f001 fcb5 	bl	8004b04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800319a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800319e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80031a2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	dc14      	bgt.n	80031d2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80031a8:	23ff      	movs	r3, #255	; 0xff
 80031aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80031ae:	f001 fccb 	bl	8004b48 <vPortExitCritical>
	taskENTER_CRITICAL();
 80031b2:	f001 fca7 	bl	8004b04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80031b6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ba:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80031be:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c0:	2d00      	cmp	r5, #0
 80031c2:	dc12      	bgt.n	80031ea <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80031c4:	23ff      	movs	r3, #255	; 0xff
 80031c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80031ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80031ce:	f001 bcbb 	b.w	8004b48 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0e7      	beq.n	80031a8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d8:	4630      	mov	r0, r6
 80031da:	f000 ff71 	bl	80040c0 <xTaskRemoveFromEventList>
 80031de:	b108      	cbz	r0, 80031e4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80031e0:	f000 ffec 	bl	80041bc <vTaskMissedYield>
			--cTxLock;
 80031e4:	3d01      	subs	r5, #1
 80031e6:	b26d      	sxtb	r5, r5
 80031e8:	e7dc      	b.n	80031a4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ea:	6923      	ldr	r3, [r4, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0e9      	beq.n	80031c4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f0:	4630      	mov	r0, r6
 80031f2:	f000 ff65 	bl	80040c0 <xTaskRemoveFromEventList>
 80031f6:	b108      	cbz	r0, 80031fc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80031f8:	f000 ffe0 	bl	80041bc <vTaskMissedYield>
				--cRxLock;
 80031fc:	3d01      	subs	r5, #1
 80031fe:	b26d      	sxtb	r5, r5
 8003200:	e7de      	b.n	80031c0 <prvUnlockQueue+0x2e>
	...

08003204 <xQueueGenericReset>:
{
 8003204:	b538      	push	{r3, r4, r5, lr}
 8003206:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003208:	4604      	mov	r4, r0
 800320a:	b940      	cbnz	r0, 800321e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	e7fe      	b.n	800321c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800321e:	f001 fc71 	bl	8004b04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003222:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8003226:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003228:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800322a:	434b      	muls	r3, r1
 800322c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800322e:	1a5b      	subs	r3, r3, r1
 8003230:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003232:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003234:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003236:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003238:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800323a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800323c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003244:	b995      	cbnz	r5, 800326c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	b163      	cbz	r3, 8003264 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800324a:	f104 0010 	add.w	r0, r4, #16
 800324e:	f000 ff37 	bl	80040c0 <xTaskRemoveFromEventList>
 8003252:	b138      	cbz	r0, 8003264 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <xQueueGenericReset+0x7c>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003264:	f001 fc70 	bl	8004b48 <vPortExitCritical>
}
 8003268:	2001      	movs	r0, #1
 800326a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800326c:	f104 0010 	add.w	r0, r4, #16
 8003270:	f7ff fef8 	bl	8003064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003274:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003278:	f7ff fef4 	bl	8003064 <vListInitialise>
 800327c:	e7f2      	b.n	8003264 <xQueueGenericReset+0x60>
 800327e:	bf00      	nop
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <xQueueGenericCreate>:
	{
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	460d      	mov	r5, r1
 8003288:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800328a:	4606      	mov	r6, r0
 800328c:	b940      	cbnz	r0, 80032a0 <xQueueGenericCreate+0x1c>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	e7fe      	b.n	800329e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032a2:	3050      	adds	r0, #80	; 0x50
 80032a4:	f001 fb0a 	bl	80048bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80032a8:	4604      	mov	r4, r0
 80032aa:	b158      	cbz	r0, 80032c4 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80032ac:	b165      	cbz	r5, 80032c8 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ae:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80032b2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 80032b6:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032b8:	2101      	movs	r1, #1
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ffa2 	bl	8003204 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80032c0:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80032c4:	4620      	mov	r0, r4
 80032c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c8:	4603      	mov	r3, r0
 80032ca:	e7f2      	b.n	80032b2 <xQueueGenericCreate+0x2e>

080032cc <xQueueCreateCountingSemaphore>:
	{
 80032cc:	b510      	push	{r4, lr}
 80032ce:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80032d0:	b940      	cbnz	r0, 80032e4 <xQueueCreateCountingSemaphore+0x18>
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	e7fe      	b.n	80032e2 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80032e4:	4288      	cmp	r0, r1
 80032e6:	d208      	bcs.n	80032fa <xQueueCreateCountingSemaphore+0x2e>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	e7fe      	b.n	80032f8 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80032fa:	2202      	movs	r2, #2
 80032fc:	2100      	movs	r1, #0
 80032fe:	f7ff ffc1 	bl	8003284 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003302:	b100      	cbz	r0, 8003306 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003304:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003306:	bd10      	pop	{r4, pc}

08003308 <xQueueGenericSend>:
{
 8003308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	4688      	mov	r8, r1
 800330e:	9201      	str	r2, [sp, #4]
 8003310:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003312:	4604      	mov	r4, r0
 8003314:	b940      	cbnz	r0, 8003328 <xQueueGenericSend+0x20>
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	e7fe      	b.n	8003326 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003328:	b951      	cbnz	r1, 8003340 <xQueueGenericSend+0x38>
 800332a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800332c:	b143      	cbz	r3, 8003340 <xQueueGenericSend+0x38>
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	e7fe      	b.n	800333e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003340:	2f02      	cmp	r7, #2
 8003342:	d10b      	bne.n	800335c <xQueueGenericSend+0x54>
 8003344:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d008      	beq.n	800335c <xQueueGenericSend+0x54>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	e7fe      	b.n	800335a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800335c:	f000 ffdc 	bl	8004318 <xTaskGetSchedulerState>
 8003360:	4606      	mov	r6, r0
 8003362:	b950      	cbnz	r0, 800337a <xQueueGenericSend+0x72>
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	b14b      	cbz	r3, 800337c <xQueueGenericSend+0x74>
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	e7fe      	b.n	8003378 <xQueueGenericSend+0x70>
 800337a:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 800337c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8003468 <xQueueGenericSend+0x160>
		prvLockQueue( pxQueue );
 8003380:	f04f 0900 	mov.w	r9, #0
 8003384:	e037      	b.n	80033f6 <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003386:	9d01      	ldr	r5, [sp, #4]
 8003388:	b91d      	cbnz	r5, 8003392 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800338a:	f001 fbdd 	bl	8004b48 <vPortExitCritical>
			return errQUEUE_FULL;
 800338e:	2000      	movs	r0, #0
 8003390:	e050      	b.n	8003434 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8003392:	b916      	cbnz	r6, 800339a <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003394:	a802      	add	r0, sp, #8
 8003396:	f000 fecf 	bl	8004138 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800339a:	f001 fbd5 	bl	8004b48 <vPortExitCritical>
		vTaskSuspendAll();
 800339e:	f000 fd25 	bl	8003dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a2:	f001 fbaf 	bl	8004b04 <vPortEnterCritical>
 80033a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	bf08      	it	eq
 80033ae:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80033b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80033b6:	2bff      	cmp	r3, #255	; 0xff
 80033b8:	bf08      	it	eq
 80033ba:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80033be:	f001 fbc3 	bl	8004b48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c2:	a901      	add	r1, sp, #4
 80033c4:	a802      	add	r0, sp, #8
 80033c6:	f000 fec1 	bl	800414c <xTaskCheckForTimeOut>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d146      	bne.n	800345c <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033ce:	f001 fb99 	bl	8004b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d12f      	bne.n	800343a <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80033da:	f001 fbb5 	bl	8004b48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033de:	9901      	ldr	r1, [sp, #4]
 80033e0:	f104 0010 	add.w	r0, r4, #16
 80033e4:	f000 fe54 	bl	8004090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff fed2 	bl	8003192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033ee:	f000 fd89 	bl	8003f04 <xTaskResumeAll>
 80033f2:	b350      	cbz	r0, 800344a <xQueueGenericSend+0x142>
 80033f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80033f6:	f001 fb85 	bl	8004b04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d301      	bcc.n	8003406 <xQueueGenericSend+0xfe>
 8003402:	2f02      	cmp	r7, #2
 8003404:	d1bf      	bne.n	8003386 <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003406:	463a      	mov	r2, r7
 8003408:	4641      	mov	r1, r8
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff fe76 	bl	80030fc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003412:	b11b      	cbz	r3, 800341c <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003418:	f000 fe52 	bl	80040c0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800341c:	b138      	cbz	r0, 800342e <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <xQueueGenericSend+0x160>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800342e:	f001 fb8b 	bl	8004b48 <vPortExitCritical>
				return pdPASS;
 8003432:	2001      	movs	r0, #1
}
 8003434:	b004      	add	sp, #16
 8003436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800343a:	f001 fb85 	bl	8004b48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fea7 	bl	8003192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003444:	f000 fd5e 	bl	8003f04 <xTaskResumeAll>
 8003448:	e7d4      	b.n	80033f4 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800344a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800344e:	f8ca 3000 	str.w	r3, [sl]
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	e7cb      	b.n	80033f4 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff fe98 	bl	8003192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003462:	f000 fd4f 	bl	8003f04 <xTaskResumeAll>
 8003466:	e792      	b.n	800338e <xQueueGenericSend+0x86>
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <xQueueCreateMutex>:
	{
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003470:	2050      	movs	r0, #80	; 0x50
 8003472:	f001 fa23 	bl	80048bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003476:	4604      	mov	r4, r0
 8003478:	b188      	cbz	r0, 800349e <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 800347a:	2500      	movs	r5, #0
 800347c:	2101      	movs	r1, #1
 800347e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003482:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003484:	f7ff febe 	bl	8003204 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003488:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800348c:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800348e:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003490:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003492:	462b      	mov	r3, r5
 8003494:	462a      	mov	r2, r5
 8003496:	4629      	mov	r1, r5
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff ff35 	bl	8003308 <xQueueGenericSend>
	}
 800349e:	4620      	mov	r0, r4
 80034a0:	bd70      	pop	{r4, r5, r6, pc}

080034a2 <xQueueGenericSendFromISR>:
{
 80034a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a6:	4689      	mov	r9, r1
 80034a8:	4690      	mov	r8, r2
 80034aa:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80034ac:	4604      	mov	r4, r0
 80034ae:	b940      	cbnz	r0, 80034c2 <xQueueGenericSendFromISR+0x20>
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c2:	b951      	cbnz	r1, 80034da <xQueueGenericSendFromISR+0x38>
 80034c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80034c6:	b143      	cbz	r3, 80034da <xQueueGenericSendFromISR+0x38>
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	e7fe      	b.n	80034d8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034da:	2f02      	cmp	r7, #2
 80034dc:	d10b      	bne.n	80034f6 <xQueueGenericSendFromISR+0x54>
 80034de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d008      	beq.n	80034f6 <xQueueGenericSendFromISR+0x54>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034f6:	f001 fc1d 	bl	8004d34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034fa:	f3ef 8611 	mrs	r6, BASEPRI
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800350e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003512:	429a      	cmp	r2, r3
 8003514:	d301      	bcc.n	800351a <xQueueGenericSendFromISR+0x78>
 8003516:	2f02      	cmp	r7, #2
 8003518:	d123      	bne.n	8003562 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800351a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8003520:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003522:	463a      	mov	r2, r7
 8003524:	4649      	mov	r1, r9
 8003526:	4620      	mov	r0, r4
 8003528:	f7ff fde8 	bl	80030fc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800352c:	1c6b      	adds	r3, r5, #1
 800352e:	d113      	bne.n	8003558 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003532:	b90b      	cbnz	r3, 8003538 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8003534:	2001      	movs	r0, #1
 8003536:	e00b      	b.n	8003550 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003538:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800353c:	f000 fdc0 	bl	80040c0 <xTaskRemoveFromEventList>
 8003540:	2800      	cmp	r0, #0
 8003542:	d0f7      	beq.n	8003534 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8003544:	f1b8 0f00 	cmp.w	r8, #0
 8003548:	d0f4      	beq.n	8003534 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800354a:	2001      	movs	r0, #1
 800354c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003550:	f386 8811 	msr	BASEPRI, r6
}
 8003554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003558:	3501      	adds	r5, #1
 800355a:	b26d      	sxtb	r5, r5
 800355c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003560:	e7e8      	b.n	8003534 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8003562:	2000      	movs	r0, #0
 8003564:	e7f4      	b.n	8003550 <xQueueGenericSendFromISR+0xae>

08003566 <xQueueGiveFromISR>:
{
 8003566:	b570      	push	{r4, r5, r6, lr}
 8003568:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800356a:	4604      	mov	r4, r0
 800356c:	b940      	cbnz	r0, 8003580 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	e7fe      	b.n	800357e <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003580:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003582:	b143      	cbz	r3, 8003596 <xQueueGiveFromISR+0x30>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	e7fe      	b.n	8003594 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003596:	6803      	ldr	r3, [r0, #0]
 8003598:	b953      	cbnz	r3, 80035b0 <xQueueGiveFromISR+0x4a>
 800359a:	6883      	ldr	r3, [r0, #8]
 800359c:	b143      	cbz	r3, 80035b0 <xQueueGiveFromISR+0x4a>
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	e7fe      	b.n	80035ae <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b0:	f001 fbc0 	bl	8004d34 <vPortValidateInterruptPriority>
	__asm volatile
 80035b4:	f3ef 8611 	mrs	r6, BASEPRI
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80035ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d91c      	bls.n	800360a <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80035d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035d4:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80035d6:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80035d8:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035da:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80035dc:	d110      	bne.n	8003600 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035e0:	b90b      	cbnz	r3, 80035e6 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80035e2:	2001      	movs	r0, #1
 80035e4:	e009      	b.n	80035fa <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035ea:	f000 fd69 	bl	80040c0 <xTaskRemoveFromEventList>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d0f7      	beq.n	80035e2 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	d0f5      	beq.n	80035e2 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035f6:	2001      	movs	r0, #1
 80035f8:	6028      	str	r0, [r5, #0]
	__asm volatile
 80035fa:	f386 8811 	msr	BASEPRI, r6
}
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003600:	3301      	adds	r3, #1
 8003602:	b25b      	sxtb	r3, r3
 8003604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003608:	e7eb      	b.n	80035e2 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800360a:	2000      	movs	r0, #0
 800360c:	e7f5      	b.n	80035fa <xQueueGiveFromISR+0x94>
	...

08003610 <xQueueReceive>:
{
 8003610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003614:	b085      	sub	sp, #20
 8003616:	460f      	mov	r7, r1
 8003618:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800361a:	4604      	mov	r4, r0
 800361c:	b940      	cbnz	r0, 8003630 <xQueueReceive+0x20>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	e7fe      	b.n	800362e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003630:	b951      	cbnz	r1, 8003648 <xQueueReceive+0x38>
 8003632:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003634:	b143      	cbz	r3, 8003648 <xQueueReceive+0x38>
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	e7fe      	b.n	8003646 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003648:	f000 fe66 	bl	8004318 <xTaskGetSchedulerState>
 800364c:	4606      	mov	r6, r0
 800364e:	b950      	cbnz	r0, 8003666 <xQueueReceive+0x56>
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	b14b      	cbz	r3, 8003668 <xQueueReceive+0x58>
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	e7fe      	b.n	8003664 <xQueueReceive+0x54>
 8003666:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 8003668:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800374c <xQueueReceive+0x13c>
		prvLockQueue( pxQueue );
 800366c:	f04f 0800 	mov.w	r8, #0
 8003670:	e03b      	b.n	80036ea <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003672:	9d01      	ldr	r5, [sp, #4]
 8003674:	b91d      	cbnz	r5, 800367e <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8003676:	f001 fa67 	bl	8004b48 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800367a:	2000      	movs	r0, #0
 800367c:	e052      	b.n	8003724 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800367e:	b916      	cbnz	r6, 8003686 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003680:	a802      	add	r0, sp, #8
 8003682:	f000 fd59 	bl	8004138 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003686:	f001 fa5f 	bl	8004b48 <vPortExitCritical>
		vTaskSuspendAll();
 800368a:	f000 fbaf 	bl	8003dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800368e:	f001 fa39 	bl	8004b04 <vPortEnterCritical>
 8003692:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	bf08      	it	eq
 800369a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800369e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80036a2:	2bff      	cmp	r3, #255	; 0xff
 80036a4:	bf08      	it	eq
 80036a6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80036aa:	f001 fa4d 	bl	8004b48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ae:	a901      	add	r1, sp, #4
 80036b0:	a802      	add	r0, sp, #8
 80036b2:	f000 fd4b 	bl	800414c <xTaskCheckForTimeOut>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d13d      	bne.n	8003736 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff fd13 	bl	80030e6 <prvIsQueueEmpty>
 80036c0:	b398      	cbz	r0, 800372a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036c2:	9901      	ldr	r1, [sp, #4]
 80036c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036c8:	f000 fce2 	bl	8004090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff fd60 	bl	8003192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036d2:	f000 fc17 	bl	8003f04 <xTaskResumeAll>
 80036d6:	b938      	cbnz	r0, 80036e8 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 80036d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036dc:	f8c9 3000 	str.w	r3, [r9]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80036ea:	f001 fa0b 	bl	8004b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	d0be      	beq.n	8003672 <xQueueReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036f4:	4639      	mov	r1, r7
 80036f6:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036f8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036fa:	f7ff fd34 	bl	8003166 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036fe:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003700:	6923      	ldr	r3, [r4, #16]
 8003702:	b163      	cbz	r3, 800371e <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003704:	f104 0010 	add.w	r0, r4, #16
 8003708:	f000 fcda 	bl	80040c0 <xTaskRemoveFromEventList>
 800370c:	b138      	cbz	r0, 800371e <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <xQueueReceive+0x13c>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800371e:	f001 fa13 	bl	8004b48 <vPortExitCritical>
				return pdPASS;
 8003722:	2001      	movs	r0, #1
}
 8003724:	b005      	add	sp, #20
 8003726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff fd31 	bl	8003192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003730:	f000 fbe8 	bl	8003f04 <xTaskResumeAll>
 8003734:	e7d8      	b.n	80036e8 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 8003736:	4620      	mov	r0, r4
 8003738:	f7ff fd2b 	bl	8003192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800373c:	f000 fbe2 	bl	8003f04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fcd0 	bl	80030e6 <prvIsQueueEmpty>
 8003746:	2800      	cmp	r0, #0
 8003748:	d0ce      	beq.n	80036e8 <xQueueReceive+0xd8>
 800374a:	e796      	b.n	800367a <xQueueReceive+0x6a>
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <xQueueSemaphoreTake>:
{
 8003750:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8003754:	4604      	mov	r4, r0
{
 8003756:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003758:	b940      	cbnz	r0, 800376c <xQueueSemaphoreTake+0x1c>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	e7fe      	b.n	800376a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800376c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800376e:	b145      	cbz	r5, 8003782 <xQueueSemaphoreTake+0x32>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	e7fe      	b.n	8003780 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003782:	f000 fdc9 	bl	8004318 <xTaskGetSchedulerState>
 8003786:	4606      	mov	r6, r0
 8003788:	b950      	cbnz	r0, 80037a0 <xQueueSemaphoreTake+0x50>
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	b16b      	cbz	r3, 80037aa <xQueueSemaphoreTake+0x5a>
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	e7fe      	b.n	800379e <xQueueSemaphoreTake+0x4e>
 80037a0:	462e      	mov	r6, r5
					portYIELD_WITHIN_API();
 80037a2:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80038d4 <xQueueSemaphoreTake+0x184>
		prvLockQueue( pxQueue );
 80037a6:	2700      	movs	r7, #0
 80037a8:	e051      	b.n	800384e <xQueueSemaphoreTake+0xfe>
 80037aa:	4605      	mov	r5, r0
 80037ac:	e7f9      	b.n	80037a2 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	b963      	cbnz	r3, 80037cc <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80037b2:	b145      	cbz	r5, 80037c6 <xQueueSemaphoreTake+0x76>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	e7fe      	b.n	80037c4 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 80037c6:	f001 f9bf 	bl	8004b48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80037ca:	e05e      	b.n	800388a <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 80037cc:	b916      	cbnz	r6, 80037d4 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ce:	a802      	add	r0, sp, #8
 80037d0:	f000 fcb2 	bl	8004138 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80037d4:	f001 f9b8 	bl	8004b48 <vPortExitCritical>
		vTaskSuspendAll();
 80037d8:	f000 fb08 	bl	8003dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037dc:	f001 f992 	bl	8004b04 <vPortEnterCritical>
 80037e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	bf08      	it	eq
 80037e8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80037ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037f0:	2bff      	cmp	r3, #255	; 0xff
 80037f2:	bf08      	it	eq
 80037f4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80037f8:	f001 f9a6 	bl	8004b48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fc:	a901      	add	r1, sp, #4
 80037fe:	a802      	add	r0, sp, #8
 8003800:	f000 fca4 	bl	800414c <xTaskCheckForTimeOut>
 8003804:	2800      	cmp	r0, #0
 8003806:	d14a      	bne.n	800389e <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003808:	4620      	mov	r0, r4
 800380a:	f7ff fc6c 	bl	80030e6 <prvIsQueueEmpty>
 800380e:	2800      	cmp	r0, #0
 8003810:	d03f      	beq.n	8003892 <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	b93b      	cbnz	r3, 8003826 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 8003816:	f001 f975 	bl	8004b04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800381a:	68a0      	ldr	r0, [r4, #8]
 800381c:	f000 fd8c 	bl	8004338 <xTaskPriorityInherit>
 8003820:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003822:	f001 f991 	bl	8004b48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003826:	9901      	ldr	r1, [sp, #4]
 8003828:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800382c:	f000 fc30 	bl	8004090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fcae 	bl	8003192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003836:	f000 fb65 	bl	8003f04 <xTaskResumeAll>
 800383a:	b938      	cbnz	r0, 800384c <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800383c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003840:	f8c8 3000 	str.w	r3, [r8]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800384e:	f001 f959 	bl	8004b04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0aa      	beq.n	80037ae <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003858:	3b01      	subs	r3, #1
 800385a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	b913      	cbnz	r3, 8003866 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003860:	f000 feb8 	bl	80045d4 <pvTaskIncrementMutexHeldCount>
 8003864:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	b163      	cbz	r3, 8003884 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386a:	f104 0010 	add.w	r0, r4, #16
 800386e:	f000 fc27 	bl	80040c0 <xTaskRemoveFromEventList>
 8003872:	b138      	cbz	r0, 8003884 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <xQueueSemaphoreTake+0x184>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003884:	f001 f960 	bl	8004b48 <vPortExitCritical>
				return pdPASS;
 8003888:	2501      	movs	r5, #1
}
 800388a:	4628      	mov	r0, r5
 800388c:	b004      	add	sp, #16
 800388e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff fc7d 	bl	8003192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003898:	f000 fb34 	bl	8003f04 <xTaskResumeAll>
 800389c:	e7d6      	b.n	800384c <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fc77 	bl	8003192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038a4:	f000 fb2e 	bl	8003f04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff fc1c 	bl	80030e6 <prvIsQueueEmpty>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0cc      	beq.n	800384c <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	d0e9      	beq.n	800388a <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80038b6:	f001 f925 	bl	8004b04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80038bc:	b119      	cbz	r1, 80038c6 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80038c6:	68a0      	ldr	r0, [r4, #8]
 80038c8:	f000 fdd0 	bl	800446c <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80038cc:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80038ce:	f001 f93b 	bl	8004b48 <vPortExitCritical>
 80038d2:	e7da      	b.n	800388a <xQueueSemaphoreTake+0x13a>
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xQueueReceiveFromISR>:
{
 80038d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038dc:	4689      	mov	r9, r1
 80038de:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80038e0:	4605      	mov	r5, r0
 80038e2:	b940      	cbnz	r0, 80038f6 <xQueueReceiveFromISR+0x1e>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	e7fe      	b.n	80038f4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038f6:	b951      	cbnz	r1, 800390e <xQueueReceiveFromISR+0x36>
 80038f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038fa:	b143      	cbz	r3, 800390e <xQueueReceiveFromISR+0x36>
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	e7fe      	b.n	800390c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800390e:	f001 fa11 	bl	8004d34 <vPortValidateInterruptPriority>
	__asm volatile
 8003912:	f3ef 8711 	mrs	r7, BASEPRI
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003926:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003928:	b31c      	cbz	r4, 8003972 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800392a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800392e:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8003930:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003932:	4628      	mov	r0, r5
 8003934:	f7ff fc17 	bl	8003166 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003938:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800393a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800393c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800393e:	d113      	bne.n	8003968 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003940:	692b      	ldr	r3, [r5, #16]
 8003942:	b90b      	cbnz	r3, 8003948 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8003944:	2001      	movs	r0, #1
 8003946:	e00b      	b.n	8003960 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003948:	f105 0010 	add.w	r0, r5, #16
 800394c:	f000 fbb8 	bl	80040c0 <xTaskRemoveFromEventList>
 8003950:	2800      	cmp	r0, #0
 8003952:	d0f7      	beq.n	8003944 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8003954:	f1b8 0f00 	cmp.w	r8, #0
 8003958:	d0f4      	beq.n	8003944 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800395a:	2001      	movs	r0, #1
 800395c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003960:	f387 8811 	msr	BASEPRI, r7
}
 8003964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003968:	3601      	adds	r6, #1
 800396a:	b276      	sxtb	r6, r6
 800396c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003970:	e7e8      	b.n	8003944 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8003972:	4620      	mov	r0, r4
 8003974:	e7f4      	b.n	8003960 <xQueueReceiveFromISR+0x88>

08003976 <uxQueueMessagesWaiting>:
{
 8003976:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8003978:	4604      	mov	r4, r0
 800397a:	b940      	cbnz	r0, 800398e <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	e7fe      	b.n	800398c <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800398e:	f001 f8b9 	bl	8004b04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003992:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003994:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003996:	f001 f8d7 	bl	8004b48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800399a:	9801      	ldr	r0, [sp, #4]
 800399c:	b002      	add	sp, #8
 800399e:	bd10      	pop	{r4, pc}

080039a0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80039a0:	b940      	cbnz	r0, 80039b4 <uxQueueMessagesWaitingFromISR+0x14>
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	e7fe      	b.n	80039b2 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80039b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80039b6:	4770      	bx	lr

080039b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80039b8:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039ba:	4909      	ldr	r1, [pc, #36]	; (80039e0 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039bc:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039be:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80039c2:	4282      	cmp	r2, r0
 80039c4:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 80039c8:	d106      	bne.n	80039d8 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80039ca:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <vQueueUnregisterQueue+0x2c>)
 80039cc:	2100      	movs	r1, #0
 80039ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80039d2:	4422      	add	r2, r4
 80039d4:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039d6:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039d8:	3301      	adds	r3, #1
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d1ef      	bne.n	80039be <vQueueUnregisterQueue+0x6>
 80039de:	e7fa      	b.n	80039d6 <vQueueUnregisterQueue+0x1e>
 80039e0:	2000effc 	.word	0x2000effc
 80039e4:	2000eff8 	.word	0x2000eff8

080039e8 <vQueueDelete>:
{
 80039e8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80039ea:	b940      	cbnz	r0, 80039fe <vQueueDelete+0x16>
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	e7fe      	b.n	80039fc <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80039fe:	f7ff ffdb 	bl	80039b8 <vQueueUnregisterQueue>
}
 8003a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8003a06:	f000 bfd9 	b.w	80049bc <vPortFree>
	...

08003a0c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <prvResetNextTaskUnblockTime+0x1c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	b91a      	cbnz	r2, 8003a1c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a18:	605a      	str	r2, [r3, #4]
	}
}
 8003a1a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a20:	68d2      	ldr	r2, [r2, #12]
 8003a22:	6852      	ldr	r2, [r2, #4]
 8003a24:	e7f8      	b.n	8003a18 <prvResetNextTaskUnblockTime+0xc>
 8003a26:	bf00      	nop
 8003a28:	2000037c 	.word	0x2000037c

08003a2c <prvAddCurrentTaskToDelayedList.isra.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003a2c:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a2e:	4c12      	ldr	r4, [pc, #72]	; (8003a78 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003a30:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8003a32:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a34:	68e0      	ldr	r0, [r4, #12]
 8003a36:	3004      	adds	r0, #4
 8003a38:	f7ff fb45 	bl	80030c6 <uxListRemove>
 8003a3c:	b938      	cbnz	r0, 8003a4e <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a3e:	68e2      	ldr	r2, [r4, #12]
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	408a      	lsls	r2, r1
 8003a48:	ea23 0302 	bic.w	r3, r3, r2
 8003a4c:	6123      	str	r3, [r4, #16]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	1975      	adds	r5, r6, r5
 8003a52:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8003a54:	d306      	bcc.n	8003a64 <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a56:	6960      	ldr	r0, [r4, #20]
 8003a58:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5e:	3104      	adds	r1, #4
 8003a60:	f7ff bb1a 	b.w	8003098 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	68e1      	ldr	r1, [r4, #12]
 8003a68:	3104      	adds	r1, #4
 8003a6a:	f7ff fb15 	bl	8003098 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	429d      	cmp	r5, r3
				xNextTaskUnblockTime = xTimeToWake;
 8003a72:	bf38      	it	cc
 8003a74:	6065      	strcc	r5, [r4, #4]
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	2000037c 	.word	0x2000037c

08003a7c <prvIdleTask>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a7c:	4c12      	ldr	r4, [pc, #72]	; (8003ac8 <prvIdleTask+0x4c>)
				taskYIELD();
 8003a7e:	4e13      	ldr	r6, [pc, #76]	; (8003acc <prvIdleTask+0x50>)
{
 8003a80:	b580      	push	{r7, lr}
				taskYIELD();
 8003a82:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a88:	b943      	cbnz	r3, 8003a9c <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d9fa      	bls.n	8003a86 <prvIdleTask+0xa>
				taskYIELD();
 8003a90:	6037      	str	r7, [r6, #0]
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	e7f4      	b.n	8003a86 <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8003a9c:	f001 f832 	bl	8004b04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa4:	1d28      	adds	r0, r5, #4
 8003aa6:	f7ff fb0e 	bl	80030c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003aac:	3b01      	subs	r3, #1
 8003aae:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8003ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8003ab6:	f001 f847 	bl	8004b48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003aba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003abc:	f000 ff7e 	bl	80049bc <vPortFree>
			vPortFree( pxTCB );
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 ff7b 	bl	80049bc <vPortFree>
	}
 8003ac6:	e7de      	b.n	8003a86 <prvIdleTask+0xa>
 8003ac8:	2000037c 	.word	0x2000037c
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <xTaskCreate>:
	{
 8003ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad4:	0096      	lsls	r6, r2, #2
	{
 8003ad6:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad8:	4630      	mov	r0, r6
	{
 8003ada:	460c      	mov	r4, r1
 8003adc:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ade:	f000 feed 	bl	80048bc <pvPortMalloc>
			if( pxStack != NULL )
 8003ae2:	4681      	mov	r9, r0
 8003ae4:	b1a0      	cbz	r0, 8003b10 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ae6:	205c      	movs	r0, #92	; 0x5c
 8003ae8:	f000 fee8 	bl	80048bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003aec:	4605      	mov	r5, r0
 8003aee:	b160      	cbz	r0, 8003b0a <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8003af0:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003af4:	4632      	mov	r2, r6
 8003af6:	21a5      	movs	r1, #165	; 0xa5
 8003af8:	4648      	mov	r0, r9
 8003afa:	f018 fbc9 	bl	801c290 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003afe:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 8003b02:	b944      	cbnz	r4, 8003b16 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b04:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8003b08:	e014      	b.n	8003b34 <xTaskCreate+0x64>
					vPortFree( pxStack );
 8003b0a:	4648      	mov	r0, r9
 8003b0c:	f000 ff56 	bl	80049bc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b10:	f04f 36ff 	mov.w	r6, #4294967295
 8003b14:	e09a      	b.n	8003c4c <xTaskCreate+0x17c>
 8003b16:	1e63      	subs	r3, r4, #1
 8003b18:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003b1c:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b1e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003b22:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8003b26:	7819      	ldrb	r1, [r3, #0]
 8003b28:	b109      	cbz	r1, 8003b2e <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d1f7      	bne.n	8003b1e <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003b36:	2c06      	cmp	r4, #6
 8003b38:	bf28      	it	cs
 8003b3a:	2406      	movcs	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003b3c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b40:	f105 0904 	add.w	r9, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 8003b44:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003b46:	64ec      	str	r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b48:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 8003b4a:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b4e:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b50:	f7ff fa93 	bl	800307a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b54:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b58:	f105 0018 	add.w	r0, r5, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5c:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5e:	f7ff fa8c 	bl	800307a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003b62:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b66:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b68:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b6a:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b6c:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b70:	4642      	mov	r2, r8
 8003b72:	4639      	mov	r1, r7
 8003b74:	f026 0007 	bic.w	r0, r6, #7
 8003b78:	f000 ff96 	bl	8004aa8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8003b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7e:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8003b80:	b103      	cbz	r3, 8003b84 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b82:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 8003b84:	4c38      	ldr	r4, [pc, #224]	; (8003c68 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 8003b86:	f000 ffbd 	bl	8004b04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003b8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8003b90:	68e3      	ldr	r3, [r4, #12]
 8003b92:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d15b      	bne.n	8003c52 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 8003b9a:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d12f      	bne.n	8003c02 <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f7ff fa5e 	bl	8003064 <vListInitialise>
 8003ba8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003bac:	f7ff fa5a 	bl	8003064 <vListInitialise>
 8003bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bb4:	f7ff fa56 	bl	8003064 <vListInitialise>
 8003bb8:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8003bbc:	f7ff fa52 	bl	8003064 <vListInitialise>
 8003bc0:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003bc4:	f7ff fa4e 	bl	8003064 <vListInitialise>
 8003bc8:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003bcc:	f7ff fa4a 	bl	8003064 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003bd0:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003bd8:	f7ff fa44 	bl	8003064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bdc:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
	vListInitialise( &xDelayedTaskList1 );
 8003be0:	4640      	mov	r0, r8
 8003be2:	f7ff fa3f 	bl	8003064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff fa3c 	bl	8003064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bec:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003bf0:	f7ff fa38 	bl	8003064 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003bf4:	f104 0018 	add.w	r0, r4, #24
 8003bf8:	f7ff fa34 	bl	8003064 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bfc:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c00:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 8003c02:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8003c06:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003c08:	6921      	ldr	r1, [r4, #16]
		uxTaskNumber++;
 8003c0a:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8003c0c:	2601      	movs	r6, #1
		uxTaskNumber++;
 8003c0e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c12:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003c14:	2014      	movs	r0, #20
 8003c16:	fa06 f302 	lsl.w	r3, r6, r2
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	fb00 7002 	mla	r0, r0, r2, r7
 8003c20:	4649      	mov	r1, r9
 8003c22:	6123      	str	r3, [r4, #16]
 8003c24:	f7ff fa2c 	bl	8003080 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003c28:	f000 ff8e 	bl	8004b48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003c2c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003c30:	b163      	cbz	r3, 8003c4c <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c32:	68e3      	ldr	r3, [r4, #12]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d207      	bcs.n	8003c4c <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <xTaskCreate+0x19c>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
	}
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003c52:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1d3      	bne.n	8003c02 <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003c62:	bf28      	it	cs
 8003c64:	60e5      	strcs	r5, [r4, #12]
 8003c66:	e7cc      	b.n	8003c02 <xTaskCreate+0x132>
 8003c68:	2000037c 	.word	0x2000037c
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <vTaskDelete>:
	{
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	4c29      	ldr	r4, [pc, #164]	; (8003d1c <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 8003c76:	f000 ff45 	bl	8004b04 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003c7a:	b905      	cbnz	r5, 8003c7e <vTaskDelete+0xe>
 8003c7c:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c7e:	1d2e      	adds	r6, r5, #4
 8003c80:	4630      	mov	r0, r6
 8003c82:	f7ff fa20 	bl	80030c6 <uxListRemove>
 8003c86:	b958      	cbnz	r0, 8003ca0 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c88:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003c8a:	2014      	movs	r0, #20
 8003c8c:	fb00 4001 	mla	r0, r0, r1, r4
 8003c90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c92:	b92b      	cbnz	r3, 8003ca0 <vTaskDelete+0x30>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	2201      	movs	r2, #1
 8003c98:	408a      	lsls	r2, r1
 8003c9a:	ea23 0302 	bic.w	r3, r3, r2
 8003c9e:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ca0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ca2:	b11b      	cbz	r3, 8003cac <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca4:	f105 0018 	add.w	r0, r5, #24
 8003ca8:	f7ff fa0d 	bl	80030c6 <uxListRemove>
			uxTaskNumber++;
 8003cac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	42ab      	cmp	r3, r5
 8003cba:	d11a      	bne.n	8003cf2 <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003cbc:	4818      	ldr	r0, [pc, #96]	; (8003d20 <vTaskDelete+0xb0>)
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	f7ff f9de 	bl	8003080 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8003cca:	f000 ff3d 	bl	8004b48 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003cce:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003cd2:	b313      	cbz	r3, 8003d1a <vTaskDelete+0xaa>
			if( pxTCB == pxCurrentTCB )
 8003cd4:	68e3      	ldr	r3, [r4, #12]
 8003cd6:	42ab      	cmp	r3, r5
 8003cd8:	d11f      	bne.n	8003d1a <vTaskDelete+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
 8003cda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003cde:	b1a3      	cbz	r3, 8003d0a <vTaskDelete+0x9a>
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	e7fe      	b.n	8003cf0 <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 8003cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003cf4:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003cfa:	f000 fe5f 	bl	80049bc <vPortFree>
			vPortFree( pxTCB );
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 fe5c 	bl	80049bc <vPortFree>
				prvResetNextTaskUnblockTime();
 8003d04:	f7ff fe82 	bl	8003a0c <prvResetNextTaskUnblockTime>
 8003d08:	e7df      	b.n	8003cca <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <vTaskDelete+0xb4>)
 8003d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	f3bf 8f6f 	isb	sy
	}
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	2000037c 	.word	0x2000037c
 8003d20:	20000394 	.word	0x20000394
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <eTaskGetState>:
	{
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	b940      	cbnz	r0, 8003d40 <eTaskGetState+0x18>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	e7fe      	b.n	8003d3e <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003d40:	4c0e      	ldr	r4, [pc, #56]	; (8003d7c <eTaskGetState+0x54>)
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	4283      	cmp	r3, r0
 8003d46:	d012      	beq.n	8003d6e <eTaskGetState+0x46>
			taskENTER_CRITICAL();
 8003d48:	f000 fedc 	bl	8004b04 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003d4c:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003d4e:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003d50:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 8003d52:	f000 fef9 	bl	8004b48 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003d56:	42bd      	cmp	r5, r7
 8003d58:	d00b      	beq.n	8003d72 <eTaskGetState+0x4a>
 8003d5a:	42b5      	cmp	r5, r6
 8003d5c:	d009      	beq.n	8003d72 <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003d5e:	3418      	adds	r4, #24
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d008      	beq.n	8003d76 <eTaskGetState+0x4e>
				eReturn = eReady;
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2004      	moveq	r0, #4
 8003d6a:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e7fc      	b.n	8003d6c <eTaskGetState+0x44>
				eReturn = eBlocked;
 8003d72:	2002      	movs	r0, #2
 8003d74:	e7fa      	b.n	8003d6c <eTaskGetState+0x44>
					eReturn = eDeleted;
 8003d76:	2004      	movs	r0, #4
 8003d78:	e7f8      	b.n	8003d6c <eTaskGetState+0x44>
 8003d7a:	bf00      	nop
 8003d7c:	2000037c 	.word	0x2000037c

08003d80 <vTaskStartScheduler>:
{
 8003d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003d82:	4c17      	ldr	r4, [pc, #92]	; (8003de0 <vTaskStartScheduler+0x60>)
 8003d84:	4917      	ldr	r1, [pc, #92]	; (8003de4 <vTaskStartScheduler+0x64>)
 8003d86:	4818      	ldr	r0, [pc, #96]	; (8003de8 <vTaskStartScheduler+0x68>)
 8003d88:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	9500      	str	r5, [sp, #0]
 8003d92:	462b      	mov	r3, r5
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	f7ff fe9b 	bl	8003ad0 <xTaskCreate>
	if( xReturn == pdPASS )
 8003d9a:	2801      	cmp	r0, #1
 8003d9c:	d112      	bne.n	8003dc4 <vTaskStartScheduler+0x44>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8003db4:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003db8:	60a5      	str	r5, [r4, #8]
}
 8003dba:	b003      	add	sp, #12
 8003dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003dc0:	f000 bf38 	b.w	8004c34 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d108      	bne.n	8003dda <vTaskStartScheduler+0x5a>
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	e7fe      	b.n	8003dd8 <vTaskStartScheduler+0x58>
}
 8003dda:	b003      	add	sp, #12
 8003ddc:	bd30      	pop	{r4, r5, pc}
 8003dde:	bf00      	nop
 8003de0:	2000037c 	.word	0x2000037c
 8003de4:	0802b081 	.word	0x0802b081
 8003de8:	08003a7d 	.word	0x08003a7d

08003dec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003dec:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <vTaskSuspendAll+0x10>)
 8003dee:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8003df2:	3301      	adds	r3, #1
 8003df4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000037c 	.word	0x2000037c

08003e00 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <xTaskGetTickCount+0x8>)
 8003e02:	6898      	ldr	r0, [r3, #8]
}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	2000037c 	.word	0x2000037c

08003e0c <xTaskGetTickCountFromISR>:
{
 8003e0c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e0e:	f000 ff91 	bl	8004d34 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003e12:	4b01      	ldr	r3, [pc, #4]	; (8003e18 <xTaskGetTickCountFromISR+0xc>)
 8003e14:	6898      	ldr	r0, [r3, #8]
}
 8003e16:	bd08      	pop	{r3, pc}
 8003e18:	2000037c 	.word	0x2000037c

08003e1c <xTaskIncrementTick>:
{
 8003e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <xTaskIncrementTick+0xe0>)
 8003e22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003e26:	461c      	mov	r4, r3
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d160      	bne.n	8003eee <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e2c:	689f      	ldr	r7, [r3, #8]
 8003e2e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003e30:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e32:	b9b7      	cbnz	r7, 8003e62 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b143      	cbz	r3, 8003e4c <xTaskIncrementTick+0x30>
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	e7fe      	b.n	8003e4a <xTaskIncrementTick+0x2e>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	6962      	ldr	r2, [r4, #20]
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	6163      	str	r3, [r4, #20]
 8003e54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003e5e:	f7ff fdd5 	bl	8003a0c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e62:	6863      	ldr	r3, [r4, #4]
 8003e64:	429f      	cmp	r7, r3
BaseType_t xSwitchRequired = pdFALSE;
 8003e66:	f04f 0500 	mov.w	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e6a:	d210      	bcs.n	8003e8e <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	2214      	movs	r2, #20
 8003e72:	fb02 4303 	mla	r3, r2, r3, r4
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003e78:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8003e7a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 8003e7e:	bf28      	it	cs
 8003e80:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf18      	it	ne
 8003e86:	2501      	movne	r5, #1
}
 8003e88:	4628      	mov	r0, r5
 8003e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003e8e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003f00 <xTaskIncrementTick+0xe4>
 8003e92:	f04f 0a01 	mov.w	sl, #1
 8003e96:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	b91b      	cbnz	r3, 8003ea8 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8003ea4:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ea6:	e7e1      	b.n	8003e6c <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eae:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003eb0:	429f      	cmp	r7, r3
 8003eb2:	d3f7      	bcc.n	8003ea4 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb4:	f106 0b04 	add.w	fp, r6, #4
 8003eb8:	4658      	mov	r0, fp
 8003eba:	f7ff f904 	bl	80030c6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ebe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003ec0:	b11b      	cbz	r3, 8003eca <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec2:	f106 0018 	add.w	r0, r6, #24
 8003ec6:	f7ff f8fe 	bl	80030c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eca:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003ecc:	6922      	ldr	r2, [r4, #16]
 8003ece:	fa0a f300 	lsl.w	r3, sl, r0
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	fb09 8000 	mla	r0, r9, r0, r8
 8003eda:	6123      	str	r3, [r4, #16]
 8003edc:	f7ff f8d0 	bl	8003080 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee0:	68e3      	ldr	r3, [r4, #12]
 8003ee2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	bf28      	it	cs
 8003eea:	2501      	movcs	r5, #1
 8003eec:	e7d5      	b.n	8003e9a <xTaskIncrementTick+0x7e>
		++xPendedTicks;
 8003eee:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 8003ef8:	2500      	movs	r5, #0
	return xSwitchRequired;
 8003efa:	e7c5      	b.n	8003e88 <xTaskIncrementTick+0x6c>
 8003efc:	2000037c 	.word	0x2000037c
 8003f00:	200003b0 	.word	0x200003b0

08003f04 <xTaskResumeAll>:
{
 8003f04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003f08:	4c33      	ldr	r4, [pc, #204]	; (8003fd8 <xTaskResumeAll+0xd4>)
 8003f0a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003f0e:	b943      	cbnz	r3, 8003f22 <xTaskResumeAll+0x1e>
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	e7fe      	b.n	8003f20 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003f22:	f000 fdef 	bl	8004b04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003f26:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f30:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8003f34:	b135      	cbz	r5, 8003f44 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003f38:	f000 fe06 	bl	8004b48 <vPortExitCritical>
}
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	b002      	add	sp, #8
 8003f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f5      	beq.n	8003f36 <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8003f4a:	2601      	movs	r6, #1
 8003f4c:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003f50:	f04f 0814 	mov.w	r8, #20
 8003f54:	e01d      	b.n	8003f92 <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f56:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003f5a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f5c:	f105 0018 	add.w	r0, r5, #24
 8003f60:	f7ff f8b1 	bl	80030c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f64:	1d29      	adds	r1, r5, #4
 8003f66:	4608      	mov	r0, r1
 8003f68:	9101      	str	r1, [sp, #4]
 8003f6a:	f7ff f8ac 	bl	80030c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f6e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	fa06 f300 	lsl.w	r3, r6, r0
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	fb08 7000 	mla	r0, r8, r0, r7
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	f7ff f87e 	bl	8003080 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d301      	bcc.n	8003f92 <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 8003f8e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f92:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1dd      	bne.n	8003f56 <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 8003f9a:	b10d      	cbz	r5, 8003fa0 <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 8003f9c:	f7ff fd36 	bl	8003a0c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fa0:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 8003fa4:	b14d      	cbz	r5, 8003fba <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8003fa6:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003fa8:	f7ff ff38 	bl	8003e1c <xTaskIncrementTick>
 8003fac:	b108      	cbz	r0, 8003fb2 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 8003fae:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fb2:	3d01      	subs	r5, #1
 8003fb4:	d1f8      	bne.n	8003fa8 <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 8003fb6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 8003fba:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0b9      	beq.n	8003f36 <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <xTaskResumeAll+0xd8>)
 8003fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003fd2:	2401      	movs	r4, #1
 8003fd4:	e7b0      	b.n	8003f38 <xTaskResumeAll+0x34>
 8003fd6:	bf00      	nop
 8003fd8:	2000037c 	.word	0x2000037c
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <vTaskDelay>:
	{
 8003fe0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fe2:	b940      	cbnz	r0, 8003ff6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <vTaskDelay+0x44>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
	}
 8003ff4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <vTaskDelay+0x48>)
 8003ff8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003ffc:	b143      	cbz	r3, 8004010 <vTaskDelay+0x30>
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	e7fe      	b.n	800400e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004010:	f7ff feec 	bl	8003dec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004014:	f7ff fd0a 	bl	8003a2c <prvAddCurrentTaskToDelayedList.isra.0>
			xAlreadyYielded = xTaskResumeAll();
 8004018:	f7ff ff74 	bl	8003f04 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800401c:	2800      	cmp	r0, #0
 800401e:	d0e1      	beq.n	8003fe4 <vTaskDelay+0x4>
 8004020:	e7e8      	b.n	8003ff4 <vTaskDelay+0x14>
 8004022:	bf00      	nop
 8004024:	e000ed04 	.word	0xe000ed04
 8004028:	2000037c 	.word	0x2000037c

0800402c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <vTaskSwitchContext+0x60>)
 800402e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 8004032:	b510      	push	{r4, lr}
 8004034:	4618      	mov	r0, r3
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004036:	b11a      	cbz	r2, 8004040 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8004038:	2201      	movs	r2, #1
 800403a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800403e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004040:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004044:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004046:	fab2 f282 	clz	r2, r2
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f1c2 021f 	rsb	r2, r2, #31
 8004050:	2114      	movs	r1, #20
 8004052:	4351      	muls	r1, r2
 8004054:	440b      	add	r3, r1
 8004056:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004058:	b944      	cbnz	r4, 800406c <vTaskSwitchContext+0x40>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	e7fe      	b.n	800406a <vTaskSwitchContext+0x3e>
 800406c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800406e:	4401      	add	r1, r0
 8004070:	6864      	ldr	r4, [r4, #4]
 8004072:	639c      	str	r4, [r3, #56]	; 0x38
 8004074:	313c      	adds	r1, #60	; 0x3c
 8004076:	428c      	cmp	r4, r1
 8004078:	bf04      	itt	eq
 800407a:	6861      	ldreq	r1, [r4, #4]
 800407c:	6399      	streq	r1, [r3, #56]	; 0x38
 800407e:	2314      	movs	r3, #20
 8004080:	fb03 0202 	mla	r2, r3, r2, r0
 8004084:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60c3      	str	r3, [r0, #12]
}
 800408a:	e7d8      	b.n	800403e <vTaskSwitchContext+0x12>
 800408c:	2000037c 	.word	0x2000037c

08004090 <vTaskPlaceOnEventList>:
{
 8004090:	b510      	push	{r4, lr}
 8004092:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004094:	b940      	cbnz	r0, 80040a8 <vTaskPlaceOnEventList+0x18>
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	e7fe      	b.n	80040a6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <vTaskPlaceOnEventList+0x2c>)
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	3118      	adds	r1, #24
 80040ae:	f7fe fff3 	bl	8003098 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040b2:	4620      	mov	r0, r4
}
 80040b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040b8:	f7ff bcb8 	b.w	8003a2c <prvAddCurrentTaskToDelayedList.isra.0>
 80040bc:	2000037c 	.word	0x2000037c

080040c0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c0:	68c3      	ldr	r3, [r0, #12]
{
 80040c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80040c6:	b945      	cbnz	r5, 80040da <xTaskRemoveFromEventList+0x1a>
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	e7fe      	b.n	80040d8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040da:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040de:	4c15      	ldr	r4, [pc, #84]	; (8004134 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040e0:	9101      	str	r1, [sp, #4]
 80040e2:	4608      	mov	r0, r1
 80040e4:	f7fe ffef 	bl	80030c6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80040ec:	9901      	ldr	r1, [sp, #4]
 80040ee:	b9eb      	cbnz	r3, 800412c <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040f0:	1d29      	adds	r1, r5, #4
 80040f2:	4608      	mov	r0, r1
 80040f4:	9101      	str	r1, [sp, #4]
 80040f6:	f7fe ffe6 	bl	80030c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040fa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80040fc:	6920      	ldr	r0, [r4, #16]
 80040fe:	9901      	ldr	r1, [sp, #4]
 8004100:	2301      	movs	r3, #1
 8004102:	4093      	lsls	r3, r2
 8004104:	4303      	orrs	r3, r0
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	2014      	movs	r0, #20
 800410a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800410e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004112:	f7fe ffb5 	bl	8003080 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800411e:	bf8a      	itet	hi
 8004120:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8004122:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004124:	f8c4 0110 	strhi.w	r0, [r4, #272]	; 0x110
}
 8004128:	b003      	add	sp, #12
 800412a:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800412c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8004130:	e7ef      	b.n	8004112 <xTaskRemoveFromEventList+0x52>
 8004132:	bf00      	nop
 8004134:	2000037c 	.word	0x2000037c

08004138 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <vTaskInternalSetTimeOutState+0x10>)
 800413a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 800413e:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004140:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004142:	6043      	str	r3, [r0, #4]
}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000037c 	.word	0x2000037c

0800414c <xTaskCheckForTimeOut>:
{
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004150:	4605      	mov	r5, r0
 8004152:	b940      	cbnz	r0, 8004166 <xTaskCheckForTimeOut+0x1a>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	e7fe      	b.n	8004164 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004166:	b941      	cbnz	r1, 800417a <xTaskCheckForTimeOut+0x2e>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	e7fe      	b.n	8004178 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800417a:	f000 fcc3 	bl	8004b04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004180:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004182:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004184:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004188:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800418a:	4298      	cmp	r0, r3
 800418c:	d001      	beq.n	8004192 <xTaskCheckForTimeOut+0x46>
 800418e:	428a      	cmp	r2, r1
 8004190:	d910      	bls.n	80041b4 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004192:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004194:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004196:	4283      	cmp	r3, r0
 8004198:	d90a      	bls.n	80041b0 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 800419a:	1a5b      	subs	r3, r3, r1
 800419c:	4413      	add	r3, r2
 800419e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7ff ffc9 	bl	8004138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80041a8:	f000 fcce 	bl	8004b48 <vPortExitCritical>
}
 80041ac:	4620      	mov	r0, r4
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80041b4:	2401      	movs	r4, #1
 80041b6:	e7f7      	b.n	80041a8 <xTaskCheckForTimeOut+0x5c>
 80041b8:	2000037c 	.word	0x2000037c

080041bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <vTaskMissedYield+0xc>)
 80041be:	2201      	movs	r2, #1
 80041c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000037c 	.word	0x2000037c

080041cc <vTaskGetInfo>:
	{
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	460c      	mov	r4, r1
 80041d0:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 80041d2:	4605      	mov	r5, r0
 80041d4:	b908      	cbnz	r0, 80041da <vTaskGetInfo+0xe>
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <vTaskGetInfo+0x60>)
 80041d8:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80041da:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80041dc:	f105 0234 	add.w	r2, r5, #52	; 0x34
 80041e0:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80041e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80041e4:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80041e6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80041e8:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80041ea:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80041ec:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80041ee:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80041f0:	6162      	str	r2, [r4, #20]
		if( eState != eInvalid )
 80041f2:	2b05      	cmp	r3, #5
			pxTaskStatus->ulRunTimeCounter = 0;
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 80041fa:	d00e      	beq.n	800421a <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 80041fc:	490b      	ldr	r1, [pc, #44]	; (800422c <vTaskGetInfo+0x60>)
 80041fe:	68c9      	ldr	r1, [r1, #12]
 8004200:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 8004202:	bf0c      	ite	eq
 8004204:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 8004206:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8004208:	b176      	cbz	r6, 8004228 <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800420a:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 800420c:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800420e:	5cca      	ldrb	r2, [r1, r3]
 8004210:	2aa5      	cmp	r2, #165	; 0xa5
 8004212:	d007      	beq.n	8004224 <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004214:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004216:	8423      	strh	r3, [r4, #32]
	}
 8004218:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800421a:	4628      	mov	r0, r5
 800421c:	f7ff fd84 	bl	8003d28 <eTaskGetState>
 8004220:	7320      	strb	r0, [r4, #12]
 8004222:	e7f1      	b.n	8004208 <vTaskGetInfo+0x3c>
			ulCount++;
 8004224:	3301      	adds	r3, #1
 8004226:	e7f2      	b.n	800420e <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004228:	8426      	strh	r6, [r4, #32]
	}
 800422a:	e7f5      	b.n	8004218 <vTaskGetInfo+0x4c>
 800422c:	2000037c 	.word	0x2000037c

08004230 <prvListTasksWithinSingleList>:
	{
 8004230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004234:	680d      	ldr	r5, [r1, #0]
	{
 8004236:	4606      	mov	r6, r0
 8004238:	460c      	mov	r4, r1
 800423a:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800423c:	b325      	cbz	r5, 8004288 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423e:	684b      	ldr	r3, [r1, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	604b      	str	r3, [r1, #4]
 8004244:	f101 0808 	add.w	r8, r1, #8
 8004248:	4543      	cmp	r3, r8
 800424a:	bf04      	itt	eq
 800424c:	68cb      	ldreq	r3, [r1, #12]
 800424e:	604b      	streq	r3, [r1, #4]
 8004250:	684b      	ldr	r3, [r1, #4]
 8004252:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 8004256:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004258:	f04f 0b24 	mov.w	fp, #36	; 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	4598      	cmp	r8, r3
 8004264:	bf04      	itt	eq
 8004266:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 800426a:	6063      	streq	r3, [r4, #4]
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004272:	fb0b 6105 	mla	r1, fp, r5, r6
 8004276:	463b      	mov	r3, r7
 8004278:	2201      	movs	r2, #1
 800427a:	4648      	mov	r0, r9
 800427c:	f7ff ffa6 	bl	80041cc <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8004280:	45ca      	cmp	sl, r9
				uxTask++;
 8004282:	f105 0501 	add.w	r5, r5, #1
			} while( pxNextTCB != pxFirstTCB );
 8004286:	d1e9      	bne.n	800425c <prvListTasksWithinSingleList+0x2c>
	}
 8004288:	4628      	mov	r0, r5
 800428a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004290 <uxTaskGetSystemState>:
	{
 8004290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004294:	4e1e      	ldr	r6, [pc, #120]	; (8004310 <uxTaskGetSystemState+0x80>)
	{
 8004296:	4605      	mov	r5, r0
 8004298:	4617      	mov	r7, r2
		vTaskSuspendAll();
 800429a:	f7ff fda7 	bl	8003dec <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800429e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d832      	bhi.n	800430a <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80042a4:	f04f 0807 	mov.w	r8, #7
 80042a8:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80042aa:	f04f 0b14 	mov.w	fp, #20
 80042ae:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 80042b2:	f04f 0924 	mov.w	r9, #36	; 0x24
					uxQueue--;
 80042b6:	f108 38ff 	add.w	r8, r8, #4294967295
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80042ba:	fb09 5004 	mla	r0, r9, r4, r5
 80042be:	2201      	movs	r2, #1
 80042c0:	fb0b a108 	mla	r1, fp, r8, sl
 80042c4:	f7ff ffb4 	bl	8004230 <prvListTasksWithinSingleList>
 80042c8:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ca:	f1b8 0f00 	cmp.w	r8, #0
 80042ce:	d1f2      	bne.n	80042b6 <uxTaskGetSystemState+0x26>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80042d0:	6831      	ldr	r1, [r6, #0]
 80042d2:	2202      	movs	r2, #2
 80042d4:	fb09 5004 	mla	r0, r9, r4, r5
 80042d8:	f7ff ffaa 	bl	8004230 <prvListTasksWithinSingleList>
 80042dc:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80042de:	6971      	ldr	r1, [r6, #20]
 80042e0:	2202      	movs	r2, #2
 80042e2:	fb09 5004 	mla	r0, r9, r4, r5
 80042e6:	f7ff ffa3 	bl	8004230 <prvListTasksWithinSingleList>
 80042ea:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80042ec:	fb09 5004 	mla	r0, r9, r4, r5
 80042f0:	4908      	ldr	r1, [pc, #32]	; (8004314 <uxTaskGetSystemState+0x84>)
 80042f2:	2204      	movs	r2, #4
 80042f4:	f7ff ff9c 	bl	8004230 <prvListTasksWithinSingleList>
 80042f8:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 80042fa:	b10f      	cbz	r7, 8004300 <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 80042fc:	f8c7 8000 	str.w	r8, [r7]
		( void ) xTaskResumeAll();
 8004300:	f7ff fe00 	bl	8003f04 <xTaskResumeAll>
	}
 8004304:	4620      	mov	r0, r4
 8004306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800430a:	2400      	movs	r4, #0
 800430c:	e7f8      	b.n	8004300 <uxTaskGetSystemState+0x70>
 800430e:	bf00      	nop
 8004310:	2000037c 	.word	0x2000037c
 8004314:	20000394 	.word	0x20000394

08004318 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <xTaskGetSchedulerState+0x1c>)
 800431a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800431e:	b132      	cbz	r2, 800432e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004320:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004324:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004326:	bf0c      	ite	eq
 8004328:	2002      	moveq	r0, #2
 800432a:	2000      	movne	r0, #0
 800432c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800432e:	2001      	movs	r0, #1
	}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000037c 	.word	0x2000037c

08004338 <xTaskPriorityInherit>:
	{
 8004338:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800433a:	4604      	mov	r4, r0
 800433c:	2800      	cmp	r0, #0
 800433e:	d031      	beq.n	80043a4 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <xTaskPriorityInherit+0x8c>)
 8004342:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004344:	68d1      	ldr	r1, [r2, #12]
 8004346:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004348:	428b      	cmp	r3, r1
 800434a:	4615      	mov	r5, r2
 800434c:	d232      	bcs.n	80043b4 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800434e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004350:	4e1d      	ldr	r6, [pc, #116]	; (80043c8 <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004352:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004354:	bfa1      	itttt	ge
 8004356:	68ea      	ldrge	r2, [r5, #12]
 8004358:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800435a:	f1c2 0207 	rsbge	r2, r2, #7
 800435e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004360:	2214      	movs	r2, #20
 8004362:	fb02 6303 	mla	r3, r2, r3, r6
 8004366:	6942      	ldr	r2, [r0, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	d11d      	bne.n	80043a8 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436c:	1d01      	adds	r1, r0, #4
 800436e:	4608      	mov	r0, r1
 8004370:	9101      	str	r1, [sp, #4]
 8004372:	f7fe fea8 	bl	80030c6 <uxListRemove>
 8004376:	9901      	ldr	r1, [sp, #4]
 8004378:	b930      	cbnz	r0, 8004388 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800437a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800437c:	692b      	ldr	r3, [r5, #16]
 800437e:	2201      	movs	r2, #1
 8004380:	4082      	lsls	r2, r0
 8004382:	ea23 0302 	bic.w	r3, r3, r2
 8004386:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004388:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800438a:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004390:	2401      	movs	r4, #1
 8004392:	fa04 f203 	lsl.w	r2, r4, r3
 8004396:	4302      	orrs	r2, r0
 8004398:	2014      	movs	r0, #20
 800439a:	fb00 6003 	mla	r0, r0, r3, r6
 800439e:	612a      	str	r2, [r5, #16]
 80043a0:	f7fe fe6e 	bl	8003080 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80043a4:	4620      	mov	r0, r4
		return xReturn;
 80043a6:	e003      	b.n	80043b0 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043a8:	68eb      	ldr	r3, [r5, #12]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 80043ae:	2001      	movs	r0, #1
	}
 80043b0:	b002      	add	sp, #8
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043b4:	68d3      	ldr	r3, [r2, #12]
 80043b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80043b8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	bf2c      	ite	cs
 80043be:	2000      	movcs	r0, #0
 80043c0:	2001      	movcc	r0, #1
 80043c2:	e7f5      	b.n	80043b0 <xTaskPriorityInherit+0x78>
 80043c4:	2000037c 	.word	0x2000037c
 80043c8:	200003b0 	.word	0x200003b0

080043cc <xTaskPriorityDisinherit>:
	{
 80043cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80043ce:	4604      	mov	r4, r0
 80043d0:	b910      	cbnz	r0, 80043d8 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 80043d2:	2000      	movs	r0, #0
	}
 80043d4:	b002      	add	sp, #8
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80043d8:	4d22      	ldr	r5, [pc, #136]	; (8004464 <xTaskPriorityDisinherit+0x98>)
 80043da:	68eb      	ldr	r3, [r5, #12]
 80043dc:	4283      	cmp	r3, r0
 80043de:	d008      	beq.n	80043f2 <xTaskPriorityDisinherit+0x26>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	e7fe      	b.n	80043f0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	b943      	cbnz	r3, 8004408 <xTaskPriorityDisinherit+0x3c>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	e7fe      	b.n	8004406 <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004408:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800440a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800440c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800440e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004410:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004412:	d0de      	beq.n	80043d2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1dc      	bne.n	80043d2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004418:	1d01      	adds	r1, r0, #4
 800441a:	4608      	mov	r0, r1
 800441c:	9101      	str	r1, [sp, #4]
 800441e:	f7fe fe52 	bl	80030c6 <uxListRemove>
 8004422:	9901      	ldr	r1, [sp, #4]
 8004424:	b958      	cbnz	r0, 800443e <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004428:	2014      	movs	r0, #20
 800442a:	fb00 5006 	mla	r0, r0, r6, r5
 800442e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004430:	b92b      	cbnz	r3, 800443e <xTaskPriorityDisinherit+0x72>
 8004432:	692b      	ldr	r3, [r5, #16]
 8004434:	2201      	movs	r2, #1
 8004436:	40b2      	lsls	r2, r6
 8004438:	ea23 0302 	bic.w	r3, r3, r2
 800443c:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800443e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004440:	6928      	ldr	r0, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004442:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	f1c3 0207 	rsb	r2, r3, #7
 8004448:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800444a:	2401      	movs	r4, #1
 800444c:	fa04 f203 	lsl.w	r2, r4, r3
 8004450:	4302      	orrs	r2, r0
 8004452:	612a      	str	r2, [r5, #16]
 8004454:	4a04      	ldr	r2, [pc, #16]	; (8004468 <xTaskPriorityDisinherit+0x9c>)
 8004456:	2014      	movs	r0, #20
 8004458:	fb00 2003 	mla	r0, r0, r3, r2
 800445c:	f7fe fe10 	bl	8003080 <vListInsertEnd>
					xReturn = pdTRUE;
 8004460:	4620      	mov	r0, r4
		return xReturn;
 8004462:	e7b7      	b.n	80043d4 <xTaskPriorityDisinherit+0x8>
 8004464:	2000037c 	.word	0x2000037c
 8004468:	200003b0 	.word	0x200003b0

0800446c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800446c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800446e:	4604      	mov	r4, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	d04a      	beq.n	800450a <vTaskPriorityDisinheritAfterTimeout+0x9e>
			configASSERT( pxTCB->uxMutexesHeld );
 8004474:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004476:	b942      	cbnz	r2, 800448a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	e7fe      	b.n	8004488 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800448a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800448c:	4299      	cmp	r1, r3
 800448e:	bf38      	it	cc
 8004490:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004492:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004494:	428b      	cmp	r3, r1
 8004496:	d038      	beq.n	800450a <vTaskPriorityDisinheritAfterTimeout+0x9e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004498:	2a01      	cmp	r2, #1
 800449a:	d136      	bne.n	800450a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					configASSERT( pxTCB != pxCurrentTCB );
 800449c:	4d1c      	ldr	r5, [pc, #112]	; (8004510 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 800449e:	68ea      	ldr	r2, [r5, #12]
 80044a0:	4282      	cmp	r2, r0
 80044a2:	d108      	bne.n	80044b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	e7fe      	b.n	80044b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044b6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044b8:	4e16      	ldr	r6, [pc, #88]	; (8004514 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 80044ba:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044bc:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044be:	f04f 0214 	mov.w	r2, #20
 80044c2:	fb02 6303 	mla	r3, r2, r3, r6
 80044c6:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c8:	bfa4      	itt	ge
 80044ca:	f1c1 0107 	rsbge	r1, r1, #7
 80044ce:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d11a      	bne.n	800450a <vTaskPriorityDisinheritAfterTimeout+0x9e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d4:	1d01      	adds	r1, r0, #4
 80044d6:	4608      	mov	r0, r1
 80044d8:	9101      	str	r1, [sp, #4]
 80044da:	f7fe fdf4 	bl	80030c6 <uxListRemove>
 80044de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044e0:	9901      	ldr	r1, [sp, #4]
 80044e2:	b928      	cbnz	r0, 80044f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044e4:	692b      	ldr	r3, [r5, #16]
 80044e6:	2001      	movs	r0, #1
 80044e8:	4090      	lsls	r0, r2
 80044ea:	ea23 0300 	bic.w	r3, r3, r0
 80044ee:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 80044f0:	6928      	ldr	r0, [r5, #16]
 80044f2:	2301      	movs	r3, #1
 80044f4:	4093      	lsls	r3, r2
 80044f6:	4303      	orrs	r3, r0
 80044f8:	2014      	movs	r0, #20
 80044fa:	fb00 6002 	mla	r0, r0, r2, r6
 80044fe:	612b      	str	r3, [r5, #16]
	}
 8004500:	b002      	add	sp, #8
 8004502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8004506:	f7fe bdbb 	b.w	8003080 <vListInsertEnd>
	}
 800450a:	b002      	add	sp, #8
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	bf00      	nop
 8004510:	2000037c 	.word	0x2000037c
 8004514:	200003b0 	.word	0x200003b0

08004518 <vTaskList>:
	{
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 800451c:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <vTaskList+0xb0>)
		*pcWriteBuffer = ( char ) 0x00;
 800451e:	2500      	movs	r5, #0
		uxArraySize = uxCurrentNumberOfTasks;
 8004520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		*pcWriteBuffer = ( char ) 0x00;
 8004522:	7005      	strb	r5, [r0, #0]
	{
 8004524:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004526:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	{
 8004528:	b085      	sub	sp, #20
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800452a:	2724      	movs	r7, #36	; 0x24
 800452c:	4378      	muls	r0, r7
		uxArraySize = uxCurrentNumberOfTasks;
 800452e:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004530:	f000 f9c4 	bl	80048bc <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8004534:	4606      	mov	r6, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d042      	beq.n	80045c0 <vTaskList+0xa8>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800453a:	462a      	mov	r2, r5
 800453c:	9903      	ldr	r1, [sp, #12]
 800453e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80045d0 <vTaskList+0xb8>
 8004542:	f7ff fea5 	bl	8004290 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 8004546:	4635      	mov	r5, r6
 8004548:	fb07 6700 	mla	r7, r7, r0, r6
			pcBuffer[ x ] = ' ';
 800454c:	f04f 0a20 	mov.w	sl, #32
			for( x = 0; x < uxArraySize; x++ )
 8004550:	42af      	cmp	r7, r5
 8004552:	d105      	bne.n	8004560 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 8004554:	4630      	mov	r0, r6
	}
 8004556:	b005      	add	sp, #20
 8004558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 800455c:	f000 ba2e 	b.w	80049bc <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8004560:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 8004562:	6869      	ldr	r1, [r5, #4]
 8004564:	2b04      	cmp	r3, #4
 8004566:	4620      	mov	r0, r4
 8004568:	bf94      	ite	ls
 800456a:	f819 b003 	ldrbls.w	fp, [r9, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800456e:	f04f 0b00 	movhi.w	fp, #0
		strcpy( pcBuffer, pcTaskName );
 8004572:	f018 fc1f 	bl	801cdb4 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004576:	4620      	mov	r0, r4
 8004578:	f7fb fe84 	bl	8000284 <strlen>
 800457c:	4603      	mov	r3, r0
 800457e:	2b0e      	cmp	r3, #14
 8004580:	d91a      	bls.n	80045b8 <vTaskList+0xa0>
 8004582:	280f      	cmp	r0, #15
 8004584:	f1c0 030f 	rsb	r3, r0, #15
 8004588:	bf88      	it	hi
 800458a:	2300      	movhi	r3, #0
 800458c:	4403      	add	r3, r0
		pcBuffer[ x ] = ( char ) 0x00;
 800458e:	2200      	movs	r2, #0
 8004590:	54e2      	strb	r2, [r4, r3]
 8004592:	eb04 0803 	add.w	r8, r4, r3
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004596:	68ab      	ldr	r3, [r5, #8]
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	8c2b      	ldrh	r3, [r5, #32]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	692b      	ldr	r3, [r5, #16]
 80045a0:	490a      	ldr	r1, [pc, #40]	; (80045cc <vTaskList+0xb4>)
 80045a2:	465a      	mov	r2, fp
 80045a4:	4640      	mov	r0, r8
 80045a6:	f018 fb91 	bl	801cccc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80045aa:	4640      	mov	r0, r8
 80045ac:	f7fb fe6a 	bl	8000284 <strlen>
 80045b0:	3524      	adds	r5, #36	; 0x24
 80045b2:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 80045b6:	e7cb      	b.n	8004550 <vTaskList+0x38>
			pcBuffer[ x ] = ' ';
 80045b8:	f804 a003 	strb.w	sl, [r4, r3]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80045bc:	3301      	adds	r3, #1
 80045be:	e7de      	b.n	800457e <vTaskList+0x66>
	}
 80045c0:	b005      	add	sp, #20
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	2000037c 	.word	0x2000037c
 80045cc:	0802b086 	.word	0x0802b086
 80045d0:	0801fbb0 	.word	0x0801fbb0

080045d4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <pvTaskIncrementMutexHeldCount+0x14>)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	b11a      	cbz	r2, 80045e2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80045da:	68d9      	ldr	r1, [r3, #12]
 80045dc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80045de:	3201      	adds	r2, #1
 80045e0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80045e2:	68d8      	ldr	r0, [r3, #12]
	}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	2000037c 	.word	0x2000037c

080045ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045ec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80045ee:	f7ff fbc7 	bl	8003d80 <vTaskStartScheduler>
  
  return osOK;
}
 80045f2:	2000      	movs	r0, #0
 80045f4:	bd08      	pop	{r3, pc}

080045f6 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f6:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80045fa:	b10b      	cbz	r3, 8004600 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80045fc:	f7ff bc06 	b.w	8003e0c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004600:	f7ff bbfe 	b.w	8003e00 <xTaskGetTickCount>

08004604 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004604:	b530      	push	{r4, r5, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800460a:	8a22      	ldrh	r2, [r4, #16]
 800460c:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8004610:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004612:	bf14      	ite	ne
 8004614:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004616:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004618:	ad03      	add	r5, sp, #12
{
 800461a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800461c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8004620:	e9cd 4500 	strd	r4, r5, [sp]
 8004624:	f7ff fa54 	bl	8003ad0 <xTaskCreate>
 8004628:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800462a:	bf0c      	ite	eq
 800462c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800462e:	2000      	movne	r0, #0
}
 8004630:	b005      	add	sp, #20
 8004632:	bd30      	pop	{r4, r5, pc}

08004634 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004634:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004636:	f7ff fb1b 	bl	8003c70 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800463a:	2000      	movs	r0, #0
 800463c:	bd08      	pop	{r3, pc}

0800463e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800463e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004640:	2801      	cmp	r0, #1
 8004642:	bf38      	it	cc
 8004644:	2001      	movcc	r0, #1
 8004646:	f7ff fccb 	bl	8003fe0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800464a:	2000      	movs	r0, #0
 800464c:	bd08      	pop	{r3, pc}

0800464e <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800464e:	2001      	movs	r0, #1
 8004650:	f7fe bf0c 	b.w	800346c <xQueueCreateMutex>

08004654 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004654:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004656:	2400      	movs	r4, #0
 8004658:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800465a:	b1e0      	cbz	r0, 8004696 <osMutexWait+0x42>
 800465c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004660:	b19b      	cbz	r3, 800468a <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004662:	aa01      	add	r2, sp, #4
 8004664:	4621      	mov	r1, r4
 8004666:	f7ff f937 	bl	80038d8 <xQueueReceiveFromISR>
 800466a:	2801      	cmp	r0, #1
 800466c:	d111      	bne.n	8004692 <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	b913      	cbnz	r3, 8004678 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004672:	2000      	movs	r0, #0
}
 8004674:	b002      	add	sp, #8
 8004676:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <osMutexWait+0x48>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	e7f3      	b.n	8004672 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800468a:	f7ff f861 	bl	8003750 <xQueueSemaphoreTake>
 800468e:	2801      	cmp	r0, #1
 8004690:	d0ef      	beq.n	8004672 <osMutexWait+0x1e>
    return osErrorOS;
 8004692:	20ff      	movs	r0, #255	; 0xff
 8004694:	e7ee      	b.n	8004674 <osMutexWait+0x20>
    return osErrorParameter;
 8004696:	2080      	movs	r0, #128	; 0x80
 8004698:	e7ec      	b.n	8004674 <osMutexWait+0x20>
 800469a:	bf00      	nop
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80046a0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80046a2:	2400      	movs	r4, #0
 80046a4:	9401      	str	r4, [sp, #4]
 80046a6:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80046aa:	b193      	cbz	r3, 80046d2 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046ac:	a901      	add	r1, sp, #4
 80046ae:	f7fe ff5a 	bl	8003566 <xQueueGiveFromISR>
 80046b2:	2801      	cmp	r0, #1
 80046b4:	d113      	bne.n	80046de <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046b6:	9b01      	ldr	r3, [sp, #4]
 80046b8:	b913      	cbnz	r3, 80046c0 <osMutexRelease+0x20>
  osStatus result = osOK;
 80046ba:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80046bc:	b002      	add	sp, #8
 80046be:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <osMutexRelease+0x44>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	e7f3      	b.n	80046ba <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80046d2:	461a      	mov	r2, r3
 80046d4:	4619      	mov	r1, r3
 80046d6:	f7fe fe17 	bl	8003308 <xQueueGenericSend>
 80046da:	2801      	cmp	r0, #1
 80046dc:	d0ed      	beq.n	80046ba <osMutexRelease+0x1a>
    result = osErrorOS;
 80046de:	20ff      	movs	r0, #255	; 0xff
 80046e0:	e7ec      	b.n	80046bc <osMutexRelease+0x1c>
 80046e2:	bf00      	nop
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80046e8:	b510      	push	{r4, lr}
 80046ea:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80046ee:	b91c      	cbnz	r4, 80046f8 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 80046f0:	f7ff f97a 	bl	80039e8 <vQueueDelete>

  return osOK;
}
 80046f4:	4620      	mov	r0, r4
 80046f6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80046f8:	2482      	movs	r4, #130	; 0x82
 80046fa:	e7fb      	b.n	80046f4 <osMutexDelete+0xc>

080046fc <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80046fc:	2901      	cmp	r1, #1
{ 
 80046fe:	b510      	push	{r4, lr}
 8004700:	4608      	mov	r0, r1
  if (count == 1) {
 8004702:	d10c      	bne.n	800471e <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8004704:	2203      	movs	r2, #3
 8004706:	2100      	movs	r1, #0
 8004708:	f7fe fdbc 	bl	8003284 <xQueueGenericCreate>
 800470c:	4604      	mov	r4, r0
 800470e:	b120      	cbz	r0, 800471a <osSemaphoreCreate+0x1e>
 8004710:	2300      	movs	r3, #0
 8004712:	461a      	mov	r2, r3
 8004714:	4619      	mov	r1, r3
 8004716:	f7fe fdf7 	bl	8003308 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800471a:	4620      	mov	r0, r4
 800471c:	bd10      	pop	{r4, pc}
 800471e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8004722:	f7fe bdd3 	b.w	80032cc <xQueueCreateCountingSemaphore>
	...

08004728 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004728:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800472a:	2400      	movs	r4, #0
 800472c:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800472e:	b1e0      	cbz	r0, 800476a <osSemaphoreWait+0x42>
 8004730:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004734:	b19b      	cbz	r3, 800475e <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004736:	aa01      	add	r2, sp, #4
 8004738:	4621      	mov	r1, r4
 800473a:	f7ff f8cd 	bl	80038d8 <xQueueReceiveFromISR>
 800473e:	2801      	cmp	r0, #1
 8004740:	d111      	bne.n	8004766 <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	b913      	cbnz	r3, 800474c <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004746:	2000      	movs	r0, #0
}
 8004748:	b002      	add	sp, #8
 800474a:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <osSemaphoreWait+0x48>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	e7f3      	b.n	8004746 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800475e:	f7fe fff7 	bl	8003750 <xQueueSemaphoreTake>
 8004762:	2801      	cmp	r0, #1
 8004764:	d0ef      	beq.n	8004746 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8004766:	20ff      	movs	r0, #255	; 0xff
 8004768:	e7ee      	b.n	8004748 <osSemaphoreWait+0x20>
    return osErrorParameter;
 800476a:	2080      	movs	r0, #128	; 0x80
 800476c:	e7ec      	b.n	8004748 <osSemaphoreWait+0x20>
 800476e:	bf00      	nop
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <osSemaphoreRelease>:
 8004774:	f7ff bf94 	b.w	80046a0 <osMutexRelease>

08004778 <osSemaphoreDelete>:
 8004778:	f7ff bfb6 	b.w	80046e8 <osMutexDelete>

0800477c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800477c:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004780:	2200      	movs	r2, #0
 8004782:	f7fe bd7f 	b.w	8003284 <xQueueGenericCreate>
	...

08004788 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800478a:	2400      	movs	r4, #0
{
 800478c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800478e:	9403      	str	r4, [sp, #12]
 8004790:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8004794:	b1a3      	cbz	r3, 80047c0 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004796:	4623      	mov	r3, r4
 8004798:	aa03      	add	r2, sp, #12
 800479a:	a901      	add	r1, sp, #4
 800479c:	f7fe fe81 	bl	80034a2 <xQueueGenericSendFromISR>
 80047a0:	2801      	cmp	r0, #1
 80047a2:	d115      	bne.n	80047d0 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	b913      	cbnz	r3, 80047ae <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80047a8:	2000      	movs	r0, #0
}
 80047aa:	b004      	add	sp, #16
 80047ac:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <osMessagePut+0x4c>)
 80047b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	e7f3      	b.n	80047a8 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80047c0:	2a01      	cmp	r2, #1
 80047c2:	bf38      	it	cc
 80047c4:	2201      	movcc	r2, #1
 80047c6:	a901      	add	r1, sp, #4
 80047c8:	f7fe fd9e 	bl	8003308 <xQueueGenericSend>
 80047cc:	2801      	cmp	r0, #1
 80047ce:	d0eb      	beq.n	80047a8 <osMessagePut+0x20>
      return osErrorOS;
 80047d0:	20ff      	movs	r0, #255	; 0xff
 80047d2:	e7ea      	b.n	80047aa <osMessagePut+0x22>
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80047d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80047da:	2300      	movs	r3, #0
{
 80047dc:	4604      	mov	r4, r0
 80047de:	4616      	mov	r6, r2
 80047e0:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80047e2:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80047e4:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80047e6:	ad01      	add	r5, sp, #4
 80047e8:	b911      	cbnz	r1, 80047f0 <osMessageGet+0x18>
    event.status = osErrorParameter;
 80047ea:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	e016      	b.n	800481e <osMessageGet+0x46>
  taskWoken = pdFALSE;
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80047f6:	b1cb      	cbz	r3, 800482c <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80047f8:	466a      	mov	r2, sp
 80047fa:	a902      	add	r1, sp, #8
 80047fc:	f7ff f86c 	bl	80038d8 <xQueueReceiveFromISR>
      event.status = osOK;
 8004800:	2801      	cmp	r0, #1
 8004802:	bf0c      	ite	eq
 8004804:	2310      	moveq	r3, #16
 8004806:	2300      	movne	r3, #0
 8004808:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800480a:	9b00      	ldr	r3, [sp, #0]
 800480c:	b13b      	cbz	r3, 800481e <osMessageGet+0x46>
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <osMessageGet+0x6c>)
 8004810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 800481e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004826:	4620      	mov	r0, r4
 8004828:	b004      	add	sp, #16
 800482a:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800482c:	a902      	add	r1, sp, #8
 800482e:	f7fe feef 	bl	8003610 <xQueueReceive>
 8004832:	2801      	cmp	r0, #1
 8004834:	d101      	bne.n	800483a <osMessageGet+0x62>
      event.status = osEventMessage;
 8004836:	2310      	movs	r3, #16
 8004838:	e7d8      	b.n	80047ec <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800483a:	2e00      	cmp	r6, #0
 800483c:	bf18      	it	ne
 800483e:	2640      	movne	r6, #64	; 0x40
 8004840:	9601      	str	r6, [sp, #4]
 8004842:	e7ec      	b.n	800481e <osMessageGet+0x46>
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004848:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800484a:	f7ff fd65 	bl	8004318 <xTaskGetSchedulerState>
 800484e:	2801      	cmp	r0, #1
 8004850:	d003      	beq.n	800485a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004856:	f000 b9bd 	b.w	8004bd4 <xPortSysTickHandler>
}
 800485a:	bd08      	pop	{r3, pc}

0800485c <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 800485c:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 800485e:	f7ff fe5b 	bl	8004518 <vTaskList>
#endif
  return osOK;
}
 8004862:	2000      	movs	r0, #0
 8004864:	bd08      	pop	{r3, pc}

08004866 <osMessageWaiting>:
 8004866:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 800486a:	b10b      	cbz	r3, 8004870 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800486c:	f7ff b898 	b.w	80039a0 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004870:	f7ff b881 	b.w	8003976 <uxQueueMessagesWaiting>

08004874 <osMessageDelete>:
 8004874:	f7ff bf38 	b.w	80046e8 <osMutexDelete>

08004878 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <prvInsertBlockIntoFreeList+0x40>)
{
 800487a:	b530      	push	{r4, r5, lr}
 800487c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800487e:	461a      	mov	r2, r3
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4283      	cmp	r3, r0
 8004884:	d3fb      	bcc.n	800487e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004886:	6854      	ldr	r4, [r2, #4]
 8004888:	1911      	adds	r1, r2, r4
 800488a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800488c:	bf01      	itttt	eq
 800488e:	6841      	ldreq	r1, [r0, #4]
 8004890:	4610      	moveq	r0, r2
 8004892:	1909      	addeq	r1, r1, r4
 8004894:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004896:	6844      	ldr	r4, [r0, #4]
 8004898:	1901      	adds	r1, r0, r4
 800489a:	428b      	cmp	r3, r1
 800489c:	d106      	bne.n	80048ac <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800489e:	68a9      	ldr	r1, [r5, #8]
 80048a0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048a2:	bf1f      	itttt	ne
 80048a4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048a6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048a8:	1909      	addne	r1, r1, r4
 80048aa:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048ac:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048ae:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b0:	bf18      	it	ne
 80048b2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b4:	bd30      	pop	{r4, r5, pc}
 80048b6:	bf00      	nop
 80048b8:	20000494 	.word	0x20000494

080048bc <pvPortMalloc>:
{
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80048c0:	4d3b      	ldr	r5, [pc, #236]	; (80049b0 <pvPortMalloc+0xf4>)
{
 80048c2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80048c4:	f7ff fa92 	bl	8003dec <vTaskSuspendAll>
		if( pxEnd == NULL )
 80048c8:	68ab      	ldr	r3, [r5, #8]
 80048ca:	b9bb      	cbnz	r3, 80048fc <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 80048cc:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <pvPortMalloc+0xf8>)
	uxAddress -= xHeapStructSize;
 80048ce:	4b3a      	ldr	r3, [pc, #232]	; (80049b8 <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048d0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048d2:	bf18      	it	ne
 80048d4:	3207      	addne	r2, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d6:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048da:	bf18      	it	ne
 80048dc:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80048e0:	2100      	movs	r1, #0
 80048e2:	6069      	str	r1, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e4:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80048e6:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ea:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048ec:	e9c5 1103 	strd	r1, r1, [r5, #12]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f0:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 80048f4:	60ab      	str	r3, [r5, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048fa:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048fc:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8004900:	ea18 0f04 	tst.w	r8, r4
 8004904:	d14e      	bne.n	80049a4 <pvPortMalloc+0xe8>
			if( xWantedSize > 0 )
 8004906:	2c00      	cmp	r4, #0
 8004908:	d03f      	beq.n	800498a <pvPortMalloc+0xce>
				xWantedSize += xHeapStructSize;
 800490a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800490e:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004910:	bf1c      	itt	ne
 8004912:	f023 0307 	bicne.w	r3, r3, #7
 8004916:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004918:	2b00      	cmp	r3, #0
 800491a:	d043      	beq.n	80049a4 <pvPortMalloc+0xe8>
 800491c:	692f      	ldr	r7, [r5, #16]
 800491e:	429f      	cmp	r7, r3
 8004920:	d340      	bcc.n	80049a4 <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
 8004922:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8004924:	4822      	ldr	r0, [pc, #136]	; (80049b0 <pvPortMalloc+0xf4>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004926:	6872      	ldr	r2, [r6, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d201      	bcs.n	8004930 <pvPortMalloc+0x74>
 800492c:	6831      	ldr	r1, [r6, #0]
 800492e:	b9a1      	cbnz	r1, 800495a <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8004930:	68a9      	ldr	r1, [r5, #8]
 8004932:	42b1      	cmp	r1, r6
 8004934:	d036      	beq.n	80049a4 <pvPortMalloc+0xe8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004936:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004938:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800493a:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800493c:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800493e:	2a10      	cmp	r2, #16
 8004940:	d912      	bls.n	8004968 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004942:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004944:	0741      	lsls	r1, r0, #29
 8004946:	d00b      	beq.n	8004960 <pvPortMalloc+0xa4>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	e7fe      	b.n	8004958 <pvPortMalloc+0x9c>
 800495a:	4630      	mov	r0, r6
 800495c:	460e      	mov	r6, r1
 800495e:	e7e2      	b.n	8004926 <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004960:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004962:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004964:	f7ff ff88 	bl	8004878 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004968:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800496a:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800496c:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800496e:	ea48 0303 	orr.w	r3, r8, r3
 8004972:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 8004978:	69ab      	ldr	r3, [r5, #24]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800497a:	612f      	str	r7, [r5, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800497c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800497e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004982:	bf38      	it	cc
 8004984:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004986:	3408      	adds	r4, #8
					xNumberOfSuccessfulAllocations++;
 8004988:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 800498a:	f7ff fabb 	bl	8003f04 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800498e:	0763      	lsls	r3, r4, #29
 8004990:	d00a      	beq.n	80049a8 <pvPortMalloc+0xec>
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	e7fe      	b.n	80049a2 <pvPortMalloc+0xe6>
void *pvReturn = NULL;
 80049a4:	2400      	movs	r4, #0
 80049a6:	e7f0      	b.n	800498a <pvPortMalloc+0xce>
}
 80049a8:	4620      	mov	r0, r4
 80049aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ae:	bf00      	nop
 80049b0:	20000494 	.word	0x20000494
 80049b4:	200004b4 	.word	0x200004b4
 80049b8:	200068ac 	.word	0x200068ac

080049bc <vPortFree>:
{
 80049bc:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80049be:	4604      	mov	r4, r0
 80049c0:	b380      	cbz	r0, 8004a24 <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c2:	4d19      	ldr	r5, [pc, #100]	; (8004a28 <vPortFree+0x6c>)
 80049c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80049c8:	696a      	ldr	r2, [r5, #20]
 80049ca:	4213      	tst	r3, r2
 80049cc:	d108      	bne.n	80049e0 <vPortFree+0x24>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	e7fe      	b.n	80049de <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80049e4:	b141      	cbz	r1, 80049f8 <vPortFree+0x3c>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	e7fe      	b.n	80049f6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049f8:	ea23 0302 	bic.w	r3, r3, r2
 80049fc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a00:	f7ff f9f4 	bl	8003dec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a04:	692a      	ldr	r2, [r5, #16]
 8004a06:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a0a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a0e:	4413      	add	r3, r2
 8004a10:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a12:	f7ff ff31 	bl	8004878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a16:	69eb      	ldr	r3, [r5, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61eb      	str	r3, [r5, #28]
}
 8004a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8004a20:	f7ff ba70 	b.w	8003f04 <xTaskResumeAll>
}
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	20000494 	.word	0x20000494

08004a2c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a2c:	4808      	ldr	r0, [pc, #32]	; (8004a50 <prvPortStartFirstTask+0x24>)
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	f380 8808 	msr	MSP, r0
 8004a36:	f04f 0000 	mov.w	r0, #0
 8004a3a:	f380 8814 	msr	CONTROL, r0
 8004a3e:	b662      	cpsie	i
 8004a40:	b661      	cpsie	f
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	df00      	svc	0
 8004a4c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4e:	0000      	.short	0x0000
 8004a50:	e000ed08 	.word	0xe000ed08

08004a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a64 <vPortEnableVFP+0x10>
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a5e:	6001      	str	r1, [r0, #0]
 8004a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a62:	0000      	.short	0x0000
 8004a64:	e000ed88 	.word	0xe000ed88

08004a68 <prvTaskExitError>:
{
 8004a68:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <prvTaskExitError+0x3c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	d008      	beq.n	8004a88 <prvTaskExitError+0x20>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	e7fe      	b.n	8004a86 <prvTaskExitError+0x1e>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0fc      	beq.n	8004a98 <prvTaskExitError+0x30>
}
 8004a9e:	b002      	add	sp, #8
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000034 	.word	0x20000034

08004aa8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxPortInitialiseStack+0x28>)
 8004ab2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ab6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004aba:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004abe:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ac2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ac6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004aca:	3844      	subs	r0, #68	; 0x44
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	08004a69 	.word	0x08004a69
	...

08004ae0 <SVC_Handler>:
	__asm volatile (
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <pxCurrentTCBConst2>)
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	6808      	ldr	r0, [r1, #0]
 8004ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	f380 8809 	msr	PSP, r0
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8811 	msr	BASEPRI, r0
 8004afa:	4770      	bx	lr
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst2>:
 8004b00:	20000388 	.word	0x20000388

08004b04 <vPortEnterCritical>:
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004b14:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <vPortEnterCritical+0x3c>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004b1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004b1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004b1e:	d10d      	bne.n	8004b3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <vPortEnterCritical+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004b28:	d008      	beq.n	8004b3c <vPortEnterCritical+0x38>
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	e7fe      	b.n	8004b3a <vPortEnterCritical+0x36>
}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000034 	.word	0x20000034
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004b48:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <vPortExitCritical+0x24>)
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	b943      	cbnz	r3, 8004b60 <vPortExitCritical+0x18>
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	e7fe      	b.n	8004b5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004b60:	3b01      	subs	r3, #1
 8004b62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b64:	b90b      	cbnz	r3, 8004b6a <vPortExitCritical+0x22>
	__asm volatile
 8004b66:	f383 8811 	msr	BASEPRI, r3
}
 8004b6a:	4770      	bx	lr
 8004b6c:	20000034 	.word	0x20000034

08004b70 <PendSV_Handler>:
	__asm volatile
 8004b70:	f3ef 8009 	mrs	r0, PSP
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <pxCurrentTCBConst>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f01e 0f10 	tst.w	lr, #16
 8004b80:	bf08      	it	eq
 8004b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	6010      	str	r0, [r2, #0]
 8004b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b94:	f380 8811 	msr	BASEPRI, r0
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f7ff fa44 	bl	800402c <vTaskSwitchContext>
 8004ba4:	f04f 0000 	mov.w	r0, #0
 8004ba8:	f380 8811 	msr	BASEPRI, r0
 8004bac:	bc09      	pop	{r0, r3}
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	6808      	ldr	r0, [r1, #0]
 8004bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb6:	f01e 0f10 	tst.w	lr, #16
 8004bba:	bf08      	it	eq
 8004bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bc0:	f380 8809 	msr	PSP, r0
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w

08004bd0 <pxCurrentTCBConst>:
 8004bd0:	20000388 	.word	0x20000388

08004bd4 <xPortSysTickHandler>:
{
 8004bd4:	b508      	push	{r3, lr}
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004be6:	f7ff f919 	bl	8003e1c <xTaskIncrementTick>
 8004bea:	b118      	cbz	r0, 8004bf4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <xPortSysTickHandler+0x28>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f383 8811 	msr	BASEPRI, r3
}
 8004bfa:	bd08      	pop	{r3, pc}
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c02:	4909      	ldr	r1, [pc, #36]	; (8004c28 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c08:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <vPortSetupTimerInterrupt+0x2c>)
 8004c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c16:	4906      	ldr	r1, [pc, #24]	; (8004c30 <vPortSetupTimerInterrupt+0x30>)
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	6013      	str	r3, [r2, #0]
}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e010 	.word	0xe000e010
 8004c28:	e000e018 	.word	0xe000e018
 8004c2c:	20000028 	.word	0x20000028
 8004c30:	e000e014 	.word	0xe000e014

08004c34 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <xPortStartScheduler+0xe0>)
 8004c36:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <xPortStartScheduler+0xe4>)
{
 8004c38:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	4291      	cmp	r1, r2
 8004c3e:	d108      	bne.n	8004c52 <xPortStartScheduler+0x1e>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	e7fe      	b.n	8004c50 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <xPortStartScheduler+0xe8>)
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d108      	bne.n	8004c6c <xPortStartScheduler+0x38>
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	e7fe      	b.n	8004c6a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <xPortStartScheduler+0xec>)
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c78:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004c86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c8a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c8c:	2307      	movs	r3, #7
 8004c8e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c90:	2100      	movs	r1, #0
 8004c92:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004c96:	0600      	lsls	r0, r0, #24
 8004c98:	f103 34ff 	add.w	r4, r3, #4294967295
 8004c9c:	d40c      	bmi.n	8004cb8 <xPortStartScheduler+0x84>
 8004c9e:	b111      	cbz	r1, 8004ca6 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	6053      	str	r3, [r2, #4]
 8004ca4:	d011      	beq.n	8004cca <xPortStartScheduler+0x96>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	e7fe      	b.n	8004cb6 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f88d 3003 	strb.w	r3, [sp, #3]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	e7e3      	b.n	8004c92 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cce:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cd0:	9b01      	ldr	r3, [sp, #4]
 8004cd2:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <xPortStartScheduler+0xec>)
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <xPortStartScheduler+0xf4>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004ce8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004cea:	f7ff ff89 	bl	8004c00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <xPortStartScheduler+0xf8>)
 8004cf0:	2400      	movs	r4, #0
 8004cf2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004cf4:	f7ff feae 	bl	8004a54 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cf8:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <xPortStartScheduler+0xfc>)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d00:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004d02:	f7ff fe93 	bl	8004a2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004d06:	f7ff f991 	bl	800402c <vTaskSwitchContext>
	prvTaskExitError();
 8004d0a:	f7ff fead 	bl	8004a68 <prvTaskExitError>
}
 8004d0e:	4620      	mov	r0, r4
 8004d10:	b002      	add	sp, #8
 8004d12:	bd10      	pop	{r4, pc}
 8004d14:	e000ed00 	.word	0xe000ed00
 8004d18:	410fc271 	.word	0x410fc271
 8004d1c:	410fc270 	.word	0x410fc270
 8004d20:	e000e400 	.word	0xe000e400
 8004d24:	200068b4 	.word	0x200068b4
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	20000034 	.word	0x20000034
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d34:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <vPortValidateInterruptPriority+0x48>)
 8004d3c:	d90d      	bls.n	8004d5a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d3e:	4910      	ldr	r1, [pc, #64]	; (8004d80 <vPortValidateInterruptPriority+0x4c>)
 8004d40:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d42:	7811      	ldrb	r1, [r2, #0]
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d908      	bls.n	8004d5a <vPortValidateInterruptPriority+0x26>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	e7fe      	b.n	8004d58 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <vPortValidateInterruptPriority+0x50>)
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d908      	bls.n	8004d7a <vPortValidateInterruptPriority+0x46>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	e7fe      	b.n	8004d78 <vPortValidateInterruptPriority+0x44>
	}
 8004d7a:	4770      	bx	lr
 8004d7c:	200068b4 	.word	0x200068b4
 8004d80:	e000e3f0 	.word	0xe000e3f0
 8004d84:	e000ed0c 	.word	0xe000ed0c

08004d88 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004d88:	680a      	ldr	r2, [r1, #0]
{
 8004d8a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004d8c:	320c      	adds	r2, #12
{
 8004d8e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004d90:	f003 fcc2 	bl	8008718 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004d94:	b908      	cbnz	r0, 8004d9a <netconn_apimsg+0x12>
    return apimsg->err;
 8004d96:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004d9c:	b500      	push	{lr}
 8004d9e:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004da0:	b958      	cbnz	r0, 8004dba <netconn_close_shutdown+0x1e>
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <netconn_close_shutdown+0x34>)
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <netconn_close_shutdown+0x38>)
 8004da6:	480c      	ldr	r0, [pc, #48]	; (8004dd8 <netconn_close_shutdown+0x3c>)
 8004da8:	f240 4247 	movw	r2, #1095	; 0x447
 8004dac:	f017 febc 	bl	801cb28 <iprintf>
 8004db0:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004db4:	b009      	add	sp, #36	; 0x24
 8004db6:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8004dba:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004dbc:	f88d 1008 	strb.w	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004dc0:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004dc2:	4669      	mov	r1, sp
 8004dc4:	4805      	ldr	r0, [pc, #20]	; (8004ddc <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004dc6:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004dca:	f7ff ffdd 	bl	8004d88 <netconn_apimsg>
  return err;
 8004dce:	e7f1      	b.n	8004db4 <netconn_close_shutdown+0x18>
 8004dd0:	0802b095 	.word	0x0802b095
 8004dd4:	0802b100 	.word	0x0802b100
 8004dd8:	0802aecf 	.word	0x0802aecf
 8004ddc:	0800668d 	.word	0x0800668d

08004de0 <netconn_new_with_proto_and_callback>:
{
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	460d      	mov	r5, r1
 8004de4:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8004de6:	4611      	mov	r1, r2
 8004de8:	f001 f88e 	bl	8005f08 <netconn_alloc>
  if (conn != NULL) {
 8004dec:	4604      	mov	r4, r0
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d03e      	beq.n	8004e70 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8004df2:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004df4:	4669      	mov	r1, sp
 8004df6:	4820      	ldr	r0, [pc, #128]	; (8004e78 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004df8:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004dfc:	f7ff ffc4 	bl	8004d88 <netconn_apimsg>
    if (err != ERR_OK) {
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d035      	beq.n	8004e70 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004e04:	6863      	ldr	r3, [r4, #4]
 8004e06:	b12b      	cbz	r3, 8004e14 <netconn_new_with_proto_and_callback+0x34>
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <netconn_new_with_proto_and_callback+0x9c>)
 8004e0a:	491d      	ldr	r1, [pc, #116]	; (8004e80 <netconn_new_with_proto_and_callback+0xa0>)
 8004e0c:	481d      	ldr	r0, [pc, #116]	; (8004e84 <netconn_new_with_proto_and_callback+0xa4>)
 8004e0e:	22a3      	movs	r2, #163	; 0xa3
 8004e10:	f017 fe8a 	bl	801cb28 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004e14:	f104 0510 	add.w	r5, r4, #16
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f00f fcc2 	bl	80147a2 <sys_mbox_valid>
 8004e1e:	b928      	cbnz	r0, 8004e2c <netconn_new_with_proto_and_callback+0x4c>
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <netconn_new_with_proto_and_callback+0x9c>)
 8004e22:	4919      	ldr	r1, [pc, #100]	; (8004e88 <netconn_new_with_proto_and_callback+0xa8>)
 8004e24:	4817      	ldr	r0, [pc, #92]	; (8004e84 <netconn_new_with_proto_and_callback+0xa4>)
 8004e26:	22a4      	movs	r2, #164	; 0xa4
 8004e28:	f017 fe7e 	bl	801cb28 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004e2c:	f104 0014 	add.w	r0, r4, #20
 8004e30:	f00f fcb7 	bl	80147a2 <sys_mbox_valid>
 8004e34:	b128      	cbz	r0, 8004e42 <netconn_new_with_proto_and_callback+0x62>
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <netconn_new_with_proto_and_callback+0x9c>)
 8004e38:	4914      	ldr	r1, [pc, #80]	; (8004e8c <netconn_new_with_proto_and_callback+0xac>)
 8004e3a:	4812      	ldr	r0, [pc, #72]	; (8004e84 <netconn_new_with_proto_and_callback+0xa4>)
 8004e3c:	22a6      	movs	r2, #166	; 0xa6
 8004e3e:	f017 fe73 	bl	801cb28 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004e42:	f104 060c 	add.w	r6, r4, #12
 8004e46:	4630      	mov	r0, r6
 8004e48:	f00f fceb 	bl	8014822 <sys_sem_valid>
 8004e4c:	b928      	cbnz	r0, 8004e5a <netconn_new_with_proto_and_callback+0x7a>
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <netconn_new_with_proto_and_callback+0x9c>)
 8004e50:	490f      	ldr	r1, [pc, #60]	; (8004e90 <netconn_new_with_proto_and_callback+0xb0>)
 8004e52:	480c      	ldr	r0, [pc, #48]	; (8004e84 <netconn_new_with_proto_and_callback+0xa4>)
 8004e54:	22a9      	movs	r2, #169	; 0xa9
 8004e56:	f017 fe67 	bl	801cb28 <iprintf>
      sys_sem_free(&conn->op_completed);
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f00f fcde 	bl	801481c <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004e60:	4628      	mov	r0, r5
 8004e62:	f00f fc4b 	bl	80146fc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004e66:	4621      	mov	r1, r4
 8004e68:	2007      	movs	r0, #7
 8004e6a:	f009 ff1b 	bl	800eca4 <memp_free>
      return NULL;
 8004e6e:	2400      	movs	r4, #0
}
 8004e70:	4620      	mov	r0, r4
 8004e72:	b008      	add	sp, #32
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	bf00      	nop
 8004e78:	08005e91 	.word	0x08005e91
 8004e7c:	0802b095 	.word	0x0802b095
 8004e80:	0802b11c 	.word	0x0802b11c
 8004e84:	0802aecf 	.word	0x0802aecf
 8004e88:	0802b13d 	.word	0x0802b13d
 8004e8c:	0802b152 	.word	0x0802b152
 8004e90:	0802b173 	.word	0x0802b173

08004e94 <netconn_prepare_delete>:
{
 8004e94:	b500      	push	{lr}
 8004e96:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004e98:	b138      	cbz	r0, 8004eaa <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8004e9a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004e9c:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004e9e:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004ea0:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004ea4:	4669      	mov	r1, sp
 8004ea6:	f7ff ff6f 	bl	8004d88 <netconn_apimsg>
}
 8004eaa:	b009      	add	sp, #36	; 0x24
 8004eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eb0:	080061a1 	.word	0x080061a1

08004eb4 <netconn_delete>:
{
 8004eb4:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	b140      	cbz	r0, 8004ecc <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8004eba:	f7ff ffeb 	bl	8004e94 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b910      	cbnz	r0, 8004ec8 <netconn_delete+0x14>
    netconn_free(conn);
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f001 f866 	bl	8005f94 <netconn_free>
}
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004ecc:	4604      	mov	r4, r0
 8004ece:	e7fb      	b.n	8004ec8 <netconn_delete+0x14>

08004ed0 <netconn_getaddr>:
{
 8004ed0:	b500      	push	{lr}
 8004ed2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8004ed4:	b958      	cbnz	r0, 8004eee <netconn_getaddr+0x1e>
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <netconn_getaddr+0x4c>)
 8004ed8:	4911      	ldr	r1, [pc, #68]	; (8004f20 <netconn_getaddr+0x50>)
 8004eda:	f44f 7289 	mov.w	r2, #274	; 0x112
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8004ede:	4811      	ldr	r0, [pc, #68]	; (8004f24 <netconn_getaddr+0x54>)
 8004ee0:	f017 fe22 	bl	801cb28 <iprintf>
 8004ee4:	f06f 000f 	mvn.w	r0, #15
}
 8004ee8:	b009      	add	sp, #36	; 0x24
 8004eea:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8004eee:	b921      	cbnz	r1, 8004efa <netconn_getaddr+0x2a>
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <netconn_getaddr+0x4c>)
 8004ef2:	490d      	ldr	r1, [pc, #52]	; (8004f28 <netconn_getaddr+0x58>)
 8004ef4:	f240 1213 	movw	r2, #275	; 0x113
 8004ef8:	e7f1      	b.n	8004ede <netconn_getaddr+0xe>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8004efa:	b922      	cbnz	r2, 8004f06 <netconn_getaddr+0x36>
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <netconn_getaddr+0x4c>)
 8004efe:	490b      	ldr	r1, [pc, #44]	; (8004f2c <netconn_getaddr+0x5c>)
 8004f00:	f44f 728a 	mov.w	r2, #276	; 0x114
 8004f04:	e7eb      	b.n	8004ede <netconn_getaddr+0xe>
  msg.msg.ad.port = port;
 8004f06:	e9cd 1202 	strd	r1, r2, [sp, #8]
  API_MSG_VAR_REF(msg).conn = conn;
 8004f0a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8004f0c:	4669      	mov	r1, sp
 8004f0e:	4808      	ldr	r0, [pc, #32]	; (8004f30 <netconn_getaddr+0x60>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8004f10:	f88d 3010 	strb.w	r3, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8004f14:	f7ff ff38 	bl	8004d88 <netconn_apimsg>
  return err;
 8004f18:	e7e6      	b.n	8004ee8 <netconn_getaddr+0x18>
 8004f1a:	bf00      	nop
 8004f1c:	0802b095 	.word	0x0802b095
 8004f20:	0802b18c 	.word	0x0802b18c
 8004f24:	0802aecf 	.word	0x0802aecf
 8004f28:	0802b1aa 	.word	0x0802b1aa
 8004f2c:	0802b1c8 	.word	0x0802b1c8
 8004f30:	080065bd 	.word	0x080065bd

08004f34 <netconn_bind>:
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004f38:	b950      	cbnz	r0, 8004f50 <netconn_bind+0x1c>
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <netconn_bind+0x84>)
 8004f3c:	491f      	ldr	r1, [pc, #124]	; (8004fbc <netconn_bind+0x88>)
 8004f3e:	4820      	ldr	r0, [pc, #128]	; (8004fc0 <netconn_bind+0x8c>)
 8004f40:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004f44:	f017 fdf0 	bl	801cb28 <iprintf>
 8004f48:	f06f 000f 	mvn.w	r0, #15
}
 8004f4c:	b009      	add	sp, #36	; 0x24
 8004f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    addr = IP4_ADDR_ANY;
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <netconn_bind+0x90>)
 8004f52:	2900      	cmp	r1, #0
 8004f54:	bf08      	it	eq
 8004f56:	4619      	moveq	r1, r3
  if ((netconn_get_ipv6only(conn) == 0) &&
 8004f58:	7f03      	ldrb	r3, [r0, #28]
 8004f5a:	f013 0320 	ands.w	r3, r3, #32
 8004f5e:	d120      	bne.n	8004fa2 <netconn_bind+0x6e>
      ip_addr_cmp(addr, IP6_ADDR_ANY)) {
 8004f60:	4f19      	ldr	r7, [pc, #100]	; (8004fc8 <netconn_bind+0x94>)
 8004f62:	7d0c      	ldrb	r4, [r1, #20]
  if ((netconn_get_ipv6only(conn) == 0) &&
 8004f64:	7d3e      	ldrb	r6, [r7, #20]
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d11b      	bne.n	8004fa2 <netconn_bind+0x6e>
 8004f6a:	2e06      	cmp	r6, #6
 8004f6c:	680c      	ldr	r4, [r1, #0]
 8004f6e:	683d      	ldr	r5, [r7, #0]
 8004f70:	d120      	bne.n	8004fb4 <netconn_bind+0x80>
      ip_addr_cmp(addr, IP6_ADDR_ANY)) {
 8004f72:	42a5      	cmp	r5, r4
 8004f74:	d111      	bne.n	8004f9a <netconn_bind+0x66>
 8004f76:	684d      	ldr	r5, [r1, #4]
 8004f78:	687c      	ldr	r4, [r7, #4]
 8004f7a:	42a5      	cmp	r5, r4
 8004f7c:	d10d      	bne.n	8004f9a <netconn_bind+0x66>
 8004f7e:	688d      	ldr	r5, [r1, #8]
 8004f80:	68bc      	ldr	r4, [r7, #8]
 8004f82:	42a5      	cmp	r5, r4
 8004f84:	d109      	bne.n	8004f9a <netconn_bind+0x66>
 8004f86:	68cd      	ldr	r5, [r1, #12]
 8004f88:	68fc      	ldr	r4, [r7, #12]
 8004f8a:	42a5      	cmp	r5, r4
 8004f8c:	d105      	bne.n	8004f9a <netconn_bind+0x66>
 8004f8e:	7c0b      	ldrb	r3, [r1, #16]
 8004f90:	7c3c      	ldrb	r4, [r7, #16]
 8004f92:	42a3      	cmp	r3, r4
  if ((netconn_get_ipv6only(conn) == 0) &&
 8004f94:	bf14      	ite	ne
 8004f96:	2300      	movne	r3, #0
 8004f98:	2301      	moveq	r3, #1
    addr = IP_ANY_TYPE;
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	; (8004fcc <netconn_bind+0x98>)
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf18      	it	ne
 8004fa0:	4621      	movne	r1, r4
  API_MSG_VAR_REF(msg).conn = conn;
 8004fa2:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004fa4:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004fa6:	480a      	ldr	r0, [pc, #40]	; (8004fd0 <netconn_bind+0x9c>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004fa8:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004fac:	4669      	mov	r1, sp
 8004fae:	f7ff feeb 	bl	8004d88 <netconn_apimsg>
  return err;
 8004fb2:	e7cb      	b.n	8004f4c <netconn_bind+0x18>
  if ((netconn_get_ipv6only(conn) == 0) &&
 8004fb4:	42a5      	cmp	r5, r4
 8004fb6:	e7ed      	b.n	8004f94 <netconn_bind+0x60>
 8004fb8:	0802b095 	.word	0x0802b095
 8004fbc:	0802b1e6 	.word	0x0802b1e6
 8004fc0:	0802aecf 	.word	0x0802aecf
 8004fc4:	0801fc2c 	.word	0x0801fc2c
 8004fc8:	0801fc54 	.word	0x0801fc54
 8004fcc:	0801fc9c 	.word	0x0801fc9c
 8004fd0:	08006269 	.word	0x08006269

08004fd4 <netconn_connect>:
{
 8004fd4:	b500      	push	{lr}
 8004fd6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8004fd8:	b958      	cbnz	r0, 8004ff2 <netconn_connect+0x1e>
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <netconn_connect+0x38>)
 8004fdc:	490c      	ldr	r1, [pc, #48]	; (8005010 <netconn_connect+0x3c>)
 8004fde:	480d      	ldr	r0, [pc, #52]	; (8005014 <netconn_connect+0x40>)
 8004fe0:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8004fe4:	f017 fda0 	bl	801cb28 <iprintf>
 8004fe8:	f06f 000f 	mvn.w	r0, #15
}
 8004fec:	b009      	add	sp, #36	; 0x24
 8004fee:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <netconn_connect+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8004ff4:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8004ff6:	2900      	cmp	r1, #0
 8004ff8:	bf08      	it	eq
 8004ffa:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004ffc:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8004ffe:	4807      	ldr	r0, [pc, #28]	; (800501c <netconn_connect+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005000:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8005004:	4669      	mov	r1, sp
 8005006:	f7ff febf 	bl	8004d88 <netconn_apimsg>
  return err;
 800500a:	e7ef      	b.n	8004fec <netconn_connect+0x18>
 800500c:	0802b095 	.word	0x0802b095
 8005010:	0802b21f 	.word	0x0802b21f
 8005014:	0802aecf 	.word	0x0802aecf
 8005018:	0801fc2c 	.word	0x0801fc2c
 800501c:	080062a9 	.word	0x080062a9

08005020 <netconn_disconnect>:
{
 8005020:	b500      	push	{lr}
 8005022:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8005024:	b958      	cbnz	r0, 800503e <netconn_disconnect+0x1e>
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <netconn_disconnect+0x2c>)
 8005028:	4909      	ldr	r1, [pc, #36]	; (8005050 <netconn_disconnect+0x30>)
 800502a:	480a      	ldr	r0, [pc, #40]	; (8005054 <netconn_disconnect+0x34>)
 800502c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8005030:	f017 fd7a 	bl	801cb28 <iprintf>
 8005034:	f06f 000f 	mvn.w	r0, #15
}
 8005038:	b009      	add	sp, #36	; 0x24
 800503a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800503e:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8005040:	4669      	mov	r1, sp
 8005042:	4805      	ldr	r0, [pc, #20]	; (8005058 <netconn_disconnect+0x38>)
 8005044:	f7ff fea0 	bl	8004d88 <netconn_apimsg>
  return err;
 8005048:	e7f6      	b.n	8005038 <netconn_disconnect+0x18>
 800504a:	bf00      	nop
 800504c:	0802b095 	.word	0x0802b095
 8005050:	0802b23d 	.word	0x0802b23d
 8005054:	0802aecf 	.word	0x0802aecf
 8005058:	08006351 	.word	0x08006351

0800505c <netconn_listen_with_backlog>:
{
 800505c:	b500      	push	{lr}
 800505e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005060:	b958      	cbnz	r0, 800507a <netconn_listen_with_backlog+0x1e>
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <netconn_listen_with_backlog+0x2c>)
 8005064:	4909      	ldr	r1, [pc, #36]	; (800508c <netconn_listen_with_backlog+0x30>)
 8005066:	480a      	ldr	r0, [pc, #40]	; (8005090 <netconn_listen_with_backlog+0x34>)
 8005068:	f240 12bb 	movw	r2, #443	; 0x1bb
 800506c:	f017 fd5c 	bl	801cb28 <iprintf>
 8005070:	f06f 000f 	mvn.w	r0, #15
}
 8005074:	b009      	add	sp, #36	; 0x24
 8005076:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800507a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800507c:	4669      	mov	r1, sp
 800507e:	4805      	ldr	r0, [pc, #20]	; (8005094 <netconn_listen_with_backlog+0x38>)
 8005080:	f7ff fe82 	bl	8004d88 <netconn_apimsg>
  return err;
 8005084:	e7f6      	b.n	8005074 <netconn_listen_with_backlog+0x18>
 8005086:	bf00      	nop
 8005088:	0802b095 	.word	0x0802b095
 800508c:	0802b25e 	.word	0x0802b25e
 8005090:	0802aecf 	.word	0x0802aecf
 8005094:	0800637d 	.word	0x0800637d

08005098 <netconn_tcp_recvd>:
{
 8005098:	b500      	push	{lr}
 800509a:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800509c:	b120      	cbz	r0, 80050a8 <netconn_tcp_recvd+0x10>
 800509e:	7803      	ldrb	r3, [r0, #0]
 80050a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d00b      	beq.n	80050c0 <netconn_tcp_recvd+0x28>
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <netconn_tcp_recvd+0x38>)
 80050aa:	490a      	ldr	r1, [pc, #40]	; (80050d4 <netconn_tcp_recvd+0x3c>)
 80050ac:	480a      	ldr	r0, [pc, #40]	; (80050d8 <netconn_tcp_recvd+0x40>)
 80050ae:	f240 22b5 	movw	r2, #693	; 0x2b5
 80050b2:	f017 fd39 	bl	801cb28 <iprintf>
 80050b6:	f06f 000f 	mvn.w	r0, #15
}
 80050ba:	b009      	add	sp, #36	; 0x24
 80050bc:	f85d fb04 	ldr.w	pc, [sp], #4
  msg->conn = conn;
 80050c0:	9000      	str	r0, [sp, #0]
  msg->msg.r.len = len;
 80050c2:	9102      	str	r1, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80050c4:	4805      	ldr	r0, [pc, #20]	; (80050dc <netconn_tcp_recvd+0x44>)
 80050c6:	4669      	mov	r1, sp
 80050c8:	f7ff fe5e 	bl	8004d88 <netconn_apimsg>
  return err;
 80050cc:	e7f5      	b.n	80050ba <netconn_tcp_recvd+0x22>
 80050ce:	bf00      	nop
 80050d0:	0802b095 	.word	0x0802b095
 80050d4:	0802b27b 	.word	0x0802b27b
 80050d8:	0802aecf 	.word	0x0802aecf
 80050dc:	080064f7 	.word	0x080064f7

080050e0 <netconn_send>:
{
 80050e0:	b500      	push	{lr}
 80050e2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80050e4:	b958      	cbnz	r0, 80050fe <netconn_send+0x1e>
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <netconn_send+0x2c>)
 80050e8:	4909      	ldr	r1, [pc, #36]	; (8005110 <netconn_send+0x30>)
 80050ea:	480a      	ldr	r0, [pc, #40]	; (8005114 <netconn_send+0x34>)
 80050ec:	f240 32b2 	movw	r2, #946	; 0x3b2
 80050f0:	f017 fd1a 	bl	801cb28 <iprintf>
 80050f4:	f06f 000f 	mvn.w	r0, #15
}
 80050f8:	b009      	add	sp, #36	; 0x24
 80050fa:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80050fe:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8005100:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <netconn_send+0x38>)
 8005104:	4669      	mov	r1, sp
 8005106:	f7ff fe3f 	bl	8004d88 <netconn_apimsg>
  return err;
 800510a:	e7f5      	b.n	80050f8 <netconn_send+0x18>
 800510c:	0802b095 	.word	0x0802b095
 8005110:	0802b29f 	.word	0x0802b29f
 8005114:	0802aecf 	.word	0x0802aecf
 8005118:	08006495 	.word	0x08006495

0800511c <netconn_write_vectors_partly>:
{
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	b089      	sub	sp, #36	; 0x24
 8005120:	469e      	mov	lr, r3
 8005122:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005124:	b958      	cbnz	r0, 800513e <netconn_write_vectors_partly+0x22>
 8005126:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <netconn_write_vectors_partly+0xc0>)
 8005128:	492d      	ldr	r1, [pc, #180]	; (80051e0 <netconn_write_vectors_partly+0xc4>)
 800512a:	482e      	ldr	r0, [pc, #184]	; (80051e4 <netconn_write_vectors_partly+0xc8>)
 800512c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005130:	f017 fcfa 	bl	801cb28 <iprintf>
 8005134:	f06f 040f 	mvn.w	r4, #15
}
 8005138:	4620      	mov	r0, r4
 800513a:	b009      	add	sp, #36	; 0x24
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800513e:	7804      	ldrb	r4, [r0, #0]
 8005140:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005144:	2c10      	cmp	r4, #16
 8005146:	d009      	beq.n	800515c <netconn_write_vectors_partly+0x40>
 8005148:	4b24      	ldr	r3, [pc, #144]	; (80051dc <netconn_write_vectors_partly+0xc0>)
 800514a:	4927      	ldr	r1, [pc, #156]	; (80051e8 <netconn_write_vectors_partly+0xcc>)
 800514c:	4825      	ldr	r0, [pc, #148]	; (80051e4 <netconn_write_vectors_partly+0xc8>)
 800514e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8005152:	f017 fce9 	bl	801cb28 <iprintf>
    return ERR_VAL;
 8005156:	f06f 0405 	mvn.w	r4, #5
 800515a:	e7ed      	b.n	8005138 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 800515c:	7f05      	ldrb	r5, [r0, #28]
 800515e:	f003 0404 	and.w	r4, r3, #4
 8005162:	f005 0502 	and.w	r5, r5, #2
 8005166:	4325      	orrs	r5, r4
 8005168:	d002      	beq.n	8005170 <netconn_write_vectors_partly+0x54>
 800516a:	2f00      	cmp	r7, #0
 800516c:	d0f3      	beq.n	8005156 <netconn_write_vectors_partly+0x3a>
 800516e:	2501      	movs	r5, #1
 8005170:	2400      	movs	r4, #0
 8005172:	4626      	mov	r6, r4
    size += vectors[i].len;
 8005174:	f101 0c04 	add.w	ip, r1, #4
 8005178:	e004      	b.n	8005184 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 800517a:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 800517e:	199e      	adds	r6, r3, r6
 8005180:	d2e9      	bcs.n	8005156 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8005182:	3401      	adds	r4, #1
 8005184:	42a2      	cmp	r2, r4
 8005186:	dcf8      	bgt.n	800517a <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8005188:	2e00      	cmp	r6, #0
 800518a:	d101      	bne.n	8005190 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 800518c:	2400      	movs	r4, #0
 800518e:	e7d3      	b.n	8005138 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8005190:	da03      	bge.n	800519a <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 8005192:	2f00      	cmp	r7, #0
 8005194:	d0df      	beq.n	8005156 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8005196:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).conn = conn;
 800519a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800519c:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800519e:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80051a2:	4812      	ldr	r0, [pc, #72]	; (80051ec <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80051a4:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80051a8:	2200      	movs	r2, #0
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80051aa:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80051ac:	e9cd 6205 	strd	r6, r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80051b0:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80051b2:	f7ff fde9 	bl	8004d88 <netconn_apimsg>
  if (err == ERR_OK) {
 80051b6:	4604      	mov	r4, r0
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1bd      	bne.n	8005138 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 80051bc:	b10f      	cbz	r7, 80051c2 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80051be:	9b06      	ldr	r3, [sp, #24]
 80051c0:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 80051c2:	2d00      	cmp	r5, #0
 80051c4:	d1e2      	bne.n	800518c <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80051c6:	9b06      	ldr	r3, [sp, #24]
 80051c8:	42b3      	cmp	r3, r6
 80051ca:	d0df      	beq.n	800518c <netconn_write_vectors_partly+0x70>
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <netconn_write_vectors_partly+0xc0>)
 80051ce:	4908      	ldr	r1, [pc, #32]	; (80051f0 <netconn_write_vectors_partly+0xd4>)
 80051d0:	4804      	ldr	r0, [pc, #16]	; (80051e4 <netconn_write_vectors_partly+0xc8>)
 80051d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80051d6:	f017 fca7 	bl	801cb28 <iprintf>
 80051da:	e7ad      	b.n	8005138 <netconn_write_vectors_partly+0x1c>
 80051dc:	0802b095 	.word	0x0802b095
 80051e0:	0802b2ba 	.word	0x0802b2ba
 80051e4:	0802aecf 	.word	0x0802aecf
 80051e8:	0802b2d6 	.word	0x0802b2d6
 80051ec:	08006539 	.word	0x08006539
 80051f0:	0802b2f8 	.word	0x0802b2f8

080051f4 <netconn_write_partly>:
{
 80051f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80051f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80051fa:	9a06      	ldr	r2, [sp, #24]
 80051fc:	9200      	str	r2, [sp, #0]
 80051fe:	a902      	add	r1, sp, #8
 8005200:	2201      	movs	r2, #1
 8005202:	f7ff ff8b 	bl	800511c <netconn_write_vectors_partly>
}
 8005206:	b005      	add	sp, #20
 8005208:	f85d fb04 	ldr.w	pc, [sp], #4

0800520c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800520c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800520e:	4604      	mov	r4, r0
 8005210:	b148      	cbz	r0, 8005226 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8005212:	f00f fb41 	bl	8014898 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8005216:	2300      	movs	r3, #0
  err = conn->pending_err;
 8005218:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800521c:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800521e:	f00f fb47 	bl	80148b0 <sys_arch_unprotect>
  return err;
}
 8005222:	4628      	mov	r0, r5
 8005224:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005226:	4605      	mov	r5, r0
 8005228:	e7fb      	b.n	8005222 <netconn_err+0x16>
	...

0800522c <netconn_accept>:
{
 800522c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800522e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005230:	460e      	mov	r6, r1
 8005232:	b959      	cbnz	r1, 800524c <netconn_accept+0x20>
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <netconn_accept+0xa0>)
 8005236:	4926      	ldr	r1, [pc, #152]	; (80052d0 <netconn_accept+0xa4>)
 8005238:	f240 12e1 	movw	r2, #481	; 0x1e1
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800523c:	4825      	ldr	r0, [pc, #148]	; (80052d4 <netconn_accept+0xa8>)
 800523e:	f017 fc73 	bl	801cb28 <iprintf>
 8005242:	f06f 040f 	mvn.w	r4, #15
}
 8005246:	4620      	mov	r0, r4
 8005248:	b003      	add	sp, #12
 800524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005250:	b920      	cbnz	r0, 800525c <netconn_accept+0x30>
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <netconn_accept+0xa0>)
 8005254:	4920      	ldr	r1, [pc, #128]	; (80052d8 <netconn_accept+0xac>)
 8005256:	f240 12e3 	movw	r2, #483	; 0x1e3
 800525a:	e7ef      	b.n	800523c <netconn_accept+0x10>
  err = netconn_err(conn);
 800525c:	f7ff ffd6 	bl	800520c <netconn_err>
 8005260:	4604      	mov	r4, r0
 8005262:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8005266:	2800      	cmp	r0, #0
 8005268:	d1ed      	bne.n	8005246 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800526a:	f105 0714 	add.w	r7, r5, #20
 800526e:	4638      	mov	r0, r7
 8005270:	f00f fa97 	bl	80147a2 <sys_mbox_valid>
 8005274:	b910      	cbnz	r0, 800527c <netconn_accept+0x50>
    return ERR_CLSD;
 8005276:	f06f 040e 	mvn.w	r4, #14
 800527a:	e7e4      	b.n	8005246 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800527c:	7f2b      	ldrb	r3, [r5, #28]
 800527e:	07da      	lsls	r2, r3, #31
 8005280:	d4f9      	bmi.n	8005276 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005282:	079b      	lsls	r3, r3, #30
 8005284:	d508      	bpl.n	8005298 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8005286:	a901      	add	r1, sp, #4
 8005288:	4638      	mov	r0, r7
 800528a:	f00f fa79 	bl	8014780 <sys_arch_mbox_tryfetch>
 800528e:	3001      	adds	r0, #1
 8005290:	d107      	bne.n	80052a2 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005292:	f06f 0406 	mvn.w	r4, #6
 8005296:	e7d6      	b.n	8005246 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005298:	4622      	mov	r2, r4
 800529a:	a901      	add	r1, sp, #4
 800529c:	4638      	mov	r0, r7
 800529e:	f00f fa4d 	bl	801473c <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80052a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052a4:	b11b      	cbz	r3, 80052ae <netconn_accept+0x82>
 80052a6:	2200      	movs	r2, #0
 80052a8:	2101      	movs	r1, #1
 80052aa:	4628      	mov	r0, r5
 80052ac:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80052ae:	9801      	ldr	r0, [sp, #4]
 80052b0:	f10d 0103 	add.w	r1, sp, #3
 80052b4:	f000 fdc4 	bl	8005e40 <lwip_netconn_is_err_msg>
 80052b8:	b110      	cbz	r0, 80052c0 <netconn_accept+0x94>
    return err;
 80052ba:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 80052be:	e7c2      	b.n	8005246 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0d7      	beq.n	8005276 <netconn_accept+0x4a>
  *new_conn = newconn;
 80052c6:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80052c8:	e7bd      	b.n	8005246 <netconn_accept+0x1a>
 80052ca:	bf00      	nop
 80052cc:	0802b095 	.word	0x0802b095
 80052d0:	0802b31b 	.word	0x0802b31b
 80052d4:	0802aecf 	.word	0x0802aecf
 80052d8:	0802b33b 	.word	0x0802b33b

080052dc <netconn_recv_data>:
{
 80052dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  void *buf = NULL;
 80052de:	2300      	movs	r3, #0
{
 80052e0:	4604      	mov	r4, r0
 80052e2:	4616      	mov	r6, r2
  void *buf = NULL;
 80052e4:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80052e6:	460d      	mov	r5, r1
 80052e8:	b951      	cbnz	r1, 8005300 <netconn_recv_data+0x24>
 80052ea:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <netconn_recv_data+0xd8>)
 80052ec:	4932      	ldr	r1, [pc, #200]	; (80053b8 <netconn_recv_data+0xdc>)
 80052ee:	f44f 7212 	mov.w	r2, #584	; 0x248
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80052f2:	4832      	ldr	r0, [pc, #200]	; (80053bc <netconn_recv_data+0xe0>)
 80052f4:	f017 fc18 	bl	801cb28 <iprintf>
 80052f8:	f06f 000f 	mvn.w	r0, #15
}
 80052fc:	b003      	add	sp, #12
 80052fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005300:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005302:	b920      	cbnz	r0, 800530e <netconn_recv_data+0x32>
 8005304:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <netconn_recv_data+0xd8>)
 8005306:	492e      	ldr	r1, [pc, #184]	; (80053c0 <netconn_recv_data+0xe4>)
 8005308:	f240 224a 	movw	r2, #586	; 0x24a
 800530c:	e7f1      	b.n	80052f2 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800530e:	f100 0710 	add.w	r7, r0, #16
 8005312:	4638      	mov	r0, r7
 8005314:	f00f fa45 	bl	80147a2 <sys_mbox_valid>
 8005318:	b938      	cbnz	r0, 800532a <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 800531a:	4620      	mov	r0, r4
 800531c:	f7ff ff76 	bl	800520c <netconn_err>
    if (err != ERR_OK) {
 8005320:	2800      	cmp	r0, #0
 8005322:	d1eb      	bne.n	80052fc <netconn_recv_data+0x20>
    return ERR_CONN;
 8005324:	f06f 000a 	mvn.w	r0, #10
 8005328:	e7e8      	b.n	80052fc <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800532a:	7f23      	ldrb	r3, [r4, #28]
 800532c:	f006 0604 	and.w	r6, r6, #4
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	4333      	orrs	r3, r6
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005336:	a901      	add	r1, sp, #4
 8005338:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800533a:	d102      	bne.n	8005342 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800533c:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005340:	b172      	cbz	r2, 8005360 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005342:	f00f fa1d 	bl	8014780 <sys_arch_mbox_tryfetch>
 8005346:	3001      	adds	r0, #1
 8005348:	d10c      	bne.n	8005364 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff ff5e 	bl	800520c <netconn_err>
      if (err != ERR_OK) {
 8005350:	2800      	cmp	r0, #0
 8005352:	d1d3      	bne.n	80052fc <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005354:	7f23      	ldrb	r3, [r4, #28]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d4e4      	bmi.n	8005324 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 800535a:	f06f 0006 	mvn.w	r0, #6
 800535e:	e7cd      	b.n	80052fc <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005360:	f00f f9ec 	bl	801473c <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005364:	7823      	ldrb	r3, [r4, #0]
 8005366:	9801      	ldr	r0, [sp, #4]
 8005368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536c:	2b10      	cmp	r3, #16
 800536e:	d116      	bne.n	800539e <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005370:	f10d 0103 	add.w	r1, sp, #3
 8005374:	f000 fd64 	bl	8005e40 <lwip_netconn_is_err_msg>
 8005378:	b130      	cbz	r0, 8005388 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 800537a:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800537e:	f110 0f0f 	cmn.w	r0, #15
 8005382:	bf08      	it	eq
 8005384:	2000      	moveq	r0, #0
 8005386:	e7b9      	b.n	80052fc <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005388:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 800538a:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800538c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800538e:	b113      	cbz	r3, 8005396 <netconn_recv_data+0xba>
 8005390:	2101      	movs	r1, #1
 8005392:	4620      	mov	r0, r4
 8005394:	4798      	blx	r3
  *new_buf = buf;
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800539a:	2000      	movs	r0, #0
 800539c:	e7ae      	b.n	80052fc <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800539e:	b930      	cbnz	r0, 80053ae <netconn_recv_data+0xd2>
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <netconn_recv_data+0xd8>)
 80053a2:	4908      	ldr	r1, [pc, #32]	; (80053c4 <netconn_recv_data+0xe8>)
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <netconn_recv_data+0xe0>)
 80053a6:	f240 2291 	movw	r2, #657	; 0x291
 80053aa:	f017 fbbd 	bl	801cb28 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	e7ea      	b.n	800538a <netconn_recv_data+0xae>
 80053b4:	0802b095 	.word	0x0802b095
 80053b8:	0802b358 	.word	0x0802b358
 80053bc:	0802aecf 	.word	0x0802aecf
 80053c0:	0802b376 	.word	0x0802b376
 80053c4:	0802b391 	.word	0x0802b391

080053c8 <netconn_recv_udp_raw_netbuf_flags>:
{
 80053c8:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80053ca:	b140      	cbz	r0, 80053de <netconn_recv_udp_raw_netbuf_flags+0x16>
 80053cc:	7803      	ldrb	r3, [r0, #0]
 80053ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d003      	beq.n	80053de <netconn_recv_udp_raw_netbuf_flags+0x16>
}
 80053d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80053da:	f7ff bf7f 	b.w	80052dc <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 80053e0:	4905      	ldr	r1, [pc, #20]	; (80053f8 <netconn_recv_udp_raw_netbuf_flags+0x30>)
 80053e2:	4806      	ldr	r0, [pc, #24]	; (80053fc <netconn_recv_udp_raw_netbuf_flags+0x34>)
 80053e4:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80053e8:	f017 fb9e 	bl	801cb28 <iprintf>
}
 80053ec:	f06f 000f 	mvn.w	r0, #15
 80053f0:	bd08      	pop	{r3, pc}
 80053f2:	bf00      	nop
 80053f4:	0802b095 	.word	0x0802b095
 80053f8:	0802b39d 	.word	0x0802b39d
 80053fc:	0802aecf 	.word	0x0802aecf

08005400 <netconn_recv_data_tcp>:
{
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005406:	3010      	adds	r0, #16
{
 8005408:	460f      	mov	r7, r1
 800540a:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800540c:	f00f f9c9 	bl	80147a2 <sys_mbox_valid>
 8005410:	2800      	cmp	r0, #0
 8005412:	d04c      	beq.n	80054ae <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8005414:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8005418:	7f23      	ldrb	r3, [r4, #28]
 800541a:	2a00      	cmp	r2, #0
 800541c:	da13      	bge.n	8005446 <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005422:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005426:	b11b      	cbz	r3, 8005430 <netconn_recv_data_tcp+0x30>
 8005428:	2200      	movs	r2, #0
 800542a:	2101      	movs	r1, #1
 800542c:	4620      	mov	r0, r4
 800542e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d134      	bne.n	80054a0 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fee8 	bl	800520c <netconn_err>
        return ERR_RST;
 800543c:	1e05      	subs	r5, r0, #0
 800543e:	bf08      	it	eq
 8005440:	f06f 050d 	mvneq.w	r5, #13
 8005444:	e020      	b.n	8005488 <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8005446:	4632      	mov	r2, r6
 8005448:	4639      	mov	r1, r7
 800544a:	4620      	mov	r0, r4
 800544c:	f7ff ff46 	bl	80052dc <netconn_recv_data>
  if (err != ERR_OK) {
 8005450:	4605      	mov	r5, r0
 8005452:	b9c8      	cbnz	r0, 8005488 <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005454:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8005456:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005458:	d40d      	bmi.n	8005476 <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
 800545a:	b1c7      	cbz	r7, 800548e <netconn_recv_data_tcp+0x8e>
 800545c:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800545e:	7823      	ldrb	r3, [r4, #0]
 8005460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005464:	2b10      	cmp	r3, #16
 8005466:	d014      	beq.n	8005492 <netconn_recv_data_tcp+0x92>
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <netconn_recv_data_tcp+0xb4>)
 800546a:	4913      	ldr	r1, [pc, #76]	; (80054b8 <netconn_recv_data_tcp+0xb8>)
 800546c:	4813      	ldr	r0, [pc, #76]	; (80054bc <netconn_recv_data_tcp+0xbc>)
 800546e:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005472:	f017 fb59 	bl	801cb28 <iprintf>
  if (buf == NULL) {
 8005476:	b93f      	cbnz	r7, 8005488 <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
 8005478:	06f3      	lsls	r3, r6, #27
 800547a:	d5d3      	bpl.n	8005424 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800547c:	7f23      	ldrb	r3, [r4, #28]
 800547e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005482:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8005484:	f06f 0506 	mvn.w	r5, #6
}
 8005488:	4628      	mov	r0, r5
 800548a:	b009      	add	sp, #36	; 0x24
 800548c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 800548e:	2201      	movs	r2, #1
 8005490:	e7e5      	b.n	800545e <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005492:	4669      	mov	r1, sp
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
 8005496:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 8005498:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800549a:	f7ff fc75 	bl	8004d88 <netconn_apimsg>
 800549e:	e7ea      	b.n	8005476 <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80054a0:	2101      	movs	r1, #1
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff fc7a 	bl	8004d9c <netconn_close_shutdown>
      return ERR_CLSD;
 80054a8:	f06f 050e 	mvn.w	r5, #14
 80054ac:	e7ec      	b.n	8005488 <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
 80054ae:	f06f 050a 	mvn.w	r5, #10
 80054b2:	e7e9      	b.n	8005488 <netconn_recv_data_tcp+0x88>
 80054b4:	0802b095 	.word	0x0802b095
 80054b8:	0802b27b 	.word	0x0802b27b
 80054bc:	0802aecf 	.word	0x0802aecf
 80054c0:	080064f7 	.word	0x080064f7

080054c4 <netconn_recv_tcp_pbuf_flags>:
{
 80054c4:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80054c6:	b140      	cbz	r0, 80054da <netconn_recv_tcp_pbuf_flags+0x16>
 80054c8:	7803      	ldrb	r3, [r0, #0]
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d103      	bne.n	80054da <netconn_recv_tcp_pbuf_flags+0x16>
}
 80054d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80054d6:	f7ff bf93 	b.w	8005400 <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <netconn_recv_tcp_pbuf_flags+0x2c>)
 80054dc:	4905      	ldr	r1, [pc, #20]	; (80054f4 <netconn_recv_tcp_pbuf_flags+0x30>)
 80054de:	4806      	ldr	r0, [pc, #24]	; (80054f8 <netconn_recv_tcp_pbuf_flags+0x34>)
 80054e0:	f240 3225 	movw	r2, #805	; 0x325
 80054e4:	f017 fb20 	bl	801cb28 <iprintf>
}
 80054e8:	f06f 000f 	mvn.w	r0, #15
 80054ec:	bd08      	pop	{r3, pc}
 80054ee:	bf00      	nop
 80054f0:	0802b095 	.word	0x0802b095
 80054f4:	0802b27b 	.word	0x0802b27b
 80054f8:	0802aecf 	.word	0x0802aecf

080054fc <netconn_join_leave_group_netif>:
err_t
netconn_join_leave_group_netif(struct netconn *conn,
                               const ip_addr_t *multiaddr,
                               u8_t if_idx,
                               enum netconn_igmp join_or_leave)
{
 80054fc:	b510      	push	{r4, lr}
 80054fe:	b088      	sub	sp, #32
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005500:	b950      	cbnz	r0, 8005518 <netconn_join_leave_group_netif+0x1c>
 8005502:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <netconn_join_leave_group_netif+0x44>)
 8005504:	490f      	ldr	r1, [pc, #60]	; (8005544 <netconn_join_leave_group_netif+0x48>)
 8005506:	4810      	ldr	r0, [pc, #64]	; (8005548 <netconn_join_leave_group_netif+0x4c>)
 8005508:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800550c:	f017 fb0c 	bl	801cb28 <iprintf>
 8005510:	f06f 000f 	mvn.w	r0, #15
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  err = netconn_apimsg(lwip_netconn_do_join_leave_group_netif, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005514:	b008      	add	sp, #32
 8005516:	bd10      	pop	{r4, pc}
    multiaddr = IP4_ADDR_ANY;
 8005518:	4c0c      	ldr	r4, [pc, #48]	; (800554c <netconn_join_leave_group_netif+0x50>)
 800551a:	2900      	cmp	r1, #0
 800551c:	bf08      	it	eq
 800551e:	4621      	moveq	r1, r4
  if (if_idx == NETIF_NO_INDEX) {
 8005520:	b152      	cbz	r2, 8005538 <netconn_join_leave_group_netif+0x3c>
  API_MSG_VAR_REF(msg).conn = conn;
 8005522:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 8005524:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group_netif, &API_MSG_VAR_REF(msg));
 8005526:	480a      	ldr	r0, [pc, #40]	; (8005550 <netconn_join_leave_group_netif+0x54>)
  API_MSG_VAR_REF(msg).msg.jl.if_idx = if_idx;
 8005528:	f88d 2010 	strb.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group_netif, &API_MSG_VAR_REF(msg));
 800552c:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800552e:	f88d 3011 	strb.w	r3, [sp, #17]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group_netif, &API_MSG_VAR_REF(msg));
 8005532:	f7ff fc29 	bl	8004d88 <netconn_apimsg>
  return err;
 8005536:	e7ed      	b.n	8005514 <netconn_join_leave_group_netif+0x18>
    return ERR_IF;
 8005538:	f06f 000b 	mvn.w	r0, #11
 800553c:	e7ea      	b.n	8005514 <netconn_join_leave_group_netif+0x18>
 800553e:	bf00      	nop
 8005540:	0802b095 	.word	0x0802b095
 8005544:	0802b3c7 	.word	0x0802b3c7
 8005548:	0802aecf 	.word	0x0802aecf
 800554c:	0801fc2c 	.word	0x0801fc2c
 8005550:	08006701 	.word	0x08006701

08005554 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8005554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005558:	4606      	mov	r6, r0
 800555a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 800555e:	4617      	mov	r7, r2
 8005560:	461d      	mov	r5, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005562:	460c      	mov	r4, r1
 8005564:	b929      	cbnz	r1, 8005572 <recv_udp+0x1e>
 8005566:	4b2d      	ldr	r3, [pc, #180]	; (800561c <recv_udp+0xc8>)
 8005568:	492d      	ldr	r1, [pc, #180]	; (8005620 <recv_udp+0xcc>)
 800556a:	482e      	ldr	r0, [pc, #184]	; (8005624 <recv_udp+0xd0>)
 800556c:	22e5      	movs	r2, #229	; 0xe5
 800556e:	f017 fadb 	bl	801cb28 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005572:	b9c6      	cbnz	r6, 80055a6 <recv_udp+0x52>
 8005574:	4b29      	ldr	r3, [pc, #164]	; (800561c <recv_udp+0xc8>)
 8005576:	492c      	ldr	r1, [pc, #176]	; (8005628 <recv_udp+0xd4>)
 8005578:	482a      	ldr	r0, [pc, #168]	; (8005624 <recv_udp+0xd0>)
 800557a:	22e6      	movs	r2, #230	; 0xe6
 800557c:	f017 fad4 	bl	801cb28 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8005580:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8005588:	f009 befa 	b.w	800f380 <pbuf_free>
    ip_addr_set(&buf->addr, addr);
 800558c:	2300      	movs	r3, #0
 800558e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005592:	60c3      	str	r3, [r0, #12]
 8005594:	e02c      	b.n	80055f0 <recv_udp+0x9c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005596:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d03c      	beq.n	8005616 <recv_udp+0xc2>
 800559c:	4630      	mov	r0, r6
}
 800559e:	b003      	add	sp, #12
 80055a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80055a4:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80055a6:	6873      	ldr	r3, [r6, #4]
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	d005      	beq.n	80055b8 <recv_udp+0x64>
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <recv_udp+0xc8>)
 80055ae:	491f      	ldr	r1, [pc, #124]	; (800562c <recv_udp+0xd8>)
 80055b0:	481c      	ldr	r0, [pc, #112]	; (8005624 <recv_udp+0xd0>)
 80055b2:	22ee      	movs	r2, #238	; 0xee
 80055b4:	f017 fab8 	bl	801cb28 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80055b8:	f106 0910 	add.w	r9, r6, #16
 80055bc:	4648      	mov	r0, r9
 80055be:	f00f f8f0 	bl	80147a2 <sys_mbox_valid>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0dc      	beq.n	8005580 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80055c6:	2006      	movs	r0, #6
 80055c8:	f009 fb50 	bl	800ec6c <memp_malloc>
  if (buf == NULL) {
 80055cc:	4604      	mov	r4, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0d6      	beq.n	8005580 <recv_udp+0x2c>
    buf->ptr = p;
 80055d2:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80055d6:	7d2b      	ldrb	r3, [r5, #20]
 80055d8:	7703      	strb	r3, [r0, #28]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6083      	str	r3, [r0, #8]
 80055e0:	d1d4      	bne.n	800558c <recv_udp+0x38>
 80055e2:	686b      	ldr	r3, [r5, #4]
 80055e4:	60c3      	str	r3, [r0, #12]
 80055e6:	68ab      	ldr	r3, [r5, #8]
 80055e8:	6103      	str	r3, [r0, #16]
 80055ea:	68eb      	ldr	r3, [r5, #12]
 80055ec:	6143      	str	r3, [r0, #20]
 80055ee:	7c2b      	ldrb	r3, [r5, #16]
  len = p->tot_len;
 80055f0:	893a      	ldrh	r2, [r7, #8]
    ip_addr_set(&buf->addr, addr);
 80055f2:	7623      	strb	r3, [r4, #24]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80055f4:	4621      	mov	r1, r4
    buf->port = port;
 80055f6:	f8a4 8020 	strh.w	r8, [r4, #32]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80055fa:	4648      	mov	r0, r9
  len = p->tot_len;
 80055fc:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80055fe:	f00f f893 	bl	8014728 <sys_mbox_trypost>
 8005602:	9a01      	ldr	r2, [sp, #4]
 8005604:	4601      	mov	r1, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	d0c5      	beq.n	8005596 <recv_udp+0x42>
    netbuf_delete(buf);
 800560a:	4620      	mov	r0, r4
}
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 8005612:	f001 b8a9 	b.w	8006768 <netbuf_delete>
}
 8005616:	b003      	add	sp, #12
 8005618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800561c:	0802b436 	.word	0x0802b436
 8005620:	0802b4a1 	.word	0x0802b4a1
 8005624:	0802aecf 	.word	0x0802aecf
 8005628:	0802b4c3 	.word	0x0802b4c3
 800562c:	0802b4e2 	.word	0x0802b4e2

08005630 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005630:	b507      	push	{r0, r1, r2, lr}
 8005632:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005634:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8005636:	9001      	str	r0, [sp, #4]
 8005638:	f00a fc9a 	bl	800ff70 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800563c:	9801      	ldr	r0, [sp, #4]
 800563e:	4909      	ldr	r1, [pc, #36]	; (8005664 <setup_tcp+0x34>)
 8005640:	f00a fc9a 	bl	800ff78 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005644:	9801      	ldr	r0, [sp, #4]
 8005646:	4908      	ldr	r1, [pc, #32]	; (8005668 <setup_tcp+0x38>)
 8005648:	f00a fcae 	bl	800ffa8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800564c:	9801      	ldr	r0, [sp, #4]
 800564e:	4907      	ldr	r1, [pc, #28]	; (800566c <setup_tcp+0x3c>)
 8005650:	2202      	movs	r2, #2
 8005652:	f00a fce1 	bl	8010018 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8005656:	4906      	ldr	r1, [pc, #24]	; (8005670 <setup_tcp+0x40>)
 8005658:	9801      	ldr	r0, [sp, #4]
}
 800565a:	b003      	add	sp, #12
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8005660:	f00a bcba 	b.w	800ffd8 <tcp_err>
 8005664:	08005bc1 	.word	0x08005bc1
 8005668:	08005dd5 	.word	0x08005dd5
 800566c:	08005b49 	.word	0x08005b49
 8005670:	08005c91 	.word	0x08005c91

08005674 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4615      	mov	r5, r2

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8005678:	4604      	mov	r4, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d043      	beq.n	8005706 <lwip_netconn_do_connected+0x92>
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800567e:	7843      	ldrb	r3, [r0, #1]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d006      	beq.n	8005692 <lwip_netconn_do_connected+0x1e>
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <lwip_netconn_do_connected+0x98>)
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <lwip_netconn_do_connected+0x9c>)
 8005688:	4822      	ldr	r0, [pc, #136]	; (8005714 <lwip_netconn_do_connected+0xa0>)
 800568a:	f240 5223 	movw	r2, #1315	; 0x523
 800568e:	f017 fa4b 	bl	801cb28 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8005692:	6a23      	ldr	r3, [r4, #32]
 8005694:	b94b      	cbnz	r3, 80056aa <lwip_netconn_do_connected+0x36>
 8005696:	7f23      	ldrb	r3, [r4, #28]
 8005698:	075b      	lsls	r3, r3, #29
 800569a:	d406      	bmi.n	80056aa <lwip_netconn_do_connected+0x36>
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <lwip_netconn_do_connected+0x98>)
 800569e:	491e      	ldr	r1, [pc, #120]	; (8005718 <lwip_netconn_do_connected+0xa4>)
 80056a0:	481c      	ldr	r0, [pc, #112]	; (8005714 <lwip_netconn_do_connected+0xa0>)
 80056a2:	f240 5224 	movw	r2, #1316	; 0x524
 80056a6:	f017 fa3f 	bl	801cb28 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80056aa:	6a26      	ldr	r6, [r4, #32]
 80056ac:	b116      	cbz	r6, 80056b4 <lwip_netconn_do_connected+0x40>
    conn->current_msg->err = err;
 80056ae:	7135      	strb	r5, [r6, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80056b0:	6836      	ldr	r6, [r6, #0]
 80056b2:	360c      	adds	r6, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80056b4:	7823      	ldrb	r3, [r4, #0]
 80056b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d103      	bne.n	80056c6 <lwip_netconn_do_connected+0x52>
 80056be:	b915      	cbnz	r5, 80056c6 <lwip_netconn_do_connected+0x52>
    setup_tcp(conn);
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff ffb5 	bl	8005630 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80056c6:	7f20      	ldrb	r0, [r4, #28]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80056c8:	f020 0304 	bic.w	r3, r0, #4
  LWIP_ASSERT("blocking connect state error",
 80056cc:	f010 0504 	ands.w	r5, r0, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 80056d0:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
 80056d2:	d108      	bne.n	80056e6 <lwip_netconn_do_connected+0x72>
 80056d4:	b94e      	cbnz	r6, 80056ea <lwip_netconn_do_connected+0x76>
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <lwip_netconn_do_connected+0x98>)
 80056d8:	4910      	ldr	r1, [pc, #64]	; (800571c <lwip_netconn_do_connected+0xa8>)
 80056da:	480e      	ldr	r0, [pc, #56]	; (8005714 <lwip_netconn_do_connected+0xa0>)
 80056dc:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80056e0:	f017 fa22 	bl	801cb28 <iprintf>
 80056e4:	e001      	b.n	80056ea <lwip_netconn_do_connected+0x76>
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d1f5      	bne.n	80056d6 <lwip_netconn_do_connected+0x62>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80056ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  conn->current_msg = NULL;
 80056ec:	2200      	movs	r2, #0
 80056ee:	6222      	str	r2, [r4, #32]
  conn->state = NETCONN_NONE;
 80056f0:	7062      	strb	r2, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80056f2:	b113      	cbz	r3, 80056fa <lwip_netconn_do_connected+0x86>
 80056f4:	2102      	movs	r1, #2
 80056f6:	4620      	mov	r0, r4
 80056f8:	4798      	blx	r3

  if (was_blocking) {
 80056fa:	b915      	cbnz	r5, 8005702 <lwip_netconn_do_connected+0x8e>
    sys_sem_signal(op_completed_sem);
 80056fc:	4630      	mov	r0, r6
 80056fe:	f00f f88a 	bl	8014816 <sys_sem_signal>
  }
  return ERR_OK;
 8005702:	2000      	movs	r0, #0
 8005704:	e001      	b.n	800570a <lwip_netconn_do_connected+0x96>
    return ERR_VAL;
 8005706:	f06f 0005 	mvn.w	r0, #5
}
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	0802b436 	.word	0x0802b436
 8005710:	0802b500 	.word	0x0802b500
 8005714:	0802aecf 	.word	0x0802aecf
 8005718:	0802b51f 	.word	0x0802b51f
 800571c:	0802b55c 	.word	0x0802b55c

08005720 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005724:	4604      	mov	r4, r0
 8005726:	b930      	cbnz	r0, 8005736 <lwip_netconn_do_writemore+0x16>
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 800572a:	4986      	ldr	r1, [pc, #536]	; (8005944 <lwip_netconn_do_writemore+0x224>)
 800572c:	4886      	ldr	r0, [pc, #536]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 800572e:	f240 6273 	movw	r2, #1651	; 0x673
 8005732:	f017 f9f9 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005736:	7863      	ldrb	r3, [r4, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d006      	beq.n	800574a <lwip_netconn_do_writemore+0x2a>
 800573c:	4b80      	ldr	r3, [pc, #512]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 800573e:	4983      	ldr	r1, [pc, #524]	; (800594c <lwip_netconn_do_writemore+0x22c>)
 8005740:	4881      	ldr	r0, [pc, #516]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 8005742:	f240 6274 	movw	r2, #1652	; 0x674
 8005746:	f017 f9ef 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800574a:	6a23      	ldr	r3, [r4, #32]
 800574c:	b933      	cbnz	r3, 800575c <lwip_netconn_do_writemore+0x3c>
 800574e:	4b7c      	ldr	r3, [pc, #496]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 8005750:	497f      	ldr	r1, [pc, #508]	; (8005950 <lwip_netconn_do_writemore+0x230>)
 8005752:	487d      	ldr	r0, [pc, #500]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 8005754:	f240 6275 	movw	r2, #1653	; 0x675
 8005758:	f017 f9e6 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	b933      	cbnz	r3, 800576e <lwip_netconn_do_writemore+0x4e>
 8005760:	4b77      	ldr	r3, [pc, #476]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 8005762:	497c      	ldr	r1, [pc, #496]	; (8005954 <lwip_netconn_do_writemore+0x234>)
 8005764:	4878      	ldr	r0, [pc, #480]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 8005766:	f240 6276 	movw	r2, #1654	; 0x676
 800576a:	f017 f9dd 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800576e:	6a23      	ldr	r3, [r4, #32]
 8005770:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005774:	429a      	cmp	r2, r3
 8005776:	d306      	bcc.n	8005786 <lwip_netconn_do_writemore+0x66>
 8005778:	4b71      	ldr	r3, [pc, #452]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 800577a:	4977      	ldr	r1, [pc, #476]	; (8005958 <lwip_netconn_do_writemore+0x238>)
 800577c:	4872      	ldr	r0, [pc, #456]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 800577e:	f240 6277 	movw	r2, #1655	; 0x677
 8005782:	f017 f9d1 	bl	801cb28 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005786:	6a23      	ldr	r3, [r4, #32]
 8005788:	899b      	ldrh	r3, [r3, #12]
 800578a:	b933      	cbnz	r3, 800579a <lwip_netconn_do_writemore+0x7a>
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 800578e:	4973      	ldr	r1, [pc, #460]	; (800595c <lwip_netconn_do_writemore+0x23c>)
 8005790:	486d      	ldr	r0, [pc, #436]	; (8005948 <lwip_netconn_do_writemore+0x228>)
 8005792:	f240 6279 	movw	r2, #1657	; 0x679
 8005796:	f017 f9c7 	bl	801cb28 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800579a:	6a23      	ldr	r3, [r4, #32]
 800579c:	7f26      	ldrb	r6, [r4, #28]
 800579e:	7f1f      	ldrb	r7, [r3, #28]
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80057a0:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8005960 <lwip_netconn_do_writemore+0x240>
 80057a4:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8005948 <lwip_netconn_do_writemore+0x228>
 80057a8:	f006 0602 	and.w	r6, r6, #2
 80057ac:	f007 0304 	and.w	r3, r7, #4
 80057b0:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80057b2:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 80057b4:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80057b6:	688a      	ldr	r2, [r1, #8]
 80057b8:	690b      	ldr	r3, [r1, #16]
 80057ba:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 80057bc:	f8b5 508c 	ldrh.w	r5, [r5, #140]	; 0x8c
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80057c0:	eb00 0903 	add.w	r9, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80057c4:	6850      	ldr	r0, [r2, #4]
 80057c6:	eba0 0803 	sub.w	r8, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80057ca:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
        len = 0xffff;
 80057ce:	bf2a      	itet	cs
 80057d0:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 80057d4:	fa1f f288 	uxthcc.w	r2, r8
        apiflags |= TCP_WRITE_FLAG_MORE;
 80057d8:	f047 0702 	orrcs.w	r7, r7, #2
      if (available < len) {
 80057dc:	42aa      	cmp	r2, r5
 80057de:	d975      	bls.n	80058cc <lwip_netconn_do_writemore+0x1ac>
        if (dontblock) {
 80057e0:	2e00      	cmp	r6, #0
 80057e2:	d034      	beq.n	800584e <lwip_netconn_do_writemore+0x12e>
          if (!len) {
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	d134      	bne.n	8005852 <lwip_netconn_do_writemore+0x132>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80057e8:	698b      	ldr	r3, [r1, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf0c      	ite	eq
 80057ee:	f06f 0906 	mvneq.w	r9, #6
 80057f2:	f04f 0900 	movne.w	r9, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80057f6:	6a23      	ldr	r3, [r4, #32]
 80057f8:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d272      	bcs.n	80058e6 <lwip_netconn_do_writemore+0x1c6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005802:	b11b      	cbz	r3, 800580c <lwip_netconn_do_writemore+0xec>
 8005804:	2200      	movs	r2, #0
 8005806:	2103      	movs	r1, #3
 8005808:	4620      	mov	r0, r4
 800580a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800580c:	7f23      	ldrb	r3, [r4, #28]
 800580e:	f043 0310 	orr.w	r3, r3, #16
 8005812:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8005814:	f1b9 0f00 	cmp.w	r9, #0
 8005818:	d17a      	bne.n	8005910 <lwip_netconn_do_writemore+0x1f0>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800581a:	6a23      	ldr	r3, [r4, #32]
 800581c:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005820:	429a      	cmp	r2, r3
 8005822:	d073      	beq.n	800590c <lwip_netconn_do_writemore+0x1ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8005824:	3e00      	subs	r6, #0
 8005826:	bf18      	it	ne
 8005828:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 800582a:	6860      	ldr	r0, [r4, #4]
 800582c:	f00d fd5e 	bl	80132ec <tcp_output>
      if (out_err == ERR_RTE) {
 8005830:	3004      	adds	r0, #4
 8005832:	d17c      	bne.n	800592e <lwip_netconn_do_writemore+0x20e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8005834:	f06f 0903 	mvn.w	r9, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005838:	6a23      	ldr	r3, [r4, #32]
 800583a:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800583c:	f883 9004 	strb.w	r9, [r3, #4]
    conn->current_msg = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005844:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8005846:	300c      	adds	r0, #12
 8005848:	f00e ffe5 	bl	8014816 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800584c:	e071      	b.n	8005932 <lwip_netconn_do_writemore+0x212>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800584e:	f047 0702 	orr.w	r7, r7, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005852:	442b      	add	r3, r5
 8005854:	4298      	cmp	r0, r3
 8005856:	d206      	bcs.n	8005866 <lwip_netconn_do_writemore+0x146>
 8005858:	4b39      	ldr	r3, [pc, #228]	; (8005940 <lwip_netconn_do_writemore+0x220>)
 800585a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800585e:	4651      	mov	r1, sl
 8005860:	4658      	mov	r0, fp
 8005862:	f017 f961 	bl	801cb28 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8005866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800586a:	429d      	cmp	r5, r3
 800586c:	d102      	bne.n	8005874 <lwip_netconn_do_writemore+0x154>
 800586e:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 8005872:	d207      	bcs.n	8005884 <lwip_netconn_do_writemore+0x164>
 8005874:	fa1f f888 	uxth.w	r8, r8
 8005878:	45a8      	cmp	r8, r5
 800587a:	d129      	bne.n	80058d0 <lwip_netconn_do_writemore+0x1b0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800587c:	6a23      	ldr	r3, [r4, #32]
 800587e:	899b      	ldrh	r3, [r3, #12]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d925      	bls.n	80058d0 <lwip_netconn_do_writemore+0x1b0>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005884:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8005888:	f04f 0801 	mov.w	r8, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800588c:	4649      	mov	r1, r9
 800588e:	6860      	ldr	r0, [r4, #4]
 8005890:	463b      	mov	r3, r7
 8005892:	462a      	mov	r2, r5
 8005894:	f00c ff92 	bl	80127bc <tcp_write>
      if (err == ERR_OK) {
 8005898:	4681      	mov	r9, r0
 800589a:	b9e0      	cbnz	r0, 80058d6 <lwip_netconn_do_writemore+0x1b6>
        conn->current_msg->msg.w.offset += len;
 800589c:	6a23      	ldr	r3, [r4, #32]
 800589e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80058a0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80058a2:	442a      	add	r2, r5
 80058a4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80058aa:	684a      	ldr	r2, [r1, #4]
        conn->current_msg->msg.w.vector_off += len;
 80058ac:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80058ae:	4295      	cmp	r5, r2
 80058b0:	d107      	bne.n	80058c2 <lwip_netconn_do_writemore+0x1a2>
          conn->current_msg->msg.w.vector_cnt--;
 80058b2:	899a      	ldrh	r2, [r3, #12]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	b292      	uxth	r2, r2
 80058b8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80058ba:	b112      	cbz	r2, 80058c2 <lwip_netconn_do_writemore+0x1a2>
            conn->current_msg->msg.w.vector++;
 80058bc:	3108      	adds	r1, #8
 80058be:	6099      	str	r1, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80058c0:	6118      	str	r0, [r3, #16]
    } while (write_more && err == ERR_OK);
 80058c2:	f1b8 0f00 	cmp.w	r8, #0
 80058c6:	f47f af74 	bne.w	80057b2 <lwip_netconn_do_writemore+0x92>
 80058ca:	e00a      	b.n	80058e2 <lwip_netconn_do_writemore+0x1c2>
 80058cc:	4615      	mov	r5, r2
 80058ce:	e7c0      	b.n	8005852 <lwip_netconn_do_writemore+0x132>
        write_more = 0;
 80058d0:	f04f 0800 	mov.w	r8, #0
 80058d4:	e7da      	b.n	800588c <lwip_netconn_do_writemore+0x16c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d8ac      	bhi.n	8005838 <lwip_netconn_do_writemore+0x118>
err_mem:
 80058de:	f04f 39ff 	mov.w	r9, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	d187      	bne.n	80057f6 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	f8b3 108c 	ldrh.w	r1, [r3, #140]	; 0x8c
 80058ec:	f640 3269 	movw	r2, #2921	; 0xb69
 80058f0:	4291      	cmp	r1, r2
 80058f2:	d903      	bls.n	80058fc <lwip_netconn_do_writemore+0x1dc>
 80058f4:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d98b      	bls.n	8005814 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80058fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d088      	beq.n	8005814 <lwip_netconn_do_writemore+0xf4>
 8005902:	2200      	movs	r2, #0
 8005904:	2103      	movs	r1, #3
 8005906:	4620      	mov	r0, r4
 8005908:	4798      	blx	r3
 800590a:	e783      	b.n	8005814 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800590c:	2601      	movs	r6, #1
 800590e:	e78c      	b.n	800582a <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8005910:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005914:	d190      	bne.n	8005838 <lwip_netconn_do_writemore+0x118>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8005916:	6860      	ldr	r0, [r4, #4]
 8005918:	f00d fce8 	bl	80132ec <tcp_output>
      if (out_err == ERR_RTE) {
 800591c:	3004      	adds	r0, #4
 800591e:	d089      	beq.n	8005834 <lwip_netconn_do_writemore+0x114>
      } else if (dontblock) {
 8005920:	b13e      	cbz	r6, 8005932 <lwip_netconn_do_writemore+0x212>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005922:	6a23      	ldr	r3, [r4, #32]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	b13b      	cbz	r3, 8005938 <lwip_netconn_do_writemore+0x218>
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	e784      	b.n	8005838 <lwip_netconn_do_writemore+0x118>
  if (write_finished) {
 800592e:	2e00      	cmp	r6, #0
 8005930:	d1fa      	bne.n	8005928 <lwip_netconn_do_writemore+0x208>
}
 8005932:	2000      	movs	r0, #0
 8005934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005938:	f06f 0906 	mvn.w	r9, #6
 800593c:	e77c      	b.n	8005838 <lwip_netconn_do_writemore+0x118>
 800593e:	bf00      	nop
 8005940:	0802b436 	.word	0x0802b436
 8005944:	0802bc93 	.word	0x0802bc93
 8005948:	0802aecf 	.word	0x0802aecf
 800594c:	0802b579 	.word	0x0802b579
 8005950:	0802b596 	.word	0x0802b596
 8005954:	0802b5b0 	.word	0x0802b5b0
 8005958:	0802b5c6 	.word	0x0802b5c6
 800595c:	0802b605 	.word	0x0802b605
 8005960:	0802b62d 	.word	0x0802b62d

08005964 <lwip_netconn_do_close_internal>:
{
 8005964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8005968:	4604      	mov	r4, r0
 800596a:	b930      	cbnz	r0, 800597a <lwip_netconn_do_close_internal+0x16>
 800596c:	4b6b      	ldr	r3, [pc, #428]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 800596e:	496c      	ldr	r1, [pc, #432]	; (8005b20 <lwip_netconn_do_close_internal+0x1bc>)
 8005970:	486c      	ldr	r0, [pc, #432]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 8005972:	f240 32a2 	movw	r2, #930	; 0x3a2
 8005976:	f017 f8d7 	bl	801cb28 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800597a:	7823      	ldrb	r3, [r4, #0]
 800597c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005980:	2b10      	cmp	r3, #16
 8005982:	d006      	beq.n	8005992 <lwip_netconn_do_close_internal+0x2e>
 8005984:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 8005986:	4968      	ldr	r1, [pc, #416]	; (8005b28 <lwip_netconn_do_close_internal+0x1c4>)
 8005988:	4866      	ldr	r0, [pc, #408]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 800598a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800598e:	f017 f8cb 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005992:	7863      	ldrb	r3, [r4, #1]
 8005994:	2b04      	cmp	r3, #4
 8005996:	d006      	beq.n	80059a6 <lwip_netconn_do_close_internal+0x42>
 8005998:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 800599a:	4964      	ldr	r1, [pc, #400]	; (8005b2c <lwip_netconn_do_close_internal+0x1c8>)
 800599c:	4861      	ldr	r0, [pc, #388]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 800599e:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80059a2:	f017 f8c1 	bl	801cb28 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	b933      	cbnz	r3, 80059b8 <lwip_netconn_do_close_internal+0x54>
 80059aa:	4b5c      	ldr	r3, [pc, #368]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 80059ac:	4960      	ldr	r1, [pc, #384]	; (8005b30 <lwip_netconn_do_close_internal+0x1cc>)
 80059ae:	485d      	ldr	r0, [pc, #372]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 80059b0:	f240 32a5 	movw	r2, #933	; 0x3a5
 80059b4:	f017 f8b8 	bl	801cb28 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b933      	cbnz	r3, 80059ca <lwip_netconn_do_close_internal+0x66>
 80059bc:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 80059be:	495d      	ldr	r1, [pc, #372]	; (8005b34 <lwip_netconn_do_close_internal+0x1d0>)
 80059c0:	4858      	ldr	r0, [pc, #352]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 80059c2:	f240 32a6 	movw	r2, #934	; 0x3a6
 80059c6:	f017 f8af 	bl	801cb28 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80059ca:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 80059cc:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80059ce:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80059d0:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80059d2:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80059d6:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80059da:	d011      	beq.n	8005a00 <lwip_netconn_do_close_internal+0x9c>
  } else if (shut_rx &&
 80059dc:	f1b9 0f00 	cmp.w	r9, #0
 80059e0:	d006      	beq.n	80059f0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80059e2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  } else if (shut_rx &&
 80059e6:	1f5a      	subs	r2, r3, #5
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	d909      	bls.n	8005a00 <lwip_netconn_do_close_internal+0x9c>
              (tpcb->state == FIN_WAIT_2) ||
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d007      	beq.n	8005a00 <lwip_netconn_do_close_internal+0x9c>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	d018      	beq.n	8005a28 <lwip_netconn_do_close_internal+0xc4>
 80059f6:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
 80059fa:	f017 0710 	ands.w	r7, r7, #16
 80059fe:	d004      	beq.n	8005a0a <lwip_netconn_do_close_internal+0xa6>
    tcp_arg(tpcb, NULL);
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f00a fab4 	bl	800ff70 <tcp_arg>
 8005a08:	2701      	movs	r7, #1
  if (tpcb->state == LISTEN) {
 8005a0a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10c      	bne.n	8005a2c <lwip_netconn_do_close_internal+0xc8>
    tcp_accept(tpcb, NULL);
 8005a12:	2100      	movs	r1, #0
 8005a14:	4628      	mov	r0, r5
 8005a16:	f00a faf7 	bl	8010008 <tcp_accept>
  if (shut_close) {
 8005a1a:	bb27      	cbnz	r7, 8005a66 <lwip_netconn_do_close_internal+0x102>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4628      	mov	r0, r5
 8005a22:	f00a ff81 	bl	8010928 <tcp_shutdown>
 8005a26:	e021      	b.n	8005a6c <lwip_netconn_do_close_internal+0x108>
    shut_close = 0;
 8005a28:	4647      	mov	r7, r8
 8005a2a:	e7ee      	b.n	8005a0a <lwip_netconn_do_close_internal+0xa6>
    if (shut_rx) {
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	d007      	beq.n	8005a42 <lwip_netconn_do_close_internal+0xde>
      tcp_recv(tpcb, NULL);
 8005a32:	2100      	movs	r1, #0
 8005a34:	4628      	mov	r0, r5
 8005a36:	f00a fa9f 	bl	800ff78 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f00a fae3 	bl	8010008 <tcp_accept>
    if (shut_tx) {
 8005a42:	f1b8 0f00 	cmp.w	r8, #0
 8005a46:	d003      	beq.n	8005a50 <lwip_netconn_do_close_internal+0xec>
      tcp_sent(tpcb, NULL);
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f00a faac 	bl	800ffa8 <tcp_sent>
    if (shut_close) {
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	d0e3      	beq.n	8005a1c <lwip_netconn_do_close_internal+0xb8>
      tcp_poll(tpcb, NULL, 0);
 8005a54:	2200      	movs	r2, #0
 8005a56:	4611      	mov	r1, r2
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f00a fadd 	bl	8010018 <tcp_poll>
      tcp_err(tpcb, NULL);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4628      	mov	r0, r5
 8005a62:	f00a fab9 	bl	800ffd8 <tcp_err>
      err = tcp_close(tpcb);
 8005a66:	4628      	mov	r0, r5
 8005a68:	f00a fe72 	bl	8010750 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005a6c:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8005a6e:	b160      	cbz	r0, 8005a8a <lwip_netconn_do_close_internal+0x126>
    if (err == ERR_MEM) {
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d10a      	bne.n	8005a8a <lwip_netconn_do_close_internal+0x126>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005a74:	6a23      	ldr	r3, [r4, #32]
 8005a76:	f893 a009 	ldrb.w	sl, [r3, #9]
 8005a7a:	f1ba 0f00 	cmp.w	sl, #0
 8005a7e:	d12d      	bne.n	8005adc <lwip_netconn_do_close_internal+0x178>
        if (shut_close) {
 8005a80:	b11f      	cbz	r7, 8005a8a <lwip_netconn_do_close_internal+0x126>
          tcp_abort(tpcb);
 8005a82:	4628      	mov	r0, r5
 8005a84:	f00b f812 	bl	8010aac <tcp_abort>
          err = ERR_OK;
 8005a88:	4656      	mov	r6, sl
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005a8a:	6a23      	ldr	r3, [r4, #32]
 8005a8c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8005a8e:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8005a90:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005a92:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8005a94:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005a96:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8005a98:	b9ce      	cbnz	r6, 8005ace <lwip_netconn_do_close_internal+0x16a>
      if (shut_close) {
 8005a9a:	b137      	cbz	r7, 8005aaa <lwip_netconn_do_close_internal+0x146>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        conn->pcb.tcp = NULL;
 8005a9e:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005aa0:	b11b      	cbz	r3, 8005aaa <lwip_netconn_do_close_internal+0x146>
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	2104      	movs	r1, #4
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4798      	blx	r3
      if (shut_rx) {
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	d005      	beq.n	8005abc <lwip_netconn_do_close_internal+0x158>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab2:	b11b      	cbz	r3, 8005abc <lwip_netconn_do_close_internal+0x158>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4798      	blx	r3
      if (shut_tx) {
 8005abc:	f1b8 0f00 	cmp.w	r8, #0
 8005ac0:	d005      	beq.n	8005ace <lwip_netconn_do_close_internal+0x16a>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac4:	b11b      	cbz	r3, 8005ace <lwip_netconn_do_close_internal+0x16a>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4620      	mov	r0, r4
 8005acc:	4798      	blx	r3
      sys_sem_signal(op_completed_sem);
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f00e fea1 	bl	8014816 <sys_sem_signal>
    return ERR_OK;
 8005ad4:	2600      	movs	r6, #0
}
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8005adc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <lwip_netconn_do_close_internal+0x18e>
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <lwip_netconn_do_close_internal+0x1b8>)
 8005ae6:	4914      	ldr	r1, [pc, #80]	; (8005b38 <lwip_netconn_do_close_internal+0x1d4>)
 8005ae8:	480e      	ldr	r0, [pc, #56]	; (8005b24 <lwip_netconn_do_close_internal+0x1c0>)
 8005aea:	f240 4241 	movw	r2, #1089	; 0x441
 8005aee:	f017 f81b 	bl	801cb28 <iprintf>
    if (shut_tx) {
 8005af2:	f1b8 0f00 	cmp.w	r8, #0
 8005af6:	d003      	beq.n	8005b00 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8005af8:	4910      	ldr	r1, [pc, #64]	; (8005b3c <lwip_netconn_do_close_internal+0x1d8>)
 8005afa:	4628      	mov	r0, r5
 8005afc:	f00a fa54 	bl	800ffa8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8005b00:	2201      	movs	r2, #1
 8005b02:	4628      	mov	r0, r5
 8005b04:	490e      	ldr	r1, [pc, #56]	; (8005b40 <lwip_netconn_do_close_internal+0x1dc>)
 8005b06:	f00a fa87 	bl	8010018 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	490d      	ldr	r1, [pc, #52]	; (8005b44 <lwip_netconn_do_close_internal+0x1e0>)
 8005b0e:	f00a fa63 	bl	800ffd8 <tcp_err>
    tcp_arg(tpcb, conn);
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f00a fa2b 	bl	800ff70 <tcp_arg>
  return err;
 8005b1a:	e7dc      	b.n	8005ad6 <lwip_netconn_do_close_internal+0x172>
 8005b1c:	0802b436 	.word	0x0802b436
 8005b20:	0802b2ad 	.word	0x0802b2ad
 8005b24:	0802aecf 	.word	0x0802aecf
 8005b28:	0802b658 	.word	0x0802b658
 8005b2c:	0802b676 	.word	0x0802b676
 8005b30:	0802b69a 	.word	0x0802b69a
 8005b34:	0802b596 	.word	0x0802b596
 8005b38:	0802b6ad 	.word	0x0802b6ad
 8005b3c:	08005dd5 	.word	0x08005dd5
 8005b40:	08005b49 	.word	0x08005b49
 8005b44:	08005c91 	.word	0x08005c91

08005b48 <poll_tcp>:
{
 8005b48:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	b930      	cbnz	r0, 8005b5c <poll_tcp+0x14>
 8005b4e:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <poll_tcp+0x6c>)
 8005b50:	4919      	ldr	r1, [pc, #100]	; (8005bb8 <poll_tcp+0x70>)
 8005b52:	481a      	ldr	r0, [pc, #104]	; (8005bbc <poll_tcp+0x74>)
 8005b54:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8005b58:	f016 ffe6 	bl	801cb28 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8005b5c:	7863      	ldrb	r3, [r4, #1]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d11c      	bne.n	8005b9c <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff fddc 	bl	8005720 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8005b68:	7f23      	ldrb	r3, [r4, #28]
 8005b6a:	06da      	lsls	r2, r3, #27
 8005b6c:	d514      	bpl.n	8005b98 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	b192      	cbz	r2, 8005b98 <poll_tcp+0x50>
 8005b72:	f8b2 008c 	ldrh.w	r0, [r2, #140]	; 0x8c
 8005b76:	f640 3169 	movw	r1, #2921	; 0xb69
 8005b7a:	4288      	cmp	r0, r1
 8005b7c:	d90c      	bls.n	8005b98 <poll_tcp+0x50>
 8005b7e:	f8b2 208e 	ldrh.w	r2, [r2, #142]	; 0x8e
 8005b82:	2a04      	cmp	r2, #4
 8005b84:	d808      	bhi.n	8005b98 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005b86:	f023 0310 	bic.w	r3, r3, #16
 8005b8a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8e:	b11b      	cbz	r3, 8005b98 <poll_tcp+0x50>
 8005b90:	2200      	movs	r2, #0
 8005b92:	2102      	movs	r1, #2
 8005b94:	4620      	mov	r0, r4
 8005b96:	4798      	blx	r3
}
 8005b98:	2000      	movs	r0, #0
 8005b9a:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d1e3      	bne.n	8005b68 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005ba0:	6a22      	ldr	r2, [r4, #32]
 8005ba2:	b11a      	cbz	r2, 8005bac <poll_tcp+0x64>
 8005ba4:	7a53      	ldrb	r3, [r2, #9]
 8005ba6:	b10b      	cbz	r3, 8005bac <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff fed9 	bl	8005964 <lwip_netconn_do_close_internal>
 8005bb2:	e7d9      	b.n	8005b68 <poll_tcp+0x20>
 8005bb4:	0802b436 	.word	0x0802b436
 8005bb8:	0802bc93 	.word	0x0802bc93
 8005bbc:	0802aecf 	.word	0x0802aecf

08005bc0 <recv_tcp>:
{
 8005bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8005bca:	460f      	mov	r7, r1
 8005bcc:	b931      	cbnz	r1, 8005bdc <recv_tcp+0x1c>
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <recv_tcp+0xb4>)
 8005bd0:	4929      	ldr	r1, [pc, #164]	; (8005c78 <recv_tcp+0xb8>)
 8005bd2:	482a      	ldr	r0, [pc, #168]	; (8005c7c <recv_tcp+0xbc>)
 8005bd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bd8:	f016 ffa6 	bl	801cb28 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005bdc:	bb4e      	cbnz	r6, 8005c32 <recv_tcp+0x72>
 8005bde:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <recv_tcp+0xb4>)
 8005be0:	4927      	ldr	r1, [pc, #156]	; (8005c80 <recv_tcp+0xc0>)
 8005be2:	4826      	ldr	r0, [pc, #152]	; (8005c7c <recv_tcp+0xbc>)
 8005be4:	f240 122d 	movw	r2, #301	; 0x12d
 8005be8:	f016 ff9e 	bl	801cb28 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005bec:	bb14      	cbnz	r4, 8005c34 <recv_tcp+0x74>
    return ERR_VAL;
 8005bee:	f06f 0405 	mvn.w	r4, #5
}
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	8929      	ldrh	r1, [r5, #8]
 8005bfc:	f00a f960 	bl	800fec0 <tcp_recved>
      pbuf_free(p);
 8005c00:	4628      	mov	r0, r5
 8005c02:	f009 fbbd 	bl	800f380 <pbuf_free>
 8005c06:	e7f4      	b.n	8005bf2 <recv_tcp+0x32>
  if (p != NULL) {
 8005c08:	b16d      	cbz	r5, 8005c26 <recv_tcp+0x66>
    len = p->tot_len;
 8005c0a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4640      	mov	r0, r8
 8005c10:	f00e fd8a 	bl	8014728 <sys_mbox_trypost>
 8005c14:	4604      	mov	r4, r0
 8005c16:	b948      	cbnz	r0, 8005c2c <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c1a:	b343      	cbz	r3, 8005c6e <recv_tcp+0xae>
 8005c1c:	4601      	mov	r1, r0
 8005c1e:	463a      	mov	r2, r7
 8005c20:	4630      	mov	r0, r6
 8005c22:	4798      	blx	r3
 8005c24:	e7e5      	b.n	8005bf2 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8005c26:	4d17      	ldr	r5, [pc, #92]	; (8005c84 <recv_tcp+0xc4>)
    len = 0;
 8005c28:	2700      	movs	r7, #0
 8005c2a:	e7ef      	b.n	8005c0c <recv_tcp+0x4c>
    return ERR_MEM;
 8005c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c30:	e7df      	b.n	8005bf2 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005c32:	b144      	cbz	r4, 8005c46 <recv_tcp+0x86>
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <recv_tcp+0xb4>)
 8005c36:	4914      	ldr	r1, [pc, #80]	; (8005c88 <recv_tcp+0xc8>)
 8005c38:	4810      	ldr	r0, [pc, #64]	; (8005c7c <recv_tcp+0xbc>)
 8005c3a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005c3e:	f016 ff73 	bl	801cb28 <iprintf>
  if (conn == NULL) {
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	d0d3      	beq.n	8005bee <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005c46:	6873      	ldr	r3, [r6, #4]
 8005c48:	42bb      	cmp	r3, r7
 8005c4a:	d006      	beq.n	8005c5a <recv_tcp+0x9a>
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <recv_tcp+0xb4>)
 8005c4e:	490f      	ldr	r1, [pc, #60]	; (8005c8c <recv_tcp+0xcc>)
 8005c50:	480a      	ldr	r0, [pc, #40]	; (8005c7c <recv_tcp+0xbc>)
 8005c52:	f240 1235 	movw	r2, #309	; 0x135
 8005c56:	f016 ff67 	bl	801cb28 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005c5a:	f106 0810 	add.w	r8, r6, #16
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f00e fd9f 	bl	80147a2 <sys_mbox_valid>
 8005c64:	4604      	mov	r4, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d1ce      	bne.n	8005c08 <recv_tcp+0x48>
    if (p != NULL) {
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	d1c4      	bne.n	8005bf8 <recv_tcp+0x38>
    return ERR_OK;
 8005c6e:	2400      	movs	r4, #0
 8005c70:	e7bf      	b.n	8005bf2 <recv_tcp+0x32>
 8005c72:	bf00      	nop
 8005c74:	0802b436 	.word	0x0802b436
 8005c78:	0802b6d0 	.word	0x0802b6d0
 8005c7c:	0802aecf 	.word	0x0802aecf
 8005c80:	0802b6f2 	.word	0x0802b6f2
 8005c84:	0801fbb8 	.word	0x0801fbb8
 8005c88:	0802b711 	.word	0x0802b711
 8005c8c:	0802b729 	.word	0x0802b729

08005c90 <err_tcp>:
{
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005c96:	4604      	mov	r4, r0
 8005c98:	b930      	cbnz	r0, 8005ca8 <err_tcp+0x18>
 8005c9a:	4b46      	ldr	r3, [pc, #280]	; (8005db4 <err_tcp+0x124>)
 8005c9c:	4946      	ldr	r1, [pc, #280]	; (8005db8 <err_tcp+0x128>)
 8005c9e:	4847      	ldr	r0, [pc, #284]	; (8005dbc <err_tcp+0x12c>)
 8005ca0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005ca4:	f016 ff40 	bl	801cb28 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8005ca8:	f00e fdf6 	bl	8014898 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005cac:	7f23      	ldrb	r3, [r4, #28]
  old_state = conn->state;
 8005cae:	7867      	ldrb	r7, [r4, #1]
  conn->pending_err = err;
 8005cb0:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
  conn->pcb.tcp = NULL;
 8005cb6:	2600      	movs	r6, #0
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005cb8:	7723      	strb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 8005cba:	6066      	str	r6, [r4, #4]
  conn->state = NETCONN_NONE;
 8005cbc:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8005cbe:	f00e fdf7 	bl	80148b0 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc4:	b11b      	cbz	r3, 8005cce <err_tcp+0x3e>
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	2104      	movs	r1, #4
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd0:	b11b      	cbz	r3, 8005cda <err_tcp+0x4a>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cdc:	b11b      	cbz	r3, 8005ce6 <err_tcp+0x56>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4798      	blx	r3
  switch (err) {
 8005ce6:	f105 030f 	add.w	r3, r5, #15
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d848      	bhi.n	8005d82 <err_tcp+0xf2>
 8005cf0:	4a33      	ldr	r2, [pc, #204]	; (8005dc0 <err_tcp+0x130>)
 8005cf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cf6:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005cf8:	f104 0810 	add.w	r8, r4, #16
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	f00e fd50 	bl	80147a2 <sys_mbox_valid>
 8005d02:	b118      	cbz	r0, 8005d0c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8005d04:	4631      	mov	r1, r6
 8005d06:	4640      	mov	r0, r8
 8005d08:	f00e fd0e 	bl	8014728 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005d0c:	f104 0814 	add.w	r8, r4, #20
 8005d10:	4640      	mov	r0, r8
 8005d12:	f00e fd46 	bl	80147a2 <sys_mbox_valid>
 8005d16:	b118      	cbz	r0, 8005d20 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	f00e fd04 	bl	8014728 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005d20:	2f01      	cmp	r7, #1
 8005d22:	d002      	beq.n	8005d2a <err_tcp+0x9a>
 8005d24:	1efb      	subs	r3, r7, #3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d836      	bhi.n	8005d98 <err_tcp+0x108>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005d2a:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005d2c:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005d30:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005d32:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8005d34:	d43b      	bmi.n	8005dae <err_tcp+0x11e>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005d36:	6a23      	ldr	r3, [r4, #32]
 8005d38:	b933      	cbnz	r3, 8005d48 <err_tcp+0xb8>
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <err_tcp+0x124>)
 8005d3c:	4921      	ldr	r1, [pc, #132]	; (8005dc4 <err_tcp+0x134>)
 8005d3e:	481f      	ldr	r0, [pc, #124]	; (8005dbc <err_tcp+0x12c>)
 8005d40:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005d44:	f016 fef0 	bl	801cb28 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8005d48:	6a23      	ldr	r3, [r4, #32]
 8005d4a:	2f04      	cmp	r7, #4
        conn->current_msg->err = err;
 8005d4c:	bf18      	it	ne
 8005d4e:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005d50:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8005d52:	bf08      	it	eq
 8005d54:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005d56:	f105 050c 	add.w	r5, r5, #12
        conn->current_msg->err = ERR_OK;
 8005d5a:	bf08      	it	eq
 8005d5c:	711a      	strbeq	r2, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f00e fd5f 	bl	8014822 <sys_sem_valid>
 8005d64:	b930      	cbnz	r0, 8005d74 <err_tcp+0xe4>
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <err_tcp+0x124>)
 8005d68:	4917      	ldr	r1, [pc, #92]	; (8005dc8 <err_tcp+0x138>)
 8005d6a:	4814      	ldr	r0, [pc, #80]	; (8005dbc <err_tcp+0x12c>)
 8005d6c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005d70:	f016 feda 	bl	801cb28 <iprintf>
      conn->current_msg = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 8005d78:	4628      	mov	r0, r5
}
 8005d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8005d7e:	f00e bd4a 	b.w	8014816 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8005d82:	b13d      	cbz	r5, 8005d94 <err_tcp+0x104>
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <err_tcp+0x124>)
 8005d86:	4911      	ldr	r1, [pc, #68]	; (8005dcc <err_tcp+0x13c>)
 8005d88:	480c      	ldr	r0, [pc, #48]	; (8005dbc <err_tcp+0x12c>)
 8005d8a:	227d      	movs	r2, #125	; 0x7d
 8005d8c:	f016 fecc 	bl	801cb28 <iprintf>
 8005d90:	2600      	movs	r6, #0
 8005d92:	e7b1      	b.n	8005cf8 <err_tcp+0x68>
      return NULL;
 8005d94:	462e      	mov	r6, r5
 8005d96:	e7af      	b.n	8005cf8 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005d98:	6a23      	ldr	r3, [r4, #32]
 8005d9a:	b143      	cbz	r3, 8005dae <err_tcp+0x11e>
}
 8005d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <err_tcp+0x124>)
 8005da2:	490b      	ldr	r1, [pc, #44]	; (8005dd0 <err_tcp+0x140>)
 8005da4:	4805      	ldr	r0, [pc, #20]	; (8005dbc <err_tcp+0x12c>)
 8005da6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005daa:	f016 bebd 	b.w	801cb28 <iprintf>
}
 8005dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db2:	bf00      	nop
 8005db4:	0802b436 	.word	0x0802b436
 8005db8:	0802bc93 	.word	0x0802bc93
 8005dbc:	0802aecf 	.word	0x0802aecf
 8005dc0:	0801fbb8 	.word	0x0801fbb8
 8005dc4:	0802b596 	.word	0x0802b596
 8005dc8:	0802b757 	.word	0x0802b757
 8005dcc:	0802b747 	.word	0x0802b747
 8005dd0:	0802b770 	.word	0x0802b770

08005dd4 <sent_tcp>:
{
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005dd8:	4604      	mov	r4, r0
 8005dda:	b968      	cbnz	r0, 8005df8 <sent_tcp+0x24>
 8005ddc:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <sent_tcp+0x60>)
 8005dde:	4916      	ldr	r1, [pc, #88]	; (8005e38 <sent_tcp+0x64>)
 8005de0:	4816      	ldr	r0, [pc, #88]	; (8005e3c <sent_tcp+0x68>)
 8005de2:	f240 1293 	movw	r2, #403	; 0x193
 8005de6:	f016 fe9f 	bl	801cb28 <iprintf>
}
 8005dea:	2000      	movs	r0, #0
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d107      	bne.n	8005e02 <sent_tcp+0x2e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005df2:	f7ff fdb7 	bl	8005964 <lwip_netconn_do_close_internal>
 8005df6:	e004      	b.n	8005e02 <sent_tcp+0x2e>
    if (conn->state == NETCONN_WRITE) {
 8005df8:	7843      	ldrb	r3, [r0, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d1f7      	bne.n	8005dee <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005dfe:	f7ff fc8f 	bl	8005720 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <sent_tcp+0x16>
 8005e08:	f8b3 108c 	ldrh.w	r1, [r3, #140]	; 0x8c
 8005e0c:	f640 3269 	movw	r2, #2921	; 0xb69
 8005e10:	4291      	cmp	r1, r2
 8005e12:	d9ea      	bls.n	8005dea <sent_tcp+0x16>
 8005e14:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d8e6      	bhi.n	8005dea <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005e1c:	7f23      	ldrb	r3, [r4, #28]
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8005e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0df      	beq.n	8005dea <sent_tcp+0x16>
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4798      	blx	r3
  return ERR_OK;
 8005e32:	e7da      	b.n	8005dea <sent_tcp+0x16>
 8005e34:	0802b436 	.word	0x0802b436
 8005e38:	0802bc93 	.word	0x0802bc93
 8005e3c:	0802aecf 	.word	0x0802aecf

08005e40 <lwip_netconn_is_err_msg>:
{
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8005e44:	460c      	mov	r4, r1
 8005e46:	b929      	cbnz	r1, 8005e54 <lwip_netconn_is_err_msg+0x14>
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <lwip_netconn_is_err_msg+0x40>)
 8005e4a:	490e      	ldr	r1, [pc, #56]	; (8005e84 <lwip_netconn_is_err_msg+0x44>)
 8005e4c:	480e      	ldr	r0, [pc, #56]	; (8005e88 <lwip_netconn_is_err_msg+0x48>)
 8005e4e:	2285      	movs	r2, #133	; 0x85
 8005e50:	f016 fe6a 	bl	801cb28 <iprintf>
  if (msg == &netconn_aborted) {
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <lwip_netconn_is_err_msg+0x4c>)
 8005e56:	f103 0210 	add.w	r2, r3, #16
 8005e5a:	4295      	cmp	r5, r2
 8005e5c:	d103      	bne.n	8005e66 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8005e5e:	23f3      	movs	r3, #243	; 0xf3
    *err = ERR_CLSD;
 8005e60:	7023      	strb	r3, [r4, #0]
    return 1;
 8005e62:	2001      	movs	r0, #1
}
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8005e66:	f103 0211 	add.w	r2, r3, #17
 8005e6a:	4295      	cmp	r5, r2
 8005e6c:	d101      	bne.n	8005e72 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8005e6e:	23f2      	movs	r3, #242	; 0xf2
 8005e70:	e7f6      	b.n	8005e60 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8005e72:	429d      	cmp	r5, r3
 8005e74:	d101      	bne.n	8005e7a <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8005e76:	23f1      	movs	r3, #241	; 0xf1
 8005e78:	e7f2      	b.n	8005e60 <lwip_netconn_is_err_msg+0x20>
  return 0;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7f2      	b.n	8005e64 <lwip_netconn_is_err_msg+0x24>
 8005e7e:	bf00      	nop
 8005e80:	0802b436 	.word	0x0802b436
 8005e84:	0802b78a 	.word	0x0802b78a
 8005e88:	0802aecf 	.word	0x0802aecf
 8005e8c:	0801fbb8 	.word	0x0801fbb8

08005e90 <lwip_netconn_do_newconn>:
{
 8005e90:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8005e92:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8005e94:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 8005e96:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8005e98:	686b      	ldr	r3, [r5, #4]
{
 8005e9a:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8005e9c:	b9f3      	cbnz	r3, 8005edc <lwip_netconn_do_newconn+0x4c>
  if (NETCONNTYPE_ISIPV6(netconn_type(msg->conn))) {
 8005e9e:	782b      	ldrb	r3, [r5, #0]
    iptype = IPADDR_TYPE_ANY;
 8005ea0:	f013 0008 	ands.w	r0, r3, #8
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	bf18      	it	ne
 8005eaa:	202e      	movne	r0, #46	; 0x2e
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d01b      	beq.n	8005ee8 <lwip_netconn_do_newconn+0x58>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d122      	bne.n	8005efa <lwip_netconn_do_newconn+0x6a>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005eb4:	f00e fb11 	bl	80144da <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8005eb8:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005eba:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8005ebc:	6850      	ldr	r0, [r2, #4]
 8005ebe:	b1f8      	cbz	r0, 8005f00 <lwip_netconn_do_newconn+0x70>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005ec0:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005ec2:	4910      	ldr	r1, [pc, #64]	; (8005f04 <lwip_netconn_do_newconn+0x74>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005ec4:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8005ec8:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8005eca:	bf04      	itt	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	f880 3038 	strbeq.w	r3, [r0, #56]	; 0x38
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005ed2:	f00e fab9 	bl	8014448 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	b18b      	cbz	r3, 8005f00 <lwip_netconn_do_newconn+0x70>
  TCPIP_APIMSG_ACK(msg);
 8005edc:	6820      	ldr	r0, [r4, #0]
}
 8005ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 8005ee2:	300c      	adds	r0, #12
 8005ee4:	f00e bc97 	b.w	8014816 <sys_sem_signal>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8005ee8:	f00a fef2 	bl	8010cd0 <tcp_new_ip_type>
 8005eec:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	6843      	ldr	r3, [r0, #4]
 8005ef2:	b12b      	cbz	r3, 8005f00 <lwip_netconn_do_newconn+0x70>
        setup_tcp(msg->conn);
 8005ef4:	f7ff fb9c 	bl	8005630 <setup_tcp>
 8005ef8:	e7ed      	b.n	8005ed6 <lwip_netconn_do_newconn+0x46>
      msg->err = ERR_VAL;
 8005efa:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005efc:	7123      	strb	r3, [r4, #4]
 8005efe:	e7ed      	b.n	8005edc <lwip_netconn_do_newconn+0x4c>
 8005f00:	23ff      	movs	r3, #255	; 0xff
 8005f02:	e7fb      	b.n	8005efc <lwip_netconn_do_newconn+0x6c>
 8005f04:	08005555 	.word	0x08005555

08005f08 <netconn_alloc>:
{
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005f0c:	2007      	movs	r0, #7
{
 8005f0e:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005f10:	f008 feac 	bl	800ec6c <memp_malloc>
  if (conn == NULL) {
 8005f14:	4604      	mov	r4, r0
 8005f16:	b3a0      	cbz	r0, 8005f82 <netconn_alloc+0x7a>
  conn->type = t;
 8005f18:	7005      	strb	r5, [r0, #0]
 8005f1a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8005f1e:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8005f20:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8005f22:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8005f24:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8005f26:	d00e      	beq.n	8005f46 <netconn_alloc+0x3e>
 8005f28:	2d20      	cmp	r5, #32
 8005f2a:	d00c      	beq.n	8005f46 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8005f2c:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <netconn_alloc+0x80>)
 8005f2e:	4917      	ldr	r1, [pc, #92]	; (8005f8c <netconn_alloc+0x84>)
 8005f30:	4817      	ldr	r0, [pc, #92]	; (8005f90 <netconn_alloc+0x88>)
 8005f32:	f240 22e5 	movw	r2, #741	; 0x2e5
 8005f36:	f016 fdf7 	bl	801cb28 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	2007      	movs	r0, #7
 8005f3e:	f008 feb1 	bl	800eca4 <memp_free>
  return NULL;
 8005f42:	2400      	movs	r4, #0
 8005f44:	e01d      	b.n	8005f82 <netconn_alloc+0x7a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8005f46:	f104 0710 	add.w	r7, r4, #16
 8005f4a:	2106      	movs	r1, #6
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f00e fbc5 	bl	80146dc <sys_mbox_new>
 8005f52:	4601      	mov	r1, r0
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d1f0      	bne.n	8005f3a <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8005f58:	f104 000c 	add.w	r0, r4, #12
 8005f5c:	f00e fc29 	bl	80147b2 <sys_sem_new>
 8005f60:	4605      	mov	r5, r0
 8005f62:	b118      	cbz	r0, 8005f6c <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8005f64:	4638      	mov	r0, r7
 8005f66:	f00e fbc9 	bl	80146fc <sys_mbox_free>
    goto free_and_return;
 8005f6a:	e7e6      	b.n	8005f3a <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005f6c:	f104 0014 	add.w	r0, r4, #20
 8005f70:	f00e fc1c 	bl	80147ac <sys_mbox_set_invalid>
  conn->current_msg  = NULL;
 8005f74:	e9c4 5608 	strd	r5, r6, [r4, #32]
  conn->socket       = -1;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 8005f7c:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 8005f7e:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 8005f80:	7725      	strb	r5, [r4, #28]
}
 8005f82:	4620      	mov	r0, r4
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f86:	bf00      	nop
 8005f88:	0802b436 	.word	0x0802b436
 8005f8c:	0802b796 	.word	0x0802b796
 8005f90:	0802aecf 	.word	0x0802aecf

08005f94 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005f94:	6843      	ldr	r3, [r0, #4]
{
 8005f96:	b513      	push	{r0, r1, r4, lr}
 8005f98:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005f9a:	b133      	cbz	r3, 8005faa <netconn_free+0x16>
 8005f9c:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <netconn_free+0x64>)
 8005f9e:	4917      	ldr	r1, [pc, #92]	; (8005ffc <netconn_free+0x68>)
 8005fa0:	4817      	ldr	r0, [pc, #92]	; (8006000 <netconn_free+0x6c>)
 8005fa2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005fa6:	f016 fdbf 	bl	801cb28 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005faa:	f104 0010 	add.w	r0, r4, #16
 8005fae:	f00e fbf8 	bl	80147a2 <sys_mbox_valid>
 8005fb2:	b130      	cbz	r0, 8005fc2 <netconn_free+0x2e>
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <netconn_free+0x64>)
 8005fb6:	4913      	ldr	r1, [pc, #76]	; (8006004 <netconn_free+0x70>)
 8005fb8:	4811      	ldr	r0, [pc, #68]	; (8006000 <netconn_free+0x6c>)
 8005fba:	f240 3223 	movw	r2, #803	; 0x323
 8005fbe:	f016 fdb3 	bl	801cb28 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005fc2:	f104 0014 	add.w	r0, r4, #20
 8005fc6:	f00e fbec 	bl	80147a2 <sys_mbox_valid>
 8005fca:	b130      	cbz	r0, 8005fda <netconn_free+0x46>
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <netconn_free+0x64>)
 8005fce:	490e      	ldr	r1, [pc, #56]	; (8006008 <netconn_free+0x74>)
 8005fd0:	480b      	ldr	r0, [pc, #44]	; (8006000 <netconn_free+0x6c>)
 8005fd2:	f240 3226 	movw	r2, #806	; 0x326
 8005fd6:	f016 fda7 	bl	801cb28 <iprintf>
  sys_sem_free(&conn->op_completed);
 8005fda:	f104 000c 	add.w	r0, r4, #12
 8005fde:	9001      	str	r0, [sp, #4]
 8005fe0:	f00e fc1c 	bl	801481c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005fe4:	9801      	ldr	r0, [sp, #4]
 8005fe6:	f00e fc21 	bl	801482c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005fea:	4621      	mov	r1, r4
 8005fec:	2007      	movs	r0, #7
}
 8005fee:	b002      	add	sp, #8
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8005ff4:	f008 be56 	b.w	800eca4 <memp_free>
 8005ff8:	0802b436 	.word	0x0802b436
 8005ffc:	0802b7bc 	.word	0x0802b7bc
 8006000:	0802aecf 	.word	0x0802aecf
 8006004:	0802b7ea 	.word	0x0802b7ea
 8006008:	0802b824 	.word	0x0802b824

0800600c <netconn_drain>:
{
 800600c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800600e:	f100 0510 	add.w	r5, r0, #16
{
 8006012:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006014:	4628      	mov	r0, r5
 8006016:	f00e fbc4 	bl	80147a2 <sys_mbox_valid>
 800601a:	b158      	cbz	r0, 8006034 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800601c:	a901      	add	r1, sp, #4
 800601e:	4628      	mov	r0, r5
 8006020:	f00e fbae 	bl	8014780 <sys_arch_mbox_tryfetch>
 8006024:	3001      	adds	r0, #1
 8006026:	d118      	bne.n	800605a <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8006028:	4628      	mov	r0, r5
 800602a:	f00e fb67 	bl	80146fc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800602e:	4628      	mov	r0, r5
 8006030:	f00e fbbc 	bl	80147ac <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006034:	3414      	adds	r4, #20
 8006036:	4620      	mov	r0, r4
 8006038:	f00e fbb3 	bl	80147a2 <sys_mbox_valid>
 800603c:	b158      	cbz	r0, 8006056 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800603e:	a901      	add	r1, sp, #4
 8006040:	4620      	mov	r0, r4
 8006042:	f00e fb9d 	bl	8014780 <sys_arch_mbox_tryfetch>
 8006046:	3001      	adds	r0, #1
 8006048:	d11a      	bne.n	8006080 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 800604a:	4620      	mov	r0, r4
 800604c:	f00e fb56 	bl	80146fc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006050:	4620      	mov	r0, r4
 8006052:	f00e fbab 	bl	80147ac <sys_mbox_set_invalid>
}
 8006056:	b002      	add	sp, #8
 8006058:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800605a:	7823      	ldrb	r3, [r4, #0]
 800605c:	9801      	ldr	r0, [sp, #4]
 800605e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006062:	2b10      	cmp	r3, #16
 8006064:	d109      	bne.n	800607a <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006066:	f10d 0103 	add.w	r1, sp, #3
 800606a:	f7ff fee9 	bl	8005e40 <lwip_netconn_is_err_msg>
 800606e:	2800      	cmp	r0, #0
 8006070:	d1d4      	bne.n	800601c <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8006072:	9801      	ldr	r0, [sp, #4]
 8006074:	f009 f984 	bl	800f380 <pbuf_free>
 8006078:	e7d0      	b.n	800601c <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 800607a:	f000 fb75 	bl	8006768 <netbuf_delete>
 800607e:	e7cd      	b.n	800601c <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006080:	9801      	ldr	r0, [sp, #4]
 8006082:	f10d 0103 	add.w	r1, sp, #3
 8006086:	f7ff fedb 	bl	8005e40 <lwip_netconn_is_err_msg>
 800608a:	4606      	mov	r6, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	d1d6      	bne.n	800603e <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8006090:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff ffba 	bl	800600c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8006098:	6868      	ldr	r0, [r5, #4]
 800609a:	b110      	cbz	r0, 80060a2 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 800609c:	f00a fd06 	bl	8010aac <tcp_abort>
            newconn->pcb.tcp = NULL;
 80060a0:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7ff ff76 	bl	8005f94 <netconn_free>
 80060a8:	e7c9      	b.n	800603e <netconn_drain+0x32>
	...

080060ac <accept_function>:
{
 80060ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ae:	460f      	mov	r7, r1
 80060b0:	4616      	mov	r6, r2
  if (conn == NULL) {
 80060b2:	4605      	mov	r5, r0
 80060b4:	b920      	cbnz	r0, 80060c0 <accept_function+0x14>
    return ERR_VAL;
 80060b6:	f06f 0405 	mvn.w	r4, #5
}
 80060ba:	4620      	mov	r0, r4
 80060bc:	b003      	add	sp, #12
 80060be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80060c0:	f100 0414 	add.w	r4, r0, #20
 80060c4:	4620      	mov	r0, r4
 80060c6:	f00e fb6c 	bl	80147a2 <sys_mbox_valid>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0f3      	beq.n	80060b6 <accept_function+0xa>
  if (newpcb == NULL) {
 80060ce:	b96f      	cbnz	r7, 80060ec <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80060d0:	492f      	ldr	r1, [pc, #188]	; (8006190 <accept_function+0xe4>)
 80060d2:	4620      	mov	r0, r4
 80060d4:	f00e fb28 	bl	8014728 <sys_mbox_trypost>
 80060d8:	4602      	mov	r2, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1eb      	bne.n	80060b6 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80060de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0e8      	beq.n	80060b6 <accept_function+0xa>
 80060e4:	4601      	mov	r1, r0
 80060e6:	4628      	mov	r0, r5
 80060e8:	4798      	blx	r3
 80060ea:	e7e4      	b.n	80060b6 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80060ec:	b136      	cbz	r6, 80060fc <accept_function+0x50>
 80060ee:	4b29      	ldr	r3, [pc, #164]	; (8006194 <accept_function+0xe8>)
 80060f0:	4929      	ldr	r1, [pc, #164]	; (8006198 <accept_function+0xec>)
 80060f2:	482a      	ldr	r0, [pc, #168]	; (800619c <accept_function+0xf0>)
 80060f4:	f240 222a 	movw	r2, #554	; 0x22a
 80060f8:	f016 fd16 	bl	801cb28 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 80060fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80060fe:	7828      	ldrb	r0, [r5, #0]
 8006100:	f7ff ff02 	bl	8005f08 <netconn_alloc>
  if (newconn == NULL) {
 8006104:	4606      	mov	r6, r0
 8006106:	b968      	cbnz	r0, 8006124 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006108:	4921      	ldr	r1, [pc, #132]	; (8006190 <accept_function+0xe4>)
 800610a:	4620      	mov	r0, r4
 800610c:	f00e fb0c 	bl	8014728 <sys_mbox_trypost>
 8006110:	4602      	mov	r2, r0
 8006112:	b920      	cbnz	r0, 800611e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006114:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006116:	b113      	cbz	r3, 800611e <accept_function+0x72>
 8006118:	4601      	mov	r1, r0
 800611a:	4628      	mov	r0, r5
 800611c:	4798      	blx	r3
    return ERR_MEM;
 800611e:	f04f 34ff 	mov.w	r4, #4294967295
 8006122:	e7ca      	b.n	80060ba <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8006124:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8006126:	f7ff fa83 	bl	8005630 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800612a:	4620      	mov	r0, r4
 800612c:	4631      	mov	r1, r6
 800612e:	f00e fafb 	bl	8014728 <sys_mbox_trypost>
 8006132:	4604      	mov	r4, r0
 8006134:	b318      	cbz	r0, 800617e <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8006136:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8006138:	9001      	str	r0, [sp, #4]
 800613a:	2100      	movs	r1, #0
 800613c:	f009 ff18 	bl	800ff70 <tcp_arg>
    tcp_recv(pcb, NULL);
 8006140:	9801      	ldr	r0, [sp, #4]
 8006142:	2100      	movs	r1, #0
 8006144:	f009 ff18 	bl	800ff78 <tcp_recv>
    tcp_sent(pcb, NULL);
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	2100      	movs	r1, #0
 800614c:	f009 ff2c 	bl	800ffa8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8006150:	2200      	movs	r2, #0
 8006152:	4611      	mov	r1, r2
 8006154:	9801      	ldr	r0, [sp, #4]
 8006156:	f009 ff5f 	bl	8010018 <tcp_poll>
    tcp_err(pcb, NULL);
 800615a:	2100      	movs	r1, #0
 800615c:	9801      	ldr	r0, [sp, #4]
 800615e:	f009 ff3b 	bl	800ffd8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8006162:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8006164:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8006168:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800616a:	9001      	str	r0, [sp, #4]
 800616c:	f00e fac6 	bl	80146fc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8006170:	9801      	ldr	r0, [sp, #4]
 8006172:	f00e fb1b 	bl	80147ac <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff ff0c 	bl	8005f94 <netconn_free>
    return ERR_MEM;
 800617c:	e7cf      	b.n	800611e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800617e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d09a      	beq.n	80060ba <accept_function+0xe>
 8006184:	4602      	mov	r2, r0
 8006186:	4601      	mov	r1, r0
 8006188:	4628      	mov	r0, r5
 800618a:	4798      	blx	r3
 800618c:	e795      	b.n	80060ba <accept_function+0xe>
 800618e:	bf00      	nop
 8006190:	0801fbc8 	.word	0x0801fbc8
 8006194:	0802b436 	.word	0x0802b436
 8006198:	0802b860 	.word	0x0802b860
 800619c:	0802aecf 	.word	0x0802aecf

080061a0 <lwip_netconn_do_delconn>:
{
 80061a0:	b538      	push	{r3, r4, r5, lr}
  enum netconn_state state = msg->conn->state;
 80061a2:	6803      	ldr	r3, [r0, #0]
 80061a4:	785d      	ldrb	r5, [r3, #1]
{
 80061a6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80061a8:	b16d      	cbz	r5, 80061c6 <lwip_netconn_do_delconn+0x26>
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d006      	beq.n	80061c2 <lwip_netconn_do_delconn+0x22>
 80061b4:	4b28      	ldr	r3, [pc, #160]	; (8006258 <lwip_netconn_do_delconn+0xb8>)
 80061b6:	4929      	ldr	r1, [pc, #164]	; (800625c <lwip_netconn_do_delconn+0xbc>)
 80061b8:	4829      	ldr	r0, [pc, #164]	; (8006260 <lwip_netconn_do_delconn+0xc0>)
 80061ba:	f240 425e 	movw	r2, #1118	; 0x45e
 80061be:	f016 fcb3 	bl	801cb28 <iprintf>
  if (((state != NETCONN_NONE) &&
 80061c2:	2d02      	cmp	r5, #2
 80061c4:	d121      	bne.n	800620a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 80061c6:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 80061c8:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 80061ca:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 80061cc:	f7ff ff1e 	bl	800600c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	6850      	ldr	r0, [r2, #4]
 80061d4:	b160      	cbz	r0, 80061f0 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80061d6:	7813      	ldrb	r3, [r2, #0]
 80061d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d027      	beq.n	8006230 <lwip_netconn_do_delconn+0x90>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d102      	bne.n	80061ea <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 80061e4:	64c5      	str	r5, [r0, #76]	; 0x4c
          udp_remove(msg->conn->pcb.udp);
 80061e6:	f00e f941 	bl	801446c <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061f4:	b113      	cbz	r3, 80061fc <lwip_netconn_do_delconn+0x5c>
 80061f6:	2200      	movs	r2, #0
 80061f8:	4611      	mov	r1, r2
 80061fa:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006200:	b15b      	cbz	r3, 800621a <lwip_netconn_do_delconn+0x7a>
 8006202:	2200      	movs	r2, #0
 8006204:	2102      	movs	r1, #2
 8006206:	4798      	blx	r3
 8006208:	e007      	b.n	800621a <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 800620a:	2d03      	cmp	r5, #3
 800620c:	d103      	bne.n	8006216 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	7f1b      	ldrb	r3, [r3, #28]
 8006212:	075b      	lsls	r3, r3, #29
 8006214:	d4d7      	bmi.n	80061c6 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8006216:	23fb      	movs	r3, #251	; 0xfb
 8006218:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	300c      	adds	r0, #12
 800621e:	f00e fb00 	bl	8014822 <sys_sem_valid>
 8006222:	b1c0      	cbz	r0, 8006256 <lwip_netconn_do_delconn+0xb6>
    TCPIP_APIMSG_ACK(msg);
 8006224:	6820      	ldr	r0, [r4, #0]
}
 8006226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TCPIP_APIMSG_ACK(msg);
 800622a:	300c      	adds	r0, #12
 800622c:	f00e baf3 	b.w	8014816 <sys_sem_signal>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006230:	6a13      	ldr	r3, [r2, #32]
 8006232:	b133      	cbz	r3, 8006242 <lwip_netconn_do_delconn+0xa2>
 8006234:	4b08      	ldr	r3, [pc, #32]	; (8006258 <lwip_netconn_do_delconn+0xb8>)
 8006236:	490b      	ldr	r1, [pc, #44]	; (8006264 <lwip_netconn_do_delconn+0xc4>)
 8006238:	4809      	ldr	r0, [pc, #36]	; (8006260 <lwip_netconn_do_delconn+0xc0>)
 800623a:	f240 4294 	movw	r2, #1172	; 0x494
 800623e:	f016 fc73 	bl	801cb28 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	2304      	movs	r3, #4
 8006246:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006248:	2303      	movs	r3, #3
 800624a:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800624c:	6204      	str	r4, [r0, #32]
}
 800624e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          lwip_netconn_do_close_internal(msg->conn);
 8006252:	f7ff bb87 	b.w	8005964 <lwip_netconn_do_close_internal>
}
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	0802b436 	.word	0x0802b436
 800625c:	0802b887 	.word	0x0802b887
 8006260:	0802aecf 	.word	0x0802aecf
 8006264:	0802b89b 	.word	0x0802b89b

08006268 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006268:	6803      	ldr	r3, [r0, #0]
{
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800626e:	6858      	ldr	r0, [r3, #4]
 8006270:	b1b0      	cbz	r0, 80062a0 <lwip_netconn_do_bind+0x38>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006278:	2b10      	cmp	r3, #16
 800627a:	d00c      	beq.n	8006296 <lwip_netconn_do_bind+0x2e>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d10f      	bne.n	80062a0 <lwip_netconn_do_bind+0x38>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006280:	89a2      	ldrh	r2, [r4, #12]
 8006282:	68a1      	ldr	r1, [r4, #8]
 8006284:	f00d fd36 	bl	8013cf4 <udp_bind>
  msg->err = err;
 8006288:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800628a:	6820      	ldr	r0, [r4, #0]
}
 800628c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8006290:	300c      	adds	r0, #12
 8006292:	f00e bac0 	b.w	8014816 <sys_sem_signal>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006296:	89a2      	ldrh	r2, [r4, #12]
 8006298:	68a1      	ldr	r1, [r4, #8]
 800629a:	f009 fc57 	bl	800fb4c <tcp_bind>
        break;
 800629e:	e7f3      	b.n	8006288 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80062a0:	f06f 0005 	mvn.w	r0, #5
 80062a4:	e7f0      	b.n	8006288 <lwip_netconn_do_bind+0x20>
	...

080062a8 <lwip_netconn_do_connect>:
  if (msg->conn->pcb.tcp == NULL) {
 80062a8:	6803      	ldr	r3, [r0, #0]
{
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 80062ae:	6858      	ldr	r0, [r3, #4]
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d03c      	beq.n	800632e <lwip_netconn_do_connect+0x86>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80062ba:	2a10      	cmp	r2, #16
 80062bc:	d00c      	beq.n	80062d8 <lwip_netconn_do_connect+0x30>
 80062be:	2a20      	cmp	r2, #32
 80062c0:	d12b      	bne.n	800631a <lwip_netconn_do_connect+0x72>
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80062c2:	89a2      	ldrh	r2, [r4, #12]
 80062c4:	68a1      	ldr	r1, [r4, #8]
 80062c6:	f00d ffed 	bl	80142a4 <udp_connect>
  msg->err = err;
 80062ca:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 80062cc:	6820      	ldr	r0, [r4, #0]
}
 80062ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80062d2:	300c      	adds	r0, #12
 80062d4:	f00e ba9f 	b.w	8014816 <sys_sem_signal>
        if (msg->conn->state == NETCONN_CONNECT) {
 80062d8:	785a      	ldrb	r2, [r3, #1]
 80062da:	2a03      	cmp	r2, #3
 80062dc:	d02a      	beq.n	8006334 <lwip_netconn_do_connect+0x8c>
        } else if (msg->conn->state != NETCONN_NONE) {
 80062de:	bb62      	cbnz	r2, 800633a <lwip_netconn_do_connect+0x92>
          setup_tcp(msg->conn);
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f9a5 	bl	8005630 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80062e6:	6820      	ldr	r0, [r4, #0]
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <lwip_netconn_do_connect+0x98>)
 80062ea:	89a2      	ldrh	r2, [r4, #12]
 80062ec:	68a1      	ldr	r1, [r4, #8]
 80062ee:	6840      	ldr	r0, [r0, #4]
 80062f0:	f00a fd44 	bl	8010d7c <tcp_connect>
          if (err == ERR_OK) {
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1e8      	bne.n	80062ca <lwip_netconn_do_connect+0x22>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	7f13      	ldrb	r3, [r2, #28]
            msg->conn->state = NETCONN_CONNECT;
 80062fc:	2103      	movs	r1, #3
 80062fe:	7051      	strb	r1, [r2, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8006300:	0799      	lsls	r1, r3, #30
 8006302:	d505      	bpl.n	8006310 <lwip_netconn_do_connect+0x68>
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	7713      	strb	r3, [r2, #28]
              err = ERR_INPROGRESS;
 800630a:	f06f 0004 	mvn.w	r0, #4
 800630e:	e7dc      	b.n	80062ca <lwip_netconn_do_connect+0x22>
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	7713      	strb	r3, [r2, #28]
              msg->conn->current_msg = msg;
 8006316:	6214      	str	r4, [r2, #32]
}
 8006318:	bd10      	pop	{r4, pc}
        LWIP_ERROR("Invalid netconn type", 0, do {
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <lwip_netconn_do_connect+0x9c>)
 800631c:	490a      	ldr	r1, [pc, #40]	; (8006348 <lwip_netconn_do_connect+0xa0>)
 800631e:	480b      	ldr	r0, [pc, #44]	; (800634c <lwip_netconn_do_connect+0xa4>)
 8006320:	f240 527d 	movw	r2, #1405	; 0x57d
 8006324:	f016 fc00 	bl	801cb28 <iprintf>
 8006328:	f06f 0005 	mvn.w	r0, #5
        break;
 800632c:	e7cd      	b.n	80062ca <lwip_netconn_do_connect+0x22>
    err = ERR_CLSD;
 800632e:	f06f 000e 	mvn.w	r0, #14
 8006332:	e7ca      	b.n	80062ca <lwip_netconn_do_connect+0x22>
          err = ERR_ALREADY;
 8006334:	f06f 0008 	mvn.w	r0, #8
 8006338:	e7c7      	b.n	80062ca <lwip_netconn_do_connect+0x22>
          err = ERR_ISCONN;
 800633a:	f06f 0009 	mvn.w	r0, #9
 800633e:	e7c4      	b.n	80062ca <lwip_netconn_do_connect+0x22>
 8006340:	08005675 	.word	0x08005675
 8006344:	0802b436 	.word	0x0802b436
 8006348:	0802b8b6 	.word	0x0802b8b6
 800634c:	0802aecf 	.word	0x0802aecf

08006350 <lwip_netconn_do_disconnect>:
{
 8006350:	b510      	push	{r4, lr}
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8006352:	6802      	ldr	r2, [r0, #0]
 8006354:	7813      	ldrb	r3, [r2, #0]
 8006356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800635a:	2b20      	cmp	r3, #32
{
 800635c:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800635e:	d10a      	bne.n	8006376 <lwip_netconn_do_disconnect+0x26>
    udp_disconnect(msg->conn->pcb.udp);
 8006360:	6850      	ldr	r0, [r2, #4]
 8006362:	f00e f82b 	bl	80143bc <udp_disconnect>
    msg->err = ERR_OK;
 8006366:	2300      	movs	r3, #0
  TCPIP_APIMSG_ACK(msg);
 8006368:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_VAL;
 800636a:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800636c:	300c      	adds	r0, #12
}
 800636e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8006372:	f00e ba50 	b.w	8014816 <sys_sem_signal>
    msg->err = ERR_VAL;
 8006376:	23fa      	movs	r3, #250	; 0xfa
 8006378:	e7f6      	b.n	8006368 <lwip_netconn_do_disconnect+0x18>
	...

0800637c <lwip_netconn_do_listen>:
{
 800637c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (msg->conn->pcb.tcp != NULL) {
 800637e:	6801      	ldr	r1, [r0, #0]
{
 8006380:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006382:	6848      	ldr	r0, [r1, #4]
 8006384:	2800      	cmp	r0, #0
 8006386:	d07d      	beq.n	8006484 <lwip_netconn_do_listen+0x108>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006388:	780b      	ldrb	r3, [r1, #0]
 800638a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800638e:	2b10      	cmp	r3, #16
 8006390:	d17a      	bne.n	8006488 <lwip_netconn_do_listen+0x10c>
      if (msg->conn->state == NETCONN_NONE) {
 8006392:	784b      	ldrb	r3, [r1, #1]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d171      	bne.n	800647c <lwip_netconn_do_listen+0x100>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800639c:	b11b      	cbz	r3, 80063a6 <lwip_netconn_do_listen+0x2a>
          err = ERR_VAL;
 800639e:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 80063a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80063a4:	e058      	b.n	8006458 <lwip_netconn_do_listen+0xdc>
          if (ip_addr_cmp(&msg->conn->pcb.ip->local_ip, IP6_ADDR_ANY) &&
 80063a6:	4a39      	ldr	r2, [pc, #228]	; (800648c <lwip_netconn_do_listen+0x110>)
 80063a8:	7d05      	ldrb	r5, [r0, #20]
 80063aa:	7d17      	ldrb	r7, [r2, #20]
 80063ac:	42af      	cmp	r7, r5
 80063ae:	d121      	bne.n	80063f4 <lwip_netconn_do_listen+0x78>
 80063b0:	2f06      	cmp	r7, #6
 80063b2:	6806      	ldr	r6, [r0, #0]
 80063b4:	6815      	ldr	r5, [r2, #0]
 80063b6:	d158      	bne.n	800646a <lwip_netconn_do_listen+0xee>
 80063b8:	42ae      	cmp	r6, r5
 80063ba:	d113      	bne.n	80063e4 <lwip_netconn_do_listen+0x68>
 80063bc:	6846      	ldr	r6, [r0, #4]
 80063be:	6855      	ldr	r5, [r2, #4]
 80063c0:	42ae      	cmp	r6, r5
 80063c2:	d10f      	bne.n	80063e4 <lwip_netconn_do_listen+0x68>
 80063c4:	6886      	ldr	r6, [r0, #8]
 80063c6:	6895      	ldr	r5, [r2, #8]
 80063c8:	42ae      	cmp	r6, r5
 80063ca:	d10b      	bne.n	80063e4 <lwip_netconn_do_listen+0x68>
 80063cc:	68c5      	ldr	r5, [r0, #12]
 80063ce:	68d3      	ldr	r3, [r2, #12]
 80063d0:	429d      	cmp	r5, r3
 80063d2:	d106      	bne.n	80063e2 <lwip_netconn_do_listen+0x66>
 80063d4:	7c03      	ldrb	r3, [r0, #16]
 80063d6:	7c12      	ldrb	r2, [r2, #16]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bf14      	ite	ne
 80063dc:	2300      	movne	r3, #0
 80063de:	2301      	moveq	r3, #1
 80063e0:	e000      	b.n	80063e4 <lwip_netconn_do_listen+0x68>
 80063e2:	2300      	movs	r3, #0
 80063e4:	b133      	cbz	r3, 80063f4 <lwip_netconn_do_listen+0x78>
 80063e6:	7f0b      	ldrb	r3, [r1, #28]
 80063e8:	069b      	lsls	r3, r3, #26
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
 80063ea:	bf5e      	ittt	pl
 80063ec:	232e      	movpl	r3, #46	; 0x2e
 80063ee:	7503      	strbpl	r3, [r0, #20]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
 80063f0:	f880 302c 	strbpl.w	r3, [r0, #44]	; 0x2c
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80063f4:	f10d 0207 	add.w	r2, sp, #7
 80063f8:	21ff      	movs	r1, #255	; 0xff
 80063fa:	f009 fca1 	bl	800fd40 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 80063fe:	4605      	mov	r5, r0
 8006400:	b350      	cbz	r0, 8006458 <lwip_netconn_do_listen+0xdc>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006402:	6820      	ldr	r0, [r4, #0]
 8006404:	3010      	adds	r0, #16
 8006406:	f00e f9cc 	bl	80147a2 <sys_mbox_valid>
 800640a:	b138      	cbz	r0, 800641c <lwip_netconn_do_listen+0xa0>
              sys_mbox_free(&msg->conn->recvmbox);
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	3010      	adds	r0, #16
 8006410:	f00e f974 	bl	80146fc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	3010      	adds	r0, #16
 8006418:	f00e f9c8 	bl	80147ac <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800641c:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800641e:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006420:	3014      	adds	r0, #20
            err = ERR_OK;
 8006422:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006426:	f00e f9bc 	bl	80147a2 <sys_mbox_valid>
 800642a:	b930      	cbnz	r0, 800643a <lwip_netconn_do_listen+0xbe>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	2106      	movs	r1, #6
 8006430:	3014      	adds	r0, #20
 8006432:	f00e f953 	bl	80146dc <sys_mbox_new>
 8006436:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800643a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800643e:	b9b3      	cbnz	r3, 800646e <lwip_netconn_do_listen+0xf2>
              msg->conn->state = NETCONN_LISTEN;
 8006440:	6821      	ldr	r1, [r4, #0]
 8006442:	2302      	movs	r3, #2
 8006444:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8006446:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006448:	4628      	mov	r0, r5
 800644a:	f009 fd91 	bl	800ff70 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	490f      	ldr	r1, [pc, #60]	; (8006490 <lwip_netconn_do_listen+0x114>)
 8006452:	6858      	ldr	r0, [r3, #4]
 8006454:	f009 fdd8 	bl	8010008 <tcp_accept>
  TCPIP_APIMSG_ACK(msg);
 8006458:	6820      	ldr	r0, [r4, #0]
  msg->err = err;
 800645a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800645e:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8006460:	300c      	adds	r0, #12
 8006462:	f00e f9d8 	bl	8014816 <sys_sem_signal>
}
 8006466:	b003      	add	sp, #12
 8006468:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ip_addr_cmp(&msg->conn->pcb.ip->local_ip, IP6_ADDR_ANY) &&
 800646a:	42ae      	cmp	r6, r5
 800646c:	e7b5      	b.n	80063da <lwip_netconn_do_listen+0x5e>
              tcp_close(lpcb);
 800646e:	4628      	mov	r0, r5
 8006470:	f00a f96e 	bl	8010750 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	e7ed      	b.n	8006458 <lwip_netconn_do_listen+0xdc>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800647c:	2b02      	cmp	r3, #2
 800647e:	d101      	bne.n	8006484 <lwip_netconn_do_listen+0x108>
        err = ERR_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e78d      	b.n	80063a0 <lwip_netconn_do_listen+0x24>
        err = ERR_CONN;
 8006484:	23f5      	movs	r3, #245	; 0xf5
 8006486:	e78b      	b.n	80063a0 <lwip_netconn_do_listen+0x24>
      err = ERR_ARG;
 8006488:	23f0      	movs	r3, #240	; 0xf0
 800648a:	e789      	b.n	80063a0 <lwip_netconn_do_listen+0x24>
 800648c:	0801fc54 	.word	0x0801fc54
 8006490:	080060ad 	.word	0x080060ad

08006494 <lwip_netconn_do_send>:
{
 8006494:	b510      	push	{r4, lr}
 8006496:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 8006498:	6800      	ldr	r0, [r0, #0]
 800649a:	f7fe feb7 	bl	800520c <netconn_err>
  if (err == ERR_OK) {
 800649e:	bb00      	cbnz	r0, 80064e2 <lwip_netconn_do_send+0x4e>
    if (msg->conn->pcb.tcp != NULL) {
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	6858      	ldr	r0, [r3, #4]
 80064a4:	b320      	cbz	r0, 80064f0 <lwip_netconn_do_send+0x5c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d11f      	bne.n	80064f0 <lwip_netconn_do_send+0x5c>
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80064b0:	68a1      	ldr	r1, [r4, #8]
 80064b2:	7f0b      	ldrb	r3, [r1, #28]
 80064b4:	688a      	ldr	r2, [r1, #8]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d10d      	bne.n	80064d6 <lwip_netconn_do_send+0x42>
 80064ba:	b92a      	cbnz	r2, 80064c8 <lwip_netconn_do_send+0x34>
 80064bc:	68cb      	ldr	r3, [r1, #12]
 80064be:	b91b      	cbnz	r3, 80064c8 <lwip_netconn_do_send+0x34>
 80064c0:	690b      	ldr	r3, [r1, #16]
 80064c2:	b90b      	cbnz	r3, 80064c8 <lwip_netconn_do_send+0x34>
 80064c4:	694b      	ldr	r3, [r1, #20]
 80064c6:	b14b      	cbz	r3, 80064dc <lwip_netconn_do_send+0x48>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80064c8:	8c0b      	ldrh	r3, [r1, #32]
 80064ca:	f101 0208 	add.w	r2, r1, #8
 80064ce:	6809      	ldr	r1, [r1, #0]
 80064d0:	f00d fe4a 	bl	8014168 <udp_sendto>
 80064d4:	e005      	b.n	80064e2 <lwip_netconn_do_send+0x4e>
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80064d6:	b10a      	cbz	r2, 80064dc <lwip_netconn_do_send+0x48>
 80064d8:	2b2e      	cmp	r3, #46	; 0x2e
 80064da:	d1f5      	bne.n	80064c8 <lwip_netconn_do_send+0x34>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80064dc:	6809      	ldr	r1, [r1, #0]
 80064de:	f00d feb1 	bl	8014244 <udp_send>
  msg->err = err;
 80064e2:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 80064e4:	6820      	ldr	r0, [r4, #0]
}
 80064e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80064ea:	300c      	adds	r0, #12
 80064ec:	f00e b993 	b.w	8014816 <sys_sem_signal>
      err = ERR_CONN;
 80064f0:	f06f 000a 	mvn.w	r0, #10
 80064f4:	e7f5      	b.n	80064e2 <lwip_netconn_do_send+0x4e>

080064f6 <lwip_netconn_do_recv>:
{
 80064f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80064fc:	6803      	ldr	r3, [r0, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
{
 8006500:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006502:	b192      	cbz	r2, 800652a <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650a:	2b10      	cmp	r3, #16
 800650c:	d10d      	bne.n	800652a <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 800650e:	6885      	ldr	r5, [r0, #8]
 8006510:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006514:	42bd      	cmp	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	462e      	mov	r6, r5
 800651a:	bf28      	it	cs
 800651c:	463e      	movcs	r6, r7
 800651e:	6858      	ldr	r0, [r3, #4]
 8006520:	b2b1      	uxth	r1, r6
 8006522:	f009 fccd 	bl	800fec0 <tcp_recved>
      } while (remaining != 0);
 8006526:	1bad      	subs	r5, r5, r6
 8006528:	d1f4      	bne.n	8006514 <lwip_netconn_do_recv+0x1e>
  TCPIP_APIMSG_ACK(msg);
 800652a:	6820      	ldr	r0, [r4, #0]
}
 800652c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 8006530:	300c      	adds	r0, #12
 8006532:	f00e b970 	b.w	8014816 <sys_sem_signal>
	...

08006538 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006538:	b510      	push	{r4, lr}
 800653a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800653c:	6800      	ldr	r0, [r0, #0]
 800653e:	f7fe fe65 	bl	800520c <netconn_err>
  if (err == ERR_OK) {
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	bb20      	cbnz	r0, 8006590 <lwip_netconn_do_write+0x58>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800654c:	2a10      	cmp	r2, #16
 800654e:	d11d      	bne.n	800658c <lwip_netconn_do_write+0x54>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006550:	785a      	ldrb	r2, [r3, #1]
 8006552:	bb22      	cbnz	r2, 800659e <lwip_netconn_do_write+0x66>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	b32a      	cbz	r2, 80065a4 <lwip_netconn_do_write+0x6c>
        msg->conn->state = NETCONN_WRITE;
 8006558:	2201      	movs	r2, #1
 800655a:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	b133      	cbz	r3, 800656e <lwip_netconn_do_write+0x36>
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <lwip_netconn_do_write+0x74>)
 8006562:	4913      	ldr	r1, [pc, #76]	; (80065b0 <lwip_netconn_do_write+0x78>)
 8006564:	4813      	ldr	r0, [pc, #76]	; (80065b4 <lwip_netconn_do_write+0x7c>)
 8006566:	f240 7223 	movw	r2, #1827	; 0x723
 800656a:	f016 fadd 	bl	801cb28 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800656e:	6963      	ldr	r3, [r4, #20]
 8006570:	b933      	cbnz	r3, 8006580 <lwip_netconn_do_write+0x48>
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <lwip_netconn_do_write+0x74>)
 8006574:	4910      	ldr	r1, [pc, #64]	; (80065b8 <lwip_netconn_do_write+0x80>)
 8006576:	480f      	ldr	r0, [pc, #60]	; (80065b4 <lwip_netconn_do_write+0x7c>)
 8006578:	f240 7224 	movw	r2, #1828	; 0x724
 800657c:	f016 fad4 	bl	801cb28 <iprintf>
        msg->conn->current_msg = msg;
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	6204      	str	r4, [r0, #32]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8006584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lwip_netconn_do_writemore(msg->conn);
 8006588:	f7ff b8ca 	b.w	8005720 <lwip_netconn_do_writemore>
      err = ERR_VAL;
 800658c:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8006590:	7120      	strb	r0, [r4, #4]
}
 8006592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8006596:	f103 000c 	add.w	r0, r3, #12
 800659a:	f00e b93c 	b.w	8014816 <sys_sem_signal>
        err = ERR_INPROGRESS;
 800659e:	f06f 0004 	mvn.w	r0, #4
 80065a2:	e7f5      	b.n	8006590 <lwip_netconn_do_write+0x58>
        err = ERR_CONN;
 80065a4:	f06f 000a 	mvn.w	r0, #10
 80065a8:	e7f2      	b.n	8006590 <lwip_netconn_do_write+0x58>
 80065aa:	bf00      	nop
 80065ac:	0802b436 	.word	0x0802b436
 80065b0:	0802b89b 	.word	0x0802b89b
 80065b4:	0802aecf 	.word	0x0802aecf
 80065b8:	0802b8cb 	.word	0x0802b8cb

080065bc <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 80065bc:	b538      	push	{r3, r4, r5, lr}
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 80065be:	6805      	ldr	r5, [r0, #0]
 80065c0:	686a      	ldr	r2, [r5, #4]
{
 80065c2:	4604      	mov	r4, r0
  if (msg->conn->pcb.ip != NULL) {
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	d03c      	beq.n	8006642 <lwip_netconn_do_getaddr+0x86>
    if (msg->msg.ad.local) {
 80065c8:	7c01      	ldrb	r1, [r0, #16]
 80065ca:	6883      	ldr	r3, [r0, #8]
 80065cc:	b301      	cbz	r1, 8006610 <lwip_netconn_do_getaddr+0x54>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80065ce:	7d10      	ldrb	r0, [r2, #20]
 80065d0:	7518      	strb	r0, [r3, #20]
 80065d2:	2806      	cmp	r0, #6
 80065d4:	6810      	ldr	r0, [r2, #0]
 80065d6:	6018      	str	r0, [r3, #0]
 80065d8:	d115      	bne.n	8006606 <lwip_netconn_do_getaddr+0x4a>
 80065da:	6850      	ldr	r0, [r2, #4]
 80065dc:	6058      	str	r0, [r3, #4]
 80065de:	6890      	ldr	r0, [r2, #8]
 80065e0:	6098      	str	r0, [r3, #8]
 80065e2:	68d0      	ldr	r0, [r2, #12]
 80065e4:	60d8      	str	r0, [r3, #12]
 80065e6:	7c10      	ldrb	r0, [r2, #16]
 80065e8:	7418      	strb	r0, [r3, #16]
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	7123      	strb	r3, [r4, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80065ee:	782b      	ldrb	r3, [r5, #0]
 80065f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d02f      	beq.n	8006658 <lwip_netconn_do_getaddr+0x9c>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d139      	bne.n	8006670 <lwip_netconn_do_getaddr+0xb4>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 80065fc:	b1e9      	cbz	r1, 800663a <lwip_netconn_do_getaddr+0x7e>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 80065fe:	68e3      	ldr	r3, [r4, #12]
 8006600:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
        } else {
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e01f      	b.n	8006646 <lwip_netconn_do_getaddr+0x8a>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8006606:	2000      	movs	r0, #0
 8006608:	e9c3 0002 	strd	r0, r0, [r3, #8]
 800660c:	6058      	str	r0, [r3, #4]
 800660e:	e7eb      	b.n	80065e8 <lwip_netconn_do_getaddr+0x2c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8006610:	f892 002c 	ldrb.w	r0, [r2, #44]	; 0x2c
 8006614:	7518      	strb	r0, [r3, #20]
 8006616:	2806      	cmp	r0, #6
 8006618:	6990      	ldr	r0, [r2, #24]
 800661a:	6018      	str	r0, [r3, #0]
 800661c:	d108      	bne.n	8006630 <lwip_netconn_do_getaddr+0x74>
 800661e:	69d0      	ldr	r0, [r2, #28]
 8006620:	6058      	str	r0, [r3, #4]
 8006622:	6a10      	ldr	r0, [r2, #32]
 8006624:	6098      	str	r0, [r3, #8]
 8006626:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8006628:	60d8      	str	r0, [r3, #12]
 800662a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800662e:	e7db      	b.n	80065e8 <lwip_netconn_do_getaddr+0x2c>
 8006630:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006634:	6059      	str	r1, [r3, #4]
 8006636:	7419      	strb	r1, [r3, #16]
 8006638:	e7d7      	b.n	80065ea <lwip_netconn_do_getaddr+0x2e>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800663a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800663e:	075b      	lsls	r3, r3, #29
 8006640:	d407      	bmi.n	8006652 <lwip_netconn_do_getaddr+0x96>
            msg->err = ERR_CONN;
 8006642:	23f5      	movs	r3, #245	; 0xf5
 8006644:	7123      	strb	r3, [r4, #4]
        break;
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8006646:	6820      	ldr	r0, [r4, #0]
}
 8006648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 800664c:	300c      	adds	r0, #12
 800664e:	f00e b8e2 	b.w	8014816 <sys_sem_signal>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8006656:	e7d4      	b.n	8006602 <lwip_netconn_do_getaddr+0x46>
        if ((msg->msg.ad.local == 0) &&
 8006658:	b931      	cbnz	r1, 8006668 <lwip_netconn_do_getaddr+0xac>
 800665a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d9ef      	bls.n	8006642 <lwip_netconn_do_getaddr+0x86>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8006662:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006666:	e000      	b.n	800666a <lwip_netconn_do_getaddr+0xae>
 8006668:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800666a:	68e2      	ldr	r2, [r4, #12]
 800666c:	8013      	strh	r3, [r2, #0]
 800666e:	e7ea      	b.n	8006646 <lwip_netconn_do_getaddr+0x8a>
        LWIP_ASSERT("invalid netconn_type", 0);
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <lwip_netconn_do_getaddr+0xc4>)
 8006672:	4904      	ldr	r1, [pc, #16]	; (8006684 <lwip_netconn_do_getaddr+0xc8>)
 8006674:	4804      	ldr	r0, [pc, #16]	; (8006688 <lwip_netconn_do_getaddr+0xcc>)
 8006676:	f240 727d 	movw	r2, #1917	; 0x77d
 800667a:	f016 fa55 	bl	801cb28 <iprintf>
        break;
 800667e:	e7e2      	b.n	8006646 <lwip_netconn_do_getaddr+0x8a>
 8006680:	0802b436 	.word	0x0802b436
 8006684:	0802b8df 	.word	0x0802b8df
 8006688:	0802aecf 	.word	0x0802aecf

0800668c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800668c:	b510      	push	{r4, lr}
 800668e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006690:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006692:	6843      	ldr	r3, [r0, #4]
 8006694:	b163      	cbz	r3, 80066b0 <lwip_netconn_do_close+0x24>
 8006696:	7803      	ldrb	r3, [r0, #0]
 8006698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669c:	2b10      	cmp	r3, #16
 800669e:	d107      	bne.n	80066b0 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80066a0:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80066a2:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80066a4:	2a03      	cmp	r2, #3
 80066a6:	d001      	beq.n	80066ac <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d001      	beq.n	80066b0 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d106      	bne.n	80066be <lwip_netconn_do_close+0x32>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80066b0:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80066b2:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80066b4:	300c      	adds	r0, #12
}
 80066b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80066ba:	f00e b8ac 	b.w	8014816 <sys_sem_signal>
    } else if (state == NETCONN_WRITE) {
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 80066c2:	23fb      	movs	r3, #251	; 0xfb
 80066c4:	e7f5      	b.n	80066b2 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80066c6:	07d3      	lsls	r3, r2, #31
 80066c8:	d501      	bpl.n	80066ce <lwip_netconn_do_close+0x42>
        netconn_drain(msg->conn);
 80066ca:	f7ff fc9f 	bl	800600c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	b133      	cbz	r3, 80066e2 <lwip_netconn_do_close+0x56>
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <lwip_netconn_do_close+0x68>)
 80066d6:	4908      	ldr	r1, [pc, #32]	; (80066f8 <lwip_netconn_do_close+0x6c>)
 80066d8:	4808      	ldr	r0, [pc, #32]	; (80066fc <lwip_netconn_do_close+0x70>)
 80066da:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80066de:	f016 fa23 	bl	801cb28 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80066e2:	6820      	ldr	r0, [r4, #0]
 80066e4:	2304      	movs	r3, #4
 80066e6:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 80066e8:	6204      	str	r4, [r0, #32]
}
 80066ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lwip_netconn_do_close_internal(msg->conn);
 80066ee:	f7ff b939 	b.w	8005964 <lwip_netconn_do_close_internal>
 80066f2:	bf00      	nop
 80066f4:	0802b436 	.word	0x0802b436
 80066f8:	0802b89b 	.word	0x0802b89b
 80066fc:	0802aecf 	.word	0x0802aecf

08006700 <lwip_netconn_do_join_leave_group_netif>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group_netif(void *m)
{
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;
  struct netif *netif;

  netif = netif_get_by_index(msg->msg.jl.if_idx);
 8006704:	7c00      	ldrb	r0, [r0, #16]
 8006706:	f008 fd53 	bl	800f1b0 <netif_get_by_index>
  if (netif == NULL) {
 800670a:	b910      	cbnz	r0, 8006712 <lwip_netconn_do_join_leave_group_netif+0x12>
    msg->err = ERR_IF;
 800670c:	23f4      	movs	r3, #244	; 0xf4
#endif /* LWIP_IGMP */
      }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800670e:	7123      	strb	r3, [r4, #4]
 8006710:	e011      	b.n	8006736 <lwip_netconn_do_join_leave_group_netif+0x36>
  msg->err = ERR_CONN;
 8006712:	23f5      	movs	r3, #245	; 0xf5
 8006714:	7123      	strb	r3, [r4, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	b162      	cbz	r2, 8006736 <lwip_netconn_do_join_leave_group_netif+0x36>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006722:	2a20      	cmp	r2, #32
 8006724:	d110      	bne.n	8006748 <lwip_netconn_do_join_leave_group_netif+0x48>
      if (NETCONNTYPE_ISIPV6(msg->conn->type)) {
 8006726:	071b      	lsls	r3, r3, #28
 8006728:	d505      	bpl.n	8006736 <lwip_netconn_do_join_leave_group_netif+0x36>
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800672a:	7c63      	ldrb	r3, [r4, #17]
 800672c:	68a1      	ldr	r1, [r4, #8]
 800672e:	b943      	cbnz	r3, 8006742 <lwip_netconn_do_join_leave_group_netif+0x42>
          msg->err = mld6_joingroup_netif(netif,
 8006730:	f006 f8dc 	bl	800c8ec <mld6_joingroup_netif>
          msg->err = mld6_leavegroup_netif(netif,
 8006734:	7120      	strb	r0, [r4, #4]
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }

done:
  TCPIP_APIMSG_ACK(msg);
 8006736:	6820      	ldr	r0, [r4, #0]
}
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800673c:	300c      	adds	r0, #12
 800673e:	f00e b86a 	b.w	8014816 <sys_sem_signal>
          msg->err = mld6_leavegroup_netif(netif,
 8006742:	f006 f943 	bl	800c9cc <mld6_leavegroup_netif>
 8006746:	e7f5      	b.n	8006734 <lwip_netconn_do_join_leave_group_netif+0x34>
      msg->err = ERR_VAL;
 8006748:	23fa      	movs	r3, #250	; 0xfa
 800674a:	e7e0      	b.n	800670e <lwip_netconn_do_join_leave_group_netif+0xe>

0800674c <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800674c:	f100 0310 	add.w	r3, r0, #16
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
 8006754:	bf9d      	ittte	ls
 8006756:	4240      	negls	r0, r0
 8006758:	4b02      	ldrls	r3, [pc, #8]	; (8006764 <err_to_errno+0x18>)
 800675a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
 800675e:	2005      	movhi	r0, #5
}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	0801fbcc 	.word	0x0801fbcc

08006768 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8006768:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800676a:	4604      	mov	r4, r0
 800676c:	b160      	cbz	r0, 8006788 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800676e:	6800      	ldr	r0, [r0, #0]
 8006770:	b120      	cbz	r0, 800677c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8006772:	f008 fe05 	bl	800f380 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800677c:	4621      	mov	r1, r4
 800677e:	2006      	movs	r0, #6
  }
}
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8006784:	f008 ba8e 	b.w	800eca4 <memp_free>
}
 8006788:	bd10      	pop	{r4, pc}
	...

0800678c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800678c:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800678e:	4604      	mov	r4, r0
 8006790:	b938      	cbnz	r0, 80067a2 <netbuf_free+0x16>
  buf->p = buf->ptr = NULL;
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <netbuf_free+0x28>)
 8006798:	4907      	ldr	r1, [pc, #28]	; (80067b8 <netbuf_free+0x2c>)
 800679a:	4808      	ldr	r0, [pc, #32]	; (80067bc <netbuf_free+0x30>)
 800679c:	2281      	movs	r2, #129	; 0x81
 800679e:	f016 b9c3 	b.w	801cb28 <iprintf>
  if (buf->p != NULL) {
 80067a2:	6800      	ldr	r0, [r0, #0]
 80067a4:	b108      	cbz	r0, 80067aa <netbuf_free+0x1e>
    pbuf_free(buf->p);
 80067a6:	f008 fdeb 	bl	800f380 <pbuf_free>
  buf->p = buf->ptr = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e9c4 3300 	strd	r3, r3, [r4]
}
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	0802b8f4 	.word	0x0802b8f4
 80067b8:	0802b99c 	.word	0x0802b99c
 80067bc:	0802aecf 	.word	0x0802aecf

080067c0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	460e      	mov	r6, r1
 80067c4:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80067c6:	4604      	mov	r4, r0
 80067c8:	b940      	cbnz	r0, 80067dc <netbuf_ref+0x1c>
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <netbuf_ref+0x48>)
 80067cc:	490f      	ldr	r1, [pc, #60]	; (800680c <netbuf_ref+0x4c>)
 80067ce:	4810      	ldr	r0, [pc, #64]	; (8006810 <netbuf_ref+0x50>)
 80067d0:	2299      	movs	r2, #153	; 0x99
 80067d2:	f016 f9a9 	bl	801cb28 <iprintf>
 80067d6:	f06f 000f 	mvn.w	r0, #15
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
 80067da:	bd70      	pop	{r4, r5, r6, pc}
  if (buf->p != NULL) {
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	b108      	cbz	r0, 80067e4 <netbuf_ref+0x24>
    pbuf_free(buf->p);
 80067e0:	f008 fdce 	bl	800f380 <pbuf_free>
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80067e4:	2241      	movs	r2, #65	; 0x41
 80067e6:	2100      	movs	r1, #0
 80067e8:	204a      	movs	r0, #74	; 0x4a
 80067ea:	f008 fe31 	bl	800f450 <pbuf_alloc>
 80067ee:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 80067f0:	b918      	cbnz	r0, 80067fa <netbuf_ref+0x3a>
    buf->ptr = NULL;
 80067f2:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	e7ef      	b.n	80067da <netbuf_ref+0x1a>
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80067fa:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 80067fc:	8105      	strh	r5, [r0, #8]
 80067fe:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 8006800:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 8006802:	2000      	movs	r0, #0
 8006804:	e7e9      	b.n	80067da <netbuf_ref+0x1a>
 8006806:	bf00      	nop
 8006808:	0802b8f4 	.word	0x0802b8f4
 800680c:	0802b9b5 	.word	0x0802b9b5
 8006810:	0802aecf 	.word	0x0802aecf

08006814 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8006814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8006818:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006890 <alloc_socket+0x7c>
{
 800681c:	4607      	mov	r7, r0
 800681e:	460e      	mov	r6, r1
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8006820:	2500      	movs	r5, #0
 8006822:	46c3      	mov	fp, r8
    if (!sockets[i].conn) {
 8006824:	012c      	lsls	r4, r5, #4
    SYS_ARCH_PROTECT(lev);
 8006826:	f00e f837 	bl	8014898 <sys_arch_protect>
    if (!sockets[i].conn) {
 800682a:	f854 a008 	ldr.w	sl, [r4, r8]
 800682e:	f1ba 0f00 	cmp.w	sl, #0
 8006832:	d11f      	bne.n	8006874 <alloc_socket+0x60>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8006834:	eb08 0904 	add.w	r9, r8, r4
 8006838:	f848 7004 	str.w	r7, [r8, r4]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800683c:	f00e f838 	bl	80148b0 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8006840:	f899 300e 	ldrb.w	r3, [r9, #14]
      sockets[i].lastdata.pbuf = NULL;
 8006844:	f8c9 a004 	str.w	sl, [r9, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8006848:	b133      	cbz	r3, 8006858 <alloc_socket+0x44>
 800684a:	4b0e      	ldr	r3, [pc, #56]	; (8006884 <alloc_socket+0x70>)
 800684c:	490e      	ldr	r1, [pc, #56]	; (8006888 <alloc_socket+0x74>)
 800684e:	480f      	ldr	r0, [pc, #60]	; (800688c <alloc_socket+0x78>)
 8006850:	f240 220e 	movw	r2, #526	; 0x20e
 8006854:	f016 f968 	bl	801cb28 <iprintf>
      sockets[i].rcvevent   = 0;
 8006858:	445c      	add	r4, fp
 800685a:	2200      	movs	r2, #0
 800685c:	8122      	strh	r2, [r4, #8]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800685e:	783b      	ldrb	r3, [r7, #0]
      sockets[i].errevent   = 0;
 8006860:	81a2      	strh	r2, [r4, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8006862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006866:	2b10      	cmp	r3, #16
 8006868:	bf18      	it	ne
 800686a:	2601      	movne	r6, #1
 800686c:	8166      	strh	r6, [r4, #10]
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
}
 800686e:	4628      	mov	r0, r5
 8006870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8006874:	3501      	adds	r5, #1
    SYS_ARCH_UNPROTECT(lev);
 8006876:	f00e f81b 	bl	80148b0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800687a:	2d04      	cmp	r5, #4
 800687c:	d1d2      	bne.n	8006824 <alloc_socket+0x10>
  return -1;
 800687e:	f04f 35ff 	mov.w	r5, #4294967295
 8006882:	e7f4      	b.n	800686e <alloc_socket+0x5a>
 8006884:	0802ba85 	.word	0x0802ba85
 8006888:	0802baf0 	.word	0x0802baf0
 800688c:	0802aecf 	.word	0x0802aecf
 8006890:	200068bc 	.word	0x200068bc

08006894 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8006898:	f00d fffe 	bl	8014898 <sys_arch_protect>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <lwip_link_select_cb+0x24>)
 800689e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a0:	6022      	str	r2, [r4, #0]
  if (select_cb_list != NULL) {
 80068a2:	b102      	cbz	r2, 80068a6 <lwip_link_select_cb+0x12>
    select_cb_list->prev = select_cb;
 80068a4:	6054      	str	r4, [r2, #4]
  }
  select_cb_list = select_cb;
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
 80068a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  select_cb_list = select_cb;
 80068a8:	641c      	str	r4, [r3, #64]	; 0x40
  select_cb_ctr++;
 80068aa:	3201      	adds	r2, #1
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
}
 80068ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  select_cb_ctr++;
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80068b2:	f00d bffd 	b.w	80148b0 <sys_arch_unprotect>
 80068b6:	bf00      	nop
 80068b8:	200068bc 	.word	0x200068bc

080068bc <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4604      	mov	r4, r0
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 80068c0:	f00d ffea 	bl	8014898 <sys_arch_protect>
  if (select_cb->next != NULL) {
 80068c4:	6823      	ldr	r3, [r4, #0]
  LWIP_SOCKET_SELECT_PROTECT(lev);
 80068c6:	4606      	mov	r6, r0
  if (select_cb->next != NULL) {
 80068c8:	b10b      	cbz	r3, 80068ce <lwip_unlink_select_cb+0x12>
    select_cb->next->prev = select_cb->prev;
 80068ca:	6862      	ldr	r2, [r4, #4]
 80068cc:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 80068ce:	4d11      	ldr	r5, [pc, #68]	; (8006914 <lwip_unlink_select_cb+0x58>)
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80068d4:	42a2      	cmp	r2, r4
 80068d6:	d111      	bne.n	80068fc <lwip_unlink_select_cb+0x40>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 80068d8:	b133      	cbz	r3, 80068e8 <lwip_unlink_select_cb+0x2c>
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <lwip_unlink_select_cb+0x5c>)
 80068dc:	490f      	ldr	r1, [pc, #60]	; (800691c <lwip_unlink_select_cb+0x60>)
 80068de:	4810      	ldr	r0, [pc, #64]	; (8006920 <lwip_unlink_select_cb+0x64>)
 80068e0:	f240 720d 	movw	r2, #1805	; 0x70d
 80068e4:	f016 f920 	bl	801cb28 <iprintf>
    select_cb_list = select_cb->next;
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	642b      	str	r3, [r5, #64]	; 0x40
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
    select_cb->prev->next = select_cb->next;
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
 80068ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80068ee:	3301      	adds	r3, #1
 80068f0:	646b      	str	r3, [r5, #68]	; 0x44
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80068f2:	4630      	mov	r0, r6
}
 80068f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80068f8:	f00d bfda 	b.w	80148b0 <sys_arch_unprotect>
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 80068fc:	b933      	cbnz	r3, 800690c <lwip_unlink_select_cb+0x50>
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <lwip_unlink_select_cb+0x5c>)
 8006900:	4908      	ldr	r1, [pc, #32]	; (8006924 <lwip_unlink_select_cb+0x68>)
 8006902:	4807      	ldr	r0, [pc, #28]	; (8006920 <lwip_unlink_select_cb+0x64>)
 8006904:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 8006908:	f016 f90e 	bl	801cb28 <iprintf>
    select_cb->prev->next = select_cb->next;
 800690c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e7eb      	b.n	80068ec <lwip_unlink_select_cb+0x30>
 8006914:	200068bc 	.word	0x200068bc
 8006918:	0802ba85 	.word	0x0802ba85
 800691c:	0802bb0f 	.word	0x0802bb0f
 8006920:	0802aecf 	.word	0x0802aecf
 8006924:	0802bb27 	.word	0x0802bb27

08006928 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4699      	mov	r9, r3
 800692e:	b08b      	sub	sp, #44	; 0x2c
  int i, nready = 0;
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 8006930:	2300      	movs	r3, #0
{
 8006932:	460f      	mov	r7, r1
 8006934:	4690      	mov	r8, r2
 8006936:	4683      	mov	fp, r0
  FD_ZERO(&lreadset);
 8006938:	aa04      	add	r2, sp, #16
 800693a:	4619      	mov	r1, r3
 800693c:	3301      	adds	r3, #1
 800693e:	2b08      	cmp	r3, #8
 8006940:	f802 1b01 	strb.w	r1, [r2], #1
 8006944:	d1fa      	bne.n	800693c <lwip_selscan+0x14>
  FD_ZERO(&lwriteset);
 8006946:	2300      	movs	r3, #0
 8006948:	aa06      	add	r2, sp, #24
 800694a:	4619      	mov	r1, r3
 800694c:	3301      	adds	r3, #1
 800694e:	2b08      	cmp	r3, #8
 8006950:	f802 1b01 	strb.w	r1, [r2], #1
 8006954:	d1fa      	bne.n	800694c <lwip_selscan+0x24>
  FD_ZERO(&lexceptset);
 8006956:	2300      	movs	r3, #0
 8006958:	aa08      	add	r2, sp, #32
 800695a:	4619      	mov	r1, r3
 800695c:	3301      	adds	r3, #1
 800695e:	2b08      	cmp	r3, #8
 8006960:	f802 1b01 	strb.w	r1, [r2], #1
 8006964:	d1fa      	bne.n	800695c <lwip_selscan+0x34>
  int i, nready = 0;
 8006966:	2500      	movs	r5, #0
 8006968:	4e40      	ldr	r6, [pc, #256]	; (8006a6c <lwip_selscan+0x144>)

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800696a:	462c      	mov	r4, r5
        FD_SET(i, &lwriteset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800696c:	f04f 0a01 	mov.w	sl, #1
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8006970:	455c      	cmp	r4, fp
 8006972:	db10      	blt.n	8006996 <lwip_selscan+0x6e>
      /* no a valid open socket */
      return -1;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 8006974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800697a:	e883 0003 	stmia.w	r3, {r0, r1}
  *writeset_out = lwriteset;
 800697e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006984:	e883 0003 	stmia.w	r3, {r0, r1}
  *exceptset_out = lexceptset;
 8006988:	ab0a      	add	r3, sp, #40	; 0x28
 800698a:	e913 0003 	ldmdb	r3, {r0, r1}
 800698e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006990:	e883 0003 	stmia.w	r3, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 8006994:	e066      	b.n	8006a64 <lwip_selscan+0x13c>
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 8006996:	b147      	cbz	r7, 80069aa <lwip_selscan+0x82>
 8006998:	0962      	lsrs	r2, r4, #5
 800699a:	f004 031f 	and.w	r3, r4, #31
 800699e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80069a2:	fa0a f303 	lsl.w	r3, sl, r3
 80069a6:	4213      	tst	r3, r2
 80069a8:	d117      	bne.n	80069da <lwip_selscan+0xb2>
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	d008      	beq.n	80069c2 <lwip_selscan+0x9a>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 80069b0:	0962      	lsrs	r2, r4, #5
 80069b2:	f004 031f 	and.w	r3, r4, #31
 80069b6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80069ba:	fa0a f303 	lsl.w	r3, sl, r3
 80069be:	4213      	tst	r3, r2
 80069c0:	d10b      	bne.n	80069da <lwip_selscan+0xb2>
 80069c2:	f1b9 0f00 	cmp.w	r9, #0
 80069c6:	d046      	beq.n	8006a56 <lwip_selscan+0x12e>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 80069c8:	0962      	lsrs	r2, r4, #5
 80069ca:	f004 031f 	and.w	r3, r4, #31
 80069ce:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80069d2:	fa0a f303 	lsl.w	r3, sl, r3
 80069d6:	4213      	tst	r3, r2
 80069d8:	d03d      	beq.n	8006a56 <lwip_selscan+0x12e>
    SYS_ARCH_PROTECT(lev);
 80069da:	f00d ff5d 	bl	8014898 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80069de:	2c03      	cmp	r4, #3
 80069e0:	d83c      	bhi.n	8006a5c <lwip_selscan+0x134>
      u16_t sendevent = sock->sendevent;
 80069e2:	8973      	ldrh	r3, [r6, #10]
      void *lastdata = sock->lastdata.pbuf;
 80069e4:	6871      	ldr	r1, [r6, #4]
      s16_t rcvevent = sock->rcvevent;
 80069e6:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
      u16_t sendevent = sock->sendevent;
 80069ea:	9301      	str	r3, [sp, #4]
      u16_t errevent = sock->errevent;
 80069ec:	89b3      	ldrh	r3, [r6, #12]
 80069ee:	9300      	str	r3, [sp, #0]
      void *lastdata = sock->lastdata.pbuf;
 80069f0:	9103      	str	r1, [sp, #12]
      s16_t rcvevent = sock->rcvevent;
 80069f2:	9202      	str	r2, [sp, #8]
      SYS_ARCH_UNPROTECT(lev);
 80069f4:	f00d ff5c 	bl	80148b0 <sys_arch_unprotect>
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	b17f      	cbz	r7, 8006a1c <lwip_selscan+0xf4>
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	fa0a fc04 	lsl.w	ip, sl, r4
 8006a02:	ea1c 0f00 	tst.w	ip, r0
 8006a06:	d009      	beq.n	8006a1c <lwip_selscan+0xf4>
 8006a08:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a0c:	b909      	cbnz	r1, 8006a12 <lwip_selscan+0xea>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	dd04      	ble.n	8006a1c <lwip_selscan+0xf4>
        FD_SET(i, &lreadset);
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	ea42 020c 	orr.w	r2, r2, ip
 8006a18:	9204      	str	r2, [sp, #16]
        nready++;
 8006a1a:	3501      	adds	r5, #1
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 8006a1c:	f1b8 0f00 	cmp.w	r8, #0
 8006a20:	d00a      	beq.n	8006a38 <lwip_selscan+0x110>
 8006a22:	f8d8 2000 	ldr.w	r2, [r8]
 8006a26:	fa0a f104 	lsl.w	r1, sl, r4
 8006a2a:	4211      	tst	r1, r2
 8006a2c:	d004      	beq.n	8006a38 <lwip_selscan+0x110>
 8006a2e:	b11b      	cbz	r3, 8006a38 <lwip_selscan+0x110>
        FD_SET(i, &lwriteset);
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	430b      	orrs	r3, r1
 8006a34:	9306      	str	r3, [sp, #24]
        nready++;
 8006a36:	3501      	adds	r5, #1
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 8006a38:	f1b9 0f00 	cmp.w	r9, #0
 8006a3c:	d00b      	beq.n	8006a56 <lwip_selscan+0x12e>
 8006a3e:	f8d9 2000 	ldr.w	r2, [r9]
 8006a42:	fa0a f104 	lsl.w	r1, sl, r4
 8006a46:	4211      	tst	r1, r2
 8006a48:	d005      	beq.n	8006a56 <lwip_selscan+0x12e>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	b11b      	cbz	r3, 8006a56 <lwip_selscan+0x12e>
        FD_SET(i, &lexceptset);
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	430b      	orrs	r3, r1
 8006a52:	9308      	str	r3, [sp, #32]
        nready++;
 8006a54:	3501      	adds	r5, #1
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8006a56:	3401      	adds	r4, #1
 8006a58:	3610      	adds	r6, #16
 8006a5a:	e789      	b.n	8006970 <lwip_selscan+0x48>
      SYS_ARCH_UNPROTECT(lev);
 8006a5c:	f00d ff28 	bl	80148b0 <sys_arch_unprotect>
      return -1;
 8006a60:	f04f 35ff 	mov.w	r5, #4294967295
  return nready;
}
 8006a64:	4628      	mov	r0, r5
 8006a66:	b00b      	add	sp, #44	; 0x2c
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	200068bc 	.word	0x200068bc

08006a70 <lwip_recv_tcp>:
{
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	b085      	sub	sp, #20
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8006a76:	2a00      	cmp	r2, #0
{
 8006a78:	9101      	str	r1, [sp, #4]
 8006a7a:	4699      	mov	r9, r3
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8006a7c:	bfac      	ite	ge
 8006a7e:	4614      	movge	r4, r2
 8006a80:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
  LWIP_ASSERT("no socket given", sock != NULL);
 8006a84:	4606      	mov	r6, r0
 8006a86:	b930      	cbnz	r0, 8006a96 <lwip_recv_tcp+0x26>
 8006a88:	4b47      	ldr	r3, [pc, #284]	; (8006ba8 <lwip_recv_tcp+0x138>)
 8006a8a:	4948      	ldr	r1, [pc, #288]	; (8006bac <lwip_recv_tcp+0x13c>)
 8006a8c:	4848      	ldr	r0, [pc, #288]	; (8006bb0 <lwip_recv_tcp+0x140>)
 8006a8e:	f240 329e 	movw	r2, #926	; 0x39e
 8006a92:	f016 f849 	bl	801cb28 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8006a96:	6833      	ldr	r3, [r6, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d006      	beq.n	8006ab0 <lwip_recv_tcp+0x40>
 8006aa2:	4b41      	ldr	r3, [pc, #260]	; (8006ba8 <lwip_recv_tcp+0x138>)
 8006aa4:	4943      	ldr	r1, [pc, #268]	; (8006bb4 <lwip_recv_tcp+0x144>)
 8006aa6:	4842      	ldr	r0, [pc, #264]	; (8006bb0 <lwip_recv_tcp+0x140>)
 8006aa8:	f240 329f 	movw	r2, #927	; 0x39f
 8006aac:	f016 f83c 	bl	801cb28 <iprintf>
    apiflags |= NETCONN_DONTBLOCK;
 8006ab0:	f019 0f08 	tst.w	r9, #8
      LWIP_ASSERT("p != NULL", p != NULL);
 8006ab4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8006ba8 <lwip_recv_tcp+0x138>
 8006ab8:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8006bb0 <lwip_recv_tcp+0x140>
    apiflags |= NETCONN_DONTBLOCK;
 8006abc:	bf0c      	ite	eq
 8006abe:	2208      	moveq	r2, #8
 8006ac0:	220c      	movne	r2, #12
 8006ac2:	2500      	movs	r5, #0
    if (sock->lastdata.pbuf) {
 8006ac4:	6873      	ldr	r3, [r6, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03d      	beq.n	8006b46 <lwip_recv_tcp+0xd6>
      p = sock->lastdata.pbuf;
 8006aca:	9303      	str	r3, [sp, #12]
    if (recv_left > p->tot_len) {
 8006acc:	9803      	ldr	r0, [sp, #12]
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8006ace:	9901      	ldr	r1, [sp, #4]
    if (recv_left > p->tot_len) {
 8006ad0:	8907      	ldrh	r7, [r0, #8]
 8006ad2:	42a7      	cmp	r7, r4
      copylen = (u16_t)recv_left;
 8006ad4:	bfa8      	it	ge
 8006ad6:	b2a7      	uxthge	r7, r4
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	463a      	mov	r2, r7
 8006adc:	4429      	add	r1, r5
 8006ade:	f008 fe8d 	bl	800f7fc <pbuf_copy_partial>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8006ae2:	42a7      	cmp	r7, r4
    if (recvd + copylen < recvd) {
 8006ae4:	eb07 0805 	add.w	r8, r7, r5
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8006ae8:	dd06      	ble.n	8006af8 <lwip_recv_tcp+0x88>
 8006aea:	4933      	ldr	r1, [pc, #204]	; (8006bb8 <lwip_recv_tcp+0x148>)
 8006aec:	4653      	mov	r3, sl
 8006aee:	f240 32dd 	movw	r2, #989	; 0x3dd
 8006af2:	4658      	mov	r0, fp
 8006af4:	f016 f818 	bl	801cb28 <iprintf>
    if ((flags & MSG_PEEK) == 0) {
 8006af8:	f019 0f01 	tst.w	r9, #1
 8006afc:	d14f      	bne.n	8006b9e <lwip_recv_tcp+0x12e>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	891b      	ldrh	r3, [r3, #8]
 8006b02:	42bb      	cmp	r3, r7
 8006b04:	d206      	bcs.n	8006b14 <lwip_recv_tcp+0xa4>
 8006b06:	492d      	ldr	r1, [pc, #180]	; (8006bbc <lwip_recv_tcp+0x14c>)
 8006b08:	4653      	mov	r3, sl
 8006b0a:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006b0e:	4658      	mov	r0, fp
 8006b10:	f016 f80a 	bl	801cb28 <iprintf>
      if (p->tot_len - copylen > 0) {
 8006b14:	9803      	ldr	r0, [sp, #12]
 8006b16:	8903      	ldrh	r3, [r0, #8]
 8006b18:	1bdb      	subs	r3, r3, r7
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dd38      	ble.n	8006b90 <lwip_recv_tcp+0x120>
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f008 fd6a 	bl	800f5f8 <pbuf_free_header>
 8006b24:	6070      	str	r0, [r6, #4]
    recv_left -= copylen;
 8006b26:	1be4      	subs	r4, r4, r7
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8006b28:	2c00      	cmp	r4, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8006b2a:	f04f 021c 	mov.w	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8006b2e:	dc08      	bgt.n	8006b42 <lwip_recv_tcp+0xd2>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8006b30:	f1b8 0f00 	cmp.w	r8, #0
 8006b34:	d036      	beq.n	8006ba4 <lwip_recv_tcp+0x134>
 8006b36:	4645      	mov	r5, r8
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8006b38:	6830      	ldr	r0, [r6, #0]
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7fe faac 	bl	8005098 <netconn_tcp_recvd>
 8006b40:	e00b      	b.n	8006b5a <lwip_recv_tcp+0xea>
    if (recvd + copylen < recvd) {
 8006b42:	4645      	mov	r5, r8
 8006b44:	e7be      	b.n	8006ac4 <lwip_recv_tcp+0x54>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8006b46:	6830      	ldr	r0, [r6, #0]
 8006b48:	a903      	add	r1, sp, #12
 8006b4a:	f7fe fcbb 	bl	80054c4 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 8006b4e:	4607      	mov	r7, r0
 8006b50:	b190      	cbz	r0, 8006b78 <lwip_recv_tcp+0x108>
        if (recvd > 0) {
 8006b52:	b135      	cbz	r5, 8006b62 <lwip_recv_tcp+0xf2>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8006b54:	f019 0f01 	tst.w	r9, #1
 8006b58:	d0ee      	beq.n	8006b38 <lwip_recv_tcp+0xc8>
}
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	b005      	add	sp, #20
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
 8006b62:	f7ff fdf3 	bl	800674c <err_to_errno>
 8006b66:	b108      	cbz	r0, 8006b6c <lwip_recv_tcp+0xfc>
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <lwip_recv_tcp+0x150>)
 8006b6a:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 8006b6c:	f117 050f 	adds.w	r5, r7, #15
 8006b70:	bf18      	it	ne
 8006b72:	2501      	movne	r5, #1
 8006b74:	426d      	negs	r5, r5
 8006b76:	e7f0      	b.n	8006b5a <lwip_recv_tcp+0xea>
      LWIP_ASSERT("p != NULL", p != NULL);
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	b933      	cbnz	r3, 8006b8a <lwip_recv_tcp+0x11a>
 8006b7c:	4911      	ldr	r1, [pc, #68]	; (8006bc4 <lwip_recv_tcp+0x154>)
 8006b7e:	4653      	mov	r3, sl
 8006b80:	f240 32c5 	movw	r2, #965	; 0x3c5
 8006b84:	4658      	mov	r0, fp
 8006b86:	f015 ffcf 	bl	801cb28 <iprintf>
      sock->lastdata.pbuf = p;
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	6073      	str	r3, [r6, #4]
 8006b8e:	e79d      	b.n	8006acc <lwip_recv_tcp+0x5c>
        sock->lastdata.pbuf = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	6073      	str	r3, [r6, #4]
        pbuf_free(p);
 8006b94:	f008 fbf4 	bl	800f380 <pbuf_free>
 8006b98:	e7c5      	b.n	8006b26 <lwip_recv_tcp+0xb6>
    if (recvd + copylen < recvd) {
 8006b9a:	4645      	mov	r5, r8
 8006b9c:	e7dd      	b.n	8006b5a <lwip_recv_tcp+0xea>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8006b9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ba2:	d1fa      	bne.n	8006b9a <lwip_recv_tcp+0x12a>
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	e7d8      	b.n	8006b5a <lwip_recv_tcp+0xea>
 8006ba8:	0802ba85 	.word	0x0802ba85
 8006bac:	0802bb64 	.word	0x0802bb64
 8006bb0:	0802aecf 	.word	0x0802aecf
 8006bb4:	0802bb74 	.word	0x0802bb74
 8006bb8:	0802bb96 	.word	0x0802bb96
 8006bbc:	0802bbbb 	.word	0x0802bbbb
 8006bc0:	20016130 	.word	0x20016130
 8006bc4:	0802d4b3 	.word	0x0802d4b3

08006bc8 <lwip_sockopt_to_ipopt>:
{
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 8006bc8:	2808      	cmp	r0, #8
{
 8006bca:	b508      	push	{r3, lr}
  switch (optname) {
 8006bcc:	d00b      	beq.n	8006be6 <lwip_sockopt_to_ipopt+0x1e>
 8006bce:	2820      	cmp	r0, #32
 8006bd0:	d009      	beq.n	8006be6 <lwip_sockopt_to_ipopt+0x1e>
 8006bd2:	2804      	cmp	r0, #4
 8006bd4:	d007      	beq.n	8006be6 <lwip_sockopt_to_ipopt+0x1e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 8006bd6:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <lwip_sockopt_to_ipopt+0x20>)
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <lwip_sockopt_to_ipopt+0x24>)
 8006bda:	4805      	ldr	r0, [pc, #20]	; (8006bf0 <lwip_sockopt_to_ipopt+0x28>)
 8006bdc:	f640 3239 	movw	r2, #2873	; 0xb39
 8006be0:	f015 ffa2 	bl	801cb28 <iprintf>
 8006be4:	2000      	movs	r0, #0
    return 0;
  }
}
 8006be6:	bd08      	pop	{r3, pc}
 8006be8:	0802ba85 	.word	0x0802ba85
 8006bec:	0802bbcb 	.word	0x0802bbcb
 8006bf0:	0802aecf 	.word	0x0802aecf

08006bf4 <sockaddr_to_ipaddr_port>:
{
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4615      	mov	r5, r2
  if ((sockaddr->sa_family) == AF_INET6) {
 8006bfa:	785a      	ldrb	r2, [r3, #1]
 8006bfc:	8840      	ldrh	r0, [r0, #2]
 8006bfe:	2a0a      	cmp	r2, #10
{
 8006c00:	460c      	mov	r4, r1
  if ((sockaddr->sa_family) == AF_INET6) {
 8006c02:	d124      	bne.n	8006c4e <sockaddr_to_ipaddr_port+0x5a>
    SOCKADDR6_TO_IP6ADDR_PORT((const struct sockaddr_in6 *)(const void *)(sockaddr), ipaddr, *port);
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	6062      	str	r2, [r4, #4]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	60a2      	str	r2, [r4, #8]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	60e2      	str	r2, [r4, #12]
 8006c12:	f24c 06ff 	movw	r6, #49407	; 0xc0ff
 8006c16:	2200      	movs	r2, #0
 8006c18:	7422      	strb	r2, [r4, #16]
 8006c1a:	400e      	ands	r6, r1
 8006c1c:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8006c20:	4296      	cmp	r6, r2
 8006c22:	6021      	str	r1, [r4, #0]
 8006c24:	d00b      	beq.n	8006c3e <sockaddr_to_ipaddr_port+0x4a>
 8006c26:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006c2a:	0409      	lsls	r1, r1, #16
 8006c2c:	0c09      	lsrs	r1, r1, #16
 8006c2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c32:	4291      	cmp	r1, r2
 8006c34:	d003      	beq.n	8006c3e <sockaddr_to_ipaddr_port+0x4a>
 8006c36:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	d101      	bne.n	8006c42 <sockaddr_to_ipaddr_port+0x4e>
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	7423      	strb	r3, [r4, #16]
 8006c42:	f007 fa2d 	bl	800e0a0 <lwip_htons>
    ipaddr->type = IPADDR_TYPE_V6;
 8006c46:	2306      	movs	r3, #6
    SOCKADDR6_TO_IP6ADDR_PORT((const struct sockaddr_in6 *)(const void *)(sockaddr), ipaddr, *port);
 8006c48:	8028      	strh	r0, [r5, #0]
    ipaddr->type = IPADDR_TYPE_V4;
 8006c4a:	7523      	strb	r3, [r4, #20]
}
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
    SOCKADDR4_TO_IP4ADDR_PORT((const struct sockaddr_in *)(const void *)(sockaddr), ipaddr, *port);
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	600b      	str	r3, [r1, #0]
 8006c52:	f007 fa25 	bl	800e0a0 <lwip_htons>
    ipaddr->type = IPADDR_TYPE_V4;
 8006c56:	2300      	movs	r3, #0
    SOCKADDR4_TO_IP4ADDR_PORT((const struct sockaddr_in *)(const void *)(sockaddr), ipaddr, *port);
 8006c58:	8028      	strh	r0, [r5, #0]
    ipaddr->type = IPADDR_TYPE_V4;
 8006c5a:	e7f6      	b.n	8006c4a <sockaddr_to_ipaddr_port+0x56>

08006c5c <lwip_sock_make_addr.isra.0>:
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	b088      	sub	sp, #32
 8006c62:	4680      	mov	r8, r0
 8006c64:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006c66:	4617      	mov	r7, r2
 8006c68:	461d      	mov	r5, r3
  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b931      	cbnz	r1, 8006c7c <lwip_sock_make_addr.isra.0+0x20>
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <lwip_sock_make_addr.isra.0+0xdc>)
 8006c70:	4932      	ldr	r1, [pc, #200]	; (8006d3c <lwip_sock_make_addr.isra.0+0xe0>)
 8006c72:	4833      	ldr	r0, [pc, #204]	; (8006d40 <lwip_sock_make_addr.isra.0+0xe4>)
 8006c74:	f240 4207 	movw	r2, #1031	; 0x407
 8006c78:	f015 ff56 	bl	801cb28 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8006c7c:	b935      	cbnz	r5, 8006c8c <lwip_sock_make_addr.isra.0+0x30>
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <lwip_sock_make_addr.isra.0+0xdc>)
 8006c80:	4930      	ldr	r1, [pc, #192]	; (8006d44 <lwip_sock_make_addr.isra.0+0xe8>)
 8006c82:	482f      	ldr	r0, [pc, #188]	; (8006d40 <lwip_sock_make_addr.isra.0+0xe4>)
 8006c84:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006c88:	f015 ff4e 	bl	801cb28 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8006c8c:	b936      	cbnz	r6, 8006c9c <lwip_sock_make_addr.isra.0+0x40>
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <lwip_sock_make_addr.isra.0+0xdc>)
 8006c90:	492d      	ldr	r1, [pc, #180]	; (8006d48 <lwip_sock_make_addr.isra.0+0xec>)
 8006c92:	482b      	ldr	r0, [pc, #172]	; (8006d40 <lwip_sock_make_addr.isra.0+0xe4>)
 8006c94:	f240 4209 	movw	r2, #1033	; 0x409
 8006c98:	f015 ff46 	bl	801cb28 <iprintf>
  if (NETCONNTYPE_ISIPV6(netconn_type(conn)) && IP_IS_V4(fromaddr)) {
 8006c9c:	f898 3000 	ldrb.w	r3, [r8]
 8006ca0:	0719      	lsls	r1, r3, #28
 8006ca2:	d50c      	bpl.n	8006cbe <lwip_sock_make_addr.isra.0+0x62>
 8006ca4:	b10c      	cbz	r4, 8006caa <lwip_sock_make_addr.isra.0+0x4e>
 8006ca6:	7d23      	ldrb	r3, [r4, #20]
 8006ca8:	b94b      	cbnz	r3, 8006cbe <lwip_sock_make_addr.isra.0+0x62>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <lwip_sock_make_addr.isra.0+0xf0>)
 8006cae:	60e3      	str	r3, [r4, #12]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e9c4 3201 	strd	r3, r2, [r4, #4]
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	7423      	strb	r3, [r4, #16]
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
 8006cba:	2306      	movs	r3, #6
 8006cbc:	7523      	strb	r3, [r4, #20]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8006cbe:	7d23      	ldrb	r3, [r4, #20]
 8006cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc2:	d001      	beq.n	8006cc8 <lwip_sock_make_addr.isra.0+0x6c>
 8006cc4:	2b06      	cmp	r3, #6
 8006cc6:	d11d      	bne.n	8006d04 <lwip_sock_make_addr.isra.0+0xa8>
 8006cc8:	f640 231c 	movw	r3, #2588	; 0xa1c
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006cd2:	f007 f9e5 	bl	800e0a0 <lwip_htons>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9302      	str	r3, [sp, #8]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	9303      	str	r3, [sp, #12]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	68a3      	ldr	r3, [r4, #8]
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	7c23      	ldrb	r3, [r4, #16]
 8006cec:	f8ad 0006 	strh.w	r0, [sp, #6]
 8006cf0:	9307      	str	r3, [sp, #28]
  if (*fromlen < saddr.sa.sa_len) {
 8006cf2:	6832      	ldr	r2, [r6, #0]
 8006cf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d312      	bcc.n	8006d22 <lwip_sock_make_addr.isra.0+0xc6>
  } else if (*fromlen > saddr.sa.sa_len) {
 8006cfc:	d900      	bls.n	8006d00 <lwip_sock_make_addr.isra.0+0xa4>
    *fromlen = saddr.sa.sa_len;
 8006cfe:	6033      	str	r3, [r6, #0]
  int truncated = 0;
 8006d00:	2400      	movs	r4, #0
 8006d02:	e00f      	b.n	8006d24 <lwip_sock_make_addr.isra.0+0xc8>
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8006d04:	f44f 7304 	mov.w	r3, #528	; 0x210
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006d0e:	f007 f9c7 	bl	800e0a0 <lwip_htons>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	2300      	movs	r3, #0
 8006d18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006d1c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8006d20:	e7e7      	b.n	8006cf2 <lwip_sock_make_addr.isra.0+0x96>
    truncated = 1;
 8006d22:	2401      	movs	r4, #1
  MEMCPY(from, &saddr, *fromlen);
 8006d24:	6832      	ldr	r2, [r6, #0]
 8006d26:	a901      	add	r1, sp, #4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f015 fa89 	bl	801c240 <memcpy>
}
 8006d2e:	4620      	mov	r0, r4
 8006d30:	b008      	add	sp, #32
 8006d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d36:	bf00      	nop
 8006d38:	0802ba85 	.word	0x0802ba85
 8006d3c:	0802bbe1 	.word	0x0802bbe1
 8006d40:	0802aecf 	.word	0x0802aecf
 8006d44:	0802bbf2 	.word	0x0802bbf2
 8006d48:	0802bbff 	.word	0x0802bbff
 8006d4c:	ffff0000 	.word	0xffff0000

08006d50 <free_socket>:
{
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	460e      	mov	r6, r1
  SYS_ARCH_PROTECT(lev);
 8006d56:	f00d fd9f 	bl	8014898 <sys_arch_protect>
  *lastdata = sock->lastdata;
 8006d5a:	6865      	ldr	r5, [r4, #4]
  *conn = sock->conn;
 8006d5c:	6827      	ldr	r7, [r4, #0]
  sock->lastdata.pbuf = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6063      	str	r3, [r4, #4]
  sock->conn = NULL;
 8006d62:	6023      	str	r3, [r4, #0]
  SYS_ARCH_UNPROTECT(lev);
 8006d64:	f00d fda4 	bl	80148b0 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 8006d68:	b11d      	cbz	r5, 8006d72 <free_socket+0x22>
      pbuf_free(lastdata->pbuf);
 8006d6a:	4628      	mov	r0, r5
    if (is_tcp) {
 8006d6c:	b13e      	cbz	r6, 8006d7e <free_socket+0x2e>
      pbuf_free(lastdata->pbuf);
 8006d6e:	f008 fb07 	bl	800f380 <pbuf_free>
  if (conn != NULL) {
 8006d72:	b13f      	cbz	r7, 8006d84 <free_socket+0x34>
    netconn_delete(conn);
 8006d74:	4638      	mov	r0, r7
}
 8006d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    netconn_delete(conn);
 8006d7a:	f7fe b89b 	b.w	8004eb4 <netconn_delete>
      netbuf_delete(lastdata->netbuf);
 8006d7e:	f7ff fcf3 	bl	8006768 <netbuf_delete>
 8006d82:	e7f6      	b.n	8006d72 <free_socket+0x22>
}
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d88 <lwip_recvfrom_udp_raw.isra.0>:
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	4698      	mov	r8, r3
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8006d8e:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 8006d90:	b085      	sub	sp, #20
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	4614      	mov	r4, r2
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8006d98:	b973      	cbnz	r3, 8006db8 <lwip_recvfrom_udp_raw.isra.0+0x30>
 8006d9a:	68d3      	ldr	r3, [r2, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd0b      	ble.n	8006db8 <lwip_recvfrom_udp_raw.isra.0+0x30>
 8006da0:	4b32      	ldr	r3, [pc, #200]	; (8006e6c <lwip_recvfrom_udp_raw.isra.0+0xe4>)
 8006da2:	4933      	ldr	r1, [pc, #204]	; (8006e70 <lwip_recvfrom_udp_raw.isra.0+0xe8>)
 8006da4:	4833      	ldr	r0, [pc, #204]	; (8006e74 <lwip_recvfrom_udp_raw.isra.0+0xec>)
 8006da6:	f240 4249 	movw	r2, #1097	; 0x449
 8006daa:	f015 febd 	bl	801cb28 <iprintf>
 8006dae:	f06f 000f 	mvn.w	r0, #15
}
 8006db2:	b005      	add	sp, #20
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  buf = sock->lastdata.netbuf;
 8006db8:	6873      	ldr	r3, [r6, #4]
 8006dba:	9303      	str	r3, [sp, #12]
    apiflags = 0;
 8006dbc:	f017 0f08 	tst.w	r7, #8
 8006dc0:	bf14      	ite	ne
 8006dc2:	2204      	movne	r2, #4
 8006dc4:	2200      	moveq	r2, #0
  if (buf == NULL) {
 8006dc6:	b983      	cbnz	r3, 8006dea <lwip_recvfrom_udp_raw.isra.0+0x62>
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8006dc8:	6830      	ldr	r0, [r6, #0]
 8006dca:	a903      	add	r1, sp, #12
 8006dcc:	f7fe fafc 	bl	80053c8 <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1ee      	bne.n	8006db2 <lwip_recvfrom_udp_raw.isra.0+0x2a>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	b933      	cbnz	r3, 8006de6 <lwip_recvfrom_udp_raw.isra.0+0x5e>
 8006dd8:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <lwip_recvfrom_udp_raw.isra.0+0xe4>)
 8006dda:	4927      	ldr	r1, [pc, #156]	; (8006e78 <lwip_recvfrom_udp_raw.isra.0+0xf0>)
 8006ddc:	4825      	ldr	r0, [pc, #148]	; (8006e74 <lwip_recvfrom_udp_raw.isra.0+0xec>)
 8006dde:	f240 425e 	movw	r2, #1118	; 0x45e
 8006de2:	f015 fea1 	bl	801cb28 <iprintf>
    sock->lastdata.netbuf = buf;
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	6073      	str	r3, [r6, #4]
  buflen = buf->p->tot_len;
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8006dee:	f04f 0900 	mov.w	r9, #0
  buflen = buf->p->tot_len;
 8006df2:	f8b3 a008 	ldrh.w	sl, [r3, #8]
  copied = 0;
 8006df6:	46cb      	mov	fp, r9
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8006df8:	68e3      	ldr	r3, [r4, #12]
 8006dfa:	4599      	cmp	r9, r3
 8006dfc:	da01      	bge.n	8006e02 <lwip_recvfrom_udp_raw.isra.0+0x7a>
 8006dfe:	45da      	cmp	sl, fp
 8006e00:	d81b      	bhi.n	8006e3a <lwip_recvfrom_udp_raw.isra.0+0xb2>
  if (msg->msg_name && msg->msg_namelen)
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	b14b      	cbz	r3, 8006e1a <lwip_recvfrom_udp_raw.isra.0+0x92>
 8006e06:	6862      	ldr	r2, [r4, #4]
 8006e08:	b13a      	cbz	r2, 8006e1a <lwip_recvfrom_udp_raw.isra.0+0x92>
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
 8006e0a:	9903      	ldr	r1, [sp, #12]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8006e0c:	1d20      	adds	r0, r4, #4
 8006e0e:	8c0a      	ldrh	r2, [r1, #32]
 8006e10:	9000      	str	r0, [sp, #0]
 8006e12:	3108      	adds	r1, #8
 8006e14:	6830      	ldr	r0, [r6, #0]
 8006e16:	f7ff ff21 	bl	8006c5c <lwip_sock_make_addr.isra.0>
  if (msg->msg_control) {
 8006e1a:	6922      	ldr	r2, [r4, #16]
  msg->msg_flags = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61a3      	str	r3, [r4, #24]
  if (msg->msg_control) {
 8006e20:	b102      	cbz	r2, 8006e24 <lwip_recvfrom_udp_raw.isra.0+0x9c>
      msg->msg_controllen = 0;
 8006e22:	6163      	str	r3, [r4, #20]
  if ((flags & MSG_PEEK) == 0) {
 8006e24:	f017 0701 	ands.w	r7, r7, #1
 8006e28:	d103      	bne.n	8006e32 <lwip_recvfrom_udp_raw.isra.0+0xaa>
    netbuf_delete(buf);
 8006e2a:	9803      	ldr	r0, [sp, #12]
    sock->lastdata.netbuf = NULL;
 8006e2c:	6077      	str	r7, [r6, #4]
    netbuf_delete(buf);
 8006e2e:	f7ff fc9b 	bl	8006768 <netbuf_delete>
    *datagram_len = buflen;
 8006e32:	f8a8 a000 	strh.w	sl, [r8]
  return ERR_OK;
 8006e36:	2000      	movs	r0, #0
 8006e38:	e7bb      	b.n	8006db2 <lwip_recvfrom_udp_raw.isra.0+0x2a>
    if (msg->msg_iov[i].iov_len > len_left) {
 8006e3a:	68a1      	ldr	r1, [r4, #8]
 8006e3c:	eb01 03c9 	add.w	r3, r1, r9, lsl #3
 8006e40:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 8006e44:	685b      	ldr	r3, [r3, #4]
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8006e46:	5809      	ldr	r1, [r1, r0]
 8006e48:	9803      	ldr	r0, [sp, #12]
    u16_t len_left = (u16_t)(buflen - copied);
 8006e4a:	ebaa 050b 	sub.w	r5, sl, fp
 8006e4e:	b2ad      	uxth	r5, r5
    if (msg->msg_iov[i].iov_len > len_left) {
 8006e50:	42ab      	cmp	r3, r5
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8006e52:	bf98      	it	ls
 8006e54:	b29d      	uxthls	r5, r3
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8006e56:	462a      	mov	r2, r5
 8006e58:	465b      	mov	r3, fp
 8006e5a:	6800      	ldr	r0, [r0, #0]
    copied = (u16_t)(copied + copylen);
 8006e5c:	445d      	add	r5, fp
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8006e5e:	f008 fccd 	bl	800f7fc <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8006e62:	fa1f fb85 	uxth.w	fp, r5
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8006e66:	f109 0901 	add.w	r9, r9, #1
 8006e6a:	e7c5      	b.n	8006df8 <lwip_recvfrom_udp_raw.isra.0+0x70>
 8006e6c:	0802ba85 	.word	0x0802ba85
 8006e70:	0802bc0f 	.word	0x0802bc0f
 8006e74:	0802aecf 	.word	0x0802aecf
 8006e78:	0802b391 	.word	0x0802b391

08006e7c <get_socket>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8006e7c:	2803      	cmp	r0, #3
 8006e7e:	d805      	bhi.n	8006e8c <get_socket+0x10>
    if (sock->conn) {
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <get_socket+0x1c>)
 8006e82:	0102      	lsls	r2, r0, #4
 8006e84:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8006e88:	589b      	ldr	r3, [r3, r2]
 8006e8a:	b91b      	cbnz	r3, 8006e94 <get_socket+0x18>
    set_errno(EBADF);
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <get_socket+0x20>)
 8006e8e:	2209      	movs	r2, #9
 8006e90:	601a      	str	r2, [r3, #0]
    return NULL;
 8006e92:	2000      	movs	r0, #0
}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	200068bc 	.word	0x200068bc
 8006e9c:	20016130 	.word	0x20016130

08006ea0 <lwip_setsockopt_callback>:
/** lwip_setsockopt_callback: only used without CORE_LOCKING
 * to get into the tcpip_thread
 */
static void
lwip_setsockopt_callback(void *arg)
{
 8006ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct lwip_setgetsockopt_data *data;
  LWIP_ASSERT("arg != NULL", arg != NULL);
 8006ea4:	4604      	mov	r4, r0
{
 8006ea6:	b086      	sub	sp, #24
  LWIP_ASSERT("arg != NULL", arg != NULL);
 8006ea8:	b930      	cbnz	r0, 8006eb8 <lwip_setsockopt_callback+0x18>
 8006eaa:	4bb4      	ldr	r3, [pc, #720]	; (800717c <lwip_setsockopt_callback+0x2dc>)
 8006eac:	49b4      	ldr	r1, [pc, #720]	; (8007180 <lwip_setsockopt_callback+0x2e0>)
 8006eae:	48b5      	ldr	r0, [pc, #724]	; (8007184 <lwip_setsockopt_callback+0x2e4>)
 8006eb0:	f640 42d4 	movw	r2, #3284	; 0xcd4
 8006eb4:	f015 fe38 	bl	801cb28 <iprintf>
  data = (struct lwip_setgetsockopt_data *)arg;

  data->err = lwip_setsockopt_impl(data->s, data->level, data->optname,
 8006eb8:	e9d4 7300 	ldrd	r7, r3, [r4]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8006ebc:	2f03      	cmp	r7, #3
  data->err = lwip_setsockopt_impl(data->s, data->level, data->optname,
 8006ebe:	e9d4 8602 	ldrd	r8, r6, [r4, #8]
 8006ec2:	f8d4 9010 	ldr.w	r9, [r4, #16]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8006ec6:	f200 81e9 	bhi.w	800729c <lwip_setsockopt_callback+0x3fc>
    if (sock->conn) {
 8006eca:	4daf      	ldr	r5, [pc, #700]	; (8007188 <lwip_setsockopt_callback+0x2e8>)
 8006ecc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006ed0:	f855 200a 	ldr.w	r2, [r5, sl]
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	f000 81e1 	beq.w	800729c <lwip_setsockopt_callback+0x3fc>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 8006eda:	2b29      	cmp	r3, #41	; 0x29
 8006edc:	f000 811c 	beq.w	8007118 <lwip_setsockopt_callback+0x278>
 8006ee0:	dc07      	bgt.n	8006ef2 <lwip_setsockopt_callback+0x52>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8082 	beq.w	8006fec <lwip_setsockopt_callback+0x14c>
 8006ee8:	2b06      	cmp	r3, #6
 8006eea:	f000 80e9 	beq.w	80070c0 <lwip_setsockopt_callback+0x220>
 8006eee:	235c      	movs	r3, #92	; 0x5c
 8006ef0:	e042      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
 8006ef2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8006ef6:	428b      	cmp	r3, r1
 8006ef8:	d1f9      	bne.n	8006eee <lwip_setsockopt_callback+0x4e>

    /* Level: SOL_SOCKET */
    case SOL_SOCKET:
      switch (optname) {
 8006efa:	f241 030a 	movw	r3, #4106	; 0x100a
 8006efe:	4598      	cmp	r8, r3
 8006f00:	d041      	beq.n	8006f86 <lwip_setsockopt_callback+0xe6>
 8006f02:	dc12      	bgt.n	8006f2a <lwip_setsockopt_callback+0x8a>
 8006f04:	f1b8 0f08 	cmp.w	r8, #8
 8006f08:	d007      	beq.n	8006f1a <lwip_setsockopt_callback+0x7a>
 8006f0a:	f1b8 0f20 	cmp.w	r8, #32
 8006f0e:	d1ee      	bne.n	8006eee <lwip_setsockopt_callback+0x4e>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 8006f10:	7813      	ldrb	r3, [r2, #0]
 8006f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d1e9      	bne.n	8006eee <lwip_setsockopt_callback+0x4e>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
            done_socket(sock);
            return ENOPROTOOPT;
          }

          optname = lwip_sockopt_to_ipopt(optname);
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f7ff fe54 	bl	8006bc8 <lwip_sockopt_to_ipopt>

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8006f20:	f1b9 0f03 	cmp.w	r9, #3
 8006f24:	d813      	bhi.n	8006f4e <lwip_setsockopt_callback+0xae>
          /* If this is a TCP or a RAW socket, ignore these options. */
          err_t mld6_err;
          struct netif *netif;
          ip6_addr_t multi_addr;
          const struct ipv6_mreq *imr = (const struct ipv6_mreq *)optval;
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ipv6_mreq, NETCONN_UDP);
 8006f26:	2316      	movs	r3, #22
 8006f28:	e026      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
 8006f2a:	f241 030b 	movw	r3, #4107	; 0x100b
 8006f2e:	4598      	cmp	r8, r3
 8006f30:	d1dd      	bne.n	8006eee <lwip_setsockopt_callback+0x4e>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 8006f32:	f1b9 0f05 	cmp.w	r9, #5
 8006f36:	d9f6      	bls.n	8006f26 <lwip_setsockopt_callback+0x86>
          if (iface->ifr_name[0] != 0) {
 8006f38:	7833      	ldrb	r3, [r6, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d03c      	beq.n	8006fb8 <lwip_setsockopt_callback+0x118>
            n = netif_find(iface->ifr_name);
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f008 f948 	bl	800f1d4 <netif_find>
            if (n == NULL) {
 8006f44:	4601      	mov	r1, r0
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d137      	bne.n	8006fba <lwip_setsockopt_callback+0x11a>
              return ENODEV;
 8006f4a:	2313      	movs	r3, #19
 8006f4c:	e014      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8006f4e:	f855 300a 	ldr.w	r3, [r5, sl]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0e7      	beq.n	8006f26 <lwip_setsockopt_callback+0x86>
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	d0e4      	beq.n	8006f26 <lwip_setsockopt_callback+0x86>
          if (*(const int *)optval) {
 8006f5c:	6833      	ldr	r3, [r6, #0]
 8006f5e:	f992 1031 	ldrsb.w	r1, [r2, #49]	; 0x31
 8006f62:	b240      	sxtb	r0, r0
 8006f64:	b123      	cbz	r3, 8006f70 <lwip_setsockopt_callback+0xd0>
            ip_set_option(sock->conn->pcb.ip, optname);
 8006f66:	4308      	orrs	r0, r1
 8006f68:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
  int err = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e003      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
            ip_reset_option(sock->conn->pcb.ip, optname);
 8006f70:	ea21 0000 	bic.w	r0, r1, r0
 8006f74:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
  sys_sem_signal((sys_sem_t *)(data->completed_sem));
 8006f78:	69a0      	ldr	r0, [r4, #24]
  data->err = lwip_setsockopt_impl(data->s, data->level, data->optname,
 8006f7a:	6163      	str	r3, [r4, #20]
  sys_sem_signal((sys_sem_t *)(data->completed_sem));
 8006f7c:	f00d fc4b 	bl	8014816 <sys_sem_signal>
}
 8006f80:	b006      	add	sp, #24
 8006f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 8006f86:	f1b9 0f03 	cmp.w	r9, #3
 8006f8a:	d9cc      	bls.n	8006f26 <lwip_setsockopt_callback+0x86>
 8006f8c:	6851      	ldr	r1, [r2, #4]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d0c9      	beq.n	8006f26 <lwip_setsockopt_callback+0x86>
 8006f92:	7813      	ldrb	r3, [r2, #0]
 8006f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d1a8      	bne.n	8006eee <lwip_setsockopt_callback+0x4e>
          if (*(const int *)optval) {
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 8006fa2:	b123      	cbz	r3, 8006fae <lwip_setsockopt_callback+0x10e>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
 8006fac:	e7de      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006fae:	f022 0201 	bic.w	r2, r2, #1
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 8006fb2:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
 8006fb6:	e7df      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          struct netif *n = NULL;
 8006fb8:	2100      	movs	r1, #0
          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 8006fba:	f855 200a 	ldr.w	r2, [r5, sl]
 8006fbe:	7813      	ldrb	r3, [r2, #0]
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d009      	beq.n	8006fdc <lwip_setsockopt_callback+0x13c>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d00b      	beq.n	8006fe4 <lwip_setsockopt_callback+0x144>
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 8006fcc:	4b6b      	ldr	r3, [pc, #428]	; (800717c <lwip_setsockopt_callback+0x2dc>)
 8006fce:	496f      	ldr	r1, [pc, #444]	; (800718c <lwip_setsockopt_callback+0x2ec>)
 8006fd0:	486c      	ldr	r0, [pc, #432]	; (8007184 <lwip_setsockopt_callback+0x2e4>)
 8006fd2:	f640 527d 	movw	r2, #3453	; 0xd7d
 8006fd6:	f015 fda7 	bl	801cb28 <iprintf>
              break;
 8006fda:	e7c7      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 8006fdc:	6850      	ldr	r0, [r2, #4]
 8006fde:	f008 fea7 	bl	800fd30 <tcp_bind_netif>
              break;
 8006fe2:	e7c3      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
              udp_bind_netif(sock->conn->pcb.udp, n);
 8006fe4:	6850      	ldr	r0, [r2, #4]
 8006fe6:	f00d f955 	bl	8014294 <udp_bind_netif>
              break;
 8006fea:	e7bf      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
      switch (optname) {
 8006fec:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ff0:	f1b8 0f06 	cmp.w	r8, #6
 8006ff4:	f63f af7b 	bhi.w	8006eee <lwip_setsockopt_callback+0x4e>
 8006ff8:	a101      	add	r1, pc, #4	; (adr r1, 8007000 <lwip_setsockopt_callback+0x160>)
 8006ffa:	f851 f028 	ldr.w	pc, [r1, r8, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007033 	.word	0x08007033
 8007004:	0800701d 	.word	0x0800701d
 8007008:	08006eef 	.word	0x08006eef
 800700c:	08006eef 	.word	0x08006eef
 8007010:	0800704b 	.word	0x0800704b
 8007014:	0800706f 	.word	0x0800706f
 8007018:	08007091 	.word	0x08007091
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800701c:	f1b9 0f03 	cmp.w	r9, #3
 8007020:	d981      	bls.n	8006f26 <lwip_setsockopt_callback+0x86>
 8007022:	6852      	ldr	r2, [r2, #4]
 8007024:	2a00      	cmp	r2, #0
 8007026:	f43f af7e 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800702a:	6831      	ldr	r1, [r6, #0]
 800702c:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
          break;
 8007030:	e7a2      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8007032:	f1b9 0f03 	cmp.w	r9, #3
 8007036:	f67f af76 	bls.w	8006f26 <lwip_setsockopt_callback+0x86>
 800703a:	6852      	ldr	r2, [r2, #4]
 800703c:	2a00      	cmp	r2, #0
 800703e:	f43f af72 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 8007042:	6831      	ldr	r1, [r6, #0]
 8007044:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
          break;
 8007048:	e796      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	f43f af6a 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 8007052:	6851      	ldr	r1, [r2, #4]
 8007054:	2900      	cmp	r1, #0
 8007056:	f43f af66 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007060:	2a20      	cmp	r2, #32
 8007062:	f47f af44 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t *)optval));
 8007066:	7832      	ldrb	r2, [r6, #0]
 8007068:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
          break;
 800706c:	e784      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
 800706e:	f1b9 0f03 	cmp.w	r9, #3
 8007072:	f67f af58 	bls.w	8006f26 <lwip_setsockopt_callback+0x86>
 8007076:	6851      	ldr	r1, [r2, #4]
 8007078:	2900      	cmp	r1, #0
 800707a:	f43f af54 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007084:	2a20      	cmp	r2, #32
 8007086:	f47f af32 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
 800708a:	6832      	ldr	r2, [r6, #0]
 800708c:	640a      	str	r2, [r1, #64]	; 0x40
        break;
 800708e:	e773      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
 8007090:	f1b9 0f00 	cmp.w	r9, #0
 8007094:	f43f af47 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 8007098:	6851      	ldr	r1, [r2, #4]
 800709a:	2900      	cmp	r1, #0
 800709c:	f43f af43 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80070a6:	2a20      	cmp	r2, #32
 80070a8:	f47f af21 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          if (*(const u8_t *)optval) {
 80070ac:	7830      	ldrb	r0, [r6, #0]
 80070ae:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80070b2:	b110      	cbz	r0, 80070ba <lwip_setsockopt_callback+0x21a>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 80070b4:	f042 0208 	orr.w	r2, r2, #8
 80070b8:	e77b      	b.n	8006fb2 <lwip_setsockopt_callback+0x112>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
 80070ba:	f022 0208 	bic.w	r2, r2, #8
 80070be:	e778      	b.n	8006fb2 <lwip_setsockopt_callback+0x112>
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 80070c0:	f1b9 0f03 	cmp.w	r9, #3
 80070c4:	f67f af2f 	bls.w	8006f26 <lwip_setsockopt_callback+0x86>
 80070c8:	6851      	ldr	r1, [r2, #4]
 80070ca:	2900      	cmp	r1, #0
 80070cc:	f43f af2b 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 80070d0:	7813      	ldrb	r3, [r2, #0]
 80070d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	f47f af09 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 80070dc:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f43f af20 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
      switch (optname) {
 80070e6:	f1b8 0f01 	cmp.w	r8, #1
 80070ea:	d007      	beq.n	80070fc <lwip_setsockopt_callback+0x25c>
 80070ec:	f1b8 0f02 	cmp.w	r8, #2
 80070f0:	f47f aefd 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
          break;
 80070fa:	e737      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
          if (*(const int *)optval) {
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8007102:	b123      	cbz	r3, 800710e <lwip_setsockopt_callback+0x26e>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 8007104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007108:	f8a1 2042 	strh.w	r2, [r1, #66]	; 0x42
 800710c:	e72e      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800710e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007112:	f8a1 2042 	strh.w	r2, [r1, #66]	; 0x42
 8007116:	e72f      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
      switch (optname) {
 8007118:	f1b8 0f0d 	cmp.w	r8, #13
 800711c:	dc3a      	bgt.n	8007194 <lwip_setsockopt_callback+0x2f4>
 800711e:	f1b8 0f0b 	cmp.w	r8, #11
 8007122:	f77f aee4 	ble.w	8006eee <lwip_setsockopt_callback+0x4e>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ipv6_mreq, NETCONN_UDP);
 8007126:	f1b9 0f13 	cmp.w	r9, #19
 800712a:	f67f aefc 	bls.w	8006f26 <lwip_setsockopt_callback+0x86>
 800712e:	6853      	ldr	r3, [r2, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f43f aef8 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
 8007136:	7813      	ldrb	r3, [r2, #0]
 8007138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800713c:	2b20      	cmp	r3, #32
 800713e:	f47f aed6 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          inet6_addr_to_ip6addr(&multi_addr, &imr->ipv6mr_multiaddr);
 8007142:	6833      	ldr	r3, [r6, #0]
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	6873      	ldr	r3, [r6, #4]
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	68b3      	ldr	r3, [r6, #8]
 800714c:	9303      	str	r3, [sp, #12]
 800714e:	68f3      	ldr	r3, [r6, #12]
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	2300      	movs	r3, #0
 8007154:	f88d 3014 	strb.w	r3, [sp, #20]
          LWIP_ASSERT("Invalid netif index", imr->ipv6mr_interface <= 0xFFu);
 8007158:	6933      	ldr	r3, [r6, #16]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d906      	bls.n	800716c <lwip_setsockopt_callback+0x2cc>
 800715e:	4b07      	ldr	r3, [pc, #28]	; (800717c <lwip_setsockopt_callback+0x2dc>)
 8007160:	490b      	ldr	r1, [pc, #44]	; (8007190 <lwip_setsockopt_callback+0x2f0>)
 8007162:	4808      	ldr	r0, [pc, #32]	; (8007184 <lwip_setsockopt_callback+0x2e4>)
 8007164:	f640 6228 	movw	r2, #3624	; 0xe28
 8007168:	f015 fcde 	bl	801cb28 <iprintf>
          netif = netif_get_by_index((u8_t)imr->ipv6mr_interface);
 800716c:	7c30      	ldrb	r0, [r6, #16]
 800716e:	f008 f81f 	bl	800f1b0 <netif_get_by_index>
          if (netif == NULL) {
 8007172:	4681      	mov	r9, r0
 8007174:	bb28      	cbnz	r0, 80071c2 <lwip_setsockopt_callback+0x322>
            err = EADDRNOTAVAIL;
 8007176:	2363      	movs	r3, #99	; 0x63
 8007178:	e6fe      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
 800717a:	bf00      	nop
 800717c:	0802ba85 	.word	0x0802ba85
 8007180:	0802bc38 	.word	0x0802bc38
 8007184:	0802aecf 	.word	0x0802aecf
 8007188:	200068bc 	.word	0x200068bc
 800718c:	0802bc44 	.word	0x0802bc44
 8007190:	0802bc6e 	.word	0x0802bc6e
 8007194:	f1b8 0f1b 	cmp.w	r8, #27
 8007198:	f47f aea9 	bne.w	8006eee <lwip_setsockopt_callback+0x4e>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800719c:	f1b9 0f03 	cmp.w	r9, #3
 80071a0:	f67f aec1 	bls.w	8006f26 <lwip_setsockopt_callback+0x86>
 80071a4:	6853      	ldr	r3, [r2, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f43f aebd 	beq.w	8006f26 <lwip_setsockopt_callback+0x86>
          if (*(const int *)optval) {
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	7f11      	ldrb	r1, [r2, #28]
 80071b0:	b11b      	cbz	r3, 80071ba <lwip_setsockopt_callback+0x31a>
            netconn_set_ipv6only(sock->conn, 1);
 80071b2:	f041 0120 	orr.w	r1, r1, #32
 80071b6:	7711      	strb	r1, [r2, #28]
 80071b8:	e6d8      	b.n	8006f6c <lwip_setsockopt_callback+0xcc>
            netconn_set_ipv6only(sock->conn, 0);
 80071ba:	f021 0120 	bic.w	r1, r1, #32
 80071be:	7711      	strb	r1, [r2, #28]
 80071c0:	e6da      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
            break;
          }

          if (optname == IPV6_JOIN_GROUP) {
 80071c2:	f1b8 0f0c 	cmp.w	r8, #12
 80071c6:	d12d      	bne.n	8007224 <lwip_setsockopt_callback+0x384>
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)
{
  struct lwip_sock *sock = get_socket(s);
 80071c8:	4638      	mov	r0, r7
            if (!lwip_socket_register_mld6_membership(s, imr->ipv6mr_interface, &multi_addr)) {
 80071ca:	6936      	ldr	r6, [r6, #16]
  struct lwip_sock *sock = get_socket(s);
 80071cc:	f7ff fe56 	bl	8006e7c <get_socket>
  int i;

  if (!sock) {
 80071d0:	b330      	cbz	r0, 8007220 <lwip_setsockopt_callback+0x380>
    return 0;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
    if (socket_ipv6_multicast_memberships[i].sock == NULL) {
 80071d2:	4f33      	ldr	r7, [pc, #204]	; (80072a0 <lwip_setsockopt_callback+0x400>)
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 80071d4:	2200      	movs	r2, #0
    if (socket_ipv6_multicast_memberships[i].sock == NULL) {
 80071d6:	f04f 0c1c 	mov.w	ip, #28
 80071da:	fb0c f302 	mul.w	r3, ip, r2
 80071de:	59d9      	ldr	r1, [r3, r7]
 80071e0:	b9d9      	cbnz	r1, 800721a <lwip_setsockopt_callback+0x37a>
      socket_ipv6_multicast_memberships[i].sock   = sock;
 80071e2:	441d      	add	r5, r3
      socket_ipv6_multicast_memberships[i].if_idx = (u8_t)if_idx;
      ip6_addr_copy(socket_ipv6_multicast_memberships[i].multi_addr, *multi_addr);
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	652b      	str	r3, [r5, #80]	; 0x50
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	656b      	str	r3, [r5, #84]	; 0x54
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	65ab      	str	r3, [r5, #88]	; 0x58
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80071f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
      socket_ipv6_multicast_memberships[i].sock   = sock;
 80071f8:	64a8      	str	r0, [r5, #72]	; 0x48
              mld6_err = mld6_joingroup_netif(netif, &multi_addr);
 80071fa:	a901      	add	r1, sp, #4
      socket_ipv6_multicast_memberships[i].if_idx = (u8_t)if_idx;
 80071fc:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
      ip6_addr_copy(socket_ipv6_multicast_memberships[i].multi_addr, *multi_addr);
 8007200:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
              mld6_err = mld6_joingroup_netif(netif, &multi_addr);
 8007204:	4648      	mov	r0, r9
 8007206:	f005 fb71 	bl	800c8ec <mld6_joingroup_netif>
 800720a:	4601      	mov	r1, r0
            err = EADDRNOTAVAIL;
 800720c:	2900      	cmp	r1, #0
 800720e:	bf0c      	ite	eq
 8007210:	f04f 0800 	moveq.w	r8, #0
 8007214:	f04f 0863 	movne.w	r8, #99	; 0x63
 8007218:	e002      	b.n	8007220 <lwip_setsockopt_callback+0x380>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800721a:	3201      	adds	r2, #1
 800721c:	2a04      	cmp	r2, #4
 800721e:	d1dc      	bne.n	80071da <lwip_setsockopt_callback+0x33a>
        break;
 8007220:	4643      	mov	r3, r8
 8007222:	e6a9      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
            mld6_err = mld6_leavegroup_netif(netif, &multi_addr);
 8007224:	a901      	add	r1, sp, #4
 8007226:	f005 fbd1 	bl	800c9cc <mld6_leavegroup_netif>
 800722a:	4601      	mov	r1, r0
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)
{
  struct lwip_sock *sock = get_socket(s);
 800722c:	4638      	mov	r0, r7
            lwip_socket_unregister_mld6_membership(s, imr->ipv6mr_interface, &multi_addr);
 800722e:	f8d6 a010 	ldr.w	sl, [r6, #16]
  struct lwip_sock *sock = get_socket(s);
 8007232:	f7ff fe23 	bl	8006e7c <get_socket>
  int i;

  if (!sock) {
 8007236:	2800      	cmp	r0, #0
 8007238:	d0e8      	beq.n	800720c <lwip_setsockopt_callback+0x36c>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
    if ((socket_ipv6_multicast_memberships[i].sock   == sock) &&
        (socket_ipv6_multicast_memberships[i].if_idx == if_idx) &&
        ip6_addr_cmp(&socket_ipv6_multicast_memberships[i].multi_addr, multi_addr)) {
 800723a:	e9dd 9801 	ldrd	r9, r8, [sp, #4]
 800723e:	e9dd 6c03 	ldrd	r6, ip, [sp, #12]
 8007242:	f89d e014 	ldrb.w	lr, [sp, #20]
 8007246:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <lwip_setsockopt_callback+0x400>)
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8007248:	2200      	movs	r2, #0
    if ((socket_ipv6_multicast_memberships[i].sock   == sock) &&
 800724a:	681f      	ldr	r7, [r3, #0]
 800724c:	42b8      	cmp	r0, r7
 800724e:	d11f      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
        (socket_ipv6_multicast_memberships[i].if_idx == if_idx) &&
 8007250:	791f      	ldrb	r7, [r3, #4]
    if ((socket_ipv6_multicast_memberships[i].sock   == sock) &&
 8007252:	45ba      	cmp	sl, r7
 8007254:	d11c      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
        (socket_ipv6_multicast_memberships[i].if_idx == if_idx) &&
 8007256:	689f      	ldr	r7, [r3, #8]
 8007258:	454f      	cmp	r7, r9
 800725a:	d119      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
        ip6_addr_cmp(&socket_ipv6_multicast_memberships[i].multi_addr, multi_addr)) {
 800725c:	68df      	ldr	r7, [r3, #12]
 800725e:	4547      	cmp	r7, r8
 8007260:	d116      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
 8007262:	691f      	ldr	r7, [r3, #16]
 8007264:	42b7      	cmp	r7, r6
 8007266:	d113      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
 8007268:	695f      	ldr	r7, [r3, #20]
 800726a:	4567      	cmp	r7, ip
 800726c:	d110      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
 800726e:	7e1f      	ldrb	r7, [r3, #24]
 8007270:	4577      	cmp	r7, lr
 8007272:	d10d      	bne.n	8007290 <lwip_setsockopt_callback+0x3f0>
      socket_ipv6_multicast_memberships[i].sock   = NULL;
 8007274:	231c      	movs	r3, #28
 8007276:	fb03 5502 	mla	r5, r3, r2, r5
 800727a:	2300      	movs	r3, #0
      socket_ipv6_multicast_memberships[i].if_idx = NETIF_NO_INDEX;
      ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
 800727c:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
 8007280:	e9c5 3316 	strd	r3, r3, [r5, #88]	; 0x58
      socket_ipv6_multicast_memberships[i].sock   = NULL;
 8007284:	64ab      	str	r3, [r5, #72]	; 0x48
      socket_ipv6_multicast_memberships[i].if_idx = NETIF_NO_INDEX;
 8007286:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
      ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
 800728a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
      break;
 800728e:	e7bd      	b.n	800720c <lwip_setsockopt_callback+0x36c>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8007290:	3201      	adds	r2, #1
 8007292:	2a04      	cmp	r2, #4
 8007294:	f103 031c 	add.w	r3, r3, #28
 8007298:	d1d7      	bne.n	800724a <lwip_setsockopt_callback+0x3aa>
 800729a:	e7b7      	b.n	800720c <lwip_setsockopt_callback+0x36c>
    return EBADF;
 800729c:	2309      	movs	r3, #9
 800729e:	e66b      	b.n	8006f78 <lwip_setsockopt_callback+0xd8>
 80072a0:	20006904 	.word	0x20006904

080072a4 <lwip_getaddrname>:
{
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	b090      	sub	sp, #64	; 0x40
 80072a8:	460e      	mov	r6, r1
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	4614      	mov	r4, r2
  sock = get_socket(s);
 80072ae:	f7ff fde5 	bl	8006e7c <get_socket>
  if (!sock) {
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	4605      	mov	r5, r0
 80072b6:	b918      	cbnz	r0, 80072c0 <lwip_getaddrname+0x1c>
    return -1;
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072bc:	b010      	add	sp, #64	; 0x40
 80072be:	bd70      	pop	{r4, r5, r6, pc}
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
 80072c0:	6800      	ldr	r0, [r0, #0]
 80072c2:	f10d 020a 	add.w	r2, sp, #10
 80072c6:	a903      	add	r1, sp, #12
 80072c8:	f7fd fe02 	bl	8004ed0 <netconn_getaddr>
  if (err != ERR_OK) {
 80072cc:	b130      	cbz	r0, 80072dc <lwip_getaddrname+0x38>
    sock_set_errno(sock, err_to_errno(err));
 80072ce:	f7ff fa3d 	bl	800674c <err_to_errno>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d0f0      	beq.n	80072b8 <lwip_getaddrname+0x14>
 80072d6:	4b26      	ldr	r3, [pc, #152]	; (8007370 <lwip_getaddrname+0xcc>)
 80072d8:	6018      	str	r0, [r3, #0]
 80072da:	e7ed      	b.n	80072b8 <lwip_getaddrname+0x14>
  if (NETCONNTYPE_ISIPV6(netconn_type(sock->conn)) &&
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	071b      	lsls	r3, r3, #28
 80072e2:	d50d      	bpl.n	8007300 <lwip_getaddrname+0x5c>
 80072e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80072e8:	b953      	cbnz	r3, 8007300 <lwip_getaddrname+0x5c>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
 80072ea:	9a03      	ldr	r2, [sp, #12]
 80072ec:	9206      	str	r2, [sp, #24]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <lwip_getaddrname+0xd0>)
 80072f0:	9303      	str	r3, [sp, #12]
 80072f2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80072f6:	f88d 301c 	strb.w	r3, [sp, #28]
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
 80072fa:	2306      	movs	r3, #6
 80072fc:	f88d 3020 	strb.w	r3, [sp, #32]
  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
 8007300:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007304:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8007308:	2b2e      	cmp	r3, #46	; 0x2e
 800730a:	d001      	beq.n	8007310 <lwip_getaddrname+0x6c>
 800730c:	2b06      	cmp	r3, #6
 800730e:	d121      	bne.n	8007354 <lwip_getaddrname+0xb0>
 8007310:	f640 231c 	movw	r3, #2588	; 0xa1c
 8007314:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8007318:	f006 fec2 	bl	800e0a0 <lwip_htons>
 800731c:	2300      	movs	r3, #0
 800731e:	930a      	str	r3, [sp, #40]	; 0x28
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	930b      	str	r3, [sp, #44]	; 0x2c
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	930c      	str	r3, [sp, #48]	; 0x30
 8007328:	9b05      	ldr	r3, [sp, #20]
 800732a:	930d      	str	r3, [sp, #52]	; 0x34
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	930e      	str	r3, [sp, #56]	; 0x38
 8007330:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007334:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007338:	930f      	str	r3, [sp, #60]	; 0x3c
  if (*namelen > saddr.sa.sa_len) {
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8007340:	429a      	cmp	r2, r3
    *namelen = saddr.sa.sa_len;
 8007342:	bf88      	it	hi
 8007344:	6023      	strhi	r3, [r4, #0]
  MEMCPY(name, &saddr, *namelen);
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	a909      	add	r1, sp, #36	; 0x24
 800734a:	4630      	mov	r0, r6
 800734c:	f014 ff78 	bl	801c240 <memcpy>
  return 0;
 8007350:	2000      	movs	r0, #0
 8007352:	e7b3      	b.n	80072bc <lwip_getaddrname+0x18>
  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
 8007354:	f44f 7304 	mov.w	r3, #528	; 0x210
 8007358:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800735c:	f006 fea0 	bl	800e0a0 <lwip_htons>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	930a      	str	r3, [sp, #40]	; 0x28
 8007364:	2300      	movs	r3, #0
 8007366:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800736a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800736e:	e7e4      	b.n	800733a <lwip_getaddrname+0x96>
 8007370:	20016130 	.word	0x20016130
 8007374:	ffff0000 	.word	0xffff0000

08007378 <event_callback>:
{
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	460f      	mov	r7, r1
 800737e:	b085      	sub	sp, #20
  if (conn) {
 8007380:	4604      	mov	r4, r0
 8007382:	2800      	cmp	r0, #0
 8007384:	f000 80c3 	beq.w	800750e <event_callback+0x196>
    s = conn->socket;
 8007388:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
 800738a:	2d00      	cmp	r5, #0
 800738c:	da10      	bge.n	80073b0 <event_callback+0x38>
      SYS_ARCH_PROTECT(lev);
 800738e:	f00d fa83 	bl	8014898 <sys_arch_protect>
      if (conn->socket < 0) {
 8007392:	69a5      	ldr	r5, [r4, #24]
 8007394:	2d00      	cmp	r5, #0
      SYS_ARCH_PROTECT(lev);
 8007396:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 8007398:	da08      	bge.n	80073ac <event_callback+0x34>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800739a:	b90f      	cbnz	r7, 80073a0 <event_callback+0x28>
          conn->socket--;
 800739c:	3d01      	subs	r5, #1
 800739e:	61a5      	str	r5, [r4, #24]
        SYS_ARCH_UNPROTECT(lev);
 80073a0:	4618      	mov	r0, r3
}
 80073a2:	b005      	add	sp, #20
 80073a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SYS_ARCH_UNPROTECT(lev);
 80073a8:	f00d ba82 	b.w	80148b0 <sys_arch_unprotect>
      SYS_ARCH_UNPROTECT(lev);
 80073ac:	f00d fa80 	bl	80148b0 <sys_arch_unprotect>
    sock = get_socket(s);
 80073b0:	4628      	mov	r0, r5
 80073b2:	f7ff fd63 	bl	8006e7c <get_socket>
    if (!sock) {
 80073b6:	4606      	mov	r6, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f000 80a8 	beq.w	800750e <event_callback+0x196>
  SYS_ARCH_PROTECT(lev);
 80073be:	f00d fa6b 	bl	8014898 <sys_arch_protect>
 80073c2:	4604      	mov	r4, r0
  switch (evt) {
 80073c4:	2f04      	cmp	r7, #4
 80073c6:	d845      	bhi.n	8007454 <event_callback+0xdc>
 80073c8:	e8df f007 	tbb	[pc, r7]
 80073cc:	3e373203 	.word	0x3e373203
 80073d0:	41          	.byte	0x41
 80073d1:	00          	.byte	0x00
      sock->rcvevent++;
 80073d2:	8933      	ldrh	r3, [r6, #8]
 80073d4:	3301      	adds	r3, #1
 80073d6:	b21b      	sxth	r3, r3
      if (sock->rcvevent > 1) {
 80073d8:	2b01      	cmp	r3, #1
      sock->rcvevent++;
 80073da:	8133      	strh	r3, [r6, #8]
      if (sock->rcvevent > 1) {
 80073dc:	bfcc      	ite	gt
 80073de:	2300      	movgt	r3, #0
 80073e0:	2301      	movle	r3, #1
  if (sock->select_waiting && check_waiters) {
 80073e2:	7bb2      	ldrb	r2, [r6, #14]
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	f000 8090 	beq.w	800750a <event_callback+0x192>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 808d 	beq.w	800750a <event_callback+0x192>
    has_recvevent = sock->rcvevent > 0;
 80073f0:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 80073f4:	9300      	str	r3, [sp, #0]
    SYS_ARCH_UNPROTECT(lev);
 80073f6:	4620      	mov	r0, r4
    has_sendevent = sock->sendevent != 0;
 80073f8:	8973      	ldrh	r3, [r6, #10]
    has_errevent = sock->errevent != 0;
 80073fa:	f8b6 800c 	ldrh.w	r8, [r6, #12]
    has_sendevent = sock->sendevent != 0;
 80073fe:	9301      	str	r3, [sp, #4]
    SYS_ARCH_UNPROTECT(lev);
 8007400:	f00d fa56 	bl	80148b0 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
 8007404:	f00d fa48 	bl	8014898 <sys_arch_protect>
  last_select_cb_ctr = select_cb_ctr;
 8007408:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007520 <event_callback+0x1a8>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800740c:	2101      	movs	r1, #1
 800740e:	f005 071f 	and.w	r7, r5, #31
  SYS_ARCH_PROTECT(lev);
 8007412:	4606      	mov	r6, r0
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8007414:	ea4f 1a55 	mov.w	sl, r5, lsr #5
 8007418:	fa01 f707 	lsl.w	r7, r1, r7
 800741c:	46cb      	mov	fp, r9
        scb->sem_signalled = 1;
 800741e:	9103      	str	r1, [sp, #12]
  last_select_cb_ctr = select_cb_ctr;
 8007420:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8007424:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
  last_select_cb_ctr = select_cb_ctr;
 8007428:	9302      	str	r3, [sp, #8]
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800742a:	b9e4      	cbnz	r4, 8007466 <event_callback+0xee>
  SYS_ARCH_UNPROTECT(lev);
 800742c:	4630      	mov	r0, r6
 800742e:	e7b8      	b.n	80073a2 <event_callback+0x2a>
      sock->rcvevent--;
 8007430:	8933      	ldrh	r3, [r6, #8]
 8007432:	3b01      	subs	r3, #1
 8007434:	8133      	strh	r3, [r6, #8]
      check_waiters = 0;
 8007436:	2300      	movs	r3, #0
      break;
 8007438:	e7d3      	b.n	80073e2 <event_callback+0x6a>
      if (sock->sendevent) {
 800743a:	8973      	ldrh	r3, [r6, #10]
      sock->sendevent = 1;
 800743c:	2201      	movs	r2, #1
      if (sock->sendevent) {
 800743e:	fab3 f383 	clz	r3, r3
 8007442:	095b      	lsrs	r3, r3, #5
      sock->sendevent = 1;
 8007444:	8172      	strh	r2, [r6, #10]
      break;
 8007446:	e7cc      	b.n	80073e2 <event_callback+0x6a>
      sock->sendevent = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	8173      	strh	r3, [r6, #10]
      break;
 800744c:	e7c9      	b.n	80073e2 <event_callback+0x6a>
      sock->errevent = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	81b3      	strh	r3, [r6, #12]
      break;
 8007452:	e7c6      	b.n	80073e2 <event_callback+0x6a>
      LWIP_ASSERT("unknown event", 0);
 8007454:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <event_callback+0x19c>)
 8007456:	4930      	ldr	r1, [pc, #192]	; (8007518 <event_callback+0x1a0>)
 8007458:	4830      	ldr	r0, [pc, #192]	; (800751c <event_callback+0x1a4>)
 800745a:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800745e:	f015 fb63 	bl	801cb28 <iprintf>
  check_waiters = 1;
 8007462:	2301      	movs	r3, #1
      break;
 8007464:	e7bd      	b.n	80073e2 <event_callback+0x6a>
    if (scb->sem_signalled == 0) {
 8007466:	69e0      	ldr	r0, [r4, #28]
 8007468:	b928      	cbnz	r0, 8007476 <event_callback+0xfe>
      if (scb->poll_fds != NULL) {
 800746a:	6962      	ldr	r2, [r4, #20]
 800746c:	b35a      	cbz	r2, 80074c6 <event_callback+0x14e>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800746e:	69a3      	ldr	r3, [r4, #24]
 8007470:	4694      	mov	ip, r2
 8007472:	4298      	cmp	r0, r3
 8007474:	d10f      	bne.n	8007496 <event_callback+0x11e>
    SYS_ARCH_UNPROTECT(lev);
 8007476:	4630      	mov	r0, r6
 8007478:	f00d fa1a 	bl	80148b0 <sys_arch_unprotect>
    SYS_ARCH_PROTECT(lev);
 800747c:	f00d fa0c 	bl	8014898 <sys_arch_protect>
    if (last_select_cb_ctr != select_cb_ctr) {
 8007480:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	4299      	cmp	r1, r3
    SYS_ARCH_PROTECT(lev);
 8007488:	4606      	mov	r6, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 800748a:	d1c9      	bne.n	8007420 <event_callback+0xa8>
    last_select_cb_ctr = select_cb_ctr;
 800748c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8007490:	6824      	ldr	r4, [r4, #0]
    last_select_cb_ctr = select_cb_ctr;
 8007492:	9302      	str	r3, [sp, #8]
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8007494:	e7c9      	b.n	800742a <event_callback+0xb2>
    if (pollfd->fd == fd) {
 8007496:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
 800749a:	428d      	cmp	r5, r1
 800749c:	d10f      	bne.n	80074be <event_callback+0x146>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800749e:	9900      	ldr	r1, [sp, #0]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	dd03      	ble.n	80074ac <event_callback+0x134>
 80074a4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80074a8:	07c9      	lsls	r1, r1, #31
 80074aa:	d427      	bmi.n	80074fc <event_callback+0x184>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80074ac:	9901      	ldr	r1, [sp, #4]
 80074ae:	b119      	cbz	r1, 80074b8 <event_callback+0x140>
 80074b0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80074b4:	0789      	lsls	r1, r1, #30
 80074b6:	d421      	bmi.n	80074fc <event_callback+0x184>
      if (has_errevent) {
 80074b8:	f1b8 0f00 	cmp.w	r8, #0
 80074bc:	d11e      	bne.n	80074fc <event_callback+0x184>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80074be:	3001      	adds	r0, #1
 80074c0:	f10c 0c08 	add.w	ip, ip, #8
 80074c4:	e7d5      	b.n	8007472 <event_callback+0xfa>
        if (has_recvevent) {
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dd05      	ble.n	80074d8 <event_callback+0x160>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80074cc:	68a1      	ldr	r1, [r4, #8]
 80074ce:	b119      	cbz	r1, 80074d8 <event_callback+0x160>
 80074d0:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 80074d4:	420f      	tst	r7, r1
 80074d6:	d111      	bne.n	80074fc <event_callback+0x184>
        if (has_sendevent) {
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	b12b      	cbz	r3, 80074e8 <event_callback+0x170>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80074dc:	68e1      	ldr	r1, [r4, #12]
 80074de:	b119      	cbz	r1, 80074e8 <event_callback+0x170>
 80074e0:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 80074e4:	420f      	tst	r7, r1
 80074e6:	d109      	bne.n	80074fc <event_callback+0x184>
        if (has_errevent) {
 80074e8:	f1b8 0f00 	cmp.w	r8, #0
 80074ec:	d0c3      	beq.n	8007476 <event_callback+0xfe>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80074ee:	6921      	ldr	r1, [r4, #16]
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d0c0      	beq.n	8007476 <event_callback+0xfe>
 80074f4:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 80074f8:	420f      	tst	r7, r1
 80074fa:	d0bc      	beq.n	8007476 <event_callback+0xfe>
        scb->sem_signalled = 1;
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	61e3      	str	r3, [r4, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8007500:	f104 0020 	add.w	r0, r4, #32
 8007504:	f00d f987 	bl	8014816 <sys_sem_signal>
 8007508:	e7b5      	b.n	8007476 <event_callback+0xfe>
    SYS_ARCH_UNPROTECT(lev);
 800750a:	4620      	mov	r0, r4
 800750c:	e749      	b.n	80073a2 <event_callback+0x2a>
}
 800750e:	b005      	add	sp, #20
 8007510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007514:	0802ba85 	.word	0x0802ba85
 8007518:	0802bc82 	.word	0x0802bc82
 800751c:	0802aecf 	.word	0x0802aecf
 8007520:	200068bc 	.word	0x200068bc

08007524 <lwip_getsockopt_callback>:
{
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("arg != NULL", arg != NULL);
 8007526:	4604      	mov	r4, r0
 8007528:	b930      	cbnz	r0, 8007538 <lwip_getsockopt_callback+0x14>
 800752a:	4b8f      	ldr	r3, [pc, #572]	; (8007768 <lwip_getsockopt_callback+0x244>)
 800752c:	498f      	ldr	r1, [pc, #572]	; (800776c <lwip_getsockopt_callback+0x248>)
 800752e:	4890      	ldr	r0, [pc, #576]	; (8007770 <lwip_getsockopt_callback+0x24c>)
 8007530:	f640 321b 	movw	r2, #2843	; 0xb1b
 8007534:	f015 faf8 	bl	801cb28 <iprintf>
  data->err = lwip_getsockopt_impl(data->s, data->level, data->optname,
 8007538:	e9d4 6300 	ldrd	r6, r3, [r4]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800753c:	2e03      	cmp	r6, #3
  data->err = lwip_getsockopt_impl(data->s, data->level, data->optname,
 800753e:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8007542:	f200 810e 	bhi.w	8007762 <lwip_getsockopt_callback+0x23e>
    if (sock->conn) {
 8007546:	4f8b      	ldr	r7, [pc, #556]	; (8007774 <lwip_getsockopt_callback+0x250>)
 8007548:	0136      	lsls	r6, r6, #4
 800754a:	59ba      	ldr	r2, [r7, r6]
 800754c:	2a00      	cmp	r2, #0
 800754e:	f000 8108 	beq.w	8007762 <lwip_getsockopt_callback+0x23e>
  switch (level) {
 8007552:	2b29      	cmp	r3, #41	; 0x29
 8007554:	f000 80fa 	beq.w	800774c <lwip_getsockopt_callback+0x228>
 8007558:	dc06      	bgt.n	8007568 <lwip_getsockopt_callback+0x44>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d07b      	beq.n	8007656 <lwip_getsockopt_callback+0x132>
 800755e:	2b06      	cmp	r3, #6
 8007560:	f000 80d4 	beq.w	800770c <lwip_getsockopt_callback+0x1e8>
            return ENOPROTOOPT;
 8007564:	235c      	movs	r3, #92	; 0x5c
 8007566:	e012      	b.n	800758e <lwip_getsockopt_callback+0x6a>
  switch (level) {
 8007568:	f640 71ff 	movw	r1, #4095	; 0xfff
 800756c:	428b      	cmp	r3, r1
 800756e:	d1f9      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
      switch (optname) {
 8007570:	f241 0307 	movw	r3, #4103	; 0x1007
 8007574:	4298      	cmp	r0, r3
 8007576:	d065      	beq.n	8007644 <lwip_getsockopt_callback+0x120>
 8007578:	dc0f      	bgt.n	800759a <lwip_getsockopt_callback+0x76>
 800757a:	2808      	cmp	r0, #8
 800757c:	d03c      	beq.n	80075f8 <lwip_getsockopt_callback+0xd4>
 800757e:	2820      	cmp	r0, #32
 8007580:	d035      	beq.n	80075ee <lwip_getsockopt_callback+0xca>
 8007582:	2802      	cmp	r0, #2
 8007584:	d1ee      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d81e      	bhi.n	80075ca <lwip_getsockopt_callback+0xa6>
 800758c:	2316      	movs	r3, #22
  sys_sem_signal((sys_sem_t *)(data->completed_sem));
 800758e:	69a0      	ldr	r0, [r4, #24]
  data->err = lwip_getsockopt_impl(data->s, data->level, data->optname,
 8007590:	6163      	str	r3, [r4, #20]
}
 8007592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  sys_sem_signal((sys_sem_t *)(data->completed_sem));
 8007596:	f00d b93e 	b.w	8014816 <sys_sem_signal>
 800759a:	f241 0308 	movw	r3, #4104	; 0x1008
 800759e:	4298      	cmp	r0, r3
 80075a0:	d03a      	beq.n	8007618 <lwip_getsockopt_callback+0xf4>
 80075a2:	f241 030a 	movw	r3, #4106	; 0x100a
 80075a6:	4298      	cmp	r0, r3
 80075a8:	d1dc      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d9ed      	bls.n	800758c <lwip_getsockopt_callback+0x68>
 80075b0:	6851      	ldr	r1, [r2, #4]
 80075b2:	2900      	cmp	r1, #0
 80075b4:	d0ea      	beq.n	800758c <lwip_getsockopt_callback+0x68>
 80075b6:	7813      	ldrb	r3, [r2, #0]
 80075b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d1d1      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
          *(int *)optval = udp_is_flag_set(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM) ? 1 : 0;
 80075c0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	e035      	b.n	8007636 <lwip_getsockopt_callback+0x112>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
 80075ca:	6851      	ldr	r1, [r2, #4]
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d0dd      	beq.n	800758c <lwip_getsockopt_callback+0x68>
          if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
 80075d0:	7813      	ldrb	r3, [r2, #0]
 80075d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d6:	2b10      	cmp	r3, #16
 80075d8:	d1c4      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
          if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
 80075da:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80075de:	2a01      	cmp	r2, #1
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	d101      	bne.n	80075ea <lwip_getsockopt_callback+0xc6>
          inet_addr_from_ip4addr((struct in_addr *)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
 80075e6:	602a      	str	r2, [r5, #0]
          break;
 80075e8:	e7d1      	b.n	800758e <lwip_getsockopt_callback+0x6a>
            *(int *)optval = 0;
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	e7cf      	b.n	800758e <lwip_getsockopt_callback+0x6a>
          if ((optname == SO_BROADCAST) &&
 80075ee:	7813      	ldrb	r3, [r2, #0]
 80075f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d1b5      	bne.n	8007564 <lwip_getsockopt_callback+0x40>
          optname = lwip_sockopt_to_ipopt(optname);
 80075f8:	f7ff fae6 	bl	8006bc8 <lwip_sockopt_to_ipopt>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d9c4      	bls.n	800758c <lwip_getsockopt_callback+0x68>
 8007602:	59bb      	ldr	r3, [r7, r6]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0c1      	beq.n	800758c <lwip_getsockopt_callback+0x68>
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0be      	beq.n	800758c <lwip_getsockopt_callback+0x68>
          *(int *)optval = ip_get_option(sock->conn->pcb.ip, optname);
 800760e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007612:	4018      	ands	r0, r3
          *(int *)optval = err_to_errno(netconn_err(sock->conn));
 8007614:	6028      	str	r0, [r5, #0]
          break;
 8007616:	e013      	b.n	8007640 <lwip_getsockopt_callback+0x11c>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	2b03      	cmp	r3, #3
 800761c:	d9b6      	bls.n	800758c <lwip_getsockopt_callback+0x68>
          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800761e:	7812      	ldrb	r2, [r2, #0]
 8007620:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
 8007624:	2b20      	cmp	r3, #32
 8007626:	d008      	beq.n	800763a <lwip_getsockopt_callback+0x116>
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	d003      	beq.n	8007634 <lwip_getsockopt_callback+0x110>
 800762c:	2b10      	cmp	r3, #16
 800762e:	d106      	bne.n	800763e <lwip_getsockopt_callback+0x11a>
              *(int *)optval = SOCK_STREAM;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <lwip_getsockopt_callback+0x112>
              *(int *)optval = SOCK_RAW;
 8007634:	2303      	movs	r3, #3
          *(int *)optval = (netconn_get_ipv6only(sock->conn) ? 1 : 0);
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	e002      	b.n	8007640 <lwip_getsockopt_callback+0x11c>
              *(int *)optval = SOCK_DGRAM;
 800763a:	2302      	movs	r3, #2
 800763c:	e7fb      	b.n	8007636 <lwip_getsockopt_callback+0x112>
          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800763e:	602a      	str	r2, [r5, #0]
  int err = 0;
 8007640:	2300      	movs	r3, #0
          break;
 8007642:	e7a4      	b.n	800758e <lwip_getsockopt_callback+0x6a>
          LWIP_SOCKOPT_CHECK_OPTLEN(sock, *optlen, int);
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d9a0      	bls.n	800758c <lwip_getsockopt_callback+0x68>
          *(int *)optval = err_to_errno(netconn_err(sock->conn));
 800764a:	4610      	mov	r0, r2
 800764c:	f7fd fdde 	bl	800520c <netconn_err>
 8007650:	f7ff f87c 	bl	800674c <err_to_errno>
 8007654:	e7de      	b.n	8007614 <lwip_getsockopt_callback+0xf0>
      switch (optname) {
 8007656:	3801      	subs	r0, #1
 8007658:	2806      	cmp	r0, #6
 800765a:	d883      	bhi.n	8007564 <lwip_getsockopt_callback+0x40>
 800765c:	a101      	add	r1, pc, #4	; (adr r1, 8007664 <lwip_getsockopt_callback+0x140>)
 800765e:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8007662:	bf00      	nop
 8007664:	08007695 	.word	0x08007695
 8007668:	08007681 	.word	0x08007681
 800766c:	08007565 	.word	0x08007565
 8007670:	08007565 	.word	0x08007565
 8007674:	080076ab 	.word	0x080076ab
 8007678:	080076cf 	.word	0x080076cf
 800767c:	080076ef 	.word	0x080076ef
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
 8007680:	6921      	ldr	r1, [r4, #16]
 8007682:	2903      	cmp	r1, #3
 8007684:	d982      	bls.n	800758c <lwip_getsockopt_callback+0x68>
 8007686:	6852      	ldr	r2, [r2, #4]
 8007688:	2a00      	cmp	r2, #0
 800768a:	f43f af7f 	beq.w	800758c <lwip_getsockopt_callback+0x68>
          *(int *)optval = sock->conn->pcb.ip->ttl;
 800768e:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8007692:	e7a8      	b.n	80075e6 <lwip_getsockopt_callback+0xc2>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
 8007694:	6921      	ldr	r1, [r4, #16]
 8007696:	2903      	cmp	r1, #3
 8007698:	f67f af78 	bls.w	800758c <lwip_getsockopt_callback+0x68>
 800769c:	6852      	ldr	r2, [r2, #4]
 800769e:	2a00      	cmp	r2, #0
 80076a0:	f43f af74 	beq.w	800758c <lwip_getsockopt_callback+0x68>
          *(int *)optval = sock->conn->pcb.ip->tos;
 80076a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80076a8:	e79d      	b.n	80075e6 <lwip_getsockopt_callback+0xc2>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
 80076aa:	6921      	ldr	r1, [r4, #16]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	f43f af6d 	beq.w	800758c <lwip_getsockopt_callback+0x68>
 80076b2:	6851      	ldr	r1, [r2, #4]
 80076b4:	2900      	cmp	r1, #0
 80076b6:	f43f af69 	beq.w	800758c <lwip_getsockopt_callback+0x68>
          if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80076c0:	2a20      	cmp	r2, #32
 80076c2:	f47f af4f 	bne.w	8007564 <lwip_getsockopt_callback+0x40>
          *(u8_t *)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
 80076c6:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
            *(u8_t *)optval = 0;
 80076ca:	702a      	strb	r2, [r5, #0]
 80076cc:	e75f      	b.n	800758e <lwip_getsockopt_callback+0x6a>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
 80076ce:	6921      	ldr	r1, [r4, #16]
 80076d0:	2903      	cmp	r1, #3
 80076d2:	f67f af5b 	bls.w	800758c <lwip_getsockopt_callback+0x68>
 80076d6:	6851      	ldr	r1, [r2, #4]
 80076d8:	2900      	cmp	r1, #0
 80076da:	f43f af57 	beq.w	800758c <lwip_getsockopt_callback+0x68>
          if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
 80076de:	7812      	ldrb	r2, [r2, #0]
 80076e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80076e4:	2a20      	cmp	r2, #32
 80076e6:	f47f af3d 	bne.w	8007564 <lwip_getsockopt_callback+0x40>
          inet_addr_from_ip4addr((struct in_addr *)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
 80076ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80076ec:	e77b      	b.n	80075e6 <lwip_getsockopt_callback+0xc2>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
 80076ee:	6921      	ldr	r1, [r4, #16]
 80076f0:	2900      	cmp	r1, #0
 80076f2:	f43f af4b 	beq.w	800758c <lwip_getsockopt_callback+0x68>
 80076f6:	6852      	ldr	r2, [r2, #4]
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	f43f af47 	beq.w	800758c <lwip_getsockopt_callback+0x68>
          if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
 80076fe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8007702:	f012 0208 	ands.w	r2, r2, #8
            *(u8_t *)optval = 1;
 8007706:	bf18      	it	ne
 8007708:	2201      	movne	r2, #1
 800770a:	e7de      	b.n	80076ca <lwip_getsockopt_callback+0x1a6>
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	2b03      	cmp	r3, #3
 8007710:	f67f af3c 	bls.w	800758c <lwip_getsockopt_callback+0x68>
 8007714:	6853      	ldr	r3, [r2, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f43f af38 	beq.w	800758c <lwip_getsockopt_callback+0x68>
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007722:	2a10      	cmp	r2, #16
 8007724:	f47f af1e 	bne.w	8007564 <lwip_getsockopt_callback+0x40>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 8007728:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800772c:	2a01      	cmp	r2, #1
 800772e:	f43f af2d 	beq.w	800758c <lwip_getsockopt_callback+0x68>
      switch (optname) {
 8007732:	2801      	cmp	r0, #1
 8007734:	d005      	beq.n	8007742 <lwip_getsockopt_callback+0x21e>
 8007736:	2802      	cmp	r0, #2
 8007738:	f47f af14 	bne.w	8007564 <lwip_getsockopt_callback+0x40>
          *(int *)optval = (int)sock->conn->pcb.tcp->keep_idle;
 800773c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007740:	e779      	b.n	8007636 <lwip_getsockopt_callback+0x112>
          *(int *)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
 8007742:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8007746:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800774a:	e774      	b.n	8007636 <lwip_getsockopt_callback+0x112>
      switch (optname) {
 800774c:	281b      	cmp	r0, #27
 800774e:	f47f af09 	bne.w	8007564 <lwip_getsockopt_callback+0x40>
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	2b03      	cmp	r3, #3
 8007756:	f67f af19 	bls.w	800758c <lwip_getsockopt_callback+0x68>
          *(int *)optval = (netconn_get_ipv6only(sock->conn) ? 1 : 0);
 800775a:	7f13      	ldrb	r3, [r2, #28]
 800775c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007760:	e769      	b.n	8007636 <lwip_getsockopt_callback+0x112>
    return EBADF;
 8007762:	2309      	movs	r3, #9
 8007764:	e713      	b.n	800758e <lwip_getsockopt_callback+0x6a>
 8007766:	bf00      	nop
 8007768:	0802ba85 	.word	0x0802ba85
 800776c:	0802bc38 	.word	0x0802bc38
 8007770:	0802aecf 	.word	0x0802aecf
 8007774:	200068bc 	.word	0x200068bc

08007778 <lwip_accept>:
{
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	b091      	sub	sp, #68	; 0x44
  u16_t port = 0;
 800777c:	2300      	movs	r3, #0
{
 800777e:	460f      	mov	r7, r1
 8007780:	4616      	mov	r6, r2
  u16_t port = 0;
 8007782:	f8ad 3006 	strh.w	r3, [sp, #6]
  sock = get_socket(s);
 8007786:	f7ff fb79 	bl	8006e7c <get_socket>
  if (!sock) {
 800778a:	4604      	mov	r4, r0
 800778c:	b920      	cbnz	r0, 8007798 <lwip_accept+0x20>
    return -1;
 800778e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007792:	4620      	mov	r0, r4
 8007794:	b011      	add	sp, #68	; 0x44
 8007796:	bdf0      	pop	{r4, r5, r6, r7, pc}
  err = netconn_accept(sock->conn, &newconn);
 8007798:	6800      	ldr	r0, [r0, #0]
 800779a:	a902      	add	r1, sp, #8
 800779c:	f7fd fd46 	bl	800522c <netconn_accept>
  if (err != ERR_OK) {
 80077a0:	4603      	mov	r3, r0
 80077a2:	b170      	cbz	r0, 80077c2 <lwip_accept+0x4a>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80077ac:	2a10      	cmp	r2, #16
 80077ae:	d003      	beq.n	80077b8 <lwip_accept+0x40>
      sock_set_errno(sock, EOPNOTSUPP);
 80077b0:	4b48      	ldr	r3, [pc, #288]	; (80078d4 <lwip_accept+0x15c>)
 80077b2:	225f      	movs	r2, #95	; 0x5f
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e7ea      	b.n	800778e <lwip_accept+0x16>
    } else if (err == ERR_CLSD) {
 80077b8:	330f      	adds	r3, #15
 80077ba:	d147      	bne.n	800784c <lwip_accept+0xd4>
      sock_set_errno(sock, EINVAL);
 80077bc:	4b45      	ldr	r3, [pc, #276]	; (80078d4 <lwip_accept+0x15c>)
 80077be:	2216      	movs	r2, #22
 80077c0:	e7f8      	b.n	80077b4 <lwip_accept+0x3c>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 80077c2:	9b02      	ldr	r3, [sp, #8]
 80077c4:	b933      	cbnz	r3, 80077d4 <lwip_accept+0x5c>
 80077c6:	4b44      	ldr	r3, [pc, #272]	; (80078d8 <lwip_accept+0x160>)
 80077c8:	4944      	ldr	r1, [pc, #272]	; (80078dc <lwip_accept+0x164>)
 80077ca:	4845      	ldr	r0, [pc, #276]	; (80078e0 <lwip_accept+0x168>)
 80077cc:	f240 228b 	movw	r2, #651	; 0x28b
 80077d0:	f015 f9aa 	bl	801cb28 <iprintf>
  newsock = alloc_socket(newconn, 1);
 80077d4:	9802      	ldr	r0, [sp, #8]
 80077d6:	2101      	movs	r1, #1
 80077d8:	f7ff f81c 	bl	8006814 <alloc_socket>
  if (newsock == -1) {
 80077dc:	1c43      	adds	r3, r0, #1
  newsock = alloc_socket(newconn, 1);
 80077de:	4604      	mov	r4, r0
  if (newsock == -1) {
 80077e0:	d106      	bne.n	80077f0 <lwip_accept+0x78>
    netconn_delete(newconn);
 80077e2:	9802      	ldr	r0, [sp, #8]
 80077e4:	f7fd fb66 	bl	8004eb4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 80077e8:	4b3a      	ldr	r3, [pc, #232]	; (80078d4 <lwip_accept+0x15c>)
 80077ea:	2217      	movs	r2, #23
 80077ec:	601a      	str	r2, [r3, #0]
    return -1;
 80077ee:	e7d0      	b.n	8007792 <lwip_accept+0x1a>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 80077f0:	2803      	cmp	r0, #3
 80077f2:	d906      	bls.n	8007802 <lwip_accept+0x8a>
 80077f4:	4b38      	ldr	r3, [pc, #224]	; (80078d8 <lwip_accept+0x160>)
 80077f6:	493b      	ldr	r1, [pc, #236]	; (80078e4 <lwip_accept+0x16c>)
 80077f8:	4839      	ldr	r0, [pc, #228]	; (80078e0 <lwip_accept+0x168>)
 80077fa:	f44f 7225 	mov.w	r2, #660	; 0x294
 80077fe:	f015 f993 	bl	801cb28 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8007802:	f00d f849 	bl	8014898 <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
 8007806:	9b02      	ldr	r3, [sp, #8]
 8007808:	699d      	ldr	r5, [r3, #24]
  newconn->socket = newsock;
 800780a:	619c      	str	r4, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800780c:	f00d f850 	bl	80148b0 <sys_arch_unprotect>
  if (newconn->callback) {
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	b11b      	cbz	r3, 800781e <lwip_accept+0xa6>
  recvevent = (s16_t)(-1 - newconn->socket);
 8007816:	43ed      	mvns	r5, r5
 8007818:	b22d      	sxth	r5, r5
    while (recvevent > 0) {
 800781a:	2d00      	cmp	r5, #0
 800781c:	dc1d      	bgt.n	800785a <lwip_accept+0xe2>
  if ((addr != NULL) && (addrlen != NULL)) {
 800781e:	2f00      	cmp	r7, #0
 8007820:	d0b7      	beq.n	8007792 <lwip_accept+0x1a>
 8007822:	2e00      	cmp	r6, #0
 8007824:	d0b5      	beq.n	8007792 <lwip_accept+0x1a>
    err = netconn_peer(newconn, &naddr, &port);
 8007826:	9802      	ldr	r0, [sp, #8]
 8007828:	2300      	movs	r3, #0
 800782a:	f10d 0206 	add.w	r2, sp, #6
 800782e:	a903      	add	r1, sp, #12
 8007830:	f7fd fb4e 	bl	8004ed0 <netconn_getaddr>
    if (err != ERR_OK) {
 8007834:	4605      	mov	r5, r0
 8007836:	b1b8      	cbz	r0, 8007868 <lwip_accept+0xf0>
      netconn_delete(newconn);
 8007838:	9802      	ldr	r0, [sp, #8]
 800783a:	f7fd fb3b 	bl	8004eb4 <netconn_delete>
      free_socket(nsock, 1);
 800783e:	482a      	ldr	r0, [pc, #168]	; (80078e8 <lwip_accept+0x170>)
 8007840:	2101      	movs	r1, #1
 8007842:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8007846:	f7ff fa83 	bl	8006d50 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800784a:	4628      	mov	r0, r5
 800784c:	f7fe ff7e 	bl	800674c <err_to_errno>
 8007850:	2800      	cmp	r0, #0
 8007852:	d09c      	beq.n	800778e <lwip_accept+0x16>
 8007854:	4b1f      	ldr	r3, [pc, #124]	; (80078d4 <lwip_accept+0x15c>)
 8007856:	6018      	str	r0, [r3, #0]
      return -1;
 8007858:	e799      	b.n	800778e <lwip_accept+0x16>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800785a:	9802      	ldr	r0, [sp, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007860:	4611      	mov	r1, r2
      recvevent--;
 8007862:	3d01      	subs	r5, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8007864:	4798      	blx	r3
 8007866:	e7d8      	b.n	800781a <lwip_accept+0xa2>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8007868:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800786c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007870:	2b2e      	cmp	r3, #46	; 0x2e
 8007872:	d001      	beq.n	8007878 <lwip_accept+0x100>
 8007874:	2b06      	cmp	r3, #6
 8007876:	d120      	bne.n	80078ba <lwip_accept+0x142>
 8007878:	f640 231c 	movw	r3, #2588	; 0xa1c
 800787c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8007880:	f006 fc0e 	bl	800e0a0 <lwip_htons>
 8007884:	2300      	movs	r3, #0
 8007886:	930a      	str	r3, [sp, #40]	; 0x28
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	930b      	str	r3, [sp, #44]	; 0x2c
 800788c:	9b04      	ldr	r3, [sp, #16]
 800788e:	930c      	str	r3, [sp, #48]	; 0x30
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	930d      	str	r3, [sp, #52]	; 0x34
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	930e      	str	r3, [sp, #56]	; 0x38
 8007898:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800789c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80078a0:	930f      	str	r3, [sp, #60]	; 0x3c
    if (*addrlen > tempaddr.sa.sa_len) {
 80078a2:	6832      	ldr	r2, [r6, #0]
 80078a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80078a8:	429a      	cmp	r2, r3
      *addrlen = tempaddr.sa.sa_len;
 80078aa:	bf88      	it	hi
 80078ac:	6033      	strhi	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 80078ae:	6832      	ldr	r2, [r6, #0]
 80078b0:	a909      	add	r1, sp, #36	; 0x24
 80078b2:	4638      	mov	r0, r7
 80078b4:	f014 fcc4 	bl	801c240 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
 80078b8:	e76b      	b.n	8007792 <lwip_accept+0x1a>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 80078ba:	f44f 7304 	mov.w	r3, #528	; 0x210
 80078be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80078c2:	f006 fbed 	bl	800e0a0 <lwip_htons>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80078cc:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 80078d0:	950c      	str	r5, [sp, #48]	; 0x30
 80078d2:	e7e6      	b.n	80078a2 <lwip_accept+0x12a>
 80078d4:	20016130 	.word	0x20016130
 80078d8:	0802ba85 	.word	0x0802ba85
 80078dc:	0802bc90 	.word	0x0802bc90
 80078e0:	0802aecf 	.word	0x0802aecf
 80078e4:	0802bca0 	.word	0x0802bca0
 80078e8:	200068bc 	.word	0x200068bc

080078ec <lwip_bind>:
{
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	460e      	mov	r6, r1
 80078f2:	4615      	mov	r5, r2
  sock = get_socket(s);
 80078f4:	f7ff fac2 	bl	8006e7c <get_socket>
  if (!sock) {
 80078f8:	4604      	mov	r4, r0
 80078fa:	b910      	cbnz	r0, 8007902 <lwip_bind+0x16>
    return -1;
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e041      	b.n	8007986 <lwip_bind+0x9a>
  if (!SOCK_ADDR_TYPE_MATCH(name, sock)) {
 8007902:	784b      	ldrb	r3, [r1, #1]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d111      	bne.n	800792c <lwip_bind+0x40>
 8007908:	6803      	ldr	r3, [r0, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	0719      	lsls	r1, r3, #28
 800790e:	d413      	bmi.n	8007938 <lwip_bind+0x4c>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8007910:	2d10      	cmp	r5, #16
 8007912:	d13a      	bne.n	800798a <lwip_bind+0x9e>
 8007914:	07b3      	lsls	r3, r6, #30
 8007916:	d018      	beq.n	800794a <lwip_bind+0x5e>
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <lwip_bind+0xa4>)
 800791a:	491e      	ldr	r1, [pc, #120]	; (8007994 <lwip_bind+0xa8>)
 800791c:	481e      	ldr	r0, [pc, #120]	; (8007998 <lwip_bind+0xac>)
 800791e:	f240 22e2 	movw	r2, #738	; 0x2e2
 8007922:	f015 f901 	bl	801cb28 <iprintf>
 8007926:	f06f 000f 	mvn.w	r0, #15
 800792a:	e007      	b.n	800793c <lwip_bind+0x50>
  if (!SOCK_ADDR_TYPE_MATCH(name, sock)) {
 800792c:	2b0a      	cmp	r3, #10
 800792e:	d103      	bne.n	8007938 <lwip_bind+0x4c>
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	071a      	lsls	r2, r3, #28
 8007936:	d4eb      	bmi.n	8007910 <lwip_bind+0x24>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
 8007938:	f06f 0005 	mvn.w	r0, #5
    sock_set_errno(sock, err_to_errno(err));
 800793c:	f7fe ff06 	bl	800674c <err_to_errno>
 8007940:	2800      	cmp	r0, #0
 8007942:	d0db      	beq.n	80078fc <lwip_bind+0x10>
 8007944:	4b15      	ldr	r3, [pc, #84]	; (800799c <lwip_bind+0xb0>)
 8007946:	6018      	str	r0, [r3, #0]
 8007948:	e7d8      	b.n	80078fc <lwip_bind+0x10>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800794a:	f10d 0206 	add.w	r2, sp, #6
 800794e:	a902      	add	r1, sp, #8
 8007950:	4630      	mov	r0, r6
 8007952:	f7ff f94f 	bl	8006bf4 <sockaddr_to_ipaddr_port>
  if (IP_IS_V6_VAL(local_addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&local_addr))) {
 8007956:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d10b      	bne.n	8007976 <lwip_bind+0x8a>
 800795e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	d107      	bne.n	8007976 <lwip_bind+0x8a>
 8007966:	9a04      	ldr	r2, [sp, #16]
 8007968:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
 800796c:	bf02      	ittt	eq
 800796e:	9a05      	ldreq	r2, [sp, #20]
 8007970:	9202      	streq	r2, [sp, #8]
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
 8007972:	f88d 301c 	strbeq.w	r3, [sp, #28]
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8007976:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	a902      	add	r1, sp, #8
 800797e:	f7fd fad9 	bl	8004f34 <netconn_bind>
  if (err != ERR_OK) {
 8007982:	2800      	cmp	r0, #0
 8007984:	d1da      	bne.n	800793c <lwip_bind+0x50>
}
 8007986:	b008      	add	sp, #32
 8007988:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800798a:	2d1c      	cmp	r5, #28
 800798c:	d0c2      	beq.n	8007914 <lwip_bind+0x28>
 800798e:	e7c3      	b.n	8007918 <lwip_bind+0x2c>
 8007990:	0802ba85 	.word	0x0802ba85
 8007994:	0802bcb5 	.word	0x0802bcb5
 8007998:	0802aecf 	.word	0x0802aecf
 800799c:	20016130 	.word	0x20016130

080079a0 <lwip_close>:
{
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	b086      	sub	sp, #24
 80079a6:	4604      	mov	r4, r0
  sock = get_socket(s);
 80079a8:	f7ff fa68 	bl	8006e7c <get_socket>
  if (!sock) {
 80079ac:	4606      	mov	r6, r0
 80079ae:	b920      	cbnz	r0, 80079ba <lwip_close+0x1a>
    return -1;
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079b4:	b006      	add	sp, #24
 80079b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sock->conn != NULL) {
 80079ba:	6805      	ldr	r5, [r0, #0]
 80079bc:	2d00      	cmp	r5, #0
 80079be:	d042      	beq.n	8007a46 <lwip_close+0xa6>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80079c0:	782d      	ldrb	r5, [r5, #0]
 80079c2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80079c6:	f1a5 0310 	sub.w	r3, r5, #16
 80079ca:	425d      	negs	r5, r3
 80079cc:	415d      	adcs	r5, r3
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_mld6_memberships(int s)
{
  struct lwip_sock *sock = get_socket(s);
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7ff fa54 	bl	8006e7c <get_socket>
  int i;

  if (!sock) {
 80079d4:	4680      	mov	r8, r0
 80079d6:	b350      	cbz	r0, 8007a2e <lwip_close+0x8e>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 80079d8:	f04f 0900 	mov.w	r9, #0
 80079dc:	4c23      	ldr	r4, [pc, #140]	; (8007a6c <lwip_close+0xcc>)
    if (socket_ipv6_multicast_memberships[i].sock == sock) {
      ip_addr_t multi_addr;
      u8_t if_idx;

      ip_addr_copy_from_ip6(multi_addr, socket_ipv6_multicast_memberships[i].multi_addr);
 80079de:	f04f 0a06 	mov.w	sl, #6
      if_idx = socket_ipv6_multicast_memberships[i].if_idx;

      socket_ipv6_multicast_memberships[i].sock   = NULL;
 80079e2:	464f      	mov	r7, r9
    if (socket_ipv6_multicast_memberships[i].sock == sock) {
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	4598      	cmp	r8, r3
 80079e8:	d11a      	bne.n	8007a20 <lwip_close+0x80>
      ip_addr_copy_from_ip6(multi_addr, socket_ipv6_multicast_memberships[i].multi_addr);
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	68e3      	ldr	r3, [r4, #12]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	6963      	ldr	r3, [r4, #20]
      if_idx = socket_ipv6_multicast_memberships[i].if_idx;
 80079f8:	7922      	ldrb	r2, [r4, #4]
      ip_addr_copy_from_ip6(multi_addr, socket_ipv6_multicast_memberships[i].multi_addr);
 80079fa:	9303      	str	r3, [sp, #12]
 80079fc:	f88d a014 	strb.w	sl, [sp, #20]
 8007a00:	7e23      	ldrb	r3, [r4, #24]
      socket_ipv6_multicast_memberships[i].if_idx = NETIF_NO_INDEX;
 8007a02:	7127      	strb	r7, [r4, #4]
      ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
 8007a04:	7627      	strb	r7, [r4, #24]
      ip_addr_copy_from_ip6(multi_addr, socket_ipv6_multicast_memberships[i].multi_addr);
 8007a06:	f88d 3010 	strb.w	r3, [sp, #16]
      ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
 8007a0a:	e9c4 7702 	strd	r7, r7, [r4, #8]
 8007a0e:	e9c4 7704 	strd	r7, r7, [r4, #16]

      netconn_join_leave_group_netif(sock->conn, &multi_addr, if_idx, NETCONN_LEAVE);
 8007a12:	f8d8 0000 	ldr.w	r0, [r8]
      socket_ipv6_multicast_memberships[i].sock   = NULL;
 8007a16:	6027      	str	r7, [r4, #0]
      netconn_join_leave_group_netif(sock->conn, &multi_addr, if_idx, NETCONN_LEAVE);
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4669      	mov	r1, sp
 8007a1c:	f7fd fd6e 	bl	80054fc <netconn_join_leave_group_netif>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 8007a20:	f109 0901 	add.w	r9, r9, #1
 8007a24:	f1b9 0f04 	cmp.w	r9, #4
 8007a28:	f104 041c 	add.w	r4, r4, #28
 8007a2c:	d1da      	bne.n	80079e4 <lwip_close+0x44>
  err = netconn_prepare_delete(sock->conn);
 8007a2e:	6830      	ldr	r0, [r6, #0]
 8007a30:	f7fd fa30 	bl	8004e94 <netconn_prepare_delete>
  if (err != ERR_OK) {
 8007a34:	4604      	mov	r4, r0
 8007a36:	b190      	cbz	r0, 8007a5e <lwip_close+0xbe>
    sock_set_errno(sock, err_to_errno(err));
 8007a38:	f7fe fe88 	bl	800674c <err_to_errno>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d0b7      	beq.n	80079b0 <lwip_close+0x10>
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <lwip_close+0xd0>)
 8007a42:	6018      	str	r0, [r3, #0]
 8007a44:	e7b4      	b.n	80079b0 <lwip_close+0x10>
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8007a46:	6843      	ldr	r3, [r0, #4]
 8007a48:	b13b      	cbz	r3, 8007a5a <lwip_close+0xba>
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <lwip_close+0xd4>)
 8007a4c:	490a      	ldr	r1, [pc, #40]	; (8007a78 <lwip_close+0xd8>)
 8007a4e:	480b      	ldr	r0, [pc, #44]	; (8007a7c <lwip_close+0xdc>)
 8007a50:	f44f 7245 	mov.w	r2, #788	; 0x314
 8007a54:	f015 f868 	bl	801cb28 <iprintf>
 8007a58:	e7b9      	b.n	80079ce <lwip_close+0x2e>
  int is_tcp = 0;
 8007a5a:	461d      	mov	r5, r3
 8007a5c:	e7b7      	b.n	80079ce <lwip_close+0x2e>
  free_socket(sock, is_tcp);
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7ff f975 	bl	8006d50 <free_socket>
  return 0;
 8007a66:	4620      	mov	r0, r4
 8007a68:	e7a4      	b.n	80079b4 <lwip_close+0x14>
 8007a6a:	bf00      	nop
 8007a6c:	20006904 	.word	0x20006904
 8007a70:	20016130 	.word	0x20016130
 8007a74:	0802ba85 	.word	0x0802ba85
 8007a78:	0802bcd0 	.word	0x0802bcd0
 8007a7c:	0802aecf 	.word	0x0802aecf

08007a80 <lwip_connect>:
{
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	460d      	mov	r5, r1
 8007a86:	4611      	mov	r1, r2
  sock = get_socket(s);
 8007a88:	f7ff f9f8 	bl	8006e7c <get_socket>
  if (!sock) {
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	b918      	cbnz	r0, 8007a98 <lwip_connect+0x18>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a94:	b009      	add	sp, #36	; 0x24
 8007a96:	bd30      	pop	{r4, r5, pc}
  if (!SOCK_ADDR_TYPE_MATCH_OR_UNSPEC(name, sock)) {
 8007a98:	786b      	ldrb	r3, [r5, #1]
 8007a9a:	b343      	cbz	r3, 8007aee <lwip_connect+0x6e>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d117      	bne.n	8007ad0 <lwip_connect+0x50>
 8007aa0:	6802      	ldr	r2, [r0, #0]
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	0710      	lsls	r0, r2, #28
 8007aa6:	d419      	bmi.n	8007adc <lwip_connect+0x5c>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8007aa8:	2910      	cmp	r1, #16
 8007aaa:	d005      	beq.n	8007ab8 <lwip_connect+0x38>
 8007aac:	291c      	cmp	r1, #28
 8007aae:	d105      	bne.n	8007abc <lwip_connect+0x3c>
 8007ab0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d101      	bne.n	8007abc <lwip_connect+0x3c>
 8007ab8:	07ab      	lsls	r3, r5, #30
 8007aba:	d01e      	beq.n	8007afa <lwip_connect+0x7a>
 8007abc:	4b1d      	ldr	r3, [pc, #116]	; (8007b34 <lwip_connect+0xb4>)
 8007abe:	491e      	ldr	r1, [pc, #120]	; (8007b38 <lwip_connect+0xb8>)
 8007ac0:	481e      	ldr	r0, [pc, #120]	; (8007b3c <lwip_connect+0xbc>)
 8007ac2:	f240 3247 	movw	r2, #839	; 0x347
 8007ac6:	f015 f82f 	bl	801cb28 <iprintf>
 8007aca:	f06f 000f 	mvn.w	r0, #15
 8007ace:	e007      	b.n	8007ae0 <lwip_connect+0x60>
  if (!SOCK_ADDR_TYPE_MATCH_OR_UNSPEC(name, sock)) {
 8007ad0:	2b0a      	cmp	r3, #10
 8007ad2:	d103      	bne.n	8007adc <lwip_connect+0x5c>
 8007ad4:	6802      	ldr	r2, [r0, #0]
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	0712      	lsls	r2, r2, #28
 8007ada:	d4e5      	bmi.n	8007aa8 <lwip_connect+0x28>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
 8007adc:	f06f 0005 	mvn.w	r0, #5
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8007ae0:	f7fe fe34 	bl	800674c <err_to_errno>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d0d3      	beq.n	8007a90 <lwip_connect+0x10>
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <lwip_connect+0xc0>)
 8007aea:	6018      	str	r0, [r3, #0]
 8007aec:	e7d0      	b.n	8007a90 <lwip_connect+0x10>
    err = netconn_disconnect(sock->conn);
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	f7fd fa96 	bl	8005020 <netconn_disconnect>
  if (err != ERR_OK) {
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0cd      	beq.n	8007a94 <lwip_connect+0x14>
 8007af8:	e7f2      	b.n	8007ae0 <lwip_connect+0x60>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8007afa:	f10d 0206 	add.w	r2, sp, #6
 8007afe:	a902      	add	r1, sp, #8
 8007b00:	4628      	mov	r0, r5
 8007b02:	f7ff f877 	bl	8006bf4 <sockaddr_to_ipaddr_port>
    if (IP_IS_V6_VAL(remote_addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&remote_addr))) {
 8007b06:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007b0a:	2b06      	cmp	r3, #6
 8007b0c:	d10b      	bne.n	8007b26 <lwip_connect+0xa6>
 8007b0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d107      	bne.n	8007b26 <lwip_connect+0xa6>
 8007b16:	9a04      	ldr	r2, [sp, #16]
 8007b18:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
 8007b1c:	bf02      	ittt	eq
 8007b1e:	9a05      	ldreq	r2, [sp, #20]
 8007b20:	9202      	streq	r2, [sp, #8]
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
 8007b22:	f88d 301c 	strbeq.w	r3, [sp, #28]
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8007b26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	a902      	add	r1, sp, #8
 8007b2e:	f7fd fa51 	bl	8004fd4 <netconn_connect>
 8007b32:	e7df      	b.n	8007af4 <lwip_connect+0x74>
 8007b34:	0802ba85 	.word	0x0802ba85
 8007b38:	0802bce7 	.word	0x0802bce7
 8007b3c:	0802aecf 	.word	0x0802aecf
 8007b40:	20016130 	.word	0x20016130

08007b44 <lwip_listen>:
{
 8007b44:	b510      	push	{r4, lr}
  sock = get_socket(s);
 8007b46:	f7ff f999 	bl	8006e7c <get_socket>
  if (!sock) {
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	b910      	cbnz	r0, 8007b54 <lwip_listen+0x10>
    return -1;
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b52:	bd10      	pop	{r4, pc}
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8007b54:	f381 0108 	usat	r1, #8, r1
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	b2c9      	uxtb	r1, r1
 8007b5c:	f7fd fa7e 	bl	800505c <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d0f6      	beq.n	8007b52 <lwip_listen+0xe>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d003      	beq.n	8007b78 <lwip_listen+0x34>
      sock_set_errno(sock, EOPNOTSUPP);
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <lwip_listen+0x44>)
 8007b72:	225f      	movs	r2, #95	; 0x5f
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e7ea      	b.n	8007b4e <lwip_listen+0xa>
      sock_set_errno(sock, err_to_errno(err));
 8007b78:	f7fe fde8 	bl	800674c <err_to_errno>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0e6      	beq.n	8007b4e <lwip_listen+0xa>
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <lwip_listen+0x44>)
 8007b82:	6018      	str	r0, [r3, #0]
 8007b84:	e7e3      	b.n	8007b4e <lwip_listen+0xa>
 8007b86:	bf00      	nop
 8007b88:	20016130 	.word	0x20016130

08007b8c <lwip_recvfrom>:
{
 8007b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b90:	b08c      	sub	sp, #48	; 0x30
 8007b92:	e9dd 8512 	ldrd	r8, r5, [sp, #72]	; 0x48
 8007b96:	460c      	mov	r4, r1
 8007b98:	4617      	mov	r7, r2
 8007b9a:	4619      	mov	r1, r3
  sock = get_socket(s);
 8007b9c:	f7ff f96e 	bl	8006e7c <get_socket>
  if (!sock) {
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d03e      	beq.n	8007c24 <lwip_recvfrom+0x98>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8007ba6:	6803      	ldr	r3, [r0, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bae:	2b10      	cmp	r3, #16
 8007bb0:	d11b      	bne.n	8007bea <lwip_recvfrom+0x5e>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	f7fe ff5a 	bl	8006a70 <lwip_recv_tcp>
 8007bbc:	4604      	mov	r4, r0
  if (from && fromlen)
 8007bbe:	f1b8 0f00 	cmp.w	r8, #0
 8007bc2:	d00e      	beq.n	8007be2 <lwip_recvfrom+0x56>
 8007bc4:	b16d      	cbz	r5, 8007be2 <lwip_recvfrom+0x56>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	aa03      	add	r2, sp, #12
 8007bca:	a905      	add	r1, sp, #20
 8007bcc:	6830      	ldr	r0, [r6, #0]
 8007bce:	f7fd f97f 	bl	8004ed0 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8007bd2:	9500      	str	r5, [sp, #0]
 8007bd4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8007bd8:	6830      	ldr	r0, [r6, #0]
 8007bda:	4643      	mov	r3, r8
 8007bdc:	a905      	add	r1, sp, #20
 8007bde:	f7ff f83d 	bl	8006c5c <lwip_sock_make_addr.isra.0>
}
 8007be2:	4620      	mov	r0, r4
 8007be4:	b00c      	add	sp, #48	; 0x30
 8007be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    u16_t datagram_len = 0;
 8007bea:	2300      	movs	r3, #0
    msg.msg_controllen = 0;
 8007bec:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    u16_t datagram_len = 0;
 8007bf0:	f8ad 300a 	strh.w	r3, [sp, #10]
    msg.msg_flags = 0;
 8007bf4:	930b      	str	r3, [sp, #44]	; 0x2c
    msg.msg_iov = &vec;
 8007bf6:	ab03      	add	r3, sp, #12
 8007bf8:	9307      	str	r3, [sp, #28]
    msg.msg_iovlen = 1;
 8007bfa:	2301      	movs	r3, #1
    vec.iov_len = len;
 8007bfc:	e9cd 4703 	strd	r4, r7, [sp, #12]
    msg.msg_iovlen = 1;
 8007c00:	9308      	str	r3, [sp, #32]
    msg.msg_name = from;
 8007c02:	f8cd 8014 	str.w	r8, [sp, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8007c06:	b185      	cbz	r5, 8007c2a <lwip_recvfrom+0x9e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	9306      	str	r3, [sp, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8007c0c:	aa05      	add	r2, sp, #20
 8007c0e:	f10d 030a 	add.w	r3, sp, #10
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff f8b8 	bl	8006d88 <lwip_recvfrom_udp_raw.isra.0>
    if (err != ERR_OK) {
 8007c18:	b148      	cbz	r0, 8007c2e <lwip_recvfrom+0xa2>
      sock_set_errno(sock, err_to_errno(err));
 8007c1a:	f7fe fd97 	bl	800674c <err_to_errno>
 8007c1e:	b108      	cbz	r0, 8007c24 <lwip_recvfrom+0x98>
 8007c20:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <lwip_recvfrom+0xb8>)
 8007c22:	6018      	str	r0, [r3, #0]
    return -1;
 8007c24:	f04f 34ff 	mov.w	r4, #4294967295
 8007c28:	e7db      	b.n	8007be2 <lwip_recvfrom+0x56>
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	e7ed      	b.n	8007c0a <lwip_recvfrom+0x7e>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8007c2e:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 8007c32:	42bc      	cmp	r4, r7
 8007c34:	bf28      	it	cs
 8007c36:	463c      	movcs	r4, r7
    if (fromlen) {
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	d0d2      	beq.n	8007be2 <lwip_recvfrom+0x56>
      *fromlen = msg.msg_namelen;
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	602b      	str	r3, [r5, #0]
  return ret;
 8007c40:	e7cf      	b.n	8007be2 <lwip_recvfrom+0x56>
 8007c42:	bf00      	nop
 8007c44:	20016130 	.word	0x20016130

08007c48 <lwip_read>:
{
 8007c48:	b507      	push	{r0, r1, r2, lr}
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e9cd 3300 	strd	r3, r3, [sp]
 8007c50:	f7ff ff9c 	bl	8007b8c <lwip_recvfrom>
}
 8007c54:	b003      	add	sp, #12
 8007c56:	f85d fb04 	ldr.w	pc, [sp], #4

08007c5a <lwip_recv>:
{
 8007c5a:	b513      	push	{r0, r1, r4, lr}
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8007c5c:	2400      	movs	r4, #0
 8007c5e:	e9cd 4400 	strd	r4, r4, [sp]
 8007c62:	f7ff ff93 	bl	8007b8c <lwip_recvfrom>
}
 8007c66:	b002      	add	sp, #8
 8007c68:	bd10      	pop	{r4, pc}
	...

08007c6c <lwip_recvmsg>:
{
 8007c6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	4617      	mov	r7, r2
  LWIP_ERROR("lwip_recvmsg: invalid message pointer", message != NULL, return ERR_ARG;);
 8007c72:	460d      	mov	r5, r1
 8007c74:	b961      	cbnz	r1, 8007c90 <lwip_recvmsg+0x24>
 8007c76:	4b43      	ldr	r3, [pc, #268]	; (8007d84 <lwip_recvmsg+0x118>)
 8007c78:	4943      	ldr	r1, [pc, #268]	; (8007d88 <lwip_recvmsg+0x11c>)
 8007c7a:	4844      	ldr	r0, [pc, #272]	; (8007d8c <lwip_recvmsg+0x120>)
 8007c7c:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8007c80:	f014 ff52 	bl	801cb28 <iprintf>
 8007c84:	f06f 040f 	mvn.w	r4, #15
}
 8007c88:	4620      	mov	r0, r4
 8007c8a:	b002      	add	sp, #8
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("lwip_recvmsg: unsupported flags", (flags & ~(MSG_PEEK|MSG_DONTWAIT)) == 0,
 8007c90:	f032 0409 	bics.w	r4, r2, #9
 8007c94:	d00c      	beq.n	8007cb0 <lwip_recvmsg+0x44>
 8007c96:	4b3b      	ldr	r3, [pc, #236]	; (8007d84 <lwip_recvmsg+0x118>)
 8007c98:	493d      	ldr	r1, [pc, #244]	; (8007d90 <lwip_recvmsg+0x124>)
 8007c9a:	483c      	ldr	r0, [pc, #240]	; (8007d8c <lwip_recvmsg+0x120>)
 8007c9c:	f240 5209 	movw	r2, #1289	; 0x509
 8007ca0:	f014 ff42 	bl	801cb28 <iprintf>
 8007ca4:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <lwip_recvmsg+0x128>)
 8007ca6:	225f      	movs	r2, #95	; 0x5f
    set_errno(EMSGSIZE);
 8007ca8:	601a      	str	r2, [r3, #0]
      return -1;
 8007caa:	f04f 34ff 	mov.w	r4, #4294967295
 8007cae:	e7eb      	b.n	8007c88 <lwip_recvmsg+0x1c>
  if ((message->msg_iovlen <= 0) || (message->msg_iovlen > IOV_MAX)) {
 8007cb0:	68cb      	ldr	r3, [r1, #12]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb8:	d302      	bcc.n	8007cc0 <lwip_recvmsg+0x54>
    set_errno(EMSGSIZE);
 8007cba:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <lwip_recvmsg+0x128>)
 8007cbc:	225a      	movs	r2, #90	; 0x5a
 8007cbe:	e7f3      	b.n	8007ca8 <lwip_recvmsg+0x3c>
  sock = get_socket(s);
 8007cc0:	f7ff f8dc 	bl	8006e7c <get_socket>
  if (!sock) {
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0ef      	beq.n	8007caa <lwip_recvmsg+0x3e>
  for (i = 0; i < message->msg_iovlen; i++) {
 8007cca:	68c9      	ldr	r1, [r1, #12]
  buflen = 0;
 8007ccc:	46a1      	mov	r9, r4
  for (i = 0; i < message->msg_iovlen; i++) {
 8007cce:	4623      	mov	r3, r4
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	dc29      	bgt.n	8007d28 <lwip_recvmsg+0xbc>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	f04f 0600 	mov.w	r6, #0
 8007ce4:	d13a      	bne.n	8007d5c <lwip_recvmsg+0xf0>
    message->msg_flags = 0;
 8007ce6:	61ae      	str	r6, [r5, #24]
          (flags & MSG_PEEK)) {
 8007ce8:	f007 0901 	and.w	r9, r7, #1
    for (i = 0; i < message->msg_iovlen; i++) {
 8007cec:	68eb      	ldr	r3, [r5, #12]
 8007cee:	42b3      	cmp	r3, r6
 8007cf0:	ddca      	ble.n	8007c88 <lwip_recvmsg+0x1c>
      ssize_t recvd_local = lwip_recv_tcp(sock, message->msg_iov[i].iov_base, message->msg_iov[i].iov_len, recv_flags);
 8007cf2:	68a9      	ldr	r1, [r5, #8]
 8007cf4:	eb01 02c6 	add.w	r2, r1, r6, lsl #3
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	6852      	ldr	r2, [r2, #4]
 8007cfc:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
 8007d00:	4640      	mov	r0, r8
 8007d02:	f7fe feb5 	bl	8006a70 <lwip_recv_tcp>
      if (recvd_local > 0) {
 8007d06:	2800      	cmp	r0, #0
 8007d08:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8007d0c:	dd21      	ble.n	8007d52 <lwip_recvmsg+0xe6>
        buflen += recvd_local;
 8007d0e:	4404      	add	r4, r0
      if ((recvd_local < 0) || (recvd_local < (int)message->msg_iov[i].iov_len) ||
 8007d10:	68ab      	ldr	r3, [r5, #8]
 8007d12:	4453      	add	r3, sl
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	4283      	cmp	r3, r0
 8007d18:	dc1c      	bgt.n	8007d54 <lwip_recvmsg+0xe8>
 8007d1a:	f1b9 0f00 	cmp.w	r9, #0
 8007d1e:	d119      	bne.n	8007d54 <lwip_recvmsg+0xe8>
      recv_flags |= MSG_DONTWAIT;
 8007d20:	f047 0708 	orr.w	r7, r7, #8
    for (i = 0; i < message->msg_iovlen; i++) {
 8007d24:	3601      	adds	r6, #1
 8007d26:	e7e1      	b.n	8007cec <lwip_recvmsg+0x80>
    if ((message->msg_iov[i].iov_base == NULL) || ((ssize_t)message->msg_iov[i].iov_len <= 0) ||
 8007d28:	68aa      	ldr	r2, [r5, #8]
 8007d2a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8007d2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d32:	b12a      	cbz	r2, 8007d40 <lwip_recvmsg+0xd4>
 8007d34:	6842      	ldr	r2, [r0, #4]
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd02      	ble.n	8007d40 <lwip_recvmsg+0xd4>
        ((ssize_t)(buflen + (ssize_t)message->msg_iov[i].iov_len) <= 0)) {
 8007d3a:	4491      	add	r9, r2
  for (i = 0; i < message->msg_iovlen; i++) {
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	e7c7      	b.n	8007cd0 <lwip_recvmsg+0x64>
      sock_set_errno(sock, err_to_errno(ERR_VAL));
 8007d40:	f06f 0005 	mvn.w	r0, #5
      sock_set_errno(sock, err_to_errno(err));
 8007d44:	f7fe fd02 	bl	800674c <err_to_errno>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0ae      	beq.n	8007caa <lwip_recvmsg+0x3e>
 8007d4c:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <lwip_recvmsg+0x128>)
 8007d4e:	6018      	str	r0, [r3, #0]
 8007d50:	e7ab      	b.n	8007caa <lwip_recvmsg+0x3e>
      if ((recvd_local < 0) || (recvd_local < (int)message->msg_iov[i].iov_len) ||
 8007d52:	d0dd      	beq.n	8007d10 <lwip_recvmsg+0xa4>
        if (buflen <= 0) {
 8007d54:	2c00      	cmp	r4, #0
 8007d56:	bf08      	it	eq
 8007d58:	4604      	moveq	r4, r0
 8007d5a:	e795      	b.n	8007c88 <lwip_recvmsg+0x1c>
    err = lwip_recvfrom_udp_raw(sock, flags, message, &datagram_len, s);
 8007d5c:	f10d 0306 	add.w	r3, sp, #6
 8007d60:	462a      	mov	r2, r5
 8007d62:	4639      	mov	r1, r7
 8007d64:	4640      	mov	r0, r8
    u16_t datagram_len = 0;
 8007d66:	f8ad 6006 	strh.w	r6, [sp, #6]
    err = lwip_recvfrom_udp_raw(sock, flags, message, &datagram_len, s);
 8007d6a:	f7ff f80d 	bl	8006d88 <lwip_recvfrom_udp_raw.isra.0>
    if (err != ERR_OK) {
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d1e8      	bne.n	8007d44 <lwip_recvmsg+0xd8>
    if (datagram_len > buflen) {
 8007d72:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8007d76:	454c      	cmp	r4, r9
 8007d78:	dd86      	ble.n	8007c88 <lwip_recvmsg+0x1c>
      message->msg_flags |= MSG_TRUNC;
 8007d7a:	69ab      	ldr	r3, [r5, #24]
 8007d7c:	f043 0304 	orr.w	r3, r3, #4
 8007d80:	61ab      	str	r3, [r5, #24]
 8007d82:	e781      	b.n	8007c88 <lwip_recvmsg+0x1c>
 8007d84:	0802ba85 	.word	0x0802ba85
 8007d88:	0802bd05 	.word	0x0802bd05
 8007d8c:	0802aecf 	.word	0x0802aecf
 8007d90:	0802bd2b 	.word	0x0802bd2b
 8007d94:	20016130 	.word	0x20016130

08007d98 <lwip_sendmsg>:
{
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	b08c      	sub	sp, #48	; 0x30
 8007d9e:	460d      	mov	r5, r1
 8007da0:	4616      	mov	r6, r2
  sock = get_socket(s);
 8007da2:	f7ff f86b 	bl	8006e7c <get_socket>
  if (!sock) {
 8007da6:	4607      	mov	r7, r0
 8007da8:	b910      	cbnz	r0, 8007db0 <lwip_sendmsg+0x18>
    return -1;
 8007daa:	f04f 34ff 	mov.w	r4, #4294967295
 8007dae:	e053      	b.n	8007e58 <lwip_sendmsg+0xc0>
  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
 8007db0:	b979      	cbnz	r1, 8007dd2 <lwip_sendmsg+0x3a>
 8007db2:	4b69      	ldr	r3, [pc, #420]	; (8007f58 <lwip_sendmsg+0x1c0>)
 8007db4:	4969      	ldr	r1, [pc, #420]	; (8007f5c <lwip_sendmsg+0x1c4>)
 8007db6:	f240 529c 	movw	r2, #1436	; 0x59c
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
 8007dba:	4869      	ldr	r0, [pc, #420]	; (8007f60 <lwip_sendmsg+0x1c8>)
 8007dbc:	f014 feb4 	bl	801cb28 <iprintf>
 8007dc0:	f06f 000f 	mvn.w	r0, #15
 8007dc4:	f7fe fcc2 	bl	800674c <err_to_errno>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0ee      	beq.n	8007daa <lwip_sendmsg+0x12>
 8007dcc:	4b65      	ldr	r3, [pc, #404]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007dce:	6018      	str	r0, [r3, #0]
 8007dd0:	e7eb      	b.n	8007daa <lwip_sendmsg+0x12>
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", msg->msg_iov != NULL,
 8007dd2:	6889      	ldr	r1, [r1, #8]
 8007dd4:	b921      	cbnz	r1, 8007de0 <lwip_sendmsg+0x48>
 8007dd6:	4b60      	ldr	r3, [pc, #384]	; (8007f58 <lwip_sendmsg+0x1c0>)
 8007dd8:	4963      	ldr	r1, [pc, #396]	; (8007f68 <lwip_sendmsg+0x1d0>)
 8007dda:	f240 529e 	movw	r2, #1438	; 0x59e
 8007dde:	e7ec      	b.n	8007dba <lwip_sendmsg+0x22>
  LWIP_ERROR("lwip_sendmsg: maximum iovs exceeded", (msg->msg_iovlen > 0) && (msg->msg_iovlen <= IOV_MAX),
 8007de0:	68ea      	ldr	r2, [r5, #12]
 8007de2:	1e53      	subs	r3, r2, #1
 8007de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de8:	d30a      	bcc.n	8007e00 <lwip_sendmsg+0x68>
 8007dea:	4b5b      	ldr	r3, [pc, #364]	; (8007f58 <lwip_sendmsg+0x1c0>)
 8007dec:	495f      	ldr	r1, [pc, #380]	; (8007f6c <lwip_sendmsg+0x1d4>)
 8007dee:	485c      	ldr	r0, [pc, #368]	; (8007f60 <lwip_sendmsg+0x1c8>)
 8007df0:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8007df4:	f014 fe98 	bl	801cb28 <iprintf>
 8007df8:	4b5a      	ldr	r3, [pc, #360]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007dfa:	225a      	movs	r2, #90	; 0x5a
  LWIP_ERROR("lwip_sendmsg: unsupported flags", (flags & ~(MSG_DONTWAIT | MSG_MORE)) == 0,
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e7d4      	b.n	8007daa <lwip_sendmsg+0x12>
 8007e00:	f036 0418 	bics.w	r4, r6, #24
 8007e04:	d009      	beq.n	8007e1a <lwip_sendmsg+0x82>
 8007e06:	4b54      	ldr	r3, [pc, #336]	; (8007f58 <lwip_sendmsg+0x1c0>)
 8007e08:	4959      	ldr	r1, [pc, #356]	; (8007f70 <lwip_sendmsg+0x1d8>)
 8007e0a:	4855      	ldr	r0, [pc, #340]	; (8007f60 <lwip_sendmsg+0x1c8>)
 8007e0c:	f240 52a2 	movw	r2, #1442	; 0x5a2
 8007e10:	f014 fe8a 	bl	801cb28 <iprintf>
 8007e14:	4b53      	ldr	r3, [pc, #332]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007e16:	225f      	movs	r2, #95	; 0x5f
 8007e18:	e7f0      	b.n	8007dfc <lwip_sendmsg+0x64>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	7803      	ldrb	r3, [r0, #0]
 8007e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d11c      	bne.n	8007e60 <lwip_sendmsg+0xc8>
    write_flags = (u8_t)(NETCONN_COPY |
 8007e26:	f016 0f10 	tst.w	r6, #16
                         ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8007e2a:	ea4f 0666 	mov.w	r6, r6, asr #1
    write_flags = (u8_t)(NETCONN_COPY |
 8007e2e:	bf14      	ite	ne
 8007e30:	2303      	movne	r3, #3
 8007e32:	2301      	moveq	r3, #1
    written = 0;
 8007e34:	9403      	str	r4, [sp, #12]
                         ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8007e36:	f006 0604 	and.w	r6, r6, #4
    err = netconn_write_vectors_partly(sock->conn, (struct netvector *)msg->msg_iov, (u16_t)msg->msg_iovlen, write_flags, &written);
 8007e3a:	ac03      	add	r4, sp, #12
 8007e3c:	9400      	str	r4, [sp, #0]
 8007e3e:	4333      	orrs	r3, r6
 8007e40:	b292      	uxth	r2, r2
 8007e42:	f7fd f96b 	bl	800511c <netconn_write_vectors_partly>
 8007e46:	4604      	mov	r4, r0
    sock_set_errno(sock, err_to_errno(err));
 8007e48:	f7fe fc80 	bl	800674c <err_to_errno>
 8007e4c:	b108      	cbz	r0, 8007e52 <lwip_sendmsg+0xba>
 8007e4e:	4b45      	ldr	r3, [pc, #276]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007e50:	6018      	str	r0, [r3, #0]
    return (err == ERR_OK ? (ssize_t)written : -1);
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d1a9      	bne.n	8007daa <lwip_sendmsg+0x12>
 8007e56:	9c03      	ldr	r4, [sp, #12]
}
 8007e58:	4620      	mov	r0, r4
 8007e5a:	b00c      	add	sp, #48	; 0x30
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
 8007e60:	e9d5 6300 	ldrd	r6, r3, [r5]
 8007e64:	b906      	cbnz	r6, 8007e68 <lwip_sendmsg+0xd0>
 8007e66:	b143      	cbz	r3, 8007e7a <lwip_sendmsg+0xe2>
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d006      	beq.n	8007e7a <lwip_sendmsg+0xe2>
 8007e6c:	2b1c      	cmp	r3, #28
 8007e6e:	d004      	beq.n	8007e7a <lwip_sendmsg+0xe2>
 8007e70:	4b39      	ldr	r3, [pc, #228]	; (8007f58 <lwip_sendmsg+0x1c0>)
 8007e72:	4940      	ldr	r1, [pc, #256]	; (8007f74 <lwip_sendmsg+0x1dc>)
 8007e74:	f240 52c3 	movw	r2, #1475	; 0x5c3
 8007e78:	e79f      	b.n	8007dba <lwip_sendmsg+0x22>
    memset(&chain_buf, 0, sizeof(struct netbuf));
 8007e7a:	2224      	movs	r2, #36	; 0x24
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	a803      	add	r0, sp, #12
 8007e80:	f014 fa06 	bl	801c290 <memset>
    if (msg->msg_name) {
 8007e84:	b14e      	cbz	r6, 8007e9a <lwip_sendmsg+0x102>
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf.addr, remote_port);
 8007e86:	f10d 020a 	add.w	r2, sp, #10
 8007e8a:	a905      	add	r1, sp, #20
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7fe feb1 	bl	8006bf4 <sockaddr_to_ipaddr_port>
      netbuf_fromport(&chain_buf) = remote_port;
 8007e92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007e96:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    write_flags = (u8_t)(NETCONN_COPY |
 8007e9a:	2600      	movs	r6, #0
    for (i = 0; i < msg->msg_iovlen; i++) {
 8007e9c:	68eb      	ldr	r3, [r5, #12]
 8007e9e:	42b3      	cmp	r3, r6
 8007ea0:	dc22      	bgt.n	8007ee8 <lwip_sendmsg+0x150>
      size = netbuf_len(&chain_buf);
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	891c      	ldrh	r4, [r3, #8]
      if (IP_IS_V6_VAL(chain_buf.addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&chain_buf.addr))) {
 8007ea6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8007eaa:	2b06      	cmp	r3, #6
 8007eac:	d10b      	bne.n	8007ec6 <lwip_sendmsg+0x12e>
 8007eae:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	d107      	bne.n	8007ec6 <lwip_sendmsg+0x12e>
 8007eb6:	9a07      	ldr	r2, [sp, #28]
 8007eb8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
        unmap_ipv4_mapped_ipv6(ip_2_ip4(&chain_buf.addr), ip_2_ip6(&chain_buf.addr));
 8007ebc:	bf02      	ittt	eq
 8007ebe:	9a08      	ldreq	r2, [sp, #32]
 8007ec0:	9205      	streq	r2, [sp, #20]
        IP_SET_TYPE_VAL(chain_buf.addr, IPADDR_TYPE_V4);
 8007ec2:	f88d 3028 	strbeq.w	r3, [sp, #40]	; 0x28
      err = netconn_send(sock->conn, &chain_buf);
 8007ec6:	6838      	ldr	r0, [r7, #0]
 8007ec8:	a903      	add	r1, sp, #12
 8007eca:	f7fd f909 	bl	80050e0 <netconn_send>
 8007ece:	4605      	mov	r5, r0
    netbuf_free(&chain_buf);
 8007ed0:	a803      	add	r0, sp, #12
 8007ed2:	f7fe fc5b 	bl	800678c <netbuf_free>
    sock_set_errno(sock, err_to_errno(err));
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7fe fc38 	bl	800674c <err_to_errno>
 8007edc:	b108      	cbz	r0, 8007ee2 <lwip_sendmsg+0x14a>
 8007ede:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007ee0:	6018      	str	r0, [r3, #0]
    return (err == ERR_OK ? size : -1);
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	d0b8      	beq.n	8007e58 <lwip_sendmsg+0xc0>
 8007ee6:	e760      	b.n	8007daa <lwip_sendmsg+0x12>
      if (msg->msg_iov[i].iov_len > 0xFFFF) {
 8007ee8:	68ab      	ldr	r3, [r5, #8]
 8007eea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007eee:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef8:	d21f      	bcs.n	8007f3a <lwip_sendmsg+0x1a2>
      p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8007efa:	2100      	movs	r1, #0
 8007efc:	2241      	movs	r2, #65	; 0x41
 8007efe:	204a      	movs	r0, #74	; 0x4a
 8007f00:	f007 faa6 	bl	800f450 <pbuf_alloc>
      if (p == NULL) {
 8007f04:	4601      	mov	r1, r0
 8007f06:	b318      	cbz	r0, 8007f50 <lwip_sendmsg+0x1b8>
      p->payload = msg->msg_iov[i].iov_base;
 8007f08:	68ab      	ldr	r3, [r5, #8]
 8007f0a:	eb03 0208 	add.w	r2, r3, r8
 8007f0e:	f853 3008 	ldr.w	r3, [r3, r8]
 8007f12:	6043      	str	r3, [r0, #4]
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
 8007f14:	6853      	ldr	r3, [r2, #4]
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	8102      	strh	r2, [r0, #8]
 8007f1a:	8142      	strh	r2, [r0, #10]
      if (chain_buf.p == NULL) {
 8007f1c:	9a03      	ldr	r2, [sp, #12]
 8007f1e:	b91a      	cbnz	r2, 8007f28 <lwip_sendmsg+0x190>
        chain_buf.p = chain_buf.ptr = p;
 8007f20:	e9cd 0003 	strd	r0, r0, [sp, #12]
    for (i = 0; i < msg->msg_iovlen; i++) {
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7b9      	b.n	8007e9c <lwip_sendmsg+0x104>
        if (chain_buf.p->tot_len + p->len > 0xffff) {
 8007f28:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8007f2c:	fa1c f383 	uxtah	r3, ip, r3
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f34:	db08      	blt.n	8007f48 <lwip_sendmsg+0x1b0>
          pbuf_free(p);
 8007f36:	f007 fa23 	bl	800f380 <pbuf_free>
    sock_set_errno(sock, EMSGSIZE);
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <lwip_sendmsg+0x1cc>)
 8007f3c:	225a      	movs	r2, #90	; 0x5a
    netbuf_free(&chain_buf);
 8007f3e:	a803      	add	r0, sp, #12
    sock_set_errno(sock, EMSGSIZE);
 8007f40:	601a      	str	r2, [r3, #0]
    netbuf_free(&chain_buf);
 8007f42:	f7fe fc23 	bl	800678c <netbuf_free>
 8007f46:	e730      	b.n	8007daa <lwip_sendmsg+0x12>
        pbuf_cat(chain_buf.p, p);
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f007 fb91 	bl	800f670 <pbuf_cat>
 8007f4e:	e7e9      	b.n	8007f24 <lwip_sendmsg+0x18c>
 8007f50:	f04f 35ff 	mov.w	r5, #4294967295
 8007f54:	e7bc      	b.n	8007ed0 <lwip_sendmsg+0x138>
 8007f56:	bf00      	nop
 8007f58:	0802ba85 	.word	0x0802ba85
 8007f5c:	0802bd4b 	.word	0x0802bd4b
 8007f60:	0802aecf 	.word	0x0802aecf
 8007f64:	20016130 	.word	0x20016130
 8007f68:	0802bd68 	.word	0x0802bd68
 8007f6c:	0802bd89 	.word	0x0802bd89
 8007f70:	0802bdad 	.word	0x0802bdad
 8007f74:	0802bdcd 	.word	0x0802bdcd

08007f78 <lwip_sendto>:
{
 8007f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7c:	b08c      	sub	sp, #48	; 0x30
 8007f7e:	4680      	mov	r8, r0
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	460f      	mov	r7, r1
 8007f84:	4615      	mov	r5, r2
 8007f86:	e9dd 4112 	ldrd	r4, r1, [sp, #72]	; 0x48
  sock = get_socket(s);
 8007f8a:	f7fe ff77 	bl	8006e7c <get_socket>
  if (!sock) {
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	4606      	mov	r6, r0
 8007f92:	b910      	cbnz	r0, 8007f9a <lwip_sendto+0x22>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e00a      	b.n	8007fb0 <lwip_sendto+0x38>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8007f9a:	6802      	ldr	r2, [r0, #0]
 8007f9c:	7812      	ldrb	r2, [r2, #0]
 8007f9e:	f002 00f0 	and.w	r0, r2, #240	; 0xf0
 8007fa2:	2810      	cmp	r0, #16
 8007fa4:	d107      	bne.n	8007fb6 <lwip_sendto+0x3e>
    return lwip_send(s, data, size, flags);
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	4639      	mov	r1, r7
 8007faa:	4640      	mov	r0, r8
 8007fac:	f000 f882 	bl	80080b4 <lwip_send>
}
 8007fb0:	b00c      	add	sp, #48	; 0x30
 8007fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8007fb6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007fba:	d303      	bcc.n	8007fc4 <lwip_sendto+0x4c>
    sock_set_errno(sock, EMSGSIZE);
 8007fbc:	4b39      	ldr	r3, [pc, #228]	; (80080a4 <lwip_sendto+0x12c>)
 8007fbe:	225a      	movs	r2, #90	; 0x5a
 8007fc0:	601a      	str	r2, [r3, #0]
    return -1;
 8007fc2:	e7e7      	b.n	8007f94 <lwip_sendto+0x1c>
  short_size = (u16_t)size;
 8007fc4:	fa1f f885 	uxth.w	r8, r5
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d14f      	bne.n	800806c <lwip_sendto+0xf4>
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d158      	bne.n	8008082 <lwip_sendto+0x10a>
  buf.p = buf.ptr = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if (to) {
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	d032      	beq.n	8008040 <lwip_sendto+0xc8>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8007fda:	f10d 020a 	add.w	r2, sp, #10
 8007fde:	a905      	add	r1, sp, #20
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f7fe fe07 	bl	8006bf4 <sockaddr_to_ipaddr_port>
  netbuf_fromport(&buf) = remote_port;
 8007fe6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007fea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  err = netbuf_ref(&buf, data, short_size);
 8007fee:	4642      	mov	r2, r8
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	a803      	add	r0, sp, #12
 8007ff4:	f7fe fbe4 	bl	80067c0 <netbuf_ref>
  if (err == ERR_OK) {
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	b9a0      	cbnz	r0, 8008026 <lwip_sendto+0xae>
    if (IP_IS_V6_VAL(buf.addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&buf.addr))) {
 8007ffc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8008000:	2b06      	cmp	r3, #6
 8008002:	d10b      	bne.n	800801c <lwip_sendto+0xa4>
 8008004:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	d107      	bne.n	800801c <lwip_sendto+0xa4>
 800800c:	9a07      	ldr	r2, [sp, #28]
 800800e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&buf.addr), ip_2_ip6(&buf.addr));
 8008012:	bf02      	ittt	eq
 8008014:	9a08      	ldreq	r2, [sp, #32]
 8008016:	9205      	streq	r2, [sp, #20]
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
 8008018:	f88d 3028 	strbeq.w	r3, [sp, #40]	; 0x28
    err = netconn_send(sock->conn, &buf);
 800801c:	6830      	ldr	r0, [r6, #0]
 800801e:	a903      	add	r1, sp, #12
 8008020:	f7fd f85e 	bl	80050e0 <netconn_send>
 8008024:	4604      	mov	r4, r0
  netbuf_free(&buf);
 8008026:	a803      	add	r0, sp, #12
 8008028:	f7fe fbb0 	bl	800678c <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800802c:	4620      	mov	r0, r4
 800802e:	f7fe fb8d 	bl	800674c <err_to_errno>
 8008032:	b108      	cbz	r0, 8008038 <lwip_sendto+0xc0>
 8008034:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <lwip_sendto+0x12c>)
 8008036:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8008038:	2c00      	cmp	r4, #0
 800803a:	d1ab      	bne.n	8007f94 <lwip_sendto+0x1c>
 800803c:	4628      	mov	r0, r5
 800803e:	e7b7      	b.n	8007fb0 <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008040:	0713      	lsls	r3, r2, #28
    remote_port = 0;
 8008042:	f8ad 400a 	strh.w	r4, [sp, #10]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008046:	9405      	str	r4, [sp, #20]
 8008048:	d508      	bpl.n	800805c <lwip_sendto+0xe4>
 800804a:	2306      	movs	r3, #6
 800804c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8008050:	9408      	str	r4, [sp, #32]
 8008052:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8008056:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800805a:	e7c4      	b.n	8007fe6 <lwip_sendto+0x6e>
 800805c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8008060:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 8008064:	9406      	str	r4, [sp, #24]
 8008066:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800806a:	e7bc      	b.n	8007fe6 <lwip_sendto+0x6e>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800806c:	2910      	cmp	r1, #16
 800806e:	d001      	beq.n	8008074 <lwip_sendto+0xfc>
 8008070:	291c      	cmp	r1, #28
 8008072:	d106      	bne.n	8008082 <lwip_sendto+0x10a>
 8008074:	7863      	ldrb	r3, [r4, #1]
 8008076:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800807a:	2b02      	cmp	r3, #2
 800807c:	d101      	bne.n	8008082 <lwip_sendto+0x10a>
 800807e:	07a1      	lsls	r1, r4, #30
 8008080:	d0a6      	beq.n	8007fd0 <lwip_sendto+0x58>
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <lwip_sendto+0x130>)
 8008084:	4909      	ldr	r1, [pc, #36]	; (80080ac <lwip_sendto+0x134>)
 8008086:	480a      	ldr	r0, [pc, #40]	; (80080b0 <lwip_sendto+0x138>)
 8008088:	f240 6252 	movw	r2, #1618	; 0x652
 800808c:	f014 fd4c 	bl	801cb28 <iprintf>
 8008090:	f06f 000f 	mvn.w	r0, #15
 8008094:	f7fe fb5a 	bl	800674c <err_to_errno>
 8008098:	2800      	cmp	r0, #0
 800809a:	f43f af7b 	beq.w	8007f94 <lwip_sendto+0x1c>
 800809e:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <lwip_sendto+0x12c>)
 80080a0:	6018      	str	r0, [r3, #0]
 80080a2:	e777      	b.n	8007f94 <lwip_sendto+0x1c>
 80080a4:	20016130 	.word	0x20016130
 80080a8:	0802ba85 	.word	0x0802ba85
 80080ac:	0802bdef 	.word	0x0802bdef
 80080b0:	0802aecf 	.word	0x0802aecf

080080b4 <lwip_send>:
{
 80080b4:	b530      	push	{r4, r5, lr}
 80080b6:	b087      	sub	sp, #28
 80080b8:	4605      	mov	r5, r0
 80080ba:	9203      	str	r2, [sp, #12]
 80080bc:	461c      	mov	r4, r3
  sock = get_socket(s);
 80080be:	f7fe fedd 	bl	8006e7c <get_socket>
  if (!sock) {
 80080c2:	9a03      	ldr	r2, [sp, #12]
 80080c4:	b918      	cbnz	r0, 80080ce <lwip_send+0x1a>
    return -1;
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80080ca:	b007      	add	sp, #28
 80080cc:	bd30      	pop	{r4, r5, pc}
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	7803      	ldrb	r3, [r0, #0]
 80080d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d007      	beq.n	80080ea <lwip_send+0x36>
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80080da:	2300      	movs	r3, #0
 80080dc:	e9cd 3300 	strd	r3, r3, [sp]
 80080e0:	4628      	mov	r0, r5
 80080e2:	4623      	mov	r3, r4
 80080e4:	f7ff ff48 	bl	8007f78 <lwip_sendto>
 80080e8:	e7ef      	b.n	80080ca <lwip_send+0x16>
  write_flags = (u8_t)(NETCONN_COPY |
 80080ea:	f014 0f10 	tst.w	r4, #16
  written = 0;
 80080ee:	f04f 0500 	mov.w	r5, #0
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80080f2:	ea4f 0464 	mov.w	r4, r4, asr #1
  write_flags = (u8_t)(NETCONN_COPY |
 80080f6:	bf14      	ite	ne
 80080f8:	2303      	movne	r3, #3
 80080fa:	2301      	moveq	r3, #1
  written = 0;
 80080fc:	9505      	str	r5, [sp, #20]
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80080fe:	f004 0404 	and.w	r4, r4, #4
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008102:	ad05      	add	r5, sp, #20
 8008104:	4323      	orrs	r3, r4
 8008106:	9500      	str	r5, [sp, #0]
 8008108:	f7fd f874 	bl	80051f4 <netconn_write_partly>
 800810c:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 800810e:	f7fe fb1d 	bl	800674c <err_to_errno>
 8008112:	b108      	cbz	r0, 8008118 <lwip_send+0x64>
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <lwip_send+0x6c>)
 8008116:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 8008118:	2c00      	cmp	r4, #0
 800811a:	d1d4      	bne.n	80080c6 <lwip_send+0x12>
 800811c:	9805      	ldr	r0, [sp, #20]
 800811e:	e7d4      	b.n	80080ca <lwip_send+0x16>
 8008120:	20016130 	.word	0x20016130

08008124 <lwip_socket>:
  switch (type) {
 8008124:	2902      	cmp	r1, #2
{
 8008126:	b538      	push	{r3, r4, r5, lr}
 8008128:	4613      	mov	r3, r2
  switch (type) {
 800812a:	d018      	beq.n	800815e <lwip_socket+0x3a>
 800812c:	2903      	cmp	r1, #3
 800812e:	d009      	beq.n	8008144 <lwip_socket+0x20>
 8008130:	2901      	cmp	r1, #1
 8008132:	d122      	bne.n	800817a <lwip_socket+0x56>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8008134:	2802      	cmp	r0, #2
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <lwip_socket+0x84>)
 8008138:	f04f 0100 	mov.w	r1, #0
 800813c:	bf0c      	ite	eq
 800813e:	2010      	moveq	r0, #16
 8008140:	2018      	movne	r0, #24
 8008142:	e005      	b.n	8008150 <lwip_socket+0x2c>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008144:	2802      	cmp	r0, #2
 8008146:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <lwip_socket+0x84>)
 8008148:	b2d9      	uxtb	r1, r3
 800814a:	bf0c      	ite	eq
 800814c:	2040      	moveq	r0, #64	; 0x40
 800814e:	2048      	movne	r0, #72	; 0x48
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8008150:	f7fc fe46 	bl	8004de0 <netconn_new_with_proto_and_callback>
 8008154:	4604      	mov	r4, r0
  if (!conn) {
 8008156:	b9b8      	cbnz	r0, 8008188 <lwip_socket+0x64>
    set_errno(ENOBUFS);
 8008158:	4b14      	ldr	r3, [pc, #80]	; (80081ac <lwip_socket+0x88>)
 800815a:	2269      	movs	r2, #105	; 0x69
 800815c:	e00f      	b.n	800817e <lwip_socket+0x5a>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800815e:	2802      	cmp	r0, #2
 8008160:	d106      	bne.n	8008170 <lwip_socket+0x4c>
 8008162:	2a88      	cmp	r2, #136	; 0x88
 8008164:	bf0c      	ite	eq
 8008166:	2021      	moveq	r0, #33	; 0x21
 8008168:	2020      	movne	r0, #32
 800816a:	4a0f      	ldr	r2, [pc, #60]	; (80081a8 <lwip_socket+0x84>)
 800816c:	2100      	movs	r1, #0
 800816e:	e7ef      	b.n	8008150 <lwip_socket+0x2c>
 8008170:	2a88      	cmp	r2, #136	; 0x88
 8008172:	bf0c      	ite	eq
 8008174:	2029      	moveq	r0, #41	; 0x29
 8008176:	2028      	movne	r0, #40	; 0x28
 8008178:	e7f7      	b.n	800816a <lwip_socket+0x46>
      set_errno(EINVAL);
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <lwip_socket+0x88>)
 800817c:	2216      	movs	r2, #22
    set_errno(ENOBUFS);
 800817e:	601a      	str	r2, [r3, #0]
    return -1;
 8008180:	f04f 35ff 	mov.w	r5, #4294967295
}
 8008184:	4628      	mov	r0, r5
 8008186:	bd38      	pop	{r3, r4, r5, pc}
  i = alloc_socket(conn, 0);
 8008188:	2100      	movs	r1, #0
 800818a:	f7fe fb43 	bl	8006814 <alloc_socket>
  if (i == -1) {
 800818e:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
 8008190:	4605      	mov	r5, r0
  if (i == -1) {
 8008192:	d106      	bne.n	80081a2 <lwip_socket+0x7e>
    netconn_delete(conn);
 8008194:	4620      	mov	r0, r4
 8008196:	f7fc fe8d 	bl	8004eb4 <netconn_delete>
    set_errno(ENFILE);
 800819a:	4b04      	ldr	r3, [pc, #16]	; (80081ac <lwip_socket+0x88>)
 800819c:	2217      	movs	r2, #23
 800819e:	601a      	str	r2, [r3, #0]
    return -1;
 80081a0:	e7f0      	b.n	8008184 <lwip_socket+0x60>
  conn->socket = i;
 80081a2:	61a0      	str	r0, [r4, #24]
  return i;
 80081a4:	e7ee      	b.n	8008184 <lwip_socket+0x60>
 80081a6:	bf00      	nop
 80081a8:	08007379 	.word	0x08007379
 80081ac:	20016130 	.word	0x20016130

080081b0 <lwip_write>:
  return lwip_send(s, data, size, 0);
 80081b0:	2300      	movs	r3, #0
 80081b2:	f7ff bf7f 	b.w	80080b4 <lwip_send>
	...

080081b8 <lwip_select>:
{
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	ed2d 8b02 	vpush	{d8}
 80081c0:	b097      	sub	sp, #92	; 0x5c
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 80081c2:	2840      	cmp	r0, #64	; 0x40
{
 80081c4:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 80081c8:	9004      	str	r0, [sp, #16]
 80081ca:	4689      	mov	r9, r1
 80081cc:	4690      	mov	r8, r2
 80081ce:	461f      	mov	r7, r3
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 80081d0:	d90a      	bls.n	80081e8 <lwip_select+0x30>
    set_errno(EINVAL);
 80081d2:	4b96      	ldr	r3, [pc, #600]	; (800842c <lwip_select+0x274>)
 80081d4:	2216      	movs	r2, #22
    set_errno(EBADF);
 80081d6:	601a      	str	r2, [r3, #0]
    return -1;
 80081d8:	f04f 34ff 	mov.w	r4, #4294967295
}
 80081dc:	4620      	mov	r0, r4
 80081de:	b017      	add	sp, #92	; 0x5c
 80081e0:	ecbd 8b02 	vpop	{d8}
 80081e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80081e8:	ac0b      	add	r4, sp, #44	; 0x2c
 80081ea:	9402      	str	r4, [sp, #8]
 80081ec:	ac09      	add	r4, sp, #36	; 0x24
 80081ee:	9401      	str	r4, [sp, #4]
 80081f0:	ac07      	add	r4, sp, #28
 80081f2:	9400      	str	r4, [sp, #0]
 80081f4:	f7fe fb98 	bl	8006928 <lwip_selscan>
  if (nready < 0) {
 80081f8:	1e05      	subs	r5, r0, #0
 80081fa:	da02      	bge.n	8008202 <lwip_select+0x4a>
    set_errno(EBADF);
 80081fc:	4b8b      	ldr	r3, [pc, #556]	; (800842c <lwip_select+0x274>)
 80081fe:	2209      	movs	r2, #9
 8008200:	e7e9      	b.n	80081d6 <lwip_select+0x1e>
  } else if (nready > 0) {
 8008202:	f040 8111 	bne.w	8008428 <lwip_select+0x270>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 8008206:	f1bb 0f00 	cmp.w	fp, #0
 800820a:	d007      	beq.n	800821c <lwip_select+0x64>
 800820c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008210:	4313      	orrs	r3, r2
 8008212:	d103      	bne.n	800821c <lwip_select+0x64>
 8008214:	f8db 4008 	ldr.w	r4, [fp, #8]
 8008218:	2c00      	cmp	r4, #0
 800821a:	d05c      	beq.n	80082d6 <lwip_select+0x11e>
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800821c:	2100      	movs	r1, #0
 800821e:	2224      	movs	r2, #36	; 0x24
 8008220:	a80d      	add	r0, sp, #52	; 0x34
 8008222:	f014 f835 	bl	801c290 <memset>
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8008226:	2100      	movs	r1, #0
 8008228:	a815      	add	r0, sp, #84	; 0x54
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800822a:	e9cd 980f 	strd	r9, r8, [sp, #60]	; 0x3c
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800822e:	9711      	str	r7, [sp, #68]	; 0x44
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8008230:	f00c fabf 	bl	80147b2 <sys_sem_new>
 8008234:	b110      	cbz	r0, 800823c <lwip_select+0x84>
        set_errno(ENOMEM);
 8008236:	4b7d      	ldr	r3, [pc, #500]	; (800842c <lwip_select+0x274>)
 8008238:	220c      	movs	r2, #12
 800823a:	e7cc      	b.n	80081d6 <lwip_select+0x1e>
      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800823c:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8008430 <lwip_select+0x278>
 8008240:	a80d      	add	r0, sp, #52	; 0x34
 8008242:	f7fe fb27 	bl	8006894 <lwip_link_select_cb>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8008246:	4654      	mov	r4, sl
 8008248:	462e      	mov	r6, r5
            (exceptset && FD_ISSET(i, exceptset))) {
 800824a:	2101      	movs	r1, #1
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800824c:	9b04      	ldr	r3, [sp, #16]
 800824e:	429e      	cmp	r6, r3
 8008250:	d159      	bne.n	8008306 <lwip_select+0x14e>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8008252:	ab0b      	add	r3, sp, #44	; 0x2c
 8008254:	9302      	str	r3, [sp, #8]
 8008256:	ab09      	add	r3, sp, #36	; 0x24
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	ab07      	add	r3, sp, #28
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	9804      	ldr	r0, [sp, #16]
 8008260:	463b      	mov	r3, r7
 8008262:	4642      	mov	r2, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7fe fb5f 	bl	8006928 <lwip_selscan>
        if (!nready) {
 800826a:	4604      	mov	r4, r0
 800826c:	2800      	cmp	r0, #0
 800826e:	f040 8082 	bne.w	8008376 <lwip_select+0x1be>
          if (timeout == 0) {
 8008272:	f1bb 0f00 	cmp.w	fp, #0
 8008276:	f000 808d 	beq.w	8008394 <lwip_select+0x1dc>
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800827a:	f8db 1000 	ldr.w	r1, [fp]
 800827e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8008282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008286:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800828a:	fb93 f3f2 	sdiv	r3, r3, r2
 800828e:	fb02 3101 	mla	r1, r2, r1, r3
              msectimeout = 1;
 8008292:	2901      	cmp	r1, #1
 8008294:	bfb8      	it	lt
 8008296:	2101      	movlt	r1, #1
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8008298:	a815      	add	r0, sp, #84	; 0x54
 800829a:	f00c faa1 	bl	80147e0 <sys_arch_sem_wait>
 800829e:	9e04      	ldr	r6, [sp, #16]
 80082a0:	4683      	mov	fp, r0
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d178      	bne.n	8008398 <lwip_select+0x1e0>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80082a6:	a80d      	add	r0, sp, #52	; 0x34
 80082a8:	f7fe fb08 	bl	80068bc <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 80082ac:	a815      	add	r0, sp, #84	; 0x54
 80082ae:	f00c fab5 	bl	801481c <sys_sem_free>
      if (nready < 0) {
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	db90      	blt.n	80081d8 <lwip_select+0x20>
      if (waitres == SYS_ARCH_TIMEOUT) {
 80082b6:	f1bb 3fff 	cmp.w	fp, #4294967295
 80082ba:	d00c      	beq.n	80082d6 <lwip_select+0x11e>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80082bc:	ab0b      	add	r3, sp, #44	; 0x2c
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	ab09      	add	r3, sp, #36	; 0x24
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	ab07      	add	r3, sp, #28
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	9804      	ldr	r0, [sp, #16]
 80082ca:	463b      	mov	r3, r7
 80082cc:	4642      	mov	r2, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7fe fb2a 	bl	8006928 <lwip_selscan>
 80082d4:	4604      	mov	r4, r0
  if (readset) {
 80082d6:	f1b9 0f00 	cmp.w	r9, #0
 80082da:	d003      	beq.n	80082e4 <lwip_select+0x12c>
    *readset = lreadset;
 80082dc:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80082e0:	e889 0003 	stmia.w	r9, {r0, r1}
  if (writeset) {
 80082e4:	f1b8 0f00 	cmp.w	r8, #0
 80082e8:	d004      	beq.n	80082f4 <lwip_select+0x13c>
    *writeset = lwriteset;
 80082ea:	ab09      	add	r3, sp, #36	; 0x24
 80082ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082f0:	e888 0003 	stmia.w	r8, {r0, r1}
  if (exceptset) {
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f43f af71 	beq.w	80081dc <lwip_select+0x24>
    *exceptset = lexceptset;
 80082fa:	ab0b      	add	r3, sp, #44	; 0x2c
 80082fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008300:	e887 0003 	stmia.w	r7, {r0, r1}
 8008304:	e76a      	b.n	80081dc <lwip_select+0x24>
        if ((readset && FD_ISSET(i, readset)) ||
 8008306:	f1b9 0f00 	cmp.w	r9, #0
 800830a:	d008      	beq.n	800831e <lwip_select+0x166>
 800830c:	0970      	lsrs	r0, r6, #5
 800830e:	f006 031f 	and.w	r3, r6, #31
 8008312:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008316:	fa01 f303 	lsl.w	r3, r1, r3
 800831a:	4203      	tst	r3, r0
 800831c:	d115      	bne.n	800834a <lwip_select+0x192>
 800831e:	f1b8 0f00 	cmp.w	r8, #0
 8008322:	d008      	beq.n	8008336 <lwip_select+0x17e>
            (writeset && FD_ISSET(i, writeset)) ||
 8008324:	0970      	lsrs	r0, r6, #5
 8008326:	f006 031f 	and.w	r3, r6, #31
 800832a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	4203      	tst	r3, r0
 8008334:	d109      	bne.n	800834a <lwip_select+0x192>
 8008336:	b327      	cbz	r7, 8008382 <lwip_select+0x1ca>
            (exceptset && FD_ISSET(i, exceptset))) {
 8008338:	0970      	lsrs	r0, r6, #5
 800833a:	f006 031f 	and.w	r3, r6, #31
 800833e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008342:	fa01 f303 	lsl.w	r3, r1, r3
 8008346:	4203      	tst	r3, r0
 8008348:	d01b      	beq.n	8008382 <lwip_select+0x1ca>
          SYS_ARCH_PROTECT(lev);
 800834a:	f00c faa5 	bl	8014898 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800834e:	2e03      	cmp	r6, #3
 8008350:	dc1a      	bgt.n	8008388 <lwip_select+0x1d0>
            sock->select_waiting++;
 8008352:	7ba3      	ldrb	r3, [r4, #14]
 8008354:	3301      	adds	r3, #1
 8008356:	b2db      	uxtb	r3, r3
 8008358:	73a3      	strb	r3, [r4, #14]
            if (sock->select_waiting == 0) {
 800835a:	b97b      	cbnz	r3, 800837c <lwip_select+0x1c4>
 800835c:	9305      	str	r3, [sp, #20]
              sock->select_waiting--;
 800835e:	4b34      	ldr	r3, [pc, #208]	; (8008430 <lwip_select+0x278>)
 8008360:	eb03 1406 	add.w	r4, r3, r6, lsl #4
 8008364:	22ff      	movs	r2, #255	; 0xff
 8008366:	73a2      	strb	r2, [r4, #14]
              SYS_ARCH_UNPROTECT(lev);
 8008368:	f00c faa2 	bl	80148b0 <sys_arch_unprotect>
              set_errno(EBUSY);
 800836c:	4a2f      	ldr	r2, [pc, #188]	; (800842c <lwip_select+0x274>)
 800836e:	2110      	movs	r1, #16
 8008370:	6011      	str	r1, [r2, #0]
            nready = -1;
 8008372:	f04f 34ff 	mov.w	r4, #4294967295
  u32_t waitres = 0;
 8008376:	f04f 0b00 	mov.w	fp, #0
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800837a:	e792      	b.n	80082a2 <lwip_select+0xea>
            SYS_ARCH_UNPROTECT(lev);
 800837c:	f00c fa98 	bl	80148b0 <sys_arch_unprotect>
            done_socket(sock);
 8008380:	2101      	movs	r1, #1
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8008382:	3601      	adds	r6, #1
 8008384:	3410      	adds	r4, #16
 8008386:	e761      	b.n	800824c <lwip_select+0x94>
            SYS_ARCH_UNPROTECT(lev);
 8008388:	f00c fa92 	bl	80148b0 <sys_arch_unprotect>
            set_errno(EBADF);
 800838c:	4b27      	ldr	r3, [pc, #156]	; (800842c <lwip_select+0x274>)
 800838e:	2209      	movs	r2, #9
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e7ee      	b.n	8008372 <lwip_select+0x1ba>
            msectimeout = 0;
 8008394:	4601      	mov	r1, r0
 8008396:	e77f      	b.n	8008298 <lwip_select+0xe0>
        if ((readset && FD_ISSET(i, readset)) ||
 8008398:	f1b9 0f00 	cmp.w	r9, #0
 800839c:	d008      	beq.n	80083b0 <lwip_select+0x1f8>
 800839e:	096a      	lsrs	r2, r5, #5
 80083a0:	f005 011f 	and.w	r1, r5, #31
 80083a4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80083a8:	2301      	movs	r3, #1
 80083aa:	408b      	lsls	r3, r1
 80083ac:	4213      	tst	r3, r2
 80083ae:	d115      	bne.n	80083dc <lwip_select+0x224>
 80083b0:	f1b8 0f00 	cmp.w	r8, #0
 80083b4:	d008      	beq.n	80083c8 <lwip_select+0x210>
            (writeset && FD_ISSET(i, writeset)) ||
 80083b6:	096a      	lsrs	r2, r5, #5
 80083b8:	f005 011f 	and.w	r1, r5, #31
 80083bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80083c0:	2301      	movs	r3, #1
 80083c2:	408b      	lsls	r3, r1
 80083c4:	4213      	tst	r3, r2
 80083c6:	d109      	bne.n	80083dc <lwip_select+0x224>
 80083c8:	b317      	cbz	r7, 8008410 <lwip_select+0x258>
            (exceptset && FD_ISSET(i, exceptset))) {
 80083ca:	096a      	lsrs	r2, r5, #5
 80083cc:	f005 011f 	and.w	r1, r5, #31
 80083d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80083d4:	2301      	movs	r3, #1
 80083d6:	408b      	lsls	r3, r1
 80083d8:	4213      	tst	r3, r2
 80083da:	d019      	beq.n	8008410 <lwip_select+0x258>
          SYS_ARCH_PROTECT(lev);
 80083dc:	f00c fa5c 	bl	8014898 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80083e0:	2d03      	cmp	r5, #3
          SYS_ARCH_PROTECT(lev);
 80083e2:	ee08 0a10 	vmov	s16, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80083e6:	dc17      	bgt.n	8008418 <lwip_select+0x260>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80083e8:	f89a 300e 	ldrb.w	r3, [sl, #14]
 80083ec:	b933      	cbnz	r3, 80083fc <lwip_select+0x244>
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <lwip_select+0x27c>)
 80083f0:	4911      	ldr	r1, [pc, #68]	; (8008438 <lwip_select+0x280>)
 80083f2:	4812      	ldr	r0, [pc, #72]	; (800843c <lwip_select+0x284>)
 80083f4:	f640 023c 	movw	r2, #2108	; 0x83c
 80083f8:	f014 fb96 	bl	801cb28 <iprintf>
            if (sock->select_waiting > 0) {
 80083fc:	f89a 300e 	ldrb.w	r3, [sl, #14]
 8008400:	b113      	cbz	r3, 8008408 <lwip_select+0x250>
              sock->select_waiting--;
 8008402:	3b01      	subs	r3, #1
 8008404:	f88a 300e 	strb.w	r3, [sl, #14]
            SYS_ARCH_UNPROTECT(lev);
 8008408:	ee18 0a10 	vmov	r0, s16
 800840c:	f00c fa50 	bl	80148b0 <sys_arch_unprotect>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8008410:	3501      	adds	r5, #1
 8008412:	f10a 0a10 	add.w	sl, sl, #16
 8008416:	e744      	b.n	80082a2 <lwip_select+0xea>
            SYS_ARCH_UNPROTECT(lev);
 8008418:	f00c fa4a 	bl	80148b0 <sys_arch_unprotect>
            set_errno(EBADF);
 800841c:	4a03      	ldr	r2, [pc, #12]	; (800842c <lwip_select+0x274>)
 800841e:	2309      	movs	r3, #9
 8008420:	6013      	str	r3, [r2, #0]
            nready = -1;
 8008422:	f04f 34ff 	mov.w	r4, #4294967295
 8008426:	e7f3      	b.n	8008410 <lwip_select+0x258>
 8008428:	462c      	mov	r4, r5
 800842a:	e754      	b.n	80082d6 <lwip_select+0x11e>
 800842c:	20016130 	.word	0x20016130
 8008430:	200068bc 	.word	0x200068bc
 8008434:	0802ba85 	.word	0x0802ba85
 8008438:	0802bb4b 	.word	0x0802bb4b
 800843c:	0802aecf 	.word	0x0802aecf

08008440 <lwip_getpeername>:
  return lwip_getaddrname(s, name, namelen, 0);
 8008440:	2300      	movs	r3, #0
 8008442:	f7fe bf2f 	b.w	80072a4 <lwip_getaddrname>

08008446 <lwip_getsockname>:
  return lwip_getaddrname(s, name, namelen, 1);
 8008446:	2301      	movs	r3, #1
 8008448:	f7fe bf2c 	b.w	80072a4 <lwip_getaddrname>

0800844c <lwip_getsockopt>:
{
 800844c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844e:	b089      	sub	sp, #36	; 0x24
 8008450:	4607      	mov	r7, r0
 8008452:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008454:	4616      	mov	r6, r2
 8008456:	461c      	mov	r4, r3
  struct lwip_sock *sock = get_socket(s);
 8008458:	f7fe fd10 	bl	8006e7c <get_socket>
  if (!sock) {
 800845c:	b910      	cbnz	r0, 8008464 <lwip_getsockopt+0x18>
  return err ? -1 : 0;
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	e025      	b.n	80084b0 <lwip_getsockopt+0x64>
  if ((NULL == optval) || (NULL == optlen)) {
 8008464:	b104      	cbz	r4, 8008468 <lwip_getsockopt+0x1c>
 8008466:	b91d      	cbnz	r5, 8008470 <lwip_getsockopt+0x24>
    sock_set_errno(sock, EFAULT);
 8008468:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <lwip_getsockopt+0x68>)
 800846a:	220e      	movs	r2, #14
 800846c:	601a      	str	r2, [r3, #0]
    return -1;
 800846e:	e7f6      	b.n	800845e <lwip_getsockopt+0x12>
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen = *optlen;
 8008470:	682b      	ldr	r3, [r5, #0]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optname = optname;
 8008472:	9603      	str	r6, [sp, #12]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval.p = optval;
 8008474:	e9cd 4304 	strd	r4, r3, [sp, #16]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	9306      	str	r3, [sp, #24]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 800847c:	6803      	ldr	r3, [r0, #0]
  cberr = tcpip_callback(lwip_getsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 800847e:	480e      	ldr	r0, [pc, #56]	; (80084b8 <lwip_getsockopt+0x6c>)
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).level = level;
 8008480:	e9cd 7101 	strd	r7, r1, [sp, #4]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 8008484:	330c      	adds	r3, #12
  cberr = tcpip_callback(lwip_getsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 8008486:	a901      	add	r1, sp, #4
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 8008488:	9307      	str	r3, [sp, #28]
  cberr = tcpip_callback(lwip_getsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 800848a:	f000 f91d 	bl	80086c8 <tcpip_callback>
  if (cberr != ERR_OK) {
 800848e:	4601      	mov	r1, r0
 8008490:	b130      	cbz	r0, 80084a0 <lwip_getsockopt+0x54>
    sock_set_errno(sock, err_to_errno(cberr));
 8008492:	f7fe f95b 	bl	800674c <err_to_errno>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0e1      	beq.n	800845e <lwip_getsockopt+0x12>
  sock_set_errno(sock, err);
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <lwip_getsockopt+0x68>)
 800849c:	6018      	str	r0, [r3, #0]
 800849e:	e7de      	b.n	800845e <lwip_getsockopt+0x12>
  sys_arch_sem_wait((sys_sem_t *)(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem), 0);
 80084a0:	9807      	ldr	r0, [sp, #28]
 80084a2:	f00c f99d 	bl	80147e0 <sys_arch_sem_wait>
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
 80084a6:	9806      	ldr	r0, [sp, #24]
  *optlen = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen;
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	602b      	str	r3, [r5, #0]
  sock_set_errno(sock, err);
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d1f4      	bne.n	800849a <lwip_getsockopt+0x4e>
}
 80084b0:	b009      	add	sp, #36	; 0x24
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b4:	20016130 	.word	0x20016130
 80084b8:	08007525 	.word	0x08007525

080084bc <lwip_setsockopt>:
{
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	b088      	sub	sp, #32
 80084c0:	4606      	mov	r6, r0
 80084c2:	4615      	mov	r5, r2
 80084c4:	461c      	mov	r4, r3
  struct lwip_sock *sock = get_socket(s);
 80084c6:	f7fe fcd9 	bl	8006e7c <get_socket>
  if (!sock) {
 80084ca:	b910      	cbnz	r0, 80084d2 <lwip_setsockopt+0x16>
  return err ? -1 : 0;
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e022      	b.n	8008518 <lwip_setsockopt+0x5c>
  if (NULL == optval) {
 80084d2:	b91c      	cbnz	r4, 80084dc <lwip_setsockopt+0x20>
    sock_set_errno(sock, EFAULT);
 80084d4:	4b11      	ldr	r3, [pc, #68]	; (800851c <lwip_setsockopt+0x60>)
 80084d6:	220e      	movs	r2, #14
 80084d8:	601a      	str	r2, [r3, #0]
    return -1;
 80084da:	e7f7      	b.n	80084cc <lwip_setsockopt+0x10>
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen = optlen;
 80084dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optname = optname;
 80084de:	9503      	str	r5, [sp, #12]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval.pc = (const void *)optval;
 80084e0:	e9cd 4304 	strd	r4, r3, [sp, #16]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	9306      	str	r3, [sp, #24]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 80084e8:	6803      	ldr	r3, [r0, #0]
  cberr = tcpip_callback(lwip_setsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 80084ea:	480d      	ldr	r0, [pc, #52]	; (8008520 <lwip_setsockopt+0x64>)
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).level = level;
 80084ec:	e9cd 6101 	strd	r6, r1, [sp, #4]
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 80084f0:	330c      	adds	r3, #12
  cberr = tcpip_callback(lwip_setsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 80084f2:	a901      	add	r1, sp, #4
  LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
 80084f4:	9307      	str	r3, [sp, #28]
  cberr = tcpip_callback(lwip_setsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
 80084f6:	f000 f8e7 	bl	80086c8 <tcpip_callback>
  if (cberr != ERR_OK) {
 80084fa:	4601      	mov	r1, r0
 80084fc:	b130      	cbz	r0, 800850c <lwip_setsockopt+0x50>
    sock_set_errno(sock, err_to_errno(cberr));
 80084fe:	f7fe f925 	bl	800674c <err_to_errno>
 8008502:	2800      	cmp	r0, #0
 8008504:	d0e2      	beq.n	80084cc <lwip_setsockopt+0x10>
  sock_set_errno(sock, err);
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <lwip_setsockopt+0x60>)
 8008508:	6018      	str	r0, [r3, #0]
 800850a:	e7df      	b.n	80084cc <lwip_setsockopt+0x10>
  sys_arch_sem_wait((sys_sem_t *)(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem), 0);
 800850c:	9807      	ldr	r0, [sp, #28]
 800850e:	f00c f967 	bl	80147e0 <sys_arch_sem_wait>
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
 8008512:	9806      	ldr	r0, [sp, #24]
  sock_set_errno(sock, err);
 8008514:	2800      	cmp	r0, #0
 8008516:	d1f6      	bne.n	8008506 <lwip_setsockopt+0x4a>
}
 8008518:	b008      	add	sp, #32
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	20016130 	.word	0x20016130
 8008520:	08006ea1 	.word	0x08006ea1

08008524 <lwip_ioctl>:
{
 8008524:	b510      	push	{r4, lr}
 8008526:	4614      	mov	r4, r2
  struct lwip_sock *sock = get_socket(s);
 8008528:	f7fe fca8 	bl	8006e7c <get_socket>
  if (!sock) {
 800852c:	b190      	cbz	r0, 8008554 <lwip_ioctl+0x30>
  switch (cmd) {
 800852e:	4b0b      	ldr	r3, [pc, #44]	; (800855c <lwip_ioctl+0x38>)
 8008530:	4299      	cmp	r1, r3
 8008532:	d10c      	bne.n	800854e <lwip_ioctl+0x2a>
      if (argp && *(int *)argp) {
 8008534:	6802      	ldr	r2, [r0, #0]
 8008536:	7f13      	ldrb	r3, [r2, #28]
 8008538:	b134      	cbz	r4, 8008548 <lwip_ioctl+0x24>
 800853a:	6821      	ldr	r1, [r4, #0]
 800853c:	b121      	cbz	r1, 8008548 <lwip_ioctl+0x24>
      netconn_set_nonblocking(sock->conn, val);
 800853e:	f043 0302 	orr.w	r3, r3, #2
 8008542:	7713      	strb	r3, [r2, #28]
      return 0;
 8008544:	2000      	movs	r0, #0
}
 8008546:	bd10      	pop	{r4, pc}
      netconn_set_nonblocking(sock->conn, val);
 8008548:	f023 0302 	bic.w	r3, r3, #2
 800854c:	e7f9      	b.n	8008542 <lwip_ioctl+0x1e>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800854e:	4b04      	ldr	r3, [pc, #16]	; (8008560 <lwip_ioctl+0x3c>)
 8008550:	2226      	movs	r2, #38	; 0x26
 8008552:	601a      	str	r2, [r3, #0]
    return -1;
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	e7f5      	b.n	8008546 <lwip_ioctl+0x22>
 800855a:	bf00      	nop
 800855c:	8004667e 	.word	0x8004667e
 8008560:	20016130 	.word	0x20016130

08008564 <lwip_inet_ntop>:
{
 8008564:	b510      	push	{r4, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
  if (size_int < 0) {
 800856c:	1e1a      	subs	r2, r3, #0
 800856e:	da04      	bge.n	800857a <lwip_inet_ntop+0x16>
    set_errno(ENOSPC);
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <lwip_inet_ntop+0x38>)
 8008572:	221c      	movs	r2, #28
      set_errno(EAFNOSUPPORT);
 8008574:	601a      	str	r2, [r3, #0]
  const char *ret = NULL;
 8008576:	2000      	movs	r0, #0
      break;
 8008578:	e00c      	b.n	8008594 <lwip_inet_ntop+0x30>
  switch (af) {
 800857a:	2c02      	cmp	r4, #2
 800857c:	d004      	beq.n	8008588 <lwip_inet_ntop+0x24>
 800857e:	2c0a      	cmp	r4, #10
 8008580:	d009      	beq.n	8008596 <lwip_inet_ntop+0x32>
      set_errno(EAFNOSUPPORT);
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <lwip_inet_ntop+0x38>)
 8008584:	2261      	movs	r2, #97	; 0x61
 8008586:	e7f5      	b.n	8008574 <lwip_inet_ntop+0x10>
      ret = ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
 8008588:	f002 f996 	bl	800a8b8 <ip4addr_ntoa_r>
      if (ret == NULL) {
 800858c:	b910      	cbnz	r0, 8008594 <lwip_inet_ntop+0x30>
        set_errno(ENOSPC);
 800858e:	4b03      	ldr	r3, [pc, #12]	; (800859c <lwip_inet_ntop+0x38>)
 8008590:	221c      	movs	r2, #28
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bd10      	pop	{r4, pc}
      ret = ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
 8008596:	f003 fbeb 	bl	800bd70 <ip6addr_ntoa_r>
 800859a:	e7f7      	b.n	800858c <lwip_inet_ntop+0x28>
 800859c:	20016130 	.word	0x20016130

080085a0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80085a0:	b507      	push	{r0, r1, r2, lr}
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
  if (tcpip_init_done != NULL) {
 80085a2:	4a27      	ldr	r2, [pc, #156]	; (8008640 <tcpip_thread+0xa0>)
 80085a4:	6813      	ldr	r3, [r2, #0]
 80085a6:	b10b      	cbz	r3, 80085ac <tcpip_thread+0xc>
    tcpip_init_done(tcpip_init_done_arg);
 80085a8:	6850      	ldr	r0, [r2, #4]
 80085aa:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80085ac:	4d25      	ldr	r5, [pc, #148]	; (8008644 <tcpip_thread+0xa4>)
  sleeptime = sys_timeouts_sleeptime();
 80085ae:	f00b fa2b 	bl	8013a08 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80085b2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80085b4:	4602      	mov	r2, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80085b6:	d10d      	bne.n	80085d4 <tcpip_thread+0x34>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80085b8:	2200      	movs	r2, #0
 80085ba:	a901      	add	r1, sp, #4
 80085bc:	4628      	mov	r0, r5
 80085be:	f00c f8bd 	bl	801473c <sys_arch_mbox_fetch>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 80085c2:	9c01      	ldr	r4, [sp, #4]
 80085c4:	b98c      	cbnz	r4, 80085ea <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <tcpip_thread+0xa8>)
 80085c8:	2291      	movs	r2, #145	; 0x91
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80085ca:	4920      	ldr	r1, [pc, #128]	; (800864c <tcpip_thread+0xac>)
 80085cc:	4820      	ldr	r0, [pc, #128]	; (8008650 <tcpip_thread+0xb0>)
 80085ce:	f014 faab 	bl	801cb28 <iprintf>
      break;
 80085d2:	e7ec      	b.n	80085ae <tcpip_thread+0xe>
  } else if (sleeptime == 0) {
 80085d4:	b910      	cbnz	r0, 80085dc <tcpip_thread+0x3c>
    sys_check_timeouts();
 80085d6:	f00b f9fb 	bl	80139d0 <sys_check_timeouts>
    goto again;
 80085da:	e7e8      	b.n	80085ae <tcpip_thread+0xe>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80085dc:	a901      	add	r1, sp, #4
 80085de:	4628      	mov	r0, r5
 80085e0:	f00c f8ac 	bl	801473c <sys_arch_mbox_fetch>
  if (res == SYS_ARCH_TIMEOUT) {
 80085e4:	3001      	adds	r0, #1
 80085e6:	d0f6      	beq.n	80085d6 <tcpip_thread+0x36>
 80085e8:	e7eb      	b.n	80085c2 <tcpip_thread+0x22>
  switch (msg->type) {
 80085ea:	7823      	ldrb	r3, [r4, #0]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d824      	bhi.n	800863a <tcpip_thread+0x9a>
 80085f0:	e8df f003 	tbb	[pc, r3]
 80085f4:	190c031f 	.word	0x190c031f
 80085f8:	1f          	.byte	0x1f
 80085f9:	00          	.byte	0x00
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 80085fa:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80085fe:	4630      	mov	r0, r6
 8008600:	4798      	blx	r3
 8008602:	7030      	strb	r0, [r6, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 8008604:	68e0      	ldr	r0, [r4, #12]
 8008606:	f00c f906 	bl	8014816 <sys_sem_signal>
      break;
 800860a:	e7d0      	b.n	80085ae <tcpip_thread+0xe>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800860c:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8008610:	6860      	ldr	r0, [r4, #4]
 8008612:	4798      	blx	r3
 8008614:	b110      	cbz	r0, 800861c <tcpip_thread+0x7c>
        pbuf_free(msg->msg.inp.p);
 8008616:	6860      	ldr	r0, [r4, #4]
 8008618:	f006 feb2 	bl	800f380 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800861c:	4621      	mov	r1, r4
 800861e:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008620:	f006 fb40 	bl	800eca4 <memp_free>
      break;
 8008624:	e7c3      	b.n	80085ae <tcpip_thread+0xe>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008626:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800862a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800862c:	4621      	mov	r1, r4
 800862e:	2008      	movs	r0, #8
 8008630:	e7f6      	b.n	8008620 <tcpip_thread+0x80>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008632:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8008636:	4798      	blx	r3
      break;
 8008638:	e7b9      	b.n	80085ae <tcpip_thread+0xe>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800863a:	4b03      	ldr	r3, [pc, #12]	; (8008648 <tcpip_thread+0xa8>)
 800863c:	22cf      	movs	r2, #207	; 0xcf
 800863e:	e7c4      	b.n	80085ca <tcpip_thread+0x2a>
 8008640:	20006974 	.word	0x20006974
 8008644:	2000697c 	.word	0x2000697c
 8008648:	0802be23 	.word	0x0802be23
 800864c:	0802be8c 	.word	0x0802be8c
 8008650:	0802aecf 	.word	0x0802aecf

08008654 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008658:	4810      	ldr	r0, [pc, #64]	; (800869c <tcpip_inpkt+0x48>)
{
 800865a:	460e      	mov	r6, r1
 800865c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800865e:	f00c f8a0 	bl	80147a2 <sys_mbox_valid>
 8008662:	b928      	cbnz	r0, 8008670 <tcpip_inpkt+0x1c>
 8008664:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <tcpip_inpkt+0x4c>)
 8008666:	490f      	ldr	r1, [pc, #60]	; (80086a4 <tcpip_inpkt+0x50>)
 8008668:	480f      	ldr	r0, [pc, #60]	; (80086a8 <tcpip_inpkt+0x54>)
 800866a:	22fc      	movs	r2, #252	; 0xfc
 800866c:	f014 fa5c 	bl	801cb28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008670:	2009      	movs	r0, #9
 8008672:	f006 fafb 	bl	800ec6c <memp_malloc>
  if (msg == NULL) {
 8008676:	4604      	mov	r4, r0
 8008678:	b168      	cbz	r0, 8008696 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800867a:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 800867c:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_INPKT;
 8008680:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8008682:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008684:	4601      	mov	r1, r0
 8008686:	4805      	ldr	r0, [pc, #20]	; (800869c <tcpip_inpkt+0x48>)
 8008688:	f00c f84e 	bl	8014728 <sys_mbox_trypost>
 800868c:	b128      	cbz	r0, 800869a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800868e:	4621      	mov	r1, r4
 8008690:	2009      	movs	r0, #9
 8008692:	f006 fb07 	bl	800eca4 <memp_free>
    return ERR_MEM;
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	2000697c 	.word	0x2000697c
 80086a0:	0802be23 	.word	0x0802be23
 80086a4:	0802beaa 	.word	0x0802beaa
 80086a8:	0802aecf 	.word	0x0802aecf

080086ac <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80086ac:	f891 30db 	ldrb.w	r3, [r1, #219]	; 0xdb
 80086b0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80086b4:	bf14      	ite	ne
 80086b6:	4a02      	ldrne	r2, [pc, #8]	; (80086c0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80086b8:	4a02      	ldreq	r2, [pc, #8]	; (80086c4 <tcpip_input+0x18>)
 80086ba:	f7ff bfcb 	b.w	8008654 <tcpip_inpkt>
 80086be:	bf00      	nop
 80086c0:	080145a9 	.word	0x080145a9
 80086c4:	0800e6e5 	.word	0x0800e6e5

080086c8 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4605      	mov	r5, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80086cc:	480e      	ldr	r0, [pc, #56]	; (8008708 <tcpip_callback+0x40>)
{
 80086ce:	460c      	mov	r4, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80086d0:	f00c f867 	bl	80147a2 <sys_mbox_valid>
 80086d4:	b930      	cbnz	r0, 80086e4 <tcpip_callback+0x1c>
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <tcpip_callback+0x44>)
 80086d8:	490d      	ldr	r1, [pc, #52]	; (8008710 <tcpip_callback+0x48>)
 80086da:	480e      	ldr	r0, [pc, #56]	; (8008714 <tcpip_callback+0x4c>)
 80086dc:	f240 1239 	movw	r2, #313	; 0x139
 80086e0:	f014 fa22 	bl	801cb28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80086e4:	2008      	movs	r0, #8
 80086e6:	f006 fac1 	bl	800ec6c <memp_malloc>
  if (msg == NULL) {
 80086ea:	4601      	mov	r1, r0
 80086ec:	b140      	cbz	r0, 8008700 <tcpip_callback+0x38>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80086ee:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;
 80086f0:	e9c0 5401 	strd	r5, r4, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 80086f4:	7003      	strb	r3, [r0, #0]

  sys_mbox_post(&tcpip_mbox, msg);
 80086f6:	4804      	ldr	r0, [pc, #16]	; (8008708 <tcpip_callback+0x40>)
 80086f8:	f00c f80a 	bl	8014710 <sys_mbox_post>
  return ERR_OK;
 80086fc:	2000      	movs	r0, #0
}
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_MEM;
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e7fb      	b.n	80086fe <tcpip_callback+0x36>
 8008706:	bf00      	nop
 8008708:	2000697c 	.word	0x2000697c
 800870c:	0802be23 	.word	0x0802be23
 8008710:	0802beaa 	.word	0x0802beaa
 8008714:	0802aecf 	.word	0x0802aecf

08008718 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8008718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871a:	4607      	mov	r7, r0
 800871c:	b085      	sub	sp, #20
  UNLOCK_TCPIP_CORE();
  return ERR_OK;
#else /* LWIP_TCPIP_CORE_LOCKING */
  TCPIP_MSG_VAR_DECLARE(msg);

  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 800871e:	4610      	mov	r0, r2
{
 8008720:	460e      	mov	r6, r1
 8008722:	4614      	mov	r4, r2
  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 8008724:	f00c f87d 	bl	8014822 <sys_sem_valid>
 8008728:	b930      	cbnz	r0, 8008738 <tcpip_send_msg_wait_sem+0x20>
 800872a:	4b11      	ldr	r3, [pc, #68]	; (8008770 <tcpip_send_msg_wait_sem+0x58>)
 800872c:	4911      	ldr	r1, [pc, #68]	; (8008774 <tcpip_send_msg_wait_sem+0x5c>)
 800872e:	4812      	ldr	r0, [pc, #72]	; (8008778 <tcpip_send_msg_wait_sem+0x60>)
 8008730:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8008734:	f014 f9f8 	bl	801cb28 <iprintf>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008738:	4810      	ldr	r0, [pc, #64]	; (800877c <tcpip_send_msg_wait_sem+0x64>)
 800873a:	f00c f832 	bl	80147a2 <sys_mbox_valid>
 800873e:	b930      	cbnz	r0, 800874e <tcpip_send_msg_wait_sem+0x36>
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <tcpip_send_msg_wait_sem+0x58>)
 8008742:	490f      	ldr	r1, [pc, #60]	; (8008780 <tcpip_send_msg_wait_sem+0x68>)
 8008744:	480c      	ldr	r0, [pc, #48]	; (8008778 <tcpip_send_msg_wait_sem+0x60>)
 8008746:	f240 12c1 	movw	r2, #449	; 0x1c1
 800874a:	f014 f9ed 	bl	801cb28 <iprintf>

  TCPIP_MSG_VAR_ALLOC(msg);
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 800874e:	2500      	movs	r5, #0
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
 8008750:	4669      	mov	r1, sp
 8008752:	480a      	ldr	r0, [pc, #40]	; (800877c <tcpip_send_msg_wait_sem+0x64>)
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8008754:	f88d 5000 	strb.w	r5, [sp]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
 8008758:	e9cd 7601 	strd	r7, r6, [sp, #4]
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
 800875c:	f00b ffd8 	bl	8014710 <sys_mbox_post>
  sys_arch_sem_wait(sem, 0);
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f00c f83c 	bl	80147e0 <sys_arch_sem_wait>
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008768:	4628      	mov	r0, r5
 800876a:	b005      	add	sp, #20
 800876c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876e:	bf00      	nop
 8008770:	0802be23 	.word	0x0802be23
 8008774:	0802beb7 	.word	0x0802beb7
 8008778:	0802aecf 	.word	0x0802aecf
 800877c:	2000697c 	.word	0x2000697c
 8008780:	0802beaa 	.word	0x0802beaa

08008784 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008786:	4605      	mov	r5, r0
 8008788:	460c      	mov	r4, r1
  lwip_init();
 800878a:	f005 ff98 	bl	800e6be <lwip_init>

  tcpip_init_done = initfunc;
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <tcpip_init+0x40>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008790:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8008792:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008796:	3008      	adds	r0, #8
 8008798:	f00b ffa0 	bl	80146dc <sys_mbox_new>
 800879c:	b130      	cbz	r0, 80087ac <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800879e:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <tcpip_init+0x44>)
 80087a0:	490a      	ldr	r1, [pc, #40]	; (80087cc <tcpip_init+0x48>)
 80087a2:	480b      	ldr	r0, [pc, #44]	; (80087d0 <tcpip_init+0x4c>)
 80087a4:	f240 2261 	movw	r2, #609	; 0x261
 80087a8:	f014 f9be 	bl	801cb28 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80087ac:	2302      	movs	r3, #2
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	4908      	ldr	r1, [pc, #32]	; (80087d4 <tcpip_init+0x50>)
 80087b2:	4809      	ldr	r0, [pc, #36]	; (80087d8 <tcpip_init+0x54>)
 80087b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087b8:	2200      	movs	r2, #0
 80087ba:	f00c f85d 	bl	8014878 <sys_thread_new>
}
 80087be:	b003      	add	sp, #12
 80087c0:	bd30      	pop	{r4, r5, pc}
 80087c2:	bf00      	nop
 80087c4:	20006974 	.word	0x20006974
 80087c8:	0802be23 	.word	0x0802be23
 80087cc:	0802bed1 	.word	0x0802bed1
 80087d0:	0802aecf 	.word	0x0802aecf
 80087d4:	080085a1 	.word	0x080085a1
 80087d8:	0802bef4 	.word	0x0802bef4

080087dc <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80087dc:	7943      	ldrb	r3, [r0, #5]
 80087de:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80087e0:	bf1f      	itttt	ne
 80087e2:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80087e4:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 80087e6:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 80087e8:	8103      	strhne	r3, [r0, #8]
  }
}
 80087ea:	4770      	bx	lr

080087ec <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80087ee:	1c87      	adds	r7, r0, #2
 80087f0:	2f44      	cmp	r7, #68	; 0x44
{
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80087f8:	d906      	bls.n	8008808 <dhcp_option_short+0x1c>
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <dhcp_option_short+0x2c>)
 80087fc:	4907      	ldr	r1, [pc, #28]	; (800881c <dhcp_option_short+0x30>)
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <dhcp_option_short+0x34>)
 8008800:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8008804:	f014 f990 	bl	801cb28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008808:	0a33      	lsrs	r3, r6, #8
 800880a:	552b      	strb	r3, [r5, r4]
 800880c:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800880e:	b2a4      	uxth	r4, r4
  return options_out_len;
}
 8008810:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8008812:	552e      	strb	r6, [r5, r4]
}
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008816:	bf00      	nop
 8008818:	0802befb 	.word	0x0802befb
 800881c:	0802bf69 	.word	0x0802bf69
 8008820:	0802aecf 	.word	0x0802aecf

08008824 <dhcp_option>:
{
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008828:	3302      	adds	r3, #2
 800882a:	4403      	add	r3, r0
 800882c:	2b44      	cmp	r3, #68	; 0x44
{
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008834:	d906      	bls.n	8008844 <dhcp_option+0x20>
 8008836:	4b07      	ldr	r3, [pc, #28]	; (8008854 <dhcp_option+0x30>)
 8008838:	4907      	ldr	r1, [pc, #28]	; (8008858 <dhcp_option+0x34>)
 800883a:	4808      	ldr	r0, [pc, #32]	; (800885c <dhcp_option+0x38>)
 800883c:	f240 529a 	movw	r2, #1434	; 0x59a
 8008840:	f014 f972 	bl	801cb28 <iprintf>
  options[options_out_len++] = option_type;
 8008844:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8008846:	b29b      	uxth	r3, r3
 8008848:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 800884a:	552f      	strb	r7, [r5, r4]
}
 800884c:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 800884e:	54ee      	strb	r6, [r5, r3]
}
 8008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008852:	bf00      	nop
 8008854:	0802befb 	.word	0x0802befb
 8008858:	0802bfa4 	.word	0x0802bfa4
 800885c:	0802aecf 	.word	0x0802aecf

08008860 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8008860:	2843      	cmp	r0, #67	; 0x43
{
 8008862:	b570      	push	{r4, r5, r6, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	460d      	mov	r5, r1
 8008868:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800886a:	d906      	bls.n	800887a <dhcp_option_byte+0x1a>
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <dhcp_option_byte+0x24>)
 800886e:	4906      	ldr	r1, [pc, #24]	; (8008888 <dhcp_option_byte+0x28>)
 8008870:	4806      	ldr	r0, [pc, #24]	; (800888c <dhcp_option_byte+0x2c>)
 8008872:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8008876:	f014 f957 	bl	801cb28 <iprintf>
  options[options_out_len++] = value;
 800887a:	1c60      	adds	r0, r4, #1
 800887c:	552e      	strb	r6, [r5, r4]
}
 800887e:	b280      	uxth	r0, r0
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	bf00      	nop
 8008884:	0802befb 	.word	0x0802befb
 8008888:	0802bfe6 	.word	0x0802bfe6
 800888c:	0802aecf 	.word	0x0802aecf

08008890 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008892:	1d07      	adds	r7, r0, #4
 8008894:	2f44      	cmp	r7, #68	; 0x44
{
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800889c:	d906      	bls.n	80088ac <dhcp_option_long+0x1c>
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <dhcp_option_long+0x3c>)
 80088a0:	490b      	ldr	r1, [pc, #44]	; (80088d0 <dhcp_option_long+0x40>)
 80088a2:	480c      	ldr	r0, [pc, #48]	; (80088d4 <dhcp_option_long+0x44>)
 80088a4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80088a8:	f014 f93e 	bl	801cb28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80088ac:	0e33      	lsrs	r3, r6, #24
 80088ae:	552b      	strb	r3, [r5, r4]
 80088b0:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	0c32      	lsrs	r2, r6, #16
 80088b6:	54ea      	strb	r2, [r5, r3]
 80088b8:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80088ba:	3403      	adds	r4, #3
 80088bc:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80088be:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80088c0:	0a32      	lsrs	r2, r6, #8
 80088c2:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 80088c4:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80088c6:	552e      	strb	r6, [r5, r4]
}
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ca:	bf00      	nop
 80088cc:	0802befb 	.word	0x0802befb
 80088d0:	0802c01b 	.word	0x0802c01b
 80088d4:	0802aecf 	.word	0x0802aecf

080088d8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80088d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	460e      	mov	r6, r1
 80088de:	4690      	mov	r8, r2
 80088e0:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80088e2:	4605      	mov	r5, r0
 80088e4:	b958      	cbnz	r0, 80088fe <dhcp_create_msg+0x26>
 80088e6:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <dhcp_create_msg+0x110>)
 80088e8:	4940      	ldr	r1, [pc, #256]	; (80089ec <dhcp_create_msg+0x114>)
 80088ea:	4841      	ldr	r0, [pc, #260]	; (80089f0 <dhcp_create_msg+0x118>)
 80088ec:	f240 7269 	movw	r2, #1897	; 0x769
 80088f0:	f014 f91a 	bl	801cb28 <iprintf>
 80088f4:	462f      	mov	r7, r5
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 80088f6:	4638      	mov	r0, r7
 80088f8:	b003      	add	sp, #12
 80088fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80088fe:	b941      	cbnz	r1, 8008912 <dhcp_create_msg+0x3a>
 8008900:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <dhcp_create_msg+0x110>)
 8008902:	493c      	ldr	r1, [pc, #240]	; (80089f4 <dhcp_create_msg+0x11c>)
 8008904:	483a      	ldr	r0, [pc, #232]	; (80089f0 <dhcp_create_msg+0x118>)
 8008906:	f240 726a 	movw	r2, #1898	; 0x76a
 800890a:	f014 f90d 	bl	801cb28 <iprintf>
 800890e:	4637      	mov	r7, r6
 8008910:	e7f1      	b.n	80088f6 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8008912:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008916:	f44f 719a 	mov.w	r1, #308	; 0x134
 800891a:	204a      	movs	r0, #74	; 0x4a
 800891c:	f006 fd98 	bl	800f450 <pbuf_alloc>
  if (p_out == NULL) {
 8008920:	4607      	mov	r7, r0
 8008922:	2800      	cmp	r0, #0
 8008924:	d0e7      	beq.n	80088f6 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8008926:	8943      	ldrh	r3, [r0, #10]
 8008928:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800892c:	d206      	bcs.n	800893c <dhcp_create_msg+0x64>
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <dhcp_create_msg+0x110>)
 8008930:	4931      	ldr	r1, [pc, #196]	; (80089f8 <dhcp_create_msg+0x120>)
 8008932:	482f      	ldr	r0, [pc, #188]	; (80089f0 <dhcp_create_msg+0x118>)
 8008934:	f240 7271 	movw	r2, #1905	; 0x771
 8008938:	f014 f8f6 	bl	801cb28 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800893c:	f1b8 0f03 	cmp.w	r8, #3
 8008940:	d102      	bne.n	8008948 <dhcp_create_msg+0x70>
 8008942:	7973      	ldrb	r3, [r6, #5]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d107      	bne.n	8008958 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8008948:	79b3      	ldrb	r3, [r6, #6]
 800894a:	4c2c      	ldr	r4, [pc, #176]	; (80089fc <dhcp_create_msg+0x124>)
 800894c:	b913      	cbnz	r3, 8008954 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 800894e:	f014 f931 	bl	801cbb4 <rand>
 8008952:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8008958:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800895a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800895e:	2100      	movs	r1, #0
 8008960:	4620      	mov	r0, r4
 8008962:	f013 fc95 	bl	801c290 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8008966:	2301      	movs	r3, #1
 8008968:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800896a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800896c:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
 8008970:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8008972:	6830      	ldr	r0, [r6, #0]
 8008974:	f005 fb97 	bl	800e0a6 <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8008978:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 800897c:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800897e:	d00a      	beq.n	8008996 <dhcp_create_msg+0xbe>
 8008980:	f1a8 0307 	sub.w	r3, r8, #7
 8008984:	2b01      	cmp	r3, #1
 8008986:	d906      	bls.n	8008996 <dhcp_create_msg+0xbe>
 8008988:	f1b8 0f03 	cmp.w	r8, #3
 800898c:	d105      	bne.n	800899a <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800898e:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8008990:	3b04      	subs	r3, #4
 8008992:	2b01      	cmp	r3, #1
 8008994:	d801      	bhi.n	800899a <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8008996:	686b      	ldr	r3, [r5, #4]
 8008998:	60e3      	str	r3, [r4, #12]
 800899a:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
 800899e:	f104 021c 	add.w	r2, r4, #28
 80089a2:	35da      	adds	r5, #218	; 0xda
    msg_out->chaddr[i] = netif->hwaddr[i];
 80089a4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80089a8:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	d1f9      	bne.n	80089a4 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80089b0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80089b4:	2363      	movs	r3, #99	; 0x63
 80089b6:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 80089ba:	2253      	movs	r2, #83	; 0x53
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80089bc:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80089c0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 80089c4:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 80089c8:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80089cc:	2235      	movs	r2, #53	; 0x35
 80089ce:	2301      	movs	r3, #1
 80089d0:	2000      	movs	r0, #0
 80089d2:	9101      	str	r1, [sp, #4]
 80089d4:	f7ff ff26 	bl	8008824 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	4642      	mov	r2, r8
 80089dc:	f7ff ff40 	bl	8008860 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 80089e0:	f8a9 0000 	strh.w	r0, [r9]
 80089e4:	e787      	b.n	80088f6 <dhcp_create_msg+0x1e>
 80089e6:	bf00      	nop
 80089e8:	0802befb 	.word	0x0802befb
 80089ec:	0802c055 	.word	0x0802c055
 80089f0:	0802aecf 	.word	0x0802aecf
 80089f4:	0802c074 	.word	0x0802c074
 80089f8:	0802c092 	.word	0x0802c092
 80089fc:	20006980 	.word	0x20006980

08008a00 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8008a00:	4603      	mov	r3, r0
 8008a02:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 8008a04:	1c5c      	adds	r4, r3, #1
 8008a06:	25ff      	movs	r5, #255	; 0xff
{
 8008a08:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 8008a0a:	b2a2      	uxth	r2, r4
 8008a0c:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8008a0e:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8008a12:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8008a14:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8008a16:	2c43      	cmp	r4, #67	; 0x43
 8008a18:	d90a      	bls.n	8008a30 <dhcp_option_trailer+0x30>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8008a1a:	2a44      	cmp	r2, #68	; 0x44
 8008a1c:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 8008a20:	bf88      	it	hi
 8008a22:	2100      	movhi	r1, #0
 8008a24:	33f1      	adds	r3, #241	; 0xf1
 8008a26:	4419      	add	r1, r3
}
 8008a28:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8008a2a:	b289      	uxth	r1, r1
 8008a2c:	f006 bd8c 	b.w	800f548 <pbuf_realloc>
    options[options_out_len++] = 0;
 8008a30:	3401      	adds	r4, #1
 8008a32:	f801 5b01 	strb.w	r5, [r1], #1
 8008a36:	b2a4      	uxth	r4, r4
 8008a38:	e7ed      	b.n	8008a16 <dhcp_option_trailer+0x16>
	...

08008a3c <dhcp_reboot>:
{
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008a40:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
{
 8008a44:	b086      	sub	sp, #24
 8008a46:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8008a48:	2103      	movs	r1, #3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff fec6 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008a50:	f10d 0316 	add.w	r3, sp, #22
 8008a54:	2203      	movs	r2, #3
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff ff3d 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 8008a5e:	4605      	mov	r5, r0
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d067      	beq.n	8008b34 <dhcp_reboot+0xf8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008a64:	6841      	ldr	r1, [r0, #4]
 8008a66:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008a6a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8008b44 <dhcp_reboot+0x108>
 8008a6e:	31f0      	adds	r1, #240	; 0xf0
 8008a70:	2302      	movs	r3, #2
 8008a72:	2239      	movs	r2, #57	; 0x39
 8008a74:	9103      	str	r1, [sp, #12]
 8008a76:	f7ff fed5 	bl	8008824 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008a7a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008a7c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008a80:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008a84:	f7ff feb2 	bl	80087ec <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008a88:	2304      	movs	r3, #4
 8008a8a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008a8c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008a90:	2232      	movs	r2, #50	; 0x32
 8008a92:	f7ff fec7 	bl	8008824 <dhcp_option>
 8008a96:	4607      	mov	r7, r0
 8008a98:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008a9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008a9e:	f005 fb02 	bl	800e0a6 <lwip_htonl>
 8008aa2:	9903      	ldr	r1, [sp, #12]
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f7ff fef2 	bl	8008890 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008aac:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008aae:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	2237      	movs	r2, #55	; 0x37
 8008ab6:	f7ff feb5 	bl	8008824 <dhcp_option>
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8008ac0:	2704      	movs	r7, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008ac2:	f818 2b01 	ldrb.w	r2, [r8], #1
 8008ac6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008aca:	9103      	str	r1, [sp, #12]
 8008acc:	f7ff fec8 	bl	8008860 <dhcp_option_byte>
 8008ad0:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008ad2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8008ad6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008ad8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008adc:	d1f1      	bne.n	8008ac2 <dhcp_reboot+0x86>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008ade:	462a      	mov	r2, r5
 8008ae0:	f7ff ff8e 	bl	8008a00 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008ae4:	4815      	ldr	r0, [pc, #84]	; (8008b3c <dhcp_reboot+0x100>)
 8008ae6:	9600      	str	r6, [sp, #0]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <dhcp_reboot+0x104>)
 8008aea:	6840      	ldr	r0, [r0, #4]
 8008aec:	2343      	movs	r3, #67	; 0x43
 8008aee:	4629      	mov	r1, r5
 8008af0:	f00b facc 	bl	801408c <udp_sendto_if>
 8008af4:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8008af6:	4628      	mov	r0, r5
 8008af8:	f006 fc42 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 8008afc:	79a3      	ldrb	r3, [r4, #6]
 8008afe:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008b00:	bf1c      	itt	ne
 8008b02:	3301      	addne	r3, #1
 8008b04:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008b06:	79a3      	ldrb	r3, [r4, #6]
 8008b08:	2b09      	cmp	r3, #9
 8008b0a:	bf9f      	itttt	ls
 8008b0c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008b10:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8008b14:	00db      	lslls	r3, r3, #3
 8008b16:	b29b      	uxthls	r3, r3
 8008b18:	bf88      	it	hi
 8008b1a:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008b1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8008b22:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008b24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b2c:	8123      	strh	r3, [r4, #8]
}
 8008b2e:	b006      	add	sp, #24
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8008b34:	f04f 36ff 	mov.w	r6, #4294967295
 8008b38:	e7e0      	b.n	8008afc <dhcp_reboot+0xc0>
 8008b3a:	bf00      	nop
 8008b3c:	20006980 	.word	0x20006980
 8008b40:	0801fc14 	.word	0x0801fc14
 8008b44:	0801fc10 	.word	0x0801fc10

08008b48 <dhcp_select>:
{
 8008b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8008b4c:	4607      	mov	r7, r0
{
 8008b4e:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8008b50:	b960      	cbnz	r0, 8008b6c <dhcp_select+0x24>
 8008b52:	4b53      	ldr	r3, [pc, #332]	; (8008ca0 <dhcp_select+0x158>)
 8008b54:	4953      	ldr	r1, [pc, #332]	; (8008ca4 <dhcp_select+0x15c>)
 8008b56:	4854      	ldr	r0, [pc, #336]	; (8008ca8 <dhcp_select+0x160>)
 8008b58:	f240 1277 	movw	r2, #375	; 0x177
 8008b5c:	f013 ffe4 	bl	801cb28 <iprintf>
 8008b60:	f06f 050f 	mvn.w	r5, #15
}
 8008b64:	4628      	mov	r0, r5
 8008b66:	b005      	add	sp, #20
 8008b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8008b6c:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8008b70:	b94c      	cbnz	r4, 8008b86 <dhcp_select+0x3e>
 8008b72:	4b4b      	ldr	r3, [pc, #300]	; (8008ca0 <dhcp_select+0x158>)
 8008b74:	494d      	ldr	r1, [pc, #308]	; (8008cac <dhcp_select+0x164>)
 8008b76:	484c      	ldr	r0, [pc, #304]	; (8008ca8 <dhcp_select+0x160>)
 8008b78:	f240 1279 	movw	r2, #377	; 0x179
 8008b7c:	f013 ffd4 	bl	801cb28 <iprintf>
 8008b80:	f06f 0505 	mvn.w	r5, #5
 8008b84:	e7ee      	b.n	8008b64 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8008b86:	2101      	movs	r1, #1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff fe27 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008b8e:	f10d 030e 	add.w	r3, sp, #14
 8008b92:	2203      	movs	r2, #3
 8008b94:	4621      	mov	r1, r4
 8008b96:	4638      	mov	r0, r7
 8008b98:	f7ff fe9e 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d07b      	beq.n	8008c9a <dhcp_select+0x152>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008ba2:	6845      	ldr	r5, [r0, #4]
 8008ba4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008ba8:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8008cbc <dhcp_select+0x174>
 8008bac:	35f0      	adds	r5, #240	; 0xf0
 8008bae:	2302      	movs	r3, #2
 8008bb0:	2239      	movs	r2, #57	; 0x39
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	f7ff fe36 	bl	8008824 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008bb8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008bbc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7ff fe13 	bl	80087ec <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008bc6:	2304      	movs	r3, #4
 8008bc8:	2232      	movs	r2, #50	; 0x32
 8008bca:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008bcc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008bd0:	f7ff fe28 	bl	8008824 <dhcp_option>
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008bda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008bdc:	f005 fa63 	bl	800e0a6 <lwip_htonl>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4602      	mov	r2, r0
 8008be4:	4640      	mov	r0, r8
 8008be6:	f7ff fe53 	bl	8008890 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008bea:	2304      	movs	r3, #4
 8008bec:	2236      	movs	r2, #54	; 0x36
 8008bee:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008bf0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008bf4:	f7ff fe16 	bl	8008824 <dhcp_option>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008bfe:	69a0      	ldr	r0, [r4, #24]
 8008c00:	f005 fa51 	bl	800e0a6 <lwip_htonl>
 8008c04:	4629      	mov	r1, r5
 8008c06:	4602      	mov	r2, r0
 8008c08:	4640      	mov	r0, r8
 8008c0a:	f7ff fe41 	bl	8008890 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008c0e:	2304      	movs	r3, #4
 8008c10:	2237      	movs	r2, #55	; 0x37
 8008c12:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008c14:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008c18:	f7ff fe04 	bl	8008824 <dhcp_option>
 8008c1c:	f04f 0804 	mov.w	r8, #4
 8008c20:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008c24:	f819 2b01 	ldrb.w	r2, [r9], #1
 8008c28:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7ff fe17 	bl	8008860 <dhcp_option_byte>
 8008c32:	f108 38ff 	add.w	r8, r8, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008c36:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008c3a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008c3e:	d1f1      	bne.n	8008c24 <dhcp_select+0xdc>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008c40:	4629      	mov	r1, r5
 8008c42:	4632      	mov	r2, r6
 8008c44:	f7ff fedc 	bl	8008a00 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008c48:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <dhcp_select+0x168>)
 8008c4a:	481a      	ldr	r0, [pc, #104]	; (8008cb4 <dhcp_select+0x16c>)
 8008c4c:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <dhcp_select+0x170>)
 8008c4e:	e9cd 7300 	strd	r7, r3, [sp]
 8008c52:	4631      	mov	r1, r6
 8008c54:	6840      	ldr	r0, [r0, #4]
 8008c56:	2343      	movs	r3, #67	; 0x43
 8008c58:	f00b f93e 	bl	8013ed8 <udp_sendto_if_src>
 8008c5c:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f006 fb8e 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 8008c64:	79a3      	ldrb	r3, [r4, #6]
 8008c66:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008c68:	bf1c      	itt	ne
 8008c6a:	3301      	addne	r3, #1
 8008c6c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8008c6e:	79a2      	ldrb	r2, [r4, #6]
 8008c70:	2a05      	cmp	r2, #5
 8008c72:	bf9f      	itttt	ls
 8008c74:	2301      	movls	r3, #1
 8008c76:	4093      	lslls	r3, r2
 8008c78:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008c7c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8008c80:	bf9a      	itte	ls
 8008c82:	00db      	lslls	r3, r3, #3
 8008c84:	b29b      	uxthls	r3, r3
 8008c86:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008c8a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008c8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c96:	8123      	strh	r3, [r4, #8]
  return result;
 8008c98:	e764      	b.n	8008b64 <dhcp_select+0x1c>
    result = ERR_MEM;
 8008c9a:	f04f 35ff 	mov.w	r5, #4294967295
 8008c9e:	e7e1      	b.n	8008c64 <dhcp_select+0x11c>
 8008ca0:	0802befb 	.word	0x0802befb
 8008ca4:	0802c0d2 	.word	0x0802c0d2
 8008ca8:	0802aecf 	.word	0x0802aecf
 8008cac:	0802c0ed 	.word	0x0802c0ed
 8008cb0:	0801fc2c 	.word	0x0801fc2c
 8008cb4:	20006980 	.word	0x20006980
 8008cb8:	0801fc14 	.word	0x0801fc14
 8008cbc:	0801fc10 	.word	0x0801fc10

08008cc0 <dhcp_discover>:
{
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008cc4:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008cc8:	2300      	movs	r3, #0
{
 8008cca:	b086      	sub	sp, #24
 8008ccc:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008cce:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008cd0:	2106      	movs	r1, #6
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7ff fd82 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8008cd8:	f10d 0316 	add.w	r3, sp, #22
 8008cdc:	2201      	movs	r2, #1
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff fdf9 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d03a      	beq.n	8008d62 <dhcp_discover+0xa2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008cec:	6841      	ldr	r1, [r0, #4]
 8008cee:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008cf2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8008dac <dhcp_discover+0xec>
 8008cf6:	31f0      	adds	r1, #240	; 0xf0
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	2239      	movs	r2, #57	; 0x39
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	f7ff fd91 	bl	8008824 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008d02:	f8b6 20d0 	ldrh.w	r2, [r6, #208]	; 0xd0
 8008d06:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008d08:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008d0c:	f7ff fd6e 	bl	80087ec <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008d10:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008d12:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008d16:	2304      	movs	r3, #4
 8008d18:	2237      	movs	r2, #55	; 0x37
 8008d1a:	f7ff fd83 	bl	8008824 <dhcp_option>
 8008d1e:	9903      	ldr	r1, [sp, #12]
 8008d20:	f8ad 0016 	strh.w	r0, [sp, #22]
 8008d24:	2704      	movs	r7, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008d26:	f818 2b01 	ldrb.w	r2, [r8], #1
 8008d2a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008d2e:	9103      	str	r1, [sp, #12]
 8008d30:	f7ff fd96 	bl	8008860 <dhcp_option_byte>
 8008d34:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008d36:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8008d3a:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008d3c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008d40:	d1f1      	bne.n	8008d26 <dhcp_discover+0x66>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008d42:	462a      	mov	r2, r5
 8008d44:	f7ff fe5c 	bl	8008a00 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008d48:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <dhcp_discover+0xe0>)
 8008d4a:	4816      	ldr	r0, [pc, #88]	; (8008da4 <dhcp_discover+0xe4>)
 8008d4c:	4a16      	ldr	r2, [pc, #88]	; (8008da8 <dhcp_discover+0xe8>)
 8008d4e:	e9cd 6300 	strd	r6, r3, [sp]
 8008d52:	4629      	mov	r1, r5
 8008d54:	6840      	ldr	r0, [r0, #4]
 8008d56:	2343      	movs	r3, #67	; 0x43
 8008d58:	f00b f8be 	bl	8013ed8 <udp_sendto_if_src>
    pbuf_free(p_out);
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f006 fb0f 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 8008d62:	79a3      	ldrb	r3, [r4, #6]
 8008d64:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008d66:	bf1c      	itt	ne
 8008d68:	3301      	addne	r3, #1
 8008d6a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8008d6c:	79a2      	ldrb	r2, [r4, #6]
 8008d6e:	2a05      	cmp	r2, #5
 8008d70:	bf9f      	itttt	ls
 8008d72:	2301      	movls	r3, #1
 8008d74:	4093      	lslls	r3, r2
 8008d76:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008d7a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8008d7e:	bf9a      	itte	ls
 8008d80:	00db      	lslls	r3, r3, #3
 8008d82:	b29b      	uxthls	r3, r3
 8008d84:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8008d8c:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d8e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d96:	8123      	strh	r3, [r4, #8]
}
 8008d98:	b006      	add	sp, #24
 8008d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9e:	bf00      	nop
 8008da0:	0801fc2c 	.word	0x0801fc2c
 8008da4:	20006980 	.word	0x20006980
 8008da8:	0801fc14 	.word	0x0801fc14
 8008dac:	0801fc10 	.word	0x0801fc10

08008db0 <dhcp_check>:
{
 8008db0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008db2:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
{
 8008db6:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008db8:	2108      	movs	r1, #8
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff fd0e 	bl	80087dc <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f001 f8e6 	bl	8009f98 <etharp_query>
  if (dhcp->tries < 255) {
 8008dcc:	79a3      	ldrb	r3, [r4, #6]
 8008dce:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008dd0:	bf1c      	itt	ne
 8008dd2:	3301      	addne	r3, #1
 8008dd4:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	8123      	strh	r3, [r4, #8]
}
 8008dda:	bd38      	pop	{r3, r4, r5, pc}

08008ddc <dhcp_bind>:
{
 8008ddc:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8008dde:	4605      	mov	r5, r0
 8008de0:	b940      	cbnz	r0, 8008df4 <dhcp_bind+0x18>
 8008de2:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <dhcp_bind+0x100>)
 8008de4:	493e      	ldr	r1, [pc, #248]	; (8008ee0 <dhcp_bind+0x104>)
 8008de6:	f240 4215 	movw	r2, #1045	; 0x415
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008dea:	483e      	ldr	r0, [pc, #248]	; (8008ee4 <dhcp_bind+0x108>)
 8008dec:	f013 fe9c 	bl	801cb28 <iprintf>
}
 8008df0:	b002      	add	sp, #8
 8008df2:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 8008df4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008df8:	b920      	cbnz	r0, 8008e04 <dhcp_bind+0x28>
 8008dfa:	4b38      	ldr	r3, [pc, #224]	; (8008edc <dhcp_bind+0x100>)
 8008dfc:	493a      	ldr	r1, [pc, #232]	; (8008ee8 <dhcp_bind+0x10c>)
 8008dfe:	f240 4217 	movw	r2, #1047	; 0x417
 8008e02:	e7f2      	b.n	8008dea <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008e08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	d00c      	beq.n	8008e28 <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e0e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8008e10:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8008e14:	bf2e      	itee	cs
 8008e16:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e1a:	223c      	movcc	r2, #60	; 0x3c
 8008e1c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8008e20:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d042      	beq.n	8008eac <dhcp_bind+0xd0>
    dhcp->t0_timeout = (u16_t)timeout;
 8008e26:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008e28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	d00e      	beq.n	8008e4c <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e2e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8008e30:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8008e34:	bf2e      	itee	cs
 8008e36:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e3a:	223c      	movcc	r2, #60	; 0x3c
 8008e3c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8008e40:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d035      	beq.n	8008eb2 <dhcp_bind+0xd6>
    dhcp->t1_timeout = (u16_t)timeout;
 8008e46:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008e48:	8943      	ldrh	r3, [r0, #10]
 8008e4a:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008e4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	d00d      	beq.n	8008e6e <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e52:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8008e54:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8008e58:	bf2e      	itee	cs
 8008e5a:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008e5e:	223c      	movcc	r2, #60	; 0x3c
 8008e60:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8008e64:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8008e66:	b33b      	cbz	r3, 8008eb8 <dhcp_bind+0xdc>
    dhcp->t2_timeout = (u16_t)timeout;
 8008e68:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8008e6a:	8983      	ldrh	r3, [r0, #12]
 8008e6c:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8008e6e:	8983      	ldrh	r3, [r0, #12]
 8008e70:	8942      	ldrh	r2, [r0, #10]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d302      	bcc.n	8008e7c <dhcp_bind+0xa0>
 8008e76:	b10b      	cbz	r3, 8008e7c <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 8008e7c:	79c3      	ldrb	r3, [r0, #7]
 8008e7e:	b1f3      	cbz	r3, 8008ebe <dhcp_bind+0xe2>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008e80:	6b43      	ldr	r3, [r0, #52]	; 0x34
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008e82:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008e84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e86:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8008e88:	b92b      	cbnz	r3, 8008e96 <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8008e8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008e8c:	9a00      	ldr	r2, [sp, #0]
 8008e8e:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e94:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8008e96:	210a      	movs	r1, #10
 8008e98:	f7ff fca0 	bl	80087dc <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8008ea2:	466a      	mov	r2, sp
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f005 ff91 	bl	800edcc <netif_set_addr>
 8008eaa:	e7a1      	b.n	8008df0 <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8008eac:	2301      	movs	r3, #1
 8008eae:	8283      	strh	r3, [r0, #20]
 8008eb0:	e7ba      	b.n	8008e28 <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	8143      	strh	r3, [r0, #10]
 8008eb6:	e7c7      	b.n	8008e48 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	8183      	strh	r3, [r0, #12]
 8008ebc:	e7d5      	b.n	8008e6a <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8008ebe:	f990 2030 	ldrsb.w	r2, [r0, #48]	; 0x30
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008ec2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if (first_octet <= 127) {
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	db01      	blt.n	8008ece <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008eca:	23ff      	movs	r3, #255	; 0xff
 8008ecc:	e7d9      	b.n	8008e82 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 8008ece:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8008ed0:	bf8c      	ite	hi
 8008ed2:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008ed6:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8008eda:	e7d2      	b.n	8008e82 <dhcp_bind+0xa6>
 8008edc:	0802befb 	.word	0x0802befb
 8008ee0:	0802c107 	.word	0x0802c107
 8008ee4:	0802aecf 	.word	0x0802aecf
 8008ee8:	0802c120 	.word	0x0802c120

08008eec <dhcp_inc_pcb_refcount>:
{
 8008eec:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 8008eee:	4c15      	ldr	r4, [pc, #84]	; (8008f44 <dhcp_inc_pcb_refcount+0x58>)
 8008ef0:	7a23      	ldrb	r3, [r4, #8]
 8008ef2:	b9fb      	cbnz	r3, 8008f34 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	b12b      	cbz	r3, 8008f04 <dhcp_inc_pcb_refcount+0x18>
 8008ef8:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <dhcp_inc_pcb_refcount+0x5c>)
 8008efa:	4914      	ldr	r1, [pc, #80]	; (8008f4c <dhcp_inc_pcb_refcount+0x60>)
 8008efc:	4814      	ldr	r0, [pc, #80]	; (8008f50 <dhcp_inc_pcb_refcount+0x64>)
 8008efe:	22e5      	movs	r2, #229	; 0xe5
 8008f00:	f013 fe12 	bl	801cb28 <iprintf>
    dhcp_pcb = udp_new();
 8008f04:	f00b fad8 	bl	80144b8 <udp_new>
 8008f08:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 8008f0a:	b1c0      	cbz	r0, 8008f3e <dhcp_inc_pcb_refcount+0x52>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8008f0c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8008f10:	4910      	ldr	r1, [pc, #64]	; (8008f54 <dhcp_inc_pcb_refcount+0x68>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8008f12:	f042 0220 	orr.w	r2, r2, #32
 8008f16:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8008f1a:	2244      	movs	r2, #68	; 0x44
 8008f1c:	f00a feea 	bl	8013cf4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8008f20:	490c      	ldr	r1, [pc, #48]	; (8008f54 <dhcp_inc_pcb_refcount+0x68>)
 8008f22:	6860      	ldr	r0, [r4, #4]
 8008f24:	2243      	movs	r2, #67	; 0x43
 8008f26:	f00b f9bd 	bl	80142a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8008f2a:	490b      	ldr	r1, [pc, #44]	; (8008f58 <dhcp_inc_pcb_refcount+0x6c>)
 8008f2c:	6860      	ldr	r0, [r4, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f00b fa8a 	bl	8014448 <udp_recv>
  dhcp_pcb_refcount++;
 8008f34:	7a23      	ldrb	r3, [r4, #8]
 8008f36:	3301      	adds	r3, #1
 8008f38:	7223      	strb	r3, [r4, #8]
  return ERR_OK;
 8008f3a:	2000      	movs	r0, #0
}
 8008f3c:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e7fb      	b.n	8008f3c <dhcp_inc_pcb_refcount+0x50>
 8008f44:	20006980 	.word	0x20006980
 8008f48:	0802befb 	.word	0x0802befb
 8008f4c:	0802c138 	.word	0x0802c138
 8008f50:	0802aecf 	.word	0x0802aecf
 8008f54:	0801fc2c 	.word	0x0801fc2c
 8008f58:	08009045 	.word	0x08009045

08008f5c <dhcp_dec_pcb_refcount>:
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8008f5e:	4c09      	ldr	r4, [pc, #36]	; (8008f84 <dhcp_dec_pcb_refcount+0x28>)
 8008f60:	7a23      	ldrb	r3, [r4, #8]
 8008f62:	b92b      	cbnz	r3, 8008f70 <dhcp_dec_pcb_refcount+0x14>
 8008f64:	4b08      	ldr	r3, [pc, #32]	; (8008f88 <dhcp_dec_pcb_refcount+0x2c>)
 8008f66:	4909      	ldr	r1, [pc, #36]	; (8008f8c <dhcp_dec_pcb_refcount+0x30>)
 8008f68:	4809      	ldr	r0, [pc, #36]	; (8008f90 <dhcp_dec_pcb_refcount+0x34>)
 8008f6a:	22ff      	movs	r2, #255	; 0xff
 8008f6c:	f013 fddc 	bl	801cb28 <iprintf>
  dhcp_pcb_refcount--;
 8008f70:	7a25      	ldrb	r5, [r4, #8]
 8008f72:	3d01      	subs	r5, #1
 8008f74:	b2ed      	uxtb	r5, r5
 8008f76:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8008f78:	b91d      	cbnz	r5, 8008f82 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 8008f7a:	6860      	ldr	r0, [r4, #4]
 8008f7c:	f00b fa76 	bl	801446c <udp_remove>
    dhcp_pcb = NULL;
 8008f80:	6065      	str	r5, [r4, #4]
}
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20006980 	.word	0x20006980
 8008f88:	0802befb 	.word	0x0802befb
 8008f8c:	0802c15d 	.word	0x0802c15d
 8008f90:	0802aecf 	.word	0x0802aecf

08008f94 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8008f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008f96:	4d27      	ldr	r5, [pc, #156]	; (8009034 <dhcp_handle_ack.isra.0+0xa0>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008f98:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008f9a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008f9e:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008fa4:	b113      	cbz	r3, 8008fac <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8008fa6:	4b24      	ldr	r3, [pc, #144]	; (8009038 <dhcp_handle_ack.isra.0+0xa4>)
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8008fac:	792b      	ldrb	r3, [r5, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d037      	beq.n	8009022 <dhcp_handle_ack.isra.0+0x8e>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8008fb2:	4b21      	ldr	r3, [pc, #132]	; (8009038 <dhcp_handle_ack.isra.0+0xa4>)
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	6423      	str	r3, [r4, #64]	; 0x40
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8008fb8:	796b      	ldrb	r3, [r5, #5]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d034      	beq.n	8009028 <dhcp_handle_ack.isra.0+0x94>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <dhcp_handle_ack.isra.0+0xa4>)
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	6463      	str	r3, [r4, #68]	; 0x44
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008fc4:	690b      	ldr	r3, [r1, #16]
 8008fc6:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8008fc8:	79ab      	ldrb	r3, [r5, #6]
 8008fca:	b12b      	cbz	r3, 8008fd8 <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <dhcp_handle_ack.isra.0+0xa4>)
 8008fce:	6998      	ldr	r0, [r3, #24]
 8008fd0:	f005 f869 	bl	800e0a6 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8008fd4:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008fd6:	6360      	str	r0, [r4, #52]	; 0x34
    dhcp->subnet_mask_given = 0;
 8008fd8:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8008fda:	79eb      	ldrb	r3, [r5, #7]
 8008fdc:	b123      	cbz	r3, 8008fe8 <dhcp_handle_ack.isra.0+0x54>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <dhcp_handle_ack.isra.0+0xa4>)
 8008fe0:	69d8      	ldr	r0, [r3, #28]
 8008fe2:	f005 f860 	bl	800e0a6 <lwip_htonl>
 8008fe6:	63a0      	str	r0, [r4, #56]	; 0x38
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8008fe8:	2400      	movs	r4, #0
 8008fea:	4e14      	ldr	r6, [pc, #80]	; (800903c <dhcp_handle_ack.isra.0+0xa8>)
 8008fec:	4f14      	ldr	r7, [pc, #80]	; (8009040 <dhcp_handle_ack.isra.0+0xac>)
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8008fee:	4625      	mov	r5, r4
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8008ff0:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008ff4:	b19b      	cbz	r3, 800901e <dhcp_handle_ack.isra.0+0x8a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8008ff6:	f857 0b04 	ldr.w	r0, [r7], #4
 8008ffa:	f005 f854 	bl	800e0a6 <lwip_htonl>
 8008ffe:	9000      	str	r0, [sp, #0]
    dns_setserver(n, &dns_addr);
 8009000:	4620      	mov	r0, r4
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8009002:	3401      	adds	r4, #1
    dns_setserver(n, &dns_addr);
 8009004:	4669      	mov	r1, sp
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8009006:	b2e4      	uxtb	r4, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8009008:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800900c:	f88d 5014 	strb.w	r5, [sp, #20]
 8009010:	9501      	str	r5, [sp, #4]
 8009012:	f88d 5010 	strb.w	r5, [sp, #16]
    dns_setserver(n, &dns_addr);
 8009016:	f005 fa71 	bl	800e4fc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800901a:	2c03      	cmp	r4, #3
 800901c:	d1e8      	bne.n	8008ff0 <dhcp_handle_ack.isra.0+0x5c>
}
 800901e:	b007      	add	sp, #28
 8009020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009024:	085b      	lsrs	r3, r3, #1
 8009026:	e7c6      	b.n	8008fb6 <dhcp_handle_ack.isra.0+0x22>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800902a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800902e:	08db      	lsrs	r3, r3, #3
 8009030:	e7c7      	b.n	8008fc2 <dhcp_handle_ack.isra.0+0x2e>
 8009032:	bf00      	nop
 8009034:	2000f038 	.word	0x2000f038
 8009038:	2000f044 	.word	0x2000f044
 800903c:	2000f040 	.word	0x2000f040
 8009040:	2000f064 	.word	0x2000f064

08009044 <dhcp_recv>:
{
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	b08b      	sub	sp, #44	; 0x2c
 800904a:	9201      	str	r2, [sp, #4]
  struct netif *netif = ip_current_input_netif();
 800904c:	4a9b      	ldr	r2, [pc, #620]	; (80092bc <dhcp_recv+0x278>)
 800904e:	6857      	ldr	r7, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009050:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009054:	9202      	str	r2, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009056:	2a00      	cmp	r2, #0
 8009058:	d04e      	beq.n	80090f8 <dhcp_recv+0xb4>
 800905a:	7912      	ldrb	r2, [r2, #4]
 800905c:	2a00      	cmp	r2, #0
 800905e:	d04b      	beq.n	80090f8 <dhcp_recv+0xb4>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009060:	9a01      	ldr	r2, [sp, #4]
 8009062:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 8009064:	b143      	cbz	r3, 8009078 <dhcp_recv+0x34>
 8009066:	7d1b      	ldrb	r3, [r3, #20]
 8009068:	b133      	cbz	r3, 8009078 <dhcp_recv+0x34>
 800906a:	4b95      	ldr	r3, [pc, #596]	; (80092c0 <dhcp_recv+0x27c>)
 800906c:	4995      	ldr	r1, [pc, #596]	; (80092c4 <dhcp_recv+0x280>)
 800906e:	4896      	ldr	r0, [pc, #600]	; (80092c8 <dhcp_recv+0x284>)
 8009070:	f240 62ea 	movw	r2, #1770	; 0x6ea
 8009074:	f013 fd58 	bl	801cb28 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	895b      	ldrh	r3, [r3, #10]
 800907c:	2b2b      	cmp	r3, #43	; 0x2b
 800907e:	d93b      	bls.n	80090f8 <dhcp_recv+0xb4>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009080:	7823      	ldrb	r3, [r4, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d138      	bne.n	80090f8 <dhcp_recv+0xb4>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009086:	f897 00da 	ldrb.w	r0, [r7, #218]	; 0xda
 800908a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800908e:	f104 021c 	add.w	r2, r4, #28
 8009092:	2300      	movs	r3, #0
 8009094:	b2dd      	uxtb	r5, r3
 8009096:	42a8      	cmp	r0, r5
 8009098:	d901      	bls.n	800909e <dhcp_recv+0x5a>
 800909a:	2b06      	cmp	r3, #6
 800909c:	d124      	bne.n	80090e8 <dhcp_recv+0xa4>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800909e:	6860      	ldr	r0, [r4, #4]
 80090a0:	f005 f801 	bl	800e0a6 <lwip_htonl>
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4298      	cmp	r0, r3
 80090aa:	d125      	bne.n	80090f8 <dhcp_recv+0xb4>
  dhcp_clear_all_options(dhcp);
 80090ac:	4b87      	ldr	r3, [pc, #540]	; (80092cc <dhcp_recv+0x288>)
  if (p->len < DHCP_SNAME_OFS) {
 80090ae:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 80090b0:	f04f 0800 	mov.w	r8, #0
 80090b4:	f8c3 8004 	str.w	r8, [r3, #4]
 80090b8:	f8c3 8000 	str.w	r8, [r3]
 80090bc:	f8c3 8007 	str.w	r8, [r3, #7]
  if (p->len < DHCP_SNAME_OFS) {
 80090c0:	8952      	ldrh	r2, [r2, #10]
 80090c2:	2a2b      	cmp	r2, #43	; 0x2b
 80090c4:	d918      	bls.n	80090f8 <dhcp_recv+0xb4>
  options_idx_max = p->tot_len;
 80090c6:	9a01      	ldr	r2, [sp, #4]
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80090ce:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 80090d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 80090d6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 80090da:	455b      	cmp	r3, fp
 80090dc:	d912      	bls.n	8009104 <dhcp_recv+0xc0>
  options = (u8_t *)q->payload;
 80090de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	465e      	mov	r6, fp
 80090e6:	e106      	b.n	80092f6 <dhcp_recv+0x2b2>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80090e8:	f811 6b01 	ldrb.w	r6, [r1], #1
 80090ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090f0:	42ae      	cmp	r6, r5
 80090f2:	f103 0301 	add.w	r3, r3, #1
 80090f6:	d0cd      	beq.n	8009094 <dhcp_recv+0x50>
  pbuf_free(p);
 80090f8:	9801      	ldr	r0, [sp, #4]
 80090fa:	f006 f941 	bl	800f380 <pbuf_free>
}
 80090fe:	b00b      	add	sp, #44	; 0x2c
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 8009104:	f8d9 9000 	ldr.w	r9, [r9]
    options_idx = (u16_t)(options_idx - q->len);
 8009108:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800910c:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 8009110:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8009114:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8009118:	f1b9 0f00 	cmp.w	r9, #0
 800911c:	d1db      	bne.n	80090d6 <dhcp_recv+0x92>
 800911e:	e7eb      	b.n	80090f8 <dhcp_recv+0xb4>
    u16_t val_offset = (u16_t)(offset + 2);
 8009120:	1cb3      	adds	r3, r6, #2
 8009122:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8009124:	42b3      	cmp	r3, r6
    u16_t val_offset = (u16_t)(offset + 2);
 8009126:	9303      	str	r3, [sp, #12]
    if (val_offset < offset) {
 8009128:	d3e6      	bcc.n	80090f8 <dhcp_recv+0xb4>
    if ((offset + 1) < q->len) {
 800912a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800912e:	1c73      	adds	r3, r6, #1
 8009130:	428b      	cmp	r3, r1
 8009132:	da0e      	bge.n	8009152 <dhcp_recv+0x10e>
      len = options[offset + 1];
 8009134:	9b05      	ldr	r3, [sp, #20]
 8009136:	4433      	add	r3, r6
 8009138:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 800913a:	2a06      	cmp	r2, #6
 800913c:	f200 81e9 	bhi.w	8009512 <dhcp_recv+0x4ce>
 8009140:	2a06      	cmp	r2, #6
 8009142:	f200 8088 	bhi.w	8009256 <dhcp_recv+0x212>
 8009146:	e8df f002 	tbb	[pc, r2]
 800914a:	0c68      	.short	0x0c68
 800914c:	86861486 	.word	0x86861486
 8009150:	1d          	.byte	0x1d
 8009151:	00          	.byte	0x00
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8009152:	f8d9 3000 	ldr.w	r3, [r9]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8158 	beq.w	800940c <dhcp_recv+0x3c8>
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	e7eb      	b.n	800913a <dhcp_recv+0xf6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009162:	2b04      	cmp	r3, #4
 8009164:	f000 8189 	beq.w	800947a <dhcp_recv+0x436>
 8009168:	4b55      	ldr	r3, [pc, #340]	; (80092c0 <dhcp_recv+0x27c>)
 800916a:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800916e:	4958      	ldr	r1, [pc, #352]	; (80092d0 <dhcp_recv+0x28c>)
 8009170:	e00e      	b.n	8009190 <dhcp_recv+0x14c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009172:	2b03      	cmp	r3, #3
 8009174:	f200 81bb 	bhi.w	80094ee <dhcp_recv+0x4aa>
 8009178:	4b51      	ldr	r3, [pc, #324]	; (80092c0 <dhcp_recv+0x27c>)
 800917a:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800917e:	4955      	ldr	r1, [pc, #340]	; (80092d4 <dhcp_recv+0x290>)
 8009180:	e006      	b.n	8009190 <dhcp_recv+0x14c>
    switch (op) {
 8009182:	2300      	movs	r3, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8009184:	0799      	lsls	r1, r3, #30
 8009186:	d007      	beq.n	8009198 <dhcp_recv+0x154>
 8009188:	4b4d      	ldr	r3, [pc, #308]	; (80092c0 <dhcp_recv+0x27c>)
 800918a:	4953      	ldr	r1, [pc, #332]	; (80092d8 <dhcp_recv+0x294>)
 800918c:	f240 6239 	movw	r2, #1593	; 0x639
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009190:	484d      	ldr	r0, [pc, #308]	; (80092c8 <dhcp_recv+0x284>)
 8009192:	f013 fcc9 	bl	801cb28 <iprintf>
 8009196:	e7af      	b.n	80090f8 <dhcp_recv+0xb4>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8009198:	2b0c      	cmp	r3, #12
 800919a:	461c      	mov	r4, r3
 800919c:	bf28      	it	cs
 800919e:	240c      	movcs	r4, #12
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80091a0:	429c      	cmp	r4, r3
 80091a2:	d936      	bls.n	8009212 <dhcp_recv+0x1ce>
 80091a4:	4b46      	ldr	r3, [pc, #280]	; (80092c0 <dhcp_recv+0x27c>)
 80091a6:	f240 623c 	movw	r2, #1596	; 0x63c
 80091aa:	e7e8      	b.n	800917e <dhcp_recv+0x13a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	f000 81a1 	beq.w	80094f4 <dhcp_recv+0x4b0>
 80091b2:	4b43      	ldr	r3, [pc, #268]	; (80092c0 <dhcp_recv+0x27c>)
 80091b4:	f240 6241 	movw	r2, #1601	; 0x641
 80091b8:	e7d9      	b.n	800916e <dhcp_recv+0x12a>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d004      	beq.n	80091c8 <dhcp_recv+0x184>
 80091be:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <dhcp_recv+0x27c>)
 80091c0:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80091c4:	4945      	ldr	r1, [pc, #276]	; (80092dc <dhcp_recv+0x298>)
 80091c6:	e7e3      	b.n	8009190 <dhcp_recv+0x14c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80091c8:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 80091cc:	f000 8195 	beq.w	80094fa <dhcp_recv+0x4b6>
 80091d0:	4b3b      	ldr	r3, [pc, #236]	; (80092c0 <dhcp_recv+0x27c>)
 80091d2:	4943      	ldr	r1, [pc, #268]	; (80092e0 <dhcp_recv+0x29c>)
 80091d4:	f240 6251 	movw	r2, #1617	; 0x651
 80091d8:	e7da      	b.n	8009190 <dhcp_recv+0x14c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80091da:	2b01      	cmp	r3, #1
 80091dc:	f000 8193 	beq.w	8009506 <dhcp_recv+0x4c2>
 80091e0:	4b37      	ldr	r3, [pc, #220]	; (80092c0 <dhcp_recv+0x27c>)
 80091e2:	f240 6255 	movw	r2, #1621	; 0x655
 80091e6:	e7ed      	b.n	80091c4 <dhcp_recv+0x180>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	f000 8189 	beq.w	8009500 <dhcp_recv+0x4bc>
 80091ee:	4b34      	ldr	r3, [pc, #208]	; (80092c0 <dhcp_recv+0x27c>)
 80091f0:	f240 6259 	movw	r2, #1625	; 0x659
 80091f4:	e7bb      	b.n	800916e <dhcp_recv+0x12a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	f000 8185 	beq.w	8009506 <dhcp_recv+0x4c2>
 80091fc:	4b30      	ldr	r3, [pc, #192]	; (80092c0 <dhcp_recv+0x27c>)
 80091fe:	f240 625d 	movw	r2, #1629	; 0x65d
 8009202:	e7b4      	b.n	800916e <dhcp_recv+0x12a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009204:	2b04      	cmp	r3, #4
 8009206:	f000 8181 	beq.w	800950c <dhcp_recv+0x4c8>
 800920a:	4b2d      	ldr	r3, [pc, #180]	; (80092c0 <dhcp_recv+0x27c>)
 800920c:	f240 6261 	movw	r2, #1633	; 0x661
 8009210:	e7ad      	b.n	800916e <dhcp_recv+0x12a>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8009212:	2508      	movs	r5, #8
    if (op == DHCP_OPTION_PAD) {
 8009214:	2a00      	cmp	r2, #0
 8009216:	f040 8132 	bne.w	800947e <dhcp_recv+0x43a>
      offset++;
 800921a:	3601      	adds	r6, #1
 800921c:	b2b6      	uxth	r6, r6
    if (offset >= q->len) {
 800921e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8009222:	42b3      	cmp	r3, r6
 8009224:	d867      	bhi.n	80092f6 <dhcp_recv+0x2b2>
      offset = (u16_t)(offset - q->len);
 8009226:	1af6      	subs	r6, r6, r3
      offset_max = (u16_t)(offset_max - q->len);
 8009228:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 800922c:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 800922e:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8009232:	4556      	cmp	r6, sl
 8009234:	f4bf af60 	bcs.w	80090f8 <dhcp_recv+0xb4>
        q = q->next;
 8009238:	f8d9 9000 	ldr.w	r9, [r9]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800923c:	f1b9 0f00 	cmp.w	r9, #0
 8009240:	d156      	bne.n	80092f0 <dhcp_recv+0x2ac>
 8009242:	4b1f      	ldr	r3, [pc, #124]	; (80092c0 <dhcp_recv+0x27c>)
 8009244:	4927      	ldr	r1, [pc, #156]	; (80092e4 <dhcp_recv+0x2a0>)
 8009246:	f240 629d 	movw	r2, #1693	; 0x69d
 800924a:	e7a1      	b.n	8009190 <dhcp_recv+0x14c>
    switch (op) {
 800924c:	2400      	movs	r4, #0
 800924e:	f04f 35ff 	mov.w	r5, #4294967295
 8009252:	4623      	mov	r3, r4
 8009254:	e7de      	b.n	8009214 <dhcp_recv+0x1d0>
 8009256:	f04f 35ff 	mov.w	r5, #4294967295
 800925a:	2400      	movs	r4, #0
 800925c:	e7da      	b.n	8009214 <dhcp_recv+0x1d0>
            dhcp_got_option(dhcp, decode_idx);
 800925e:	9a06      	ldr	r2, [sp, #24]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009260:	9809      	ldr	r0, [sp, #36]	; 0x24
            dhcp_got_option(dhcp, decode_idx);
 8009262:	2301      	movs	r3, #1
 8009264:	f802 3b01 	strb.w	r3, [r2], #1
 8009268:	9206      	str	r2, [sp, #24]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800926a:	f004 ff1c 	bl	800e0a6 <lwip_htonl>
 800926e:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <dhcp_recv+0x2a4>)
            if (next_val_offset < val_offset) {
 8009270:	9a03      	ldr	r2, [sp, #12]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009272:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
            next_val_offset = (u16_t)(val_offset + 4);
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	3304      	adds	r3, #4
 800927a:	b29b      	uxth	r3, r3
            decode_len = (u8_t)(decode_len - 4);
 800927c:	3c04      	subs	r4, #4
            if (next_val_offset < val_offset) {
 800927e:	429a      	cmp	r2, r3
            decode_len = (u8_t)(decode_len - 4);
 8009280:	b2e4      	uxtb	r4, r4
            if (next_val_offset < val_offset) {
 8009282:	f63f af39 	bhi.w	80090f8 <dhcp_recv+0xb4>
            decode_idx++;
 8009286:	3501      	adds	r5, #1
            goto decode_next;
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	e109      	b.n	80094a0 <dhcp_recv+0x45c>
          } else if (decode_len == 4) {
 800928c:	d10b      	bne.n	80092a6 <dhcp_recv+0x262>
            value = lwip_ntohl(value);
 800928e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009290:	f004 ff09 	bl	800e0a6 <lwip_htonl>
 8009294:	9009      	str	r0, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
 8009296:	9a04      	ldr	r2, [sp, #16]
 8009298:	2301      	movs	r3, #1
 800929a:	5553      	strb	r3, [r2, r5]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <dhcp_recv+0x2a4>)
 800929e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092a4:	e7bb      	b.n	800921e <dhcp_recv+0x1da>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80092a6:	2c01      	cmp	r4, #1
 80092a8:	d004      	beq.n	80092b4 <dhcp_recv+0x270>
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <dhcp_recv+0x27c>)
 80092ac:	490f      	ldr	r1, [pc, #60]	; (80092ec <dhcp_recv+0x2a8>)
 80092ae:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80092b2:	e76d      	b.n	8009190 <dhcp_recv+0x14c>
            value = ((u8_t *)&value)[0];
 80092b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80092b8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ba:	e7ec      	b.n	8009296 <dhcp_recv+0x252>
 80092bc:	2000f4b8 	.word	0x2000f4b8
 80092c0:	0802befb 	.word	0x0802befb
 80092c4:	0802c181 	.word	0x0802c181
 80092c8:	0802aecf 	.word	0x0802aecf
 80092cc:	2000f038 	.word	0x2000f038
 80092d0:	0802c19d 	.word	0x0802c19d
 80092d4:	0802c1a6 	.word	0x0802c1a6
 80092d8:	0802c1f0 	.word	0x0802c1f0
 80092dc:	0802c1b8 	.word	0x0802c1b8
 80092e0:	0802c1c1 	.word	0x0802c1c1
 80092e4:	0802c211 	.word	0x0802c211
 80092e8:	2000f044 	.word	0x2000f044
 80092ec:	0802c1fe 	.word	0x0802c1fe
        options = (u8_t *)q->payload;
 80092f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80092f4:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80092f6:	4556      	cmp	r6, sl
 80092f8:	d204      	bcs.n	8009304 <dhcp_recv+0x2c0>
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	5d9a      	ldrb	r2, [r3, r6]
 80092fe:	2aff      	cmp	r2, #255	; 0xff
 8009300:	f47f af0e 	bne.w	8009120 <dhcp_recv+0xdc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b9eb      	cbnz	r3, 8009346 <dhcp_recv+0x302>
  } else if (parse_sname_as_options) {
 800930a:	f1b8 0f00 	cmp.w	r8, #0
 800930e:	d123      	bne.n	8009358 <dhcp_recv+0x314>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009310:	9b04      	ldr	r3, [sp, #16]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f43f aeef 	beq.w	80090f8 <dhcp_recv+0xb4>
  msg_in = (struct dhcp_msg *)p->payload;
 800931a:	9b01      	ldr	r3, [sp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800931c:	4a8b      	ldr	r2, [pc, #556]	; (800954c <dhcp_recv+0x508>)
  msg_in = (struct dhcp_msg *)p->payload;
 800931e:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009320:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8009322:	2b05      	cmp	r3, #5
 8009324:	d134      	bne.n	8009390 <dhcp_recv+0x34c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d124      	bne.n	8009378 <dhcp_recv+0x334>
      dhcp_handle_ack(netif, msg_in);
 800932e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009332:	f7ff fe2f 	bl	8008f94 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009336:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800933a:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 800933c:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800933e:	d524      	bpl.n	800938a <dhcp_recv+0x346>
        dhcp_check(netif);
 8009340:	f7ff fd36 	bl	8008db0 <dhcp_check>
 8009344:	e6d8      	b.n	80090f8 <dhcp_recv+0xb4>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009346:	4b81      	ldr	r3, [pc, #516]	; (800954c <dhcp_recv+0x508>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009348:	9904      	ldr	r1, [sp, #16]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800934a:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800934c:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 800934e:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009350:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009352:	d00c      	beq.n	800936e <dhcp_recv+0x32a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009354:	2b02      	cmp	r3, #2
 8009356:	d106      	bne.n	8009366 <dhcp_recv+0x322>
    parse_sname_as_options = 0;
 8009358:	f04f 0800 	mov.w	r8, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800935c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8009360:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8009364:	e6b5      	b.n	80090d2 <dhcp_recv+0x8e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009366:	2b03      	cmp	r3, #3
 8009368:	d1cf      	bne.n	800930a <dhcp_recv+0x2c6>
      parse_sname_as_options = 1;
 800936a:	f04f 0801 	mov.w	r8, #1
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800936e:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8009372:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8009376:	e6ac      	b.n	80090d2 <dhcp_recv+0x8e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009378:	3b03      	subs	r3, #3
 800937a:	2b02      	cmp	r3, #2
 800937c:	f63f aebc 	bhi.w	80090f8 <dhcp_recv+0xb4>
      dhcp_handle_ack(netif, msg_in);
 8009380:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009384:	f7ff fe06 	bl	8008f94 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8009388:	4638      	mov	r0, r7
 800938a:	f7ff fd27 	bl	8008ddc <dhcp_bind>
 800938e:	e6b3      	b.n	80090f8 <dhcp_recv+0xb4>
  else if ((msg_type == DHCP_NAK) &&
 8009390:	2b06      	cmp	r3, #6
 8009392:	d116      	bne.n	80093c2 <dhcp_recv+0x37e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8009398:	1eda      	subs	r2, r3, #3
 800939a:	2a02      	cmp	r2, #2
 800939c:	d902      	bls.n	80093a4 <dhcp_recv+0x360>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800939e:	2b01      	cmp	r3, #1
 80093a0:	f47f aeaa 	bne.w	80090f8 <dhcp_recv+0xb4>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80093a4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80093a8:	210c      	movs	r1, #12
 80093aa:	f7ff fa17 	bl	80087dc <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80093ae:	4b68      	ldr	r3, [pc, #416]	; (8009550 <dhcp_recv+0x50c>)
 80093b0:	4638      	mov	r0, r7
 80093b2:	461a      	mov	r2, r3
 80093b4:	4619      	mov	r1, r3
 80093b6:	f005 fd09 	bl	800edcc <netif_set_addr>
  dhcp_discover(netif);
 80093ba:	4638      	mov	r0, r7
 80093bc:	f7ff fc80 	bl	8008cc0 <dhcp_discover>
}
 80093c0:	e69a      	b.n	80090f8 <dhcp_recv+0xb4>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	f47f ae98 	bne.w	80090f8 <dhcp_recv+0xb4>
 80093c8:	9b02      	ldr	r3, [sp, #8]
 80093ca:	795b      	ldrb	r3, [r3, #5]
 80093cc:	2b06      	cmp	r3, #6
 80093ce:	f47f ae93 	bne.w	80090f8 <dhcp_recv+0xb4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	789b      	ldrb	r3, [r3, #2]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f43f ae8e 	beq.w	80090f8 <dhcp_recv+0xb4>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093dc:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80093e0:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80093e2:	f8a4 8008 	strh.w	r8, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80093e6:	9102      	str	r1, [sp, #8]
 80093e8:	f004 fe5d 	bl	800e0a6 <lwip_htonl>
 80093ec:	e9c4 8808 	strd	r8, r8, [r4, #32]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80093f0:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80093f2:	61a0      	str	r0, [r4, #24]
 80093f4:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 80093f8:	f8c4 801c 	str.w	r8, [r4, #28]
 80093fc:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8009400:	690b      	ldr	r3, [r1, #16]
 8009402:	6323      	str	r3, [r4, #48]	; 0x30
    dhcp_select(netif);
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff fb9f 	bl	8008b48 <dhcp_select>
 800940a:	e675      	b.n	80090f8 <dhcp_recv+0xb4>
    switch (op) {
 800940c:	2a06      	cmp	r2, #6
 800940e:	d82b      	bhi.n	8009468 <dhcp_recv+0x424>
 8009410:	2a06      	cmp	r2, #6
 8009412:	f63f af1b 	bhi.w	800924c <dhcp_recv+0x208>
 8009416:	a301      	add	r3, pc, #4	; (adr r3, 800941c <dhcp_recv+0x3d8>)
 8009418:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800941c:	0800921b 	.word	0x0800921b
 8009420:	08009169 	.word	0x08009169
 8009424:	0800924d 	.word	0x0800924d
 8009428:	08009179 	.word	0x08009179
 800942c:	0800924d 	.word	0x0800924d
 8009430:	0800924d 	.word	0x0800924d
 8009434:	08009183 	.word	0x08009183
 8009438:	2908      	cmp	r1, #8
 800943a:	f63f af07 	bhi.w	800924c <dhcp_recv+0x208>
 800943e:	a301      	add	r3, pc, #4	; (adr r3, 8009444 <dhcp_recv+0x400>)
 8009440:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8009444:	080091b3 	.word	0x080091b3
 8009448:	080091bf 	.word	0x080091bf
 800944c:	080091e1 	.word	0x080091e1
 8009450:	080091ef 	.word	0x080091ef
 8009454:	0800924d 	.word	0x0800924d
 8009458:	0800924d 	.word	0x0800924d
 800945c:	0800924d 	.word	0x0800924d
 8009460:	080091fd 	.word	0x080091fd
 8009464:	0800920b 	.word	0x0800920b
 8009468:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 800946c:	b2c8      	uxtb	r0, r1
 800946e:	2808      	cmp	r0, #8
 8009470:	d9e2      	bls.n	8009438 <dhcp_recv+0x3f4>
 8009472:	f04f 35ff 	mov.w	r5, #4294967295
 8009476:	2400      	movs	r4, #0
 8009478:	e001      	b.n	800947e <dhcp_recv+0x43a>
 800947a:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800947c:	2506      	movs	r5, #6
      if (offset + len + 2 > 0xFFFF) {
 800947e:	441e      	add	r6, r3
 8009480:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009484:	4296      	cmp	r6, r2
 8009486:	f73f ae37 	bgt.w	80090f8 <dhcp_recv+0xb4>
      offset = (u16_t)(offset + len + 2);
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	18d6      	adds	r6, r2, r3
 800948e:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 8009490:	2c00      	cmp	r4, #0
 8009492:	f43f aec4 	beq.w	800921e <dhcp_recv+0x1da>
        u32_t value = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	9309      	str	r3, [sp, #36]	; 0x24
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	18eb      	adds	r3, r5, r3
 800949e:	9306      	str	r3, [sp, #24]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80094a0:	2d0a      	cmp	r5, #10
 80094a2:	d906      	bls.n	80094b2 <dhcp_recv+0x46e>
 80094a4:	4b2b      	ldr	r3, [pc, #172]	; (8009554 <dhcp_recv+0x510>)
 80094a6:	492c      	ldr	r1, [pc, #176]	; (8009558 <dhcp_recv+0x514>)
 80094a8:	482c      	ldr	r0, [pc, #176]	; (800955c <dhcp_recv+0x518>)
 80094aa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80094ae:	f013 fb3b 	bl	801cb28 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80094b2:	9b06      	ldr	r3, [sp, #24]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f47f aeb1 	bne.w	800921e <dhcp_recv+0x1da>
          copy_len = LWIP_MIN(decode_len, 4);
 80094bc:	2c04      	cmp	r4, #4
 80094be:	4622      	mov	r2, r4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80094c0:	9b03      	ldr	r3, [sp, #12]
          copy_len = LWIP_MIN(decode_len, 4);
 80094c2:	bf28      	it	cs
 80094c4:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80094c6:	a909      	add	r1, sp, #36	; 0x24
 80094c8:	4648      	mov	r0, r9
 80094ca:	9207      	str	r2, [sp, #28]
 80094cc:	f006 f996 	bl	800f7fc <pbuf_copy_partial>
 80094d0:	9a07      	ldr	r2, [sp, #28]
 80094d2:	4282      	cmp	r2, r0
 80094d4:	f47f ae10 	bne.w	80090f8 <dhcp_recv+0xb4>
          if (decode_len > 4) {
 80094d8:	2c04      	cmp	r4, #4
 80094da:	f67f aed7 	bls.w	800928c <dhcp_recv+0x248>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80094de:	07a2      	lsls	r2, r4, #30
 80094e0:	f43f aebd 	beq.w	800925e <dhcp_recv+0x21a>
 80094e4:	4b1b      	ldr	r3, [pc, #108]	; (8009554 <dhcp_recv+0x510>)
 80094e6:	491e      	ldr	r1, [pc, #120]	; (8009560 <dhcp_recv+0x51c>)
 80094e8:	f240 6281 	movw	r2, #1665	; 0x681
 80094ec:	e650      	b.n	8009190 <dhcp_recv+0x14c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80094ee:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 80094f0:	2404      	movs	r4, #4
 80094f2:	e7c4      	b.n	800947e <dhcp_recv+0x43a>
 80094f4:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80094f6:	2503      	movs	r5, #3
 80094f8:	e7c1      	b.n	800947e <dhcp_recv+0x43a>
    decode_len = len;
 80094fa:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80094fc:	2500      	movs	r5, #0
 80094fe:	e7be      	b.n	800947e <dhcp_recv+0x43a>
 8009500:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8009502:	2502      	movs	r5, #2
 8009504:	e7bb      	b.n	800947e <dhcp_recv+0x43a>
 8009506:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8009508:	461d      	mov	r5, r3
 800950a:	e7b8      	b.n	800947e <dhcp_recv+0x43a>
 800950c:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800950e:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8009510:	e7b5      	b.n	800947e <dhcp_recv+0x43a>
    switch (op) {
 8009512:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8009516:	b2c8      	uxtb	r0, r1
 8009518:	2808      	cmp	r0, #8
 800951a:	d8aa      	bhi.n	8009472 <dhcp_recv+0x42e>
 800951c:	2908      	cmp	r1, #8
 800951e:	f63f ae9a 	bhi.w	8009256 <dhcp_recv+0x212>
 8009522:	a001      	add	r0, pc, #4	; (adr r0, 8009528 <dhcp_recv+0x4e4>)
 8009524:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009528:	080091ad 	.word	0x080091ad
 800952c:	080091bb 	.word	0x080091bb
 8009530:	080091db 	.word	0x080091db
 8009534:	080091e9 	.word	0x080091e9
 8009538:	08009257 	.word	0x08009257
 800953c:	08009257 	.word	0x08009257
 8009540:	08009257 	.word	0x08009257
 8009544:	080091f7 	.word	0x080091f7
 8009548:	08009205 	.word	0x08009205
 800954c:	2000f044 	.word	0x2000f044
 8009550:	0801fc2c 	.word	0x0801fc2c
 8009554:	0802befb 	.word	0x0802befb
 8009558:	0802c1d8 	.word	0x0802c1d8
 800955c:	0802aecf 	.word	0x0802aecf
 8009560:	0802c1e9 	.word	0x0802c1e9

08009564 <dhcp_arp_reply>:
{
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009566:	4606      	mov	r6, r0
{
 8009568:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800956a:	b940      	cbnz	r0, 800957e <dhcp_arp_reply+0x1a>
 800956c:	4b27      	ldr	r3, [pc, #156]	; (800960c <dhcp_arp_reply+0xa8>)
 800956e:	4928      	ldr	r1, [pc, #160]	; (8009610 <dhcp_arp_reply+0xac>)
 8009570:	4828      	ldr	r0, [pc, #160]	; (8009614 <dhcp_arp_reply+0xb0>)
 8009572:	f240 328b 	movw	r2, #907	; 0x38b
 8009576:	f013 fad7 	bl	801cb28 <iprintf>
}
 800957a:	b007      	add	sp, #28
 800957c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 800957e:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009582:	2c00      	cmp	r4, #0
 8009584:	d0f9      	beq.n	800957a <dhcp_arp_reply+0x16>
 8009586:	7963      	ldrb	r3, [r4, #5]
 8009588:	2b08      	cmp	r3, #8
 800958a:	d1f6      	bne.n	800957a <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800958c:	680a      	ldr	r2, [r1, #0]
 800958e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009590:	429a      	cmp	r2, r3
 8009592:	d1f2      	bne.n	800957a <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009594:	210c      	movs	r1, #12
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff f920 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800959c:	f10d 0316 	add.w	r3, sp, #22
 80095a0:	2204      	movs	r2, #4
 80095a2:	4621      	mov	r1, r4
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff f997 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 80095aa:	4605      	mov	r5, r0
 80095ac:	b330      	cbz	r0, 80095fc <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80095ae:	6841      	ldr	r1, [r0, #4]
 80095b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80095b4:	2304      	movs	r3, #4
 80095b6:	31f0      	adds	r1, #240	; 0xf0
 80095b8:	2232      	movs	r2, #50	; 0x32
 80095ba:	9103      	str	r1, [sp, #12]
 80095bc:	f7ff f932 	bl	8008824 <dhcp_option>
 80095c0:	4607      	mov	r7, r0
 80095c2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80095c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80095c8:	f004 fd6d 	bl	800e0a6 <lwip_htonl>
 80095cc:	9903      	ldr	r1, [sp, #12]
 80095ce:	4602      	mov	r2, r0
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff f95d 	bl	8008890 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80095d6:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80095d8:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80095dc:	462a      	mov	r2, r5
 80095de:	f7ff fa0f 	bl	8008a00 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80095e2:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <dhcp_arp_reply+0xb4>)
 80095e4:	480d      	ldr	r0, [pc, #52]	; (800961c <dhcp_arp_reply+0xb8>)
 80095e6:	4a0e      	ldr	r2, [pc, #56]	; (8009620 <dhcp_arp_reply+0xbc>)
 80095e8:	e9cd 6300 	strd	r6, r3, [sp]
 80095ec:	4629      	mov	r1, r5
 80095ee:	6840      	ldr	r0, [r0, #4]
 80095f0:	2343      	movs	r3, #67	; 0x43
 80095f2:	f00a fc71 	bl	8013ed8 <udp_sendto_if_src>
    pbuf_free(p_out);
 80095f6:	4628      	mov	r0, r5
 80095f8:	f005 fec2 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 80095fc:	79a3      	ldrb	r3, [r4, #6]
 80095fe:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009600:	bf1c      	itt	ne
 8009602:	3301      	addne	r3, #1
 8009604:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009606:	2314      	movs	r3, #20
 8009608:	8123      	strh	r3, [r4, #8]
  return result;
 800960a:	e7b6      	b.n	800957a <dhcp_arp_reply+0x16>
 800960c:	0802befb 	.word	0x0802befb
 8009610:	0802c112 	.word	0x0802c112
 8009614:	0802aecf 	.word	0x0802aecf
 8009618:	0801fc2c 	.word	0x0801fc2c
 800961c:	20006980 	.word	0x20006980
 8009620:	0801fc14 	.word	0x0801fc14

08009624 <dhcp_renew>:
{
 8009624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009628:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
{
 800962c:	b086      	sub	sp, #24
 800962e:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8009630:	2105      	movs	r1, #5
 8009632:	4620      	mov	r0, r4
 8009634:	f7ff f8d2 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8009638:	f10d 0316 	add.w	r3, sp, #22
 800963c:	2203      	movs	r2, #3
 800963e:	4621      	mov	r1, r4
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff f949 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 8009646:	4605      	mov	r5, r0
 8009648:	2800      	cmp	r0, #0
 800964a:	d056      	beq.n	80096fa <dhcp_renew+0xd6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800964c:	6841      	ldr	r1, [r0, #4]
 800964e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8009652:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8009704 <dhcp_renew+0xe0>
 8009656:	31f0      	adds	r1, #240	; 0xf0
 8009658:	2302      	movs	r3, #2
 800965a:	2239      	movs	r2, #57	; 0x39
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	f7ff f8e1 	bl	8008824 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009662:	f8b6 20d0 	ldrh.w	r2, [r6, #208]	; 0xd0
 8009666:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009668:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800966c:	f7ff f8be 	bl	80087ec <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009670:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009672:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009676:	2304      	movs	r3, #4
 8009678:	2237      	movs	r2, #55	; 0x37
 800967a:	f7ff f8d3 	bl	8008824 <dhcp_option>
 800967e:	9903      	ldr	r1, [sp, #12]
 8009680:	f8ad 0016 	strh.w	r0, [sp, #22]
 8009684:	2704      	movs	r7, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009686:	f818 2b01 	ldrb.w	r2, [r8], #1
 800968a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800968e:	9103      	str	r1, [sp, #12]
 8009690:	f7ff f8e6 	bl	8008860 <dhcp_option_byte>
 8009694:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009696:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800969a:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800969c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80096a0:	d1f1      	bne.n	8009686 <dhcp_renew+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80096a2:	462a      	mov	r2, r5
 80096a4:	f7ff f9ac 	bl	8008a00 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80096a8:	4815      	ldr	r0, [pc, #84]	; (8009700 <dhcp_renew+0xdc>)
 80096aa:	9600      	str	r6, [sp, #0]
 80096ac:	6840      	ldr	r0, [r0, #4]
 80096ae:	2343      	movs	r3, #67	; 0x43
 80096b0:	f104 0218 	add.w	r2, r4, #24
 80096b4:	4629      	mov	r1, r5
 80096b6:	f00a fce9 	bl	801408c <udp_sendto_if>
 80096ba:	4606      	mov	r6, r0
    pbuf_free(p_out);
 80096bc:	4628      	mov	r0, r5
 80096be:	f005 fe5f 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 80096c2:	79a3      	ldrb	r3, [r4, #6]
 80096c4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80096c6:	bf1c      	itt	ne
 80096c8:	3301      	addne	r3, #1
 80096ca:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80096cc:	79a3      	ldrb	r3, [r4, #6]
 80096ce:	2b09      	cmp	r3, #9
 80096d0:	bf9f      	itttt	ls
 80096d2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80096d6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80096da:	011b      	lslls	r3, r3, #4
 80096dc:	b29b      	uxthls	r3, r3
 80096de:	bf88      	it	hi
 80096e0:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80096e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 80096e8:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80096ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80096ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f2:	8123      	strh	r3, [r4, #8]
}
 80096f4:	b006      	add	sp, #24
 80096f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 80096fa:	f04f 36ff 	mov.w	r6, #4294967295
 80096fe:	e7e0      	b.n	80096c2 <dhcp_renew+0x9e>
 8009700:	20006980 	.word	0x20006980
 8009704:	0801fc10 	.word	0x0801fc10

08009708 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009708:	b158      	cbz	r0, 8009722 <dhcp_supplied_address+0x1a>
 800970a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800970e:	b140      	cbz	r0, 8009722 <dhcp_supplied_address+0x1a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009710:	7940      	ldrb	r0, [r0, #5]
 8009712:	280a      	cmp	r0, #10
 8009714:	d006      	beq.n	8009724 <dhcp_supplied_address+0x1c>
 8009716:	3804      	subs	r0, #4
 8009718:	2801      	cmp	r0, #1
 800971a:	bf8c      	ite	hi
 800971c:	2000      	movhi	r0, #0
 800971e:	2001      	movls	r0, #1
 8009720:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8009722:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009724:	2001      	movs	r0, #1
 8009726:	e7fb      	b.n	8009720 <dhcp_supplied_address+0x18>

08009728 <dhcp_release_and_stop>:
{
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800972a:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
{
 800972e:	b08d      	sub	sp, #52	; 0x34
 8009730:	4605      	mov	r5, r0
  if (dhcp == NULL) {
 8009732:	2c00      	cmp	r4, #0
 8009734:	d068      	beq.n	8009808 <dhcp_release_and_stop+0xe0>
  if (dhcp->state == DHCP_STATE_OFF) {
 8009736:	7963      	ldrb	r3, [r4, #5]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d065      	beq.n	8009808 <dhcp_release_and_stop+0xe0>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800973c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8009740:	69a3      	ldr	r3, [r4, #24]
 8009742:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8009746:	2a06      	cmp	r2, #6
 8009748:	9306      	str	r3, [sp, #24]
 800974a:	d15f      	bne.n	800980c <dhcp_release_and_stop+0xe4>
 800974c:	69e3      	ldr	r3, [r4, #28]
 800974e:	9307      	str	r3, [sp, #28]
 8009750:	6a23      	ldr	r3, [r4, #32]
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009756:	9309      	str	r3, [sp, #36]	; 0x24
 8009758:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800975c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8009760:	2300      	movs	r3, #0
 8009762:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8009766:	e9c4 3308 	strd	r3, r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800976a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800976e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8009772:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009776:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800977a:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800977c:	63e3      	str	r3, [r4, #60]	; 0x3c
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800977e:	81e3      	strh	r3, [r4, #14]
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff ffbf 	bl	8009708 <dhcp_supplied_address>
 800978a:	b368      	cbz	r0, 80097e8 <dhcp_release_and_stop+0xc0>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800978c:	f10d 0316 	add.w	r3, sp, #22
 8009790:	2207      	movs	r2, #7
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f7ff f89f 	bl	80088d8 <dhcp_create_msg>
    if (p_out != NULL) {
 800979a:	4606      	mov	r6, r0
 800979c:	b320      	cbz	r0, 80097e8 <dhcp_release_and_stop+0xc0>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800979e:	6841      	ldr	r1, [r0, #4]
 80097a0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80097a4:	2304      	movs	r3, #4
 80097a6:	31f0      	adds	r1, #240	; 0xf0
 80097a8:	2236      	movs	r2, #54	; 0x36
 80097aa:	9103      	str	r1, [sp, #12]
 80097ac:	f7ff f83a 	bl	8008824 <dhcp_option>
 80097b0:	4607      	mov	r7, r0
 80097b2:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80097b6:	9806      	ldr	r0, [sp, #24]
 80097b8:	f004 fc75 	bl	800e0a6 <lwip_htonl>
 80097bc:	9903      	ldr	r1, [sp, #12]
 80097be:	4602      	mov	r2, r0
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff f865 	bl	8008890 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80097c6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80097c8:	f8ad 0016 	strh.w	r0, [sp, #22]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80097cc:	4632      	mov	r2, r6
 80097ce:	f7ff f917 	bl	8008a00 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80097d2:	4811      	ldr	r0, [pc, #68]	; (8009818 <dhcp_release_and_stop+0xf0>)
 80097d4:	9500      	str	r5, [sp, #0]
 80097d6:	6840      	ldr	r0, [r0, #4]
 80097d8:	2343      	movs	r3, #67	; 0x43
 80097da:	aa06      	add	r2, sp, #24
 80097dc:	4631      	mov	r1, r6
 80097de:	f00a fc55 	bl	801408c <udp_sendto_if>
      pbuf_free(p_out);
 80097e2:	4630      	mov	r0, r6
 80097e4:	f005 fdcc 	bl	800f380 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <dhcp_release_and_stop+0xf4>)
 80097ea:	4628      	mov	r0, r5
 80097ec:	4619      	mov	r1, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	f005 faec 	bl	800edcc <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80097f4:	2100      	movs	r1, #0
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7fe fff0 	bl	80087dc <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 80097fc:	7923      	ldrb	r3, [r4, #4]
 80097fe:	b11b      	cbz	r3, 8009808 <dhcp_release_and_stop+0xe0>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009800:	f7ff fbac 	bl	8008f5c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	7123      	strb	r3, [r4, #4]
}
 8009808:	b00d      	add	sp, #52	; 0x34
 800980a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800980c:	2300      	movs	r3, #0
 800980e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	e7a2      	b.n	800975c <dhcp_release_and_stop+0x34>
 8009816:	bf00      	nop
 8009818:	20006980 	.word	0x20006980
 800981c:	0801fc2c 	.word	0x0801fc2c

08009820 <dhcp_start>:
{
 8009820:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8009822:	4604      	mov	r4, r0
 8009824:	b950      	cbnz	r0, 800983c <dhcp_start+0x1c>
 8009826:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <dhcp_start+0xa0>)
 8009828:	4926      	ldr	r1, [pc, #152]	; (80098c4 <dhcp_start+0xa4>)
 800982a:	f240 22e7 	movw	r2, #743	; 0x2e7
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <dhcp_start+0xa8>)
 8009830:	f013 f97a 	bl	801cb28 <iprintf>
 8009834:	f06f 020f 	mvn.w	r2, #15
}
 8009838:	4610      	mov	r0, r2
 800983a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800983c:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8009840:	07da      	lsls	r2, r3, #31
 8009842:	d404      	bmi.n	800984e <dhcp_start+0x2e>
 8009844:	4b1e      	ldr	r3, [pc, #120]	; (80098c0 <dhcp_start+0xa0>)
 8009846:	4921      	ldr	r1, [pc, #132]	; (80098cc <dhcp_start+0xac>)
 8009848:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800984c:	e7ef      	b.n	800982e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800984e:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	; 0xd0
  dhcp = netif_dhcp_data(netif);
 8009852:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009856:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800985a:	d202      	bcs.n	8009862 <dhcp_start+0x42>
    return ERR_MEM;
 800985c:	f04f 32ff 	mov.w	r2, #4294967295
 8009860:	e7ea      	b.n	8009838 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8009862:	b9e5      	cbnz	r5, 800989e <dhcp_start+0x7e>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009864:	2048      	movs	r0, #72	; 0x48
 8009866:	f005 f8fb 	bl	800ea60 <mem_malloc>
    if (dhcp == NULL) {
 800986a:	4605      	mov	r5, r0
 800986c:	2800      	cmp	r0, #0
 800986e:	d0f5      	beq.n	800985c <dhcp_start+0x3c>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8009870:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
  memset(dhcp, 0, sizeof(struct dhcp));
 8009874:	2248      	movs	r2, #72	; 0x48
 8009876:	2100      	movs	r1, #0
 8009878:	4628      	mov	r0, r5
 800987a:	f012 fd09 	bl	801c290 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800987e:	f7ff fb35 	bl	8008eec <dhcp_inc_pcb_refcount>
 8009882:	4602      	mov	r2, r0
 8009884:	2800      	cmp	r0, #0
 8009886:	d1e9      	bne.n	800985c <dhcp_start+0x3c>
  dhcp->pcb_allocated = 1;
 8009888:	2301      	movs	r3, #1
 800988a:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800988c:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 8009890:	075b      	lsls	r3, r3, #29
 8009892:	d40a      	bmi.n	80098aa <dhcp_start+0x8a>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8009894:	2102      	movs	r1, #2
 8009896:	4628      	mov	r0, r5
 8009898:	f7fe ffa0 	bl	80087dc <dhcp_set_state>
    return ERR_OK;
 800989c:	e7cc      	b.n	8009838 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 800989e:	792b      	ldrb	r3, [r5, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0e7      	beq.n	8009874 <dhcp_start+0x54>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80098a4:	f7ff fb5a 	bl	8008f5c <dhcp_dec_pcb_refcount>
 80098a8:	e7e4      	b.n	8009874 <dhcp_start+0x54>
  result = dhcp_discover(netif);
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff fa08 	bl	8008cc0 <dhcp_discover>
  if (result != ERR_OK) {
 80098b0:	4602      	mov	r2, r0
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d0c0      	beq.n	8009838 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff ff36 	bl	8009728 <dhcp_release_and_stop>
 80098bc:	e7ce      	b.n	800985c <dhcp_start+0x3c>
 80098be:	bf00      	nop
 80098c0:	0802befb 	.word	0x0802befb
 80098c4:	0802c112 	.word	0x0802c112
 80098c8:	0802aecf 	.word	0x0802aecf
 80098cc:	0802c25c 	.word	0x0802c25c

080098d0 <dhcp_coarse_tmr>:
{
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80098d4:	4b58      	ldr	r3, [pc, #352]	; (8009a38 <dhcp_coarse_tmr+0x168>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80098d6:	4f59      	ldr	r7, [pc, #356]	; (8009a3c <dhcp_coarse_tmr+0x16c>)
  NETIF_FOREACH(netif) {
 80098d8:	681d      	ldr	r5, [r3, #0]
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80098da:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8009a40 <dhcp_coarse_tmr+0x170>
{
 80098de:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80098e0:	f240 2619 	movw	r6, #537	; 0x219
  NETIF_FOREACH(netif) {
 80098e4:	b915      	cbnz	r5, 80098ec <dhcp_coarse_tmr+0x1c>
}
 80098e6:	b007      	add	sp, #28
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80098ec:	f8d5 40c8 	ldr.w	r4, [r5, #200]	; 0xc8
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80098f0:	b17c      	cbz	r4, 8009912 <dhcp_coarse_tmr+0x42>
 80098f2:	7963      	ldrb	r3, [r4, #5]
 80098f4:	b16b      	cbz	r3, 8009912 <dhcp_coarse_tmr+0x42>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80098f6:	8aa1      	ldrh	r1, [r4, #20]
 80098f8:	b169      	cbz	r1, 8009916 <dhcp_coarse_tmr+0x46>
 80098fa:	8a62      	ldrh	r2, [r4, #18]
 80098fc:	3201      	adds	r2, #1
 80098fe:	b292      	uxth	r2, r2
 8009900:	4291      	cmp	r1, r2
 8009902:	8262      	strh	r2, [r4, #18]
 8009904:	d107      	bne.n	8009916 <dhcp_coarse_tmr+0x46>
        dhcp_release_and_stop(netif);
 8009906:	4628      	mov	r0, r5
 8009908:	f7ff ff0e 	bl	8009728 <dhcp_release_and_stop>
        dhcp_start(netif);
 800990c:	4628      	mov	r0, r5
 800990e:	f7ff ff87 	bl	8009820 <dhcp_start>
  NETIF_FOREACH(netif) {
 8009912:	682d      	ldr	r5, [r5, #0]
 8009914:	e7e6      	b.n	80098e4 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009916:	8a22      	ldrh	r2, [r4, #16]
 8009918:	2a00      	cmp	r2, #0
 800991a:	d073      	beq.n	8009a04 <dhcp_coarse_tmr+0x134>
 800991c:	1e51      	subs	r1, r2, #1
 800991e:	2a01      	cmp	r2, #1
 8009920:	8221      	strh	r1, [r4, #16]
 8009922:	d16f      	bne.n	8009a04 <dhcp_coarse_tmr+0x134>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009924:	3b01      	subs	r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b09      	cmp	r3, #9
 800992a:	d8f2      	bhi.n	8009912 <dhcp_coarse_tmr+0x42>
 800992c:	fa26 f303 	lsr.w	r3, r6, r3
 8009930:	07db      	lsls	r3, r3, #31
 8009932:	d5ee      	bpl.n	8009912 <dhcp_coarse_tmr+0x42>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009934:	2104      	movs	r1, #4
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe ff50 	bl	80087dc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800993c:	f10d 0316 	add.w	r3, sp, #22
 8009940:	2203      	movs	r2, #3
 8009942:	4621      	mov	r1, r4
 8009944:	4628      	mov	r0, r5
 8009946:	f7fe ffc7 	bl	80088d8 <dhcp_create_msg>
  if (p_out != NULL) {
 800994a:	4681      	mov	r9, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	d039      	beq.n	80099c4 <dhcp_coarse_tmr+0xf4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009950:	6841      	ldr	r1, [r0, #4]
 8009952:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8009956:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009a44 <dhcp_coarse_tmr+0x174>
 800995a:	31f0      	adds	r1, #240	; 0xf0
 800995c:	2302      	movs	r3, #2
 800995e:	2239      	movs	r2, #57	; 0x39
 8009960:	9103      	str	r1, [sp, #12]
 8009962:	f7fe ff5f 	bl	8008824 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009966:	f8b5 20d0 	ldrh.w	r2, [r5, #208]	; 0xd0
 800996a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800996c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009970:	f7fe ff3c 	bl	80087ec <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009974:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009976:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800997a:	2304      	movs	r3, #4
 800997c:	2237      	movs	r2, #55	; 0x37
 800997e:	f7fe ff51 	bl	8008824 <dhcp_option>
 8009982:	9903      	ldr	r1, [sp, #12]
 8009984:	f8ad 0016 	strh.w	r0, [sp, #22]
 8009988:	f04f 0a04 	mov.w	sl, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800998c:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8009990:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8009994:	9103      	str	r1, [sp, #12]
 8009996:	f7fe ff63 	bl	8008860 <dhcp_option_byte>
 800999a:	f10a 3aff 	add.w	sl, sl, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800999e:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80099a2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80099a4:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80099a8:	d1f0      	bne.n	800998c <dhcp_coarse_tmr+0xbc>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80099aa:	464a      	mov	r2, r9
 80099ac:	f7ff f828 	bl	8008a00 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	9500      	str	r5, [sp, #0]
 80099b4:	2343      	movs	r3, #67	; 0x43
 80099b6:	4642      	mov	r2, r8
 80099b8:	4649      	mov	r1, r9
 80099ba:	f00a fb67 	bl	801408c <udp_sendto_if>
    pbuf_free(p_out);
 80099be:	4648      	mov	r0, r9
 80099c0:	f005 fcde 	bl	800f380 <pbuf_free>
  if (dhcp->tries < 255) {
 80099c4:	79a3      	ldrb	r3, [r4, #6]
 80099c6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80099c8:	bf1c      	itt	ne
 80099ca:	3301      	addne	r3, #1
 80099cc:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80099ce:	79a3      	ldrb	r3, [r4, #6]
 80099d0:	2b09      	cmp	r3, #9
 80099d2:	bf9f      	itttt	ls
 80099d4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80099d8:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80099dc:	00db      	lslls	r3, r3, #3
 80099de:	b29b      	uxthls	r3, r3
 80099e0:	bf88      	it	hi
 80099e2:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80099e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80099ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80099ee:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80099f2:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80099f4:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80099f6:	8aa3      	ldrh	r3, [r4, #20]
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	dd89      	ble.n	8009912 <dhcp_coarse_tmr+0x42>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80099fe:	105b      	asrs	r3, r3, #1
 8009a00:	8223      	strh	r3, [r4, #16]
 8009a02:	e786      	b.n	8009912 <dhcp_coarse_tmr+0x42>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009a04:	89e2      	ldrh	r2, [r4, #14]
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	d083      	beq.n	8009912 <dhcp_coarse_tmr+0x42>
 8009a0a:	1e51      	subs	r1, r2, #1
 8009a0c:	2a01      	cmp	r2, #1
 8009a0e:	81e1      	strh	r1, [r4, #14]
 8009a10:	f47f af7f 	bne.w	8009912 <dhcp_coarse_tmr+0x42>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009a14:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8009a18:	2a01      	cmp	r2, #1
 8009a1a:	d002      	beq.n	8009a22 <dhcp_coarse_tmr+0x152>
 8009a1c:	2b0a      	cmp	r3, #10
 8009a1e:	f47f af78 	bne.w	8009912 <dhcp_coarse_tmr+0x42>
    dhcp_renew(netif);
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7ff fdfe 	bl	8009624 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	8a62      	ldrh	r2, [r4, #18]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009a30:	bfc4      	itt	gt
 8009a32:	105b      	asrgt	r3, r3, #1
 8009a34:	81e3      	strhgt	r3, [r4, #14]
 8009a36:	e76c      	b.n	8009912 <dhcp_coarse_tmr+0x42>
 8009a38:	20016108 	.word	0x20016108
 8009a3c:	20006980 	.word	0x20006980
 8009a40:	0801fc14 	.word	0x0801fc14
 8009a44:	0801fc10 	.word	0x0801fc10

08009a48 <dhcp_fine_tmr>:
{
 8009a48:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8009a4a:	4b1f      	ldr	r3, [pc, #124]	; (8009ac8 <dhcp_fine_tmr+0x80>)
 8009a4c:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 8009a4e:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8009a50:	b904      	cbnz	r4, 8009a54 <dhcp_fine_tmr+0xc>
}
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009a54:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if (dhcp != NULL) {
 8009a58:	b123      	cbz	r3, 8009a64 <dhcp_fine_tmr+0x1c>
      if (dhcp->request_timeout > 1) {
 8009a5a:	891a      	ldrh	r2, [r3, #8]
 8009a5c:	2a01      	cmp	r2, #1
 8009a5e:	d903      	bls.n	8009a68 <dhcp_fine_tmr+0x20>
        dhcp->request_timeout--;
 8009a60:	3a01      	subs	r2, #1
 8009a62:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8009a64:	6824      	ldr	r4, [r4, #0]
 8009a66:	e7f3      	b.n	8009a50 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8009a68:	d1fc      	bne.n	8009a64 <dhcp_fine_tmr+0x1c>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009a6a:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8009a6c:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009a6e:	2a0c      	cmp	r2, #12
 8009a70:	d001      	beq.n	8009a76 <dhcp_fine_tmr+0x2e>
 8009a72:	2a06      	cmp	r2, #6
 8009a74:	d103      	bne.n	8009a7e <dhcp_fine_tmr+0x36>
    dhcp_discover(netif);
 8009a76:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8009a78:	f7ff f922 	bl	8008cc0 <dhcp_discover>
 8009a7c:	e7f2      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009a7e:	2a01      	cmp	r2, #1
 8009a80:	d10c      	bne.n	8009a9c <dhcp_fine_tmr+0x54>
    if (dhcp->tries <= 5) {
 8009a82:	799b      	ldrb	r3, [r3, #6]
 8009a84:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 8009a86:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8009a88:	d802      	bhi.n	8009a90 <dhcp_fine_tmr+0x48>
      dhcp_select(netif);
 8009a8a:	f7ff f85d 	bl	8008b48 <dhcp_select>
 8009a8e:	e7e9      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
      dhcp_release_and_stop(netif);
 8009a90:	f7ff fe4a 	bl	8009728 <dhcp_release_and_stop>
      dhcp_start(netif);
 8009a94:	4620      	mov	r0, r4
 8009a96:	f7ff fec3 	bl	8009820 <dhcp_start>
 8009a9a:	e7e3      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009a9c:	2a08      	cmp	r2, #8
 8009a9e:	d109      	bne.n	8009ab4 <dhcp_fine_tmr+0x6c>
    if (dhcp->tries <= 1) {
 8009aa0:	799b      	ldrb	r3, [r3, #6]
 8009aa2:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 8009aa4:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8009aa6:	d802      	bhi.n	8009aae <dhcp_fine_tmr+0x66>
      dhcp_check(netif);
 8009aa8:	f7ff f982 	bl	8008db0 <dhcp_check>
 8009aac:	e7da      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
      dhcp_bind(netif);
 8009aae:	f7ff f995 	bl	8008ddc <dhcp_bind>
 8009ab2:	e7d7      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8009ab4:	2a03      	cmp	r2, #3
 8009ab6:	d1d5      	bne.n	8009a64 <dhcp_fine_tmr+0x1c>
    if (dhcp->tries < REBOOT_TRIES) {
 8009ab8:	799b      	ldrb	r3, [r3, #6]
 8009aba:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 8009abc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8009abe:	d8db      	bhi.n	8009a78 <dhcp_fine_tmr+0x30>
      dhcp_reboot(netif);
 8009ac0:	f7fe ffbc 	bl	8008a3c <dhcp_reboot>
 8009ac4:	e7ce      	b.n	8009a64 <dhcp_fine_tmr+0x1c>
 8009ac6:	bf00      	nop
 8009ac8:	20016108 	.word	0x20016108

08009acc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009acc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009ace:	2618      	movs	r6, #24
 8009ad0:	4d07      	ldr	r5, [pc, #28]	; (8009af0 <etharp_free_entry+0x24>)
 8009ad2:	4346      	muls	r6, r0
{
 8009ad4:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8009ad6:	59a8      	ldr	r0, [r5, r6]
 8009ad8:	b118      	cbz	r0, 8009ae2 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009ada:	f005 fc51 	bl	800f380 <pbuf_free>
    arp_table[i].q = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009ae2:	2018      	movs	r0, #24
 8009ae4:	fb00 5404 	mla	r4, r0, r4, r5
 8009ae8:	2300      	movs	r3, #0
 8009aea:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
 8009aee:	bf00      	nop
 8009af0:	2000698c 	.word	0x2000698c

08009af4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8009afa:	f04f 0e0a 	mov.w	lr, #10
{
 8009afe:	e9cd 2100 	strd	r2, r1, [sp]
 8009b02:	4a3f      	ldr	r2, [pc, #252]	; (8009c00 <etharp_find_entry+0x10c>)
 8009b04:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009b06:	4699      	mov	r9, r3
 8009b08:	469b      	mov	fp, r3
 8009b0a:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8009b0c:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009b0e:	4675      	mov	r5, lr
 8009b10:	46f0      	mov	r8, lr
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009b12:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8009b14:	f892 a014 	ldrb.w	sl, [r2, #20]
 8009b18:	b218      	sxth	r0, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009b1a:	d11a      	bne.n	8009b52 <etharp_find_entry+0x5e>
 8009b1c:	f1ba 0f00 	cmp.w	sl, #0
 8009b20:	d05e      	beq.n	8009be0 <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009b22:	b156      	cbz	r6, 8009b3a <etharp_find_entry+0x46>
 8009b24:	6837      	ldr	r7, [r6, #0]
 8009b26:	6851      	ldr	r1, [r2, #4]
 8009b28:	428f      	cmp	r7, r1
 8009b2a:	d106      	bne.n	8009b3a <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8009b2c:	9900      	ldr	r1, [sp, #0]
 8009b2e:	2900      	cmp	r1, #0
 8009b30:	d049      	beq.n	8009bc6 <etharp_find_entry+0xd2>
 8009b32:	6891      	ldr	r1, [r2, #8]
 8009b34:	9f00      	ldr	r7, [sp, #0]
 8009b36:	42b9      	cmp	r1, r7
 8009b38:	d045      	beq.n	8009bc6 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009b3a:	f1ba 0f01 	cmp.w	sl, #1
 8009b3e:	8a51      	ldrh	r1, [r2, #18]
 8009b40:	d149      	bne.n	8009bd6 <etharp_find_entry+0xe2>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009b42:	6817      	ldr	r7, [r2, #0]
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	d041      	beq.n	8009bcc <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8009b48:	458c      	cmp	ip, r1
 8009b4a:	d805      	bhi.n	8009b58 <etharp_find_entry+0x64>
 8009b4c:	468c      	mov	ip, r1
 8009b4e:	4686      	mov	lr, r0
 8009b50:	e002      	b.n	8009b58 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009b52:	f1ba 0f00 	cmp.w	sl, #0
 8009b56:	d1e4      	bne.n	8009b22 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009b58:	3301      	adds	r3, #1
 8009b5a:	2b0a      	cmp	r3, #10
 8009b5c:	f102 0218 	add.w	r2, r2, #24
 8009b60:	d1d7      	bne.n	8009b12 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d143      	bne.n	8009bf0 <etharp_find_entry+0xfc>
 8009b68:	2c0a      	cmp	r4, #10
 8009b6a:	d111      	bne.n	8009b90 <etharp_find_entry+0x9c>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009b6c:	2d0a      	cmp	r5, #10
 8009b6e:	d039      	beq.n	8009be4 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009b70:	2318      	movs	r3, #24
 8009b72:	4a23      	ldr	r2, [pc, #140]	; (8009c00 <etharp_find_entry+0x10c>)
 8009b74:	436b      	muls	r3, r5
 8009b76:	58d3      	ldr	r3, [r2, r3]
 8009b78:	b133      	cbz	r3, 8009b88 <etharp_find_entry+0x94>
 8009b7a:	4b22      	ldr	r3, [pc, #136]	; (8009c04 <etharp_find_entry+0x110>)
 8009b7c:	4922      	ldr	r1, [pc, #136]	; (8009c08 <etharp_find_entry+0x114>)
 8009b7e:	4823      	ldr	r0, [pc, #140]	; (8009c0c <etharp_find_entry+0x118>)
 8009b80:	f240 126d 	movw	r2, #365	; 0x16d
 8009b84:	f012 ffd0 	bl	801cb28 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7ff ff9f 	bl	8009acc <etharp_free_entry>
 8009b8e:	462c      	mov	r4, r5
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009b90:	4d1b      	ldr	r5, [pc, #108]	; (8009c00 <etharp_find_entry+0x10c>)
 8009b92:	2318      	movs	r3, #24
 8009b94:	fb03 5304 	mla	r3, r3, r4, r5
 8009b98:	7d1b      	ldrb	r3, [r3, #20]
 8009b9a:	b133      	cbz	r3, 8009baa <etharp_find_entry+0xb6>
 8009b9c:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <etharp_find_entry+0x110>)
 8009b9e:	491c      	ldr	r1, [pc, #112]	; (8009c10 <etharp_find_entry+0x11c>)
 8009ba0:	481a      	ldr	r0, [pc, #104]	; (8009c0c <etharp_find_entry+0x118>)
 8009ba2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8009ba6:	f012 ffbf 	bl	801cb28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009baa:	b126      	cbz	r6, 8009bb6 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009bac:	2318      	movs	r3, #24
 8009bae:	fb03 5304 	mla	r3, r3, r4, r5
 8009bb2:	6832      	ldr	r2, [r6, #0]
 8009bb4:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8009bb6:	2318      	movs	r3, #24
 8009bb8:	fb03 5504 	mla	r5, r3, r4, r5
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	826b      	strh	r3, [r5, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009bc0:	9b00      	ldr	r3, [sp, #0]
 8009bc2:	60ab      	str	r3, [r5, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8009bc4:	4620      	mov	r0, r4
}
 8009bc6:	b003      	add	sp, #12
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8009bcc:	458b      	cmp	fp, r1
 8009bce:	d8c3      	bhi.n	8009b58 <etharp_find_entry+0x64>
 8009bd0:	468b      	mov	fp, r1
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	e7c0      	b.n	8009b58 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8009bd6:	4589      	cmp	r9, r1
 8009bd8:	d8be      	bhi.n	8009b58 <etharp_find_entry+0x64>
 8009bda:	4689      	mov	r9, r1
 8009bdc:	4605      	mov	r5, r0
 8009bde:	e7bb      	b.n	8009b58 <etharp_find_entry+0x64>
 8009be0:	4604      	mov	r4, r0
 8009be2:	e7b9      	b.n	8009b58 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009be4:	f1b8 0f0a 	cmp.w	r8, #10
 8009be8:	d105      	bne.n	8009bf6 <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009bea:	f1be 0f0a 	cmp.w	lr, #10
 8009bee:	d104      	bne.n	8009bfa <etharp_find_entry+0x106>
    return (s16_t)ERR_MEM;
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf4:	e7e7      	b.n	8009bc6 <etharp_find_entry+0xd2>
 8009bf6:	4645      	mov	r5, r8
 8009bf8:	e7c6      	b.n	8009b88 <etharp_find_entry+0x94>
 8009bfa:	4675      	mov	r5, lr
 8009bfc:	e7c4      	b.n	8009b88 <etharp_find_entry+0x94>
 8009bfe:	bf00      	nop
 8009c00:	2000698c 	.word	0x2000698c
 8009c04:	0802c27d 	.word	0x0802c27d
 8009c08:	0802c2ed 	.word	0x0802c2ed
 8009c0c:	0802aecf 	.word	0x0802aecf
 8009c10:	0802c304 	.word	0x0802c304

08009c14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009c1c:	4688      	mov	r8, r1
 8009c1e:	4691      	mov	r9, r2
 8009c20:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009c22:	4607      	mov	r7, r0
 8009c24:	b930      	cbnz	r0, 8009c34 <etharp_raw+0x20>
 8009c26:	4b2d      	ldr	r3, [pc, #180]	; (8009cdc <etharp_raw+0xc8>)
 8009c28:	492d      	ldr	r1, [pc, #180]	; (8009ce0 <etharp_raw+0xcc>)
 8009c2a:	482e      	ldr	r0, [pc, #184]	; (8009ce4 <etharp_raw+0xd0>)
 8009c2c:	f240 4257 	movw	r2, #1111	; 0x457
 8009c30:	f012 ff7a 	bl	801cb28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009c34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c38:	211c      	movs	r1, #28
 8009c3a:	200e      	movs	r0, #14
 8009c3c:	f005 fc08 	bl	800f450 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009c40:	4605      	mov	r5, r0
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d047      	beq.n	8009cd6 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009c46:	8943      	ldrh	r3, [r0, #10]
 8009c48:	2b1b      	cmp	r3, #27
 8009c4a:	d806      	bhi.n	8009c5a <etharp_raw+0x46>
 8009c4c:	4b23      	ldr	r3, [pc, #140]	; (8009cdc <etharp_raw+0xc8>)
 8009c4e:	4926      	ldr	r1, [pc, #152]	; (8009ce8 <etharp_raw+0xd4>)
 8009c50:	4824      	ldr	r0, [pc, #144]	; (8009ce4 <etharp_raw+0xd0>)
 8009c52:	f240 4262 	movw	r2, #1122	; 0x462
 8009c56:	f012 ff67 	bl	801cb28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009c5a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8009c5e:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8009c60:	f004 fa1e 	bl	800e0a0 <lwip_htons>
 8009c64:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009c66:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d006      	beq.n	8009c7c <etharp_raw+0x68>
 8009c6e:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <etharp_raw+0xc8>)
 8009c70:	491e      	ldr	r1, [pc, #120]	; (8009cec <etharp_raw+0xd8>)
 8009c72:	481c      	ldr	r0, [pc, #112]	; (8009ce4 <etharp_raw+0xd0>)
 8009c74:	f240 4269 	movw	r2, #1129	; 0x469
 8009c78:	f012 ff56 	bl	801cb28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009c7c:	6833      	ldr	r3, [r6, #0]
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	88b3      	ldrh	r3, [r6, #4]
 8009c82:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009c84:	f8da 3000 	ldr.w	r3, [sl]
 8009c88:	f8c4 3012 	str.w	r3, [r4, #18]
 8009c8c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009c90:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009ca8:	2306      	movs	r3, #6
 8009caa:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009cac:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009cae:	2600      	movs	r6, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8009cb0:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009cb2:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009cb6:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009cb8:	70e6      	strb	r6, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009cba:	4642      	mov	r2, r8
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f00a fcd2 	bl	801466c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f005 fb59 	bl	800f380 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8009cce:	4630      	mov	r0, r6
}
 8009cd0:	b002      	add	sp, #8
 8009cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	e7f9      	b.n	8009cd0 <etharp_raw+0xbc>
 8009cdc:	0802c27d 	.word	0x0802c27d
 8009ce0:	0802c112 	.word	0x0802c112
 8009ce4:	0802aecf 	.word	0x0802aecf
 8009ce8:	0802c32d 	.word	0x0802c32d
 8009cec:	0802c35e 	.word	0x0802c35e

08009cf0 <etharp_cleanup_netif>:
{
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	4d08      	ldr	r5, [pc, #32]	; (8009d14 <etharp_cleanup_netif+0x24>)
 8009cf4:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009cf6:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009cf8:	7d2b      	ldrb	r3, [r5, #20]
 8009cfa:	b12b      	cbz	r3, 8009d08 <etharp_cleanup_netif+0x18>
 8009cfc:	68ab      	ldr	r3, [r5, #8]
 8009cfe:	42b3      	cmp	r3, r6
 8009d00:	d102      	bne.n	8009d08 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff fee2 	bl	8009acc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d08:	3401      	adds	r4, #1
 8009d0a:	2c0a      	cmp	r4, #10
 8009d0c:	f105 0518 	add.w	r5, r5, #24
 8009d10:	d1f2      	bne.n	8009cf8 <etharp_cleanup_netif+0x8>
}
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	2000698c 	.word	0x2000698c

08009d18 <etharp_input>:
{
 8009d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009d20:	460c      	mov	r4, r1
 8009d22:	b949      	cbnz	r1, 8009d38 <etharp_input+0x20>
 8009d24:	4b4c      	ldr	r3, [pc, #304]	; (8009e58 <etharp_input+0x140>)
 8009d26:	494d      	ldr	r1, [pc, #308]	; (8009e5c <etharp_input+0x144>)
 8009d28:	484d      	ldr	r0, [pc, #308]	; (8009e60 <etharp_input+0x148>)
 8009d2a:	f240 228a 	movw	r2, #650	; 0x28a
 8009d2e:	f012 fefb 	bl	801cb28 <iprintf>
}
 8009d32:	b008      	add	sp, #32
 8009d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8009d38:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009d3a:	882b      	ldrh	r3, [r5, #0]
 8009d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d40:	d108      	bne.n	8009d54 <etharp_input+0x3c>
 8009d42:	792b      	ldrb	r3, [r5, #4]
 8009d44:	2b06      	cmp	r3, #6
 8009d46:	d105      	bne.n	8009d54 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009d48:	796b      	ldrb	r3, [r5, #5]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d102      	bne.n	8009d54 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009d4e:	886b      	ldrh	r3, [r5, #2]
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d003      	beq.n	8009d5c <etharp_input+0x44>
  pbuf_free(p);
 8009d54:	4638      	mov	r0, r7
 8009d56:	f005 fb13 	bl	800f380 <pbuf_free>
 8009d5a:	e7ea      	b.n	8009d32 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009d5c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009d5e:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8009d62:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009d64:	f105 0808 	add.w	r8, r5, #8
 8009d68:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d05f      	beq.n	8009e2e <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009d6e:	1af3      	subs	r3, r6, r3
 8009d70:	425e      	negs	r6, r3
 8009d72:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009d74:	f1c6 0a02 	rsb	sl, r6, #2
 8009d78:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009d7c:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 8009d80:	2b06      	cmp	r3, #6
 8009d82:	d006      	beq.n	8009d92 <etharp_input+0x7a>
 8009d84:	4b34      	ldr	r3, [pc, #208]	; (8009e58 <etharp_input+0x140>)
 8009d86:	4937      	ldr	r1, [pc, #220]	; (8009e64 <etharp_input+0x14c>)
 8009d88:	4835      	ldr	r0, [pc, #212]	; (8009e60 <etharp_input+0x148>)
 8009d8a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8009d8e:	f012 fecb 	bl	801cb28 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8009d92:	9807      	ldr	r0, [sp, #28]
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d03e      	beq.n	8009e16 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009d98:	4621      	mov	r1, r4
 8009d9a:	f000 fcca 	bl	800a732 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8009d9e:	4681      	mov	r9, r0
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d138      	bne.n	8009e16 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009daa:	2be0      	cmp	r3, #224	; 0xe0
 8009dac:	d033      	beq.n	8009e16 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8009dae:	4622      	mov	r2, r4
 8009db0:	4651      	mov	r1, sl
 8009db2:	a807      	add	r0, sp, #28
 8009db4:	f7ff fe9e 	bl	8009af4 <etharp_find_entry>
  if (i < 0) {
 8009db8:	1e03      	subs	r3, r0, #0
 8009dba:	db2c      	blt.n	8009e16 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009dbc:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <etharp_input+0x150>)
 8009dbe:	2018      	movs	r0, #24
 8009dc0:	fb00 fc03 	mul.w	ip, r0, r3
 8009dc4:	eb02 010c 	add.w	r1, r2, ip
 8009dc8:	f04f 0e02 	mov.w	lr, #2
 8009dcc:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009dd0:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8009dd4:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009dd6:	fb13 e300 	smlabb	r3, r3, r0, lr
 8009dda:	f8d8 0000 	ldr.w	r0, [r8]
 8009dde:	50d0      	str	r0, [r2, r3]
 8009de0:	eb02 0e03 	add.w	lr, r2, r3
 8009de4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009de8:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8009dec:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8009df0:	f852 100c 	ldr.w	r1, [r2, ip]
 8009df4:	b179      	cbz	r1, 8009e16 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8009dfa:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009dfe:	4620      	mov	r0, r4
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 8009e06:	4643      	mov	r3, r8
 8009e08:	9105      	str	r1, [sp, #20]
 8009e0a:	f00a fc2f 	bl	801466c <ethernet_output>
    pbuf_free(p);
 8009e0e:	9905      	ldr	r1, [sp, #20]
 8009e10:	4608      	mov	r0, r1
 8009e12:	f005 fab5 	bl	800f380 <pbuf_free>
  switch (hdr->opcode) {
 8009e16:	88eb      	ldrh	r3, [r5, #6]
 8009e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1c:	d00a      	beq.n	8009e34 <etharp_input+0x11c>
 8009e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e22:	d197      	bne.n	8009d54 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8009e24:	a907      	add	r1, sp, #28
 8009e26:	4620      	mov	r0, r4
 8009e28:	f7ff fb9c 	bl	8009564 <dhcp_arp_reply>
      break;
 8009e2c:	e792      	b.n	8009d54 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e2e:	f04f 0a02 	mov.w	sl, #2
 8009e32:	e7a3      	b.n	8009d7c <etharp_input+0x64>
      if (for_us) {
 8009e34:	2e00      	cmp	r6, #0
 8009e36:	d08d      	beq.n	8009d54 <etharp_input+0x3c>
        etharp_raw(netif,
 8009e38:	2202      	movs	r2, #2
 8009e3a:	9203      	str	r2, [sp, #12]
 8009e3c:	aa07      	add	r2, sp, #28
 8009e3e:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009e42:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009e46:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8009e48:	9200      	str	r2, [sp, #0]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7ff fee0 	bl	8009c14 <etharp_raw>
 8009e54:	e77e      	b.n	8009d54 <etharp_input+0x3c>
 8009e56:	bf00      	nop
 8009e58:	0802c27d 	.word	0x0802c27d
 8009e5c:	0802c112 	.word	0x0802c112
 8009e60:	0802aecf 	.word	0x0802aecf
 8009e64:	0802c3e0 	.word	0x0802c3e0
 8009e68:	2000698c 	.word	0x2000698c

08009e6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e6e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e70:	2401      	movs	r4, #1
 8009e72:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8009e76:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 8009e7a:	4905      	ldr	r1, [pc, #20]	; (8009e90 <etharp_request+0x24>)
 8009e7c:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009e7e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e80:	9200      	str	r2, [sp, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	4a03      	ldr	r2, [pc, #12]	; (8009e94 <etharp_request+0x28>)
 8009e86:	f7ff fec5 	bl	8009c14 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8009e8a:	b004      	add	sp, #16
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0801fe66 	.word	0x0801fe66
 8009e94:	0801fe60 	.word	0x0801fe60

08009e98 <etharp_tmr>:
{
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	4c13      	ldr	r4, [pc, #76]	; (8009ee8 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e9c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009e9e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009ea0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8009ea2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8009ea4:	b16a      	cbz	r2, 8009ec2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8009ea6:	8a63      	ldrh	r3, [r4, #18]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009eac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8009eb0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009eb2:	d203      	bcs.n	8009ebc <etharp_tmr+0x24>
 8009eb4:	2a01      	cmp	r2, #1
 8009eb6:	d10a      	bne.n	8009ece <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d910      	bls.n	8009ede <etharp_tmr+0x46>
        etharp_free_entry(i);
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f7ff fe05 	bl	8009acc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	2d0a      	cmp	r5, #10
 8009ec6:	f104 0418 	add.w	r4, r4, #24
 8009eca:	d1ea      	bne.n	8009ea2 <etharp_tmr+0xa>
}
 8009ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009ece:	2a03      	cmp	r2, #3
 8009ed0:	d101      	bne.n	8009ed6 <etharp_tmr+0x3e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009ed2:	7527      	strb	r7, [r4, #20]
 8009ed4:	e7f5      	b.n	8009ec2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009ed6:	2a04      	cmp	r2, #4
 8009ed8:	d1f3      	bne.n	8009ec2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009eda:	7526      	strb	r6, [r4, #20]
 8009edc:	e7f1      	b.n	8009ec2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009ede:	68a0      	ldr	r0, [r4, #8]
 8009ee0:	1d21      	adds	r1, r4, #4
 8009ee2:	f7ff ffc3 	bl	8009e6c <etharp_request>
 8009ee6:	e7ec      	b.n	8009ec2 <etharp_tmr+0x2a>
 8009ee8:	2000698c 	.word	0x2000698c

08009eec <etharp_output_to_arp_index>:
{
 8009eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009ef0:	4d24      	ldr	r5, [pc, #144]	; (8009f84 <etharp_output_to_arp_index+0x98>)
 8009ef2:	2318      	movs	r3, #24
 8009ef4:	fb03 5302 	mla	r3, r3, r2, r5
{
 8009ef8:	4607      	mov	r7, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009efa:	7d1b      	ldrb	r3, [r3, #20]
 8009efc:	2b01      	cmp	r3, #1
{
 8009efe:	4688      	mov	r8, r1
 8009f00:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009f02:	d806      	bhi.n	8009f12 <etharp_output_to_arp_index+0x26>
 8009f04:	4b20      	ldr	r3, [pc, #128]	; (8009f88 <etharp_output_to_arp_index+0x9c>)
 8009f06:	4921      	ldr	r1, [pc, #132]	; (8009f8c <etharp_output_to_arp_index+0xa0>)
 8009f08:	4821      	ldr	r0, [pc, #132]	; (8009f90 <etharp_output_to_arp_index+0xa4>)
 8009f0a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009f0e:	f012 fe0b 	bl	801cb28 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009f12:	2218      	movs	r2, #24
 8009f14:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8009f18:	fb02 5404 	mla	r4, r2, r4, r5
 8009f1c:	00f6      	lsls	r6, r6, #3
 8009f1e:	7d23      	ldrb	r3, [r4, #20]
 8009f20:	f106 0a0c 	add.w	sl, r6, #12
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	44aa      	add	sl, r5
 8009f28:	f107 09d4 	add.w	r9, r7, #212	; 0xd4
 8009f2c:	d10b      	bne.n	8009f46 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009f2e:	8a63      	ldrh	r3, [r4, #18]
 8009f30:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8009f34:	d913      	bls.n	8009f5e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009f36:	3604      	adds	r6, #4
 8009f38:	19a9      	adds	r1, r5, r6
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7ff ff96 	bl	8009e6c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009f40:	b908      	cbnz	r0, 8009f46 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009f42:	2303      	movs	r3, #3
 8009f44:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	464a      	mov	r2, r9
 8009f4e:	4653      	mov	r3, sl
 8009f50:	4641      	mov	r1, r8
 8009f52:	4638      	mov	r0, r7
 8009f54:	f00a fb8a 	bl	801466c <ethernet_output>
}
 8009f58:	b004      	add	sp, #16
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009f5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009f62:	d3f0      	bcc.n	8009f46 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f64:	2301      	movs	r3, #1
 8009f66:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009f68:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <etharp_output_to_arp_index+0xa8>)
 8009f6c:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009f6e:	442e      	add	r6, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009f70:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	9602      	str	r6, [sp, #8]
 8009f76:	464b      	mov	r3, r9
 8009f78:	4652      	mov	r2, sl
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff fe49 	bl	8009c14 <etharp_raw>
 8009f82:	e7dd      	b.n	8009f40 <etharp_output_to_arp_index+0x54>
 8009f84:	2000698c 	.word	0x2000698c
 8009f88:	0802c27d 	.word	0x0802c27d
 8009f8c:	0802c404 	.word	0x0802c404
 8009f90:	0802aecf 	.word	0x0802aecf
 8009f94:	0801fe66 	.word	0x0801fe66

08009f98 <etharp_query>:
{
 8009f98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	4688      	mov	r8, r1
 8009f9e:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	f8d8 0000 	ldr.w	r0, [r8]
{
 8009fa6:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009fa8:	f000 fbc3 	bl	800a732 <ip4_addr_isbroadcast_u32>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d16b      	bne.n	800a088 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8009fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009fb8:	2ae0      	cmp	r2, #224	; 0xe0
 8009fba:	d065      	beq.n	800a088 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d063      	beq.n	800a088 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	f7ff fd95 	bl	8009af4 <etharp_find_entry>
  if (i_err < 0) {
 8009fca:	1e04      	subs	r4, r0, #0
 8009fcc:	da03      	bge.n	8009fd6 <etharp_query+0x3e>
    return (err_t)i_err;
 8009fce:	b260      	sxtb	r0, r4
}
 8009fd0:	b002      	add	sp, #8
 8009fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8009fd6:	2c7e      	cmp	r4, #126	; 0x7e
 8009fd8:	dd06      	ble.n	8009fe8 <etharp_query+0x50>
 8009fda:	4b35      	ldr	r3, [pc, #212]	; (800a0b0 <etharp_query+0x118>)
 8009fdc:	4935      	ldr	r1, [pc, #212]	; (800a0b4 <etharp_query+0x11c>)
 8009fde:	4836      	ldr	r0, [pc, #216]	; (800a0b8 <etharp_query+0x120>)
 8009fe0:	f240 32c1 	movw	r2, #961	; 0x3c1
 8009fe4:	f012 fda0 	bl	801cb28 <iprintf>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009fe8:	4f34      	ldr	r7, [pc, #208]	; (800a0bc <etharp_query+0x124>)
  i = (netif_addr_idx_t)i_err;
 8009fea:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009fec:	2218      	movs	r2, #24
 8009fee:	fb02 7204 	mla	r2, r2, r4, r7
 8009ff2:	7d13      	ldrb	r3, [r2, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d156      	bne.n	800a0a6 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	7513      	strb	r3, [r2, #20]
    arp_table[i].netif = netif;
 8009ffc:	6096      	str	r6, [r2, #8]
    result = etharp_request(netif, ipaddr);
 8009ffe:	4641      	mov	r1, r8
 800a000:	4630      	mov	r0, r6
 800a002:	f7ff ff33 	bl	8009e6c <etharp_request>
    if (q == NULL) {
 800a006:	2d00      	cmp	r5, #0
 800a008:	d0e2      	beq.n	8009fd0 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a00a:	2318      	movs	r3, #24
 800a00c:	fb03 7204 	mla	r2, r3, r4, r7
 800a010:	7d12      	ldrb	r2, [r2, #20]
 800a012:	2a01      	cmp	r2, #1
 800a014:	d90e      	bls.n	800a034 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a016:	fb03 7304 	mla	r3, r3, r4, r7
 800a01a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a01e:	9200      	str	r2, [sp, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	f106 02d4 	add.w	r2, r6, #212	; 0xd4
 800a026:	4629      	mov	r1, r5
 800a028:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800a02a:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a02e:	f00a fb1d 	bl	801466c <ethernet_output>
 800a032:	e7cd      	b.n	8009fd0 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a034:	d1cc      	bne.n	8009fd0 <etharp_query+0x38>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a036:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a0b0 <etharp_query+0x118>
 800a03a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800a0c0 <etharp_query+0x128>
 800a03e:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a0b8 <etharp_query+0x120>
 800a042:	462e      	mov	r6, r5
 800a044:	8972      	ldrh	r2, [r6, #10]
 800a046:	8933      	ldrh	r3, [r6, #8]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d108      	bne.n	800a05e <etharp_query+0xc6>
 800a04c:	6833      	ldr	r3, [r6, #0]
 800a04e:	b133      	cbz	r3, 800a05e <etharp_query+0xc6>
 800a050:	4643      	mov	r3, r8
 800a052:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a056:	4649      	mov	r1, r9
 800a058:	4650      	mov	r0, sl
 800a05a:	f012 fd65 	bl	801cb28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800a05e:	7b33      	ldrb	r3, [r6, #12]
 800a060:	065b      	lsls	r3, r3, #25
 800a062:	d414      	bmi.n	800a08e <etharp_query+0xf6>
      p = p->next;
 800a064:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800a066:	2e00      	cmp	r6, #0
 800a068:	d1ec      	bne.n	800a044 <etharp_query+0xac>
      pbuf_ref(p);
 800a06a:	4628      	mov	r0, r5
 800a06c:	f005 fae4 	bl	800f638 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 800a070:	2318      	movs	r3, #24
 800a072:	fb03 f204 	mul.w	r2, r3, r4
 800a076:	461e      	mov	r6, r3
 800a078:	58b8      	ldr	r0, [r7, r2]
 800a07a:	b108      	cbz	r0, 800a080 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 800a07c:	f005 f980 	bl	800f380 <pbuf_free>
      arp_table[i].q = p;
 800a080:	4374      	muls	r4, r6
      result = ERR_OK;
 800a082:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800a084:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800a086:	e7a3      	b.n	8009fd0 <etharp_query+0x38>
    return ERR_ARG;
 800a088:	f06f 000f 	mvn.w	r0, #15
 800a08c:	e7a0      	b.n	8009fd0 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800a08e:	462a      	mov	r2, r5
 800a090:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a094:	200e      	movs	r0, #14
 800a096:	f005 fc91 	bl	800f9bc <pbuf_clone>
    if (p != NULL) {
 800a09a:	4605      	mov	r5, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1e7      	bne.n	800a070 <etharp_query+0xd8>
      result = ERR_MEM;
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	e794      	b.n	8009fd0 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	d0a9      	beq.n	8009ffe <etharp_query+0x66>
  err_t result = ERR_MEM;
 800a0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ae:	e7ac      	b.n	800a00a <etharp_query+0x72>
 800a0b0:	0802c27d 	.word	0x0802c27d
 800a0b4:	0802c434 	.word	0x0802c434
 800a0b8:	0802aecf 	.word	0x0802aecf
 800a0bc:	2000698c 	.word	0x2000698c
 800a0c0:	0802c442 	.word	0x0802c442

0800a0c4 <etharp_output>:
{
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	460e      	mov	r6, r1
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	b930      	cbnz	r0, 800a0de <etharp_output+0x1a>
 800a0d0:	4b41      	ldr	r3, [pc, #260]	; (800a1d8 <etharp_output+0x114>)
 800a0d2:	4942      	ldr	r1, [pc, #264]	; (800a1dc <etharp_output+0x118>)
 800a0d4:	4842      	ldr	r0, [pc, #264]	; (800a1e0 <etharp_output+0x11c>)
 800a0d6:	f240 321e 	movw	r2, #798	; 0x31e
 800a0da:	f012 fd25 	bl	801cb28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a0de:	b936      	cbnz	r6, 800a0ee <etharp_output+0x2a>
 800a0e0:	4b3d      	ldr	r3, [pc, #244]	; (800a1d8 <etharp_output+0x114>)
 800a0e2:	4940      	ldr	r1, [pc, #256]	; (800a1e4 <etharp_output+0x120>)
 800a0e4:	483e      	ldr	r0, [pc, #248]	; (800a1e0 <etharp_output+0x11c>)
 800a0e6:	f240 321f 	movw	r2, #799	; 0x31f
 800a0ea:	f012 fd1d 	bl	801cb28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a0ee:	b935      	cbnz	r5, 800a0fe <etharp_output+0x3a>
 800a0f0:	4b39      	ldr	r3, [pc, #228]	; (800a1d8 <etharp_output+0x114>)
 800a0f2:	493d      	ldr	r1, [pc, #244]	; (800a1e8 <etharp_output+0x124>)
 800a0f4:	483a      	ldr	r0, [pc, #232]	; (800a1e0 <etharp_output+0x11c>)
 800a0f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a0fa:	f012 fd15 	bl	801cb28 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a0fe:	6828      	ldr	r0, [r5, #0]
 800a100:	4621      	mov	r1, r4
 800a102:	f000 fb16 	bl	800a732 <ip4_addr_isbroadcast_u32>
 800a106:	2800      	cmp	r0, #0
 800a108:	d161      	bne.n	800a1ce <etharp_output+0x10a>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a10a:	682b      	ldr	r3, [r5, #0]
 800a10c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a110:	2ae0      	cmp	r2, #224	; 0xe0
 800a112:	d11b      	bne.n	800a14c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a114:	2301      	movs	r3, #1
 800a116:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a11a:	235e      	movs	r3, #94	; 0x5e
 800a11c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a120:	786b      	ldrb	r3, [r5, #1]
 800a122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a126:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a12a:	78ab      	ldrb	r3, [r5, #2]
 800a12c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a130:	78eb      	ldrb	r3, [r5, #3]
 800a132:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800a136:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a13c:	9200      	str	r2, [sp, #0]
 800a13e:	4631      	mov	r1, r6
 800a140:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 800a144:	4620      	mov	r0, r4
 800a146:	f00a fa91 	bl	801466c <ethernet_output>
 800a14a:	e023      	b.n	800a194 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a14c:	6862      	ldr	r2, [r4, #4]
 800a14e:	69e1      	ldr	r1, [r4, #28]
 800a150:	405a      	eors	r2, r3
 800a152:	420a      	tst	r2, r1
 800a154:	d009      	beq.n	800a16a <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 800a156:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a158:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d004      	beq.n	800a16a <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a162:	2b00      	cmp	r3, #0
 800a164:	d035      	beq.n	800a1d2 <etharp_output+0x10e>
            dst_addr = netif_ip4_gw(netif);
 800a166:	f104 0534 	add.w	r5, r4, #52	; 0x34
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a16a:	4920      	ldr	r1, [pc, #128]	; (800a1ec <etharp_output+0x128>)
 800a16c:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 800a170:	2318      	movs	r3, #24
 800a172:	fb03 1302 	mla	r3, r3, r2, r1
 800a176:	468c      	mov	ip, r1
 800a178:	7d18      	ldrb	r0, [r3, #20]
 800a17a:	2801      	cmp	r0, #1
 800a17c:	d90c      	bls.n	800a198 <etharp_output+0xd4>
 800a17e:	6899      	ldr	r1, [r3, #8]
 800a180:	42a1      	cmp	r1, r4
 800a182:	d109      	bne.n	800a198 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a184:	6829      	ldr	r1, [r5, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4299      	cmp	r1, r3
 800a18a:	d105      	bne.n	800a198 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 800a18c:	4631      	mov	r1, r6
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff feac 	bl	8009eec <etharp_output_to_arp_index>
}
 800a194:	b005      	add	sp, #20
 800a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a198:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <etharp_output+0x128>)
{
 800a19a:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a19c:	7d1f      	ldrb	r7, [r3, #20]
 800a19e:	2f01      	cmp	r7, #1
 800a1a0:	b2ca      	uxtb	r2, r1
 800a1a2:	d909      	bls.n	800a1b8 <etharp_output+0xf4>
 800a1a4:	689f      	ldr	r7, [r3, #8]
 800a1a6:	42a7      	cmp	r7, r4
 800a1a8:	d106      	bne.n	800a1b8 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 800a1aa:	685f      	ldr	r7, [r3, #4]
 800a1ac:	6828      	ldr	r0, [r5, #0]
 800a1ae:	42b8      	cmp	r0, r7
 800a1b0:	d102      	bne.n	800a1b8 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 800a1b2:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 800a1b6:	e7e9      	b.n	800a18c <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a1b8:	3101      	adds	r1, #1
 800a1ba:	290a      	cmp	r1, #10
 800a1bc:	f103 0318 	add.w	r3, r3, #24
 800a1c0:	d1ec      	bne.n	800a19c <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff fee6 	bl	8009f98 <etharp_query>
 800a1cc:	e7e2      	b.n	800a194 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a1ce:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <etharp_output+0x12c>)
 800a1d0:	e7b2      	b.n	800a138 <etharp_output+0x74>
            return ERR_RTE;
 800a1d2:	f06f 0003 	mvn.w	r0, #3
 800a1d6:	e7dd      	b.n	800a194 <etharp_output+0xd0>
 800a1d8:	0802c27d 	.word	0x0802c27d
 800a1dc:	0802c112 	.word	0x0802c112
 800a1e0:	0802aecf 	.word	0x0802aecf
 800a1e4:	0802d4cb 	.word	0x0802d4cb
 800a1e8:	0802c3c1 	.word	0x0802c3c1
 800a1ec:	2000698c 	.word	0x2000698c
 800a1f0:	0801fe60 	.word	0x0801fe60

0800a1f4 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	b087      	sub	sp, #28
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a1fe:	2124      	movs	r1, #36	; 0x24
 800a200:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a204:	2036      	movs	r0, #54	; 0x36
 800a206:	f005 f923 	bl	800f450 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a20a:	4605      	mov	r5, r0
 800a20c:	b390      	cbz	r0, 800a274 <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a20e:	8943      	ldrh	r3, [r0, #10]
 800a210:	2b23      	cmp	r3, #35	; 0x23
 800a212:	d806      	bhi.n	800a222 <icmp_send_response.isra.0+0x2e>
 800a214:	4b18      	ldr	r3, [pc, #96]	; (800a278 <icmp_send_response.isra.0+0x84>)
 800a216:	4919      	ldr	r1, [pc, #100]	; (800a27c <icmp_send_response.isra.0+0x88>)
 800a218:	4819      	ldr	r0, [pc, #100]	; (800a280 <icmp_send_response.isra.0+0x8c>)
 800a21a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a21e:	f012 fc83 	bl	801cb28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a222:	6820      	ldr	r0, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a224:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	7123      	strb	r3, [r4, #4]
 800a22a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a22c:	71a3      	strb	r3, [r4, #6]
 800a22e:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800a230:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800a232:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a234:	4603      	mov	r3, r0
 800a236:	f104 0208 	add.w	r2, r4, #8
 800a23a:	f100 011c 	add.w	r1, r0, #28
 800a23e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a242:	f842 6b04 	str.w	r6, [r2], #4
 800a246:	428b      	cmp	r3, r1
 800a248:	d1f9      	bne.n	800a23e <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a24a:	68c3      	ldr	r3, [r0, #12]
 800a24c:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a24e:	a805      	add	r0, sp, #20
 800a250:	f000 f8da 	bl	800a408 <ip4_route>
#endif
  if (netif != NULL) {
 800a254:	b158      	cbz	r0, 800a26e <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a256:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a258:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800a25a:	70a1      	strb	r1, [r4, #2]
 800a25c:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a25e:	aa05      	add	r2, sp, #20
 800a260:	e9cd 1300 	strd	r1, r3, [sp]
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	23ff      	movs	r3, #255	; 0xff
 800a268:	4628      	mov	r0, r5
 800a26a:	f000 fa51 	bl	800a710 <ip4_output_if>
  }
  pbuf_free(q);
 800a26e:	4628      	mov	r0, r5
 800a270:	f005 f886 	bl	800f380 <pbuf_free>
}
 800a274:	b007      	add	sp, #28
 800a276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a278:	0802c45c 	.word	0x0802c45c
 800a27c:	0802c4ca 	.word	0x0802c4ca
 800a280:	0802aecf 	.word	0x0802aecf

0800a284 <icmp_input>:
{
 800a284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800a288:	4b47      	ldr	r3, [pc, #284]	; (800a3a8 <icmp_input+0x124>)
 800a28a:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800a28e:	f899 5000 	ldrb.w	r5, [r9]
 800a292:	f005 050f 	and.w	r5, r5, #15
 800a296:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800a298:	2d13      	cmp	r5, #19
{
 800a29a:	b087      	sub	sp, #28
 800a29c:	4604      	mov	r4, r0
 800a29e:	460f      	mov	r7, r1
 800a2a0:	4698      	mov	r8, r3
  if (hlen < IP_HLEN) {
 800a2a2:	d916      	bls.n	800a2d2 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 800a2a4:	8942      	ldrh	r2, [r0, #10]
 800a2a6:	2a03      	cmp	r2, #3
 800a2a8:	d913      	bls.n	800a2d2 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 800a2aa:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	2a08      	cmp	r2, #8
 800a2b0:	d10f      	bne.n	800a2d2 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a2b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a2b4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a2b8:	2ae0      	cmp	r2, #224	; 0xe0
 800a2ba:	d00a      	beq.n	800a2d2 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	f000 fa38 	bl	800a732 <ip4_addr_isbroadcast_u32>
 800a2c2:	b930      	cbnz	r0, 800a2d2 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a2c4:	8923      	ldrh	r3, [r4, #8]
 800a2c6:	2b07      	cmp	r3, #7
 800a2c8:	d903      	bls.n	800a2d2 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f004 f9d5 	bl	800e67a <inet_chksum_pbuf>
 800a2d0:	b128      	cbz	r0, 800a2de <icmp_input+0x5a>
  pbuf_free(p);
 800a2d2:	4620      	mov	r0, r4
}
 800a2d4:	b007      	add	sp, #28
 800a2d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800a2da:	f005 b851 	b.w	800f380 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a2de:	f105 010e 	add.w	r1, r5, #14
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	9105      	str	r1, [sp, #20]
 800a2e6:	f005 f811 	bl	800f30c <pbuf_add_header>
 800a2ea:	9905      	ldr	r1, [sp, #20]
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d04f      	beq.n	800a390 <icmp_input+0x10c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800a2f0:	8923      	ldrh	r3, [r4, #8]
 800a2f2:	1959      	adds	r1, r3, r5
 800a2f4:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800a2f6:	428b      	cmp	r3, r1
 800a2f8:	d8eb      	bhi.n	800a2d2 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800a2fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2fe:	200e      	movs	r0, #14
 800a300:	f005 f8a6 	bl	800f450 <pbuf_alloc>
        if (r == NULL) {
 800a304:	4606      	mov	r6, r0
 800a306:	2800      	cmp	r0, #0
 800a308:	d0e3      	beq.n	800a2d2 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a30a:	8942      	ldrh	r2, [r0, #10]
 800a30c:	f105 0308 	add.w	r3, r5, #8
 800a310:	429a      	cmp	r2, r3
 800a312:	d203      	bcs.n	800a31c <icmp_input+0x98>
          pbuf_free(r);
 800a314:	4630      	mov	r0, r6
 800a316:	f005 f833 	bl	800f380 <pbuf_free>
          goto icmperr;
 800a31a:	e7da      	b.n	800a2d2 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 800a31c:	4649      	mov	r1, r9
 800a31e:	6840      	ldr	r0, [r0, #4]
 800a320:	462a      	mov	r2, r5
 800a322:	f011 ff8d 	bl	801c240 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800a326:	4629      	mov	r1, r5
 800a328:	4630      	mov	r0, r6
 800a32a:	f004 fff5 	bl	800f318 <pbuf_remove_header>
 800a32e:	b130      	cbz	r0, 800a33e <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a330:	4b1e      	ldr	r3, [pc, #120]	; (800a3ac <icmp_input+0x128>)
 800a332:	491f      	ldr	r1, [pc, #124]	; (800a3b0 <icmp_input+0x12c>)
 800a334:	481f      	ldr	r0, [pc, #124]	; (800a3b4 <icmp_input+0x130>)
 800a336:	22b6      	movs	r2, #182	; 0xb6
 800a338:	f012 fbf6 	bl	801cb28 <iprintf>
          pbuf_free(r);
 800a33c:	e7ea      	b.n	800a314 <icmp_input+0x90>
        if (pbuf_copy(r, p) != ERR_OK) {
 800a33e:	4621      	mov	r1, r4
 800a340:	4630      	mov	r0, r6
 800a342:	f005 f9d9 	bl	800f6f8 <pbuf_copy>
 800a346:	2800      	cmp	r0, #0
 800a348:	d1e4      	bne.n	800a314 <icmp_input+0x90>
        pbuf_free(p);
 800a34a:	4620      	mov	r0, r4
 800a34c:	f005 f818 	bl	800f380 <pbuf_free>
        p = r;
 800a350:	4634      	mov	r4, r6
      if (pbuf_add_header(p, hlen)) {
 800a352:	4629      	mov	r1, r5
 800a354:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800a356:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800a358:	f004 ffd8 	bl	800f30c <pbuf_add_header>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d1b8      	bne.n	800a2d2 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800a360:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 800a362:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a366:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a368:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a36c:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a36e:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a370:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 800a372:	70b0      	strb	r0, [r6, #2]
 800a374:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a376:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800a378:	7290      	strb	r0, [r2, #10]
 800a37a:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a37c:	2201      	movs	r2, #1
 800a37e:	e9cd 0200 	strd	r0, r2, [sp]
 800a382:	490d      	ldr	r1, [pc, #52]	; (800a3b8 <icmp_input+0x134>)
 800a384:	9702      	str	r7, [sp, #8]
 800a386:	4602      	mov	r2, r0
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 f9c1 	bl	800a710 <ip4_output_if>
  pbuf_free(p);
 800a38e:	e7a0      	b.n	800a2d2 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a390:	4620      	mov	r0, r4
 800a392:	f004 ffc1 	bl	800f318 <pbuf_remove_header>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0db      	beq.n	800a352 <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a39a:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <icmp_input+0x128>)
 800a39c:	4907      	ldr	r1, [pc, #28]	; (800a3bc <icmp_input+0x138>)
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <icmp_input+0x130>)
 800a3a0:	22c7      	movs	r2, #199	; 0xc7
 800a3a2:	f012 fbc1 	bl	801cb28 <iprintf>
          goto icmperr;
 800a3a6:	e794      	b.n	800a2d2 <icmp_input+0x4e>
 800a3a8:	2000f4b8 	.word	0x2000f4b8
 800a3ac:	0802c45c 	.word	0x0802c45c
 800a3b0:	0802c4f6 	.word	0x0802c4f6
 800a3b4:	0802aecf 	.word	0x0802aecf
 800a3b8:	2000f4e4 	.word	0x2000f4e4
 800a3bc:	0802c52b 	.word	0x0802c52b

0800a3c0 <icmp_dest_unreach>:
{
 800a3c0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800a3c2:	3004      	adds	r0, #4
 800a3c4:	2103      	movs	r1, #3
 800a3c6:	f7ff bf15 	b.w	800a1f4 <icmp_send_response.isra.0>

0800a3ca <icmp_time_exceeded>:
{
 800a3ca:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800a3cc:	3004      	adds	r0, #4
 800a3ce:	210b      	movs	r1, #11
 800a3d0:	f7ff bf10 	b.w	800a1f4 <icmp_send_response.isra.0>

0800a3d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800a3d4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a3d6:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800a3da:	f013 0301 	ands.w	r3, r3, #1
{
 800a3de:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a3e0:	d00b      	beq.n	800a3fa <ip4_input_accept+0x26>
 800a3e2:	6843      	ldr	r3, [r0, #4]
 800a3e4:	b14b      	cbz	r3, 800a3fa <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a3e6:	4a07      	ldr	r2, [pc, #28]	; (800a404 <ip4_input_accept+0x30>)
 800a3e8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a3ea:	4283      	cmp	r3, r0
 800a3ec:	d007      	beq.n	800a3fe <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a3ee:	f000 f9a0 	bl	800a732 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a3f2:	3800      	subs	r0, #0
 800a3f4:	bf18      	it	ne
 800a3f6:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800a3f8:	bd08      	pop	{r3, pc}
  return 0;
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	e7fc      	b.n	800a3f8 <ip4_input_accept+0x24>
      return 1;
 800a3fe:	2001      	movs	r0, #1
 800a400:	e7fa      	b.n	800a3f8 <ip4_input_accept+0x24>
 800a402:	bf00      	nop
 800a404:	2000f4b8 	.word	0x2000f4b8

0800a408 <ip4_route>:
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800a408:	6803      	ldr	r3, [r0, #0]
 800a40a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a40e:	2ae0      	cmp	r2, #224	; 0xe0
{
 800a410:	b510      	push	{r4, lr}
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800a412:	d102      	bne.n	800a41a <ip4_route+0x12>
 800a414:	4a14      	ldr	r2, [pc, #80]	; (800a468 <ip4_route+0x60>)
 800a416:	6810      	ldr	r0, [r2, #0]
 800a418:	b988      	cbnz	r0, 800a43e <ip4_route+0x36>
  NETIF_FOREACH(netif) {
 800a41a:	4a14      	ldr	r2, [pc, #80]	; (800a46c <ip4_route+0x64>)
 800a41c:	6810      	ldr	r0, [r2, #0]
 800a41e:	b978      	cbnz	r0, 800a440 <ip4_route+0x38>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a420:	4a13      	ldr	r2, [pc, #76]	; (800a470 <ip4_route+0x68>)
 800a422:	6812      	ldr	r2, [r2, #0]
 800a424:	b15a      	cbz	r2, 800a43e <ip4_route+0x36>
 800a426:	f892 10db 	ldrb.w	r1, [r2, #219]	; 0xdb
 800a42a:	f001 0105 	and.w	r1, r1, #5
 800a42e:	2905      	cmp	r1, #5
 800a430:	d105      	bne.n	800a43e <ip4_route+0x36>
 800a432:	6851      	ldr	r1, [r2, #4]
 800a434:	b119      	cbz	r1, 800a43e <ip4_route+0x36>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b7f      	cmp	r3, #127	; 0x7f
 800a43a:	bf18      	it	ne
 800a43c:	4610      	movne	r0, r2
}
 800a43e:	bd10      	pop	{r4, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a440:	f890 10db 	ldrb.w	r1, [r0, #219]	; 0xdb
 800a444:	07ca      	lsls	r2, r1, #31
 800a446:	d50c      	bpl.n	800a462 <ip4_route+0x5a>
 800a448:	074c      	lsls	r4, r1, #29
 800a44a:	d50a      	bpl.n	800a462 <ip4_route+0x5a>
 800a44c:	6842      	ldr	r2, [r0, #4]
 800a44e:	b142      	cbz	r2, 800a462 <ip4_route+0x5a>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a450:	69c4      	ldr	r4, [r0, #28]
 800a452:	405a      	eors	r2, r3
 800a454:	4222      	tst	r2, r4
 800a456:	d0f2      	beq.n	800a43e <ip4_route+0x36>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a458:	078a      	lsls	r2, r1, #30
 800a45a:	d402      	bmi.n	800a462 <ip4_route+0x5a>
 800a45c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a45e:	4293      	cmp	r3, r2
 800a460:	d0ed      	beq.n	800a43e <ip4_route+0x36>
  NETIF_FOREACH(netif) {
 800a462:	6800      	ldr	r0, [r0, #0]
 800a464:	e7db      	b.n	800a41e <ip4_route+0x16>
 800a466:	bf00      	nop
 800a468:	20006a80 	.word	0x20006a80
 800a46c:	20016108 	.word	0x20016108
 800a470:	2001610c 	.word	0x2001610c

0800a474 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a478:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800a47c:	f898 4000 	ldrb.w	r4, [r8]
 800a480:	0923      	lsrs	r3, r4, #4
 800a482:	2b04      	cmp	r3, #4
{
 800a484:	4605      	mov	r5, r0
 800a486:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 800a488:	d005      	beq.n	800a496 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a48a:	4628      	mov	r0, r5
 800a48c:	f004 ff78 	bl	800f380 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a490:	2000      	movs	r0, #0
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a496:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800a49a:	f003 fe01 	bl	800e0a0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800a49e:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a4a0:	f004 040f 	and.w	r4, r4, #15
 800a4a4:	ea4f 0984 	mov.w	r9, r4, lsl #2
  if (iphdr_len < p->tot_len) {
 800a4a8:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a4aa:	464c      	mov	r4, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a4ac:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 800a4ae:	d903      	bls.n	800a4b8 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f005 f848 	bl	800f548 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a4b8:	896b      	ldrh	r3, [r5, #10]
 800a4ba:	42a3      	cmp	r3, r4
 800a4bc:	d3e5      	bcc.n	800a48a <ip4_input+0x16>
 800a4be:	892b      	ldrh	r3, [r5, #8]
 800a4c0:	42bb      	cmp	r3, r7
 800a4c2:	d3e2      	bcc.n	800a48a <ip4_input+0x16>
 800a4c4:	2c13      	cmp	r4, #19
 800a4c6:	d9e0      	bls.n	800a48a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a4c8:	4c52      	ldr	r4, [pc, #328]	; (800a614 <ip4_input+0x1a0>)
 800a4ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a4ce:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800a4d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a4da:	6323      	str	r3, [r4, #48]	; 0x30
 800a4dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a4e4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a4e8:	6161      	str	r1, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4ea:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a4ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a4f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a4f4:	61a3      	str	r3, [r4, #24]
 800a4f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4fa:	d143      	bne.n	800a584 <ip4_input+0x110>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a4fc:	f896 30db 	ldrb.w	r3, [r6, #219]	; 0xdb
 800a500:	07db      	lsls	r3, r3, #31
 800a502:	d405      	bmi.n	800a510 <ip4_input+0x9c>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800a504:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a508:	2b11      	cmp	r3, #17
 800a50a:	d054      	beq.n	800a5b6 <ip4_input+0x142>
 800a50c:	2700      	movs	r7, #0
 800a50e:	e003      	b.n	800a518 <ip4_input+0xa4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a510:	6873      	ldr	r3, [r6, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f6      	beq.n	800a504 <ip4_input+0x90>
 800a516:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800a518:	6960      	ldr	r0, [r4, #20]
 800a51a:	b148      	cbz	r0, 800a530 <ip4_input+0xbc>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a51c:	4631      	mov	r1, r6
 800a51e:	f000 f908 	bl	800a732 <ip4_addr_isbroadcast_u32>
 800a522:	2800      	cmp	r0, #0
 800a524:	d1b1      	bne.n	800a48a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a526:	6963      	ldr	r3, [r4, #20]
 800a528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a52c:	2be0      	cmp	r3, #224	; 0xe0
 800a52e:	d0ac      	beq.n	800a48a <ip4_input+0x16>
  if (netif == NULL) {
 800a530:	2f00      	cmp	r7, #0
 800a532:	d0aa      	beq.n	800a48a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a534:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a538:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a53c:	b13b      	cbz	r3, 800a54e <ip4_input+0xda>
    p = ip4_reass(p);
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 fb1a 	bl	800ab78 <ip4_reass>
    if (p == NULL) {
 800a544:	4605      	mov	r5, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	d0a2      	beq.n	800a490 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 800a54a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800a54e:	f8c4 8008 	str.w	r8, [r4, #8]
  ip_data.current_input_netif = inp;
 800a552:	e9c4 7600 	strd	r7, r6, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a556:	f898 3000 	ldrb.w	r3, [r8]
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	009b      	lsls	r3, r3, #2
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a560:	4649      	mov	r1, r9
 800a562:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a564:	8223      	strh	r3, [r4, #16]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a566:	f004 fed7 	bl	800f318 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800a56a:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d035      	beq.n	800a5de <ip4_input+0x16a>
 800a572:	2b11      	cmp	r3, #17
 800a574:	d027      	beq.n	800a5c6 <ip4_input+0x152>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d136      	bne.n	800a5e8 <ip4_input+0x174>
        icmp_input(p, inp);
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	f7ff fe81 	bl	800a284 <icmp_input>
        break;
 800a582:	e024      	b.n	800a5ce <ip4_input+0x15a>
    if (ip4_input_accept(inp)) {
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff ff25 	bl	800a3d4 <ip4_input_accept>
 800a58a:	b988      	cbnz	r0, 800a5b0 <ip4_input+0x13c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a58c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a590:	2b7f      	cmp	r3, #127	; 0x7f
 800a592:	d0b7      	beq.n	800a504 <ip4_input+0x90>
        NETIF_FOREACH(netif) {
 800a594:	4b20      	ldr	r3, [pc, #128]	; (800a618 <ip4_input+0x1a4>)
 800a596:	681f      	ldr	r7, [r3, #0]
 800a598:	2f00      	cmp	r7, #0
 800a59a:	d0b3      	beq.n	800a504 <ip4_input+0x90>
          if (netif == inp) {
 800a59c:	42b7      	cmp	r7, r6
 800a59e:	d101      	bne.n	800a5a4 <ip4_input+0x130>
        NETIF_FOREACH(netif) {
 800a5a0:	683f      	ldr	r7, [r7, #0]
 800a5a2:	e7f9      	b.n	800a598 <ip4_input+0x124>
          if (ip4_input_accept(netif)) {
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7ff ff15 	bl	800a3d4 <ip4_input_accept>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0f8      	beq.n	800a5a0 <ip4_input+0x12c>
 800a5ae:	e7b3      	b.n	800a518 <ip4_input+0xa4>
  if (netif == NULL) {
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	d1b0      	bne.n	800a516 <ip4_input+0xa2>
 800a5b4:	e7a6      	b.n	800a504 <ip4_input+0x90>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800a5b6:	eb08 0309 	add.w	r3, r8, r9
 800a5ba:	885b      	ldrh	r3, [r3, #2]
 800a5bc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800a5c0:	d1a4      	bne.n	800a50c <ip4_input+0x98>
 800a5c2:	4637      	mov	r7, r6
 800a5c4:	e7b4      	b.n	800a530 <ip4_input+0xbc>
        udp_input(p, inp);
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f009 fa3b 	bl	8013a44 <udp_input>
  ip_data.current_netif = NULL;
 800a5ce:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800a5d0:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 800a5d4:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a5d6:	8223      	strh	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_src_addr());
 800a5d8:	6163      	str	r3, [r4, #20]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a5da:	62e3      	str	r3, [r4, #44]	; 0x2c
  return ERR_OK;
 800a5dc:	e758      	b.n	800a490 <ip4_input+0x1c>
        tcp_input(p, inp);
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f007 f899 	bl	8011718 <tcp_input>
        break;
 800a5e6:	e7f2      	b.n	800a5ce <ip4_input+0x15a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a5e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f000 f8a1 	bl	800a732 <ip4_addr_isbroadcast_u32>
 800a5f0:	b960      	cbnz	r0, 800a60c <ip4_input+0x198>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a5f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a5f8:	2be0      	cmp	r3, #224	; 0xe0
 800a5fa:	d007      	beq.n	800a60c <ip4_input+0x198>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4628      	mov	r0, r5
 800a600:	f004 feb6 	bl	800f370 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a604:	2102      	movs	r1, #2
 800a606:	4628      	mov	r0, r5
 800a608:	f7ff feda 	bl	800a3c0 <icmp_dest_unreach>
        pbuf_free(p);
 800a60c:	4628      	mov	r0, r5
 800a60e:	f004 feb7 	bl	800f380 <pbuf_free>
        break;
 800a612:	e7dc      	b.n	800a5ce <ip4_input+0x15a>
 800a614:	2000f4b8 	.word	0x2000f4b8
 800a618:	20016108 	.word	0x20016108

0800a61c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a61c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a622:	7b83      	ldrb	r3, [r0, #14]
{
 800a624:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a628:	2b01      	cmp	r3, #1
{
 800a62a:	4604      	mov	r4, r0
 800a62c:	4689      	mov	r9, r1
 800a62e:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a630:	d006      	beq.n	800a640 <ip4_output_if_src+0x24>
 800a632:	4b31      	ldr	r3, [pc, #196]	; (800a6f8 <ip4_output_if_src+0xdc>)
 800a634:	4931      	ldr	r1, [pc, #196]	; (800a6fc <ip4_output_if_src+0xe0>)
 800a636:	4832      	ldr	r0, [pc, #200]	; (800a700 <ip4_output_if_src+0xe4>)
 800a638:	f44f 7255 	mov.w	r2, #852	; 0x354
 800a63c:	f012 fa74 	bl	801cb28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a640:	2e00      	cmp	r6, #0
 800a642:	d049      	beq.n	800a6d8 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a644:	2114      	movs	r1, #20
 800a646:	4620      	mov	r0, r4
 800a648:	f004 fe60 	bl	800f30c <pbuf_add_header>
 800a64c:	b120      	cbz	r0, 800a658 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a64e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800a652:	b002      	add	sp, #8
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a658:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800a65a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a65c:	2b13      	cmp	r3, #19
 800a65e:	d806      	bhi.n	800a66e <ip4_output_if_src+0x52>
 800a660:	4b25      	ldr	r3, [pc, #148]	; (800a6f8 <ip4_output_if_src+0xdc>)
 800a662:	4928      	ldr	r1, [pc, #160]	; (800a704 <ip4_output_if_src+0xe8>)
 800a664:	4826      	ldr	r0, [pc, #152]	; (800a700 <ip4_output_if_src+0xe4>)
 800a666:	f44f 7262 	mov.w	r2, #904	; 0x388
 800a66a:	f012 fa5d 	bl	801cb28 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 800a66e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800a672:	722f      	strb	r7, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a674:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800a676:	6833      	ldr	r3, [r6, #0]
 800a678:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a67a:	2345      	movs	r3, #69	; 0x45
 800a67c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800a67e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a682:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a684:	8920      	ldrh	r0, [r4, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a686:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a70c <ip4_output_if_src+0xf0>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a68a:	f003 fd09 	bl	800e0a0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800a68e:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a690:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800a692:	71af      	strb	r7, [r5, #6]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a694:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    IPH_OFFSET_SET(iphdr, 0);
 800a698:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a69a:	f003 fd01 	bl	800e0a0 <lwip_htons>
    ++ip_id;
 800a69e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a6a2:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	f8aa 3004 	strh.w	r3, [sl, #4]
    if (src == NULL) {
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	d110      	bne.n	800a6d2 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <ip4_output_if_src+0xec>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800a6b6:	72af      	strb	r7, [r5, #10]
 800a6b8:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a6ba:	f8b8 30d0 	ldrh.w	r3, [r8, #208]	; 0xd0
 800a6be:	b19b      	cbz	r3, 800a6e8 <ip4_output_if_src+0xcc>
 800a6c0:	8922      	ldrh	r2, [r4, #8]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d910      	bls.n	800a6e8 <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fc26 	bl	800af1c <ip4_frag>
 800a6d0:	e7bf      	b.n	800a652 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 800a6d2:	f8d9 3000 	ldr.w	r3, [r9]
 800a6d6:	e7ed      	b.n	800a6b4 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 800a6d8:	8963      	ldrh	r3, [r4, #10]
 800a6da:	2b13      	cmp	r3, #19
 800a6dc:	d9b7      	bls.n	800a64e <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a6de:	6863      	ldr	r3, [r4, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800a6e4:	ae01      	add	r6, sp, #4
 800a6e6:	e7e8      	b.n	800a6ba <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 800a6e8:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4798      	blx	r3
 800a6f4:	e7ad      	b.n	800a652 <ip4_output_if_src+0x36>
 800a6f6:	bf00      	nop
 800a6f8:	0802c55d 	.word	0x0802c55d
 800a6fc:	0802c5ca 	.word	0x0802c5ca
 800a700:	0802aecf 	.word	0x0802aecf
 800a704:	0802c5d6 	.word	0x0802c5d6
 800a708:	0801fc2c 	.word	0x0801fc2c
 800a70c:	20006a80 	.word	0x20006a80

0800a710 <ip4_output_if>:
{
 800a710:	b4f0      	push	{r4, r5, r6, r7}
 800a712:	9c06      	ldr	r4, [sp, #24]
 800a714:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a718:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a71c:	b11a      	cbz	r2, 800a726 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800a71e:	b109      	cbz	r1, 800a724 <ip4_output_if+0x14>
 800a720:	680f      	ldr	r7, [r1, #0]
 800a722:	b907      	cbnz	r7, 800a726 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800a724:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a726:	e9cd 6405 	strd	r6, r4, [sp, #20]
 800a72a:	9504      	str	r5, [sp, #16]
}
 800a72c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a72e:	f7ff bf75 	b.w	800a61c <ip4_output_if_src>

0800a732 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a732:	1e43      	subs	r3, r0, #1
 800a734:	3303      	adds	r3, #3
{
 800a736:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800a738:	d812      	bhi.n	800a760 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a73a:	f891 30db 	ldrb.w	r3, [r1, #219]	; 0xdb
 800a73e:	f013 0002 	ands.w	r0, r3, #2
 800a742:	d010      	beq.n	800a766 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a744:	684b      	ldr	r3, [r1, #4]
 800a746:	4293      	cmp	r3, r2
 800a748:	d00c      	beq.n	800a764 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a74a:	69c8      	ldr	r0, [r1, #28]
 800a74c:	4053      	eors	r3, r2
 800a74e:	4203      	tst	r3, r0
 800a750:	d108      	bne.n	800a764 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a752:	43c3      	mvns	r3, r0
 800a754:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800a758:	1ac3      	subs	r3, r0, r3
 800a75a:	4258      	negs	r0, r3
 800a75c:	4158      	adcs	r0, r3
 800a75e:	4770      	bx	lr
    return 1;
 800a760:	2001      	movs	r0, #1
 800a762:	4770      	bx	lr
    return 0;
 800a764:	2000      	movs	r0, #0
  }
}
 800a766:	4770      	bx	lr

0800a768 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800a768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800a76c:	4f48      	ldr	r7, [pc, #288]	; (800a890 <ip4addr_aton+0x128>)
  c = *cp;
 800a76e:	7802      	ldrb	r2, [r0, #0]
{
 800a770:	b085      	sub	sp, #20
  u32_t *pp = parts;
 800a772:	466e      	mov	r6, sp
{
 800a774:	460d      	mov	r5, r1
  c = *cp;
 800a776:	2304      	movs	r3, #4
 800a778:	46b4      	mov	ip, r6
 800a77a:	46be      	mov	lr, r7
    if (!lwip_isdigit(c)) {
 800a77c:	5dd1      	ldrb	r1, [r2, r7]
 800a77e:	f011 0104 	ands.w	r1, r1, #4
 800a782:	f000 8081 	beq.w	800a888 <ip4addr_aton+0x120>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
 800a786:	2a30      	cmp	r2, #48	; 0x30
 800a788:	d11a      	bne.n	800a7c0 <ip4addr_aton+0x58>
      c = *++cp;
 800a78a:	7842      	ldrb	r2, [r0, #1]
      if (c == 'x' || c == 'X') {
 800a78c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 800a790:	2958      	cmp	r1, #88	; 0x58
        base = 16;
        c = *++cp;
 800a792:	bf0d      	iteet	eq
 800a794:	7882      	ldrbeq	r2, [r0, #2]
      c = *++cp;
 800a796:	3001      	addne	r0, #1
      } else {
        base = 8;
 800a798:	f04f 0908 	movne.w	r9, #8
        c = *++cp;
 800a79c:	3002      	addeq	r0, #2
        base = 16;
 800a79e:	bf08      	it	eq
 800a7a0:	f04f 0910 	moveq.w	r9, #16
 800a7a4:	4680      	mov	r8, r0
    base = 10;
 800a7a6:	2400      	movs	r4, #0
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800a7a8:	f81e 1002 	ldrb.w	r1, [lr, r2]
 800a7ac:	0748      	lsls	r0, r1, #29
 800a7ae:	d50a      	bpl.n	800a7c6 <ip4addr_aton+0x5e>
        val = (val * base) + (u32_t)(c - '0');
 800a7b0:	fb04 2409 	mla	r4, r4, r9, r2
 800a7b4:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
      } else if (base == 16 && lwip_isxdigit(c)) {
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
        c = *++cp;
 800a7b6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a7ba:	f108 0801 	add.w	r8, r8, #1
 800a7be:	e7f3      	b.n	800a7a8 <ip4addr_aton+0x40>
    base = 10;
 800a7c0:	f04f 090a 	mov.w	r9, #10
 800a7c4:	e7ee      	b.n	800a7a4 <ip4addr_aton+0x3c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800a7c6:	f1b9 0f10 	cmp.w	r9, #16
 800a7ca:	d10e      	bne.n	800a7ea <ip4addr_aton+0x82>
 800a7cc:	f011 0f44 	tst.w	r1, #68	; 0x44
 800a7d0:	d00b      	beq.n	800a7ea <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800a7d2:	f001 0103 	and.w	r1, r1, #3
 800a7d6:	2902      	cmp	r1, #2
 800a7d8:	f102 020a 	add.w	r2, r2, #10
 800a7dc:	bf0c      	ite	eq
 800a7de:	2161      	moveq	r1, #97	; 0x61
 800a7e0:	2141      	movne	r1, #65	; 0x41
 800a7e2:	1a52      	subs	r2, r2, r1
 800a7e4:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
 800a7e8:	e7e5      	b.n	800a7b6 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 800a7ea:	2a2e      	cmp	r2, #46	; 0x2e
 800a7ec:	d108      	bne.n	800a800 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	d04a      	beq.n	800a888 <ip4addr_aton+0x120>
        return 0;
      }
      *pp++ = val;
 800a7f2:	f846 4b04 	str.w	r4, [r6], #4
      c = *++cp;
 800a7f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a7fa:	f108 0001 	add.w	r0, r8, #1
    if (!lwip_isdigit(c)) {
 800a7fe:	e7bd      	b.n	800a77c <ip4addr_aton+0x14>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800a800:	b112      	cbz	r2, 800a808 <ip4addr_aton+0xa0>
 800a802:	f011 0008 	ands.w	r0, r1, #8
 800a806:	d040      	beq.n	800a88a <ip4addr_aton+0x122>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800a808:	eba6 000c 	sub.w	r0, r6, ip
 800a80c:	1080      	asrs	r0, r0, #2
 800a80e:	3001      	adds	r0, #1
 800a810:	2804      	cmp	r0, #4
 800a812:	d832      	bhi.n	800a87a <ip4addr_aton+0x112>
 800a814:	e8df f000 	tbb	[pc, r0]
 800a818:	12030b39 	.word	0x12030b39
 800a81c:	20          	.byte	0x20
 800a81d:	00          	.byte	0x00

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800a81e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 800a822:	d231      	bcs.n	800a888 <ip4addr_aton+0x120>
        return 0;
      }
      if (parts[0] > 0xff) {
 800a824:	9b00      	ldr	r3, [sp, #0]
 800a826:	2bff      	cmp	r3, #255	; 0xff
 800a828:	d82e      	bhi.n	800a888 <ip4addr_aton+0x120>
        return 0;
      }
      val |= parts[0] << 24;
 800a82a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
    default:
      LWIP_ASSERT("unhandled", 0);
      break;
  }
  if (addr) {
 800a82e:	b11d      	cbz	r5, 800a838 <ip4addr_aton+0xd0>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800a830:	4620      	mov	r0, r4
 800a832:	f003 fc38 	bl	800e0a6 <lwip_htonl>
 800a836:	6028      	str	r0, [r5, #0]
  }
  return 1;
 800a838:	2001      	movs	r0, #1
 800a83a:	e026      	b.n	800a88a <ip4addr_aton+0x122>
      if (val > 0xffff) {
 800a83c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800a840:	d222      	bcs.n	800a888 <ip4addr_aton+0x120>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800a842:	9a00      	ldr	r2, [sp, #0]
 800a844:	2aff      	cmp	r2, #255	; 0xff
 800a846:	d81f      	bhi.n	800a888 <ip4addr_aton+0x120>
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	2bff      	cmp	r3, #255	; 0xff
 800a84c:	d81c      	bhi.n	800a888 <ip4addr_aton+0x120>
      val |= (parts[0] << 24) | (parts[1] << 16);
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800a854:	431c      	orrs	r4, r3
      break;
 800a856:	e7ea      	b.n	800a82e <ip4addr_aton+0xc6>
      if (val > 0xff) {
 800a858:	2cff      	cmp	r4, #255	; 0xff
 800a85a:	d815      	bhi.n	800a888 <ip4addr_aton+0x120>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800a85c:	9900      	ldr	r1, [sp, #0]
 800a85e:	29ff      	cmp	r1, #255	; 0xff
 800a860:	d812      	bhi.n	800a888 <ip4addr_aton+0x120>
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	2bff      	cmp	r3, #255	; 0xff
 800a866:	d80f      	bhi.n	800a888 <ip4addr_aton+0x120>
 800a868:	9a02      	ldr	r2, [sp, #8]
 800a86a:	2aff      	cmp	r2, #255	; 0xff
 800a86c:	d80c      	bhi.n	800a888 <ip4addr_aton+0x120>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800a86e:	041b      	lsls	r3, r3, #16
 800a870:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a874:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a878:	e7ec      	b.n	800a854 <ip4addr_aton+0xec>
      LWIP_ASSERT("unhandled", 0);
 800a87a:	4b06      	ldr	r3, [pc, #24]	; (800a894 <ip4addr_aton+0x12c>)
 800a87c:	4906      	ldr	r1, [pc, #24]	; (800a898 <ip4addr_aton+0x130>)
 800a87e:	4807      	ldr	r0, [pc, #28]	; (800a89c <ip4addr_aton+0x134>)
 800a880:	22f9      	movs	r2, #249	; 0xf9
 800a882:	f012 f951 	bl	801cb28 <iprintf>
      break;
 800a886:	e7d2      	b.n	800a82e <ip4addr_aton+0xc6>
      return 0;
 800a888:	2000      	movs	r0, #0
}
 800a88a:	b005      	add	sp, #20
 800a88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a890:	08031a55 	.word	0x08031a55
 800a894:	0802c603 	.word	0x0802c603
 800a898:	0802b71f 	.word	0x0802b71f
 800a89c:	0802aecf 	.word	0x0802aecf

0800a8a0 <ipaddr_addr>:
{
 800a8a0:	b507      	push	{r0, r1, r2, lr}
  if (ip4addr_aton(cp, &val)) {
 800a8a2:	a901      	add	r1, sp, #4
 800a8a4:	f7ff ff60 	bl	800a768 <ip4addr_aton>
 800a8a8:	b118      	cbz	r0, 800a8b2 <ipaddr_addr+0x12>
    return ip4_addr_get_u32(&val);
 800a8aa:	9801      	ldr	r0, [sp, #4]
}
 800a8ac:	b003      	add	sp, #12
 800a8ae:	f85d fb04 	ldr.w	pc, [sp], #4
  return (IPADDR_NONE);
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	e7f9      	b.n	800a8ac <ipaddr_addr+0xc>

0800a8b8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800a8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 800a8bc:	6803      	ldr	r3, [r0, #0]
 800a8be:	9301      	str	r3, [sp, #4]

  rp = buf;
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 800a8c0:	f10d 0c04 	add.w	ip, sp, #4
  rp = buf;
 800a8c4:	460d      	mov	r5, r1
  s_addr = ip4_addr_get_u32(addr);
 800a8c6:	2004      	movs	r0, #4
  int len = 0;
 800a8c8:	2600      	movs	r6, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 800a8ca:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 800a8ce:	f04f 082e 	mov.w	r8, #46	; 0x2e
 800a8d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
    i = 0;
 800a8d6:	2700      	movs	r7, #0
      rem = *ap % (u8_t)10;
 800a8d8:	fbb4 f3fe 	udiv	r3, r4, lr
 800a8dc:	46a2      	mov	sl, r4
 800a8de:	fb0e 4913 	mls	r9, lr, r3, r4
      inv[i++] = (char)('0' + rem);
 800a8e2:	f10d 0b08 	add.w	fp, sp, #8
      *ap /= (u8_t)10;
 800a8e6:	b2dc      	uxtb	r4, r3
      inv[i++] = (char)('0' + rem);
 800a8e8:	463b      	mov	r3, r7
 800a8ea:	449b      	add	fp, r3
 800a8ec:	3701      	adds	r7, #1
 800a8ee:	f109 0930 	add.w	r9, r9, #48	; 0x30
    } while (*ap);
 800a8f2:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 800a8f6:	b2ff      	uxtb	r7, r7
 800a8f8:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 800a8fc:	d8ec      	bhi.n	800a8d8 <ip4addr_ntoa_r+0x20>
 800a8fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a902:	4637      	mov	r7, r6
 800a904:	462c      	mov	r4, r5
    while (i--) {
 800a906:	2bff      	cmp	r3, #255	; 0xff
 800a908:	f106 0601 	add.w	r6, r6, #1
 800a90c:	d10d      	bne.n	800a92a <ip4addr_ntoa_r+0x72>
    if (len++ >= buflen) {
 800a90e:	4297      	cmp	r7, r2
 800a910:	da18      	bge.n	800a944 <ip4addr_ntoa_r+0x8c>
    *rp++ = '.';
 800a912:	4625      	mov	r5, r4
 800a914:	3801      	subs	r0, #1
  for (n = 0; n < 4; n++) {
 800a916:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    *rp++ = '.';
 800a91a:	f805 8b01 	strb.w	r8, [r5], #1
  for (n = 0; n < 4; n++) {
 800a91e:	d1d8      	bne.n	800a8d2 <ip4addr_ntoa_r+0x1a>
    ap++;
  }
  *--rp = 0;
 800a920:	7020      	strb	r0, [r4, #0]
  return buf;
 800a922:	4608      	mov	r0, r1
}
 800a924:	b003      	add	sp, #12
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 800a92a:	1e5d      	subs	r5, r3, #1
 800a92c:	4297      	cmp	r7, r2
 800a92e:	b2ed      	uxtb	r5, r5
 800a930:	da08      	bge.n	800a944 <ip4addr_ntoa_r+0x8c>
      *rp++ = inv[i];
 800a932:	af02      	add	r7, sp, #8
 800a934:	443b      	add	r3, r7
 800a936:	4637      	mov	r7, r6
 800a938:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800a93c:	f804 3b01 	strb.w	r3, [r4], #1
 800a940:	462b      	mov	r3, r5
 800a942:	e7e0      	b.n	800a906 <ip4addr_ntoa_r+0x4e>
        return NULL;
 800a944:	2000      	movs	r0, #0
 800a946:	e7ed      	b.n	800a924 <ip4addr_ntoa_r+0x6c>

0800a948 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a948:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a94a:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <ip_reass_dequeue_datagram+0x34>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	4282      	cmp	r2, r0
{
 800a950:	4604      	mov	r4, r0
 800a952:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800a954:	d107      	bne.n	800a966 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a956:	6802      	ldr	r2, [r0, #0]
 800a958:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a95a:	4621      	mov	r1, r4
 800a95c:	2004      	movs	r0, #4
}
 800a95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800a962:	f004 b99f 	b.w	800eca4 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a966:	b931      	cbnz	r1, 800a976 <ip_reass_dequeue_datagram+0x2e>
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <ip_reass_dequeue_datagram+0x38>)
 800a96a:	4906      	ldr	r1, [pc, #24]	; (800a984 <ip_reass_dequeue_datagram+0x3c>)
 800a96c:	4806      	ldr	r0, [pc, #24]	; (800a988 <ip_reass_dequeue_datagram+0x40>)
 800a96e:	f240 1245 	movw	r2, #325	; 0x145
 800a972:	f012 f8d9 	bl	801cb28 <iprintf>
    prev->next = ipr->next;
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	e7ee      	b.n	800a95a <ip_reass_dequeue_datagram+0x12>
 800a97c:	20006a88 	.word	0x20006a88
 800a980:	0802c675 	.word	0x0802c675
 800a984:	0802c6e7 	.word	0x0802c6e7
 800a988:	0802aecf 	.word	0x0802aecf

0800a98c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a98c:	4281      	cmp	r1, r0
{
 800a98e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a996:	d105      	bne.n	800a9a4 <ip_reass_free_complete_datagram+0x18>
 800a998:	4b2f      	ldr	r3, [pc, #188]	; (800aa58 <ip_reass_free_complete_datagram+0xcc>)
 800a99a:	4930      	ldr	r1, [pc, #192]	; (800aa5c <ip_reass_free_complete_datagram+0xd0>)
 800a99c:	4830      	ldr	r0, [pc, #192]	; (800aa60 <ip_reass_free_complete_datagram+0xd4>)
 800a99e:	22ab      	movs	r2, #171	; 0xab
 800a9a0:	f012 f8c2 	bl	801cb28 <iprintf>
  if (prev != NULL) {
 800a9a4:	b146      	cbz	r6, 800a9b8 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a9a6:	6833      	ldr	r3, [r6, #0]
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	d005      	beq.n	800a9b8 <ip_reass_free_complete_datagram+0x2c>
 800a9ac:	4b2a      	ldr	r3, [pc, #168]	; (800aa58 <ip_reass_free_complete_datagram+0xcc>)
 800a9ae:	492d      	ldr	r1, [pc, #180]	; (800aa64 <ip_reass_free_complete_datagram+0xd8>)
 800a9b0:	482b      	ldr	r0, [pc, #172]	; (800aa60 <ip_reass_free_complete_datagram+0xd4>)
 800a9b2:	22ad      	movs	r2, #173	; 0xad
 800a9b4:	f012 f8b8 	bl	801cb28 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a9b8:	6867      	ldr	r7, [r4, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 800a9bc:	889a      	ldrh	r2, [r3, #4]
 800a9be:	bb92      	cbnz	r2, 800aa26 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a9c4:	f104 011c 	add.w	r1, r4, #28
 800a9c8:	f104 0208 	add.w	r2, r4, #8
 800a9cc:	f852 0b04 	ldr.w	r0, [r2], #4
 800a9d0:	f843 0b04 	str.w	r0, [r3], #4
 800a9d4:	428a      	cmp	r2, r1
 800a9d6:	d1f9      	bne.n	800a9cc <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a9d8:	2101      	movs	r1, #1
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f7ff fcf5 	bl	800a3ca <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f004 fe21 	bl	800f628 <pbuf_clen>
 800a9e6:	4605      	mov	r5, r0
    pbuf_free(p);
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f004 fcc9 	bl	800f380 <pbuf_free>
  p = ipr->p;
 800a9ee:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a9f0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800aa58 <ip_reass_free_complete_datagram+0xcc>
 800a9f4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800aa70 <ip_reass_free_complete_datagram+0xe4>
 800a9f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aa60 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800a9fc:	b9af      	cbnz	r7, 800aa2a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800a9fe:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800aa00:	4c19      	ldr	r4, [pc, #100]	; (800aa68 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800aa02:	4631      	mov	r1, r6
 800aa04:	f7ff ffa0 	bl	800a948 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800aa08:	88a3      	ldrh	r3, [r4, #4]
 800aa0a:	42ab      	cmp	r3, r5
 800aa0c:	d205      	bcs.n	800aa1a <ip_reass_free_complete_datagram+0x8e>
 800aa0e:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <ip_reass_free_complete_datagram+0xcc>)
 800aa10:	4916      	ldr	r1, [pc, #88]	; (800aa6c <ip_reass_free_complete_datagram+0xe0>)
 800aa12:	4813      	ldr	r0, [pc, #76]	; (800aa60 <ip_reass_free_complete_datagram+0xd4>)
 800aa14:	22d2      	movs	r2, #210	; 0xd2
 800aa16:	f012 f887 	bl	801cb28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800aa1a:	88a3      	ldrh	r3, [r4, #4]
 800aa1c:	1b5b      	subs	r3, r3, r5
 800aa1e:	80a3      	strh	r3, [r4, #4]
}
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800aa26:	2500      	movs	r5, #0
 800aa28:	e7e1      	b.n	800a9ee <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800aa2a:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 800aa2c:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 800aa2e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800aa32:	f004 fdf9 	bl	800f628 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800aa36:	4405      	add	r5, r0
 800aa38:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800aa3c:	db05      	blt.n	800aa4a <ip_reass_free_complete_datagram+0xbe>
 800aa3e:	4643      	mov	r3, r8
 800aa40:	22cc      	movs	r2, #204	; 0xcc
 800aa42:	4649      	mov	r1, r9
 800aa44:	4650      	mov	r0, sl
 800aa46:	f012 f86f 	bl	801cb28 <iprintf>
    pbuf_free(pcur);
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f004 fc98 	bl	800f380 <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800aa50:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800aa52:	465f      	mov	r7, fp
 800aa54:	e7d2      	b.n	800a9fc <ip_reass_free_complete_datagram+0x70>
 800aa56:	bf00      	nop
 800aa58:	0802c675 	.word	0x0802c675
 800aa5c:	0802c700 	.word	0x0802c700
 800aa60:	0802aecf 	.word	0x0802aecf
 800aa64:	0802c70c 	.word	0x0802c70c
 800aa68:	20006a88 	.word	0x20006a88
 800aa6c:	0802c73b 	.word	0x0802c73b
 800aa70:	0802c71e 	.word	0x0802c71e

0800aa74 <ip_reass_remove_oldest_datagram>:
{
 800aa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800aa78:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800aae8 <ip_reass_remove_oldest_datagram+0x74>
{
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800aa80:	2600      	movs	r6, #0
    other_datagrams = 0;
 800aa82:	2400      	movs	r4, #0
    r = reassdatagrams;
 800aa84:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800aa88:	4621      	mov	r1, r4
    prev = NULL;
 800aa8a:	46a4      	mov	ip, r4
    oldest = NULL;
 800aa8c:	4620      	mov	r0, r4
    while (r != NULL) {
 800aa8e:	b953      	cbnz	r3, 800aaa6 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800aa90:	b110      	cbz	r0, 800aa98 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800aa92:	f7ff ff7b 	bl	800a98c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800aa96:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800aa98:	42be      	cmp	r6, r7
 800aa9a:	da01      	bge.n	800aaa0 <ip_reass_remove_oldest_datagram+0x2c>
 800aa9c:	2c01      	cmp	r4, #1
 800aa9e:	dcf0      	bgt.n	800aa82 <ip_reass_remove_oldest_datagram+0xe>
}
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800aaa6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800aaaa:	695a      	ldr	r2, [r3, #20]
 800aaac:	4572      	cmp	r2, lr
 800aaae:	d109      	bne.n	800aac4 <ip_reass_remove_oldest_datagram+0x50>
 800aab0:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	4572      	cmp	r2, lr
 800aab8:	d104      	bne.n	800aac4 <ip_reass_remove_oldest_datagram+0x50>
 800aaba:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800aabe:	88aa      	ldrh	r2, [r5, #4]
 800aac0:	4596      	cmp	lr, r2
 800aac2:	d008      	beq.n	800aad6 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800aac4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800aac6:	b160      	cbz	r0, 800aae2 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800aac8:	7fc2      	ldrb	r2, [r0, #31]
 800aaca:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800aace:	4596      	cmp	lr, r2
 800aad0:	bf9c      	itt	ls
 800aad2:	4661      	movls	r1, ip
 800aad4:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	2a00      	cmp	r2, #0
 800aada:	bf18      	it	ne
 800aadc:	469c      	movne	ip, r3
 800aade:	4613      	mov	r3, r2
 800aae0:	e7d5      	b.n	800aa8e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800aae2:	4661      	mov	r1, ip
 800aae4:	4618      	mov	r0, r3
 800aae6:	e7f6      	b.n	800aad6 <ip_reass_remove_oldest_datagram+0x62>
 800aae8:	20006a88 	.word	0x20006a88

0800aaec <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800aaec:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800aaee:	4604      	mov	r4, r0
 800aaf0:	b930      	cbnz	r0, 800ab00 <ip_frag_free_pbuf_custom_ref+0x14>
 800aaf2:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <ip_frag_free_pbuf_custom_ref+0x20>)
 800aaf4:	4906      	ldr	r1, [pc, #24]	; (800ab10 <ip_frag_free_pbuf_custom_ref+0x24>)
 800aaf6:	4807      	ldr	r0, [pc, #28]	; (800ab14 <ip_frag_free_pbuf_custom_ref+0x28>)
 800aaf8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800aafc:	f012 f814 	bl	801cb28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ab00:	4621      	mov	r1, r4
 800ab02:	2005      	movs	r0, #5
}
 800ab04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800ab08:	f004 b8cc 	b.w	800eca4 <memp_free>
 800ab0c:	0802c675 	.word	0x0802c675
 800ab10:	0802d4b3 	.word	0x0802d4b3
 800ab14:	0802aecf 	.word	0x0802aecf

0800ab18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ab18:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	b930      	cbnz	r0, 800ab2c <ipfrag_free_pbuf_custom+0x14>
 800ab1e:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <ipfrag_free_pbuf_custom+0x28>)
 800ab20:	4908      	ldr	r1, [pc, #32]	; (800ab44 <ipfrag_free_pbuf_custom+0x2c>)
 800ab22:	4809      	ldr	r0, [pc, #36]	; (800ab48 <ipfrag_free_pbuf_custom+0x30>)
 800ab24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ab28:	f011 fffe 	bl	801cb28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ab2c:	6960      	ldr	r0, [r4, #20]
 800ab2e:	b108      	cbz	r0, 800ab34 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800ab30:	f004 fc26 	bl	800f380 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ab34:	4620      	mov	r0, r4
}
 800ab36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800ab3a:	f7ff bfd7 	b.w	800aaec <ip_frag_free_pbuf_custom_ref>
 800ab3e:	bf00      	nop
 800ab40:	0802c675 	.word	0x0802c675
 800ab44:	0802c75d 	.word	0x0802c75d
 800ab48:	0802aecf 	.word	0x0802aecf

0800ab4c <ip_reass_tmr>:
{
 800ab4c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800ab4e:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <ip_reass_tmr+0x28>)
 800ab50:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800ab52:	2400      	movs	r4, #0
  while (r != NULL) {
 800ab54:	b900      	cbnz	r0, 800ab58 <ip_reass_tmr+0xc>
}
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800ab58:	7fc3      	ldrb	r3, [r0, #31]
 800ab5a:	6805      	ldr	r5, [r0, #0]
 800ab5c:	b123      	cbz	r3, 800ab68 <ip_reass_tmr+0x1c>
      r->timer--;
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800ab62:	4604      	mov	r4, r0
 800ab64:	4628      	mov	r0, r5
 800ab66:	e7f5      	b.n	800ab54 <ip_reass_tmr+0x8>
 800ab68:	4621      	mov	r1, r4
 800ab6a:	f7ff ff0f 	bl	800a98c <ip_reass_free_complete_datagram>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	e7f7      	b.n	800ab62 <ip_reass_tmr+0x16>
 800ab72:	bf00      	nop
 800ab74:	20006a88 	.word	0x20006a88

0800ab78 <ip4_reass>:
{
 800ab78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800ab7c:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ab7e:	782b      	ldrb	r3, [r5, #0]
 800ab80:	f003 030f 	and.w	r3, r3, #15
 800ab84:	2b05      	cmp	r3, #5
{
 800ab86:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ab88:	f040 80a0 	bne.w	800accc <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ab8c:	88e8      	ldrh	r0, [r5, #6]
 800ab8e:	f003 fa87 	bl	800e0a0 <lwip_htons>
 800ab92:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ab94:	8868      	ldrh	r0, [r5, #2]
 800ab96:	f003 fa83 	bl	800e0a0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800ab9a:	782b      	ldrb	r3, [r5, #0]
 800ab9c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800aba0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800aba4:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800aba8:	f0c0 8090 	bcc.w	800accc <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 800abac:	1bc0      	subs	r0, r0, r7
 800abae:	b283      	uxth	r3, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800abb0:	4ebf      	ldr	r6, [pc, #764]	; (800aeb0 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 800abb2:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800abb4:	4640      	mov	r0, r8
 800abb6:	f004 fd37 	bl	800f628 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800abba:	88b3      	ldrh	r3, [r6, #4]
 800abbc:	4403      	add	r3, r0
 800abbe:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800abc0:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800abc2:	dc79      	bgt.n	800acb8 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800abc4:	6834      	ldr	r4, [r6, #0]
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	f040 8085 	bne.w	800acd6 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800abcc:	2004      	movs	r0, #4
 800abce:	f004 f84d 	bl	800ec6c <memp_malloc>
  if (ipr == NULL) {
 800abd2:	4604      	mov	r4, r0
 800abd4:	b958      	cbnz	r0, 800abee <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800abd6:	4649      	mov	r1, r9
 800abd8:	4628      	mov	r0, r5
 800abda:	f7ff ff4b 	bl	800aa74 <ip_reass_remove_oldest_datagram>
 800abde:	4581      	cmp	r9, r0
 800abe0:	dc74      	bgt.n	800accc <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800abe2:	2004      	movs	r0, #4
 800abe4:	f004 f842 	bl	800ec6c <memp_malloc>
    if (ipr == NULL)
 800abe8:	4604      	mov	r4, r0
 800abea:	2800      	cmp	r0, #0
 800abec:	d06e      	beq.n	800accc <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800abee:	221c      	movs	r2, #28
 800abf0:	2100      	movs	r1, #0
 800abf2:	1d20      	adds	r0, r4, #4
 800abf4:	f011 fb4c 	bl	801c290 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800abf8:	230f      	movs	r3, #15
 800abfa:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800abfc:	6833      	ldr	r3, [r6, #0]
 800abfe:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 800ac00:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ac02:	462b      	mov	r3, r5
 800ac04:	f104 0208 	add.w	r2, r4, #8
 800ac08:	f105 0114 	add.w	r1, r5, #20
 800ac0c:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac10:	f842 0b04 	str.w	r0, [r2], #4
 800ac14:	428b      	cmp	r3, r1
 800ac16:	d1f9      	bne.n	800ac0c <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ac18:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ac1c:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 800ac20:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ac24:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 800ac28:	d10a      	bne.n	800ac40 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	18fb      	adds	r3, r7, r3
 800ac2e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ac30:	429f      	cmp	r7, r3
 800ac32:	f200 8129 	bhi.w	800ae88 <ip4_reass+0x310>
 800ac36:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	f200 8124 	bhi.w	800ae88 <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ac40:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ac44:	8868      	ldrh	r0, [r5, #2]
 800ac46:	f003 fa2b 	bl	800e0a0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800ac4a:	782b      	ldrb	r3, [r5, #0]
 800ac4c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800ac50:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800ac54:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ac58:	f0c0 8116 	bcc.w	800ae88 <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 800ac5c:	1a80      	subs	r0, r0, r2
 800ac5e:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ac62:	88e8      	ldrh	r0, [r5, #6]
 800ac64:	f003 fa1c 	bl	800e0a0 <lwip_htons>
 800ac68:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ac6c:	00c0      	lsls	r0, r0, #3
  iprh->end = (u16_t)(offset + len);
 800ac6e:	eb0a 0300 	add.w	r3, sl, r0
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ac72:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->end = (u16_t)(offset + len);
 800ac76:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800ac7a:	2500      	movs	r5, #0
  if (iprh->end < offset) {
 800ac7c:	4560      	cmp	r0, ip
  iprh->next_pbuf = NULL;
 800ac7e:	7035      	strb	r5, [r6, #0]
 800ac80:	7075      	strb	r5, [r6, #1]
 800ac82:	70b5      	strb	r5, [r6, #2]
 800ac84:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800ac86:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 800ac88:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 800ac8a:	f200 80fd 	bhi.w	800ae88 <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 800ac8e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800ac92:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800ac96:	4671      	mov	r1, lr
 800ac98:	bb61      	cbnz	r1, 800acf4 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 800ac9a:	2d00      	cmp	r5, #0
 800ac9c:	f040 80ae 	bne.w	800adfc <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800aca0:	f1be 0f00 	cmp.w	lr, #0
 800aca4:	f000 809a 	beq.w	800addc <ip4_reass+0x264>
 800aca8:	4b82      	ldr	r3, [pc, #520]	; (800aeb4 <ip4_reass+0x33c>)
 800acaa:	4983      	ldr	r1, [pc, #524]	; (800aeb8 <ip4_reass+0x340>)
 800acac:	4883      	ldr	r0, [pc, #524]	; (800aebc <ip4_reass+0x344>)
 800acae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800acb2:	f011 ff39 	bl	801cb28 <iprintf>
 800acb6:	e091      	b.n	800addc <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800acb8:	4601      	mov	r1, r0
 800acba:	4628      	mov	r0, r5
 800acbc:	f7ff feda 	bl	800aa74 <ip_reass_remove_oldest_datagram>
 800acc0:	b120      	cbz	r0, 800accc <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800acc2:	88b3      	ldrh	r3, [r6, #4]
 800acc4:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800acc6:	2b0a      	cmp	r3, #10
 800acc8:	f77f af7c 	ble.w	800abc4 <ip4_reass+0x4c>
  pbuf_free(p);
 800accc:	4640      	mov	r0, r8
 800acce:	f004 fb57 	bl	800f380 <pbuf_free>
  return NULL;
 800acd2:	2600      	movs	r6, #0
 800acd4:	e07c      	b.n	800add0 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800acd6:	68eb      	ldr	r3, [r5, #12]
 800acd8:	6962      	ldr	r2, [r4, #20]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d108      	bne.n	800acf0 <ip4_reass+0x178>
 800acde:	692b      	ldr	r3, [r5, #16]
 800ace0:	69a2      	ldr	r2, [r4, #24]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d104      	bne.n	800acf0 <ip4_reass+0x178>
 800ace6:	89a2      	ldrh	r2, [r4, #12]
 800ace8:	88ab      	ldrh	r3, [r5, #4]
 800acea:	429a      	cmp	r2, r3
 800acec:	f000 80f2 	beq.w	800aed4 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800acf0:	6824      	ldr	r4, [r4, #0]
 800acf2:	e768      	b.n	800abc6 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800acf4:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800acf6:	889a      	ldrh	r2, [r3, #4]
 800acf8:	4290      	cmp	r0, r2
 800acfa:	d272      	bcs.n	800ade2 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 800acfc:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800acfe:	2d00      	cmp	r5, #0
 800ad00:	d06a      	beq.n	800add8 <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ad02:	88eb      	ldrh	r3, [r5, #6]
 800ad04:	4298      	cmp	r0, r3
 800ad06:	f0c0 80bf 	bcc.w	800ae88 <ip4_reass+0x310>
 800ad0a:	4594      	cmp	ip, r2
 800ad0c:	f200 80bc 	bhi.w	800ae88 <ip4_reass+0x310>
        iprh_prev->next_pbuf = new_p;
 800ad10:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 800ad14:	4298      	cmp	r0, r3
      if (iprh_prev->end != iprh->start) {
 800ad16:	f040 80f9 	bne.w	800af0c <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ad1a:	f1bb 0f00 	cmp.w	fp, #0
 800ad1e:	d004      	beq.n	800ad2a <ip4_reass+0x1b2>
 800ad20:	7fa3      	ldrb	r3, [r4, #30]
 800ad22:	f013 0301 	ands.w	r3, r3, #1
 800ad26:	f000 80a0 	beq.w	800ae6a <ip4_reass+0x2f2>
    if (valid) {
 800ad2a:	f1ba 0f00 	cmp.w	sl, #0
 800ad2e:	d175      	bne.n	800ae1c <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 800ad30:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ad34:	4b5e      	ldr	r3, [pc, #376]	; (800aeb0 <ip4_reass+0x338>)
 800ad36:	8898      	ldrh	r0, [r3, #4]
 800ad38:	4481      	add	r9, r0
 800ad3a:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 800ad3e:	4698      	mov	r8, r3
 800ad40:	f1bb 0f00 	cmp.w	fp, #0
 800ad44:	d106      	bne.n	800ad54 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ad4a:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800ad4c:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ad4e:	f043 0301 	orr.w	r3, r3, #1
 800ad52:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ad54:	f1ba 0f01 	cmp.w	sl, #1
 800ad58:	d1bb      	bne.n	800acd2 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ad5a:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ad5c:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ad5e:	685e      	ldr	r6, [r3, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ad60:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ad62:	6835      	ldr	r5, [r6, #0]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ad64:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ad66:	f104 0308 	add.w	r3, r4, #8
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	f104 011c 	add.w	r1, r4, #28
 800ad70:	f853 7b04 	ldr.w	r7, [r3], #4
 800ad74:	f842 7b04 	str.w	r7, [r2], #4
 800ad78:	428b      	cmp	r3, r1
 800ad7a:	d1f9      	bne.n	800ad70 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ad7c:	f003 f990 	bl	800e0a0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800ad80:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ad82:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ad84:	71b3      	strb	r3, [r6, #6]
 800ad86:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ad88:	72b3      	strb	r3, [r6, #10]
 800ad8a:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800ad8c:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	d16d      	bne.n	800ae6e <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 800ad92:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	d002      	beq.n	800ada0 <ip4_reass+0x228>
 800ad9a:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d171      	bne.n	800ae84 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7ff fdd0 	bl	800a948 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800ada8:	4630      	mov	r0, r6
 800adaa:	f004 fc3d 	bl	800f628 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800adae:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800adb2:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 800adb4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800adb6:	d206      	bcs.n	800adc6 <ip4_reass+0x24e>
 800adb8:	4b3e      	ldr	r3, [pc, #248]	; (800aeb4 <ip4_reass+0x33c>)
 800adba:	4941      	ldr	r1, [pc, #260]	; (800aec0 <ip4_reass+0x348>)
 800adbc:	483f      	ldr	r0, [pc, #252]	; (800aebc <ip4_reass+0x344>)
 800adbe:	f240 229b 	movw	r2, #667	; 0x29b
 800adc2:	f011 feb1 	bl	801cb28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800adc6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800adca:	1b04      	subs	r4, r0, r4
 800adcc:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 800add0:	4630      	mov	r0, r6
 800add2:	b003      	add	sp, #12
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800add8:	4594      	cmp	ip, r2
 800adda:	d855      	bhi.n	800ae88 <ip4_reass+0x310>
      ipr->p = new_p;
 800addc:	f8c4 8004 	str.w	r8, [r4, #4]
 800ade0:	e79b      	b.n	800ad1a <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 800ade2:	d051      	beq.n	800ae88 <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 800ade4:	88d9      	ldrh	r1, [r3, #6]
 800ade6:	4281      	cmp	r1, r0
 800ade8:	d84e      	bhi.n	800ae88 <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 800adea:	b125      	cbz	r5, 800adf6 <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 800adec:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 800adee:	4291      	cmp	r1, r2
 800adf0:	bf18      	it	ne
 800adf2:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800adf6:	6819      	ldr	r1, [r3, #0]
 800adf8:	461d      	mov	r5, r3
 800adfa:	e74d      	b.n	800ac98 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800adfc:	88eb      	ldrh	r3, [r5, #6]
 800adfe:	4283      	cmp	r3, r0
 800ae00:	d906      	bls.n	800ae10 <ip4_reass+0x298>
 800ae02:	4b2c      	ldr	r3, [pc, #176]	; (800aeb4 <ip4_reass+0x33c>)
 800ae04:	492f      	ldr	r1, [pc, #188]	; (800aec4 <ip4_reass+0x34c>)
 800ae06:	482d      	ldr	r0, [pc, #180]	; (800aebc <ip4_reass+0x344>)
 800ae08:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ae0c:	f011 fe8c 	bl	801cb28 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800ae10:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800ae14:	88ea      	ldrh	r2, [r5, #6]
 800ae16:	88b3      	ldrh	r3, [r6, #4]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	e77c      	b.n	800ad16 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ae1c:	6863      	ldr	r3, [r4, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d086      	beq.n	800ad30 <ip4_reass+0x1b8>
 800ae22:	6859      	ldr	r1, [r3, #4]
 800ae24:	888b      	ldrh	r3, [r1, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d182      	bne.n	800ad30 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 800ae2a:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800ae2c:	b9a3      	cbnz	r3, 800ae58 <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 800ae2e:	42b1      	cmp	r1, r6
 800ae30:	d106      	bne.n	800ae40 <ip4_reass+0x2c8>
 800ae32:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <ip4_reass+0x33c>)
 800ae34:	4924      	ldr	r1, [pc, #144]	; (800aec8 <ip4_reass+0x350>)
 800ae36:	4821      	ldr	r0, [pc, #132]	; (800aebc <ip4_reass+0x344>)
 800ae38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae3c:	f011 fe74 	bl	801cb28 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f43f af76 	beq.w	800ad34 <ip4_reass+0x1bc>
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <ip4_reass+0x33c>)
 800ae4a:	4920      	ldr	r1, [pc, #128]	; (800aecc <ip4_reass+0x354>)
 800ae4c:	481b      	ldr	r0, [pc, #108]	; (800aebc <ip4_reass+0x344>)
 800ae4e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ae52:	f011 fe69 	bl	801cb28 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ae56:	e76d      	b.n	800ad34 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 800ae58:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800ae5a:	88f0      	ldrh	r0, [r6, #6]
 800ae5c:	8893      	ldrh	r3, [r2, #4]
 800ae5e:	4298      	cmp	r0, r3
 800ae60:	f47f af66 	bne.w	800ad30 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 800ae64:	6813      	ldr	r3, [r2, #0]
 800ae66:	4616      	mov	r6, r2
 800ae68:	e7e0      	b.n	800ae2c <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ae6a:	469a      	mov	sl, r3
 800ae6c:	e762      	b.n	800ad34 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 800ae6e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800ae70:	2114      	movs	r1, #20
 800ae72:	4628      	mov	r0, r5
 800ae74:	f004 fa50 	bl	800f318 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f004 fbf8 	bl	800f670 <pbuf_cat>
      r = iprh->next_pbuf;
 800ae80:	683d      	ldr	r5, [r7, #0]
 800ae82:	e784      	b.n	800ad8e <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	e786      	b.n	800ad96 <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f47f af1e 	bne.w	800accc <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <ip4_reass+0x338>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d006      	beq.n	800aea6 <ip4_reass+0x32e>
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <ip4_reass+0x33c>)
 800ae9a:	490d      	ldr	r1, [pc, #52]	; (800aed0 <ip4_reass+0x358>)
 800ae9c:	4807      	ldr	r0, [pc, #28]	; (800aebc <ip4_reass+0x344>)
 800ae9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800aea2:	f011 fe41 	bl	801cb28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800aea6:	2100      	movs	r1, #0
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff fd4d 	bl	800a948 <ip_reass_dequeue_datagram>
 800aeae:	e70d      	b.n	800accc <ip4_reass+0x154>
 800aeb0:	20006a88 	.word	0x20006a88
 800aeb4:	0802c675 	.word	0x0802c675
 800aeb8:	0802c787 	.word	0x0802c787
 800aebc:	0802aecf 	.word	0x0802aecf
 800aec0:	0802c7ed 	.word	0x0802c7ed
 800aec4:	0802c769 	.word	0x0802c769
 800aec8:	0802c7be 	.word	0x0802c7be
 800aecc:	0802c7cb 	.word	0x0802c7cb
 800aed0:	0802c808 	.word	0x0802c808
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800aed4:	88e8      	ldrh	r0, [r5, #6]
 800aed6:	f003 f8e3 	bl	800e0a0 <lwip_htons>
 800aeda:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800aede:	2800      	cmp	r0, #0
 800aee0:	f47f ae9a 	bne.w	800ac18 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800aee4:	89e0      	ldrh	r0, [r4, #14]
 800aee6:	f003 f8db 	bl	800e0a0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800aeea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f ae92 	beq.w	800ac18 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800aef4:	462b      	mov	r3, r5
 800aef6:	f104 0208 	add.w	r2, r4, #8
 800aefa:	f105 0114 	add.w	r1, r5, #20
 800aefe:	f853 0b04 	ldr.w	r0, [r3], #4
 800af02:	f842 0b04 	str.w	r0, [r2], #4
 800af06:	428b      	cmp	r3, r1
 800af08:	d1f9      	bne.n	800aefe <ip4_reass+0x386>
 800af0a:	e685      	b.n	800ac18 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800af0c:	f1bb 0f00 	cmp.w	fp, #0
 800af10:	f43f af0e 	beq.w	800ad30 <ip4_reass+0x1b8>
 800af14:	f04f 0a00 	mov.w	sl, #0
 800af18:	e702      	b.n	800ad20 <ip4_reass+0x1a8>
 800af1a:	bf00      	nop

0800af1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800af20:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
{
 800af24:	ed2d 8b02 	vpush	{d8}
 800af28:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800af2c:	f1b3 0214 	subs.w	r2, r3, #20
{
 800af30:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800af32:	bf48      	it	mi
 800af34:	f1a3 020d 	submi.w	r2, r3, #13
 800af38:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800af3c:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800af3e:	6843      	ldr	r3, [r0, #4]
 800af40:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	2b05      	cmp	r3, #5
{
 800af4a:	4605      	mov	r5, r0
 800af4c:	468a      	mov	sl, r1
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800af4e:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800af52:	d109      	bne.n	800af68 <ip4_frag+0x4c>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800af54:	8943      	ldrh	r3, [r0, #10]
 800af56:	2b13      	cmp	r3, #19
 800af58:	d809      	bhi.n	800af6e <ip4_frag+0x52>
 800af5a:	4b60      	ldr	r3, [pc, #384]	; (800b0dc <ip4_frag+0x1c0>)
 800af5c:	4960      	ldr	r1, [pc, #384]	; (800b0e0 <ip4_frag+0x1c4>)
 800af5e:	4861      	ldr	r0, [pc, #388]	; (800b0e4 <ip4_frag+0x1c8>)
 800af60:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800af64:	f011 fde0 	bl	801cb28 <iprintf>
    return ERR_VAL;
 800af68:	f06f 0005 	mvn.w	r0, #5
 800af6c:	e013      	b.n	800af96 <ip4_frag+0x7a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800af6e:	9b02      	ldr	r3, [sp, #8]
 800af70:	88d8      	ldrh	r0, [r3, #6]
 800af72:	f003 f895 	bl	800e0a0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800af76:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800af7a:	9303      	str	r3, [sp, #12]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800af7c:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800af80:	9307      	str	r3, [sp, #28]

  left = (u16_t)(p->tot_len - IP_HLEN);

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800af82:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800af84:	892c      	ldrh	r4, [r5, #8]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800af86:	00db      	lsls	r3, r3, #3
  left = (u16_t)(p->tot_len - IP_HLEN);
 800af88:	3c14      	subs	r4, #20
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800af8a:	b29b      	uxth	r3, r3
  left = (u16_t)(p->tot_len - IP_HLEN);
 800af8c:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800af8e:	9306      	str	r3, [sp, #24]
  u16_t newpbuflen = 0;
 800af90:	2600      	movs	r6, #0
  while (left) {
 800af92:	b92c      	cbnz	r4, 800afa0 <ip4_frag+0x84>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800af94:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800af96:	b00b      	add	sp, #44	; 0x2c
 800af98:	ecbd 8b02 	vpop	{d8}
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800afa0:	9b06      	ldr	r3, [sp, #24]
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	bf28      	it	cs
 800afa6:	4623      	movcs	r3, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800afa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afac:	2114      	movs	r1, #20
 800afae:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800afb0:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800afb2:	f004 fa4d 	bl	800f450 <pbuf_alloc>
    if (rambuf == NULL) {
 800afb6:	4680      	mov	r8, r0
 800afb8:	2800      	cmp	r0, #0
 800afba:	d036      	beq.n	800b02a <ip4_frag+0x10e>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800afbc:	8943      	ldrh	r3, [r0, #10]
 800afbe:	2b13      	cmp	r3, #19
 800afc0:	d806      	bhi.n	800afd0 <ip4_frag+0xb4>
 800afc2:	4b46      	ldr	r3, [pc, #280]	; (800b0dc <ip4_frag+0x1c0>)
 800afc4:	4948      	ldr	r1, [pc, #288]	; (800b0e8 <ip4_frag+0x1cc>)
 800afc6:	4847      	ldr	r0, [pc, #284]	; (800b0e4 <ip4_frag+0x1c8>)
 800afc8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800afcc:	f011 fdac 	bl	801cb28 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800afd0:	9b02      	ldr	r3, [sp, #8]
 800afd2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800afd6:	4619      	mov	r1, r3
 800afd8:	3114      	adds	r1, #20
 800afda:	f853 0b04 	ldr.w	r0, [r3], #4
 800afde:	f842 0b04 	str.w	r0, [r2], #4
 800afe2:	428b      	cmp	r3, r1
 800afe4:	d1f9      	bne.n	800afda <ip4_frag+0xbe>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800afe6:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800afea:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 800afee:	f1b9 0f00 	cmp.w	r9, #0
 800aff2:	d041      	beq.n	800b078 <ip4_frag+0x15c>
      u16_t plen = (u16_t)(p->len - poff);
 800aff4:	896b      	ldrh	r3, [r5, #10]
 800aff6:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800aff8:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800affa:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800affc:	d206      	bcs.n	800b00c <ip4_frag+0xf0>
 800affe:	4b37      	ldr	r3, [pc, #220]	; (800b0dc <ip4_frag+0x1c0>)
 800b000:	493a      	ldr	r1, [pc, #232]	; (800b0ec <ip4_frag+0x1d0>)
 800b002:	4838      	ldr	r0, [pc, #224]	; (800b0e4 <ip4_frag+0x1c8>)
 800b004:	f240 322d 	movw	r2, #813	; 0x32d
 800b008:	f011 fd8e 	bl	801cb28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b00c:	454e      	cmp	r6, r9
 800b00e:	bf28      	it	cs
 800b010:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800b012:	b916      	cbnz	r6, 800b01a <ip4_frag+0xfe>
        p = p->next;
 800b014:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800b016:	2700      	movs	r7, #0
 800b018:	e7e9      	b.n	800afee <ip4_frag+0xd2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800b01a:	2005      	movs	r0, #5
 800b01c:	f003 fe26 	bl	800ec6c <memp_malloc>
      if (pcr == NULL) {
 800b020:	4603      	mov	r3, r0
 800b022:	b928      	cbnz	r0, 800b030 <ip4_frag+0x114>
        pbuf_free(rambuf);
 800b024:	4640      	mov	r0, r8
 800b026:	f004 f9ab 	bl	800f380 <pbuf_free>
  return ERR_MEM;
 800b02a:	f04f 30ff 	mov.w	r0, #4294967295
 800b02e:	e7b2      	b.n	800af96 <ip4_frag+0x7a>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b030:	9601      	str	r6, [sp, #4]
 800b032:	686a      	ldr	r2, [r5, #4]
 800b034:	9008      	str	r0, [sp, #32]
 800b036:	443a      	add	r2, r7
 800b038:	9200      	str	r2, [sp, #0]
 800b03a:	4631      	mov	r1, r6
 800b03c:	2241      	movs	r2, #65	; 0x41
 800b03e:	2000      	movs	r0, #0
 800b040:	f004 f94a 	bl	800f2d8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800b044:	9b08      	ldr	r3, [sp, #32]
 800b046:	b918      	cbnz	r0, 800b050 <ip4_frag+0x134>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fd4f 	bl	800aaec <ip_frag_free_pbuf_custom_ref>
 800b04e:	e7e9      	b.n	800b024 <ip4_frag+0x108>
 800b050:	e9cd 0308 	strd	r0, r3, [sp, #32]
      pbuf_ref(p);
 800b054:	4628      	mov	r0, r5
 800b056:	f004 faef 	bl	800f638 <pbuf_ref>
      pcr->original = p;
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b05c:	4a24      	ldr	r2, [pc, #144]	; (800b0f0 <ip4_frag+0x1d4>)
      pbuf_cat(rambuf, newpbuf);
 800b05e:	9908      	ldr	r1, [sp, #32]
      pcr->original = p;
 800b060:	615d      	str	r5, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b062:	eba9 0906 	sub.w	r9, r9, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b066:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800b068:	4640      	mov	r0, r8
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b06a:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800b06e:	f004 faff 	bl	800f670 <pbuf_cat>
      if (left_to_copy) {
 800b072:	f1b9 0f00 	cmp.w	r9, #0
 800b076:	d1cd      	bne.n	800b014 <ip4_frag+0xf8>
    tmp = (IP_OFFMASK & (ofo));
 800b078:	9b03      	ldr	r3, [sp, #12]
 800b07a:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800b07e:	f8ba 30d0 	ldrh.w	r3, [sl, #208]	; 0xd0
 800b082:	3b13      	subs	r3, #19
    poff = (u16_t)(poff + newpbuflen);
 800b084:	4437      	add	r7, r6
    if (!last || mf_set) {
 800b086:	42a3      	cmp	r3, r4
    poff = (u16_t)(poff + newpbuflen);
 800b088:	b2bf      	uxth	r7, r7
    if (!last || mf_set) {
 800b08a:	dd01      	ble.n	800b090 <ip4_frag+0x174>
 800b08c:	9b07      	ldr	r3, [sp, #28]
 800b08e:	b10b      	cbz	r3, 800b094 <ip4_frag+0x178>
      tmp = tmp | IP_MF;
 800b090:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b094:	f003 f804 	bl	800e0a0 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b098:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b09a:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b09e:	f103 0014 	add.w	r0, r3, #20
 800b0a2:	b280      	uxth	r0, r0
 800b0a4:	f002 fffc 	bl	800e0a0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800b0a8:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800b0aa:	ee18 2a10 	vmov	r2, s16
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b0ae:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b0b2:	f88b 300a 	strb.w	r3, [fp, #10]
 800b0b6:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	4798      	blx	r3
    pbuf_free(rambuf);
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	f004 f95b 	bl	800f380 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b0ca:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800b0cc:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 800b0ce:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 800b0d0:	9b03      	ldr	r3, [sp, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 800b0d6:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	e75a      	b.n	800af92 <ip4_frag+0x76>
 800b0dc:	0802c675 	.word	0x0802c675
 800b0e0:	0802c828 	.word	0x0802c828
 800b0e4:	0802aecf 	.word	0x0802aecf
 800b0e8:	0802c843 	.word	0x0802c843
 800b0ec:	0802c863 	.word	0x0802c863
 800b0f0:	0800ab19 	.word	0x0800ab19

0800b0f4 <icmp6_send_response_with_addrs_and_netif.isra.0>:
 * @param reply_src source address of the packet to send
 * @param reply_dest destination address of the packet to send
 * @param netif netif to send the packet
 */
static void
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	4688      	mov	r8, r1
 800b0fe:	4617      	mov	r7, r2
 800b100:	4699      	mov	r9, r3
{
  struct pbuf *q;
  struct icmp6_hdr *icmp6hdr;

  /* ICMPv6 header + IPv6 header + data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 800b102:	f44f 7220 	mov.w	r2, #640	; 0x280
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
 800b106:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b108:	9305      	str	r3, [sp, #20]
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 800b10a:	2138      	movs	r1, #56	; 0x38
 800b10c:	2036      	movs	r0, #54	; 0x36
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
 800b10e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 800b112:	f004 f99d 	bl	800f450 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800b116:	4604      	mov	r4, r0
 800b118:	2800      	cmp	r0, #0
 800b11a:	d03a      	beq.n	800b192 <icmp6_send_response_with_addrs_and_netif.isra.0+0x9e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
    ICMP6_STATS_INC(icmp6.memerr);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 800b11c:	8943      	ldrh	r3, [r0, #10]
 800b11e:	2b37      	cmp	r3, #55	; 0x37
 800b120:	d806      	bhi.n	800b130 <icmp6_send_response_with_addrs_and_netif.isra.0+0x3c>
 800b122:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <icmp6_send_response_with_addrs_and_netif.isra.0+0xa4>)
 800b124:	491d      	ldr	r1, [pc, #116]	; (800b19c <icmp6_send_response_with_addrs_and_netif.isra.0+0xa8>)
 800b126:	481e      	ldr	r0, [pc, #120]	; (800b1a0 <icmp6_send_response_with_addrs_and_netif.isra.0+0xac>)
 800b128:	f240 128f 	movw	r2, #399	; 0x18f
 800b12c:	f011 fcfc 	bl	801cb28 <iprintf>
             (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));

  icmp6hdr = (struct icmp6_hdr *)q->payload;
 800b130:	6865      	ldr	r5, [r4, #4]
  icmp6hdr->type = type;
  icmp6hdr->code = code;
  icmp6hdr->data = lwip_htonl(data);
 800b132:	4638      	mov	r0, r7
  icmp6hdr->type = type;
 800b134:	f885 9000 	strb.w	r9, [r5]
  icmp6hdr->code = code;
 800b138:	f885 8001 	strb.w	r8, [r5, #1]
  icmp6hdr->data = lwip_htonl(data);
 800b13c:	f002 ffb3 	bl	800e0a6 <lwip_htonl>

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 800b140:	6862      	ldr	r2, [r4, #4]
 800b142:	6833      	ldr	r3, [r6, #0]
  icmp6hdr->data = lwip_htonl(data);
 800b144:	6068      	str	r0, [r5, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 800b146:	3208      	adds	r2, #8
 800b148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b14c:	f853 0b04 	ldr.w	r0, [r3], #4
 800b150:	f842 0b04 	str.w	r0, [r2], #4
 800b154:	428b      	cmp	r3, r1
 800b156:	d1f9      	bne.n	800b14c <icmp6_send_response_with_addrs_and_netif.isra.0+0x58>
          IP6_HLEN + LWIP_ICMP6_DATASIZE);

  /* calculate checksum */
  icmp6hdr->chksum = 0;
 800b158:	2600      	movs	r6, #0
#if CHECKSUM_GEN_ICMP6
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP6) {
    icmp6hdr->chksum = ip6_chksum_pseudo(q, IP6_NEXTH_ICMP6, q->tot_len,
 800b15a:	8922      	ldrh	r2, [r4, #8]
  icmp6hdr->chksum = 0;
 800b15c:	70ae      	strb	r6, [r5, #2]
 800b15e:	70ee      	strb	r6, [r5, #3]
    icmp6hdr->chksum = ip6_chksum_pseudo(q, IP6_NEXTH_ICMP6, q->tot_len,
 800b160:	4653      	mov	r3, sl
 800b162:	f8cd b000 	str.w	fp, [sp]
 800b166:	213a      	movs	r1, #58	; 0x3a
 800b168:	4620      	mov	r0, r4
 800b16a:	f003 fa67 	bl	800e63c <ip6_chksum_pseudo>
      reply_src, reply_dest);
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  ICMP6_STATS_INC(icmp6.xmit);
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 800b16e:	9b05      	ldr	r3, [sp, #20]
    icmp6hdr->chksum = ip6_chksum_pseudo(q, IP6_NEXTH_ICMP6, q->tot_len,
 800b170:	8068      	strh	r0, [r5, #2]
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 800b172:	9302      	str	r3, [sp, #8]
 800b174:	233a      	movs	r3, #58	; 0x3a
 800b176:	e9cd 6300 	strd	r6, r3, [sp]
 800b17a:	465a      	mov	r2, fp
 800b17c:	23ff      	movs	r3, #255	; 0xff
 800b17e:	4651      	mov	r1, sl
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fda9 	bl	800bcd8 <ip6_output_if>
  pbuf_free(q);
 800b186:	4620      	mov	r0, r4
}
 800b188:	b007      	add	sp, #28
 800b18a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(q);
 800b18e:	f004 b8f7 	b.w	800f380 <pbuf_free>
}
 800b192:	b007      	add	sp, #28
 800b194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b198:	0802c872 	.word	0x0802c872
 800b19c:	0802c8e1 	.word	0x0802c8e1
 800b1a0:	0802aecf 	.word	0x0802aecf

0800b1a4 <icmp6_send_response>:
{
 800b1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	461f      	mov	r7, r3
  struct netif *netif = ip_current_netif();
 800b1aa:	4b12      	ldr	r3, [pc, #72]	; (800b1f4 <icmp6_send_response+0x50>)
 800b1ac:	f8d3 8000 	ldr.w	r8, [r3]
{
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	4616      	mov	r6, r2
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 800b1b8:	f1b8 0f00 	cmp.w	r8, #0
 800b1bc:	d106      	bne.n	800b1cc <icmp6_send_response+0x28>
 800b1be:	4b0e      	ldr	r3, [pc, #56]	; (800b1f8 <icmp6_send_response+0x54>)
 800b1c0:	490e      	ldr	r1, [pc, #56]	; (800b1fc <icmp6_send_response+0x58>)
 800b1c2:	480f      	ldr	r0, [pc, #60]	; (800b200 <icmp6_send_response+0x5c>)
 800b1c4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800b1c8:	f011 fcae 	bl	801cb28 <iprintf>
  reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
 800b1cc:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800b204 <icmp6_send_response+0x60>
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	f000 f9fa 	bl	800b5cc <ip6_select_source_address>
  if (reply_src == NULL) {
 800b1d8:	b140      	cbz	r0, 800b1ec <icmp6_send_response+0x48>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
 800b1da:	9000      	str	r0, [sp, #0]
 800b1dc:	e9cd 9801 	strd	r9, r8, [sp, #4]
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	1d20      	adds	r0, r4, #4
 800b1e8:	f7ff ff84 	bl	800b0f4 <icmp6_send_response_with_addrs_and_netif.isra.0>
}
 800b1ec:	b005      	add	sp, #20
 800b1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2000f4b8 	.word	0x2000f4b8
 800b1f8:	0802c872 	.word	0x0802c872
 800b1fc:	0802c90e 	.word	0x0802c90e
 800b200:	0802aecf 	.word	0x0802aecf
 800b204:	2000f4cc 	.word	0x2000f4cc

0800b208 <icmp6_input>:
{
 800b208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  if (p->len < sizeof(struct icmp6_hdr)) {
 800b20c:	8943      	ldrh	r3, [r0, #10]
 800b20e:	2b07      	cmp	r3, #7
{
 800b210:	4604      	mov	r4, r0
 800b212:	4688      	mov	r8, r1
  if (p->len < sizeof(struct icmp6_hdr)) {
 800b214:	d801      	bhi.n	800b21a <icmp6_input+0x12>
  pbuf_free(p);
 800b216:	4620      	mov	r0, r4
 800b218:	e02a      	b.n	800b270 <icmp6_input+0x68>
    if (ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->tot_len, ip6_current_src_addr(),
 800b21a:	4f31      	ldr	r7, [pc, #196]	; (800b2e0 <icmp6_input+0xd8>)
  icmp6hdr = (struct icmp6_hdr *)p->payload;
 800b21c:	6845      	ldr	r5, [r0, #4]
    if (ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->tot_len, ip6_current_src_addr(),
 800b21e:	f107 0a18 	add.w	sl, r7, #24
 800b222:	f8cd a000 	str.w	sl, [sp]
 800b226:	8902      	ldrh	r2, [r0, #8]
 800b228:	463b      	mov	r3, r7
 800b22a:	213a      	movs	r1, #58	; 0x3a
 800b22c:	f003 fa06 	bl	800e63c <ip6_chksum_pseudo>
 800b230:	2800      	cmp	r0, #0
 800b232:	d1f0      	bne.n	800b216 <icmp6_input+0xe>
  switch (icmp6hdr->type) {
 800b234:	782b      	ldrb	r3, [r5, #0]
 800b236:	2b84      	cmp	r3, #132	; 0x84
 800b238:	d81f      	bhi.n	800b27a <icmp6_input+0x72>
 800b23a:	2b81      	cmp	r3, #129	; 0x81
 800b23c:	d828      	bhi.n	800b290 <icmp6_input+0x88>
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d01f      	beq.n	800b282 <icmp6_input+0x7a>
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d1e7      	bne.n	800b216 <icmp6_input+0xe>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 800b246:	7e3b      	ldrb	r3, [r7, #24]
 800b248:	2bff      	cmp	r3, #255	; 0xff
 800b24a:	d0e4      	beq.n	800b216 <icmp6_input+0xe>
    r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
 800b24c:	8921      	ldrh	r1, [r4, #8]
 800b24e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b252:	2036      	movs	r0, #54	; 0x36
 800b254:	f004 f8fc 	bl	800f450 <pbuf_alloc>
    if (r == NULL) {
 800b258:	4605      	mov	r5, r0
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d0db      	beq.n	800b216 <icmp6_input+0xe>
    if (pbuf_copy(r, p) != ERR_OK) {
 800b25e:	4621      	mov	r1, r4
 800b260:	f004 fa4a 	bl	800f6f8 <pbuf_copy>
 800b264:	4606      	mov	r6, r0
 800b266:	b1d0      	cbz	r0, 800b29e <icmp6_input+0x96>
      pbuf_free(p);
 800b268:	4620      	mov	r0, r4
 800b26a:	f004 f889 	bl	800f380 <pbuf_free>
      pbuf_free(r);
 800b26e:	4628      	mov	r0, r5
}
 800b270:	b004      	add	sp, #16
 800b272:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 800b276:	f004 b883 	b.w	800f380 <pbuf_free>
  switch (icmp6hdr->type) {
 800b27a:	337a      	adds	r3, #122	; 0x7a
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d8c9      	bhi.n	800b216 <icmp6_input+0xe>
    nd6_input(p, inp);
 800b282:	4641      	mov	r1, r8
 800b284:	4620      	mov	r0, r4
}
 800b286:	b004      	add	sp, #16
 800b288:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    nd6_input(p, inp);
 800b28c:	f001 bf7e 	b.w	800d18c <nd6_input>
    mld6_input(p, inp);
 800b290:	4641      	mov	r1, r8
 800b292:	4620      	mov	r0, r4
}
 800b294:	b004      	add	sp, #16
 800b296:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mld6_input(p, inp);
 800b29a:	f001 bac5 	b.w	800c828 <mld6_input>
    ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
 800b29e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800b2a2:	2381      	movs	r3, #129	; 0x81
 800b2a4:	f889 3000 	strb.w	r3, [r9]
      ((struct icmp6_echo_hdr *)(r->payload))->chksum = ip6_chksum_pseudo(r,
 800b2a8:	892a      	ldrh	r2, [r5, #8]
    ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
 800b2aa:	f889 0002 	strb.w	r0, [r9, #2]
 800b2ae:	f889 0003 	strb.w	r0, [r9, #3]
      ((struct icmp6_echo_hdr *)(r->payload))->chksum = ip6_chksum_pseudo(r,
 800b2b2:	4653      	mov	r3, sl
 800b2b4:	9700      	str	r7, [sp, #0]
 800b2b6:	213a      	movs	r1, #58	; 0x3a
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f003 f9bf 	bl	800e63c <ip6_chksum_pseudo>
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 800b2be:	233a      	movs	r3, #58	; 0x3a
      ((struct icmp6_echo_hdr *)(r->payload))->chksum = ip6_chksum_pseudo(r,
 800b2c0:	f8a9 0002 	strh.w	r0, [r9, #2]
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 800b2c4:	463a      	mov	r2, r7
 800b2c6:	e9cd 6300 	strd	r6, r3, [sp]
 800b2ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800b2ce:	23ff      	movs	r3, #255	; 0xff
 800b2d0:	4651      	mov	r1, sl
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f000 fd00 	bl	800bcd8 <ip6_output_if>
    pbuf_free(r);
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f004 f851 	bl	800f380 <pbuf_free>
    break;
 800b2de:	e79a      	b.n	800b216 <icmp6_input+0xe>
 800b2e0:	2000f4cc 	.word	0x2000f4cc

0800b2e4 <icmp6_dest_unreach>:
  icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f7ff bf5c 	b.w	800b1a4 <icmp6_send_response>

0800b2ec <icmp6_time_exceeded_with_addrs>:
{
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	461c      	mov	r4, r3
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 800b2f6:	4615      	mov	r5, r2
 800b2f8:	b932      	cbnz	r2, 800b308 <icmp6_time_exceeded_with_addrs+0x1c>
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <icmp6_time_exceeded_with_addrs+0x4c>)
 800b2fc:	490f      	ldr	r1, [pc, #60]	; (800b33c <icmp6_time_exceeded_with_addrs+0x50>)
 800b2fe:	4810      	ldr	r0, [pc, #64]	; (800b340 <icmp6_time_exceeded_with_addrs+0x54>)
 800b300:	f240 1261 	movw	r2, #353	; 0x161
 800b304:	f011 fc10 	bl	801cb28 <iprintf>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 800b308:	b934      	cbnz	r4, 800b318 <icmp6_time_exceeded_with_addrs+0x2c>
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <icmp6_time_exceeded_with_addrs+0x4c>)
 800b30c:	490b      	ldr	r1, [pc, #44]	; (800b33c <icmp6_time_exceeded_with_addrs+0x50>)
 800b30e:	480c      	ldr	r0, [pc, #48]	; (800b340 <icmp6_time_exceeded_with_addrs+0x54>)
 800b310:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b314:	f011 fc08 	bl	801cb28 <iprintf>
  netif = ip6_route(reply_src, reply_dest);
 800b318:	4629      	mov	r1, r5
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 f84e 	bl	800b3bc <ip6_route>
  if (netif == NULL) {
 800b320:	b140      	cbz	r0, 800b334 <icmp6_time_exceeded_with_addrs+0x48>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
 800b322:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800b326:	9400      	str	r4, [sp, #0]
 800b328:	2303      	movs	r3, #3
 800b32a:	2200      	movs	r2, #0
 800b32c:	4639      	mov	r1, r7
 800b32e:	1d30      	adds	r0, r6, #4
 800b330:	f7ff fee0 	bl	800b0f4 <icmp6_send_response_with_addrs_and_netif.isra.0>
}
 800b334:	b005      	add	sp, #20
 800b336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b338:	0802c872 	.word	0x0802c872
 800b33c:	0802c932 	.word	0x0802c932
 800b340:	0802aecf 	.word	0x0802aecf

0800b344 <icmp6_param_problem>:
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <icmp6_param_problem+0x14>)
{
 800b346:	b410      	push	{r4}
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 800b348:	68dc      	ldr	r4, [r3, #12]
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 800b34a:	2304      	movs	r3, #4
 800b34c:	1b12      	subs	r2, r2, r4
}
 800b34e:	f85d 4b04 	ldr.w	r4, [sp], #4
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 800b352:	f7ff bf27 	b.w	800b1a4 <icmp6_send_response>
 800b356:	bf00      	nop
 800b358:	2000f4b8 	.word	0x2000f4b8

0800b35c <ip6_input_accept>:
#endif /* LWIP_IPV6_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip6_input_accept(struct netif *netif)
{
 800b35c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* interface is up? */
  if (netif_is_up(netif)) {
 800b35e:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b362:	f013 0301 	ands.w	r3, r3, #1
 800b366:	d022      	beq.n	800b3ae <ip6_input_accept+0x52>
    /* If custom scopes are used, the destination zone will be tested as
      * part of the local-address comparison, but we need to test the source
      * scope as well (e.g., is this interface on the same link?). */
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 800b368:	4b13      	ldr	r3, [pc, #76]	; (800b3b8 <ip6_input_accept+0x5c>)
 800b36a:	f100 0297 	add.w	r2, r0, #151	; 0x97
 800b36e:	e9d3 140b 	ldrd	r1, r4, [r3, #44]	; 0x2c
 800b372:	e9d3 560d 	ldrd	r5, r6, [r3, #52]	; 0x34
 800b376:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 800b37a:	f100 0394 	add.w	r3, r0, #148	; 0x94
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 800b37e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800b382:	06ff      	lsls	r7, r7, #27
 800b384:	d50f      	bpl.n	800b3a6 <ip6_input_accept+0x4a>
 800b386:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800b388:	42b9      	cmp	r1, r7
 800b38a:	d10c      	bne.n	800b3a6 <ip6_input_accept+0x4a>
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 800b38c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800b38e:	42bc      	cmp	r4, r7
 800b390:	d109      	bne.n	800b3a6 <ip6_input_accept+0x4a>
 800b392:	6d47      	ldr	r7, [r0, #84]	; 0x54
 800b394:	42bd      	cmp	r5, r7
 800b396:	d106      	bne.n	800b3a6 <ip6_input_accept+0x4a>
 800b398:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800b39a:	42be      	cmp	r6, r7
 800b39c:	d103      	bne.n	800b3a6 <ip6_input_accept+0x4a>
 800b39e:	f890 705c 	ldrb.w	r7, [r0, #92]	; 0x5c
 800b3a2:	4567      	cmp	r7, ip
 800b3a4:	d005      	beq.n	800b3b2 <ip6_input_accept+0x56>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	f100 0018 	add.w	r0, r0, #24
 800b3ac:	d1e7      	bne.n	800b37e <ip6_input_accept+0x22>
        /* accept on this netif */
        return 1;
      }
    }
  }
  return 0;
 800b3ae:	2000      	movs	r0, #0
}
 800b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e7fc      	b.n	800b3b0 <ip6_input_accept+0x54>
 800b3b6:	bf00      	nop
 800b3b8:	2000f4b8 	.word	0x2000f4b8

0800b3bc <ip6_route>:
  if ((netif_list != NULL) && (netif_list->next == NULL)) {
 800b3bc:	4b81      	ldr	r3, [pc, #516]	; (800b5c4 <ip6_route+0x208>)
{
 800b3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c2:	4604      	mov	r4, r0
  if ((netif_list != NULL) && (netif_list->next == NULL)) {
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	4698      	mov	r8, r3
 800b3c8:	b188      	cbz	r0, 800b3ee <ip6_route+0x32>
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	b97b      	cbnz	r3, 800b3ee <ip6_route+0x32>
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 800b3ce:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b3d2:	f003 0305 	and.w	r3, r3, #5
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d16b      	bne.n	800b4b2 <ip6_route+0xf6>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 800b3da:	7c0a      	ldrb	r2, [r1, #16]
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 800b3dc:	b12a      	cbz	r2, 800b3ea <ip6_route+0x2e>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 800b3de:	f890 30de 	ldrb.w	r3, [r0, #222]	; 0xde
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	429a      	cmp	r2, r3
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 800b3e8:	d163      	bne.n	800b4b2 <ip6_route+0xf6>
}
 800b3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ip6_addr_has_zone(dest)) {
 800b3ee:	7c0a      	ldrb	r2, [r1, #16]
 800b3f0:	2a00      	cmp	r2, #0
 800b3f2:	d15c      	bne.n	800b4ae <ip6_route+0xf2>
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 800b3f4:	680d      	ldr	r5, [r1, #0]
 800b3f6:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 800b3fa:	ea05 0203 	and.w	r2, r5, r3
 800b3fe:	f248 06fe 	movw	r6, #33022	; 0x80fe
 800b402:	42b2      	cmp	r2, r6
 800b404:	d01c      	beq.n	800b440 <ip6_route+0x84>
 800b406:	f648 72ff 	movw	r2, #36863	; 0x8fff
 800b40a:	402a      	ands	r2, r5
 800b40c:	f240 17ff 	movw	r7, #511	; 0x1ff
 800b410:	42ba      	cmp	r2, r7
 800b412:	d015      	beq.n	800b440 <ip6_route+0x84>
 800b414:	f240 27ff 	movw	r7, #767	; 0x2ff
 800b418:	42ba      	cmp	r2, r7
 800b41a:	d011      	beq.n	800b440 <ip6_route+0x84>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	4013      	ands	r3, r2
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 800b420:	42b3      	cmp	r3, r6
 800b422:	d00d      	beq.n	800b440 <ip6_route+0x84>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 800b424:	2a00      	cmp	r2, #0
 800b426:	f040 8086 	bne.w	800b536 <ip6_route+0x17a>
      ip6_addr_isloopback(src)) {
 800b42a:	6863      	ldr	r3, [r4, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f040 8082 	bne.w	800b536 <ip6_route+0x17a>
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d17e      	bne.n	800b536 <ip6_route+0x17a>
 800b438:	68e3      	ldr	r3, [r4, #12]
 800b43a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b43e:	d17a      	bne.n	800b536 <ip6_route+0x17a>
    if (ip6_addr_has_zone(src)) {
 800b440:	7c22      	ldrb	r2, [r4, #16]
 800b442:	2a00      	cmp	r2, #0
 800b444:	d144      	bne.n	800b4d0 <ip6_route+0x114>
      NETIF_FOREACH(netif) {
 800b446:	2800      	cmp	r0, #0
 800b448:	d033      	beq.n	800b4b2 <ip6_route+0xf6>
        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 800b44a:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b44e:	f003 0305 	and.w	r3, r3, #5
 800b452:	2b05      	cmp	r3, #5
 800b454:	d11c      	bne.n	800b490 <ip6_route+0xd4>
 800b456:	f100 0294 	add.w	r2, r0, #148	; 0x94
 800b45a:	4603      	mov	r3, r0
 800b45c:	f100 0197 	add.w	r1, r0, #151	; 0x97
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 800b460:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b464:	06ed      	lsls	r5, r5, #27
 800b466:	d50f      	bpl.n	800b488 <ip6_route+0xcc>
 800b468:	6826      	ldr	r6, [r4, #0]
 800b46a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800b46c:	42ae      	cmp	r6, r5
 800b46e:	d10b      	bne.n	800b488 <ip6_route+0xcc>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 800b470:	6866      	ldr	r6, [r4, #4]
 800b472:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800b474:	42ae      	cmp	r6, r5
 800b476:	d107      	bne.n	800b488 <ip6_route+0xcc>
 800b478:	68a6      	ldr	r6, [r4, #8]
 800b47a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b47c:	42ae      	cmp	r6, r5
 800b47e:	d103      	bne.n	800b488 <ip6_route+0xcc>
 800b480:	68e6      	ldr	r6, [r4, #12]
 800b482:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b484:	42ae      	cmp	r6, r5
 800b486:	d0b0      	beq.n	800b3ea <ip6_route+0x2e>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800b488:	428a      	cmp	r2, r1
 800b48a:	f103 0318 	add.w	r3, r3, #24
 800b48e:	d1e7      	bne.n	800b460 <ip6_route+0xa4>
      NETIF_FOREACH(netif) {
 800b490:	6800      	ldr	r0, [r0, #0]
 800b492:	e7d8      	b.n	800b446 <ip6_route+0x8a>
      if (ip6_addr_test_zone(dest, netif) &&
 800b494:	f890 30de 	ldrb.w	r3, [r0, #222]	; 0xde
 800b498:	3301      	adds	r3, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d105      	bne.n	800b4ac <ip6_route+0xf0>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 800b4a0:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
      if (ip6_addr_test_zone(dest, netif) &&
 800b4a4:	07d9      	lsls	r1, r3, #31
 800b4a6:	d501      	bpl.n	800b4ac <ip6_route+0xf0>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 800b4a8:	075b      	lsls	r3, r3, #29
 800b4aa:	d49e      	bmi.n	800b3ea <ip6_route+0x2e>
    NETIF_FOREACH(netif) {
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1f0      	bne.n	800b494 <ip6_route+0xd8>
    return NULL;
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	e799      	b.n	800b3ea <ip6_route+0x2e>
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 800b4b6:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b4ba:	07df      	lsls	r7, r3, #31
 800b4bc:	d507      	bpl.n	800b4ce <ip6_route+0x112>
 800b4be:	075e      	lsls	r6, r3, #29
 800b4c0:	d505      	bpl.n	800b4ce <ip6_route+0x112>
            ip6_addr_test_zone(src, netif)) {
 800b4c2:	f890 30de 	ldrb.w	r3, [r0, #222]	; 0xde
 800b4c6:	3301      	adds	r3, #1
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d08d      	beq.n	800b3ea <ip6_route+0x2e>
      NETIF_FOREACH(netif) {
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1f0      	bne.n	800b4b6 <ip6_route+0xfa>
 800b4d4:	e7ed      	b.n	800b4b2 <ip6_route+0xf6>
    if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 800b4d6:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b4da:	f003 0305 	and.w	r3, r3, #5
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d128      	bne.n	800b534 <ip6_route+0x178>
 800b4e2:	eba0 0c80 	sub.w	ip, r0, r0, lsl #2
 800b4e6:	f100 0294 	add.w	r2, r0, #148	; 0x94
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f100 0e97 	add.w	lr, r0, #151	; 0x97
 800b4f0:	f5ac 7cde 	sub.w	ip, ip, #444	; 0x1bc
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 800b4f4:	f812 6b01 	ldrb.w	r6, [r2], #1
 800b4f8:	06f7      	lsls	r7, r6, #27
 800b4fa:	d517      	bpl.n	800b52c <ip6_route+0x170>
 800b4fc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800b4fe:	42b5      	cmp	r5, r6
 800b500:	d114      	bne.n	800b52c <ip6_route+0x170>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 800b502:	684f      	ldr	r7, [r1, #4]
 800b504:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800b506:	42b7      	cmp	r7, r6
 800b508:	d110      	bne.n	800b52c <ip6_route+0x170>
 800b50a:	f893 605c 	ldrb.w	r6, [r3, #92]	; 0x5c
 800b50e:	b96e      	cbnz	r6, 800b52c <ip6_route+0x170>
          (netif_ip6_addr_isstatic(netif, i) ||
 800b510:	f85c 6022 	ldr.w	r6, [ip, r2, lsl #2]
 800b514:	2e00      	cmp	r6, #0
 800b516:	f43f af68 	beq.w	800b3ea <ip6_route+0x2e>
 800b51a:	688f      	ldr	r7, [r1, #8]
 800b51c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800b51e:	42b7      	cmp	r7, r6
 800b520:	d104      	bne.n	800b52c <ip6_route+0x170>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 800b522:	68cf      	ldr	r7, [r1, #12]
 800b524:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 800b526:	42b7      	cmp	r7, r6
 800b528:	f43f af5f 	beq.w	800b3ea <ip6_route+0x2e>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800b52c:	4572      	cmp	r2, lr
 800b52e:	f103 0318 	add.w	r3, r3, #24
 800b532:	d1df      	bne.n	800b4f4 <ip6_route+0x138>
  NETIF_FOREACH(netif) {
 800b534:	6800      	ldr	r0, [r0, #0]
 800b536:	2800      	cmp	r0, #0
 800b538:	d1cd      	bne.n	800b4d6 <ip6_route+0x11a>
  netif = nd6_find_route(dest);
 800b53a:	4608      	mov	r0, r1
 800b53c:	f002 fc86 	bl	800de4c <nd6_find_route>
  if (netif != NULL) {
 800b540:	2800      	cmp	r0, #0
 800b542:	f47f af52 	bne.w	800b3ea <ip6_route+0x2e>
  if (!ip6_addr_isany(src)) {
 800b546:	6821      	ldr	r1, [r4, #0]
 800b548:	b929      	cbnz	r1, 800b556 <ip6_route+0x19a>
 800b54a:	6863      	ldr	r3, [r4, #4]
 800b54c:	b91b      	cbnz	r3, 800b556 <ip6_route+0x19a>
 800b54e:	68a3      	ldr	r3, [r4, #8]
 800b550:	b90b      	cbnz	r3, 800b556 <ip6_route+0x19a>
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	b113      	cbz	r3, 800b55c <ip6_route+0x1a0>
    NETIF_FOREACH(netif) {
 800b556:	f8d8 0000 	ldr.w	r0, [r8]
 800b55a:	b948      	cbnz	r0, 800b570 <ip6_route+0x1b4>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 800b55c:	4b1a      	ldr	r3, [pc, #104]	; (800b5c8 <ip6_route+0x20c>)
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	2800      	cmp	r0, #0
 800b562:	d0a6      	beq.n	800b4b2 <ip6_route+0xf6>
 800b564:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b568:	f003 0305 	and.w	r3, r3, #5
 800b56c:	2b05      	cmp	r3, #5
 800b56e:	e73b      	b.n	800b3e8 <ip6_route+0x2c>
      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 800b570:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800b574:	f003 0305 	and.w	r3, r3, #5
 800b578:	2b05      	cmp	r3, #5
 800b57a:	d121      	bne.n	800b5c0 <ip6_route+0x204>
 800b57c:	f100 0294 	add.w	r2, r0, #148	; 0x94
 800b580:	4603      	mov	r3, r0
 800b582:	f100 0597 	add.w	r5, r0, #151	; 0x97
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 800b586:	f812 6b01 	ldrb.w	r6, [r2], #1
 800b58a:	06f6      	lsls	r6, r6, #27
 800b58c:	d514      	bpl.n	800b5b8 <ip6_route+0x1fc>
 800b58e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800b590:	42b1      	cmp	r1, r6
 800b592:	d111      	bne.n	800b5b8 <ip6_route+0x1fc>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 800b594:	6867      	ldr	r7, [r4, #4]
 800b596:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800b598:	42b7      	cmp	r7, r6
 800b59a:	d10d      	bne.n	800b5b8 <ip6_route+0x1fc>
 800b59c:	68a7      	ldr	r7, [r4, #8]
 800b59e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800b5a0:	42b7      	cmp	r7, r6
 800b5a2:	d109      	bne.n	800b5b8 <ip6_route+0x1fc>
 800b5a4:	68e7      	ldr	r7, [r4, #12]
 800b5a6:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 800b5a8:	42b7      	cmp	r7, r6
 800b5aa:	d105      	bne.n	800b5b8 <ip6_route+0x1fc>
 800b5ac:	7c27      	ldrb	r7, [r4, #16]
 800b5ae:	f893 605c 	ldrb.w	r6, [r3, #92]	; 0x5c
 800b5b2:	42b7      	cmp	r7, r6
 800b5b4:	f43f af19 	beq.w	800b3ea <ip6_route+0x2e>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800b5b8:	4295      	cmp	r5, r2
 800b5ba:	f103 0318 	add.w	r3, r3, #24
 800b5be:	d1e2      	bne.n	800b586 <ip6_route+0x1ca>
    NETIF_FOREACH(netif) {
 800b5c0:	6800      	ldr	r0, [r0, #0]
 800b5c2:	e7ca      	b.n	800b55a <ip6_route+0x19e>
 800b5c4:	20016108 	.word	0x20016108
 800b5c8:	2001610c 	.word	0x2001610c

0800b5cc <ip6_select_source_address>:
{
 800b5cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4680      	mov	r8, r0
  if (ip6_addr_isglobal(dest)) {
 800b5d2:	6808      	ldr	r0, [r1, #0]
 800b5d4:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 800b5d8:	2b20      	cmp	r3, #32
{
 800b5da:	460c      	mov	r4, r1
  if (ip6_addr_isglobal(dest)) {
 800b5dc:	d067      	beq.n	800b6ae <ip6_select_source_address+0xe2>
  } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
 800b5de:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 800b5e2:	4003      	ands	r3, r0
 800b5e4:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d05e      	beq.n	800b6aa <ip6_select_source_address+0xde>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d149      	bne.n	800b684 <ip6_select_source_address+0xb8>
 800b5f0:	684b      	ldr	r3, [r1, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d15b      	bne.n	800b6ae <ip6_select_source_address+0xe2>
 800b5f6:	688b      	ldr	r3, [r1, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d158      	bne.n	800b6ae <ip6_select_source_address+0xe2>
 800b5fc:	68cb      	ldr	r3, [r1, #12]
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 800b5fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b602:	bf0c      	ite	eq
 800b604:	2302      	moveq	r3, #2
 800b606:	230e      	movne	r3, #14
 800b608:	2100      	movs	r1, #0
 800b60a:	f108 0994 	add.w	r9, r8, #148	; 0x94
 800b60e:	4645      	mov	r5, r8
  u8_t best_bits = 0;
 800b610:	468a      	mov	sl, r1
  u8_t best_pref = 0;
 800b612:	468b      	mov	fp, r1
  s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
 800b614:	468e      	mov	lr, r1
  best_addr = NULL;
 800b616:	4608      	mov	r0, r1
    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
 800b618:	f819 cb01 	ldrb.w	ip, [r9], #1
 800b61c:	f01c 0f10 	tst.w	ip, #16
 800b620:	d055      	beq.n	800b6ce <ip6_select_source_address+0x102>
    if (ip6_addr_isglobal(cand_addr)) {
 800b622:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800b624:	f007 02e0 	and.w	r2, r7, #224	; 0xe0
 800b628:	2a20      	cmp	r2, #32
 800b62a:	d044      	beq.n	800b6b6 <ip6_select_source_address+0xea>
    } else if (ip6_addr_islinklocal(cand_addr)) {
 800b62c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800b630:	403a      	ands	r2, r7
 800b632:	f248 06fe 	movw	r6, #33022	; 0x80fe
 800b636:	42b2      	cmp	r2, r6
 800b638:	d03f      	beq.n	800b6ba <ip6_select_source_address+0xee>
    } else if (ip6_addr_isuniquelocal(cand_addr)) {
 800b63a:	f007 06fe 	and.w	r6, r7, #254	; 0xfe
 800b63e:	2efc      	cmp	r6, #252	; 0xfc
 800b640:	d03d      	beq.n	800b6be <ip6_select_source_address+0xf2>
      cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
 800b642:	f24c 06fe 	movw	r6, #49406	; 0xc0fe
 800b646:	42b2      	cmp	r2, r6
 800b648:	bf0c      	ite	eq
 800b64a:	2205      	moveq	r2, #5
 800b64c:	220f      	movne	r2, #15
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 800b64e:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
 800b652:	f1d6 0c00 	rsbs	ip, r6, #0
 800b656:	eb4c 0c06 	adc.w	ip, ip, r6
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 800b65a:	6826      	ldr	r6, [r4, #0]
 800b65c:	42b7      	cmp	r7, r6
 800b65e:	d130      	bne.n	800b6c2 <ip6_select_source_address+0xf6>
 800b660:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800b662:	6866      	ldr	r6, [r4, #4]
 800b664:	42b7      	cmp	r7, r6
 800b666:	d12c      	bne.n	800b6c2 <ip6_select_source_address+0xf6>
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 800b668:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 800b66a:	68a6      	ldr	r6, [r4, #8]
 800b66c:	42b7      	cmp	r7, r6
 800b66e:	d134      	bne.n	800b6da <ip6_select_source_address+0x10e>
 800b670:	6daf      	ldr	r7, [r5, #88]	; 0x58
 800b672:	68e6      	ldr	r6, [r4, #12]
 800b674:	42b7      	cmp	r7, r6
 800b676:	d130      	bne.n	800b6da <ip6_select_source_address+0x10e>
      return netif_ip_addr6(netif, i); /* Rule 1 */
 800b678:	2018      	movs	r0, #24
 800b67a:	fb00 8001 	mla	r0, r0, r1, r8
 800b67e:	304c      	adds	r0, #76	; 0x4c
}
 800b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (ip6_addr_isuniquelocal(dest)) {
 800b684:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 800b688:	2afc      	cmp	r2, #252	; 0xfc
 800b68a:	d012      	beq.n	800b6b2 <ip6_select_source_address+0xe6>
  } else if (ip6_addr_ismulticast(dest)) {
 800b68c:	b2c2      	uxtb	r2, r0
 800b68e:	2aff      	cmp	r2, #255	; 0xff
 800b690:	d104      	bne.n	800b69c <ip6_select_source_address+0xd0>
    dest_scope = ip6_addr_multicast_scope(dest);
 800b692:	f002 fd08 	bl	800e0a6 <lwip_htonl>
 800b696:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b69a:	e7b5      	b.n	800b608 <ip6_select_source_address+0x3c>
    dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 800b69c:	f24c 00fe 	movw	r0, #49406	; 0xc0fe
 800b6a0:	4283      	cmp	r3, r0
 800b6a2:	bf14      	ite	ne
 800b6a4:	230e      	movne	r3, #14
 800b6a6:	2305      	moveq	r3, #5
 800b6a8:	e7ae      	b.n	800b608 <ip6_select_source_address+0x3c>
    dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	e7ac      	b.n	800b608 <ip6_select_source_address+0x3c>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 800b6ae:	230e      	movs	r3, #14
 800b6b0:	e7aa      	b.n	800b608 <ip6_select_source_address+0x3c>
    dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 800b6b2:	2308      	movs	r3, #8
 800b6b4:	e7a8      	b.n	800b608 <ip6_select_source_address+0x3c>
      cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 800b6b6:	220e      	movs	r2, #14
 800b6b8:	e7c9      	b.n	800b64e <ip6_select_source_address+0x82>
      cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	e7c7      	b.n	800b64e <ip6_select_source_address+0x82>
      cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 800b6be:	2208      	movs	r2, #8
 800b6c0:	e7c5      	b.n	800b64e <ip6_select_source_address+0x82>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 800b6c2:	2600      	movs	r6, #0
    if ((best_addr == NULL) || /* no alternative yet */
 800b6c4:	b170      	cbz	r0, 800b6e4 <ip6_select_source_address+0x118>
 800b6c6:	4572      	cmp	r2, lr
 800b6c8:	da09      	bge.n	800b6de <ip6_select_source_address+0x112>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	dd0a      	ble.n	800b6e4 <ip6_select_source_address+0x118>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800b6ce:	3101      	adds	r1, #1
 800b6d0:	2903      	cmp	r1, #3
 800b6d2:	f105 0518 	add.w	r5, r5, #24
 800b6d6:	d19f      	bne.n	800b618 <ip6_select_source_address+0x4c>
 800b6d8:	e7d2      	b.n	800b680 <ip6_select_source_address+0xb4>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 800b6da:	2601      	movs	r6, #1
 800b6dc:	e7f2      	b.n	800b6c4 <ip6_select_source_address+0xf8>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 800b6de:	dd07      	ble.n	800b6f0 <ip6_select_source_address+0x124>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 800b6e0:	4573      	cmp	r3, lr
 800b6e2:	ddf4      	ble.n	800b6ce <ip6_select_source_address+0x102>
      best_addr = netif_ip_addr6(netif, i);
 800b6e4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 800b6e8:	46b2      	mov	sl, r6
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 800b6ea:	46e3      	mov	fp, ip
 800b6ec:	4696      	mov	lr, r2
 800b6ee:	e7ee      	b.n	800b6ce <ip6_select_source_address+0x102>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 800b6f0:	d1ed      	bne.n	800b6ce <ip6_select_source_address+0x102>
        ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
 800b6f2:	45dc      	cmp	ip, fp
 800b6f4:	d8f6      	bhi.n	800b6e4 <ip6_select_source_address+0x118>
 800b6f6:	d1ea      	bne.n	800b6ce <ip6_select_source_address+0x102>
        ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
 800b6f8:	4556      	cmp	r6, sl
 800b6fa:	d9e8      	bls.n	800b6ce <ip6_select_source_address+0x102>
 800b6fc:	e7f2      	b.n	800b6e4 <ip6_select_source_address+0x118>
	...

0800b700 <ip6_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip6_input(struct pbuf *p, struct netif *inp)
{
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT_CORE_LOCKED();

  IP6_STATS_INC(ip6.recv);

  /* identify the IP header */
  ip6hdr = (struct ip6_hdr *)p->payload;
 800b704:	6846      	ldr	r6, [r0, #4]
{
 800b706:	b087      	sub	sp, #28
 800b708:	4604      	mov	r4, r0
  if (IP6H_V(ip6hdr) != 6) {
 800b70a:	6830      	ldr	r0, [r6, #0]
{
 800b70c:	460f      	mov	r7, r1
  if (IP6H_V(ip6hdr) != 6) {
 800b70e:	f002 fcca 	bl	800e0a6 <lwip_htonl>
 800b712:	0f05      	lsrs	r5, r0, #28
 800b714:	2d06      	cmp	r5, #6
 800b716:	d006      	beq.n	800b726 <ip6_input+0x26>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b718:	4620      	mov	r0, r4
 800b71a:	f003 fe31 	bl	800f380 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip6_addr_set_zero(ip6_current_src_addr());
  ip6_addr_set_zero(ip6_current_dest_addr());

  return ERR_OK;
}
 800b71e:	2000      	movs	r0, #0
 800b720:	b007      	add	sp, #28
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 800b726:	8963      	ldrh	r3, [r4, #10]
 800b728:	2b27      	cmp	r3, #39	; 0x27
 800b72a:	d803      	bhi.n	800b734 <ip6_input+0x34>
    if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
 800b72c:	88b0      	ldrh	r0, [r6, #4]
 800b72e:	f002 fcb7 	bl	800e0a0 <lwip_htons>
 800b732:	e7f1      	b.n	800b718 <ip6_input+0x18>
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 800b734:	88b0      	ldrh	r0, [r6, #4]
 800b736:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800b73a:	f002 fcb1 	bl	800e0a0 <lwip_htons>
 800b73e:	f1a8 0827 	sub.w	r8, r8, #39	; 0x27
 800b742:	4580      	cmp	r8, r0
 800b744:	ddf2      	ble.n	800b72c <ip6_input+0x2c>
  pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
 800b746:	88b0      	ldrh	r0, [r6, #4]
 800b748:	f002 fcaa 	bl	800e0a0 <lwip_htons>
 800b74c:	3028      	adds	r0, #40	; 0x28
 800b74e:	b281      	uxth	r1, r0
 800b750:	4620      	mov	r0, r4
 800b752:	f003 fef9 	bl	800f548 <pbuf_realloc>
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
 800b756:	4abd      	ldr	r2, [pc, #756]	; (800ba4c <ip6_input+0x34c>)
 800b758:	69b0      	ldr	r0, [r6, #24]
 800b75a:	62d0      	str	r0, [r2, #44]	; 0x2c
 800b75c:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800b760:	f8c2 c030 	str.w	ip, [r2, #48]	; 0x30
 800b764:	f8d6 9020 	ldr.w	r9, [r6, #32]
 800b768:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
 800b76c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b76e:	6393      	str	r3, [r2, #56]	; 0x38
 800b770:	f04f 0e00 	mov.w	lr, #0
 800b774:	f882 e03c 	strb.w	lr, [r2, #60]	; 0x3c
 800b778:	f882 5040 	strb.w	r5, [r2, #64]	; 0x40
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 800b77c:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800b780:	f8c2 8014 	str.w	r8, [r2, #20]
 800b784:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800b788:	f8c2 b018 	str.w	fp, [r2, #24]
 800b78c:	f8d6 a010 	ldr.w	sl, [r6, #16]
 800b790:	f8c2 a01c 	str.w	sl, [r2, #28]
 800b794:	6971      	ldr	r1, [r6, #20]
 800b796:	6211      	str	r1, [r2, #32]
 800b798:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
 800b79c:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 800b7a0:	ea50 020c 	orrs.w	r2, r0, ip
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 800b7a4:	9101      	str	r1, [sp, #4]
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 800b7a6:	9202      	str	r2, [sp, #8]
 800b7a8:	d102      	bne.n	800b7b0 <ip6_input+0xb0>
 800b7aa:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
 800b7ae:	d0b3      	beq.n	800b718 <ip6_input+0x18>
 800b7b0:	f1b8 0f00 	cmp.w	r8, #0
 800b7b4:	d167      	bne.n	800b886 <ip6_input+0x186>
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 800b7b6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ba:	d102      	bne.n	800b7c2 <ip6_input+0xc2>
 800b7bc:	f51a 3f80 	cmn.w	sl, #65536	; 0x10000
 800b7c0:	d0aa      	beq.n	800b718 <ip6_input+0x18>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 800b7c2:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800b7c6:	4001      	ands	r1, r0
 800b7c8:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800b7cc:	4291      	cmp	r1, r2
 800b7ce:	d00a      	beq.n	800b7e6 <ip6_input+0xe6>
 800b7d0:	f648 72ff 	movw	r2, #36863	; 0x8fff
 800b7d4:	4002      	ands	r2, r0
 800b7d6:	f240 15ff 	movw	r5, #511	; 0x1ff
 800b7da:	42aa      	cmp	r2, r5
 800b7dc:	d003      	beq.n	800b7e6 <ip6_input+0xe6>
 800b7de:	f240 25ff 	movw	r5, #767	; 0x2ff
 800b7e2:	42aa      	cmp	r2, r5
 800b7e4:	d153      	bne.n	800b88e <ip6_input+0x18e>
 800b7e6:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	4d97      	ldr	r5, [pc, #604]	; (800ba4c <ip6_input+0x34c>)
 800b7f0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 800b7f4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800b7f8:	f248 0efe 	movw	lr, #33022	; 0x80fe
 800b7fc:	ea08 0202 	and.w	r2, r8, r2
 800b800:	4572      	cmp	r2, lr
 800b802:	bf08      	it	eq
 800b804:	f897 e0de 	ldrbeq.w	lr, [r7, #222]	; 0xde
  ip_data.current_ip6_header = ip6hdr;
 800b808:	60ee      	str	r6, [r5, #12]
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 800b80a:	bf06      	itte	eq
 800b80c:	f10e 0e01 	addeq.w	lr, lr, #1
 800b810:	fa5f fe8e 	uxtbeq.w	lr, lr
 800b814:	f04f 0e00 	movne.w	lr, #0
 800b818:	f885 e024 	strb.w	lr, [r5, #36]	; 0x24
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 800b81c:	fa5f fe80 	uxtb.w	lr, r0
 800b820:	f1be 0fff 	cmp.w	lr, #255	; 0xff
  ip_data.current_input_netif = inp;
 800b824:	e9c5 7700 	strd	r7, r7, [r5]
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 800b828:	d135      	bne.n	800b896 <ip6_input+0x196>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 800b82a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b82e:	4290      	cmp	r0, r2
 800b830:	d003      	beq.n	800b83a <ip6_input+0x13a>
 800b832:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b836:	4290      	cmp	r0, r2
 800b838:	d105      	bne.n	800b846 <ip6_input+0x146>
 800b83a:	ea5c 0209 	orrs.w	r2, ip, r9
 800b83e:	d102      	bne.n	800b846 <ip6_input+0x146>
 800b840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b844:	d025      	beq.n	800b892 <ip6_input+0x192>
    else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
 800b846:	4982      	ldr	r1, [pc, #520]	; (800ba50 <ip6_input+0x350>)
 800b848:	4638      	mov	r0, r7
 800b84a:	f000 ffd3 	bl	800c7f4 <mld6_lookfor_group>
 800b84e:	bb00      	cbnz	r0, 800b892 <ip6_input+0x192>
      netif = NULL;
 800b850:	f04f 0800 	mov.w	r8, #0
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 800b854:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800b858:	4313      	orrs	r3, r2
 800b85a:	69ea      	ldr	r2, [r5, #28]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	6a2a      	ldr	r2, [r5, #32]
 800b860:	4313      	orrs	r3, r2
 800b862:	d149      	bne.n	800b8f8 <ip6_input+0x1f8>
 800b864:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b866:	f240 23ff 	movw	r3, #767	; 0x2ff
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d107      	bne.n	800b87e <ip6_input+0x17e>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 800b86e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b874:	d103      	bne.n	800b87e <ip6_input+0x17e>
 800b876:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800b87a:	2bff      	cmp	r3, #255	; 0xff
 800b87c:	d03c      	beq.n	800b8f8 <ip6_input+0x1f8>
      pbuf_free(p);
 800b87e:	4620      	mov	r0, r4
 800b880:	f003 fd7e 	bl	800f380 <pbuf_free>
      break;
 800b884:	e142      	b.n	800bb0c <ip6_input+0x40c>
     ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
 800b886:	fa5f f288 	uxtb.w	r2, r8
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 800b88a:	2aff      	cmp	r2, #255	; 0xff
 800b88c:	e798      	b.n	800b7c0 <ip6_input+0xc0>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 800b88e:	2200      	movs	r2, #0
 800b890:	e7ad      	b.n	800b7ee <ip6_input+0xee>
      netif = NULL;
 800b892:	46b8      	mov	r8, r7
 800b894:	e7de      	b.n	800b854 <ip6_input+0x154>
    if (ip6_input_accept(inp)) {
 800b896:	4638      	mov	r0, r7
 800b898:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b89c:	9303      	str	r3, [sp, #12]
 800b89e:	f7ff fd5d 	bl	800b35c <ip6_input_accept>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d1f5      	bne.n	800b892 <ip6_input+0x192>
      if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
 800b8a6:	9904      	ldr	r1, [sp, #16]
 800b8a8:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800b8ac:	4281      	cmp	r1, r0
 800b8ae:	d0cf      	beq.n	800b850 <ip6_input+0x150>
 800b8b0:	9a05      	ldr	r2, [sp, #20]
 800b8b2:	4282      	cmp	r2, r0
 800b8b4:	d0cc      	beq.n	800b850 <ip6_input+0x150>
      if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
 800b8b6:	9b02      	ldr	r3, [sp, #8]
 800b8b8:	ea59 0303 	orrs.w	r3, r9, r3
 800b8bc:	d103      	bne.n	800b8c6 <ip6_input+0x1c6>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8c4:	d0c4      	beq.n	800b850 <ip6_input+0x150>
          ip6_addr_isloopback(ip6_current_src_addr())) {
 800b8c6:	ea48 080b 	orr.w	r8, r8, fp
 800b8ca:	ea58 030a 	orrs.w	r3, r8, sl
 800b8ce:	d103      	bne.n	800b8d8 <ip6_input+0x1d8>
 800b8d0:	9b01      	ldr	r3, [sp, #4]
 800b8d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8d6:	d0bb      	beq.n	800b850 <ip6_input+0x150>
      NETIF_FOREACH(netif) {
 800b8d8:	4b5e      	ldr	r3, [pc, #376]	; (800ba54 <ip6_input+0x354>)
 800b8da:	f8d3 8000 	ldr.w	r8, [r3]
 800b8de:	f1b8 0f00 	cmp.w	r8, #0
 800b8e2:	d0b5      	beq.n	800b850 <ip6_input+0x150>
        if (netif == inp) {
 800b8e4:	45b8      	cmp	r8, r7
 800b8e6:	d004      	beq.n	800b8f2 <ip6_input+0x1f2>
        if (ip6_input_accept(netif)) {
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	f7ff fd37 	bl	800b35c <ip6_input_accept>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d1b0      	bne.n	800b854 <ip6_input+0x154>
      NETIF_FOREACH(netif) {
 800b8f2:	f8d8 8000 	ldr.w	r8, [r8]
 800b8f6:	e7f2      	b.n	800b8de <ip6_input+0x1de>
  if (netif == NULL) {
 800b8f8:	f1b8 0f00 	cmp.w	r8, #0
 800b8fc:	d0bf      	beq.n	800b87e <ip6_input+0x17e>
  pbuf_remove_header(p, IP6_HLEN);
 800b8fe:	2128      	movs	r1, #40	; 0x28
 800b900:	4620      	mov	r0, r4
  ip_data.current_netif = netif;
 800b902:	f8c5 8000 	str.w	r8, [r5]
  pbuf_remove_header(p, IP6_HLEN);
 800b906:	f003 fd07 	bl	800f318 <pbuf_remove_header>
  nexth = &IP6H_NEXTH(ip6hdr);
 800b90a:	f106 0806 	add.w	r8, r6, #6
  hlen = hlen_tot = IP6_HLEN;
 800b90e:	f04f 0928 	mov.w	r9, #40	; 0x28
  while (*nexth != IP6_NEXTH_NONE)
 800b912:	f898 3000 	ldrb.w	r3, [r8]
 800b916:	2b3b      	cmp	r3, #59	; 0x3b
 800b918:	d008      	beq.n	800b92c <ip6_input+0x22c>
    switch (*nexth) {
 800b91a:	2b2c      	cmp	r3, #44	; 0x2c
 800b91c:	f000 80c0 	beq.w	800baa0 <ip6_input+0x3a0>
 800b920:	d81f      	bhi.n	800b962 <ip6_input+0x262>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d03f      	beq.n	800b9a6 <ip6_input+0x2a6>
 800b926:	2b2b      	cmp	r3, #43	; 0x2b
 800b928:	f000 8096 	beq.w	800ba58 <ip6_input+0x358>
  ip_data.current_ip_header_tot_len = hlen_tot;
 800b92c:	f8a5 9010 	strh.w	r9, [r5, #16]
    switch (*nexth) {
 800b930:	f898 3000 	ldrb.w	r3, [r8]
 800b934:	2b3a      	cmp	r3, #58	; 0x3a
 800b936:	f000 8100 	beq.w	800bb3a <ip6_input+0x43a>
 800b93a:	f200 80df 	bhi.w	800bafc <ip6_input+0x3fc>
 800b93e:	2b06      	cmp	r3, #6
 800b940:	f000 80f6 	beq.w	800bb30 <ip6_input+0x430>
 800b944:	2b11      	cmp	r3, #17
 800b946:	f000 80dd 	beq.w	800bb04 <ip6_input+0x404>
        pbuf_add_header_force(p, hlen_tot);
 800b94a:	4649      	mov	r1, r9
 800b94c:	4620      	mov	r0, r4
 800b94e:	f003 fce0 	bl	800f312 <pbuf_add_header_force>
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 800b952:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b956:	2bff      	cmp	r3, #255	; 0xff
 800b958:	d091      	beq.n	800b87e <ip6_input+0x17e>
 800b95a:	79b3      	ldrb	r3, [r6, #6]
 800b95c:	2b3a      	cmp	r3, #58	; 0x3a
 800b95e:	d08e      	beq.n	800b87e <ip6_input+0x17e>
 800b960:	e04a      	b.n	800b9f8 <ip6_input+0x2f8>
    switch (*nexth) {
 800b962:	2b3c      	cmp	r3, #60	; 0x3c
 800b964:	d1e2      	bne.n	800b92c <ip6_input+0x22c>
      dest_hdr = (struct ip6_dest_hdr *)p->payload;
 800b966:	f8d4 8004 	ldr.w	r8, [r4, #4]
      if ((p->len < 8) || (hlen > p->len)) {
 800b96a:	8963      	ldrh	r3, [r4, #10]
      hlen = 8 * (1 + dest_hdr->_hlen);
 800b96c:	f898 1001 	ldrb.w	r1, [r8, #1]
      if ((p->len < 8) || (hlen > p->len)) {
 800b970:	2b07      	cmp	r3, #7
      hlen = 8 * (1 + dest_hdr->_hlen);
 800b972:	f101 0101 	add.w	r1, r1, #1
 800b976:	ea4f 01c1 	mov.w	r1, r1, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 800b97a:	d980      	bls.n	800b87e <ip6_input+0x17e>
 800b97c:	428b      	cmp	r3, r1
 800b97e:	f4ff af7e 	bcc.w	800b87e <ip6_input+0x17e>
      opt_offset = IP6_DEST_HLEN;
 800b982:	2002      	movs	r0, #2
        switch (IP6_OPT_TYPE(opt_hdr))
 800b984:	f818 3000 	ldrb.w	r3, [r8, r0]
 800b988:	2b05      	cmp	r3, #5
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
 800b98a:	eb08 0200 	add.w	r2, r8, r0
        switch (IP6_OPT_TYPE(opt_hdr))
 800b98e:	d004      	beq.n	800b99a <ip6_input+0x29a>
 800b990:	d842      	bhi.n	800ba18 <ip6_input+0x318>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d056      	beq.n	800ba44 <ip6_input+0x344>
 800b996:	2b01      	cmp	r3, #1
 800b998:	d142      	bne.n	800ba20 <ip6_input+0x320>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 800b99a:	7853      	ldrb	r3, [r2, #1]
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 800b99c:	3002      	adds	r0, #2
 800b99e:	4418      	add	r0, r3
      while (opt_offset < hlen)
 800b9a0:	4281      	cmp	r1, r0
 800b9a2:	dcef      	bgt.n	800b984 <ip6_input+0x284>
 800b9a4:	e01e      	b.n	800b9e4 <ip6_input+0x2e4>
      hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 800b9a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
      if ((p->len < 8) || (hlen > p->len)) {
 800b9aa:	8963      	ldrh	r3, [r4, #10]
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 800b9ac:	f898 1001 	ldrb.w	r1, [r8, #1]
      if ((p->len < 8) || (hlen > p->len)) {
 800b9b0:	2b07      	cmp	r3, #7
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 800b9b2:	f101 0101 	add.w	r1, r1, #1
 800b9b6:	ea4f 01c1 	mov.w	r1, r1, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 800b9ba:	f67f af60 	bls.w	800b87e <ip6_input+0x17e>
 800b9be:	428b      	cmp	r3, r1
 800b9c0:	f4ff af5d 	bcc.w	800b87e <ip6_input+0x17e>
      opt_offset = IP6_HBH_HLEN;
 800b9c4:	2002      	movs	r0, #2
        switch (IP6_OPT_TYPE(opt_hdr)) {
 800b9c6:	f818 3000 	ldrb.w	r3, [r8, r0]
 800b9ca:	2b05      	cmp	r3, #5
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
 800b9cc:	eb08 0200 	add.w	r2, r8, r0
        switch (IP6_OPT_TYPE(opt_hdr)) {
 800b9d0:	d003      	beq.n	800b9da <ip6_input+0x2da>
 800b9d2:	d814      	bhi.n	800b9fe <ip6_input+0x2fe>
 800b9d4:	b1eb      	cbz	r3, 800ba12 <ip6_input+0x312>
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d113      	bne.n	800ba02 <ip6_input+0x302>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 800b9da:	7853      	ldrb	r3, [r2, #1]
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 800b9dc:	3002      	adds	r0, #2
 800b9de:	4418      	add	r0, r3
      while (opt_offset < hlen)
 800b9e0:	4281      	cmp	r1, r0
 800b9e2:	dcf0      	bgt.n	800b9c6 <ip6_input+0x2c6>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 800b9e4:	4489      	add	r9, r1
 800b9e6:	fa1f f989 	uxth.w	r9, r9
        pbuf_remove_header(p, hlen);
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f003 fc94 	bl	800f318 <pbuf_remove_header>
    if (*nexth == IP6_NEXTH_HOPBYHOP) {
 800b9f0:	f898 3000 	ldrb.w	r3, [r8]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d18c      	bne.n	800b912 <ip6_input+0x212>
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	e01e      	b.n	800ba3c <ip6_input+0x33c>
 800b9fe:	2bc2      	cmp	r3, #194	; 0xc2
 800ba00:	e7ea      	b.n	800b9d8 <ip6_input+0x2d8>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
 800ba02:	099b      	lsrs	r3, r3, #6
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d018      	beq.n	800ba3a <ip6_input+0x33a>
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d011      	beq.n	800ba30 <ip6_input+0x330>
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d1e4      	bne.n	800b9da <ip6_input+0x2da>
 800ba10:	e735      	b.n	800b87e <ip6_input+0x17e>
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	e7e1      	b.n	800b9dc <ip6_input+0x2dc>
 800ba18:	2bc2      	cmp	r3, #194	; 0xc2
 800ba1a:	d0be      	beq.n	800b99a <ip6_input+0x29a>
 800ba1c:	2bc9      	cmp	r3, #201	; 0xc9
 800ba1e:	e7bb      	b.n	800b998 <ip6_input+0x298>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr))
 800ba20:	099b      	lsrs	r3, r3, #6
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d009      	beq.n	800ba3a <ip6_input+0x33a>
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d002      	beq.n	800ba30 <ip6_input+0x330>
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d1b5      	bne.n	800b99a <ip6_input+0x29a>
 800ba2e:	e726      	b.n	800b87e <ip6_input+0x17e>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 800ba30:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ba34:	2bff      	cmp	r3, #255	; 0xff
 800ba36:	f43f af22 	beq.w	800b87e <ip6_input+0x17e>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 800ba3a:	2102      	movs	r1, #2
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7ff fc81 	bl	800b344 <icmp6_param_problem>
 800ba42:	e71c      	b.n	800b87e <ip6_input+0x17e>
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
 800ba48:	e7a8      	b.n	800b99c <ip6_input+0x29c>
 800ba4a:	bf00      	nop
 800ba4c:	2000f4b8 	.word	0x2000f4b8
 800ba50:	2000f4e4 	.word	0x2000f4e4
 800ba54:	20016108 	.word	0x20016108
      rout_hdr = (struct ip6_rout_hdr *)p->payload;
 800ba58:	f8d4 8004 	ldr.w	r8, [r4, #4]
      if ((p->len < 8) || (hlen > p->len)) {
 800ba5c:	8962      	ldrh	r2, [r4, #10]
      hlen = 8 * (1 + rout_hdr->_hlen);
 800ba5e:	f898 3001 	ldrb.w	r3, [r8, #1]
      if ((p->len < 8) || (hlen > p->len)) {
 800ba62:	2a07      	cmp	r2, #7
      hlen = 8 * (1 + rout_hdr->_hlen);
 800ba64:	f103 0101 	add.w	r1, r3, #1
 800ba68:	ea4f 01c1 	mov.w	r1, r1, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 800ba6c:	f67f af07 	bls.w	800b87e <ip6_input+0x17e>
 800ba70:	428a      	cmp	r2, r1
 800ba72:	f4ff af04 	bcc.w	800b87e <ip6_input+0x17e>
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 800ba76:	f898 2003 	ldrb.w	r2, [r8, #3]
      hlen_tot = (u16_t)(hlen_tot + hlen);
 800ba7a:	4489      	add	r9, r1
 800ba7c:	fa1f f989 	uxth.w	r9, r9
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d0b2      	beq.n	800b9ea <ip6_input+0x2ea>
        if (rout_hdr->_hlen & 0x1) {
 800ba84:	07d8      	lsls	r0, r3, #31
 800ba86:	d503      	bpl.n	800ba90 <ip6_input+0x390>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
 800ba88:	f108 0201 	add.w	r2, r8, #1
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	e7d5      	b.n	800ba3c <ip6_input+0x33c>
        switch (IP6_ROUT_TYPE(rout_hdr))
 800ba90:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ba94:	3b02      	subs	r3, #2
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d9a7      	bls.n	800b9ea <ip6_input+0x2ea>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
 800ba9a:	f108 0202 	add.w	r2, r8, #2
 800ba9e:	e7f5      	b.n	800ba8c <ip6_input+0x38c>
      if (hlen > p->len) {
 800baa0:	8963      	ldrh	r3, [r4, #10]
      frag_hdr = (struct ip6_frag_hdr *)p->payload;
 800baa2:	f8d4 8004 	ldr.w	r8, [r4, #4]
      if (hlen > p->len) {
 800baa6:	2b07      	cmp	r3, #7
 800baa8:	f67f aee9 	bls.w	800b87e <ip6_input+0x17e>
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 800baac:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800bab0:	f002 faf6 	bl	800e0a0 <lwip_htons>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 800bab4:	f109 0908 	add.w	r9, r9, #8
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 800bab8:	07c2      	lsls	r2, r0, #31
      hlen_tot = (u16_t)(hlen_tot + hlen);
 800baba:	fa1f f989 	uxth.w	r9, r9
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 800babe:	d506      	bpl.n	800bace <ip6_input+0x3ce>
 800bac0:	88b0      	ldrh	r0, [r6, #4]
 800bac2:	f002 faed 	bl	800e0a0 <lwip_htons>
 800bac6:	0743      	lsls	r3, r0, #29
 800bac8:	d001      	beq.n	800bace <ip6_input+0x3ce>
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 800baca:	1d32      	adds	r2, r6, #4
 800bacc:	e7de      	b.n	800ba8c <ip6_input+0x38c>
      if ((frag_hdr->_fragment_offset &
 800bace:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800bad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bad6:	b90b      	cbnz	r3, 800badc <ip6_input+0x3dc>
        pbuf_remove_header(p, hlen);
 800bad8:	2108      	movs	r1, #8
 800bada:	e786      	b.n	800b9ea <ip6_input+0x2ea>
        p = ip6_reass(p);
 800badc:	4620      	mov	r0, r4
        ip_data.current_ip_header_tot_len = hlen_tot;
 800bade:	f8a5 9010 	strh.w	r9, [r5, #16]
        p = ip6_reass(p);
 800bae2:	f000 fb01 	bl	800c0e8 <ip6_reass>
        if (p == NULL) {
 800bae6:	4604      	mov	r4, r0
 800bae8:	b180      	cbz	r0, 800bb0c <ip6_input+0x40c>
        ip6hdr = (struct ip6_hdr *)p->payload;
 800baea:	6846      	ldr	r6, [r0, #4]
        pbuf_remove_header(p, IP6_HLEN);
 800baec:	2128      	movs	r1, #40	; 0x28
 800baee:	f003 fc13 	bl	800f318 <pbuf_remove_header>
        nexth = &IP6H_NEXTH(ip6hdr);
 800baf2:	f106 0806 	add.w	r8, r6, #6
        hlen = hlen_tot = IP6_HLEN;
 800baf6:	f04f 0928 	mov.w	r9, #40	; 0x28
 800bafa:	e779      	b.n	800b9f0 <ip6_input+0x2f0>
    switch (*nexth) {
 800bafc:	2b3b      	cmp	r3, #59	; 0x3b
 800bafe:	f43f aebe 	beq.w	800b87e <ip6_input+0x17e>
 800bb02:	e722      	b.n	800b94a <ip6_input+0x24a>
      udp_input(p, inp);
 800bb04:	4639      	mov	r1, r7
 800bb06:	4620      	mov	r0, r4
 800bb08:	f007 ff9c 	bl	8013a44 <udp_input>
  ip_data.current_netif = NULL;
 800bb0c:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800bb0e:	e9c5 3300 	strd	r3, r3, [r5]
  ip6_addr_set_zero(ip6_current_src_addr());
 800bb12:	e9c5 3305 	strd	r3, r3, [r5, #20]
 800bb16:	e9c5 3307 	strd	r3, r3, [r5, #28]
  ip6_addr_set_zero(ip6_current_dest_addr());
 800bb1a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
 800bb1e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
  ip_data.current_ip6_header = NULL;
 800bb22:	60eb      	str	r3, [r5, #12]
  ip_data.current_ip_header_tot_len = 0;
 800bb24:	822b      	strh	r3, [r5, #16]
  ip6_addr_set_zero(ip6_current_src_addr());
 800bb26:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  ip6_addr_set_zero(ip6_current_dest_addr());
 800bb2a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return ERR_OK;
 800bb2e:	e5f6      	b.n	800b71e <ip6_input+0x1e>
      tcp_input(p, inp);
 800bb30:	4639      	mov	r1, r7
 800bb32:	4620      	mov	r0, r4
 800bb34:	f005 fdf0 	bl	8011718 <tcp_input>
      break;
 800bb38:	e7e8      	b.n	800bb0c <ip6_input+0x40c>
      icmp6_input(p, inp);
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7ff fb63 	bl	800b208 <icmp6_input>
      break;
 800bb42:	e7e3      	b.n	800bb0c <ip6_input+0x40c>

0800bb44 <ip6_output_if_src>:
 */
err_t
ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
             u8_t hl, u8_t tc,
             u8_t nexth, struct netif *netif)
{
 800bb44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb48:	4699      	mov	r9, r3
  struct ip6_hdr *ip6hdr;
  ip6_addr_t dest_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bb4a:	7b83      	ldrb	r3, [r0, #14]
{
 800bb4c:	b087      	sub	sp, #28
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bb4e:	2b01      	cmp	r3, #1
{
 800bb50:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	4614      	mov	r4, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bb5a:	d006      	beq.n	800bb6a <ip6_output_if_src+0x26>
 800bb5c:	4b59      	ldr	r3, [pc, #356]	; (800bcc4 <ip6_output_if_src+0x180>)
 800bb5e:	495a      	ldr	r1, [pc, #360]	; (800bcc8 <ip6_output_if_src+0x184>)
 800bb60:	485a      	ldr	r0, [pc, #360]	; (800bccc <ip6_output_if_src+0x188>)
 800bb62:	f240 42a5 	movw	r2, #1189	; 0x4a5
 800bb66:	f010 ffdf 	bl	801cb28 <iprintf>

  /* Should the IPv6 header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	d07c      	beq.n	800bc68 <ip6_output_if_src+0x124>
     * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
     * require addresses to be properly zoned for correctness. In some cases,
     * earlier attempts will have been made to add a zone to the destination,
     * but this function is the only one that is called in all (other) cases,
     * so we must do this here. */
    if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
 800bb6e:	7c22      	ldrb	r2, [r4, #16]
 800bb70:	bb82      	cbnz	r2, 800bbd4 <ip6_output_if_src+0x90>
 800bb72:	6821      	ldr	r1, [r4, #0]
 800bb74:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 800bb78:	400b      	ands	r3, r1
 800bb7a:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800bb7e:	4283      	cmp	r3, r0
 800bb80:	d00a      	beq.n	800bb98 <ip6_output_if_src+0x54>
 800bb82:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800bb86:	4008      	ands	r0, r1
 800bb88:	f240 15ff 	movw	r5, #511	; 0x1ff
 800bb8c:	42a8      	cmp	r0, r5
 800bb8e:	d003      	beq.n	800bb98 <ip6_output_if_src+0x54>
 800bb90:	f240 25ff 	movw	r5, #767	; 0x2ff
 800bb94:	42a8      	cmp	r0, r5
 800bb96:	d11d      	bne.n	800bbd4 <ip6_output_if_src+0x90>
      ip6_addr_copy(dest_addr, *dest);
 800bb98:	6860      	ldr	r0, [r4, #4]
 800bb9a:	9002      	str	r0, [sp, #8]
 800bb9c:	68a0      	ldr	r0, [r4, #8]
 800bb9e:	9003      	str	r0, [sp, #12]
 800bba0:	68e0      	ldr	r0, [r4, #12]
 800bba2:	9004      	str	r0, [sp, #16]
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 800bba4:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800bba8:	4283      	cmp	r3, r0
      ip6_addr_copy(dest_addr, *dest);
 800bbaa:	9101      	str	r1, [sp, #4]
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 800bbac:	d00b      	beq.n	800bbc6 <ip6_output_if_src+0x82>
 800bbae:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bbb2:	0409      	lsls	r1, r1, #16
 800bbb4:	0c09      	lsrs	r1, r1, #16
 800bbb6:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	d003      	beq.n	800bbc6 <ip6_output_if_src+0x82>
 800bbbe:	f240 23ff 	movw	r3, #767	; 0x2ff
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d103      	bne.n	800bbce <ip6_output_if_src+0x8a>
 800bbc6:	f898 20de 	ldrb.w	r2, [r8, #222]	; 0xde
 800bbca:	3201      	adds	r2, #1
 800bbcc:	b2d2      	uxtb	r2, r2
 800bbce:	f88d 2014 	strb.w	r2, [sp, #20]
      dest = &dest_addr;
 800bbd2:	ac01      	add	r4, sp, #4
    }
#endif /* LWIP_IPV6_SCOPES */

    /* generate IPv6 header */
    if (pbuf_add_header(p, IP6_HLEN)) {
 800bbd4:	2128      	movs	r1, #40	; 0x28
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f003 fb98 	bl	800f30c <pbuf_add_header>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d16e      	bne.n	800bcbe <ip6_output_if_src+0x17a>
      IP6_STATS_INC(ip6.err);
      return ERR_BUF;
    }

    ip6hdr = (struct ip6_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 800bbe0:	8973      	ldrh	r3, [r6, #10]
    ip6hdr = (struct ip6_hdr *)p->payload;
 800bbe2:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 800bbe4:	2b27      	cmp	r3, #39	; 0x27
 800bbe6:	d806      	bhi.n	800bbf6 <ip6_output_if_src+0xb2>
 800bbe8:	4b36      	ldr	r3, [pc, #216]	; (800bcc4 <ip6_output_if_src+0x180>)
 800bbea:	4939      	ldr	r1, [pc, #228]	; (800bcd0 <ip6_output_if_src+0x18c>)
 800bbec:	4837      	ldr	r0, [pc, #220]	; (800bccc <ip6_output_if_src+0x188>)
 800bbee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bbf2:	f010 ff99 	bl	801cb28 <iprintf>
               (p->len >= sizeof(struct ip6_hdr)));

    IP6H_HOPLIM_SET(ip6hdr, hl);
    IP6H_NEXTH_SET(ip6hdr, nexth);
 800bbf6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    IP6H_HOPLIM_SET(ip6hdr, hl);
 800bbfa:	f885 9007 	strb.w	r9, [r5, #7]
    IP6H_NEXTH_SET(ip6hdr, nexth);
 800bbfe:	71ab      	strb	r3, [r5, #6]

    /* dest cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	61ab      	str	r3, [r5, #24]
 800bc04:	6863      	ldr	r3, [r4, #4]
 800bc06:	61eb      	str	r3, [r5, #28]
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	622b      	str	r3, [r5, #32]
 800bc0c:	68e3      	ldr	r3, [r4, #12]
 800bc0e:	626b      	str	r3, [r5, #36]	; 0x24

    IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
 800bc10:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800bc14:	0500      	lsls	r0, r0, #20
 800bc16:	f040 40c0 	orr.w	r0, r0, #1610612736	; 0x60000000
 800bc1a:	f002 fa44 	bl	800e0a6 <lwip_htonl>
 800bc1e:	6028      	str	r0, [r5, #0]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 800bc20:	8930      	ldrh	r0, [r6, #8]
 800bc22:	3828      	subs	r0, #40	; 0x28
 800bc24:	b280      	uxth	r0, r0
 800bc26:	f002 fa3b 	bl	800e0a0 <lwip_htons>

    if (src == NULL) {
      src = IP6_ADDR_ANY6;
 800bc2a:	4b2a      	ldr	r3, [pc, #168]	; (800bcd4 <ip6_output_if_src+0x190>)
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 800bc2c:	80a8      	strh	r0, [r5, #4]
      src = IP6_ADDR_ANY6;
 800bc2e:	2f00      	cmp	r7, #0
 800bc30:	bf08      	it	eq
 800bc32:	461f      	moveq	r7, r3
    }
    /* src cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->src, *src);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	60ab      	str	r3, [r5, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60eb      	str	r3, [r5, #12]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	612b      	str	r3, [r5, #16]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	616b      	str	r3, [r5, #20]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if LWIP_IPV6_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 800bc44:	f8b8 30d2 	ldrh.w	r3, [r8, #210]	; 0xd2
 800bc48:	b393      	cbz	r3, 800bcb0 <ip6_output_if_src+0x16c>
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	8935      	ldrh	r5, [r6, #8]
 800bc50:	f002 f93c 	bl	800decc <nd6_get_destination_mtu>
 800bc54:	4285      	cmp	r5, r0
 800bc56:	d92b      	bls.n	800bcb0 <ip6_output_if_src+0x16c>
    return ip6_frag(p, netif, dest);
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f000 fc57 	bl	800c510 <ip6_frag>
  LWIP_ERROR("ip6_output_if: Packets larger than MTU, discarded!!!",!(netif->mtu && p->tot_len > netif->mtu),return ERR_IF;);
#endif /* LWIP_IPV6_FRAG */

  LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
  return netif->output_ip6(netif, p, dest);
}
 800bc62:	b007      	add	sp, #28
 800bc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ip6hdr = (struct ip6_hdr *)p->payload;
 800bc68:	6872      	ldr	r2, [r6, #4]
    ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
 800bc6a:	6993      	ldr	r3, [r2, #24]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	69d1      	ldr	r1, [r2, #28]
 800bc70:	9102      	str	r1, [sp, #8]
 800bc72:	6a11      	ldr	r1, [r2, #32]
 800bc74:	9103      	str	r1, [sp, #12]
 800bc76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc78:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 800bc7a:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800bc7e:	4019      	ands	r1, r3
 800bc80:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800bc84:	4291      	cmp	r1, r2
 800bc86:	d00b      	beq.n	800bca0 <ip6_output_if_src+0x15c>
 800bc88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc8c:	041b      	lsls	r3, r3, #16
 800bc8e:	0c1b      	lsrs	r3, r3, #16
 800bc90:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d003      	beq.n	800bca0 <ip6_output_if_src+0x15c>
 800bc98:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d103      	bne.n	800bca8 <ip6_output_if_src+0x164>
 800bca0:	f898 40de 	ldrb.w	r4, [r8, #222]	; 0xde
 800bca4:	3401      	adds	r4, #1
 800bca6:	b2e4      	uxtb	r4, r4
 800bca8:	f88d 4014 	strb.w	r4, [sp, #20]
    dest = &dest_addr;
 800bcac:	ac01      	add	r4, sp, #4
 800bcae:	e7c9      	b.n	800bc44 <ip6_output_if_src+0x100>
  return netif->output_ip6(netif, p, dest);
 800bcb0:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4640      	mov	r0, r8
 800bcba:	4798      	blx	r3
 800bcbc:	e7d1      	b.n	800bc62 <ip6_output_if_src+0x11e>
      return ERR_BUF;
 800bcbe:	f06f 0001 	mvn.w	r0, #1
 800bcc2:	e7ce      	b.n	800bc62 <ip6_output_if_src+0x11e>
 800bcc4:	0802c95b 	.word	0x0802c95b
 800bcc8:	0802c5ca 	.word	0x0802c5ca
 800bccc:	0802aecf 	.word	0x0802aecf
 800bcd0:	0802c9c8 	.word	0x0802c9c8
 800bcd4:	0801fc54 	.word	0x0801fc54

0800bcd8 <ip6_output_if>:
{
 800bcd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bcdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bcde:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800bce2:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800bce6:	4605      	mov	r5, r0
 800bce8:	460c      	mov	r4, r1
  if (dest != LWIP_IP_HDRINCL) {
 800bcea:	b1d2      	cbz	r2, 800bd22 <ip6_output_if+0x4a>
    if (src != NULL && ip6_addr_isany(src)) {
 800bcec:	b1c9      	cbz	r1, 800bd22 <ip6_output_if+0x4a>
 800bcee:	6809      	ldr	r1, [r1, #0]
 800bcf0:	b9b9      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bcf2:	6861      	ldr	r1, [r4, #4]
 800bcf4:	b9a9      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bcf6:	68a1      	ldr	r1, [r4, #8]
 800bcf8:	b999      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bcfa:	68e1      	ldr	r1, [r4, #12]
 800bcfc:	b989      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
      src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4630      	mov	r0, r6
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	9200      	str	r2, [sp, #0]
 800bd06:	f7ff fc61 	bl	800b5cc <ip6_select_source_address>
 800bd0a:	4604      	mov	r4, r0
      if ((src_used == NULL) || ip6_addr_isany(src_used)) {
 800bd0c:	b198      	cbz	r0, 800bd36 <ip6_output_if+0x5e>
 800bd0e:	6801      	ldr	r1, [r0, #0]
 800bd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd14:	b929      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bd16:	6841      	ldr	r1, [r0, #4]
 800bd18:	b919      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bd1a:	6881      	ldr	r1, [r0, #8]
 800bd1c:	b909      	cbnz	r1, 800bd22 <ip6_output_if+0x4a>
 800bd1e:	68c1      	ldr	r1, [r0, #12]
 800bd20:	b149      	cbz	r1, 800bd36 <ip6_output_if+0x5e>
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	e9cd 8609 	strd	r8, r6, [sp, #36]	; 0x24
 800bd2a:	9708      	str	r7, [sp, #32]
}
 800bd2c:	b002      	add	sp, #8
 800bd2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 800bd32:	f7ff bf07 	b.w	800bb44 <ip6_output_if_src>
}
 800bd36:	f06f 0003 	mvn.w	r0, #3
 800bd3a:	b002      	add	sp, #8
 800bd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd40 <ip6_options_add_hbh_ra>:
 * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
 * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
 */
err_t
ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
{
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	460d      	mov	r5, r1
  struct ip6_opt_hdr *opt_hdr;

  /* fixed 4 bytes for router alert option and 2 bytes padding */
  const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
  /* Move pointer to make room for hop-by-hop options header. */
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 800bd44:	2108      	movs	r1, #8
{
 800bd46:	4606      	mov	r6, r0
 800bd48:	4614      	mov	r4, r2
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 800bd4a:	f003 fadf 	bl	800f30c <pbuf_add_header>
 800bd4e:	b960      	cbnz	r0, 800bd6a <ip6_options_add_hbh_ra+0x2a>
    IP6_STATS_INC(ip6.err);
    return ERR_BUF;
  }

  /* Set fields of Hop-by-Hop header */
  hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 800bd50:	6873      	ldr	r3, [r6, #4]
  hbh_hdr->_hlen = 0;
  offset = IP6_HBH_HLEN;

  /* Set router alert options to Hop-by-Hop extended option header */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
 800bd52:	2205      	movs	r2, #5
 800bd54:	709a      	strb	r2, [r3, #2]
  IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
 800bd56:	2202      	movs	r2, #2
 800bd58:	70da      	strb	r2, [r3, #3]
  opt_data[1] = 0;
  offset += IP6_OPT_DLEN(opt_hdr);

  /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 800bd5a:	2201      	movs	r2, #1
  IP6_HBH_NEXTH(hbh_hdr) = nexth;
 800bd5c:	701d      	strb	r5, [r3, #0]
  hbh_hdr->_hlen = 0;
 800bd5e:	7058      	strb	r0, [r3, #1]
  opt_data[0] = value;
 800bd60:	711c      	strb	r4, [r3, #4]
  opt_data[1] = 0;
 800bd62:	7158      	strb	r0, [r3, #5]
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 800bd64:	719a      	strb	r2, [r3, #6]
  IP6_OPT_DLEN(opt_hdr) = 0;
 800bd66:	71d8      	strb	r0, [r3, #7]

  return ERR_OK;
}
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 800bd6a:	f06f 0001 	mvn.w	r0, #1
 800bd6e:	e7fb      	b.n	800bd68 <ip6_options_add_hbh_ra+0x28>

0800bd70 <ip6addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip6addr_ntoa_r(const ip6_addr_t *addr, char *buf, int buflen)
{
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t current_block_index, current_block_value, next_block_value;
  s32_t i;
  u8_t zero_flag, empty_block_flag;

#if LWIP_IPV4
  if (ip6_addr_isipv4mappedipv6(addr)) {
 800bd74:	6803      	ldr	r3, [r0, #0]
{
 800bd76:	b085      	sub	sp, #20
 800bd78:	4683      	mov	fp, r0
 800bd7a:	460d      	mov	r5, r1
 800bd7c:	4692      	mov	sl, r2
  if (ip6_addr_isipv4mappedipv6(addr)) {
 800bd7e:	b9eb      	cbnz	r3, 800bdbc <ip6addr_ntoa_r+0x4c>
 800bd80:	6844      	ldr	r4, [r0, #4]
 800bd82:	2c00      	cmp	r4, #0
 800bd84:	d13a      	bne.n	800bdfc <ip6addr_ntoa_r+0x8c>
 800bd86:	6883      	ldr	r3, [r0, #8]
 800bd88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd8c:	d137      	bne.n	800bdfe <ip6addr_ntoa_r+0x8e>
    ip4_addr_t addr4;
    char *ret;
#define IP4MAPPED_HEADER "::FFFF:"
    char *buf_ip4 = buf + sizeof(IP4MAPPED_HEADER) - 1;
    int buflen_ip4 = buflen - sizeof(IP4MAPPED_HEADER) + 1;
    if (buflen < (int)sizeof(IP4MAPPED_HEADER)) {
 800bd8e:	2a07      	cmp	r2, #7
 800bd90:	dd0f      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
    char *buf_ip4 = buf + sizeof(IP4MAPPED_HEADER) - 1;
 800bd92:	460c      	mov	r4, r1
      return NULL;
    }
    memcpy(buf, IP4MAPPED_HEADER, sizeof(IP4MAPPED_HEADER));
 800bd94:	495a      	ldr	r1, [pc, #360]	; (800bf00 <ip6addr_ntoa_r+0x190>)
 800bd96:	680b      	ldr	r3, [r1, #0]
 800bd98:	f844 3b07 	str.w	r3, [r4], #7
 800bd9c:	684b      	ldr	r3, [r1, #4]
 800bd9e:	606b      	str	r3, [r5, #4]
    addr4.addr = addr->addr[3];
 800bda0:	68c3      	ldr	r3, [r0, #12]
 800bda2:	9303      	str	r3, [sp, #12]
    ret = ip4addr_ntoa_r(&addr4, buf_ip4, buflen_ip4);
 800bda4:	3a07      	subs	r2, #7
 800bda6:	4621      	mov	r1, r4
 800bda8:	a803      	add	r0, sp, #12
 800bdaa:	f7fe fd85 	bl	800a8b8 <ip4addr_ntoa_r>
    if (ret != buf_ip4) {
 800bdae:	4284      	cmp	r4, r0
 800bdb0:	d000      	beq.n	800bdb4 <ip6addr_ntoa_r+0x44>
    if (current_block_value == 0) {
      if (current_block_index == 7 && empty_block_flag == 1) {
        /* special case, we must render a ':' for the last block. */
        buf[i++] = ':';
        if (i >= buflen) {
          return NULL;
 800bdb2:	2500      	movs	r5, #0
  }

  buf[i] = 0;

  return buf;
}
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	b005      	add	sp, #20
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	f04f 0800 	mov.w	r8, #0
 800bdc0:	4646      	mov	r6, r8
 800bdc2:	4644      	mov	r4, r8
    current_block_value = lwip_htonl(addr->addr[current_block_index >> 1]);
 800bdc4:	0863      	lsrs	r3, r4, #1
 800bdc6:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 800bdca:	f002 f96c 	bl	800e0a6 <lwip_htonl>
    if ((current_block_index & 0x1) == 0) {
 800bdce:	f014 0301 	ands.w	r3, r4, #1
    current_block_value = lwip_htonl(addr->addr[current_block_index >> 1]);
 800bdd2:	4681      	mov	r9, r0
      current_block_value = current_block_value >> 16;
 800bdd4:	bf08      	it	eq
 800bdd6:	ea4f 4910 	moveq.w	r9, r0, lsr #16
    current_block_value &= 0xffff;
 800bdda:	fa1f f789 	uxth.w	r7, r9
    if (current_block_value == 0) {
 800bdde:	2f00      	cmp	r7, #0
 800bde0:	d17d      	bne.n	800bede <ip6addr_ntoa_r+0x16e>
      if (current_block_index == 7 && empty_block_flag == 1) {
 800bde2:	2c07      	cmp	r4, #7
 800bde4:	d10e      	bne.n	800be04 <ip6addr_ntoa_r+0x94>
 800bde6:	f1b8 0f01 	cmp.w	r8, #1
 800bdea:	f040 8085 	bne.w	800bef8 <ip6addr_ntoa_r+0x188>
        buf[i++] = ':';
 800bdee:	1c73      	adds	r3, r6, #1
 800bdf0:	213a      	movs	r1, #58	; 0x3a
        if (i >= buflen) {
 800bdf2:	459a      	cmp	sl, r3
        buf[i++] = ':';
 800bdf4:	55a9      	strb	r1, [r5, r6]
        if (i >= buflen) {
 800bdf6:	dddc      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
 800bdf8:	461e      	mov	r6, r3
 800bdfa:	e01f      	b.n	800be3c <ip6addr_ntoa_r+0xcc>
 800bdfc:	461c      	mov	r4, r3
 800bdfe:	46a0      	mov	r8, r4
 800be00:	4626      	mov	r6, r4
 800be02:	e7df      	b.n	800bdc4 <ip6addr_ntoa_r+0x54>
      if (empty_block_flag == 0) {
 800be04:	f1b8 0f00 	cmp.w	r8, #0
 800be08:	d11b      	bne.n	800be42 <ip6addr_ntoa_r+0xd2>
        next_block_value = lwip_htonl(addr->addr[(current_block_index + 1) >> 1]);
 800be0a:	1c61      	adds	r1, r4, #1
 800be0c:	0849      	lsrs	r1, r1, #1
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
 800be14:	f002 f947 	bl	800e0a6 <lwip_htonl>
        if ((current_block_index & 0x1) == 0x01) {
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	b103      	cbz	r3, 800be1e <ip6addr_ntoa_r+0xae>
            next_block_value = next_block_value >> 16;
 800be1c:	0c00      	lsrs	r0, r0, #16
        next_block_value &= 0xffff;
 800be1e:	b280      	uxth	r0, r0
        if (next_block_value == 0) {
 800be20:	2800      	cmp	r0, #0
 800be22:	d162      	bne.n	800beea <ip6addr_ntoa_r+0x17a>
 800be24:	1c73      	adds	r3, r6, #1
          buf[i++] = ':';
 800be26:	f04f 023a 	mov.w	r2, #58	; 0x3a
          if (i >= buflen) {
 800be2a:	459a      	cmp	sl, r3
          buf[i++] = ':';
 800be2c:	55aa      	strb	r2, [r5, r6]
          if (i >= buflen) {
 800be2e:	ddc0      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
 800be30:	461e      	mov	r6, r3
          empty_block_flag = 1;
 800be32:	f04f 0801 	mov.w	r8, #1
  for (current_block_index = 0; current_block_index < 8; current_block_index++) {
 800be36:	3401      	adds	r4, #1
 800be38:	2c08      	cmp	r4, #8
 800be3a:	d1c3      	bne.n	800bdc4 <ip6addr_ntoa_r+0x54>
  buf[i] = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	55ab      	strb	r3, [r5, r6]
  return buf;
 800be40:	e7b8      	b.n	800bdb4 <ip6addr_ntoa_r+0x44>
      } else if (empty_block_flag == 1) {
 800be42:	f1b8 0f01 	cmp.w	r8, #1
 800be46:	d0f6      	beq.n	800be36 <ip6addr_ntoa_r+0xc6>
    if (current_block_index > 0) {
 800be48:	2c00      	cmp	r4, #0
 800be4a:	d051      	beq.n	800bef0 <ip6addr_ntoa_r+0x180>
      buf[i++] = ':';
 800be4c:	1c73      	adds	r3, r6, #1
 800be4e:	f04f 023a 	mov.w	r2, #58	; 0x3a
      if (i >= buflen) {
 800be52:	459a      	cmp	sl, r3
      buf[i++] = ':';
 800be54:	55aa      	strb	r2, [r5, r6]
      if (i >= buflen) {
 800be56:	ddac      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
    if ((current_block_value & 0xf000) == 0) {
 800be58:	f419 4f70 	tst.w	r9, #61440	; 0xf000
 800be5c:	d04a      	beq.n	800bef4 <ip6addr_ntoa_r+0x184>
      buf[i++] = lwip_xchar(((current_block_value & 0xf000) >> 12));
 800be5e:	0b39      	lsrs	r1, r7, #12
 800be60:	f5b7 4f20 	cmp.w	r7, #40960	; 0xa000
 800be64:	f103 0001 	add.w	r0, r3, #1
 800be68:	bf34      	ite	cc
 800be6a:	3130      	addcc	r1, #48	; 0x30
 800be6c:	3137      	addcs	r1, #55	; 0x37
      if (i >= buflen) {
 800be6e:	4582      	cmp	sl, r0
      buf[i++] = lwip_xchar(((current_block_value & 0xf000) >> 12));
 800be70:	54e9      	strb	r1, [r5, r3]
      if (i >= buflen) {
 800be72:	dd9e      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
 800be74:	4603      	mov	r3, r0
      zero_flag = 0;
 800be76:	2100      	movs	r1, #0
    if (((current_block_value & 0xf00) == 0) && (zero_flag)) {
 800be78:	f419 6f70 	tst.w	r9, #3840	; 0xf00
 800be7c:	d100      	bne.n	800be80 <ip6addr_ntoa_r+0x110>
 800be7e:	b969      	cbnz	r1, 800be9c <ip6addr_ntoa_r+0x12c>
      buf[i++] = lwip_xchar(((current_block_value & 0xf00) >> 8));
 800be80:	f3c7 2003 	ubfx	r0, r7, #8, #4
 800be84:	4601      	mov	r1, r0
 800be86:	2809      	cmp	r0, #9
 800be88:	f103 0001 	add.w	r0, r3, #1
 800be8c:	bf94      	ite	ls
 800be8e:	3130      	addls	r1, #48	; 0x30
 800be90:	3137      	addhi	r1, #55	; 0x37
      if (i >= buflen) {
 800be92:	4582      	cmp	sl, r0
      buf[i++] = lwip_xchar(((current_block_value & 0xf00) >> 8));
 800be94:	54e9      	strb	r1, [r5, r3]
      if (i >= buflen) {
 800be96:	dd8c      	ble.n	800bdb2 <ip6addr_ntoa_r+0x42>
 800be98:	4603      	mov	r3, r0
      zero_flag = 0;
 800be9a:	2100      	movs	r1, #0
    if (((current_block_value & 0xf0) == 0) && (zero_flag)) {
 800be9c:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 800bea0:	d100      	bne.n	800bea4 <ip6addr_ntoa_r+0x134>
 800bea2:	b969      	cbnz	r1, 800bec0 <ip6addr_ntoa_r+0x150>
      buf[i++] = lwip_xchar(((current_block_value & 0xf0) >> 4));
 800bea4:	f3c7 1003 	ubfx	r0, r7, #4, #4
 800bea8:	4601      	mov	r1, r0
 800beaa:	2809      	cmp	r0, #9
 800beac:	f103 0001 	add.w	r0, r3, #1
 800beb0:	bf94      	ite	ls
 800beb2:	3130      	addls	r1, #48	; 0x30
 800beb4:	3137      	addhi	r1, #55	; 0x37
      if (i >= buflen) {
 800beb6:	4582      	cmp	sl, r0
      buf[i++] = lwip_xchar(((current_block_value & 0xf0) >> 4));
 800beb8:	54e9      	strb	r1, [r5, r3]
      if (i >= buflen) {
 800beba:	f77f af7a 	ble.w	800bdb2 <ip6addr_ntoa_r+0x42>
 800bebe:	4603      	mov	r3, r0
    buf[i++] = lwip_xchar((current_block_value & 0xf));
 800bec0:	f009 090f 	and.w	r9, r9, #15
 800bec4:	f007 070f 	and.w	r7, r7, #15
 800bec8:	f1b9 0f09 	cmp.w	r9, #9
 800becc:	f103 0601 	add.w	r6, r3, #1
 800bed0:	bf94      	ite	ls
 800bed2:	3730      	addls	r7, #48	; 0x30
 800bed4:	3737      	addhi	r7, #55	; 0x37
    if (i >= buflen) {
 800bed6:	45b2      	cmp	sl, r6
    buf[i++] = lwip_xchar((current_block_value & 0xf));
 800bed8:	54ef      	strb	r7, [r5, r3]
    if (i >= buflen) {
 800beda:	dcac      	bgt.n	800be36 <ip6addr_ntoa_r+0xc6>
 800bedc:	e769      	b.n	800bdb2 <ip6addr_ntoa_r+0x42>
      empty_block_flag = 2;
 800bede:	f1b8 0f01 	cmp.w	r8, #1
 800bee2:	bf08      	it	eq
 800bee4:	f04f 0802 	moveq.w	r8, #2
 800bee8:	e7ae      	b.n	800be48 <ip6addr_ntoa_r+0xd8>
 800beea:	f04f 0800 	mov.w	r8, #0
 800beee:	e7ab      	b.n	800be48 <ip6addr_ntoa_r+0xd8>
 800bef0:	4633      	mov	r3, r6
 800bef2:	e7b1      	b.n	800be58 <ip6addr_ntoa_r+0xe8>
      zero_flag = 1;
 800bef4:	2101      	movs	r1, #1
 800bef6:	e7bf      	b.n	800be78 <ip6addr_ntoa_r+0x108>
      if (empty_block_flag == 0) {
 800bef8:	f1b8 0f00 	cmp.w	r8, #0
 800befc:	d1a6      	bne.n	800be4c <ip6addr_ntoa_r+0xdc>
 800befe:	e784      	b.n	800be0a <ip6addr_ntoa_r+0x9a>
 800bf00:	0802c9f6 	.word	0x0802c9f6

0800bf04 <ip6_reass_free_complete_datagram>:
 *
 * @param ipr datagram to free
 */
static void
ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)
{
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t clen;
  struct pbuf *p;
  struct ip6_reass_helper *iprh;

#if LWIP_ICMP6
  iprh = (struct ip6_reass_helper *)ipr->p->payload;
 800bf08:	6846      	ldr	r6, [r0, #4]
 800bf0a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800bf0c:	889a      	ldrh	r2, [r3, #4]
{
 800bf0e:	b08a      	sub	sp, #40	; 0x28
 800bf10:	4604      	mov	r4, r0
  if (iprh->start == 0) {
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	d157      	bne.n	800bfc6 <ip6_reass_free_complete_datagram+0xc2>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	6042      	str	r2, [r0, #4]
    /* Restore the part that we've overwritten with our helper structure, or we
     * might send garbage (and disclose a pointer) in the ICMPv6 reply. */
    MEMCPY(p->payload, ipr->orig_hdr, sizeof(iprh));
 800bf1a:	68c2      	ldr	r2, [r0, #12]
 800bf1c:	601a      	str	r2, [r3, #0]
    /* Then, move back to the original ipv6 header (we are now pointing to Fragment header).
       This cannot fail since we already checked when receiving this fragment. */
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)ipr->iphdr))) {
 800bf1e:	6883      	ldr	r3, [r0, #8]
 800bf20:	6871      	ldr	r1, [r6, #4]
 800bf22:	1ac9      	subs	r1, r1, r3
 800bf24:	b209      	sxth	r1, r1
 800bf26:	4630      	mov	r0, r6
 800bf28:	f003 fa22 	bl	800f370 <pbuf_header_force>
 800bf2c:	b368      	cbz	r0, 800bf8a <ip6_reass_free_complete_datagram+0x86>
      LWIP_ASSERT("ip6_reass_free: moving p->payload to ip6 header failed\n", 0);
 800bf2e:	4b37      	ldr	r3, [pc, #220]	; (800c00c <ip6_reass_free_complete_datagram+0x108>)
 800bf30:	4937      	ldr	r1, [pc, #220]	; (800c010 <ip6_reass_free_complete_datagram+0x10c>)
 800bf32:	4838      	ldr	r0, [pc, #224]	; (800c014 <ip6_reass_free_complete_datagram+0x110>)
 800bf34:	22a9      	movs	r2, #169	; 0xa9
 800bf36:	f010 fdf7 	bl	801cb28 <iprintf>
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
      ip6_addr_set_zone(&dest_addr, ipr->dest_zone);
      /* Send the actual ICMP response. */
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
    }
    clen = pbuf_clen(p);
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f003 fb74 	bl	800f628 <pbuf_clen>
 800bf40:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
    pbuf_free(p);
 800bf42:	4630      	mov	r0, r6
 800bf44:	f003 fa1c 	bl	800f380 <pbuf_free>
  }
#endif /* LWIP_ICMP6 */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800bf48:	6866      	ldr	r6, [r4, #4]
    iprh = (struct ip6_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bf4a:	4f30      	ldr	r7, [pc, #192]	; (800c00c <ip6_reass_free_complete_datagram+0x108>)
 800bf4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c020 <ip6_reass_free_complete_datagram+0x11c>
 800bf50:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800c014 <ip6_reass_free_complete_datagram+0x110>
  while (p != NULL) {
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	d138      	bne.n	800bfca <ip6_reass_free_complete_datagram+0xc6>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
    pbuf_free(pcur);
  }

  /* Then, unchain the struct ip6_reassdata from the list and free it. */
  if (ipr == reassdatagrams) {
 800bf58:	4e2f      	ldr	r6, [pc, #188]	; (800c018 <ip6_reass_free_complete_datagram+0x114>)
 800bf5a:	6833      	ldr	r3, [r6, #0]
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	d14e      	bne.n	800bffe <ip6_reass_free_complete_datagram+0xfa>
    reassdatagrams = ipr->next;
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	6033      	str	r3, [r6, #0]
    }
    if (prev != NULL) {
      prev->next = ipr->next;
    }
  }
  memp_free(MEMP_IP6_REASSDATA, ipr);
 800bf64:	4621      	mov	r1, r4
 800bf66:	200d      	movs	r0, #13
 800bf68:	f002 fe9c 	bl	800eca4 <memp_free>

  /* Finally, update number of pbufs in reassembly queue */
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 800bf6c:	88b3      	ldrh	r3, [r6, #4]
 800bf6e:	42ab      	cmp	r3, r5
 800bf70:	d205      	bcs.n	800bf7e <ip6_reass_free_complete_datagram+0x7a>
 800bf72:	4b26      	ldr	r3, [pc, #152]	; (800c00c <ip6_reass_free_complete_datagram+0x108>)
 800bf74:	4929      	ldr	r1, [pc, #164]	; (800c01c <ip6_reass_free_complete_datagram+0x118>)
 800bf76:	4827      	ldr	r0, [pc, #156]	; (800c014 <ip6_reass_free_complete_datagram+0x110>)
 800bf78:	22de      	movs	r2, #222	; 0xde
 800bf7a:	f010 fdd5 	bl	801cb28 <iprintf>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - pbufs_freed);
 800bf7e:	88b0      	ldrh	r0, [r6, #4]
 800bf80:	1b45      	subs	r5, r0, r5
 800bf82:	80b5      	strh	r5, [r6, #4]
}
 800bf84:	b00a      	add	sp, #40	; 0x28
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip6_addr_copy_from_packed(src_addr, IPV6_FRAG_SRC(ipr));
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	689a      	ldr	r2, [r3, #8]
 800bf8e:	9200      	str	r2, [sp, #0]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	9201      	str	r2, [sp, #4]
 800bf94:	691a      	ldr	r2, [r3, #16]
 800bf96:	9202      	str	r2, [sp, #8]
 800bf98:	695a      	ldr	r2, [r3, #20]
 800bf9a:	9203      	str	r2, [sp, #12]
      ip6_addr_set_zone(&src_addr, ipr->src_zone);
 800bf9c:	7f22      	ldrb	r2, [r4, #28]
 800bf9e:	f88d 2010 	strb.w	r2, [sp, #16]
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
 800bfa2:	699a      	ldr	r2, [r3, #24]
 800bfa4:	9205      	str	r2, [sp, #20]
 800bfa6:	69da      	ldr	r2, [r3, #28]
 800bfa8:	9206      	str	r2, [sp, #24]
 800bfaa:	6a1a      	ldr	r2, [r3, #32]
 800bfac:	9207      	str	r2, [sp, #28]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	9308      	str	r3, [sp, #32]
      ip6_addr_set_zone(&dest_addr, ipr->dest_zone);
 800bfb2:	7f63      	ldrb	r3, [r4, #29]
 800bfb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
 800bfb8:	466a      	mov	r2, sp
 800bfba:	ab05      	add	r3, sp, #20
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff f994 	bl	800b2ec <icmp6_time_exceeded_with_addrs>
 800bfc4:	e7b9      	b.n	800bf3a <ip6_reass_free_complete_datagram+0x36>
  u16_t pbufs_freed = 0;
 800bfc6:	2500      	movs	r5, #0
 800bfc8:	e7be      	b.n	800bf48 <ip6_reass_free_complete_datagram+0x44>
    iprh = (struct ip6_reass_helper *)p->payload;
 800bfca:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 800bfcc:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800bfce:	f8d3 a000 	ldr.w	sl, [r3]
    clen = pbuf_clen(pcur);
 800bfd2:	f003 fb29 	bl	800f628 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bfd6:	4405      	add	r5, r0
 800bfd8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800bfdc:	db05      	blt.n	800bfea <ip6_reass_free_complete_datagram+0xe6>
 800bfde:	463b      	mov	r3, r7
 800bfe0:	22c7      	movs	r2, #199	; 0xc7
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f010 fd9f 	bl	801cb28 <iprintf>
    pbuf_free(pcur);
 800bfea:	4630      	mov	r0, r6
 800bfec:	f003 f9c8 	bl	800f380 <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bff0:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800bff2:	4656      	mov	r6, sl
 800bff4:	e7ae      	b.n	800bf54 <ip6_reass_free_complete_datagram+0x50>
      if (prev->next == ipr) {
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	42a2      	cmp	r2, r4
 800bffa:	d003      	beq.n	800c004 <ip6_reass_free_complete_datagram+0x100>
 800bffc:	4613      	mov	r3, r2
    while (prev != NULL) {
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1f9      	bne.n	800bff6 <ip6_reass_free_complete_datagram+0xf2>
 800c002:	e7af      	b.n	800bf64 <ip6_reass_free_complete_datagram+0x60>
      prev->next = ipr->next;
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	e7ac      	b.n	800bf64 <ip6_reass_free_complete_datagram+0x60>
 800c00a:	bf00      	nop
 800c00c:	0802c9fe 	.word	0x0802c9fe
 800c010:	0802ca70 	.word	0x0802ca70
 800c014:	0802aecf 	.word	0x0802aecf
 800c018:	20006a90 	.word	0x20006a90
 800c01c:	0802c7ed 	.word	0x0802c7ed
 800c020:	0802c71e 	.word	0x0802c71e

0800c024 <ip6_reass_remove_oldest_datagram>:
 * @param pbufs_needed number of pbufs needed to enqueue
 *        (used for freeing other datagrams if not enough space)
 */
static void
ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)
{
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct ip6_reassdata *r, *oldest;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the current datagram! */
  do {
    r = oldest = reassdatagrams;
 800c026:	4f0e      	ldr	r7, [pc, #56]	; (800c060 <ip6_reass_remove_oldest_datagram+0x3c>)
{
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	463e      	mov	r6, r7
    r = oldest = reassdatagrams;
 800c02e:	6838      	ldr	r0, [r7, #0]
 800c030:	4603      	mov	r3, r0
    while (r != NULL) {
 800c032:	b963      	cbnz	r3, 800c04e <ip6_reass_remove_oldest_datagram+0x2a>
          oldest = r;
        }
      }
      r = r->next;
    }
    if (oldest == ipr) {
 800c034:	42a0      	cmp	r0, r4
 800c036:	d009      	beq.n	800c04c <ip6_reass_remove_oldest_datagram+0x28>
      /* nothing to free, ipr is the only element on the list */
      return;
    }
    if (oldest != NULL) {
 800c038:	b108      	cbz	r0, 800c03e <ip6_reass_remove_oldest_datagram+0x1a>
      ip6_reass_free_complete_datagram(oldest);
 800c03a:	f7ff ff63 	bl	800bf04 <ip6_reass_free_complete_datagram>
    }
  } while (((ip6_reass_pbufcount + pbufs_needed) > IP_REASS_MAX_PBUFS) && (reassdatagrams != NULL));
 800c03e:	88b3      	ldrh	r3, [r6, #4]
 800c040:	442b      	add	r3, r5
 800c042:	2b0a      	cmp	r3, #10
 800c044:	dd02      	ble.n	800c04c <ip6_reass_remove_oldest_datagram+0x28>
 800c046:	6833      	ldr	r3, [r6, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f0      	bne.n	800c02e <ip6_reass_remove_oldest_datagram+0xa>
}
 800c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (r != ipr) {
 800c04e:	42a3      	cmp	r3, r4
 800c050:	d004      	beq.n	800c05c <ip6_reass_remove_oldest_datagram+0x38>
        if (r->timer <= oldest->timer) {
 800c052:	7ed9      	ldrb	r1, [r3, #27]
 800c054:	7ec2      	ldrb	r2, [r0, #27]
 800c056:	4291      	cmp	r1, r2
 800c058:	bf98      	it	ls
 800c05a:	4618      	movls	r0, r3
      r = r->next;
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	e7e8      	b.n	800c032 <ip6_reass_remove_oldest_datagram+0xe>
 800c060:	20006a90 	.word	0x20006a90

0800c064 <ip6_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c064:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c066:	4604      	mov	r4, r0
 800c068:	b930      	cbnz	r0, 800c078 <ip6_frag_free_pbuf_custom_ref+0x14>
 800c06a:	4b06      	ldr	r3, [pc, #24]	; (800c084 <ip6_frag_free_pbuf_custom_ref+0x20>)
 800c06c:	4906      	ldr	r1, [pc, #24]	; (800c088 <ip6_frag_free_pbuf_custom_ref+0x24>)
 800c06e:	4807      	ldr	r0, [pc, #28]	; (800c08c <ip6_frag_free_pbuf_custom_ref+0x28>)
 800c070:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 800c074:	f010 fd58 	bl	801cb28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c078:	4621      	mov	r1, r4
 800c07a:	2005      	movs	r0, #5
}
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800c080:	f002 be10 	b.w	800eca4 <memp_free>
 800c084:	0802c9fe 	.word	0x0802c9fe
 800c088:	0802d4b3 	.word	0x0802d4b3
 800c08c:	0802aecf 	.word	0x0802aecf

0800c090 <ip6_frag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ip6_frag_free_pbuf_custom(struct pbuf *p)
{
 800c090:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c092:	4604      	mov	r4, r0
 800c094:	b930      	cbnz	r0, 800c0a4 <ip6_frag_free_pbuf_custom+0x14>
 800c096:	4b08      	ldr	r3, [pc, #32]	; (800c0b8 <ip6_frag_free_pbuf_custom+0x28>)
 800c098:	4908      	ldr	r1, [pc, #32]	; (800c0bc <ip6_frag_free_pbuf_custom+0x2c>)
 800c09a:	4809      	ldr	r0, [pc, #36]	; (800c0c0 <ip6_frag_free_pbuf_custom+0x30>)
 800c09c:	f240 22ba 	movw	r2, #698	; 0x2ba
 800c0a0:	f010 fd42 	bl	801cb28 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800c0a4:	6960      	ldr	r0, [r4, #20]
 800c0a6:	b108      	cbz	r0, 800c0ac <ip6_frag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800c0a8:	f003 f96a 	bl	800f380 <pbuf_free>
  }
  ip6_frag_free_pbuf_custom_ref(pcr);
 800c0ac:	4620      	mov	r0, r4
}
 800c0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip6_frag_free_pbuf_custom_ref(pcr);
 800c0b2:	f7ff bfd7 	b.w	800c064 <ip6_frag_free_pbuf_custom_ref>
 800c0b6:	bf00      	nop
 800c0b8:	0802c9fe 	.word	0x0802c9fe
 800c0bc:	0802c75d 	.word	0x0802c75d
 800c0c0:	0802aecf 	.word	0x0802aecf

0800c0c4 <ip6_reass_tmr>:
{
 800c0c4:	b510      	push	{r4, lr}
  r = reassdatagrams;
 800c0c6:	4b07      	ldr	r3, [pc, #28]	; (800c0e4 <ip6_reass_tmr+0x20>)
 800c0c8:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800c0ca:	b900      	cbnz	r0, 800c0ce <ip6_reass_tmr+0xa>
}
 800c0cc:	bd10      	pop	{r4, pc}
    if (r->timer > 0) {
 800c0ce:	7ec3      	ldrb	r3, [r0, #27]
 800c0d0:	6804      	ldr	r4, [r0, #0]
 800c0d2:	b11b      	cbz	r3, 800c0dc <ip6_reass_tmr+0x18>
      r->timer--;
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	76c3      	strb	r3, [r0, #27]
{
 800c0d8:	4620      	mov	r0, r4
 800c0da:	e7f6      	b.n	800c0ca <ip6_reass_tmr+0x6>
      ip6_reass_free_complete_datagram(tmp);
 800c0dc:	f7ff ff12 	bl	800bf04 <ip6_reass_free_complete_datagram>
 800c0e0:	e7fa      	b.n	800c0d8 <ip6_reass_tmr+0x14>
 800c0e2:	bf00      	nop
 800c0e4:	20006a90 	.word	0x20006a90

0800c0e8 <ip6_reass>:
{
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 800c0ec:	8943      	ldrh	r3, [r0, #10]
 800c0ee:	2b07      	cmp	r3, #7
{
 800c0f0:	b089      	sub	sp, #36	; 0x24
 800c0f2:	4607      	mov	r7, r0
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 800c0f4:	d806      	bhi.n	800c104 <ip6_reass+0x1c>
 800c0f6:	4bb7      	ldr	r3, [pc, #732]	; (800c3d4 <ip6_reass+0x2ec>)
 800c0f8:	49b7      	ldr	r1, [pc, #732]	; (800c3d8 <ip6_reass+0x2f0>)
 800c0fa:	48b8      	ldr	r0, [pc, #736]	; (800c3dc <ip6_reass+0x2f4>)
 800c0fc:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800c100:	f010 fd12 	bl	801cb28 <iprintf>
  clen = pbuf_clen(p);
 800c104:	4638      	mov	r0, r7
  frag_hdr = (struct ip6_frag_hdr *) p->payload;
 800c106:	687e      	ldr	r6, [r7, #4]
  len = lwip_ntohs(ip6_current_header()->_plen);
 800c108:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800c3e8 <ip6_reass+0x300>
  clen = pbuf_clen(p);
 800c10c:	f003 fa8c 	bl	800f628 <pbuf_clen>
 800c110:	9002      	str	r0, [sp, #8]
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 800c112:	8870      	ldrh	r0, [r6, #2]
 800c114:	f001 ffc4 	bl	800e0a0 <lwip_htons>
  len = lwip_ntohs(ip6_current_header()->_plen);
 800c118:	f8d8 300c 	ldr.w	r3, [r8, #12]
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 800c11c:	9003      	str	r0, [sp, #12]
  len = lwip_ntohs(ip6_current_header()->_plen);
 800c11e:	8898      	ldrh	r0, [r3, #4]
 800c120:	f001 ffbe 	bl	800e0a0 <lwip_htons>
  hdrdiff = (u8_t*)p->payload - (const u8_t*)ip6_current_header();
 800c124:	687c      	ldr	r4, [r7, #4]
 800c126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c12a:	1ae4      	subs	r4, r4, r3
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 800c12c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  len = lwip_ntohs(ip6_current_header()->_plen);
 800c130:	4605      	mov	r5, r0
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 800c132:	f2c0 8094 	blt.w	800c25e <ip6_reass+0x176>
 800c136:	4ba7      	ldr	r3, [pc, #668]	; (800c3d4 <ip6_reass+0x2ec>)
 800c138:	f44f 7296 	mov.w	r2, #300	; 0x12c
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 800c13c:	49a8      	ldr	r1, [pc, #672]	; (800c3e0 <ip6_reass+0x2f8>)
 800c13e:	48a7      	ldr	r0, [pc, #668]	; (800c3dc <ip6_reass+0x2f4>)
 800c140:	f010 fcf2 	bl	801cb28 <iprintf>
  hdrdiff += IP6_FRAG_HLEN;
 800c144:	3c20      	subs	r4, #32
  if (hdrdiff > len) {
 800c146:	42a5      	cmp	r5, r4
 800c148:	f2c0 81d1 	blt.w	800c4ee <ip6_reass+0x406>
  start = (offset & IP6_FRAG_OFFSET_MASK);
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	f023 0307 	bic.w	r3, r3, #7
 800c152:	b29b      	uxth	r3, r3
  len = (u16_t)(len - hdrdiff);
 800c154:	1b2d      	subs	r5, r5, r4
  start = (offset & IP6_FRAG_OFFSET_MASK);
 800c156:	9300      	str	r3, [sp, #0]
  len = (u16_t)(len - hdrdiff);
 800c158:	b2ad      	uxth	r5, r5
  if (start > (0xFFFF - len)) {
 800c15a:	9a00      	ldr	r2, [sp, #0]
 800c15c:	f5c5 437f 	rsb	r3, r5, #65280	; 0xff00
 800c160:	33ff      	adds	r3, #255	; 0xff
 800c162:	429a      	cmp	r2, r3
 800c164:	f300 81c3 	bgt.w	800c4ee <ip6_reass+0x406>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 800c168:	4b9e      	ldr	r3, [pc, #632]	; (800c3e4 <ip6_reass+0x2fc>)
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c16a:	f898 a024 	ldrb.w	sl, [r8, #36]	; 0x24
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 800c16e:	681c      	ldr	r4, [r3, #0]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c170:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800c180:	9305      	str	r3, [sp, #20]
 800c182:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c186:	9306      	str	r3, [sp, #24]
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 800c188:	e9d8 930b 	ldrd	r9, r3, [r8, #44]	; 0x2c
 800c18c:	e9d8 100d 	ldrd	r1, r0, [r8, #52]	; 0x34
 800c190:	f898 c03c 	ldrb.w	ip, [r8, #60]	; 0x3c
 800c194:	9307      	str	r3, [sp, #28]
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 800c196:	f04f 0b00 	mov.w	fp, #0
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	d166      	bne.n	800c26c <ip6_reass+0x184>
    ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 800c19e:	200d      	movs	r0, #13
 800c1a0:	f002 fd64 	bl	800ec6c <memp_malloc>
    if (ipr == NULL) {
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	b980      	cbnz	r0, 800c1ca <ip6_reass+0xe2>
      ip6_reass_remove_oldest_datagram(ipr, clen);
 800c1a8:	9902      	ldr	r1, [sp, #8]
 800c1aa:	f7ff ff3b 	bl	800c024 <ip6_reass_remove_oldest_datagram>
      ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 800c1ae:	200d      	movs	r0, #13
 800c1b0:	f002 fd5c 	bl	800ec6c <memp_malloc>
      if (ipr != NULL) {
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f000 8199 	beq.w	800c4ee <ip6_reass+0x406>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c1bc:	4b89      	ldr	r3, [pc, #548]	; (800c3e4 <ip6_reass+0x2fc>)
 800c1be:	f8d3 b000 	ldr.w	fp, [r3]
 800c1c2:	f1bb 0f00 	cmp.w	fp, #0
 800c1c6:	f040 8085 	bne.w	800c2d4 <ip6_reass+0x1ec>
    memset(ipr, 0, sizeof(struct ip6_reassdata));
 800c1ca:	221c      	movs	r2, #28
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	1d20      	adds	r0, r4, #4
 800c1d0:	f010 f85e 	bl	801c290 <memset>
    ipr->timer = IPV6_REASS_MAXAGE;
 800c1d4:	233c      	movs	r3, #60	; 0x3c
 800c1d6:	76e3      	strb	r3, [r4, #27]
    ipr->next = reassdatagrams;
 800c1d8:	4b82      	ldr	r3, [pc, #520]	; (800c3e4 <ip6_reass+0x2fc>)
 800c1da:	681a      	ldr	r2, [r3, #0]
    reassdatagrams = ipr;
 800c1dc:	601c      	str	r4, [r3, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 800c1de:	4b82      	ldr	r3, [pc, #520]	; (800c3e8 <ip6_reass+0x300>)
    ipr->next = reassdatagrams;
 800c1e0:	6022      	str	r2, [r4, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 800c1e2:	68da      	ldr	r2, [r3, #12]
 800c1e4:	60a2      	str	r2, [r4, #8]
    ipr->src_zone = ip6_addr_zone(ip6_current_src_addr());
 800c1e6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c1ea:	7722      	strb	r2, [r4, #28]
    ipr->dest_zone = ip6_addr_zone(ip6_current_dest_addr());
 800c1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1f0:	7763      	strb	r3, [r4, #29]
    ipr->identification = frag_hdr->_identification;
 800c1f2:	6873      	ldr	r3, [r6, #4]
 800c1f4:	6163      	str	r3, [r4, #20]
    ipr->nexth = frag_hdr->_nexth;
 800c1f6:	7833      	ldrb	r3, [r6, #0]
 800c1f8:	76a3      	strb	r3, [r4, #26]
  if ((ip6_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c1fa:	4a7a      	ldr	r2, [pc, #488]	; (800c3e4 <ip6_reass+0x2fc>)
 800c1fc:	9902      	ldr	r1, [sp, #8]
 800c1fe:	8893      	ldrh	r3, [r2, #4]
 800c200:	440b      	add	r3, r1
 800c202:	2b0a      	cmp	r3, #10
 800c204:	4690      	mov	r8, r2
 800c206:	dd0e      	ble.n	800c226 <ip6_reass+0x13e>
    ip6_reass_remove_oldest_datagram(ipr, clen);
 800c208:	4620      	mov	r0, r4
 800c20a:	f7ff ff0b 	bl	800c024 <ip6_reass_remove_oldest_datagram>
    if ((ip6_reass_pbufcount + clen) <= IP_REASS_MAX_PBUFS) {
 800c20e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c212:	9a02      	ldr	r2, [sp, #8]
 800c214:	4413      	add	r3, r2
 800c216:	2b0a      	cmp	r3, #10
 800c218:	f300 8169 	bgt.w	800c4ee <ip6_reass+0x406>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c21c:	f8d8 b000 	ldr.w	fp, [r8]
 800c220:	f1bb 0f00 	cmp.w	fp, #0
 800c224:	d15d      	bne.n	800c2e2 <ip6_reass+0x1fa>
  iprh = (struct ip6_reass_helper *)p->payload;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	9301      	str	r3, [sp, #4]
  end = (u16_t)(start + len);
 800c22a:	9b00      	ldr	r3, [sp, #0]
  for (q = ipr->p; q != NULL;) {
 800c22c:	6861      	ldr	r1, [r4, #4]
  end = (u16_t)(start + len);
 800c22e:	441d      	add	r5, r3
 800c230:	b2ad      	uxth	r5, r5
  for (q = ipr->p; q != NULL;) {
 800c232:	460e      	mov	r6, r1
  u8_t valid = 1;
 800c234:	f04f 0901 	mov.w	r9, #1
  struct ip6_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c238:	f04f 0a00 	mov.w	sl, #0
  for (q = ipr->p; q != NULL;) {
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	d156      	bne.n	800c2ee <ip6_reass+0x206>
    if (iprh_prev != NULL) {
 800c240:	f1ba 0f00 	cmp.w	sl, #0
 800c244:	f040 80a7 	bne.w	800c396 <ip6_reass+0x2ae>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c248:	b131      	cbz	r1, 800c258 <ip6_reass+0x170>
 800c24a:	4b62      	ldr	r3, [pc, #392]	; (800c3d4 <ip6_reass+0x2ec>)
 800c24c:	4967      	ldr	r1, [pc, #412]	; (800c3ec <ip6_reass+0x304>)
 800c24e:	4863      	ldr	r0, [pc, #396]	; (800c3dc <ip6_reass+0x2f4>)
 800c250:	f240 12f1 	movw	r2, #497	; 0x1f1
 800c254:	f010 fc68 	bl	801cb28 <iprintf>
      ipr->p = p;
 800c258:	6067      	str	r7, [r4, #4]
  next_pbuf = NULL;
 800c25a:	2600      	movs	r6, #0
 800c25c:	e059      	b.n	800c312 <ip6_reass+0x22a>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 800c25e:	2c27      	cmp	r4, #39	; 0x27
 800c260:	f73f af70 	bgt.w	800c144 <ip6_reass+0x5c>
 800c264:	4b5b      	ldr	r3, [pc, #364]	; (800c3d4 <ip6_reass+0x2ec>)
 800c266:	f240 122d 	movw	r2, #301	; 0x12d
 800c26a:	e767      	b.n	800c13c <ip6_reass+0x54>
    if ((frag_hdr->_identification == ipr->identification) &&
 800c26c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800c270:	6963      	ldr	r3, [r4, #20]
 800c272:	459e      	cmp	lr, r3
 800c274:	d12b      	bne.n	800c2ce <ip6_reass+0x1e6>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c276:	68a3      	ldr	r3, [r4, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 800c278:	9a01      	ldr	r2, [sp, #4]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c27a:	f8d3 e008 	ldr.w	lr, [r3, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 800c27e:	4572      	cmp	r2, lr
 800c280:	d125      	bne.n	800c2ce <ip6_reass+0x1e6>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c282:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c286:	9a04      	ldr	r2, [sp, #16]
 800c288:	4572      	cmp	r2, lr
 800c28a:	d120      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c28c:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800c290:	9a05      	ldr	r2, [sp, #20]
 800c292:	4572      	cmp	r2, lr
 800c294:	d11b      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c296:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800c29a:	9a06      	ldr	r2, [sp, #24]
 800c29c:	4572      	cmp	r2, lr
 800c29e:	d116      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c2a0:	f894 e01c 	ldrb.w	lr, [r4, #28]
 800c2a4:	45d6      	cmp	lr, sl
 800c2a6:	d112      	bne.n	800c2ce <ip6_reass+0x1e6>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 800c2a8:	f8d3 e018 	ldr.w	lr, [r3, #24]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 800c2ac:	45f1      	cmp	r9, lr
 800c2ae:	d10e      	bne.n	800c2ce <ip6_reass+0x1e6>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 800c2b0:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 800c2b4:	9a07      	ldr	r2, [sp, #28]
 800c2b6:	4572      	cmp	r2, lr
 800c2b8:	d109      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c2ba:	f8d3 e020 	ldr.w	lr, [r3, #32]
 800c2be:	4571      	cmp	r1, lr
 800c2c0:	d105      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	4298      	cmp	r0, r3
 800c2c6:	d102      	bne.n	800c2ce <ip6_reass+0x1e6>
 800c2c8:	7f63      	ldrb	r3, [r4, #29]
 800c2ca:	4563      	cmp	r3, ip
 800c2cc:	d095      	beq.n	800c1fa <ip6_reass+0x112>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 800c2ce:	46a3      	mov	fp, r4
 800c2d0:	6824      	ldr	r4, [r4, #0]
 800c2d2:	e762      	b.n	800c19a <ip6_reass+0xb2>
          if (ipr_prev->next == ipr) {
 800c2d4:	f8db 3000 	ldr.w	r3, [fp]
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	f43f af76 	beq.w	800c1ca <ip6_reass+0xe2>
 800c2de:	469b      	mov	fp, r3
 800c2e0:	e76f      	b.n	800c1c2 <ip6_reass+0xda>
        if (ipr_prev->next == ipr) {
 800c2e2:	f8db 3000 	ldr.w	r3, [fp]
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	d09d      	beq.n	800c226 <ip6_reass+0x13e>
 800c2ea:	469b      	mov	fp, r3
 800c2ec:	e798      	b.n	800c220 <ip6_reass+0x138>
    iprh_tmp = (struct ip6_reass_helper*)q->payload;
 800c2ee:	6873      	ldr	r3, [r6, #4]
    if (start < iprh_tmp->start) {
 800c2f0:	9800      	ldr	r0, [sp, #0]
 800c2f2:	889a      	ldrh	r2, [r3, #4]
 800c2f4:	4282      	cmp	r2, r0
 800c2f6:	d93b      	bls.n	800c370 <ip6_reass+0x288>
      if (end > iprh_tmp->start) {
 800c2f8:	42aa      	cmp	r2, r5
 800c2fa:	f0c0 80f8 	bcc.w	800c4ee <ip6_reass+0x406>
      if (iprh_prev != NULL) {
 800c2fe:	f1ba 0f00 	cmp.w	sl, #0
 800c302:	d033      	beq.n	800c36c <ip6_reass+0x284>
        if (start < iprh_prev->end) {
 800c304:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800c308:	4283      	cmp	r3, r0
 800c30a:	f200 80f0 	bhi.w	800c4ee <ip6_reass+0x406>
        iprh_prev->next_pbuf = p;
 800c30e:	f8ca 7000 	str.w	r7, [sl]
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount + clen);
 800c312:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800c316:	9b02      	ldr	r3, [sp, #8]
 800c318:	4403      	add	r3, r0
 800c31a:	f8a8 3004 	strh.w	r3, [r8, #4]
  if (start == 0) {
 800c31e:	9b00      	ldr	r3, [sp, #0]
 800c320:	b93b      	cbnz	r3, 800c332 <ip6_reass+0x24a>
    ipr->iphdr = ip_data.current_ip6_header;
 800c322:	4b31      	ldr	r3, [pc, #196]	; (800c3e8 <ip6_reass+0x300>)
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 800c324:	687a      	ldr	r2, [r7, #4]
    ipr->iphdr = ip_data.current_ip6_header;
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	60a3      	str	r3, [r4, #8]
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 800c32a:	6813      	ldr	r3, [r2, #0]
 800c32c:	60e3      	str	r3, [r4, #12]
 800c32e:	6853      	ldr	r3, [r2, #4]
 800c330:	6123      	str	r3, [r4, #16]
  iprh->next_pbuf = next_pbuf;
 800c332:	9b01      	ldr	r3, [sp, #4]
  iprh->start = start;
 800c334:	461a      	mov	r2, r3
  iprh->next_pbuf = next_pbuf;
 800c336:	601e      	str	r6, [r3, #0]
  iprh->start = start;
 800c338:	9b00      	ldr	r3, [sp, #0]
 800c33a:	8093      	strh	r3, [r2, #4]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 800c33c:	9b03      	ldr	r3, [sp, #12]
  iprh->end = end;
 800c33e:	80d5      	strh	r5, [r2, #6]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 800c340:	07db      	lsls	r3, r3, #31
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 800c342:	6863      	ldr	r3, [r4, #4]
    ipr->datagram_len = iprh->end;
 800c344:	bf58      	it	pl
 800c346:	8325      	strhpl	r5, [r4, #24]
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 800c348:	685d      	ldr	r5, [r3, #4]
  if (iprh_tmp->start != 0) {
 800c34a:	88ab      	ldrh	r3, [r5, #4]
    valid = 0;
 800c34c:	2b00      	cmp	r3, #0
  if (ipr->datagram_len == 0) {
 800c34e:	8b23      	ldrh	r3, [r4, #24]
    valid = 0;
 800c350:	bf18      	it	ne
 800c352:	f04f 0900 	movne.w	r9, #0
    valid = 0;
 800c356:	2b00      	cmp	r3, #0
 800c358:	bf08      	it	eq
 800c35a:	f04f 0900 	moveq.w	r9, #0
  while ((q != NULL) && valid) {
 800c35e:	2e00      	cmp	r6, #0
 800c360:	d048      	beq.n	800c3f4 <ip6_reass+0x30c>
 800c362:	f1b9 0f00 	cmp.w	r9, #0
 800c366:	d12c      	bne.n	800c3c2 <ip6_reass+0x2da>
  return NULL;
 800c368:	2600      	movs	r6, #0
 800c36a:	e096      	b.n	800c49a <ip6_reass+0x3b2>
        ipr->p = p;
 800c36c:	6067      	str	r7, [r4, #4]
 800c36e:	e7d0      	b.n	800c312 <ip6_reass+0x22a>
    } else if (start == iprh_tmp->start) {
 800c370:	f000 80bd 	beq.w	800c4ee <ip6_reass+0x406>
    } else if (start < iprh_tmp->end) {
 800c374:	88d8      	ldrh	r0, [r3, #6]
 800c376:	9e00      	ldr	r6, [sp, #0]
 800c378:	42b0      	cmp	r0, r6
 800c37a:	f200 80b8 	bhi.w	800c4ee <ip6_reass+0x406>
      if (iprh_prev != NULL) {
 800c37e:	f1ba 0f00 	cmp.w	sl, #0
 800c382:	d005      	beq.n	800c390 <ip6_reass+0x2a8>
        if (iprh_prev->end != iprh_tmp->start) {
 800c384:	f8ba 0006 	ldrh.w	r0, [sl, #6]
          valid = 0;
 800c388:	4290      	cmp	r0, r2
 800c38a:	bf18      	it	ne
 800c38c:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 800c390:	681e      	ldr	r6, [r3, #0]
 800c392:	469a      	mov	sl, r3
 800c394:	e752      	b.n	800c23c <ip6_reass+0x154>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 800c396:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800c39a:	9a00      	ldr	r2, [sp, #0]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d906      	bls.n	800c3ae <ip6_reass+0x2c6>
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <ip6_reass+0x2ec>)
 800c3a2:	4913      	ldr	r1, [pc, #76]	; (800c3f0 <ip6_reass+0x308>)
 800c3a4:	480d      	ldr	r0, [pc, #52]	; (800c3dc <ip6_reass+0x2f4>)
 800c3a6:	f240 12e9 	movw	r2, #489	; 0x1e9
 800c3aa:	f010 fbbd 	bl	801cb28 <iprintf>
      if (iprh_prev->end != start) {
 800c3ae:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        valid = 0;
 800c3b2:	9a00      	ldr	r2, [sp, #0]
      iprh_prev->next_pbuf = p;
 800c3b4:	f8ca 7000 	str.w	r7, [sl]
        valid = 0;
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	bf18      	it	ne
 800c3bc:	f04f 0900 	movne.w	r9, #0
 800c3c0:	e7a7      	b.n	800c312 <ip6_reass+0x22a>
    if (iprh_prev->end != iprh->start) {
 800c3c2:	9a01      	ldr	r2, [sp, #4]
    iprh = (struct ip6_reass_helper*)q->payload;
 800c3c4:	6873      	ldr	r3, [r6, #4]
    if (iprh_prev->end != iprh->start) {
 800c3c6:	88d1      	ldrh	r1, [r2, #6]
 800c3c8:	889a      	ldrh	r2, [r3, #4]
 800c3ca:	4291      	cmp	r1, r2
 800c3cc:	d1cc      	bne.n	800c368 <ip6_reass+0x280>
    q = iprh->next_pbuf;
 800c3ce:	681e      	ldr	r6, [r3, #0]
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	e7c4      	b.n	800c35e <ip6_reass+0x276>
 800c3d4:	0802c9fe 	.word	0x0802c9fe
 800c3d8:	0802caa8 	.word	0x0802caa8
 800c3dc:	0802aecf 	.word	0x0802aecf
 800c3e0:	0802cad8 	.word	0x0802cad8
 800c3e4:	20006a90 	.word	0x20006a90
 800c3e8:	2000f4b8 	.word	0x2000f4b8
 800c3ec:	0802c787 	.word	0x0802c787
 800c3f0:	0802c769 	.word	0x0802c769
  if (valid) {
 800c3f4:	f1b9 0f00 	cmp.w	r9, #0
 800c3f8:	d04f      	beq.n	800c49a <ip6_reass+0x3b2>
      next_pbuf = iprh->next_pbuf;
 800c3fa:	682f      	ldr	r7, [r5, #0]
      if (next_pbuf != NULL) {
 800c3fc:	2f00      	cmp	r7, #0
 800c3fe:	d150      	bne.n	800c4a2 <ip6_reass+0x3ba>
    MEMMOVE((u8_t*)ipr->iphdr + sizeof(struct ip6_frag_hdr), ipr->iphdr,
 800c400:	e9d4 7101 	ldrd	r7, r1, [r4, #4]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	f101 0008 	add.w	r0, r1, #8
 800c40a:	1a52      	subs	r2, r2, r1
 800c40c:	f00f ff26 	bl	801c25c <memmove>
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 800c410:	68a5      	ldr	r5, [r4, #8]
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 800c412:	8b20      	ldrh	r0, [r4, #24]
 800c414:	687b      	ldr	r3, [r7, #4]
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 800c416:	f105 0908 	add.w	r9, r5, #8
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 800c41a:	eba3 0309 	sub.w	r3, r3, r9
 800c41e:	3828      	subs	r0, #40	; 0x28
 800c420:	4418      	add	r0, r3
 800c422:	b280      	uxth	r0, r0
 800c424:	8320      	strh	r0, [r4, #24]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 800c426:	f001 fe3b 	bl	800e0a0 <lwip_htons>
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 800c42a:	7bab      	ldrb	r3, [r5, #14]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 800c42c:	81a8      	strh	r0, [r5, #12]
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 800c42e:	2b2c      	cmp	r3, #44	; 0x2c
 800c430:	d143      	bne.n	800c4ba <ip6_reass+0x3d2>
      iphdr_ptr->_nexth = ipr->nexth;
 800c432:	7ea3      	ldrb	r3, [r4, #26]
 800c434:	73ab      	strb	r3, [r5, #14]
    if (reassdatagrams == ipr) {
 800c436:	f8d8 3000 	ldr.w	r3, [r8]
 800c43a:	42a3      	cmp	r3, r4
 800c43c:	d149      	bne.n	800c4d2 <ip6_reass+0x3ea>
      reassdatagrams = ipr->next;
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_IP6_REASSDATA, ipr);
 800c444:	4621      	mov	r1, r4
 800c446:	200d      	movs	r0, #13
 800c448:	f002 fc2c 	bl	800eca4 <memp_free>
    clen = pbuf_clen(p);
 800c44c:	4638      	mov	r0, r7
 800c44e:	f003 f8eb 	bl	800f628 <pbuf_clen>
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 800c452:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c456:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 800c458:	4604      	mov	r4, r0
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 800c45a:	d206      	bcs.n	800c46a <ip6_reass+0x382>
 800c45c:	4b27      	ldr	r3, [pc, #156]	; (800c4fc <ip6_reass+0x414>)
 800c45e:	4928      	ldr	r1, [pc, #160]	; (800c500 <ip6_reass+0x418>)
 800c460:	4828      	ldr	r0, [pc, #160]	; (800c504 <ip6_reass+0x41c>)
 800c462:	f240 228a 	movw	r2, #650	; 0x28a
 800c466:	f010 fb5f 	bl	801cb28 <iprintf>
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 800c46a:	6879      	ldr	r1, [r7, #4]
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 800c46c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 800c470:	eba1 0109 	sub.w	r1, r1, r9
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 800c474:	1b04      	subs	r4, r0, r4
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 800c476:	b209      	sxth	r1, r1
 800c478:	4638      	mov	r0, r7
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 800c47a:	f8a8 4004 	strh.w	r4, [r8, #4]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 800c47e:	f002 ff77 	bl	800f370 <pbuf_header_force>
 800c482:	2800      	cmp	r0, #0
 800c484:	d037      	beq.n	800c4f6 <ip6_reass+0x40e>
      LWIP_ASSERT("ip6_reass: moving p->payload to ip6 header failed\n", 0);
 800c486:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <ip6_reass+0x414>)
 800c488:	491f      	ldr	r1, [pc, #124]	; (800c508 <ip6_reass+0x420>)
 800c48a:	481e      	ldr	r0, [pc, #120]	; (800c504 <ip6_reass+0x41c>)
 800c48c:	f240 228f 	movw	r2, #655	; 0x28f
 800c490:	f010 fb4a 	bl	801cb28 <iprintf>
      pbuf_free(p);
 800c494:	4638      	mov	r0, r7
 800c496:	f002 ff73 	bl	800f380 <pbuf_free>
}
 800c49a:	4630      	mov	r0, r6
 800c49c:	b009      	add	sp, #36	; 0x24
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iprh_tmp = (struct ip6_reass_helper*)next_pbuf->payload;
 800c4a2:	687d      	ldr	r5, [r7, #4]
        pbuf_remove_header(next_pbuf, IP6_FRAG_HLEN);
 800c4a4:	2108      	movs	r1, #8
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	f002 ff36 	bl	800f318 <pbuf_remove_header>
        pbuf_cat(ipr->p, next_pbuf);
 800c4ac:	6860      	ldr	r0, [r4, #4]
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	f003 f8de 	bl	800f670 <pbuf_cat>
    while (iprh != NULL) {
 800c4b4:	2d00      	cmp	r5, #0
 800c4b6:	d1a0      	bne.n	800c3fa <ip6_reass+0x312>
 800c4b8:	e7a2      	b.n	800c400 <ip6_reass+0x318>
      u8_t *ptr = (u8_t *)iphdr_ptr + IP6_HLEN;
 800c4ba:	3530      	adds	r5, #48	; 0x30
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 800c4bc:	782b      	ldrb	r3, [r5, #0]
 800c4be:	2b2c      	cmp	r3, #44	; 0x2c
 800c4c0:	d102      	bne.n	800c4c8 <ip6_reass+0x3e0>
      *ptr = ipr->nexth;
 800c4c2:	7ea3      	ldrb	r3, [r4, #26]
 800c4c4:	702b      	strb	r3, [r5, #0]
 800c4c6:	e7b6      	b.n	800c436 <ip6_reass+0x34e>
        ptr += 8 * (1 + ptr[1]);
 800c4c8:	786b      	ldrb	r3, [r5, #1]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c4d0:	e7f4      	b.n	800c4bc <ip6_reass+0x3d4>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 800c4d2:	f1bb 0f00 	cmp.w	fp, #0
 800c4d6:	d106      	bne.n	800c4e6 <ip6_reass+0x3fe>
 800c4d8:	4b08      	ldr	r3, [pc, #32]	; (800c4fc <ip6_reass+0x414>)
 800c4da:	490c      	ldr	r1, [pc, #48]	; (800c50c <ip6_reass+0x424>)
 800c4dc:	4809      	ldr	r0, [pc, #36]	; (800c504 <ip6_reass+0x41c>)
 800c4de:	f240 2283 	movw	r2, #643	; 0x283
 800c4e2:	f010 fb21 	bl	801cb28 <iprintf>
      ipr_prev->next = ipr->next;
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f8cb 3000 	str.w	r3, [fp]
 800c4ec:	e7aa      	b.n	800c444 <ip6_reass+0x35c>
  pbuf_free(p);
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f002 ff46 	bl	800f380 <pbuf_free>
  return NULL;
 800c4f4:	e738      	b.n	800c368 <ip6_reass+0x280>
 800c4f6:	463e      	mov	r6, r7
 800c4f8:	e7cf      	b.n	800c49a <ip6_reass+0x3b2>
 800c4fa:	bf00      	nop
 800c4fc:	0802c9fe 	.word	0x0802c9fe
 800c500:	0802cb04 	.word	0x0802cb04
 800c504:	0802aecf 	.word	0x0802aecf
 800c508:	0802cb20 	.word	0x0802cb20
 800c50c:	0802c6e7 	.word	0x0802c6e7

0800c510 <ip6_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)
{
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	ed2d 8b02 	vpush	{d8}
 800c518:	b089      	sub	sp, #36	; 0x24
 800c51a:	4604      	mov	r4, r0
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  static u32_t identification;
  u16_t left, cop;
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 800c51c:	4610      	mov	r0, r2
{
 800c51e:	ee08 2a10 	vmov	s16, r2
 800c522:	9105      	str	r1, [sp, #20]
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 800c524:	f001 fcd2 	bl	800decc <nd6_get_destination_mtu>
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 800c528:	3830      	subs	r0, #48	; 0x30
  u16_t fragment_offset = 0;
  u16_t last;
  u16_t poff = IP6_HLEN;

  identification++;
 800c52a:	4a60      	ldr	r2, [pc, #384]	; (800c6ac <ip6_frag+0x19c>)
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 800c52c:	f020 0007 	bic.w	r0, r0, #7
 800c530:	b283      	uxth	r3, r0
 800c532:	9304      	str	r3, [sp, #16]
  identification++;
 800c534:	6893      	ldr	r3, [r2, #8]
 800c536:	3301      	adds	r3, #1
 800c538:	6093      	str	r3, [r2, #8]

  original_ip6hdr = (struct ip6_hdr *)p->payload;
 800c53a:	6863      	ldr	r3, [r4, #4]
 800c53c:	9303      	str	r3, [sp, #12]

  /* @todo we assume there are no options in the unfragmentable part (IPv6 header). */
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 800c53e:	8923      	ldrh	r3, [r4, #8]
 800c540:	2b27      	cmp	r3, #39	; 0x27
 800c542:	d806      	bhi.n	800c552 <ip6_frag+0x42>
 800c544:	4b5a      	ldr	r3, [pc, #360]	; (800c6b0 <ip6_frag+0x1a0>)
 800c546:	495b      	ldr	r1, [pc, #364]	; (800c6b4 <ip6_frag+0x1a4>)
 800c548:	485b      	ldr	r0, [pc, #364]	; (800c6b8 <ip6_frag+0x1a8>)
 800c54a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800c54e:	f010 faeb 	bl	801cb28 <iprintf>
  left = (u16_t)(p->tot_len - IP6_HLEN);
 800c552:	8925      	ldrh	r5, [r4, #8]
  u16_t fragment_offset = 0;
 800c554:	f04f 0b00 	mov.w	fp, #0
  left = (u16_t)(p->tot_len - IP6_HLEN);
 800c558:	3d28      	subs	r5, #40	; 0x28
 800c55a:	b2ad      	uxth	r5, r5
  u16_t poff = IP6_HLEN;
 800c55c:	f04f 0828 	mov.w	r8, #40	; 0x28
  u16_t newpbuflen = 0;
 800c560:	465f      	mov	r7, fp

  while (left) {
 800c562:	b92d      	cbnz	r5, 800c570 <ip6_frag+0x60>

    pbuf_free(rambuf);
    left = (u16_t)(left - cop);
    fragment_offset = (u16_t)(fragment_offset + cop);
  }
  return ERR_OK;
 800c564:	4628      	mov	r0, r5
}
 800c566:	b009      	add	sp, #36	; 0x24
 800c568:	ecbd 8b02 	vpop	{d8}
 800c56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cop = last ? left : nfb;
 800c570:	9b04      	ldr	r3, [sp, #16]
 800c572:	42ab      	cmp	r3, r5
 800c574:	bf28      	it	cs
 800c576:	462b      	movcs	r3, r5
    rambuf = pbuf_alloc(PBUF_LINK, IP6_HLEN + IP6_FRAG_HLEN, PBUF_RAM);
 800c578:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c57c:	2130      	movs	r1, #48	; 0x30
 800c57e:	200e      	movs	r0, #14
 800c580:	4699      	mov	r9, r3
 800c582:	f002 ff65 	bl	800f450 <pbuf_alloc>
    if (rambuf == NULL) {
 800c586:	4606      	mov	r6, r0
 800c588:	2800      	cmp	r0, #0
 800c58a:	d034      	beq.n	800c5f6 <ip6_frag+0xe6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c58c:	8963      	ldrh	r3, [r4, #10]
 800c58e:	2b27      	cmp	r3, #39	; 0x27
 800c590:	d806      	bhi.n	800c5a0 <ip6_frag+0x90>
 800c592:	4b47      	ldr	r3, [pc, #284]	; (800c6b0 <ip6_frag+0x1a0>)
 800c594:	4949      	ldr	r1, [pc, #292]	; (800c6bc <ip6_frag+0x1ac>)
 800c596:	4848      	ldr	r0, [pc, #288]	; (800c6b8 <ip6_frag+0x1a8>)
 800c598:	f240 320f 	movw	r2, #783	; 0x30f
 800c59c:	f010 fac4 	bl	801cb28 <iprintf>
    SMEMCPY(rambuf->payload, original_ip6hdr, IP6_HLEN);
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	6872      	ldr	r2, [r6, #4]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	3128      	adds	r1, #40	; 0x28
 800c5a8:	f853 0b04 	ldr.w	r0, [r3], #4
 800c5ac:	f842 0b04 	str.w	r0, [r2], #4
 800c5b0:	428b      	cmp	r3, r1
 800c5b2:	d1f9      	bne.n	800c5a8 <ip6_frag+0x98>
    p->payload = (u8_t *)p->payload + poff;
 800c5b4:	6863      	ldr	r3, [r4, #4]
    ip6hdr = (struct ip6_hdr *)rambuf->payload;
 800c5b6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    p->payload = (u8_t *)p->payload + poff;
 800c5ba:	4443      	add	r3, r8
 800c5bc:	6063      	str	r3, [r4, #4]
    p->len = (u16_t)(p->len - poff);
 800c5be:	8963      	ldrh	r3, [r4, #10]
 800c5c0:	eba3 0308 	sub.w	r3, r3, r8
 800c5c4:	8163      	strh	r3, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - poff);
 800c5c6:	8923      	ldrh	r3, [r4, #8]
 800c5c8:	eba3 0808 	sub.w	r8, r3, r8
 800c5cc:	f8a4 8008 	strh.w	r8, [r4, #8]
    left_to_copy = cop;
 800c5d0:	46c8      	mov	r8, r9
    while (left_to_copy) {
 800c5d2:	f1b8 0f00 	cmp.w	r8, #0
 800c5d6:	d034      	beq.n	800c642 <ip6_frag+0x132>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 800c5d8:	8967      	ldrh	r7, [r4, #10]
 800c5da:	4547      	cmp	r7, r8
 800c5dc:	bf28      	it	cs
 800c5de:	4647      	movcs	r7, r8
      if (!newpbuflen) {
 800c5e0:	b90f      	cbnz	r7, 800c5e6 <ip6_frag+0xd6>
        p = p->next;
 800c5e2:	6824      	ldr	r4, [r4, #0]
 800c5e4:	e7f5      	b.n	800c5d2 <ip6_frag+0xc2>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c5e6:	2005      	movs	r0, #5
 800c5e8:	f002 fb40 	bl	800ec6c <memp_malloc>
      if (pcr == NULL) {
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	b928      	cbnz	r0, 800c5fc <ip6_frag+0xec>
        pbuf_free(rambuf);
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f002 fec5 	bl	800f380 <pbuf_free>
      return ERR_MEM;
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fa:	e7b4      	b.n	800c566 <ip6_frag+0x56>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 800c5fc:	9701      	str	r7, [sp, #4]
 800c5fe:	6862      	ldr	r2, [r4, #4]
 800c600:	9200      	str	r2, [sp, #0]
 800c602:	9006      	str	r0, [sp, #24]
 800c604:	2241      	movs	r2, #65	; 0x41
 800c606:	4639      	mov	r1, r7
 800c608:	2000      	movs	r0, #0
 800c60a:	f002 fe65 	bl	800f2d8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	b918      	cbnz	r0, 800c61a <ip6_frag+0x10a>
        ip6_frag_free_pbuf_custom_ref(pcr);
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff fd26 	bl	800c064 <ip6_frag_free_pbuf_custom_ref>
 800c618:	e7ea      	b.n	800c5f0 <ip6_frag+0xe0>
 800c61a:	e9cd 0306 	strd	r0, r3, [sp, #24]
      pbuf_ref(p);
 800c61e:	4620      	mov	r0, r4
 800c620:	f003 f80a 	bl	800f638 <pbuf_ref>
      pcr->original = p;
 800c624:	9b07      	ldr	r3, [sp, #28]
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 800c626:	4a26      	ldr	r2, [pc, #152]	; (800c6c0 <ip6_frag+0x1b0>)
      pbuf_cat(rambuf, newpbuf);
 800c628:	9906      	ldr	r1, [sp, #24]
      pcr->original = p;
 800c62a:	615c      	str	r4, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c62c:	eba8 0807 	sub.w	r8, r8, r7
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 800c630:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800c632:	4630      	mov	r0, r6
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c634:	fa1f f888 	uxth.w	r8, r8
      pbuf_cat(rambuf, newpbuf);
 800c638:	f003 f81a 	bl	800f670 <pbuf_cat>
      if (left_to_copy) {
 800c63c:	f1b8 0f00 	cmp.w	r8, #0
 800c640:	d1cf      	bne.n	800c5e2 <ip6_frag+0xd2>
    frag_hdr->_nexth = original_ip6hdr->_nexth;
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	799b      	ldrb	r3, [r3, #6]
 800c646:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 800c64a:	9b04      	ldr	r3, [sp, #16]
    frag_hdr->reserved = 0;
 800c64c:	f88a 8029 	strb.w	r8, [sl, #41]	; 0x29
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 800c650:	f02b 0007 	bic.w	r0, fp, #7
 800c654:	429d      	cmp	r5, r3
 800c656:	bf88      	it	hi
 800c658:	f040 0001 	orrhi.w	r0, r0, #1
 800c65c:	f001 fd20 	bl	800e0a0 <lwip_htons>
    frag_hdr->_identification = lwip_htonl(identification);
 800c660:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <ip6_frag+0x19c>)
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 800c662:	f8aa 002a 	strh.w	r0, [sl, #42]	; 0x2a
    frag_hdr->_identification = lwip_htonl(identification);
 800c666:	6898      	ldr	r0, [r3, #8]
 800c668:	f001 fd1d 	bl	800e0a6 <lwip_htonl>
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 800c66c:	232c      	movs	r3, #44	; 0x2c
    frag_hdr->_identification = lwip_htonl(identification);
 800c66e:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 800c672:	f109 0008 	add.w	r0, r9, #8
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 800c676:	f88a 3006 	strb.w	r3, [sl, #6]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 800c67a:	b280      	uxth	r0, r0
 800c67c:	f001 fd10 	bl	800e0a0 <lwip_htons>
    netif->output_ip6(netif, rambuf, dest);
 800c680:	9b05      	ldr	r3, [sp, #20]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 800c682:	f8aa 0004 	strh.w	r0, [sl, #4]
    netif->output_ip6(netif, rambuf, dest);
 800c686:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c68a:	9805      	ldr	r0, [sp, #20]
 800c68c:	ee18 2a10 	vmov	r2, s16
 800c690:	4631      	mov	r1, r6
 800c692:	4798      	blx	r3
    left = (u16_t)(left - cop);
 800c694:	eba5 0509 	sub.w	r5, r5, r9
    pbuf_free(rambuf);
 800c698:	4630      	mov	r0, r6
    fragment_offset = (u16_t)(fragment_offset + cop);
 800c69a:	44cb      	add	fp, r9
    pbuf_free(rambuf);
 800c69c:	f002 fe70 	bl	800f380 <pbuf_free>
    left = (u16_t)(left - cop);
 800c6a0:	b2ad      	uxth	r5, r5
    fragment_offset = (u16_t)(fragment_offset + cop);
 800c6a2:	fa1f fb8b 	uxth.w	fp, fp
 800c6a6:	46b8      	mov	r8, r7
 800c6a8:	e75b      	b.n	800c562 <ip6_frag+0x52>
 800c6aa:	bf00      	nop
 800c6ac:	20006a90 	.word	0x20006a90
 800c6b0:	0802c9fe 	.word	0x0802c9fe
 800c6b4:	0802cb53 	.word	0x0802cb53
 800c6b8:	0802aecf 	.word	0x0802aecf
 800c6bc:	0802c843 	.word	0x0802c843
 800c6c0:	0800c091 	.word	0x0800c091

0800c6c4 <mld6_delayed_report>:
 *              should be sent
 * @param maxresp_in the max resp delay provided in the query
 */
static void
mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
{
 800c6c4:	b538      	push	{r3, r4, r5, lr}
  /* Convert maxresp from milliseconds to tmr ticks */
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
  if (maxresp == 0) {
 800c6c6:	2963      	cmp	r1, #99	; 0x63
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 800c6c8:	bf8a      	itet	hi
 800c6ca:	2464      	movhi	r4, #100	; 0x64
    maxresp = 1;
 800c6cc:	2401      	movls	r4, #1
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 800c6ce:	fbb1 f4f4 	udivhi	r4, r1, r4
{
 800c6d2:	4605      	mov	r5, r0
  }

#ifdef LWIP_RAND
  /* Randomize maxresp. (if LWIP_RAND is supported) */
  maxresp = (u16_t)(LWIP_RAND() % maxresp);
 800c6d4:	f010 fa6e 	bl	801cbb4 <rand>
 800c6d8:	fbb0 f1f4 	udiv	r1, r0, r4
 800c6dc:	fb01 0414 	mls	r4, r1, r4, r0
 800c6e0:	b2a4      	uxth	r4, r4
    maxresp = 1;
  }
#endif /* LWIP_RAND */

  /* Apply timer value if no report has been scheduled already. */
  if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
 800c6e2:	7e6b      	ldrb	r3, [r5, #25]
 800c6e4:	2c01      	cmp	r4, #1
 800c6e6:	bf38      	it	cc
 800c6e8:	2401      	movcc	r4, #1
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d005      	beq.n	800c6fa <mld6_delayed_report+0x36>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d106      	bne.n	800c700 <mld6_delayed_report+0x3c>
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 800c6f2:	8b6b      	ldrh	r3, [r5, #26]
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
 800c6f4:	b10b      	cbz	r3, 800c6fa <mld6_delayed_report+0x36>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 800c6f6:	429c      	cmp	r4, r3
 800c6f8:	d202      	bcs.n	800c700 <mld6_delayed_report+0x3c>
    group->timer = maxresp;
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 800c6fa:	2301      	movs	r3, #1
    group->timer = maxresp;
 800c6fc:	836c      	strh	r4, [r5, #26]
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 800c6fe:	766b      	strb	r3, [r5, #25]
      sys_timeout(MLD6_TMR_INTERVAL, mld6_timeout_cb, NULL);
      is_tmr_start = true;
  }
#endif
  }
}
 800c700:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c704 <mld6_send>:
 * @param group the group to report or quit
 * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
 */
static void
mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
{
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	4681      	mov	r9, r0
 800c70a:	b085      	sub	sp, #20
 800c70c:	460f      	mov	r7, r1
 800c70e:	4692      	mov	sl, r2
  struct mld_header *mld_hdr;
  struct pbuf *p;
  const ip6_addr_t *src_addr;

  /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
  p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
 800c710:	2120      	movs	r1, #32
 800c712:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c716:	2036      	movs	r0, #54	; 0x36
 800c718:	f002 fe9a 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 800c71c:	4605      	mov	r5, r0
 800c71e:	2800      	cmp	r0, #0
 800c720:	d057      	beq.n	800c7d2 <mld6_send+0xce>
    MLD6_STATS_INC(mld6.memerr);
    return;
  }

  /* Move to make room for Hop-by-hop options header. */
  if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
 800c722:	2108      	movs	r1, #8
 800c724:	f002 fdf8 	bl	800f318 <pbuf_remove_header>
 800c728:	b128      	cbz	r0, 800c736 <mld6_send+0x32>

  /* Send the packet out. */
  MLD6_STATS_INC(mld6.xmit);
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
      MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
  pbuf_free(p);
 800c72a:	4628      	mov	r0, r5
}
 800c72c:	b005      	add	sp, #20
 800c72e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c732:	f002 be25 	b.w	800f380 <pbuf_free>
  mld_hdr = (struct mld_header *)p->payload;
 800c736:	686c      	ldr	r4, [r5, #4]
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 800c738:	f899 3094 	ldrb.w	r3, [r9, #148]	; 0x94
  mld_hdr->type = type;
 800c73c:	f884 a000 	strb.w	sl, [r4]
  mld_hdr->code = 0;
 800c740:	f04f 0800 	mov.w	r8, #0
 800c744:	f884 8001 	strb.w	r8, [r4, #1]
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 800c748:	06db      	lsls	r3, r3, #27
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60a3      	str	r3, [r4, #8]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	60e3      	str	r3, [r4, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6123      	str	r3, [r4, #16]
    src_addr = IP6_ADDR_ANY6;
 800c756:	bf58      	it	pl
 800c758:	4e1f      	ldrpl	r6, [pc, #124]	; (800c7d8 <mld6_send+0xd4>)
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	6163      	str	r3, [r4, #20]
    src_addr = netif_ip6_addr(netif, 0);
 800c75e:	bf48      	it	mi
 800c760:	f109 064c 	addmi.w	r6, r9, #76	; 0x4c
      src_addr, &(group->group_address));
 800c764:	f107 0b04 	add.w	fp, r7, #4
    mld_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len,
 800c768:	4633      	mov	r3, r6
 800c76a:	896a      	ldrh	r2, [r5, #10]
  mld_hdr->chksum = 0;
 800c76c:	f884 8002 	strb.w	r8, [r4, #2]
 800c770:	f884 8003 	strb.w	r8, [r4, #3]
  mld_hdr->max_resp_delay = 0;
 800c774:	f884 8004 	strb.w	r8, [r4, #4]
 800c778:	f884 8005 	strb.w	r8, [r4, #5]
  mld_hdr->reserved = 0;
 800c77c:	f884 8006 	strb.w	r8, [r4, #6]
 800c780:	f884 8007 	strb.w	r8, [r4, #7]
    mld_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len,
 800c784:	213a      	movs	r1, #58	; 0x3a
 800c786:	f8cd b000 	str.w	fp, [sp]
 800c78a:	4628      	mov	r0, r5
 800c78c:	f001 ff56 	bl	800e63c <ip6_chksum_pseudo>
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 800c790:	4642      	mov	r2, r8
    mld_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len,
 800c792:	8060      	strh	r0, [r4, #2]
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 800c794:	213a      	movs	r1, #58	; 0x3a
 800c796:	4628      	mov	r0, r5
 800c798:	f7ff fad2 	bl	800bd40 <ip6_options_add_hbh_ra>
  if (type == ICMP6_TYPE_MLR) {
 800c79c:	f1ba 0f83 	cmp.w	sl, #131	; 0x83
    group->last_reporter_flag = 1;
 800c7a0:	bf04      	itt	eq
 800c7a2:	2301      	moveq	r3, #1
 800c7a4:	763b      	strbeq	r3, [r7, #24]
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 800c7a6:	6833      	ldr	r3, [r6, #0]
 800c7a8:	b93b      	cbnz	r3, 800c7ba <mld6_send+0xb6>
 800c7aa:	6873      	ldr	r3, [r6, #4]
 800c7ac:	b92b      	cbnz	r3, 800c7ba <mld6_send+0xb6>
 800c7ae:	68b3      	ldr	r3, [r6, #8]
 800c7b0:	b91b      	cbnz	r3, 800c7ba <mld6_send+0xb6>
 800c7b2:	68f3      	ldr	r3, [r6, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bf08      	it	eq
 800c7b8:	2600      	moveq	r6, #0
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e9cd 3300 	strd	r3, r3, [sp]
 800c7c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	465a      	mov	r2, fp
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f7ff fa84 	bl	800bcd8 <ip6_output_if>
 800c7d0:	e7ab      	b.n	800c72a <mld6_send+0x26>
}
 800c7d2:	b005      	add	sp, #20
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	0801fc54 	.word	0x0801fc54

0800c7dc <mld6_report_groups>:
{
 800c7dc:	b510      	push	{r4, lr}
  struct mld_group *group = netif_mld6_data(netif);
 800c7de:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
  while (group != NULL) {
 800c7e2:	b904      	cbnz	r4, 800c7e6 <mld6_report_groups+0xa>
}
 800c7e4:	bd10      	pop	{r4, pc}
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c7ec:	f7ff ff6a 	bl	800c6c4 <mld6_delayed_report>
    group = group->next;
 800c7f0:	6824      	ldr	r4, [r4, #0]
 800c7f2:	e7f6      	b.n	800c7e2 <mld6_report_groups+0x6>

0800c7f4 <mld6_lookfor_group>:
  struct mld_group *group = netif_mld6_data(ifp);
 800c7f4:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
  while (group != NULL) {
 800c7f8:	b900      	cbnz	r0, 800c7fc <mld6_lookfor_group+0x8>
}
 800c7fa:	4770      	bx	lr
    if (ip6_addr_cmp(&(group->group_address), addr)) {
 800c7fc:	6842      	ldr	r2, [r0, #4]
 800c7fe:	680b      	ldr	r3, [r1, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d10f      	bne.n	800c824 <mld6_lookfor_group+0x30>
 800c804:	6882      	ldr	r2, [r0, #8]
 800c806:	684b      	ldr	r3, [r1, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d10b      	bne.n	800c824 <mld6_lookfor_group+0x30>
 800c80c:	68c2      	ldr	r2, [r0, #12]
 800c80e:	688b      	ldr	r3, [r1, #8]
 800c810:	429a      	cmp	r2, r3
 800c812:	d107      	bne.n	800c824 <mld6_lookfor_group+0x30>
 800c814:	6902      	ldr	r2, [r0, #16]
 800c816:	68cb      	ldr	r3, [r1, #12]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d103      	bne.n	800c824 <mld6_lookfor_group+0x30>
 800c81c:	7d02      	ldrb	r2, [r0, #20]
 800c81e:	7c0b      	ldrb	r3, [r1, #16]
 800c820:	429a      	cmp	r2, r3
 800c822:	d0ea      	beq.n	800c7fa <mld6_lookfor_group+0x6>
    group = group->next;
 800c824:	6800      	ldr	r0, [r0, #0]
 800c826:	e7e7      	b.n	800c7f8 <mld6_lookfor_group+0x4>

0800c828 <mld6_input>:
  if (p->len < sizeof(struct mld_header)) {
 800c828:	8942      	ldrh	r2, [r0, #10]
 800c82a:	2a17      	cmp	r2, #23
{
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c830:	4606      	mov	r6, r0
 800c832:	460b      	mov	r3, r1
  if (p->len < sizeof(struct mld_header)) {
 800c834:	d803      	bhi.n	800c83e <mld6_input+0x16>
}
 800c836:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800c83a:	f002 bda1 	b.w	800f380 <pbuf_free>
  mld_hdr = (struct mld_header *)p->payload;
 800c83e:	6845      	ldr	r5, [r0, #4]
  switch (mld_hdr->type) {
 800c840:	782a      	ldrb	r2, [r5, #0]
 800c842:	2a82      	cmp	r2, #130	; 0x82
 800c844:	d003      	beq.n	800c84e <mld6_input+0x26>
 800c846:	2a83      	cmp	r2, #131	; 0x83
 800c848:	d03f      	beq.n	800c8ca <mld6_input+0xa2>
  pbuf_free(p);
 800c84a:	4630      	mov	r0, r6
 800c84c:	e7f3      	b.n	800c836 <mld6_input+0xe>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 800c84e:	4a25      	ldr	r2, [pc, #148]	; (800c8e4 <mld6_input+0xbc>)
 800c850:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 800c852:	f240 20ff 	movw	r0, #767	; 0x2ff
 800c856:	4287      	cmp	r7, r0
 800c858:	d12d      	bne.n	800c8b6 <mld6_input+0x8e>
 800c85a:	e9d2 400c 	ldrd	r4, r0, [r2, #48]	; 0x30
 800c85e:	ea54 0100 	orrs.w	r1, r4, r0
 800c862:	d128      	bne.n	800c8b6 <mld6_input+0x8e>
 800c864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c866:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c86a:	d124      	bne.n	800c8b6 <mld6_input+0x8e>
        ip6_addr_isany(&(mld_hdr->multicast_address))) {
 800c86c:	68aa      	ldr	r2, [r5, #8]
 800c86e:	bb12      	cbnz	r2, 800c8b6 <mld6_input+0x8e>
 800c870:	68ea      	ldr	r2, [r5, #12]
 800c872:	bb02      	cbnz	r2, 800c8b6 <mld6_input+0x8e>
 800c874:	692a      	ldr	r2, [r5, #16]
 800c876:	b9f2      	cbnz	r2, 800c8b6 <mld6_input+0x8e>
 800c878:	696a      	ldr	r2, [r5, #20]
 800c87a:	b9e2      	cbnz	r2, 800c8b6 <mld6_input+0x8e>
      group = netif_mld6_data(inp);
 800c87c:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 800c880:	f648 78ff 	movw	r8, #36863	; 0x8fff
 800c884:	f240 19ff 	movw	r9, #511	; 0x1ff
      while (group != NULL) {
 800c888:	2c00      	cmp	r4, #0
 800c88a:	d0de      	beq.n	800c84a <mld6_input+0x22>
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 800c88c:	6863      	ldr	r3, [r4, #4]
 800c88e:	ea03 0208 	and.w	r2, r3, r8
 800c892:	454a      	cmp	r2, r9
 800c894:	d00d      	beq.n	800c8b2 <mld6_input+0x8a>
 800c896:	42bb      	cmp	r3, r7
 800c898:	d107      	bne.n	800c8aa <mld6_input+0x82>
            (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
 800c89a:	68a3      	ldr	r3, [r4, #8]
 800c89c:	b92b      	cbnz	r3, 800c8aa <mld6_input+0x82>
 800c89e:	68e3      	ldr	r3, [r4, #12]
 800c8a0:	b91b      	cbnz	r3, 800c8aa <mld6_input+0x82>
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8a8:	d003      	beq.n	800c8b2 <mld6_input+0x8a>
          mld6_delayed_report(group, mld_hdr->max_resp_delay);
 800c8aa:	88a9      	ldrh	r1, [r5, #4]
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7ff ff09 	bl	800c6c4 <mld6_delayed_report>
        group = group->next;
 800c8b2:	6824      	ldr	r4, [r4, #0]
 800c8b4:	e7e8      	b.n	800c888 <mld6_input+0x60>
      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 800c8b6:	490c      	ldr	r1, [pc, #48]	; (800c8e8 <mld6_input+0xc0>)
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff ff9b 	bl	800c7f4 <mld6_lookfor_group>
      if (group != NULL) {
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0c3      	beq.n	800c84a <mld6_input+0x22>
        mld6_delayed_report(group, mld_hdr->max_resp_delay);
 800c8c2:	88a9      	ldrh	r1, [r5, #4]
 800c8c4:	f7ff fefe 	bl	800c6c4 <mld6_delayed_report>
 800c8c8:	e7bf      	b.n	800c84a <mld6_input+0x22>
    group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 800c8ca:	4907      	ldr	r1, [pc, #28]	; (800c8e8 <mld6_input+0xc0>)
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff ff91 	bl	800c7f4 <mld6_lookfor_group>
    if (group != NULL) {
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d0b9      	beq.n	800c84a <mld6_input+0x22>
      if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 800c8d6:	7e43      	ldrb	r3, [r0, #25]
 800c8d8:	2b01      	cmp	r3, #1
        group->last_reporter_flag = 0;
 800c8da:	bf04      	itt	eq
 800c8dc:	f44f 7300 	moveq.w	r3, #512	; 0x200
 800c8e0:	6183      	streq	r3, [r0, #24]
 800c8e2:	e7b2      	b.n	800c84a <mld6_input+0x22>
 800c8e4:	2000f4b8 	.word	0x2000f4b8
 800c8e8:	2000f4e4 	.word	0x2000f4e4

0800c8ec <mld6_joingroup_netif>:
{
 800c8ec:	b570      	push	{r4, r5, r6, lr}
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 800c8ee:	7c0b      	ldrb	r3, [r1, #16]
{
 800c8f0:	b086      	sub	sp, #24
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460d      	mov	r5, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 800c8f6:	bb83      	cbnz	r3, 800c95a <mld6_joingroup_netif+0x6e>
 800c8f8:	680a      	ldr	r2, [r1, #0]
 800c8fa:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800c8fe:	4011      	ands	r1, r2
 800c900:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800c904:	4281      	cmp	r1, r0
 800c906:	d00a      	beq.n	800c91e <mld6_joingroup_netif+0x32>
 800c908:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800c90c:	4010      	ands	r0, r2
 800c90e:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c912:	42a0      	cmp	r0, r4
 800c914:	d003      	beq.n	800c91e <mld6_joingroup_netif+0x32>
 800c916:	f240 24ff 	movw	r4, #767	; 0x2ff
 800c91a:	42a0      	cmp	r0, r4
 800c91c:	d11d      	bne.n	800c95a <mld6_joingroup_netif+0x6e>
    ip6_addr_set(&ip6addr, groupaddr);
 800c91e:	6868      	ldr	r0, [r5, #4]
 800c920:	9002      	str	r0, [sp, #8]
 800c922:	68a8      	ldr	r0, [r5, #8]
 800c924:	9003      	str	r0, [sp, #12]
 800c926:	68e8      	ldr	r0, [r5, #12]
 800c928:	9004      	str	r0, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 800c92a:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800c92e:	4281      	cmp	r1, r0
    ip6_addr_set(&ip6addr, groupaddr);
 800c930:	9201      	str	r2, [sp, #4]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 800c932:	d00b      	beq.n	800c94c <mld6_joingroup_netif+0x60>
 800c934:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800c938:	0412      	lsls	r2, r2, #16
 800c93a:	0c12      	lsrs	r2, r2, #16
 800c93c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c940:	428a      	cmp	r2, r1
 800c942:	d003      	beq.n	800c94c <mld6_joingroup_netif+0x60>
 800c944:	f240 21ff 	movw	r1, #767	; 0x2ff
 800c948:	428a      	cmp	r2, r1
 800c94a:	d103      	bne.n	800c954 <mld6_joingroup_netif+0x68>
 800c94c:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 800c950:	3301      	adds	r3, #1
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 800c958:	ad01      	add	r5, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 800c95a:	4629      	mov	r1, r5
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7ff ff49 	bl	800c7f4 <mld6_lookfor_group>
  if (group == NULL) {
 800c962:	4604      	mov	r4, r0
 800c964:	bb48      	cbnz	r0, 800c9ba <mld6_joingroup_netif+0xce>
  group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
 800c966:	200e      	movs	r0, #14
 800c968:	f002 f980 	bl	800ec6c <memp_malloc>
  if (group != NULL) {
 800c96c:	4604      	mov	r4, r0
 800c96e:	b350      	cbz	r0, 800c9c6 <mld6_joingroup_netif+0xda>
    ip6_addr_set(&(group->group_address), addr);
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	6043      	str	r3, [r0, #4]
 800c974:	686b      	ldr	r3, [r5, #4]
 800c976:	6083      	str	r3, [r0, #8]
 800c978:	68ab      	ldr	r3, [r5, #8]
 800c97a:	60c3      	str	r3, [r0, #12]
 800c97c:	68eb      	ldr	r3, [r5, #12]
 800c97e:	6103      	str	r3, [r0, #16]
 800c980:	7c2b      	ldrb	r3, [r5, #16]
 800c982:	7503      	strb	r3, [r0, #20]
    group->last_reporter_flag = 0;
 800c984:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c988:	6183      	str	r3, [r0, #24]
    group->use                = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	7703      	strb	r3, [r0, #28]
    group->next               = netif_mld6_data(ifp);
 800c98e:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
 800c992:	6003      	str	r3, [r0, #0]
    if (netif->mld_mac_filter != NULL) {
 800c994:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
    netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
 800c998:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
    if (netif->mld_mac_filter != NULL) {
 800c99c:	b11b      	cbz	r3, 800c9a6 <mld6_joingroup_netif+0xba>
      netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 800c99e:	2201      	movs	r2, #1
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4798      	blx	r3
    mld6_send(netif, group, ICMP6_TYPE_MLR);
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	2283      	movs	r2, #131	; 0x83
 800c9ac:	f7ff feaa 	bl	800c704 <mld6_send>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 800c9b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f7ff fe85 	bl	800c6c4 <mld6_delayed_report>
  group->use++;
 800c9ba:	7f23      	ldrb	r3, [r4, #28]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	7723      	strb	r3, [r4, #28]
  return ERR_OK;
 800c9c0:	2000      	movs	r0, #0
}
 800c9c2:	b006      	add	sp, #24
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e7fa      	b.n	800c9c2 <mld6_joingroup_netif+0xd6>

0800c9cc <mld6_leavegroup_netif>:
{
 800c9cc:	b570      	push	{r4, r5, r6, lr}
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 800c9ce:	7c0b      	ldrb	r3, [r1, #16]
{
 800c9d0:	b086      	sub	sp, #24
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	460d      	mov	r5, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 800c9d6:	bb83      	cbnz	r3, 800ca3a <mld6_leavegroup_netif+0x6e>
 800c9d8:	680a      	ldr	r2, [r1, #0]
 800c9da:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800c9de:	4011      	ands	r1, r2
 800c9e0:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800c9e4:	4281      	cmp	r1, r0
 800c9e6:	d00a      	beq.n	800c9fe <mld6_leavegroup_netif+0x32>
 800c9e8:	f648 70ff 	movw	r0, #36863	; 0x8fff
 800c9ec:	4010      	ands	r0, r2
 800c9ee:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c9f2:	42a0      	cmp	r0, r4
 800c9f4:	d003      	beq.n	800c9fe <mld6_leavegroup_netif+0x32>
 800c9f6:	f240 24ff 	movw	r4, #767	; 0x2ff
 800c9fa:	42a0      	cmp	r0, r4
 800c9fc:	d11d      	bne.n	800ca3a <mld6_leavegroup_netif+0x6e>
    ip6_addr_set(&ip6addr, groupaddr);
 800c9fe:	6868      	ldr	r0, [r5, #4]
 800ca00:	9002      	str	r0, [sp, #8]
 800ca02:	68a8      	ldr	r0, [r5, #8]
 800ca04:	9003      	str	r0, [sp, #12]
 800ca06:	68e8      	ldr	r0, [r5, #12]
 800ca08:	9004      	str	r0, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 800ca0a:	f248 00fe 	movw	r0, #33022	; 0x80fe
 800ca0e:	4281      	cmp	r1, r0
    ip6_addr_set(&ip6addr, groupaddr);
 800ca10:	9201      	str	r2, [sp, #4]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 800ca12:	d00b      	beq.n	800ca2c <mld6_leavegroup_netif+0x60>
 800ca14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ca18:	0412      	lsls	r2, r2, #16
 800ca1a:	0c12      	lsrs	r2, r2, #16
 800ca1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ca20:	428a      	cmp	r2, r1
 800ca22:	d003      	beq.n	800ca2c <mld6_leavegroup_netif+0x60>
 800ca24:	f240 21ff 	movw	r1, #767	; 0x2ff
 800ca28:	428a      	cmp	r2, r1
 800ca2a:	d103      	bne.n	800ca34 <mld6_leavegroup_netif+0x68>
 800ca2c:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 800ca30:	3301      	adds	r3, #1
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 800ca38:	ad01      	add	r5, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff fed9 	bl	800c7f4 <mld6_lookfor_group>
  if (group != NULL) {
 800ca42:	4604      	mov	r4, r0
 800ca44:	b350      	cbz	r0, 800ca9c <mld6_leavegroup_netif+0xd0>
    if (group->use <= 1) {
 800ca46:	7f03      	ldrb	r3, [r0, #28]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d824      	bhi.n	800ca96 <mld6_leavegroup_netif+0xca>
  if (netif_mld6_data(netif) == group) {
 800ca4c:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
 800ca50:	4298      	cmp	r0, r3
 800ca52:	d118      	bne.n	800ca86 <mld6_leavegroup_netif+0xba>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
 800ca54:	6803      	ldr	r3, [r0, #0]
 800ca56:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
      if (group->last_reporter_flag) {
 800ca5a:	7e23      	ldrb	r3, [r4, #24]
 800ca5c:	b123      	cbz	r3, 800ca68 <mld6_leavegroup_netif+0x9c>
        mld6_send(netif, group, ICMP6_TYPE_MLD);
 800ca5e:	2284      	movs	r2, #132	; 0x84
 800ca60:	4621      	mov	r1, r4
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7ff fe4e 	bl	800c704 <mld6_send>
      if (netif->mld_mac_filter != NULL) {
 800ca68:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
 800ca6c:	b11b      	cbz	r3, 800ca76 <mld6_leavegroup_netif+0xaa>
        netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 800ca6e:	2200      	movs	r2, #0
 800ca70:	4629      	mov	r1, r5
 800ca72:	4630      	mov	r0, r6
 800ca74:	4798      	blx	r3
      memp_free(MEMP_MLD6_GROUP, group);
 800ca76:	4621      	mov	r1, r4
 800ca78:	200e      	movs	r0, #14
 800ca7a:	f002 f913 	bl	800eca4 <memp_free>
    return ERR_OK;
 800ca7e:	2000      	movs	r0, #0
}
 800ca80:	b006      	add	sp, #24
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	4613      	mov	r3, r2
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0e7      	beq.n	800ca5a <mld6_leavegroup_netif+0x8e>
      if (tmpGroup->next == group) {
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	4294      	cmp	r4, r2
 800ca8e:	d1f9      	bne.n	800ca84 <mld6_leavegroup_netif+0xb8>
        tmpGroup->next = group->next;
 800ca90:	6822      	ldr	r2, [r4, #0]
 800ca92:	601a      	str	r2, [r3, #0]
    if (tmpGroup == NULL) {
 800ca94:	e7e1      	b.n	800ca5a <mld6_leavegroup_netif+0x8e>
      group->use--;
 800ca96:	3b01      	subs	r3, #1
 800ca98:	7703      	strb	r3, [r0, #28]
 800ca9a:	e7f0      	b.n	800ca7e <mld6_leavegroup_netif+0xb2>
  return ERR_VAL;
 800ca9c:	f06f 0005 	mvn.w	r0, #5
 800caa0:	e7ee      	b.n	800ca80 <mld6_leavegroup_netif+0xb4>
	...

0800caa4 <mld6_tmr>:
  NETIF_FOREACH(netif) {
 800caa4:	4b0d      	ldr	r3, [pc, #52]	; (800cadc <mld6_tmr+0x38>)
{
 800caa6:	b570      	push	{r4, r5, r6, lr}
  NETIF_FOREACH(netif) {
 800caa8:	681d      	ldr	r5, [r3, #0]
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 800caaa:	2602      	movs	r6, #2
  NETIF_FOREACH(netif) {
 800caac:	b905      	cbnz	r5, 800cab0 <mld6_tmr+0xc>
}
 800caae:	bd70      	pop	{r4, r5, r6, pc}
    struct mld_group *group = netif_mld6_data(netif);
 800cab0:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    while (group != NULL) {
 800cab4:	b90c      	cbnz	r4, 800caba <mld6_tmr+0x16>
  NETIF_FOREACH(netif) {
 800cab6:	682d      	ldr	r5, [r5, #0]
 800cab8:	e7f8      	b.n	800caac <mld6_tmr+0x8>
      if (group->timer > 0) {
 800caba:	8b63      	ldrh	r3, [r4, #26]
 800cabc:	b163      	cbz	r3, 800cad8 <mld6_tmr+0x34>
        group->timer--;
 800cabe:	3b01      	subs	r3, #1
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	8363      	strh	r3, [r4, #26]
        if (group->timer == 0) {
 800cac4:	b943      	cbnz	r3, 800cad8 <mld6_tmr+0x34>
          if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 800cac6:	7e63      	ldrb	r3, [r4, #25]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d105      	bne.n	800cad8 <mld6_tmr+0x34>
            mld6_send(netif, group, ICMP6_TYPE_MLR);
 800cacc:	2283      	movs	r2, #131	; 0x83
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f7ff fe17 	bl	800c704 <mld6_send>
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 800cad6:	7666      	strb	r6, [r4, #25]
      group = group->next;
 800cad8:	6824      	ldr	r4, [r4, #0]
 800cada:	e7eb      	b.n	800cab4 <mld6_tmr+0x10>
 800cadc:	20016108 	.word	0x20016108

0800cae0 <nd6_find_neighbor_cache_entry>:
 * @return The neighbor cache entry index that matched, -1 if no
 * entry is found
 */
static s8_t
nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)
{
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <nd6_find_neighbor_cache_entry+0x44>)
  s8_t i;
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
    if (ip6_addr_cmp(ip6addr, &(neighbor_cache[i].next_hop_address))) {
 800cae4:	6804      	ldr	r4, [r0, #0]
 800cae6:	2200      	movs	r2, #0
 800cae8:	681d      	ldr	r5, [r3, #0]
 800caea:	42ac      	cmp	r4, r5
 800caec:	b251      	sxtb	r1, r2
 800caee:	d10f      	bne.n	800cb10 <nd6_find_neighbor_cache_entry+0x30>
 800caf0:	6846      	ldr	r6, [r0, #4]
 800caf2:	685d      	ldr	r5, [r3, #4]
 800caf4:	42ae      	cmp	r6, r5
 800caf6:	d10b      	bne.n	800cb10 <nd6_find_neighbor_cache_entry+0x30>
 800caf8:	6886      	ldr	r6, [r0, #8]
 800cafa:	689d      	ldr	r5, [r3, #8]
 800cafc:	42ae      	cmp	r6, r5
 800cafe:	d107      	bne.n	800cb10 <nd6_find_neighbor_cache_entry+0x30>
 800cb00:	68c6      	ldr	r6, [r0, #12]
 800cb02:	68dd      	ldr	r5, [r3, #12]
 800cb04:	42ae      	cmp	r6, r5
 800cb06:	d103      	bne.n	800cb10 <nd6_find_neighbor_cache_entry+0x30>
 800cb08:	7c06      	ldrb	r6, [r0, #16]
 800cb0a:	7c1d      	ldrb	r5, [r3, #16]
 800cb0c:	42ae      	cmp	r6, r5
 800cb0e:	d006      	beq.n	800cb1e <nd6_find_neighbor_cache_entry+0x3e>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800cb10:	3201      	adds	r2, #1
 800cb12:	2a0a      	cmp	r2, #10
 800cb14:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800cb18:	d1e6      	bne.n	800cae8 <nd6_find_neighbor_cache_entry+0x8>
      return i;
    }
  }
  return -1;
 800cb1a:	f04f 31ff 	mov.w	r1, #4294967295
}
 800cb1e:	4608      	mov	r0, r1
 800cb20:	bd70      	pop	{r4, r5, r6, pc}
 800cb22:	bf00      	nop
 800cb24:	2000f070 	.word	0x2000f070

0800cb28 <nd6_find_destination_cache_entry>:
 * @return The destination cache entry index that matched, -1 if no
 * entry is found
 */
static s16_t
nd6_find_destination_cache_entry(const ip6_addr_t *ip6addr)
{
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <nd6_find_destination_cache_entry+0x44>)
  s16_t i;

  IP6_ADDR_ZONECHECK(ip6addr);

  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
    if (ip6_addr_cmp(ip6addr, &(destination_cache[i].destination_addr))) {
 800cb2c:	6804      	ldr	r4, [r0, #0]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	681d      	ldr	r5, [r3, #0]
 800cb32:	42ac      	cmp	r4, r5
 800cb34:	b211      	sxth	r1, r2
 800cb36:	d10f      	bne.n	800cb58 <nd6_find_destination_cache_entry+0x30>
 800cb38:	6846      	ldr	r6, [r0, #4]
 800cb3a:	685d      	ldr	r5, [r3, #4]
 800cb3c:	42ae      	cmp	r6, r5
 800cb3e:	d10b      	bne.n	800cb58 <nd6_find_destination_cache_entry+0x30>
 800cb40:	6886      	ldr	r6, [r0, #8]
 800cb42:	689d      	ldr	r5, [r3, #8]
 800cb44:	42ae      	cmp	r6, r5
 800cb46:	d107      	bne.n	800cb58 <nd6_find_destination_cache_entry+0x30>
 800cb48:	68c6      	ldr	r6, [r0, #12]
 800cb4a:	68dd      	ldr	r5, [r3, #12]
 800cb4c:	42ae      	cmp	r6, r5
 800cb4e:	d103      	bne.n	800cb58 <nd6_find_destination_cache_entry+0x30>
 800cb50:	7c06      	ldrb	r6, [r0, #16]
 800cb52:	7c1d      	ldrb	r5, [r3, #16]
 800cb54:	42ae      	cmp	r6, r5
 800cb56:	d006      	beq.n	800cb66 <nd6_find_destination_cache_entry+0x3e>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800cb58:	3201      	adds	r2, #1
 800cb5a:	2a0a      	cmp	r2, #10
 800cb5c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800cb60:	d1e6      	bne.n	800cb30 <nd6_find_destination_cache_entry+0x8>
      return i;
    }
  }
  return -1;
 800cb62:	f04f 31ff 	mov.w	r1, #4294967295
}
 800cb66:	4608      	mov	r0, r1
 800cb68:	bd70      	pop	{r4, r5, r6, pc}
 800cb6a:	bf00      	nop
 800cb6c:	2000f2b4 	.word	0x2000f2b4

0800cb70 <nd6_free_q>:
 *
 * @param q a queue of nd6_q_entry to free
 */
static void
nd6_free_q(struct nd6_q_entry *q)
{
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct nd6_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb74:	4604      	mov	r4, r0
 800cb76:	b930      	cbnz	r0, 800cb86 <nd6_free_q+0x16>
 800cb78:	4b14      	ldr	r3, [pc, #80]	; (800cbcc <nd6_free_q+0x5c>)
 800cb7a:	4915      	ldr	r1, [pc, #84]	; (800cbd0 <nd6_free_q+0x60>)
 800cb7c:	4815      	ldr	r0, [pc, #84]	; (800cbd4 <nd6_free_q+0x64>)
 800cb7e:	f640 0296 	movw	r2, #2198	; 0x896
 800cb82:	f00f ffd1 	bl	801cb28 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	b933      	cbnz	r3, 800cb98 <nd6_free_q+0x28>
 800cb8a:	4b10      	ldr	r3, [pc, #64]	; (800cbcc <nd6_free_q+0x5c>)
 800cb8c:	4912      	ldr	r1, [pc, #72]	; (800cbd8 <nd6_free_q+0x68>)
 800cb8e:	4811      	ldr	r0, [pc, #68]	; (800cbd4 <nd6_free_q+0x64>)
 800cb90:	f640 0297 	movw	r2, #2199	; 0x897
 800cb94:	f00f ffc8 	bl	801cb28 <iprintf>
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 800cb98:	4e0c      	ldr	r6, [pc, #48]	; (800cbcc <nd6_free_q+0x5c>)
 800cb9a:	4f10      	ldr	r7, [pc, #64]	; (800cbdc <nd6_free_q+0x6c>)
 800cb9c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800cbd4 <nd6_free_q+0x64>
    q = q->next;
 800cba0:	4625      	mov	r5, r4
 800cba2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 800cba4:	686b      	ldr	r3, [r5, #4]
 800cba6:	b933      	cbnz	r3, 800cbb6 <nd6_free_q+0x46>
 800cba8:	4633      	mov	r3, r6
 800cbaa:	f640 029b 	movw	r2, #2203	; 0x89b
 800cbae:	4639      	mov	r1, r7
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	f00f ffb9 	bl	801cb28 <iprintf>
    pbuf_free(r->p);
 800cbb6:	6868      	ldr	r0, [r5, #4]
 800cbb8:	f002 fbe2 	bl	800f380 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, r);
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	200c      	movs	r0, #12
 800cbc0:	f002 f870 	bl	800eca4 <memp_free>
  while (q) {
 800cbc4:	2c00      	cmp	r4, #0
 800cbc6:	d1eb      	bne.n	800cba0 <nd6_free_q+0x30>
  }
}
 800cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbcc:	0802cb6a 	.word	0x0802cb6a
 800cbd0:	0802d4cb 	.word	0x0802d4cb
 800cbd4:	0802aecf 	.word	0x0802aecf
 800cbd8:	0802cbd7 	.word	0x0802cbd7
 800cbdc:	0802cbe4 	.word	0x0802cbe4

0800cbe0 <nd6_send_na>:
{
 800cbe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 800cbe4:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 800cbe8:	3302      	adds	r3, #2
{
 800cbea:	4691      	mov	r9, r2
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 800cbec:	f013 0207 	ands.w	r2, r3, #7
 800cbf0:	bf18      	it	ne
 800cbf2:	2201      	movne	r2, #1
 800cbf4:	eb02 0ad3 	add.w	sl, r2, r3, lsr #3
{
 800cbf8:	460f      	mov	r7, r1
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 800cbfa:	ea4f 01ca 	mov.w	r1, sl, lsl #3
{
 800cbfe:	4680      	mov	r8, r0
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 800cc00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc04:	3118      	adds	r1, #24
 800cc06:	2036      	movs	r0, #54	; 0x36
 800cc08:	f002 fc22 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d04d      	beq.n	800ccae <nd6_send_na+0xce>
  na_hdr = (struct na_header *)p->payload;
 800cc12:	6844      	ldr	r4, [r0, #4]
  na_hdr->type = ICMP6_TYPE_NA;
 800cc14:	2388      	movs	r3, #136	; 0x88
 800cc16:	7023      	strb	r3, [r4, #0]
  na_hdr->code = 0;
 800cc18:	2500      	movs	r5, #0
  na_hdr->flags = flags & 0xf0;
 800cc1a:	f029 030f 	bic.w	r3, r9, #15
  na_hdr->code = 0;
 800cc1e:	7065      	strb	r5, [r4, #1]
  na_hdr->flags = flags & 0xf0;
 800cc20:	7123      	strb	r3, [r4, #4]
  na_hdr->reserved[0] = 0;
 800cc22:	7165      	strb	r5, [r4, #5]
  na_hdr->reserved[1] = 0;
 800cc24:	71a5      	strb	r5, [r4, #6]
  na_hdr->reserved[2] = 0;
 800cc26:	71e5      	strb	r5, [r4, #7]
  ip6_addr_copy_to_packed(na_hdr->target_address, *target_addr);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	60e3      	str	r3, [r4, #12]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6123      	str	r3, [r4, #16]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6163      	str	r3, [r4, #20]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 800cc38:	2302      	movs	r3, #2
  na_hdr->chksum = 0;
 800cc3a:	70a5      	strb	r5, [r4, #2]
 800cc3c:	70e5      	strb	r5, [r4, #3]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 800cc3e:	7623      	strb	r3, [r4, #24]
  lladdr_opt->length = (u8_t)lladdr_opt_len;
 800cc40:	f884 a019 	strb.w	sl, [r4, #25]
  SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 800cc44:	f898 20da 	ldrb.w	r2, [r8, #218]	; 0xda
 800cc48:	f108 01d4 	add.w	r1, r8, #212	; 0xd4
 800cc4c:	f104 001a 	add.w	r0, r4, #26
 800cc50:	f00f faf6 	bl	801c240 <memcpy>
  } else if (flags & ND6_SEND_FLAG_ALLNODES_DEST) {
 800cc54:	f019 0f02 	tst.w	r9, #2
 800cc58:	d027      	beq.n	800ccaa <nd6_send_na+0xca>
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 800cc5a:	4a16      	ldr	r2, [pc, #88]	; (800ccb4 <nd6_send_na+0xd4>)
 800cc5c:	f240 23ff 	movw	r3, #767	; 0x2ff
 800cc60:	e9c2 3500 	strd	r3, r5, [r2]
 800cc64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc68:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800cc6a:	f898 30de 	ldrb.w	r3, [r8, #222]	; 0xde
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 800cc6e:	6095      	str	r5, [r2, #8]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800cc70:	3301      	adds	r3, #1
 800cc72:	7413      	strb	r3, [r2, #16]
    dest_addr = &multicast_address;
 800cc74:	4615      	mov	r5, r2
    na_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800cc76:	8972      	ldrh	r2, [r6, #10]
 800cc78:	9500      	str	r5, [sp, #0]
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	213a      	movs	r1, #58	; 0x3a
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f001 fcdc 	bl	800e63c <ip6_chksum_pseudo>
  ip6_output_if(p, src_addr, dest_addr,
 800cc84:	2300      	movs	r3, #0
 800cc86:	223a      	movs	r2, #58	; 0x3a
    na_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800cc88:	8060      	strh	r0, [r4, #2]
  ip6_output_if(p, src_addr, dest_addr,
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	e9cd 3200 	strd	r3, r2, [sp]
 800cc90:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc94:	23ff      	movs	r3, #255	; 0xff
 800cc96:	462a      	mov	r2, r5
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f7ff f81d 	bl	800bcd8 <ip6_output_if>
  pbuf_free(p);
 800cc9e:	4630      	mov	r0, r6
}
 800cca0:	b004      	add	sp, #16
 800cca2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 800cca6:	f002 bb6b 	b.w	800f380 <pbuf_free>
    dest_addr = ip6_current_src_addr();
 800ccaa:	4d03      	ldr	r5, [pc, #12]	; (800ccb8 <nd6_send_na+0xd8>)
 800ccac:	e7e3      	b.n	800cc76 <nd6_send_na+0x96>
}
 800ccae:	b004      	add	sp, #16
 800ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb4:	20006a9c 	.word	0x20006a9c
 800ccb8:	2000f4cc 	.word	0x2000f4cc

0800ccbc <nd6_send_rs>:
{
 800ccbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  if (ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 800ccc0:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 800ccc4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800cd98 <nd6_send_rs+0xdc>
 800ccc8:	f013 0f10 	tst.w	r3, #16
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 800cccc:	4b31      	ldr	r3, [pc, #196]	; (800cd94 <nd6_send_rs+0xd8>)
 800ccce:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ccd2:	f04f 0500 	mov.w	r5, #0
 800ccd6:	e9c3 2500 	strd	r2, r5, [r3]
 800ccda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ccde:	60da      	str	r2, [r3, #12]
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800cce0:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 800cce4:	609d      	str	r5, [r3, #8]
    src_addr = netif_ip6_addr(netif, 0);
 800cce6:	bf14      	ite	ne
 800cce8:	f100 084c 	addne.w	r8, r0, #76	; 0x4c
    src_addr = IP6_ADDR_ANY6;
 800ccec:	46c8      	moveq	r8, r9
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800ccee:	3201      	adds	r2, #1
  if (src_addr != IP6_ADDR_ANY6) {
 800ccf0:	45c8      	cmp	r8, r9
{
 800ccf2:	4606      	mov	r6, r0
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800ccf4:	741a      	strb	r2, [r3, #16]
  if (src_addr != IP6_ADDR_ANY6) {
 800ccf6:	469a      	mov	sl, r3
 800ccf8:	d008      	beq.n	800cd0c <nd6_send_rs+0x50>
    lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 800ccfa:	f890 50da 	ldrb.w	r5, [r0, #218]	; 0xda
 800ccfe:	1cab      	adds	r3, r5, #2
 800cd00:	f013 0507 	ands.w	r5, r3, #7
 800cd04:	bf18      	it	ne
 800cd06:	2501      	movne	r5, #1
 800cd08:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct rs_header) + (lladdr_opt_len << 3), PBUF_RAM);
 800cd0c:	00e9      	lsls	r1, r5, #3
 800cd0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd12:	3108      	adds	r1, #8
 800cd14:	2036      	movs	r0, #54	; 0x36
 800cd16:	f002 fb9b 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	b3b8      	cbz	r0, 800cd8e <nd6_send_rs+0xd2>
  rs_hdr = (struct rs_header *)p->payload;
 800cd1e:	6844      	ldr	r4, [r0, #4]
  rs_hdr->type = ICMP6_TYPE_RS;
 800cd20:	2385      	movs	r3, #133	; 0x85
 800cd22:	7023      	strb	r3, [r4, #0]
  if (src_addr != IP6_ADDR_ANY6) {
 800cd24:	45c8      	cmp	r8, r9
  rs_hdr->code = 0;
 800cd26:	f04f 0300 	mov.w	r3, #0
 800cd2a:	7063      	strb	r3, [r4, #1]
  rs_hdr->chksum = 0;
 800cd2c:	70a3      	strb	r3, [r4, #2]
 800cd2e:	70e3      	strb	r3, [r4, #3]
  rs_hdr->reserved = 0;
 800cd30:	7123      	strb	r3, [r4, #4]
 800cd32:	7163      	strb	r3, [r4, #5]
 800cd34:	71a3      	strb	r3, [r4, #6]
 800cd36:	71e3      	strb	r3, [r4, #7]
  if (src_addr != IP6_ADDR_ANY6) {
 800cd38:	d00a      	beq.n	800cd50 <nd6_send_rs+0x94>
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	7223      	strb	r3, [r4, #8]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 800cd3e:	7265      	strb	r5, [r4, #9]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 800cd40:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 800cd44:	f106 01d4 	add.w	r1, r6, #212	; 0xd4
 800cd48:	f104 000a 	add.w	r0, r4, #10
 800cd4c:	f00f fa78 	bl	801c240 <memcpy>
    rs_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800cd50:	897a      	ldrh	r2, [r7, #10]
 800cd52:	f8cd a000 	str.w	sl, [sp]
 800cd56:	4643      	mov	r3, r8
 800cd58:	213a      	movs	r1, #58	; 0x3a
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f001 fc6e 	bl	800e63c <ip6_chksum_pseudo>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 800cd60:	2300      	movs	r3, #0
 800cd62:	223a      	movs	r2, #58	; 0x3a
    rs_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800cd64:	8060      	strh	r0, [r4, #2]
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 800cd66:	45c8      	cmp	r8, r9
 800cd68:	bf14      	ite	ne
 800cd6a:	4641      	movne	r1, r8
 800cd6c:	2100      	moveq	r1, #0
 800cd6e:	e9cd 3200 	strd	r3, r2, [sp]
 800cd72:	9602      	str	r6, [sp, #8]
 800cd74:	4a07      	ldr	r2, [pc, #28]	; (800cd94 <nd6_send_rs+0xd8>)
 800cd76:	23ff      	movs	r3, #255	; 0xff
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7fe ffad 	bl	800bcd8 <ip6_output_if>
 800cd7e:	4604      	mov	r4, r0
  pbuf_free(p);
 800cd80:	4638      	mov	r0, r7
 800cd82:	f002 fafd 	bl	800f380 <pbuf_free>
}
 800cd86:	4620      	mov	r0, r4
 800cd88:	b004      	add	sp, #16
 800cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_BUF;
 800cd8e:	f06f 0401 	mvn.w	r4, #1
 800cd92:	e7f8      	b.n	800cd86 <nd6_send_rs+0xca>
 800cd94:	20006a9c 	.word	0x20006a9c
 800cd98:	0801fc54 	.word	0x0801fc54

0800cd9c <nd6_send_ns>:
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 800cd9c:	f012 0f04 	tst.w	r2, #4
{
 800cda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cda4:	4607      	mov	r7, r0
 800cda6:	460e      	mov	r6, r1
 800cda8:	4692      	mov	sl, r2
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 800cdaa:	d166      	bne.n	800ce7a <nd6_send_ns+0xde>
 800cdac:	f890 5094 	ldrb.w	r5, [r0, #148]	; 0x94
 800cdb0:	f015 0510 	ands.w	r5, r5, #16
 800cdb4:	d062      	beq.n	800ce7c <nd6_send_ns+0xe0>
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 800cdb6:	f890 50da 	ldrb.w	r5, [r0, #218]	; 0xda
 800cdba:	3509      	adds	r5, #9
    src_addr = netif_ip6_addr(netif, 0);
 800cdbc:	f100 094c 	add.w	r9, r0, #76	; 0x4c
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 800cdc0:	08ed      	lsrs	r5, r5, #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct ns_header) + (lladdr_opt_len << 3), PBUF_RAM);
 800cdc2:	00e9      	lsls	r1, r5, #3
 800cdc4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdc8:	3118      	adds	r1, #24
 800cdca:	2036      	movs	r0, #54	; 0x36
 800cdcc:	f002 fb40 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d055      	beq.n	800ce82 <nd6_send_ns+0xe6>
  ns_hdr = (struct ns_header *)p->payload;
 800cdd6:	6844      	ldr	r4, [r0, #4]
  ns_hdr->type = ICMP6_TYPE_NS;
 800cdd8:	2387      	movs	r3, #135	; 0x87
 800cdda:	7023      	strb	r3, [r4, #0]
  ns_hdr->code = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	7063      	strb	r3, [r4, #1]
  ns_hdr->chksum = 0;
 800cde0:	70a3      	strb	r3, [r4, #2]
 800cde2:	70e3      	strb	r3, [r4, #3]
  ns_hdr->reserved = 0;
 800cde4:	7123      	strb	r3, [r4, #4]
 800cde6:	7163      	strb	r3, [r4, #5]
 800cde8:	71a3      	strb	r3, [r4, #6]
 800cdea:	71e3      	strb	r3, [r4, #7]
  ip6_addr_copy_to_packed(ns_hdr->target_address, *target_addr);
 800cdec:	6833      	ldr	r3, [r6, #0]
 800cdee:	60a3      	str	r3, [r4, #8]
 800cdf0:	6873      	ldr	r3, [r6, #4]
 800cdf2:	60e3      	str	r3, [r4, #12]
 800cdf4:	68b3      	ldr	r3, [r6, #8]
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	68f3      	ldr	r3, [r6, #12]
 800cdfa:	6163      	str	r3, [r4, #20]
  if (lladdr_opt_len != 0) {
 800cdfc:	b155      	cbz	r5, 800ce14 <nd6_send_ns+0x78>
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	7623      	strb	r3, [r4, #24]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 800ce02:	7665      	strb	r5, [r4, #25]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 800ce04:	f897 20da 	ldrb.w	r2, [r7, #218]	; 0xda
 800ce08:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800ce0c:	f104 001a 	add.w	r0, r4, #26
 800ce10:	f00f fa16 	bl	801c240 <memcpy>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 800ce14:	f01a 0f01 	tst.w	sl, #1
 800ce18:	d011      	beq.n	800ce3e <nd6_send_ns+0xa2>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 800ce1a:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <nd6_send_ns+0xec>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f240 21ff 	movw	r1, #767	; 0x2ff
 800ce22:	e9c3 1200 	strd	r1, r2, [r3]
 800ce26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce2a:	609a      	str	r2, [r3, #8]
 800ce2c:	68f2      	ldr	r2, [r6, #12]
 800ce2e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800ce32:	60da      	str	r2, [r3, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800ce34:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 800ce38:	3201      	adds	r2, #1
 800ce3a:	741a      	strb	r2, [r3, #16]
    target_addr = &multicast_address;
 800ce3c:	461e      	mov	r6, r3
    ns_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800ce3e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800ce42:	9600      	str	r6, [sp, #0]
 800ce44:	464b      	mov	r3, r9
 800ce46:	213a      	movs	r1, #58	; 0x3a
 800ce48:	4640      	mov	r0, r8
 800ce4a:	f001 fbf7 	bl	800e63c <ip6_chksum_pseudo>
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 800ce4e:	490f      	ldr	r1, [pc, #60]	; (800ce8c <nd6_send_ns+0xf0>)
    ns_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len, src_addr,
 800ce50:	8060      	strh	r0, [r4, #2]
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 800ce52:	2300      	movs	r3, #0
 800ce54:	223a      	movs	r2, #58	; 0x3a
 800ce56:	e9cd 3200 	strd	r3, r2, [sp]
 800ce5a:	9702      	str	r7, [sp, #8]
 800ce5c:	23ff      	movs	r3, #255	; 0xff
 800ce5e:	4632      	mov	r2, r6
 800ce60:	4589      	cmp	r9, r1
 800ce62:	bf14      	ite	ne
 800ce64:	4649      	movne	r1, r9
 800ce66:	2100      	moveq	r1, #0
 800ce68:	4640      	mov	r0, r8
 800ce6a:	f7fe ff35 	bl	800bcd8 <ip6_output_if>
  pbuf_free(p);
 800ce6e:	4640      	mov	r0, r8
}
 800ce70:	b004      	add	sp, #16
 800ce72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 800ce76:	f002 ba83 	b.w	800f380 <pbuf_free>
    lladdr_opt_len = 0;
 800ce7a:	2500      	movs	r5, #0
    src_addr = IP6_ADDR_ANY6;
 800ce7c:	f8df 900c 	ldr.w	r9, [pc, #12]	; 800ce8c <nd6_send_ns+0xf0>
 800ce80:	e79f      	b.n	800cdc2 <nd6_send_ns+0x26>
}
 800ce82:	b004      	add	sp, #16
 800ce84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce88:	20006a9c 	.word	0x20006a9c
 800ce8c:	0801fc54 	.word	0x0801fc54

0800ce90 <nd6_select_router.isra.0>:
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
 800ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (default_router_list[i].neighbor_entry != NULL) {
 800ce92:	4f30      	ldr	r7, [pc, #192]	; (800cf54 <nd6_select_router.isra.0+0xc4>)
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
 800ce94:	2200      	movs	r2, #0
  valid_router = -1;
 800ce96:	f04f 31ff 	mov.w	r1, #4294967295
    if (default_router_list[i].neighbor_entry != NULL) {
 800ce9a:	f04f 0c0c 	mov.w	ip, #12
 800ce9e:	463c      	mov	r4, r7
 800cea0:	fb0c f302 	mul.w	r3, ip, r2
 800cea4:	b256      	sxtb	r6, r2
 800cea6:	59dd      	ldr	r5, [r3, r7]
 800cea8:	b195      	cbz	r5, 800ced0 <nd6_select_router.isra.0+0x40>
      router_netif = default_router_list[i].neighbor_entry->netif;
 800ceaa:	696b      	ldr	r3, [r5, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 800ceac:	b183      	cbz	r3, 800ced0 <nd6_select_router.isra.0+0x40>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d03a      	beq.n	800cf28 <nd6_select_router.isra.0+0x98>
 800ceb2:	4283      	cmp	r3, r0
 800ceb4:	bf14      	ite	ne
 800ceb6:	2300      	movne	r3, #0
 800ceb8:	2301      	moveq	r3, #1
 800ceba:	b14b      	cbz	r3, 800ced0 <nd6_select_router.isra.0+0x40>
        if (default_router_list[i].neighbor_entry->state != ND6_INCOMPLETE) {
 800cebc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d005      	beq.n	800ced0 <nd6_select_router.isra.0+0x40>
          if (default_router_list[i].neighbor_entry->state == ND6_REACHABLE) {
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d040      	beq.n	800cf4a <nd6_select_router.isra.0+0xba>
          } else if (valid_router < 0) {
 800cec8:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cecc:	bf08      	it	eq
 800cece:	4631      	moveq	r1, r6
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 800ced0:	3201      	adds	r2, #1
 800ced2:	2a03      	cmp	r2, #3
 800ced4:	d1e4      	bne.n	800cea0 <nd6_select_router.isra.0+0x10>
  if (valid_router >= 0) {
 800ced6:	1c4b      	adds	r3, r1, #1
 800ced8:	d124      	bne.n	800cf24 <nd6_select_router.isra.0+0x94>
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 800ceda:	4a1f      	ldr	r2, [pc, #124]	; (800cf58 <nd6_select_router.isra.0+0xc8>)
 800cedc:	b930      	cbnz	r0, 800ceec <nd6_select_router.isra.0+0x5c>
 800cede:	7d13      	ldrb	r3, [r2, #20]
 800cee0:	3301      	adds	r3, #1
 800cee2:	b25b      	sxtb	r3, r3
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	bfd4      	ite	le
 800cee8:	7513      	strble	r3, [r2, #20]
    last_router = 0;
 800ceea:	7510      	strbgt	r0, [r2, #20]
  i = last_router;
 800ceec:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800cef0:	2503      	movs	r5, #3
    if (default_router_list[i].neighbor_entry != NULL) {
 800cef2:	260c      	movs	r6, #12
 800cef4:	fb06 f302 	mul.w	r3, r6, r2
 800cef8:	58e3      	ldr	r3, [r4, r3]
 800cefa:	b14b      	cbz	r3, 800cf10 <nd6_select_router.isra.0+0x80>
      router_netif = default_router_list[i].neighbor_entry->netif;
 800cefc:	695b      	ldr	r3, [r3, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 800cefe:	b13b      	cbz	r3, 800cf10 <nd6_select_router.isra.0+0x80>
 800cf00:	b1d8      	cbz	r0, 800cf3a <nd6_select_router.isra.0+0xaa>
 800cf02:	eba0 0c03 	sub.w	ip, r0, r3
 800cf06:	f1dc 0300 	rsbs	r3, ip, #0
 800cf0a:	eb43 030c 	adc.w	r3, r3, ip
 800cf0e:	b9f3      	cbnz	r3, 800cf4e <nd6_select_router.isra.0+0xbe>
    if (++i >= LWIP_ND6_NUM_ROUTERS) {
 800cf10:	3201      	adds	r2, #1
 800cf12:	b252      	sxtb	r2, r2
      i = 0;
 800cf14:	2a03      	cmp	r2, #3
 800cf16:	f105 33ff 	add.w	r3, r5, #4294967295
 800cf1a:	bfa8      	it	ge
 800cf1c:	2200      	movge	r2, #0
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 800cf1e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 800cf22:	d1e7      	bne.n	800cef4 <nd6_select_router.isra.0+0x64>
}
 800cf24:	4608      	mov	r0, r1
 800cf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 800cf28:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800cf2c:	f013 0f01 	tst.w	r3, #1
 800cf30:	bf14      	ite	ne
 800cf32:	f3c3 0380 	ubfxne	r3, r3, #2, #1
 800cf36:	4603      	moveq	r3, r0
 800cf38:	e7bf      	b.n	800ceba <nd6_select_router.isra.0+0x2a>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 800cf3a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800cf3e:	07df      	lsls	r7, r3, #31
 800cf40:	bf4c      	ite	mi
 800cf42:	f3c3 0380 	ubfxmi	r3, r3, #2, #1
 800cf46:	4603      	movpl	r3, r0
 800cf48:	e7e1      	b.n	800cf0e <nd6_select_router.isra.0+0x7e>
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	e7ea      	b.n	800cf24 <nd6_select_router.isra.0+0x94>
 800cf4e:	4611      	mov	r1, r2
 800cf50:	e7e8      	b.n	800cf24 <nd6_select_router.isra.0+0x94>
 800cf52:	bf00      	nop
 800cf54:	2000f494 	.word	0x2000f494
 800cf58:	20006a9c 	.word	0x20006a9c

0800cf5c <nd6_send_q.part.0>:
 * Send queued packets for a neighbor
 *
 * @param i the neighbor to send packets to
 */
static void
nd6_send_q(s8_t i)
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
    return;
  }

#if LWIP_ND6_QUEUEING
  while (neighbor_cache[i].q != NULL) {
 800cf5e:	4e20      	ldr	r6, [pc, #128]	; (800cfe0 <nd6_send_q.part.0+0x84>)
 800cf60:	252c      	movs	r5, #44	; 0x2c
 800cf62:	4345      	muls	r5, r0
nd6_send_q(s8_t i)
 800cf64:	b087      	sub	sp, #28
  while (neighbor_cache[i].q != NULL) {
 800cf66:	1977      	adds	r7, r6, r5
 800cf68:	6a3c      	ldr	r4, [r7, #32]
 800cf6a:	b90c      	cbnz	r4, 800cf70 <nd6_send_q.part.0+0x14>
    /* free the queued IP packet */
    pbuf_free(neighbor_cache[i].q);
    neighbor_cache[i].q = NULL;
  }
#endif /* LWIP_ND6_QUEUEING */
}
 800cf6c:	b007      	add	sp, #28
 800cf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 800cf70:	6861      	ldr	r1, [r4, #4]
    neighbor_cache[i].q = q->next;
 800cf72:	6823      	ldr	r3, [r4, #0]
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 800cf74:	684a      	ldr	r2, [r1, #4]
    neighbor_cache[i].q = q->next;
 800cf76:	623b      	str	r3, [r7, #32]
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
 800cf78:	6993      	ldr	r3, [r2, #24]
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	69d0      	ldr	r0, [r2, #28]
 800cf7e:	9002      	str	r0, [sp, #8]
 800cf80:	6a10      	ldr	r0, [r2, #32]
 800cf82:	9003      	str	r0, [sp, #12]
 800cf84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cf86:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 800cf88:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800cf8c:	4018      	ands	r0, r3
 800cf8e:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800cf92:	4290      	cmp	r0, r2
 800cf94:	d00b      	beq.n	800cfae <nd6_send_q.part.0+0x52>
 800cf96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	0c1b      	lsrs	r3, r3, #16
 800cf9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d003      	beq.n	800cfae <nd6_send_q.part.0+0x52>
 800cfa6:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d115      	bne.n	800cfda <nd6_send_q.part.0+0x7e>
 800cfae:	1973      	adds	r3, r6, r5
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f88d 3014 	strb.w	r3, [sp, #20]
    (neighbor_cache[i].netif)->output_ip6(neighbor_cache[i].netif, q->p, &dest);
 800cfbe:	1973      	adds	r3, r6, r5
 800cfc0:	aa01      	add	r2, sp, #4
 800cfc2:	6958      	ldr	r0, [r3, #20]
 800cfc4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 800cfc8:	4798      	blx	r3
    pbuf_free(q->p);
 800cfca:	6860      	ldr	r0, [r4, #4]
 800cfcc:	f002 f9d8 	bl	800f380 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, q);
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	200c      	movs	r0, #12
 800cfd4:	f001 fe66 	bl	800eca4 <memp_free>
 800cfd8:	e7c6      	b.n	800cf68 <nd6_send_q.part.0+0xc>
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e7ed      	b.n	800cfba <nd6_send_q.part.0+0x5e>
 800cfde:	bf00      	nop
 800cfe0:	2000f070 	.word	0x2000f070

0800cfe4 <nd6_duplicate_addr_detected>:
{
 800cfe4:	b538      	push	{r3, r4, r5, lr}
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 800cfe6:	2240      	movs	r2, #64	; 0x40
{
 800cfe8:	460d      	mov	r5, r1
 800cfea:	4604      	mov	r4, r0
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 800cfec:	f002 f852 	bl	800f094 <netif_ip6_addr_set_state>
  if (addr_idx == 0) {
 800cff0:	b9bd      	cbnz	r5, 800d022 <nd6_duplicate_addr_detected+0x3e>
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 800cff2:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800cff6:	b13b      	cbz	r3, 800d008 <nd6_duplicate_addr_detected+0x24>
          !netif_ip6_addr_isstatic(netif, i)) {
 800cff8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800cffc:	b123      	cbz	r3, 800d008 <nd6_duplicate_addr_detected+0x24>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 800cffe:	2240      	movs	r2, #64	; 0x40
 800d000:	2101      	movs	r1, #1
 800d002:	4620      	mov	r0, r4
 800d004:	f002 f846 	bl	800f094 <netif_ip6_addr_set_state>
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 800d008:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800d00c:	b14b      	cbz	r3, 800d022 <nd6_duplicate_addr_detected+0x3e>
          !netif_ip6_addr_isstatic(netif, i)) {
 800d00e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d012:	b133      	cbz	r3, 800d022 <nd6_duplicate_addr_detected+0x3e>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 800d014:	4620      	mov	r0, r4
 800d016:	2240      	movs	r2, #64	; 0x40
}
 800d018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 800d01c:	2102      	movs	r1, #2
 800d01e:	f002 b839 	b.w	800f094 <netif_ip6_addr_set_state>
}
 800d022:	bd38      	pop	{r3, r4, r5, pc}

0800d024 <nd6_free_neighbor_cache_entry>:
{
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 800d026:	b2c3      	uxtb	r3, r0
 800d028:	2b09      	cmp	r3, #9
{
 800d02a:	4605      	mov	r5, r0
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 800d02c:	d81a      	bhi.n	800d064 <nd6_free_neighbor_cache_entry+0x40>
  if (neighbor_cache[i].isrouter) {
 800d02e:	4c0e      	ldr	r4, [pc, #56]	; (800d068 <nd6_free_neighbor_cache_entry+0x44>)
 800d030:	262c      	movs	r6, #44	; 0x2c
 800d032:	fb06 4600 	mla	r6, r6, r0, r4
 800d036:	f896 7025 	ldrb.w	r7, [r6, #37]	; 0x25
 800d03a:	b99f      	cbnz	r7, 800d064 <nd6_free_neighbor_cache_entry+0x40>
  if (neighbor_cache[i].q != NULL) {
 800d03c:	6a30      	ldr	r0, [r6, #32]
 800d03e:	b110      	cbz	r0, 800d046 <nd6_free_neighbor_cache_entry+0x22>
    nd6_free_q(neighbor_cache[i].q);
 800d040:	f7ff fd96 	bl	800cb70 <nd6_free_q>
    neighbor_cache[i].q = NULL;
 800d044:	6237      	str	r7, [r6, #32]
  neighbor_cache[i].state = ND6_NO_ENTRY;
 800d046:	232c      	movs	r3, #44	; 0x2c
 800d048:	4a08      	ldr	r2, [pc, #32]	; (800d06c <nd6_free_neighbor_cache_entry+0x48>)
 800d04a:	fb03 f005 	mul.w	r0, r3, r5
 800d04e:	4402      	add	r2, r0
 800d050:	2300      	movs	r3, #0
 800d052:	8093      	strh	r3, [r2, #4]
  neighbor_cache[i].netif = NULL;
 800d054:	1822      	adds	r2, r4, r0
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 800d056:	5023      	str	r3, [r4, r0]
 800d058:	e9c2 3301 	strd	r3, r3, [r2, #4]
  neighbor_cache[i].netif = NULL;
 800d05c:	6153      	str	r3, [r2, #20]
  neighbor_cache[i].counter.reachable_time = 0;
 800d05e:	6293      	str	r3, [r2, #40]	; 0x28
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 800d060:	60d3      	str	r3, [r2, #12]
 800d062:	7413      	strb	r3, [r2, #16]
}
 800d064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d066:	bf00      	nop
 800d068:	2000f070 	.word	0x2000f070
 800d06c:	2000f090 	.word	0x2000f090

0800d070 <nd6_new_neighbor_cache_entry>:
{
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	4b45      	ldr	r3, [pc, #276]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
 800d074:	2200      	movs	r2, #0
 800d076:	4619      	mov	r1, r3
    if (neighbor_cache[i].state == ND6_NO_ENTRY) {
 800d078:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800d07c:	b254      	sxtb	r4, r2
 800d07e:	2800      	cmp	r0, #0
 800d080:	d07f      	beq.n	800d182 <nd6_new_neighbor_cache_entry+0x112>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d082:	3201      	adds	r2, #1
 800d084:	2a0a      	cmp	r2, #10
 800d086:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 800d08a:	d1f5      	bne.n	800d078 <nd6_new_neighbor_cache_entry+0x8>
 800d08c:	493e      	ldr	r1, [pc, #248]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
 800d08e:	2200      	movs	r2, #0
    if ((neighbor_cache[i].state == ND6_STALE) &&
 800d090:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800d094:	2803      	cmp	r0, #3
 800d096:	b254      	sxtb	r4, r2
 800d098:	d106      	bne.n	800d0a8 <nd6_new_neighbor_cache_entry+0x38>
 800d09a:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800d09e:	b918      	cbnz	r0, 800d0a8 <nd6_new_neighbor_cache_entry+0x38>
    nd6_free_neighbor_cache_entry(j);
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7ff ffbf 	bl	800d024 <nd6_free_neighbor_cache_entry>
    return j;
 800d0a6:	e06c      	b.n	800d182 <nd6_new_neighbor_cache_entry+0x112>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d0a8:	3201      	adds	r2, #1
 800d0aa:	2a0a      	cmp	r2, #10
 800d0ac:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 800d0b0:	d1ee      	bne.n	800d090 <nd6_new_neighbor_cache_entry+0x20>
 800d0b2:	4935      	ldr	r1, [pc, #212]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
 800d0b4:	2200      	movs	r2, #0
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 800d0b6:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800d0ba:	2805      	cmp	r0, #5
 800d0bc:	b254      	sxtb	r4, r2
 800d0be:	d103      	bne.n	800d0c8 <nd6_new_neighbor_cache_entry+0x58>
 800d0c0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d0eb      	beq.n	800d0a0 <nd6_new_neighbor_cache_entry+0x30>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d0c8:	3201      	adds	r2, #1
 800d0ca:	2a0a      	cmp	r2, #10
 800d0cc:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 800d0d0:	d1f1      	bne.n	800d0b6 <nd6_new_neighbor_cache_entry+0x46>
 800d0d2:	492d      	ldr	r1, [pc, #180]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
 800d0d4:	2200      	movs	r2, #0
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 800d0d6:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800d0da:	2804      	cmp	r0, #4
 800d0dc:	b254      	sxtb	r4, r2
 800d0de:	d103      	bne.n	800d0e8 <nd6_new_neighbor_cache_entry+0x78>
 800d0e0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d0db      	beq.n	800d0a0 <nd6_new_neighbor_cache_entry+0x30>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d0e8:	3201      	adds	r2, #1
 800d0ea:	2a0a      	cmp	r2, #10
 800d0ec:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 800d0f0:	d1f1      	bne.n	800d0d6 <nd6_new_neighbor_cache_entry+0x66>
  j = -1;
 800d0f2:	f04f 34ff 	mov.w	r4, #4294967295
 800d0f6:	4a24      	ldr	r2, [pc, #144]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
 800d0f8:	2100      	movs	r1, #0
  time = 0xfffffffful;
 800d0fa:	4620      	mov	r0, r4
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 800d0fc:	f892 5024 	ldrb.w	r5, [r2, #36]	; 0x24
 800d100:	2d02      	cmp	r5, #2
 800d102:	b24e      	sxtb	r6, r1
 800d104:	d107      	bne.n	800d116 <nd6_new_neighbor_cache_entry+0xa6>
 800d106:	f892 5025 	ldrb.w	r5, [r2, #37]	; 0x25
 800d10a:	b925      	cbnz	r5, 800d116 <nd6_new_neighbor_cache_entry+0xa6>
      if (neighbor_cache[i].counter.reachable_time < time) {
 800d10c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800d10e:	4285      	cmp	r5, r0
 800d110:	bf3c      	itt	cc
 800d112:	4628      	movcc	r0, r5
 800d114:	4634      	movcc	r4, r6
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d116:	3101      	adds	r1, #1
 800d118:	290a      	cmp	r1, #10
 800d11a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800d11e:	d1ed      	bne.n	800d0fc <nd6_new_neighbor_cache_entry+0x8c>
  if (j >= 0) {
 800d120:	1c61      	adds	r1, r4, #1
 800d122:	d1bd      	bne.n	800d0a0 <nd6_new_neighbor_cache_entry+0x30>
 800d124:	2100      	movs	r1, #0
 800d126:	4a18      	ldr	r2, [pc, #96]	; (800d188 <nd6_new_neighbor_cache_entry+0x118>)
  time = 0;
 800d128:	4608      	mov	r0, r1
    if (
 800d12a:	6a15      	ldr	r5, [r2, #32]
 800d12c:	b24e      	sxtb	r6, r1
 800d12e:	b95d      	cbnz	r5, 800d148 <nd6_new_neighbor_cache_entry+0xd8>
        (neighbor_cache[i].q == NULL) &&
 800d130:	f892 5024 	ldrb.w	r5, [r2, #36]	; 0x24
 800d134:	2d01      	cmp	r5, #1
 800d136:	d107      	bne.n	800d148 <nd6_new_neighbor_cache_entry+0xd8>
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 800d138:	f892 5025 	ldrb.w	r5, [r2, #37]	; 0x25
 800d13c:	b925      	cbnz	r5, 800d148 <nd6_new_neighbor_cache_entry+0xd8>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 800d13e:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800d140:	4285      	cmp	r5, r0
 800d142:	bf24      	itt	cs
 800d144:	4628      	movcs	r0, r5
 800d146:	4634      	movcs	r4, r6
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d148:	3101      	adds	r1, #1
 800d14a:	290a      	cmp	r1, #10
 800d14c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800d150:	d1eb      	bne.n	800d12a <nd6_new_neighbor_cache_entry+0xba>
  if (j >= 0) {
 800d152:	1c62      	adds	r2, r4, #1
 800d154:	d1a4      	bne.n	800d0a0 <nd6_new_neighbor_cache_entry+0x30>
 800d156:	2200      	movs	r2, #0
  time = 0;
 800d158:	4611      	mov	r1, r2
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 800d15a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 800d15e:	2801      	cmp	r0, #1
 800d160:	b255      	sxtb	r5, r2
 800d162:	d107      	bne.n	800d174 <nd6_new_neighbor_cache_entry+0x104>
 800d164:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 800d168:	b920      	cbnz	r0, 800d174 <nd6_new_neighbor_cache_entry+0x104>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 800d16a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d16c:	4288      	cmp	r0, r1
 800d16e:	bf24      	itt	cs
 800d170:	4601      	movcs	r1, r0
 800d172:	462c      	movcs	r4, r5
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800d174:	3201      	adds	r2, #1
 800d176:	2a0a      	cmp	r2, #10
 800d178:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800d17c:	d1ed      	bne.n	800d15a <nd6_new_neighbor_cache_entry+0xea>
  if (j >= 0) {
 800d17e:	1c63      	adds	r3, r4, #1
 800d180:	d18e      	bne.n	800d0a0 <nd6_new_neighbor_cache_entry+0x30>
}
 800d182:	4620      	mov	r0, r4
 800d184:	bd70      	pop	{r4, r5, r6, pc}
 800d186:	bf00      	nop
 800d188:	2000f070 	.word	0x2000f070

0800d18c <nd6_input>:
{
 800d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	ed2d 8b02 	vpush	{d8}
  msg_type = *((u8_t *)p->payload);
 800d194:	6844      	ldr	r4, [r0, #4]
 800d196:	7823      	ldrb	r3, [r4, #0]
  switch (msg_type) {
 800d198:	2b02      	cmp	r3, #2
{
 800d19a:	b091      	sub	sp, #68	; 0x44
 800d19c:	4683      	mov	fp, r0
 800d19e:	4689      	mov	r9, r1
  switch (msg_type) {
 800d1a0:	f000 848b 	beq.w	800daba <nd6_input+0x92e>
 800d1a4:	f103 027a 	add.w	r2, r3, #122	; 0x7a
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	2a03      	cmp	r2, #3
 800d1ac:	d80b      	bhi.n	800d1c6 <nd6_input+0x3a>
 800d1ae:	3b86      	subs	r3, #134	; 0x86
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d808      	bhi.n	800d1c6 <nd6_input+0x3a>
 800d1b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1b8:	00b5017a 	.word	0x00b5017a
 800d1bc:	03c40004 	.word	0x03c40004
    if (p->len < (sizeof(struct na_header))) {
 800d1c0:	8945      	ldrh	r5, [r0, #10]
 800d1c2:	2d17      	cmp	r5, #23
 800d1c4:	d807      	bhi.n	800d1d6 <nd6_input+0x4a>
  pbuf_free(p);
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	f002 f8da 	bl	800f380 <pbuf_free>
}
 800d1cc:	b011      	add	sp, #68	; 0x44
 800d1ce:	ecbd 8b02 	vpop	{d8}
 800d1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d1d6:	68a0      	ldr	r0, [r4, #8]
 800d1d8:	900b      	str	r0, [sp, #44]	; 0x2c
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d1da:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800d1de:	4002      	ands	r2, r0
 800d1e0:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d1e4:	429a      	cmp	r2, r3
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d1e6:	68e6      	ldr	r6, [r4, #12]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d1e8:	bf08      	it	eq
 800d1ea:	f891 20de 	ldrbeq.w	r2, [r1, #222]	; 0xde
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d1ee:	960c      	str	r6, [sp, #48]	; 0x30
 800d1f0:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 800d1f4:	4faa      	ldr	r7, [pc, #680]	; (800d4a0 <nd6_input+0x314>)
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d1f6:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d1fa:	bf08      	it	eq
 800d1fc:	3201      	addeq	r2, #1
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d1fe:	f8d4 e014 	ldr.w	lr, [r4, #20]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 800d202:	68fb      	ldr	r3, [r7, #12]
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 800d204:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d208:	bf0c      	ite	eq
 800d20a:	b2d2      	uxtbeq	r2, r2
 800d20c:	2200      	movne	r2, #0
 800d20e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 800d212:	79db      	ldrb	r3, [r3, #7]
 800d214:	2bff      	cmp	r3, #255	; 0xff
 800d216:	d1d6      	bne.n	800d1c6 <nd6_input+0x3a>
 800d218:	7861      	ldrb	r1, [r4, #1]
 800d21a:	2900      	cmp	r1, #0
 800d21c:	d1d3      	bne.n	800d1c6 <nd6_input+0x3a>
        ip6_addr_ismulticast(&target_address)) {
 800d21e:	b2c3      	uxtb	r3, r0
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 800d220:	2bff      	cmp	r3, #255	; 0xff
 800d222:	d0d0      	beq.n	800d1c6 <nd6_input+0x3a>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 800d224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d228:	2bff      	cmp	r3, #255	; 0xff
 800d22a:	d13e      	bne.n	800d2aa <nd6_input+0x11e>
 800d22c:	f109 0894 	add.w	r8, r9, #148	; 0x94
 800d230:	464b      	mov	r3, r9
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 800d232:	f818 7b01 	ldrb.w	r7, [r8], #1
 800d236:	f017 0fbf 	tst.w	r7, #191	; 0xbf
 800d23a:	d013      	beq.n	800d264 <nd6_input+0xd8>
            !ip6_addr_isduplicated(netif_ip6_addr_state(inp, i)) &&
 800d23c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800d23e:	42b8      	cmp	r0, r7
 800d240:	d110      	bne.n	800d264 <nd6_input+0xd8>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 800d242:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800d244:	42be      	cmp	r6, r7
 800d246:	d10d      	bne.n	800d264 <nd6_input+0xd8>
 800d248:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 800d24a:	45bc      	cmp	ip, r7
 800d24c:	d10a      	bne.n	800d264 <nd6_input+0xd8>
 800d24e:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 800d250:	45be      	cmp	lr, r7
 800d252:	d107      	bne.n	800d264 <nd6_input+0xd8>
 800d254:	f893 705c 	ldrb.w	r7, [r3, #92]	; 0x5c
 800d258:	4297      	cmp	r7, r2
 800d25a:	d103      	bne.n	800d264 <nd6_input+0xd8>
          nd6_duplicate_addr_detected(inp, i);
 800d25c:	4648      	mov	r0, r9
 800d25e:	f7ff fec1 	bl	800cfe4 <nd6_duplicate_addr_detected>
          pbuf_free(p);
 800d262:	e7b0      	b.n	800d1c6 <nd6_input+0x3a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800d264:	3101      	adds	r1, #1
 800d266:	b2cf      	uxtb	r7, r1
 800d268:	2f03      	cmp	r7, #3
 800d26a:	b249      	sxtb	r1, r1
 800d26c:	f103 0318 	add.w	r3, r3, #24
 800d270:	d1df      	bne.n	800d232 <nd6_input+0xa6>
      if (p->len < (sizeof(struct na_header) + 2)) {
 800d272:	2d19      	cmp	r5, #25
 800d274:	d9a7      	bls.n	800d1c6 <nd6_input+0x3a>
      if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 800d276:	7e63      	ldrb	r3, [r4, #25]
 800d278:	00db      	lsls	r3, r3, #3
 800d27a:	3318      	adds	r3, #24
 800d27c:	429d      	cmp	r5, r3
 800d27e:	d3a2      	bcc.n	800d1c6 <nd6_input+0x3a>
      i = nd6_find_neighbor_cache_entry(&target_address);
 800d280:	a80b      	add	r0, sp, #44	; 0x2c
 800d282:	f7ff fc2d 	bl	800cae0 <nd6_find_neighbor_cache_entry>
      if (i >= 0) {
 800d286:	2800      	cmp	r0, #0
 800d288:	db9d      	blt.n	800d1c6 <nd6_input+0x3a>
        if (na_hdr->flags & ND6_FLAG_OVERRIDE) {
 800d28a:	7923      	ldrb	r3, [r4, #4]
 800d28c:	069a      	lsls	r2, r3, #26
 800d28e:	d59a      	bpl.n	800d1c6 <nd6_input+0x3a>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800d290:	232c      	movs	r3, #44	; 0x2c
 800d292:	2218      	movs	r2, #24
 800d294:	fb13 2000 	smlabb	r0, r3, r0, r2
 800d298:	4b82      	ldr	r3, [pc, #520]	; (800d4a4 <nd6_input+0x318>)
 800d29a:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800d29e:	f104 011a 	add.w	r1, r4, #26
 800d2a2:	4418      	add	r0, r3
 800d2a4:	f00e ffcc 	bl	801c240 <memcpy>
 800d2a8:	e78d      	b.n	800d1c6 <nd6_input+0x3a>
      i = nd6_find_neighbor_cache_entry(&target_address);
 800d2aa:	a80b      	add	r0, sp, #44	; 0x2c
 800d2ac:	f7ff fc18 	bl	800cae0 <nd6_find_neighbor_cache_entry>
      if (i < 0) {
 800d2b0:	1e06      	subs	r6, r0, #0
 800d2b2:	db88      	blt.n	800d1c6 <nd6_input+0x3a>
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 800d2b4:	7923      	ldrb	r3, [r4, #4]
 800d2b6:	069b      	lsls	r3, r3, #26
 800d2b8:	d407      	bmi.n	800d2ca <nd6_input+0x13e>
          (neighbor_cache[i].state == ND6_INCOMPLETE)) {
 800d2ba:	4a7a      	ldr	r2, [pc, #488]	; (800d4a4 <nd6_input+0x318>)
 800d2bc:	232c      	movs	r3, #44	; 0x2c
 800d2be:	fb03 2306 	mla	r3, r3, r6, r2
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 800d2c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d114      	bne.n	800d2f4 <nd6_input+0x168>
        if (p->len < (sizeof(struct na_header) + 2)) {
 800d2ca:	2d19      	cmp	r5, #25
 800d2cc:	f67f af7b 	bls.w	800d1c6 <nd6_input+0x3a>
        if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 800d2d0:	7e63      	ldrb	r3, [r4, #25]
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	3318      	adds	r3, #24
 800d2d6:	429d      	cmp	r5, r3
 800d2d8:	f4ff af75 	bcc.w	800d1c6 <nd6_input+0x3a>
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800d2dc:	2018      	movs	r0, #24
 800d2de:	232c      	movs	r3, #44	; 0x2c
 800d2e0:	fb13 0306 	smlabb	r3, r3, r6, r0
 800d2e4:	486f      	ldr	r0, [pc, #444]	; (800d4a4 <nd6_input+0x318>)
 800d2e6:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800d2ea:	f104 011a 	add.w	r1, r4, #26
 800d2ee:	4418      	add	r0, r3
 800d2f0:	f00e ffa6 	bl	801c240 <memcpy>
      neighbor_cache[i].netif = inp;
 800d2f4:	4a6b      	ldr	r2, [pc, #428]	; (800d4a4 <nd6_input+0x318>)
 800d2f6:	232c      	movs	r3, #44	; 0x2c
 800d2f8:	fb03 2306 	mla	r3, r3, r6, r2
      neighbor_cache[i].state = ND6_REACHABLE;
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      neighbor_cache[i].counter.reachable_time = reachable_time;
 800d302:	4a69      	ldr	r2, [pc, #420]	; (800d4a8 <nd6_input+0x31c>)
      neighbor_cache[i].netif = inp;
 800d304:	f8c3 9014 	str.w	r9, [r3, #20]
      neighbor_cache[i].counter.reachable_time = reachable_time;
 800d308:	6812      	ldr	r2, [r2, #0]
 800d30a:	629a      	str	r2, [r3, #40]	; 0x28
      if (neighbor_cache[i].q != NULL) {
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f43f af59 	beq.w	800d1c6 <nd6_input+0x3a>
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 800d314:	2e09      	cmp	r6, #9
 800d316:	f73f af56 	bgt.w	800d1c6 <nd6_input+0x3a>
 800d31a:	4630      	mov	r0, r6
 800d31c:	f7ff fe1e 	bl	800cf5c <nd6_send_q.part.0>
 800d320:	e751      	b.n	800d1c6 <nd6_input+0x3a>
    if (p->len < sizeof(struct ns_header)) {
 800d322:	8942      	ldrh	r2, [r0, #10]
 800d324:	2a17      	cmp	r2, #23
 800d326:	f67f af4e 	bls.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d32a:	68a7      	ldr	r7, [r4, #8]
 800d32c:	970b      	str	r7, [sp, #44]	; 0x2c
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d32e:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800d332:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d336:	4039      	ands	r1, r7
 800d338:	4299      	cmp	r1, r3
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d33a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d33e:	bf08      	it	eq
 800d340:	f899 00de 	ldrbeq.w	r0, [r9, #222]	; 0xde
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d344:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800d348:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 800d34c:	4d54      	ldr	r5, [pc, #336]	; (800d4a0 <nd6_input+0x314>)
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d34e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d352:	bf08      	it	eq
 800d354:	3001      	addeq	r0, #1
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d356:	f8d4 c014 	ldr.w	ip, [r4, #20]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 800d35a:	68eb      	ldr	r3, [r5, #12]
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 800d35c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d360:	bf0c      	ite	eq
 800d362:	b2c0      	uxtbeq	r0, r0
 800d364:	2000      	movne	r0, #0
 800d366:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 800d36a:	79db      	ldrb	r3, [r3, #7]
 800d36c:	2bff      	cmp	r3, #255	; 0xff
 800d36e:	f47f af2a 	bne.w	800d1c6 <nd6_input+0x3a>
 800d372:	7861      	ldrb	r1, [r4, #1]
 800d374:	2900      	cmp	r1, #0
 800d376:	f47f af26 	bne.w	800d1c6 <nd6_input+0x3a>
       ip6_addr_ismulticast(&target_address)) {
 800d37a:	b2fb      	uxtb	r3, r7
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 800d37c:	2bff      	cmp	r3, #255	; 0xff
 800d37e:	f43f af22 	beq.w	800d1c6 <nd6_input+0x3a>
    if (p->len >= (sizeof(struct ns_header) + 2)) {
 800d382:	2a19      	cmp	r2, #25
 800d384:	d933      	bls.n	800d3ee <nd6_input+0x262>
      if (p->len < (sizeof(struct ns_header) + (lladdr_opt->length << 3))) {
 800d386:	7e63      	ldrb	r3, [r4, #25]
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	3318      	adds	r3, #24
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d32e      	bcc.n	800d3ee <nd6_input+0x262>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 800d390:	3418      	adds	r4, #24
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 800d392:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800d396:	69e9      	ldr	r1, [r5, #28]
 800d398:	4313      	orrs	r3, r2
 800d39a:	6a2a      	ldr	r2, [r5, #32]
 800d39c:	430b      	orrs	r3, r1
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	f109 0694 	add.w	r6, r9, #148	; 0x94
 800d3a4:	f109 0297 	add.w	r2, r9, #151	; 0x97
 800d3a8:	9201      	str	r2, [sp, #4]
 800d3aa:	464d      	mov	r5, r9
            ip6_addr_isany(ip6_current_src_addr()))) &&
 800d3ac:	464a      	mov	r2, r9
 800d3ae:	46b6      	mov	lr, r6
      if ((ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) ||
 800d3b0:	f81e 1b01 	ldrb.w	r1, [lr], #1
 800d3b4:	f011 0f10 	tst.w	r1, #16
 800d3b8:	d102      	bne.n	800d3c0 <nd6_input+0x234>
 800d3ba:	0709      	lsls	r1, r1, #28
 800d3bc:	d511      	bpl.n	800d3e2 <nd6_input+0x256>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 800d3be:	b983      	cbnz	r3, 800d3e2 <nd6_input+0x256>
 800d3c0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800d3c2:	428f      	cmp	r7, r1
 800d3c4:	d10d      	bne.n	800d3e2 <nd6_input+0x256>
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 800d3c6:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800d3c8:	458a      	cmp	sl, r1
 800d3ca:	d10a      	bne.n	800d3e2 <nd6_input+0x256>
 800d3cc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800d3ce:	4588      	cmp	r8, r1
 800d3d0:	d107      	bne.n	800d3e2 <nd6_input+0x256>
 800d3d2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800d3d4:	458c      	cmp	ip, r1
 800d3d6:	d104      	bne.n	800d3e2 <nd6_input+0x256>
 800d3d8:	f892 105c 	ldrb.w	r1, [r2, #92]	; 0x5c
 800d3dc:	4281      	cmp	r1, r0
 800d3de:	f000 83aa 	beq.w	800db36 <nd6_input+0x9aa>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 800d3e2:	9901      	ldr	r1, [sp, #4]
 800d3e4:	458e      	cmp	lr, r1
 800d3e6:	f102 0218 	add.w	r2, r2, #24
 800d3ea:	d1e1      	bne.n	800d3b0 <nd6_input+0x224>
 800d3ec:	e6eb      	b.n	800d1c6 <nd6_input+0x3a>
      lladdr_opt = NULL;
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	e7cf      	b.n	800d392 <nd6_input+0x206>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 800d3f2:	461c      	mov	r4, r3
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 800d3f4:	f816 3b01 	ldrb.w	r3, [r6], #1
 800d3f8:	b31b      	cbz	r3, 800d442 <nd6_input+0x2b6>
 800d3fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d3fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d11f      	bne.n	800d442 <nd6_input+0x2b6>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 800d402:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d406:	429a      	cmp	r2, r3
 800d408:	d11b      	bne.n	800d442 <nd6_input+0x2b6>
 800d40a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d40c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d40e:	429a      	cmp	r2, r3
 800d410:	d117      	bne.n	800d442 <nd6_input+0x2b6>
 800d412:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d416:	429a      	cmp	r2, r3
 800d418:	d113      	bne.n	800d442 <nd6_input+0x2b6>
 800d41a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d41e:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 800d422:	429a      	cmp	r2, r3
 800d424:	d10d      	bne.n	800d442 <nd6_input+0x2b6>
          nd6_send_na(inp, netif_ip6_addr(inp, i), ND6_FLAG_OVERRIDE | ND6_SEND_FLAG_ALLNODES_DEST);
 800d426:	2222      	movs	r2, #34	; 0x22
 800d428:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800d42c:	4648      	mov	r0, r9
 800d42e:	f7ff fbd7 	bl	800cbe0 <nd6_send_na>
          if (ip6_addr_istentative(netif_ip6_addr_state(inp, i))) {
 800d432:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d436:	071a      	lsls	r2, r3, #28
 800d438:	d503      	bpl.n	800d442 <nd6_input+0x2b6>
            nd6_duplicate_addr_detected(inp, i);
 800d43a:	4621      	mov	r1, r4
 800d43c:	4648      	mov	r0, r9
 800d43e:	f7ff fdd1 	bl	800cfe4 <nd6_duplicate_addr_detected>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 800d442:	1c63      	adds	r3, r4, #1
 800d444:	b2da      	uxtb	r2, r3
 800d446:	2a03      	cmp	r2, #3
 800d448:	b25c      	sxtb	r4, r3
 800d44a:	f105 0518 	add.w	r5, r5, #24
 800d44e:	d1d1      	bne.n	800d3f4 <nd6_input+0x268>
 800d450:	e6b9      	b.n	800d1c6 <nd6_input+0x3a>
        i = nd6_new_neighbor_cache_entry();
 800d452:	f7ff fe0d 	bl	800d070 <nd6_new_neighbor_cache_entry>
        if (i < 0) {
 800d456:	2800      	cmp	r0, #0
 800d458:	f6ff aeb5 	blt.w	800d1c6 <nd6_input+0x3a>
        neighbor_cache[i].netif = inp;
 800d45c:	232c      	movs	r3, #44	; 0x2c
 800d45e:	4e11      	ldr	r6, [pc, #68]	; (800d4a4 <nd6_input+0x318>)
 800d460:	fb03 f700 	mul.w	r7, r3, r0
 800d464:	19f5      	adds	r5, r6, r7
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800d466:	2218      	movs	r2, #24
 800d468:	fb13 2000 	smlabb	r0, r3, r0, r2
        neighbor_cache[i].netif = inp;
 800d46c:	f8c5 9014 	str.w	r9, [r5, #20]
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800d470:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800d474:	1ca1      	adds	r1, r4, #2
 800d476:	4430      	add	r0, r6
 800d478:	f00e fee2 	bl	801c240 <memcpy>
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 800d47c:	4b08      	ldr	r3, [pc, #32]	; (800d4a0 <nd6_input+0x314>)
 800d47e:	695a      	ldr	r2, [r3, #20]
 800d480:	51f2      	str	r2, [r6, r7]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	606a      	str	r2, [r5, #4]
 800d486:	69da      	ldr	r2, [r3, #28]
 800d488:	60aa      	str	r2, [r5, #8]
 800d48a:	6a1a      	ldr	r2, [r3, #32]
 800d48c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d490:	742b      	strb	r3, [r5, #16]
        neighbor_cache[i].state = ND6_DELAY;
 800d492:	2304      	movs	r3, #4
 800d494:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 800d498:	2305      	movs	r3, #5
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 800d49a:	60ea      	str	r2, [r5, #12]
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 800d49c:	62ab      	str	r3, [r5, #40]	; 0x28
 800d49e:	e36e      	b.n	800db7e <nd6_input+0x9f2>
 800d4a0:	2000f4b8 	.word	0x2000f4b8
 800d4a4:	2000f070 	.word	0x2000f070
 800d4a8:	20000038 	.word	0x20000038
    if (p->len < sizeof(struct ra_header)) {
 800d4ac:	8943      	ldrh	r3, [r0, #10]
 800d4ae:	2b0f      	cmp	r3, #15
 800d4b0:	f67f ae89 	bls.w	800d1c6 <nd6_input+0x3a>
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d4b4:	4d94      	ldr	r5, [pc, #592]	; (800d708 <nd6_input+0x57c>)
 800d4b6:	696b      	ldr	r3, [r5, #20]
 800d4b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d4bc:	041b      	lsls	r3, r3, #16
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	f47f ae7e 	bne.w	800d1c6 <nd6_input+0x3a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 800d4ca:	68eb      	ldr	r3, [r5, #12]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d4cc:	79db      	ldrb	r3, [r3, #7]
 800d4ce:	2bff      	cmp	r3, #255	; 0xff
 800d4d0:	f47f ae79 	bne.w	800d1c6 <nd6_input+0x3a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 800d4d4:	7860      	ldrb	r0, [r4, #1]
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	f47f ae75 	bne.w	800d1c6 <nd6_input+0x3a>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 800d4dc:	f891 30e0 	ldrb.w	r3, [r1, #224]	; 0xe0
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d905      	bls.n	800d4f0 <nd6_input+0x364>
        (nd6_send_rs(inp) == ERR_OK)) {
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	f7ff fbe9 	bl	800ccbc <nd6_send_rs>
      inp->rs_count = 0;
 800d4ea:	3800      	subs	r0, #0
 800d4ec:	bf18      	it	ne
 800d4ee:	2001      	movne	r0, #1
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 800d4f0:	69eb      	ldr	r3, [r5, #28]
 800d4f2:	f889 00e0 	strb.w	r0, [r9, #224]	; 0xe0
 800d4f6:	e9d5 2a05 	ldrd	r2, sl, [r5, #20]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 800d4fa:	4884      	ldr	r0, [pc, #528]	; (800d70c <nd6_input+0x580>)
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 800d4fc:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800d500:	f895 e024 	ldrb.w	lr, [r5, #36]	; 0x24
 800d504:	469c      	mov	ip, r3
 800d506:	2100      	movs	r1, #0
 800d508:	4607      	mov	r7, r0
 800d50a:	b24b      	sxtb	r3, r1
 800d50c:	9301      	str	r3, [sp, #4]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 800d50e:	230c      	movs	r3, #12
 800d510:	434b      	muls	r3, r1
 800d512:	581b      	ldr	r3, [r3, r0]
 800d514:	b18b      	cbz	r3, 800d53a <nd6_input+0x3ae>
 800d516:	695e      	ldr	r6, [r3, #20]
 800d518:	45b1      	cmp	r9, r6
 800d51a:	d10e      	bne.n	800d53a <nd6_input+0x3ae>
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 800d51c:	681e      	ldr	r6, [r3, #0]
 800d51e:	42b2      	cmp	r2, r6
 800d520:	d10b      	bne.n	800d53a <nd6_input+0x3ae>
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 800d522:	685e      	ldr	r6, [r3, #4]
 800d524:	45b2      	cmp	sl, r6
 800d526:	d108      	bne.n	800d53a <nd6_input+0x3ae>
 800d528:	689e      	ldr	r6, [r3, #8]
 800d52a:	45b4      	cmp	ip, r6
 800d52c:	d105      	bne.n	800d53a <nd6_input+0x3ae>
 800d52e:	68de      	ldr	r6, [r3, #12]
 800d530:	45b0      	cmp	r8, r6
 800d532:	d102      	bne.n	800d53a <nd6_input+0x3ae>
 800d534:	7c1b      	ldrb	r3, [r3, #16]
 800d536:	4573      	cmp	r3, lr
 800d538:	d050      	beq.n	800d5dc <nd6_input+0x450>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 800d53a:	3101      	adds	r1, #1
 800d53c:	2903      	cmp	r1, #3
 800d53e:	d1e4      	bne.n	800d50a <nd6_input+0x37e>
  neighbor_index = nd6_find_neighbor_cache_entry(router_addr);
 800d540:	4873      	ldr	r0, [pc, #460]	; (800d710 <nd6_input+0x584>)
 800d542:	f7ff facd 	bl	800cae0 <nd6_find_neighbor_cache_entry>
  if (neighbor_index < 0) {
 800d546:	f1b0 0800 	subs.w	r8, r0, #0
 800d54a:	da23      	bge.n	800d594 <nd6_input+0x408>
    neighbor_index = nd6_new_neighbor_cache_entry();
 800d54c:	f7ff fd90 	bl	800d070 <nd6_new_neighbor_cache_entry>
    if (neighbor_index < 0) {
 800d550:	f1b0 0800 	subs.w	r8, r0, #0
 800d554:	f6ff ae37 	blt.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 800d558:	496e      	ldr	r1, [pc, #440]	; (800d714 <nd6_input+0x588>)
 800d55a:	696a      	ldr	r2, [r5, #20]
 800d55c:	232c      	movs	r3, #44	; 0x2c
 800d55e:	fb03 f608 	mul.w	r6, r3, r8
 800d562:	1988      	adds	r0, r1, r6
 800d564:	518a      	str	r2, [r1, r6]
 800d566:	69aa      	ldr	r2, [r5, #24]
 800d568:	6042      	str	r2, [r0, #4]
 800d56a:	69ea      	ldr	r2, [r5, #28]
 800d56c:	6082      	str	r2, [r0, #8]
 800d56e:	6a2a      	ldr	r2, [r5, #32]
 800d570:	60c2      	str	r2, [r0, #12]
 800d572:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800d576:	7402      	strb	r2, [r0, #16]
    neighbor_cache[neighbor_index].q = NULL;
 800d578:	2200      	movs	r2, #0
 800d57a:	6202      	str	r2, [r0, #32]
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 800d57c:	fb18 f303 	smulbb	r3, r8, r3
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 800d580:	2201      	movs	r2, #1
    neighbor_cache[neighbor_index].netif = netif;
 800d582:	f8c0 9014 	str.w	r9, [r0, #20]
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 800d586:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    neighbor_cache[neighbor_index].counter.probes_sent = 1;
 800d58a:	6282      	str	r2, [r0, #40]	; 0x28
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 800d58c:	4419      	add	r1, r3
 800d58e:	4648      	mov	r0, r9
 800d590:	f7ff fc04 	bl	800cd9c <nd6_send_ns>
  neighbor_cache[neighbor_index].isrouter = 1;
 800d594:	485f      	ldr	r0, [pc, #380]	; (800d714 <nd6_input+0x588>)
 800d596:	232c      	movs	r3, #44	; 0x2c
 800d598:	fb03 0208 	mla	r2, r3, r8, r0
 800d59c:	2101      	movs	r1, #1
 800d59e:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 800d5a2:	fb18 f303 	smulbb	r3, r8, r3
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 800d5a6:	2103      	movs	r1, #3
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 800d5a8:	4403      	add	r3, r0
 800d5aa:	2202      	movs	r2, #2
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 800d5ac:	9101      	str	r1, [sp, #4]
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 800d5ae:	f04f 0c0c 	mov.w	ip, #12
 800d5b2:	fb0c f502 	mul.w	r5, ip, r2
 800d5b6:	b251      	sxtb	r1, r2
 800d5b8:	597d      	ldr	r5, [r7, r5]
 800d5ba:	429d      	cmp	r5, r3
 800d5bc:	d07a      	beq.n	800d6b4 <nd6_input+0x528>
    if (default_router_list[router_index].neighbor_entry == NULL) {
 800d5be:	9e01      	ldr	r6, [sp, #4]
 800d5c0:	2d00      	cmp	r5, #0
 800d5c2:	bf08      	it	eq
 800d5c4:	460e      	moveq	r6, r1
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 800d5c6:	3a01      	subs	r2, #1
    if (default_router_list[router_index].neighbor_entry == NULL) {
 800d5c8:	9601      	str	r6, [sp, #4]
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 800d5ca:	d2f2      	bcs.n	800d5b2 <nd6_input+0x426>
  if (free_router_index < LWIP_ND6_NUM_ROUTERS) {
 800d5cc:	2e03      	cmp	r6, #3
 800d5ce:	d06a      	beq.n	800d6a6 <nd6_input+0x51a>
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 800d5d0:	220c      	movs	r2, #12
 800d5d2:	4372      	muls	r2, r6
    if (i < 0) {
 800d5d4:	2e00      	cmp	r6, #0
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 800d5d6:	50bb      	str	r3, [r7, r2]
    if (i < 0) {
 800d5d8:	f6ff adf5 	blt.w	800d1c6 <nd6_input+0x3a>
    default_router_list[i].invalidation_timer = lwip_htons(ra_hdr->router_lifetime);
 800d5dc:	88e0      	ldrh	r0, [r4, #6]
 800d5de:	f000 fd5f 	bl	800e0a0 <lwip_htons>
 800d5e2:	9a01      	ldr	r2, [sp, #4]
 800d5e4:	230c      	movs	r3, #12
 800d5e6:	fb03 7302 	mla	r3, r3, r2, r7
 800d5ea:	6058      	str	r0, [r3, #4]
    if (ra_hdr->retrans_timer > 0) {
 800d5ec:	68e0      	ldr	r0, [r4, #12]
 800d5ee:	b118      	cbz	r0, 800d5f8 <nd6_input+0x46c>
      retrans_timer = lwip_htonl(ra_hdr->retrans_timer);
 800d5f0:	f000 fd59 	bl	800e0a6 <lwip_htonl>
 800d5f4:	4b48      	ldr	r3, [pc, #288]	; (800d718 <nd6_input+0x58c>)
 800d5f6:	6058      	str	r0, [r3, #4]
    if (ra_hdr->reachable_time > 0) {
 800d5f8:	68a0      	ldr	r0, [r4, #8]
 800d5fa:	b118      	cbz	r0, 800d604 <nd6_input+0x478>
      reachable_time = lwip_htonl(ra_hdr->reachable_time);
 800d5fc:	f000 fd53 	bl	800e0a6 <lwip_htonl>
 800d600:	4b45      	ldr	r3, [pc, #276]	; (800d718 <nd6_input+0x58c>)
 800d602:	6018      	str	r0, [r3, #0]
    default_router_list[i].flags = ra_hdr->flags;
 800d604:	9a01      	ldr	r2, [sp, #4]
 800d606:	230c      	movs	r3, #12
 800d608:	fb03 7702 	mla	r7, r3, r2, r7
 800d60c:	7963      	ldrb	r3, [r4, #5]
 800d60e:	723b      	strb	r3, [r7, #8]
    offset = sizeof(struct ra_header);
 800d610:	2410      	movs	r4, #16
    while ((p->tot_len - offset) >= 2) {
 800d612:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800d616:	1b1b      	subs	r3, r3, r4
 800d618:	2b01      	cmp	r3, #1
 800d61a:	f77f add4 	ble.w	800d1c6 <nd6_input+0x3a>
      int option_len8 = pbuf_try_get_at(p, offset + 1);
 800d61e:	1c61      	adds	r1, r4, #1
 800d620:	b289      	uxth	r1, r1
 800d622:	4658      	mov	r0, fp
 800d624:	f002 f9e6 	bl	800f9f4 <pbuf_try_get_at>
      if (option_len8 <= 0) {
 800d628:	2800      	cmp	r0, #0
 800d62a:	f77f adcc 	ble.w	800d1c6 <nd6_input+0x3a>
      option_len = ((u8_t)option_len8) << 3;
 800d62e:	b2c3      	uxtb	r3, r0
 800d630:	9303      	str	r3, [sp, #12]
 800d632:	00d8      	lsls	r0, r3, #3
      if (option_len > p->tot_len - offset) {
 800d634:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800d638:	9903      	ldr	r1, [sp, #12]
 800d63a:	1b1a      	subs	r2, r3, r4
 800d63c:	ebb2 0fc1 	cmp.w	r2, r1, lsl #3
 800d640:	f6ff adc1 	blt.w	800d1c6 <nd6_input+0x3a>
      if (p->len == p->tot_len) {
 800d644:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d135      	bne.n	800d6b8 <nd6_input+0x52c>
        buffer = &((u8_t*)p->payload)[offset];
 800d64c:	f8db 7004 	ldr.w	r7, [fp, #4]
 800d650:	4427      	add	r7, r4
      option_type = buffer[0];
 800d652:	783b      	ldrb	r3, [r7, #0]
      switch (option_type) {
 800d654:	2b03      	cmp	r3, #3
 800d656:	d063      	beq.n	800d720 <nd6_input+0x594>
 800d658:	2b05      	cmp	r3, #5
 800d65a:	d03f      	beq.n	800d6dc <nd6_input+0x550>
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d11d      	bne.n	800d69c <nd6_input+0x510>
        if (option_len < sizeof(struct lladdr_option)) {
 800d660:	2807      	cmp	r0, #7
 800d662:	f67f adb0 	bls.w	800d1c6 <nd6_input+0x3a>
        if ((default_router_list[i].neighbor_entry != NULL) &&
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d70c <nd6_input+0x580>
 800d66c:	250c      	movs	r5, #12
 800d66e:	435d      	muls	r5, r3
 800d670:	f858 0005 	ldr.w	r0, [r8, r5]
 800d674:	b190      	cbz	r0, 800d69c <nd6_input+0x510>
 800d676:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d10e      	bne.n	800d69c <nd6_input+0x510>
          SMEMCPY(default_router_list[i].neighbor_entry->lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800d67e:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800d682:	1cb9      	adds	r1, r7, #2
 800d684:	3018      	adds	r0, #24
 800d686:	f00e fddb 	bl	801c240 <memcpy>
          default_router_list[i].neighbor_entry->state = ND6_REACHABLE;
 800d68a:	f858 3005 	ldr.w	r3, [r8, r5]
 800d68e:	f04f 0202 	mov.w	r2, #2
 800d692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          default_router_list[i].neighbor_entry->counter.reachable_time = reachable_time;
 800d696:	4a20      	ldr	r2, [pc, #128]	; (800d718 <nd6_input+0x58c>)
 800d698:	6812      	ldr	r2, [r2, #0]
 800d69a:	629a      	str	r2, [r3, #40]	; 0x28
      offset += 8 * (u8_t)option_len8;
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800d6a2:	b2a4      	uxth	r4, r4
 800d6a4:	e7b5      	b.n	800d612 <nd6_input+0x486>
  neighbor_cache[neighbor_index].isrouter = 0;
 800d6a6:	232c      	movs	r3, #44	; 0x2c
 800d6a8:	fb03 0008 	mla	r0, r3, r8, r0
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (i < 0) {
 800d6b2:	e588      	b.n	800d1c6 <nd6_input+0x3a>
 800d6b4:	9101      	str	r1, [sp, #4]
 800d6b6:	e791      	b.n	800d5dc <nd6_input+0x450>
        if (option_len > sizeof(nd6_ra_buffer)) {
 800d6b8:	2820      	cmp	r0, #32
 800d6ba:	d907      	bls.n	800d6cc <nd6_input+0x540>
          option_type = pbuf_get_at(p, offset);
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4658      	mov	r0, fp
 800d6c0:	f002 f9ab 	bl	800fa1a <pbuf_get_at>
          if (option_type != ND6_OPTION_TYPE_RDNSS) {
 800d6c4:	2819      	cmp	r0, #25
 800d6c6:	f47f ad7e 	bne.w	800d1c6 <nd6_input+0x3a>
          option_len = sizeof(nd6_ra_buffer);
 800d6ca:	2020      	movs	r0, #32
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	4913      	ldr	r1, [pc, #76]	; (800d71c <nd6_input+0x590>)
        buffer = (u8_t*)&nd6_ra_buffer;
 800d6d0:	4f12      	ldr	r7, [pc, #72]	; (800d71c <nd6_input+0x590>)
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 800d6d2:	4623      	mov	r3, r4
 800d6d4:	4658      	mov	r0, fp
 800d6d6:	f002 f891 	bl	800f7fc <pbuf_copy_partial>
 800d6da:	e7ba      	b.n	800d652 <nd6_input+0x4c6>
        if (option_len < sizeof(struct mtu_option)) {
 800d6dc:	2807      	cmp	r0, #7
 800d6de:	f67f ad72 	bls.w	800d1c6 <nd6_input+0x3a>
        mtu32 = lwip_htonl(mtu_opt->mtu);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fcdf 	bl	800e0a6 <lwip_htonl>
        if ((mtu32 >= 1280) && (mtu32 <= 0xffff)) {
 800d6e8:	f5a0 63a0 	sub.w	r3, r0, #1280	; 0x500
 800d6ec:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 800d6f0:	d2d4      	bcs.n	800d69c <nd6_input+0x510>
          if (inp->mtu) {
 800d6f2:	f8b9 30d0 	ldrh.w	r3, [r9, #208]	; 0xd0
 800d6f6:	b280      	uxth	r0, r0
 800d6f8:	b113      	cbz	r3, 800d700 <nd6_input+0x574>
            inp->mtu6 = LWIP_MIN(inp->mtu, (u16_t)mtu32);
 800d6fa:	4298      	cmp	r0, r3
 800d6fc:	bf28      	it	cs
 800d6fe:	4618      	movcs	r0, r3
            inp->mtu6 = (u16_t)mtu32;
 800d700:	f8a9 00d2 	strh.w	r0, [r9, #210]	; 0xd2
 800d704:	e7ca      	b.n	800d69c <nd6_input+0x510>
 800d706:	bf00      	nop
 800d708:	2000f4b8 	.word	0x2000f4b8
 800d70c:	2000f494 	.word	0x2000f494
 800d710:	2000f4cc 	.word	0x2000f4cc
 800d714:	2000f070 	.word	0x2000f070
 800d718:	20000038 	.word	0x20000038
 800d71c:	20006ab1 	.word	0x20006ab1
        if (option_len < sizeof(struct prefix_option)) {
 800d720:	281f      	cmp	r0, #31
 800d722:	f67f ad50 	bls.w	800d1c6 <nd6_input+0x3a>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	9302      	str	r3, [sp, #8]
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 800d72a:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800d72e:	401a      	ands	r2, r3
 800d730:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d734:	429a      	cmp	r2, r3
 800d736:	d0b1      	beq.n	800d69c <nd6_input+0x510>
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 800d738:	f997 3003 	ldrsb.w	r3, [r7, #3]
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 800d73c:	f8d7 a014 	ldr.w	sl, [r7, #20]
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 800d740:	2b00      	cmp	r3, #0
 800d742:	da43      	bge.n	800d7cc <nd6_input+0x640>
 800d744:	78bb      	ldrb	r3, [r7, #2]
 800d746:	2b40      	cmp	r3, #64	; 0x40
 800d748:	d140      	bne.n	800d7cc <nd6_input+0x640>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	9304      	str	r3, [sp, #16]
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 800d74e:	6878      	ldr	r0, [r7, #4]
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 800d750:	f8d7 801c 	ldr.w	r8, [r7, #28]
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 800d754:	f000 fca7 	bl	800e0a6 <lwip_htonl>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 800d758:	4b75      	ldr	r3, [pc, #468]	; (800d930 <nd6_input+0x7a4>)
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 800d75a:	f04f 0c00 	mov.w	ip, #0
 800d75e:	461d      	mov	r5, r3
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 800d760:	682a      	ldr	r2, [r5, #0]
 800d762:	9e02      	ldr	r6, [sp, #8]
 800d764:	4296      	cmp	r6, r2
 800d766:	fa4f f18c 	sxtb.w	r1, ip
 800d76a:	d107      	bne.n	800d77c <nd6_input+0x5f0>
 800d76c:	686a      	ldr	r2, [r5, #4]
 800d76e:	4592      	cmp	sl, r2
 800d770:	d104      	bne.n	800d77c <nd6_input+0x5f0>
 800d772:	7c2a      	ldrb	r2, [r5, #16]
 800d774:	b912      	cbnz	r2, 800d77c <nd6_input+0x5f0>
 800d776:	696a      	ldr	r2, [r5, #20]
 800d778:	4591      	cmp	r9, r2
 800d77a:	d01c      	beq.n	800d7b6 <nd6_input+0x62a>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 800d77c:	f10c 0c01 	add.w	ip, ip, #1
 800d780:	f1bc 0f05 	cmp.w	ip, #5
 800d784:	f105 051c 	add.w	r5, r5, #28
 800d788:	d1ea      	bne.n	800d760 <nd6_input+0x5d4>
            if (prefix < 0 && valid_life > 0) {
 800d78a:	b1f8      	cbz	r0, 800d7cc <nd6_input+0x640>
 800d78c:	2500      	movs	r5, #0
    if ((prefix_list[i].netif == NULL) ||
 800d78e:	695a      	ldr	r2, [r3, #20]
 800d790:	b269      	sxtb	r1, r5
 800d792:	b10a      	cbz	r2, 800d798 <nd6_input+0x60c>
 800d794:	699a      	ldr	r2, [r3, #24]
 800d796:	b9a2      	cbnz	r2, 800d7c2 <nd6_input+0x636>
      prefix_list[i].netif = netif;
 800d798:	231c      	movs	r3, #28
 800d79a:	4a65      	ldr	r2, [pc, #404]	; (800d930 <nd6_input+0x7a4>)
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 800d79c:	9e02      	ldr	r6, [sp, #8]
      prefix_list[i].netif = netif;
 800d79e:	435d      	muls	r5, r3
 800d7a0:	1953      	adds	r3, r2, r5
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 800d7a2:	5156      	str	r6, [r2, r5]
 800d7a4:	9a04      	ldr	r2, [sp, #16]
      prefix_list[i].netif = netif;
 800d7a6:	f8c3 9014 	str.w	r9, [r3, #20]
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 800d7aa:	e9c3 2802 	strd	r2, r8, [r3, #8]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f8c3 a004 	str.w	sl, [r3, #4]
 800d7b4:	741a      	strb	r2, [r3, #16]
              prefix_list[prefix].invalidation_timer = valid_life;
 800d7b6:	4b5e      	ldr	r3, [pc, #376]	; (800d930 <nd6_input+0x7a4>)
 800d7b8:	221c      	movs	r2, #28
 800d7ba:	fb02 3101 	mla	r1, r2, r1, r3
 800d7be:	6188      	str	r0, [r1, #24]
 800d7c0:	e004      	b.n	800d7cc <nd6_input+0x640>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 800d7c2:	3501      	adds	r5, #1
 800d7c4:	2d05      	cmp	r5, #5
 800d7c6:	f103 031c 	add.w	r3, r3, #28
 800d7ca:	d1e0      	bne.n	800d78e <nd6_input+0x602>
          if (prefix_opt->flags & ND6_PREFIX_FLAG_AUTONOMOUS) {
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	065b      	lsls	r3, r3, #25
 800d7d0:	f57f af64 	bpl.w	800d69c <nd6_input+0x510>
  valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fc66 	bl	800e0a6 <lwip_htonl>
 800d7da:	4605      	mov	r5, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 800d7dc:	68b8      	ldr	r0, [r7, #8]
 800d7de:	f000 fc62 	bl	800e0a6 <lwip_htonl>
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 800d7e2:	4285      	cmp	r5, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 800d7e4:	4680      	mov	r8, r0
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 800d7e6:	f4ff af59 	bcc.w	800d69c <nd6_input+0x510>
 800d7ea:	78bb      	ldrb	r3, [r7, #2]
 800d7ec:	2b40      	cmp	r3, #64	; 0x40
 800d7ee:	f47f af55 	bne.w	800d69c <nd6_input+0x510>
 800d7f2:	f109 0e95 	add.w	lr, r9, #149	; 0x95
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 800d7f6:	f109 0198 	add.w	r1, r9, #152	; 0x98
 800d7fa:	464b      	mov	r3, r9
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 800d7fc:	464a      	mov	r2, r9
 800d7fe:	46f4      	mov	ip, lr
 800d800:	2701      	movs	r7, #1
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 800d802:	9105      	str	r1, [sp, #20]
 800d804:	b279      	sxtb	r1, r7
 800d806:	ee08 1a10 	vmov	s16, r1
    addr_state = netif_ip6_addr_state(netif, i);
 800d80a:	f81c 1b01 	ldrb.w	r1, [ip], #1
 800d80e:	9104      	str	r1, [sp, #16]
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 800d810:	2900      	cmp	r1, #0
 800d812:	d03a      	beq.n	800d88a <nd6_input+0x6fe>
 800d814:	9905      	ldr	r1, [sp, #20]
 800d816:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
 800d81a:	b3b0      	cbz	r0, 800d88a <nd6_input+0x6fe>
 800d81c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800d81e:	9e02      	ldr	r6, [sp, #8]
 800d820:	428e      	cmp	r6, r1
 800d822:	d132      	bne.n	800d88a <nd6_input+0x6fe>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 800d824:	6e91      	ldr	r1, [r2, #104]	; 0x68
 800d826:	458a      	cmp	sl, r1
 800d828:	d12f      	bne.n	800d88a <nd6_input+0x6fe>
 800d82a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800d82e:	bb61      	cbnz	r1, 800d88a <nd6_input+0x6fe>
      if (valid_life > ND6_2HRS || valid_life > remaining_life) {
 800d830:	f5b5 5fe1 	cmp.w	r5, #7200	; 0x1c20
 800d834:	d801      	bhi.n	800d83a <nd6_input+0x6ae>
 800d836:	4285      	cmp	r5, r0
 800d838:	d90d      	bls.n	800d856 <nd6_input+0x6ca>
        netif_ip6_addr_set_valid_life(netif, i, valid_life);
 800d83a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800d83e:	f849 5023 	str.w	r5, [r9, r3, lsl #2]
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 800d842:	b98d      	cbnz	r5, 800d868 <nd6_input+0x6dc>
 800d844:	4b3b      	ldr	r3, [pc, #236]	; (800d934 <nd6_input+0x7a8>)
 800d846:	493c      	ldr	r1, [pc, #240]	; (800d938 <nd6_input+0x7ac>)
 800d848:	483c      	ldr	r0, [pc, #240]	; (800d93c <nd6_input+0x7b0>)
 800d84a:	22de      	movs	r2, #222	; 0xde
 800d84c:	f00f f96c 	bl	801cb28 <iprintf>
 800d850:	e00a      	b.n	800d868 <nd6_input+0x6dc>
 800d852:	2702      	movs	r7, #2
 800d854:	e7d6      	b.n	800d804 <nd6_input+0x678>
      } else if (remaining_life > ND6_2HRS) {
 800d856:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 800d85a:	d905      	bls.n	800d868 <nd6_input+0x6dc>
        netif_ip6_addr_set_valid_life(netif, i, ND6_2HRS);
 800d85c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800d860:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800d864:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
      if (pref_life > 0 && addr_state == IP6_ADDR_DEPRECATED) {
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	d008      	beq.n	800d880 <nd6_input+0x6f4>
 800d86e:	9b04      	ldr	r3, [sp, #16]
 800d870:	2b10      	cmp	r3, #16
 800d872:	d105      	bne.n	800d880 <nd6_input+0x6f4>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_PREFERRED);
 800d874:	ee18 1a10 	vmov	r1, s16
 800d878:	2230      	movs	r2, #48	; 0x30
 800d87a:	4648      	mov	r0, r9
 800d87c:	f001 fc0a 	bl	800f094 <netif_ip6_addr_set_state>
      netif_ip6_addr_set_pref_life(netif, i, pref_life);
 800d880:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d884:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
      return; /* there should be at most one matching address */
 800d888:	e708      	b.n	800d69c <nd6_input+0x510>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800d88a:	2f02      	cmp	r7, #2
 800d88c:	f102 0218 	add.w	r2, r2, #24
 800d890:	d1df      	bne.n	800d852 <nd6_input+0x6c6>
  if (!netif->ip6_autoconfig_enabled || valid_life == IP6_ADDR_LIFE_STATIC ||
 800d892:	f899 20df 	ldrb.w	r2, [r9, #223]	; 0xdf
 800d896:	2a00      	cmp	r2, #0
 800d898:	f43f af00 	beq.w	800d69c <nd6_input+0x510>
 800d89c:	2d00      	cmp	r5, #0
 800d89e:	f43f aefd 	beq.w	800d69c <nd6_input+0x510>
 800d8a2:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
 800d8a6:	f012 0fbf 	tst.w	r2, #191	; 0xbf
 800d8aa:	f43f aef7 	beq.w	800d69c <nd6_input+0x510>
  IP6_ADDR(&ip6addr, prefix_addr->addr[0], prefix_addr->addr[1],
 800d8ae:	e9d9 c715 	ldrd	ip, r7, [r9, #84]	; 0x54
  free_idx = 0;
 800d8b2:	2100      	movs	r1, #0
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800d8b4:	2001      	movs	r0, #1
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
 800d8b6:	f81e 2b01 	ldrb.w	r2, [lr], #1
 800d8ba:	b3a2      	cbz	r2, 800d926 <nd6_input+0x79a>
      if (ip6_addr_cmp(&ip6addr, netif_ip6_addr(netif, i))) {
 800d8bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d8be:	9e02      	ldr	r6, [sp, #8]
 800d8c0:	4296      	cmp	r6, r2
 800d8c2:	d10d      	bne.n	800d8e0 <nd6_input+0x754>
 800d8c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d8c6:	4592      	cmp	sl, r2
 800d8c8:	d10a      	bne.n	800d8e0 <nd6_input+0x754>
 800d8ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d8cc:	4594      	cmp	ip, r2
 800d8ce:	d107      	bne.n	800d8e0 <nd6_input+0x754>
 800d8d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d8d2:	4297      	cmp	r7, r2
 800d8d4:	d104      	bne.n	800d8e0 <nd6_input+0x754>
 800d8d6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d8da:	2a00      	cmp	r2, #0
 800d8dc:	f43f aede 	beq.w	800d69c <nd6_input+0x510>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800d8e0:	2802      	cmp	r0, #2
 800d8e2:	f103 0318 	add.w	r3, r3, #24
 800d8e6:	d11c      	bne.n	800d922 <nd6_input+0x796>
  if (free_idx == 0) {
 800d8e8:	2900      	cmp	r1, #0
 800d8ea:	f43f aed7 	beq.w	800d69c <nd6_input+0x510>
  ip_addr_copy_from_ip6(netif->ip6_addr[free_idx], ip6addr);
 800d8ee:	9a02      	ldr	r2, [sp, #8]
 800d8f0:	2318      	movs	r3, #24
 800d8f2:	fb03 9301 	mla	r3, r3, r1, r9
 800d8f6:	e9c3 2a13 	strd	r2, sl, [r3, #76]	; 0x4c
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d900:	2206      	movs	r2, #6
 800d902:	e9c3 c715 	strd	ip, r7, [r3, #84]	; 0x54
 800d906:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 800d90a:	b20b      	sxth	r3, r1
 800d90c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 800d910:	2208      	movs	r2, #8
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 800d912:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  netif_ip6_addr_set_pref_life(netif, free_idx, pref_life);
 800d916:	f8c3 80a4 	str.w	r8, [r3, #164]	; 0xa4
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 800d91a:	4648      	mov	r0, r9
 800d91c:	f001 fbba 	bl	800f094 <netif_ip6_addr_set_state>
        break;
 800d920:	e6bc      	b.n	800d69c <nd6_input+0x510>
 800d922:	2002      	movs	r0, #2
 800d924:	e7c7      	b.n	800d8b6 <nd6_input+0x72a>
    } else if (free_idx == 0) {
 800d926:	2900      	cmp	r1, #0
 800d928:	bf08      	it	eq
 800d92a:	4601      	moveq	r1, r0
 800d92c:	e7d8      	b.n	800d8e0 <nd6_input+0x754>
 800d92e:	bf00      	nop
 800d930:	2000f228 	.word	0x2000f228
 800d934:	0802cb6a 	.word	0x0802cb6a
 800d938:	0802cbf1 	.word	0x0802cbf1
 800d93c:	0802aecf 	.word	0x0802aecf
    if (p->len < sizeof(struct redirect_header)) {
 800d940:	8941      	ldrh	r1, [r0, #10]
 800d942:	2927      	cmp	r1, #39	; 0x27
 800d944:	f67f ac3f 	bls.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 800d948:	69a6      	ldr	r6, [r4, #24]
 800d94a:	9606      	str	r6, [sp, #24]
 800d94c:	69e3      	ldr	r3, [r4, #28]
 800d94e:	9307      	str	r3, [sp, #28]
 800d950:	6a23      	ldr	r3, [r4, #32]
 800d952:	9308      	str	r3, [sp, #32]
 800d954:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d956:	488d      	ldr	r0, [pc, #564]	; (800db8c <nd6_input+0xa00>)
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 800d958:	9309      	str	r3, [sp, #36]	; 0x24
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 800d95a:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800d95e:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d962:	4032      	ands	r2, r6
 800d964:	429a      	cmp	r2, r3
 800d966:	bf08      	it	eq
 800d968:	f899 30de 	ldrbeq.w	r3, [r9, #222]	; 0xde
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d96c:	6942      	ldr	r2, [r0, #20]
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 800d96e:	bf08      	it	eq
 800d970:	3301      	addeq	r3, #1
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d972:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 800d976:	bf0c      	ite	eq
 800d978:	b2db      	uxtbeq	r3, r3
 800d97a:	2300      	movne	r3, #0
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d97c:	0412      	lsls	r2, r2, #16
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 800d97e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d982:	0c12      	lsrs	r2, r2, #16
 800d984:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d988:	429a      	cmp	r2, r3
 800d98a:	f47f ac1c 	bne.w	800d1c6 <nd6_input+0x3a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 800d98e:	68c3      	ldr	r3, [r0, #12]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 800d990:	79db      	ldrb	r3, [r3, #7]
 800d992:	2bff      	cmp	r3, #255	; 0xff
 800d994:	f47f ac17 	bne.w	800d1c6 <nd6_input+0x3a>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 800d998:	7865      	ldrb	r5, [r4, #1]
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 800d99a:	2d00      	cmp	r5, #0
 800d99c:	f47f ac13 	bne.w	800d1c6 <nd6_input+0x3a>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 800d9a0:	b2f3      	uxtb	r3, r6
 800d9a2:	2bff      	cmp	r3, #255	; 0xff
 800d9a4:	f43f ac0f 	beq.w	800d1c6 <nd6_input+0x3a>
    if (p->len >= (sizeof(struct redirect_header) + 2)) {
 800d9a8:	2929      	cmp	r1, #41	; 0x29
 800d9aa:	f240 8084 	bls.w	800dab6 <nd6_input+0x92a>
      if (p->len < (sizeof(struct redirect_header) + (lladdr_opt->length << 3))) {
 800d9ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	3328      	adds	r3, #40	; 0x28
 800d9b6:	4299      	cmp	r1, r3
 800d9b8:	d37d      	bcc.n	800dab6 <nd6_input+0x92a>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct redirect_header));
 800d9ba:	f104 0728 	add.w	r7, r4, #40	; 0x28
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 800d9be:	a806      	add	r0, sp, #24
 800d9c0:	f7ff f8b2 	bl	800cb28 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f6ff abfe 	blt.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 800d9ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800d9ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800d9d2:	68e3      	ldr	r3, [r4, #12]
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d9d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d9dc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d9e0:	6963      	ldr	r3, [r4, #20]
 800d9e2:	9302      	str	r3, [sp, #8]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d9e4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 800d9e8:	ea08 0202 	and.w	r2, r8, r2
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 800d9ec:	930e      	str	r3, [sp, #56]	; 0x38
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d9ee:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800d9f2:	429a      	cmp	r2, r3
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 800d9f4:	4b66      	ldr	r3, [pc, #408]	; (800db90 <nd6_input+0xa04>)
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800d9f6:	bf08      	it	eq
 800d9f8:	f899 50de 	ldrbeq.w	r5, [r9, #222]	; 0xde
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 800d9fc:	f04f 0230 	mov.w	r2, #48	; 0x30
 800da00:	fb02 3000 	mla	r0, r2, r0, r3
 800da04:	9b01      	ldr	r3, [sp, #4]
 800da06:	f8c0 8014 	str.w	r8, [r0, #20]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800da0a:	bf04      	itt	eq
 800da0c:	3501      	addeq	r5, #1
 800da0e:	b2ed      	uxtbeq	r5, r5
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 800da10:	e9c0 3a06 	strd	r3, sl, [r0, #24]
 800da14:	9b02      	ldr	r3, [sp, #8]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 800da16:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 800da1a:	6203      	str	r3, [r0, #32]
 800da1c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    if (lladdr_opt != NULL) {
 800da20:	2f00      	cmp	r7, #0
 800da22:	f43f abd0 	beq.w	800d1c6 <nd6_input+0x3a>
      if (lladdr_opt->type == ND6_OPTION_TYPE_TARGET_LLADDR) {
 800da26:	783b      	ldrb	r3, [r7, #0]
 800da28:	2b02      	cmp	r3, #2
 800da2a:	f47f abcc 	bne.w	800d1c6 <nd6_input+0x3a>
        i = nd6_find_neighbor_cache_entry(&target_address);
 800da2e:	a80b      	add	r0, sp, #44	; 0x2c
 800da30:	f7ff f856 	bl	800cae0 <nd6_find_neighbor_cache_entry>
        if (i < 0) {
 800da34:	1e04      	subs	r4, r0, #0
 800da36:	da25      	bge.n	800da84 <nd6_input+0x8f8>
          i = nd6_new_neighbor_cache_entry();
 800da38:	f7ff fb1a 	bl	800d070 <nd6_new_neighbor_cache_entry>
          if (i >= 0) {
 800da3c:	1e04      	subs	r4, r0, #0
 800da3e:	f6ff abc2 	blt.w	800d1c6 <nd6_input+0x3a>
            neighbor_cache[i].netif = inp;
 800da42:	4b54      	ldr	r3, [pc, #336]	; (800db94 <nd6_input+0xa08>)
 800da44:	202c      	movs	r0, #44	; 0x2c
 800da46:	fb00 f204 	mul.w	r2, r0, r4
 800da4a:	189e      	adds	r6, r3, r2
 800da4c:	9203      	str	r2, [sp, #12]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800da4e:	2218      	movs	r2, #24
            neighbor_cache[i].netif = inp;
 800da50:	f8c6 9014 	str.w	r9, [r6, #20]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800da54:	fb10 2004 	smlabb	r0, r0, r4, r2
 800da58:	4418      	add	r0, r3
 800da5a:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800da5e:	1cb9      	adds	r1, r7, #2
 800da60:	f00e fbee 	bl	801c240 <memcpy>
            ip6_addr_copy(neighbor_cache[i].next_hop_address, target_address);
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	7435      	strb	r5, [r6, #16]
 800da68:	461a      	mov	r2, r3
 800da6a:	4b4a      	ldr	r3, [pc, #296]	; (800db94 <nd6_input+0xa08>)
 800da6c:	f843 8002 	str.w	r8, [r3, r2]
 800da70:	9b01      	ldr	r3, [sp, #4]
 800da72:	e9c6 3a01 	strd	r3, sl, [r6, #4]
 800da76:	9b02      	ldr	r3, [sp, #8]
 800da78:	60f3      	str	r3, [r6, #12]
            neighbor_cache[i].state = ND6_DELAY;
 800da7a:	2304      	movs	r3, #4
 800da7c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 800da80:	2305      	movs	r3, #5
 800da82:	62b3      	str	r3, [r6, #40]	; 0x28
          if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 800da84:	4843      	ldr	r0, [pc, #268]	; (800db94 <nd6_input+0xa08>)
 800da86:	232c      	movs	r3, #44	; 0x2c
 800da88:	fb03 0504 	mla	r5, r3, r4, r0
 800da8c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800da90:	2a01      	cmp	r2, #1
 800da92:	f47f ab98 	bne.w	800d1c6 <nd6_input+0x3a>
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800da96:	2218      	movs	r2, #24
 800da98:	fb13 2404 	smlabb	r4, r3, r4, r2
 800da9c:	1cb9      	adds	r1, r7, #2
 800da9e:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800daa2:	4420      	add	r0, r4
 800daa4:	f00e fbcc 	bl	801c240 <memcpy>
            neighbor_cache[i].state = ND6_DELAY;
 800daa8:	2304      	movs	r3, #4
 800daaa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 800daae:	2305      	movs	r3, #5
 800dab0:	62ab      	str	r3, [r5, #40]	; 0x28
 800dab2:	f7ff bb88 	b.w	800d1c6 <nd6_input+0x3a>
      lladdr_opt = NULL;
 800dab6:	462f      	mov	r7, r5
 800dab8:	e781      	b.n	800d9be <nd6_input+0x832>
    if (p->len < (sizeof(struct icmp6_hdr) + IP6_HLEN)) {
 800daba:	8943      	ldrh	r3, [r0, #10]
 800dabc:	2b2f      	cmp	r3, #47	; 0x2f
 800dabe:	f67f ab82 	bls.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_copy_from_packed(destination_address, ip6hdr->dest);
 800dac2:	6a23      	ldr	r3, [r4, #32]
 800dac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dac6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dac8:	920c      	str	r2, [sp, #48]	; 0x30
 800daca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800dacc:	920d      	str	r2, [sp, #52]	; 0x34
 800dace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dad0:	920e      	str	r2, [sp, #56]	; 0x38
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 800dad2:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800dad6:	4019      	ands	r1, r3
 800dad8:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800dadc:	4291      	cmp	r1, r2
 800dade:	d00b      	beq.n	800daf8 <nd6_input+0x96c>
 800dae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dae4:	041b      	lsls	r3, r3, #16
 800dae6:	0c1b      	lsrs	r3, r3, #16
 800dae8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800daec:	4293      	cmp	r3, r2
 800daee:	d003      	beq.n	800daf8 <nd6_input+0x96c>
 800daf0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d11c      	bne.n	800db32 <nd6_input+0x9a6>
 800daf8:	f899 30de 	ldrb.w	r3, [r9, #222]	; 0xde
 800dafc:	3301      	adds	r3, #1
 800dafe:	b2db      	uxtb	r3, r3
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 800db00:	a80b      	add	r0, sp, #44	; 0x2c
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 800db02:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 800db06:	f7ff f80f 	bl	800cb28 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 800db0a:	1e05      	subs	r5, r0, #0
 800db0c:	f6ff ab5b 	blt.w	800d1c6 <nd6_input+0x3a>
    pmtu = lwip_htonl(icmp6hdr->data);
 800db10:	6860      	ldr	r0, [r4, #4]
 800db12:	f000 fac8 	bl	800e0a6 <lwip_htonl>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 800db16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db1e:	4290      	cmp	r0, r2
 800db20:	bf98      	it	ls
 800db22:	4603      	movls	r3, r0
 800db24:	481a      	ldr	r0, [pc, #104]	; (800db90 <nd6_input+0xa04>)
 800db26:	2230      	movs	r2, #48	; 0x30
 800db28:	fb02 0005 	mla	r0, r2, r5, r0
 800db2c:	8503      	strh	r3, [r0, #40]	; 0x28
    break; /* ICMP6_TYPE_PTB */
 800db2e:	f7ff bb4a 	b.w	800d1c6 <nd6_input+0x3a>
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 800db32:	2300      	movs	r3, #0
 800db34:	e7e4      	b.n	800db00 <nd6_input+0x974>
    if (ip6_addr_isany(ip6_current_src_addr())) {
 800db36:	2b00      	cmp	r3, #0
 800db38:	f43f ac5b 	beq.w	800d3f2 <nd6_input+0x266>
      if (lladdr_opt == NULL) {
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	f43f ab42 	beq.w	800d1c6 <nd6_input+0x3a>
      i = nd6_find_neighbor_cache_entry(ip6_current_src_addr());
 800db42:	4815      	ldr	r0, [pc, #84]	; (800db98 <nd6_input+0xa0c>)
 800db44:	f7fe ffcc 	bl	800cae0 <nd6_find_neighbor_cache_entry>
      if (i>= 0) {
 800db48:	2800      	cmp	r0, #0
 800db4a:	f6ff ac82 	blt.w	800d452 <nd6_input+0x2c6>
        if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 800db4e:	4d11      	ldr	r5, [pc, #68]	; (800db94 <nd6_input+0xa08>)
 800db50:	232c      	movs	r3, #44	; 0x2c
 800db52:	fb03 5600 	mla	r6, r3, r0, r5
 800db56:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800db5a:	2a01      	cmp	r2, #1
 800db5c:	d10f      	bne.n	800db7e <nd6_input+0x9f2>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800db5e:	2218      	movs	r2, #24
 800db60:	fb13 2000 	smlabb	r0, r3, r0, r2
          neighbor_cache[i].netif = inp;
 800db64:	f8c6 9014 	str.w	r9, [r6, #20]
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 800db68:	f899 20da 	ldrb.w	r2, [r9, #218]	; 0xda
 800db6c:	1ca1      	adds	r1, r4, #2
 800db6e:	4428      	add	r0, r5
 800db70:	f00e fb66 	bl	801c240 <memcpy>
          neighbor_cache[i].state = ND6_DELAY;
 800db74:	2304      	movs	r3, #4
 800db76:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
          neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 800db7a:	2305      	movs	r3, #5
 800db7c:	62b3      	str	r3, [r6, #40]	; 0x28
      nd6_send_na(inp, &target_address, ND6_FLAG_SOLICITED | ND6_FLAG_OVERRIDE);
 800db7e:	2260      	movs	r2, #96	; 0x60
 800db80:	a90b      	add	r1, sp, #44	; 0x2c
 800db82:	4648      	mov	r0, r9
 800db84:	f7ff f82c 	bl	800cbe0 <nd6_send_na>
    break; /* ICMP6_TYPE_NS */
 800db88:	f7ff bb1d 	b.w	800d1c6 <nd6_input+0x3a>
 800db8c:	2000f4b8 	.word	0x2000f4b8
 800db90:	2000f2b4 	.word	0x2000f2b4
 800db94:	2000f070 	.word	0x2000f070
 800db98:	2000f4cc 	.word	0x2000f4cc

0800db9c <nd6_tmr>:
{
 800db9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	2500      	movs	r5, #0
 800dba2:	4c9c      	ldr	r4, [pc, #624]	; (800de14 <nd6_tmr+0x278>)
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 800dba4:	462e      	mov	r6, r5
        neighbor_cache[i].state = ND6_PROBE;
 800dba6:	2705      	movs	r7, #5
        neighbor_cache[i].state = ND6_STALE;
 800dba8:	f04f 0803 	mov.w	r8, #3
 800dbac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	b268      	sxtb	r0, r5
    switch (neighbor_cache[i].state) {
 800dbb4:	2b04      	cmp	r3, #4
 800dbb6:	d820      	bhi.n	800dbfa <nd6_tmr+0x5e>
 800dbb8:	e8df f003 	tbb	[pc, r3]
 800dbbc:	928f1403 	.word	0x928f1403
 800dbc0:	9a          	.byte	0x9a
 800dbc1:	00          	.byte	0x00
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 800dbc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d905      	bls.n	800dbd4 <nd6_tmr+0x38>
 800dbc8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800dbcc:	b912      	cbnz	r2, 800dbd4 <nd6_tmr+0x38>
        nd6_free_neighbor_cache_entry(i);
 800dbce:	f7ff fa29 	bl	800d024 <nd6_free_neighbor_cache_entry>
 800dbd2:	e012      	b.n	800dbfa <nd6_tmr+0x5e>
        neighbor_cache[i].counter.probes_sent++;
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	62a3      	str	r3, [r4, #40]	; 0x28
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 800dbd8:	2201      	movs	r2, #1
 800dbda:	6960      	ldr	r0, [r4, #20]
 800dbdc:	4621      	mov	r1, r4
 800dbde:	f7ff f8dd 	bl	800cd9c <nd6_send_ns>
}
 800dbe2:	e00a      	b.n	800dbfa <nd6_tmr+0x5e>
      if (neighbor_cache[i].q != NULL) {
 800dbe4:	6a23      	ldr	r3, [r4, #32]
 800dbe6:	b10b      	cbz	r3, 800dbec <nd6_tmr+0x50>
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 800dbe8:	f7ff f9b8 	bl	800cf5c <nd6_send_q.part.0>
      if (neighbor_cache[i].counter.reachable_time <= ND6_TMR_INTERVAL) {
 800dbec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbf2:	d86e      	bhi.n	800dcd2 <nd6_tmr+0x136>
        neighbor_cache[i].state = ND6_STALE;
 800dbf4:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
        neighbor_cache[i].counter.probes_sent = 0;
 800dbf8:	62a6      	str	r6, [r4, #40]	; 0x28
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800dbfa:	3501      	adds	r5, #1
 800dbfc:	2d0a      	cmp	r5, #10
 800dbfe:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800dc02:	d1d3      	bne.n	800dbac <nd6_tmr+0x10>
 800dc04:	f8df e220 	ldr.w	lr, [pc, #544]	; 800de28 <nd6_tmr+0x28c>
 800dc08:	2200      	movs	r2, #0
 800dc0a:	4673      	mov	r3, lr
    destination_cache[i].age++;
 800dc0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dc0e:	3201      	adds	r2, #1
 800dc10:	3101      	adds	r1, #1
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800dc12:	2a0a      	cmp	r2, #10
    destination_cache[i].age++;
 800dc14:	62d9      	str	r1, [r3, #44]	; 0x2c
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800dc16:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800dc1a:	d1f7      	bne.n	800dc0c <nd6_tmr+0x70>
 800dc1c:	2400      	movs	r4, #0
 800dc1e:	497e      	ldr	r1, [pc, #504]	; (800de18 <nd6_tmr+0x27c>)
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 800dc20:	4622      	mov	r2, r4
    if (default_router_list[i].neighbor_entry != NULL) {
 800dc22:	6808      	ldr	r0, [r1, #0]
 800dc24:	b348      	cbz	r0, 800dc7a <nd6_tmr+0xde>
      if (default_router_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 800dc26:	684b      	ldr	r3, [r1, #4]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d86d      	bhi.n	800dd08 <nd6_tmr+0x16c>
          if (ip6_addr_cmp(&destination_cache[j].next_hop_addr,
 800dc2c:	f8d0 c000 	ldr.w	ip, [r0]
 800dc30:	4673      	mov	r3, lr
 800dc32:	2500      	movs	r5, #0
 800dc34:	695e      	ldr	r6, [r3, #20]
 800dc36:	4566      	cmp	r6, ip
 800dc38:	d115      	bne.n	800dc66 <nd6_tmr+0xca>
 800dc3a:	699f      	ldr	r7, [r3, #24]
 800dc3c:	6846      	ldr	r6, [r0, #4]
 800dc3e:	42b7      	cmp	r7, r6
 800dc40:	d111      	bne.n	800dc66 <nd6_tmr+0xca>
 800dc42:	69df      	ldr	r7, [r3, #28]
 800dc44:	6886      	ldr	r6, [r0, #8]
 800dc46:	42b7      	cmp	r7, r6
 800dc48:	d10d      	bne.n	800dc66 <nd6_tmr+0xca>
 800dc4a:	6a1f      	ldr	r7, [r3, #32]
 800dc4c:	68c6      	ldr	r6, [r0, #12]
 800dc4e:	42b7      	cmp	r7, r6
 800dc50:	d109      	bne.n	800dc66 <nd6_tmr+0xca>
 800dc52:	7c06      	ldrb	r6, [r0, #16]
 800dc54:	f893 7024 	ldrb.w	r7, [r3, #36]	; 0x24
 800dc58:	42b7      	cmp	r7, r6
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 800dc5a:	bf02      	ittt	eq
 800dc5c:	e9c3 2200 	strdeq	r2, r2, [r3]
 800dc60:	e9c3 2202 	strdeq	r2, r2, [r3, #8]
 800dc64:	741a      	strbeq	r2, [r3, #16]
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 800dc66:	3501      	adds	r5, #1
 800dc68:	2d0a      	cmp	r5, #10
 800dc6a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800dc6e:	d1e1      	bne.n	800dc34 <nd6_tmr+0x98>
        default_router_list[i].neighbor_entry->isrouter = 0;
 800dc70:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        default_router_list[i].invalidation_timer = 0;
 800dc74:	e9c1 2200 	strd	r2, r2, [r1]
        default_router_list[i].flags = 0;
 800dc78:	720a      	strb	r2, [r1, #8]
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 800dc7a:	3401      	adds	r4, #1
 800dc7c:	2c03      	cmp	r4, #3
 800dc7e:	f101 010c 	add.w	r1, r1, #12
 800dc82:	d1ce      	bne.n	800dc22 <nd6_tmr+0x86>
 800dc84:	2200      	movs	r2, #0
 800dc86:	4b65      	ldr	r3, [pc, #404]	; (800de1c <nd6_tmr+0x280>)
        prefix_list[i].invalidation_timer = 0;
 800dc88:	4610      	mov	r0, r2
    if (prefix_list[i].netif != NULL) {
 800dc8a:	6959      	ldr	r1, [r3, #20]
 800dc8c:	b139      	cbz	r1, 800dc9e <nd6_tmr+0x102>
      if (prefix_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 800dc8e:	6999      	ldr	r1, [r3, #24]
 800dc90:	2901      	cmp	r1, #1
        prefix_list[i].netif = NULL;
 800dc92:	bf92      	itee	ls
 800dc94:	e9c3 0005 	strdls	r0, r0, [r3, #20]
        prefix_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 800dc98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dc9c:	6199      	strhi	r1, [r3, #24]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 800dc9e:	3201      	adds	r2, #1
 800dca0:	2a05      	cmp	r2, #5
 800dca2:	f103 031c 	add.w	r3, r3, #28
 800dca6:	d1f0      	bne.n	800dc8a <nd6_tmr+0xee>
  NETIF_FOREACH(netif) {
 800dca8:	4f5d      	ldr	r7, [pc, #372]	; (800de20 <nd6_tmr+0x284>)
 800dcaa:	683c      	ldr	r4, [r7, #0]
            netif_ip6_addr_set_pref_life(netif, i, 0);
 800dcac:	f04f 0800 	mov.w	r8, #0
  NETIF_FOREACH(netif) {
 800dcb0:	bb6c      	cbnz	r4, 800dd0e <nd6_tmr+0x172>
  if (!nd6_tmr_rs_reduction) {
 800dcb2:	4a5c      	ldr	r2, [pc, #368]	; (800de24 <nd6_tmr+0x288>)
 800dcb4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f040 80a7 	bne.w	800de0c <nd6_tmr+0x270>
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 800dcbe:	2303      	movs	r3, #3
    NETIF_FOREACH(netif) {
 800dcc0:	683c      	ldr	r4, [r7, #0]
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 800dcc2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    NETIF_FOREACH(netif) {
 800dcc6:	2c00      	cmp	r4, #0
 800dcc8:	f040 8087 	bne.w	800ddda <nd6_tmr+0x23e>
}
 800dccc:	b003      	add	sp, #12
 800dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        neighbor_cache[i].counter.reachable_time -= ND6_TMR_INTERVAL;
 800dcd2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
        neighbor_cache[i].counter.delay_time--;
 800dcd6:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcd8:	e78f      	b.n	800dbfa <nd6_tmr+0x5e>
      neighbor_cache[i].counter.stale_time++;
 800dcda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dcdc:	3301      	adds	r3, #1
 800dcde:	e7fa      	b.n	800dcd6 <nd6_tmr+0x13a>
      if (neighbor_cache[i].counter.delay_time <= 1) {
 800dce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d802      	bhi.n	800dcec <nd6_tmr+0x150>
        neighbor_cache[i].state = ND6_PROBE;
 800dce6:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800dcea:	e785      	b.n	800dbf8 <nd6_tmr+0x5c>
        neighbor_cache[i].counter.delay_time--;
 800dcec:	3b01      	subs	r3, #1
 800dcee:	e7f2      	b.n	800dcd6 <nd6_tmr+0x13a>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 800dcf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d904      	bls.n	800dd00 <nd6_tmr+0x164>
 800dcf6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800dcfa:	2a00      	cmp	r2, #0
 800dcfc:	f43f af67 	beq.w	800dbce <nd6_tmr+0x32>
        neighbor_cache[i].counter.probes_sent++;
 800dd00:	3301      	adds	r3, #1
 800dd02:	62a3      	str	r3, [r4, #40]	; 0x28
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 800dd04:	2200      	movs	r2, #0
 800dd06:	e768      	b.n	800dbda <nd6_tmr+0x3e>
        default_router_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	604b      	str	r3, [r1, #4]
 800dd0c:	e7b5      	b.n	800dc7a <nd6_tmr+0xde>
 800dd0e:	f06f 0316 	mvn.w	r3, #22
 800dd12:	f104 0994 	add.w	r9, r4, #148	; 0x94
 800dd16:	fb03 f604 	mul.w	r6, r3, r4
 800dd1a:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800dd1e:	f104 0b97 	add.w	fp, r4, #151	; 0x97
  NETIF_FOREACH(netif) {
 800dd22:	464d      	mov	r5, r9
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 800dd24:	f6a6 56ac 	subw	r6, r6, #3500	; 0xdac
 800dd28:	eba5 0109 	sub.w	r1, r5, r9
      addr_state = netif_ip6_addr_state(netif, i);
 800dd2c:	f815 0b01 	ldrb.w	r0, [r5], #1
 800dd30:	b249      	sxtb	r1, r1
      if (!ip6_addr_isinvalid(addr_state) &&
 800dd32:	b170      	cbz	r0, 800dd52 <nd6_tmr+0x1b6>
          !netif_ip6_addr_isstatic(netif, i)) {
 800dd34:	f8da 2000 	ldr.w	r2, [sl]
 800dd38:	b15a      	cbz	r2, 800dd52 <nd6_tmr+0x1b6>
        if (life <= ND6_TMR_INTERVAL / 1000) {
 800dd3a:	2a01      	cmp	r2, #1
 800dd3c:	d821      	bhi.n	800dd82 <nd6_tmr+0x1e6>
          netif_ip6_addr_set_valid_life(netif, i, 0);
 800dd3e:	f8ca 8000 	str.w	r8, [sl]
          netif_ip6_addr_set_pref_life(netif, i, 0);
 800dd42:	f8ca 800c 	str.w	r8, [sl, #12]
          netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
 800dd46:	2200      	movs	r2, #0
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 800dd48:	4620      	mov	r0, r4
 800dd4a:	9101      	str	r1, [sp, #4]
 800dd4c:	f001 f9a2 	bl	800f094 <netif_ip6_addr_set_state>
 800dd50:	9901      	ldr	r1, [sp, #4]
      addr_state = netif_ip6_addr_state(netif, i);
 800dd52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      if (ip6_addr_istentative(addr_state)) {
 800dd56:	0713      	lsls	r3, r2, #28
 800dd58:	d50d      	bpl.n	800dd76 <nd6_tmr+0x1da>
        if ((addr_state & IP6_ADDR_TENTATIVE_COUNT_MASK) >= LWIP_IPV6_DUP_DETECT_ATTEMPTS) {
 800dd5a:	0750      	lsls	r0, r2, #29
 800dd5c:	d02a      	beq.n	800ddb4 <nd6_tmr+0x218>
          if (!netif_ip6_addr_isstatic(netif, i) &&
 800dd5e:	f8da 2000 	ldr.w	r2, [sl]
 800dd62:	b32a      	cbz	r2, 800ddb0 <nd6_tmr+0x214>
              netif_ip6_addr_pref_life(netif, i) == 0) {
 800dd64:	f8da 200c 	ldr.w	r2, [sl, #12]
            addr_state = IP6_ADDR_DEPRECATED;
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	bf14      	ite	ne
 800dd6c:	2230      	movne	r2, #48	; 0x30
 800dd6e:	2210      	moveq	r2, #16
          netif_ip6_addr_set_state(netif, i, addr_state);
 800dd70:	4620      	mov	r0, r4
 800dd72:	f001 f98f 	bl	800f094 <netif_ip6_addr_set_state>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 800dd76:	45ab      	cmp	fp, r5
 800dd78:	f10a 0a04 	add.w	sl, sl, #4
 800dd7c:	d1d4      	bne.n	800dd28 <nd6_tmr+0x18c>
  NETIF_FOREACH(netif) {
 800dd7e:	6824      	ldr	r4, [r4, #0]
 800dd80:	e796      	b.n	800dcb0 <nd6_tmr+0x114>
          if (!ip6_addr_life_isinfinite(life)) {
 800dd82:	1c53      	adds	r3, r2, #1
            life -= ND6_TMR_INTERVAL / 1000;
 800dd84:	bf1c      	itt	ne
 800dd86:	f102 32ff 	addne.w	r2, r2, #4294967295
            netif_ip6_addr_set_valid_life(netif, i, life);
 800dd8a:	f8ca 2000 	strne.w	r2, [sl]
          life = netif_ip6_addr_pref_life(netif, i);
 800dd8e:	f8da 200c 	ldr.w	r2, [sl, #12]
          if (life <= ND6_TMR_INTERVAL / 1000) {
 800dd92:	2a01      	cmp	r2, #1
 800dd94:	d805      	bhi.n	800dda2 <nd6_tmr+0x206>
            if (addr_state == IP6_ADDR_PREFERRED)
 800dd96:	2830      	cmp	r0, #48	; 0x30
            netif_ip6_addr_set_pref_life(netif, i, 0);
 800dd98:	f8ca 800c 	str.w	r8, [sl, #12]
            if (addr_state == IP6_ADDR_PREFERRED)
 800dd9c:	d1d9      	bne.n	800dd52 <nd6_tmr+0x1b6>
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 800dd9e:	2210      	movs	r2, #16
 800dda0:	e7d2      	b.n	800dd48 <nd6_tmr+0x1ac>
          } else if (!ip6_addr_life_isinfinite(life)) {
 800dda2:	1c50      	adds	r0, r2, #1
            life -= ND6_TMR_INTERVAL / 1000;
 800dda4:	bf1c      	itt	ne
 800dda6:	f102 32ff 	addne.w	r2, r2, #4294967295
            netif_ip6_addr_set_pref_life(netif, i, life);
 800ddaa:	f8ca 200c 	strne.w	r2, [sl, #12]
 800ddae:	e7d0      	b.n	800dd52 <nd6_tmr+0x1b6>
          addr_state = IP6_ADDR_PREFERRED;
 800ddb0:	2230      	movs	r2, #48	; 0x30
 800ddb2:	e7dd      	b.n	800dd70 <nd6_tmr+0x1d4>
        } else if (netif_is_up(netif) && netif_is_link_up(netif)) {
 800ddb4:	f894 00db 	ldrb.w	r0, [r4, #219]	; 0xdb
 800ddb8:	07c3      	lsls	r3, r0, #31
 800ddba:	d5dc      	bpl.n	800dd76 <nd6_tmr+0x1da>
 800ddbc:	0740      	lsls	r0, r0, #29
 800ddbe:	d5da      	bpl.n	800dd76 <nd6_tmr+0x1da>
          netif_ip6_addr_set_state(netif, i, addr_state + 1);
 800ddc0:	3201      	adds	r2, #1
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	f001 f965 	bl	800f094 <netif_ip6_addr_set_state>
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 800ddca:	2118      	movs	r1, #24
 800ddcc:	2205      	movs	r2, #5
 800ddce:	fb01 6105 	mla	r1, r1, r5, r6
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f7fe ffe2 	bl	800cd9c <nd6_send_ns>
 800ddd8:	e7cd      	b.n	800dd76 <nd6_tmr+0x1da>
      if ((netif->rs_count > 0) && netif_is_up(netif) &&
 800ddda:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 800ddde:	b19b      	cbz	r3, 800de08 <nd6_tmr+0x26c>
 800dde0:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800dde4:	07da      	lsls	r2, r3, #31
 800dde6:	d50f      	bpl.n	800de08 <nd6_tmr+0x26c>
 800dde8:	075b      	lsls	r3, r3, #29
 800ddea:	d50d      	bpl.n	800de08 <nd6_tmr+0x26c>
          netif_is_link_up(netif) &&
 800ddec:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800ddf0:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800ddf4:	d008      	beq.n	800de08 <nd6_tmr+0x26c>
        if (nd6_send_rs(netif) == ERR_OK) {
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7fe ff60 	bl	800ccbc <nd6_send_rs>
 800ddfc:	b920      	cbnz	r0, 800de08 <nd6_tmr+0x26c>
          netif->rs_count--;
 800ddfe:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 800de02:	3b01      	subs	r3, #1
 800de04:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    NETIF_FOREACH(netif) {
 800de08:	6824      	ldr	r4, [r4, #0]
 800de0a:	e75c      	b.n	800dcc6 <nd6_tmr+0x12a>
    nd6_tmr_rs_reduction--;
 800de0c:	3b01      	subs	r3, #1
 800de0e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
}
 800de12:	e75b      	b.n	800dccc <nd6_tmr+0x130>
 800de14:	2000f070 	.word	0x2000f070
 800de18:	2000f494 	.word	0x2000f494
 800de1c:	2000f228 	.word	0x2000f228
 800de20:	20016108 	.word	0x20016108
 800de24:	20006a9c 	.word	0x20006a9c
 800de28:	2000f2b4 	.word	0x2000f2b4

0800de2c <nd6_clear_destination_cache>:
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800de2c:	2100      	movs	r1, #0
 800de2e:	4b06      	ldr	r3, [pc, #24]	; (800de48 <nd6_clear_destination_cache+0x1c>)
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 800de30:	460a      	mov	r2, r1
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800de32:	3101      	adds	r1, #1
 800de34:	290a      	cmp	r1, #10
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 800de36:	e9c3 2200 	strd	r2, r2, [r3]
 800de3a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800de3e:	741a      	strb	r2, [r3, #16]
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 800de40:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800de44:	d1f5      	bne.n	800de32 <nd6_clear_destination_cache+0x6>
}
 800de46:	4770      	bx	lr
 800de48:	2000f2b4 	.word	0x2000f2b4

0800de4c <nd6_find_route>:
{
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4b1a      	ldr	r3, [pc, #104]	; (800deb8 <nd6_find_route+0x6c>)
 800de50:	4602      	mov	r2, r0
 800de52:	2100      	movs	r1, #0
    netif = prefix_list[i].netif;
 800de54:	6958      	ldr	r0, [r3, #20]
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 800de56:	b188      	cbz	r0, 800de7c <nd6_find_route+0x30>
 800de58:	681d      	ldr	r5, [r3, #0]
 800de5a:	6814      	ldr	r4, [r2, #0]
 800de5c:	42a5      	cmp	r5, r4
 800de5e:	d10d      	bne.n	800de7c <nd6_find_route+0x30>
 800de60:	685d      	ldr	r5, [r3, #4]
 800de62:	6854      	ldr	r4, [r2, #4]
 800de64:	42a5      	cmp	r5, r4
 800de66:	d109      	bne.n	800de7c <nd6_find_route+0x30>
 800de68:	7c1d      	ldrb	r5, [r3, #16]
 800de6a:	7c14      	ldrb	r4, [r2, #16]
 800de6c:	42a5      	cmp	r5, r4
 800de6e:	d105      	bne.n	800de7c <nd6_find_route+0x30>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 800de70:	f890 40db 	ldrb.w	r4, [r0, #219]	; 0xdb
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 800de74:	07e5      	lsls	r5, r4, #31
 800de76:	d501      	bpl.n	800de7c <nd6_find_route+0x30>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 800de78:	0764      	lsls	r4, r4, #29
 800de7a:	d419      	bmi.n	800deb0 <nd6_find_route+0x64>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 800de7c:	3101      	adds	r1, #1
 800de7e:	2905      	cmp	r1, #5
 800de80:	f103 031c 	add.w	r3, r3, #28
 800de84:	d1e6      	bne.n	800de54 <nd6_find_route+0x8>
  i = nd6_select_router(ip6addr, NULL);
 800de86:	2000      	movs	r0, #0
 800de88:	f7ff f802 	bl	800ce90 <nd6_select_router.isra.0>
  if (i >= 0) {
 800de8c:	1e04      	subs	r4, r0, #0
 800de8e:	db10      	blt.n	800deb2 <nd6_find_route+0x66>
    LWIP_ASSERT("selected router must have a neighbor entry",
 800de90:	220c      	movs	r2, #12
 800de92:	4d0a      	ldr	r5, [pc, #40]	; (800debc <nd6_find_route+0x70>)
 800de94:	4362      	muls	r2, r4
 800de96:	58aa      	ldr	r2, [r5, r2]
 800de98:	b932      	cbnz	r2, 800dea8 <nd6_find_route+0x5c>
 800de9a:	4b09      	ldr	r3, [pc, #36]	; (800dec0 <nd6_find_route+0x74>)
 800de9c:	4909      	ldr	r1, [pc, #36]	; (800dec4 <nd6_find_route+0x78>)
 800de9e:	480a      	ldr	r0, [pc, #40]	; (800dec8 <nd6_find_route+0x7c>)
 800dea0:	f240 62f7 	movw	r2, #1783	; 0x6f7
 800dea4:	f00e fe40 	bl	801cb28 <iprintf>
    return default_router_list[i].neighbor_entry->netif;
 800dea8:	200c      	movs	r0, #12
 800deaa:	4344      	muls	r4, r0
 800deac:	592b      	ldr	r3, [r5, r4]
 800deae:	6958      	ldr	r0, [r3, #20]
}
 800deb0:	bd38      	pop	{r3, r4, r5, pc}
  return NULL;
 800deb2:	2000      	movs	r0, #0
 800deb4:	e7fc      	b.n	800deb0 <nd6_find_route+0x64>
 800deb6:	bf00      	nop
 800deb8:	2000f228 	.word	0x2000f228
 800debc:	2000f494 	.word	0x2000f494
 800dec0:	0802cb6a 	.word	0x0802cb6a
 800dec4:	0802cc04 	.word	0x0802cc04
 800dec8:	0802aecf 	.word	0x0802aecf

0800decc <nd6_get_destination_mtu>:
 * @param netif the netif on which the packet will be sent
 * @return the Path MTU, if known, or the netif default MTU
 */
u16_t
nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)
{
 800decc:	b510      	push	{r4, lr}
 800dece:	460c      	mov	r4, r1
  s16_t i;

  i = nd6_find_destination_cache_entry(ip6addr);
 800ded0:	f7fe fe2a 	bl	800cb28 <nd6_find_destination_cache_entry>
  if (i >= 0) {
 800ded4:	2800      	cmp	r0, #0
 800ded6:	db05      	blt.n	800dee4 <nd6_get_destination_mtu+0x18>
    if (destination_cache[i].pmtu > 0) {
 800ded8:	4b06      	ldr	r3, [pc, #24]	; (800def4 <nd6_get_destination_mtu+0x28>)
 800deda:	2230      	movs	r2, #48	; 0x30
 800dedc:	fb02 3000 	mla	r0, r2, r0, r3
 800dee0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 800dee2:	b910      	cbnz	r0, 800deea <nd6_get_destination_mtu+0x1e>
      return destination_cache[i].pmtu;
    }
  }

  if (netif != NULL) {
 800dee4:	b114      	cbz	r4, 800deec <nd6_get_destination_mtu+0x20>
    return netif_mtu6(netif);
 800dee6:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
  }

  return 1280; /* Minimum MTU */
}
 800deea:	bd10      	pop	{r4, pc}
  return 1280; /* Minimum MTU */
 800deec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800def0:	e7fb      	b.n	800deea <nd6_get_destination_mtu+0x1e>
 800def2:	bf00      	nop
 800def4:	2000f2b4 	.word	0x2000f2b4

0800def8 <nd6_reachability_hint>:
 * @param ip6addr the destination address which is know to be reachable
 *                by an upper layer protocol (TCP)
 */
void
nd6_reachability_hint(const ip6_addr_t *ip6addr)
{
 800def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  s8_t i;
  s16_t dst_idx;

  /* Find destination in cache. */
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 800defa:	4d2c      	ldr	r5, [pc, #176]	; (800dfac <nd6_reachability_hint+0xb4>)
 800defc:	4e2c      	ldr	r6, [pc, #176]	; (800dfb0 <nd6_reachability_hint+0xb8>)
 800defe:	f895 4036 	ldrb.w	r4, [r5, #54]	; 0x36
 800df02:	6802      	ldr	r2, [r0, #0]
 800df04:	2130      	movs	r1, #48	; 0x30
 800df06:	4361      	muls	r1, r4
 800df08:	1873      	adds	r3, r6, r1
 800df0a:	5871      	ldr	r1, [r6, r1]
 800df0c:	428a      	cmp	r2, r1
 800df0e:	d140      	bne.n	800df92 <nd6_reachability_hint+0x9a>
 800df10:	6841      	ldr	r1, [r0, #4]
 800df12:	685a      	ldr	r2, [r3, #4]
 800df14:	4291      	cmp	r1, r2
 800df16:	d13c      	bne.n	800df92 <nd6_reachability_hint+0x9a>
 800df18:	6881      	ldr	r1, [r0, #8]
 800df1a:	689a      	ldr	r2, [r3, #8]
 800df1c:	4291      	cmp	r1, r2
 800df1e:	d138      	bne.n	800df92 <nd6_reachability_hint+0x9a>
 800df20:	68c1      	ldr	r1, [r0, #12]
 800df22:	68da      	ldr	r2, [r3, #12]
 800df24:	4291      	cmp	r1, r2
 800df26:	d134      	bne.n	800df92 <nd6_reachability_hint+0x9a>
 800df28:	7c02      	ldrb	r2, [r0, #16]
 800df2a:	7c1b      	ldrb	r3, [r3, #16]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d130      	bne.n	800df92 <nd6_reachability_hint+0x9a>
    dst_idx = nd6_cached_destination_index;
 800df30:	b222      	sxth	r2, r4
  if (dst_idx < 0) {
    return;
  }

  /* Find next hop neighbor in cache. */
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 800df32:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800df36:	481f      	ldr	r0, [pc, #124]	; (800dfb4 <nd6_reachability_hint+0xbc>)
 800df38:	2130      	movs	r1, #48	; 0x30
 800df3a:	252c      	movs	r5, #44	; 0x2c
 800df3c:	435d      	muls	r5, r3
 800df3e:	fb01 6102 	mla	r1, r1, r2, r6
 800df42:	1944      	adds	r4, r0, r5
 800df44:	694f      	ldr	r7, [r1, #20]
 800df46:	5945      	ldr	r5, [r0, r5]
 800df48:	42af      	cmp	r7, r5
 800df4a:	4605      	mov	r5, r0
 800df4c:	d126      	bne.n	800df9c <nd6_reachability_hint+0xa4>
 800df4e:	698f      	ldr	r7, [r1, #24]
 800df50:	6860      	ldr	r0, [r4, #4]
 800df52:	4287      	cmp	r7, r0
 800df54:	d122      	bne.n	800df9c <nd6_reachability_hint+0xa4>
 800df56:	69cf      	ldr	r7, [r1, #28]
 800df58:	68a0      	ldr	r0, [r4, #8]
 800df5a:	4287      	cmp	r7, r0
 800df5c:	d11e      	bne.n	800df9c <nd6_reachability_hint+0xa4>
 800df5e:	6a0f      	ldr	r7, [r1, #32]
 800df60:	68e0      	ldr	r0, [r4, #12]
 800df62:	4287      	cmp	r7, r0
 800df64:	d11a      	bne.n	800df9c <nd6_reachability_hint+0xa4>
 800df66:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 800df6a:	7c21      	ldrb	r1, [r4, #16]
 800df6c:	4288      	cmp	r0, r1
 800df6e:	d115      	bne.n	800df9c <nd6_reachability_hint+0xa4>
    i = nd6_cached_neighbor_index;
 800df70:	b258      	sxtb	r0, r3
    ND6_STATS_INC(nd6.cachehit);
  } else {
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
  }
  if (i < 0) {
 800df72:	2800      	cmp	r0, #0
 800df74:	db11      	blt.n	800df9a <nd6_reachability_hint+0xa2>
    return;
  }

  /* For safety: don't set as reachable if we don't have a LL address yet. Misuse protection. */
  if (neighbor_cache[i].state == ND6_INCOMPLETE || neighbor_cache[i].state == ND6_NO_ENTRY) {
 800df76:	232c      	movs	r3, #44	; 0x2c
 800df78:	fb03 5000 	mla	r0, r3, r0, r5
 800df7c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800df80:	2b01      	cmp	r3, #1
 800df82:	d90a      	bls.n	800df9a <nd6_reachability_hint+0xa2>
    return;
  }

  /* Set reachability state. */
  neighbor_cache[i].state = ND6_REACHABLE;
 800df84:	2302      	movs	r3, #2
 800df86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  neighbor_cache[i].counter.reachable_time = reachable_time;
 800df8a:	4b0b      	ldr	r3, [pc, #44]	; (800dfb8 <nd6_reachability_hint+0xc0>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6283      	str	r3, [r0, #40]	; 0x28
 800df90:	e003      	b.n	800df9a <nd6_reachability_hint+0xa2>
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 800df92:	f7fe fdc9 	bl	800cb28 <nd6_find_destination_cache_entry>
  if (dst_idx < 0) {
 800df96:	1e02      	subs	r2, r0, #0
 800df98:	dacb      	bge.n	800df32 <nd6_reachability_hint+0x3a>
}
 800df9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
 800df9c:	2030      	movs	r0, #48	; 0x30
 800df9e:	fb02 6000 	mla	r0, r2, r0, r6
 800dfa2:	3014      	adds	r0, #20
 800dfa4:	f7fe fd9c 	bl	800cae0 <nd6_find_neighbor_cache_entry>
 800dfa8:	e7e3      	b.n	800df72 <nd6_reachability_hint+0x7a>
 800dfaa:	bf00      	nop
 800dfac:	20006a9c 	.word	0x20006a9c
 800dfb0:	2000f2b4 	.word	0x2000f2b4
 800dfb4:	2000f070 	.word	0x2000f070
 800dfb8:	20000038 	.word	0x20000038

0800dfbc <nd6_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
nd6_cleanup_netif(struct netif *netif)
{
 800dfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfbe:	4a16      	ldr	r2, [pc, #88]	; (800e018 <nd6_cleanup_netif+0x5c>)
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4606      	mov	r6, r0
  u8_t i;
  s8_t router_index;
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
    if (prefix_list[i].netif == netif) {
      prefix_list[i].netif = NULL;
 800dfc4:	4619      	mov	r1, r3
    if (prefix_list[i].netif == netif) {
 800dfc6:	6950      	ldr	r0, [r2, #20]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	42b0      	cmp	r0, r6
      prefix_list[i].netif = NULL;
 800dfcc:	bf08      	it	eq
 800dfce:	6151      	streq	r1, [r2, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 800dfd0:	2b05      	cmp	r3, #5
 800dfd2:	f102 021c 	add.w	r2, r2, #28
 800dfd6:	d1f6      	bne.n	800dfc6 <nd6_cleanup_netif+0xa>
 800dfd8:	2400      	movs	r4, #0
 800dfda:	4d10      	ldr	r5, [pc, #64]	; (800e01c <nd6_cleanup_netif+0x60>)
  }
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
    if (neighbor_cache[i].netif == netif) {
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
          default_router_list[router_index].neighbor_entry = NULL;
 800dfdc:	4627      	mov	r7, r4
    if (neighbor_cache[i].netif == netif) {
 800dfde:	696b      	ldr	r3, [r5, #20]
 800dfe0:	42b3      	cmp	r3, r6
 800dfe2:	d110      	bne.n	800e006 <nd6_cleanup_netif+0x4a>
 800dfe4:	4b0e      	ldr	r3, [pc, #56]	; (800e020 <nd6_cleanup_netif+0x64>)
 800dfe6:	2200      	movs	r2, #0
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
 800dfe8:	6819      	ldr	r1, [r3, #0]
 800dfea:	3201      	adds	r2, #1
 800dfec:	42a9      	cmp	r1, r5
          default_router_list[router_index].neighbor_entry = NULL;
 800dfee:	bf04      	itt	eq
 800dff0:	601f      	streq	r7, [r3, #0]
          default_router_list[router_index].flags = 0;
 800dff2:	721f      	strbeq	r7, [r3, #8]
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 800dff4:	2a03      	cmp	r2, #3
 800dff6:	f103 030c 	add.w	r3, r3, #12
 800dffa:	d1f5      	bne.n	800dfe8 <nd6_cleanup_netif+0x2c>
        }
      }
      neighbor_cache[i].isrouter = 0;
      nd6_free_neighbor_cache_entry(i);
 800dffc:	b260      	sxtb	r0, r4
      neighbor_cache[i].isrouter = 0;
 800dffe:	f885 7025 	strb.w	r7, [r5, #37]	; 0x25
      nd6_free_neighbor_cache_entry(i);
 800e002:	f7ff f80f 	bl	800d024 <nd6_free_neighbor_cache_entry>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 800e006:	3401      	adds	r4, #1
 800e008:	2c0a      	cmp	r4, #10
 800e00a:	f105 052c 	add.w	r5, r5, #44	; 0x2c
 800e00e:	d1e6      	bne.n	800dfde <nd6_cleanup_netif+0x22>
  }
  /* Clear the destination cache, since many entries may now have become
   * invalid for one of several reasons. As destination cache entries have no
   * netif association, use a sledgehammer approach (this can be improved). */
  nd6_clear_destination_cache();
}
 800e010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  nd6_clear_destination_cache();
 800e014:	f7ff bf0a 	b.w	800de2c <nd6_clear_destination_cache>
 800e018:	2000f228 	.word	0x2000f228
 800e01c:	2000f070 	.word	0x2000f070
 800e020:	2000f494 	.word	0x2000f494

0800e024 <nd6_adjust_mld_membership>:
 * @param addr_idx The index of the address.
 * @param new_state The new (IP6_ADDR_) state for the address.
 */
void
nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)
{
 800e024:	b410      	push	{r4}
 800e026:	460b      	mov	r3, r1
  u8_t old_state, old_member, new_member;

  old_state = netif_ip6_addr_state(netif, addr_idx);
 800e028:	1841      	adds	r1, r0, r1
 800e02a:	f891 4094 	ldrb.w	r4, [r1, #148]	; 0x94

  /* Determine whether we were, and should be, a member of the solicited-node
   * multicast group for this address. For tentative addresses, the group is
   * not joined until the address enters the TENTATIVE_1 (or VALID) state. */
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 800e02e:	f014 01f7 	ands.w	r1, r4, #247	; 0xf7
 800e032:	d003      	beq.n	800e03c <nd6_adjust_mld_membership+0x18>
 800e034:	f1b4 0140 	subs.w	r1, r4, #64	; 0x40
 800e038:	bf18      	it	ne
 800e03a:	2101      	movne	r1, #1
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 800e03c:	f012 04f7 	ands.w	r4, r2, #247	; 0xf7
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 800e040:	b2c9      	uxtb	r1, r1
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 800e042:	d01e      	beq.n	800e082 <nd6_adjust_mld_membership+0x5e>
 800e044:	3a40      	subs	r2, #64	; 0x40
 800e046:	bf18      	it	ne
 800e048:	2201      	movne	r2, #1

  if (old_member != new_member) {
 800e04a:	4291      	cmp	r1, r2
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 800e04c:	b2d4      	uxtb	r4, r2
  if (old_member != new_member) {
 800e04e:	d01e      	beq.n	800e08e <nd6_adjust_mld_membership+0x6a>
    ip6_addr_set_solicitednode(&multicast_address, netif_ip6_addr(netif, addr_idx)->addr[3]);
 800e050:	4910      	ldr	r1, [pc, #64]	; (800e094 <nd6_adjust_mld_membership+0x70>)
 800e052:	2200      	movs	r2, #0
 800e054:	f240 2cff 	movw	ip, #767	; 0x2ff
 800e058:	e9c1 c200 	strd	ip, r2, [r1]
 800e05c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e060:	608a      	str	r2, [r1, #8]
 800e062:	2218      	movs	r2, #24
 800e064:	fb02 0303 	mla	r3, r2, r3, r0
 800e068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e06a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800e06e:	60cb      	str	r3, [r1, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 800e070:	f890 30de 	ldrb.w	r3, [r0, #222]	; 0xde
 800e074:	3301      	adds	r3, #1
 800e076:	740b      	strb	r3, [r1, #16]

    if (new_member) {
 800e078:	b12c      	cbz	r4, 800e086 <nd6_adjust_mld_membership+0x62>
      mld6_joingroup_netif(netif, &multicast_address);
    } else {
      mld6_leavegroup_netif(netif, &multicast_address);
    }
  }
}
 800e07a:	f85d 4b04 	ldr.w	r4, [sp], #4
      mld6_joingroup_netif(netif, &multicast_address);
 800e07e:	f7fe bc35 	b.w	800c8ec <mld6_joingroup_netif>
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 800e082:	4622      	mov	r2, r4
 800e084:	e7e1      	b.n	800e04a <nd6_adjust_mld_membership+0x26>
}
 800e086:	f85d 4b04 	ldr.w	r4, [sp], #4
      mld6_leavegroup_netif(netif, &multicast_address);
 800e08a:	f7fe bc9f 	b.w	800c9cc <mld6_leavegroup_netif>
}
 800e08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	20006a9c 	.word	0x20006a9c

0800e098 <nd6_restart_netif>:
void
nd6_restart_netif(struct netif *netif)
{
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  /* Send Router Solicitation messages (see RFC 4861, ch. 6.3.7). */
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800e098:	2303      	movs	r3, #3
 800e09a:	f880 30e0 	strb.w	r3, [r0, #224]	; 0xe0
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
}
 800e09e:	4770      	bx	lr

0800e0a0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800e0a0:	ba40      	rev16	r0, r0
}
 800e0a2:	b280      	uxth	r0, r0
 800e0a4:	4770      	bx	lr

0800e0a6 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800e0a6:	ba00      	rev	r0, r0
 800e0a8:	4770      	bx	lr
	...

0800e0ac <dns_backupserver_available>:
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800e0ac:	7fc2      	ldrb	r2, [r0, #31]
 800e0ae:	2a01      	cmp	r2, #1
 800e0b0:	d814      	bhi.n	800e0dc <dns_backupserver_available+0x30>
 800e0b2:	490b      	ldr	r1, [pc, #44]	; (800e0e0 <dns_backupserver_available+0x34>)
 800e0b4:	2318      	movs	r3, #24
 800e0b6:	fb02 3303 	mla	r3, r2, r3, r3
 800e0ba:	18ca      	adds	r2, r1, r3
 800e0bc:	58c8      	ldr	r0, [r1, r3]
 800e0be:	7d13      	ldrb	r3, [r2, #20]
 800e0c0:	2b06      	cmp	r3, #6
 800e0c2:	d105      	bne.n	800e0d0 <dns_backupserver_available+0x24>
 800e0c4:	b940      	cbnz	r0, 800e0d8 <dns_backupserver_available+0x2c>
 800e0c6:	6853      	ldr	r3, [r2, #4]
 800e0c8:	b933      	cbnz	r3, 800e0d8 <dns_backupserver_available+0x2c>
 800e0ca:	6893      	ldr	r3, [r2, #8]
 800e0cc:	b923      	cbnz	r3, 800e0d8 <dns_backupserver_available+0x2c>
 800e0ce:	68d0      	ldr	r0, [r2, #12]
 800e0d0:	3800      	subs	r0, #0
 800e0d2:	bf18      	it	ne
 800e0d4:	2001      	movne	r0, #1
 800e0d6:	4770      	bx	lr
 800e0d8:	2001      	movs	r0, #1
 800e0da:	4770      	bx	lr
  u8_t ret = 0;
 800e0dc:	2000      	movs	r0, #0
      ret = 1;
    }
  }

  return ret;
}
 800e0de:	4770      	bx	lr
 800e0e0:	20006ad4 	.word	0x20006ad4

0800e0e4 <dns_call_found>:
{
 800e0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e8:	4604      	mov	r4, r0
  if (addr != NULL) {
 800e0ea:	4688      	mov	r8, r1
 800e0ec:	b1d9      	cbz	r1, 800e126 <dns_call_found+0x42>
    if (IP_IS_V6_VAL(*addr)) {
 800e0ee:	4d3e      	ldr	r5, [pc, #248]	; (800e1e8 <dns_call_found+0x104>)
 800e0f0:	7d0a      	ldrb	r2, [r1, #20]
 800e0f2:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e0f6:	fb03 5300 	mla	r3, r3, r0, r5
 800e0fa:	2a06      	cmp	r2, #6
 800e0fc:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800e100:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e104:	d15b      	bne.n	800e1be <dns_call_found+0xda>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 800e106:	2b01      	cmp	r3, #1
 800e108:	d006      	beq.n	800e118 <dns_call_found+0x34>
 800e10a:	4b38      	ldr	r3, [pc, #224]	; (800e1ec <dns_call_found+0x108>)
 800e10c:	4938      	ldr	r1, [pc, #224]	; (800e1f0 <dns_call_found+0x10c>)
 800e10e:	4839      	ldr	r0, [pc, #228]	; (800e1f4 <dns_call_found+0x110>)
 800e110:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800e114:	f00e fd08 	bl	801cb28 <iprintf>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
 800e118:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e11c:	fb03 5504 	mla	r5, r3, r4, r5
 800e120:	2301      	movs	r3, #1
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 800e122:	f885 316c 	strb.w	r3, [r5, #364]	; 0x16c
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e126:	4e34      	ldr	r6, [pc, #208]	; (800e1f8 <dns_call_found+0x114>)
 800e128:	f44f 7794 	mov.w	r7, #296	; 0x128
 800e12c:	fb07 6704 	mla	r7, r7, r4, r6
 800e130:	f506 6594 	add.w	r5, r6, #1184	; 0x4a0
 800e134:	3724      	adds	r7, #36	; 0x24
 800e136:	f506 669a 	add.w	r6, r6, #1232	; 0x4d0
      dns_requests[i].found = NULL;
 800e13a:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	b143      	cbz	r3, 800e154 <dns_call_found+0x70>
 800e142:	7a2a      	ldrb	r2, [r5, #8]
 800e144:	42a2      	cmp	r2, r4
 800e146:	d105      	bne.n	800e154 <dns_call_found+0x70>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e148:	686a      	ldr	r2, [r5, #4]
 800e14a:	4641      	mov	r1, r8
 800e14c:	4638      	mov	r0, r7
 800e14e:	4798      	blx	r3
      dns_requests[i].found = NULL;
 800e150:	f8c5 9000 	str.w	r9, [r5]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e154:	350c      	adds	r5, #12
 800e156:	42ae      	cmp	r6, r5
 800e158:	d1f1      	bne.n	800e13e <dns_call_found+0x5a>
 800e15a:	4b27      	ldr	r3, [pc, #156]	; (800e1f8 <dns_call_found+0x114>)
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e15c:	f44f 7194 	mov.w	r1, #296	; 0x128
 800e160:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e164:	2200      	movs	r2, #0
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e166:	fb01 0104 	mla	r1, r1, r4, r0
    if (i == idx) {
 800e16a:	b2d0      	uxtb	r0, r2
 800e16c:	42a0      	cmp	r0, r4
 800e16e:	d035      	beq.n	800e1dc <dns_call_found+0xf8>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800e170:	7f98      	ldrb	r0, [r3, #30]
 800e172:	2802      	cmp	r0, #2
 800e174:	d132      	bne.n	800e1dc <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e176:	f893 6023 	ldrb.w	r6, [r3, #35]	; 0x23
 800e17a:	f891 506b 	ldrb.w	r5, [r1, #107]	; 0x6b
 800e17e:	42ae      	cmp	r6, r5
 800e180:	d12c      	bne.n	800e1dc <dns_call_found+0xf8>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e182:	2304      	movs	r3, #4
 800e184:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800e188:	4d17      	ldr	r5, [pc, #92]	; (800e1e8 <dns_call_found+0x104>)
 800e18a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800e18e:	fb00 5404 	mla	r4, r0, r4, r5
 800e192:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e196:	2b03      	cmp	r3, #3
 800e198:	d80f      	bhi.n	800e1ba <dns_call_found+0xd6>
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800e19a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e19e:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
 800e1a2:	f006 f963 	bl	801446c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800e1a6:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e1aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e1b4:	2304      	movs	r3, #4
 800e1b6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
}
 800e1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d106      	bne.n	800e1d0 <dns_call_found+0xec>
 800e1c2:	4b0a      	ldr	r3, [pc, #40]	; (800e1ec <dns_call_found+0x108>)
 800e1c4:	490a      	ldr	r1, [pc, #40]	; (800e1f0 <dns_call_found+0x10c>)
 800e1c6:	480b      	ldr	r0, [pc, #44]	; (800e1f4 <dns_call_found+0x110>)
 800e1c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e1cc:	f00e fcac 	bl	801cb28 <iprintf>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 800e1d0:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e1d4:	fb03 5504 	mla	r5, r3, r4, r5
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e7a2      	b.n	800e122 <dns_call_found+0x3e>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e1dc:	3201      	adds	r2, #1
 800e1de:	2a04      	cmp	r2, #4
 800e1e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800e1e4:	d1c1      	bne.n	800e16a <dns_call_found+0x86>
 800e1e6:	e7cf      	b.n	800e188 <dns_call_found+0xa4>
 800e1e8:	20006ad4 	.word	0x20006ad4
 800e1ec:	0802cc2f 	.word	0x0802cc2f
 800e1f0:	0802cc97 	.word	0x0802cc97
 800e1f4:	0802aecf 	.word	0x0802aecf
 800e1f8:	20006b1c 	.word	0x20006b1c

0800e1fc <dns_send>:
{
 800e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e200:	4c73      	ldr	r4, [pc, #460]	; (800e3d0 <dns_send+0x1d4>)
 800e202:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e206:	fb03 4300 	mla	r3, r3, r0, r4
{
 800e20a:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e20c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800e210:	2b02      	cmp	r3, #2
{
 800e212:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e214:	d906      	bls.n	800e224 <dns_send+0x28>
 800e216:	4b6f      	ldr	r3, [pc, #444]	; (800e3d4 <dns_send+0x1d8>)
 800e218:	496f      	ldr	r1, [pc, #444]	; (800e3d8 <dns_send+0x1dc>)
 800e21a:	4870      	ldr	r0, [pc, #448]	; (800e3dc <dns_send+0x1e0>)
 800e21c:	f240 22fa 	movw	r2, #762	; 0x2fa
 800e220:	f00e fc82 	bl	801cb28 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e224:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e228:	fb03 4306 	mla	r3, r3, r6, r4
 800e22c:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800e230:	2318      	movs	r3, #24
 800e232:	4353      	muls	r3, r2
 800e234:	18e2      	adds	r2, r4, r3
 800e236:	58e1      	ldr	r1, [r4, r3]
      && !entry->is_mdns
 800e238:	7d13      	ldrb	r3, [r2, #20]
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d11d      	bne.n	800e27a <dns_send+0x7e>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e23e:	b941      	cbnz	r1, 800e252 <dns_send+0x56>
 800e240:	6853      	ldr	r3, [r2, #4]
 800e242:	b933      	cbnz	r3, 800e252 <dns_send+0x56>
 800e244:	6891      	ldr	r1, [r2, #8]
 800e246:	b929      	cbnz	r1, 800e254 <dns_send+0x58>
 800e248:	68d3      	ldr	r3, [r2, #12]
 800e24a:	fab3 f383 	clz	r3, r3
      && !entry->is_mdns
 800e24e:	095b      	lsrs	r3, r3, #5
 800e250:	e000      	b.n	800e254 <dns_send+0x58>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e252:	2300      	movs	r3, #0
 800e254:	b1a3      	cbz	r3, 800e280 <dns_send+0x84>
      && !entry->is_mdns
 800e256:	f44f 7794 	mov.w	r7, #296	; 0x128
 800e25a:	fb07 4706 	mla	r7, r7, r6, r4
 800e25e:	f897 516d 	ldrb.w	r5, [r7, #365]	; 0x16d
 800e262:	b96d      	cbnz	r5, 800e280 <dns_send+0x84>
    dns_call_found(idx, NULL);
 800e264:	4629      	mov	r1, r5
 800e266:	4630      	mov	r0, r6
 800e268:	f7ff ff3c 	bl	800e0e4 <dns_call_found>
    return ERR_OK;
 800e26c:	462c      	mov	r4, r5
    entry->state = DNS_STATE_UNUSED;
 800e26e:	f887 5066 	strb.w	r5, [r7, #102]	; 0x66
}
 800e272:	4620      	mov	r0, r4
 800e274:	b007      	add	sp, #28
 800e276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      && !entry->is_mdns
 800e27a:	fab1 f381 	clz	r3, r1
 800e27e:	e7e6      	b.n	800e24e <dns_send+0x52>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800e280:	4f57      	ldr	r7, [pc, #348]	; (800e3e0 <dns_send+0x1e4>)
 800e282:	f44f 7894 	mov.w	r8, #296	; 0x128
 800e286:	fb08 f806 	mul.w	r8, r8, r6
 800e28a:	4447      	add	r7, r8
 800e28c:	4638      	mov	r0, r7
 800e28e:	f7f1 fff9 	bl	8000284 <strlen>
 800e292:	3012      	adds	r0, #18
 800e294:	b281      	uxth	r1, r0
 800e296:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e29a:	204a      	movs	r0, #74	; 0x4a
 800e29c:	f001 f8d8 	bl	800f450 <pbuf_alloc>
  if (p != NULL) {
 800e2a0:	4605      	mov	r5, r0
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	f000 8090 	beq.w	800e3c8 <dns_send+0x1cc>
    hdr.id = lwip_htons(entry->txid);
 800e2a8:	44a0      	add	r8, r4
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e2aa:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
 800e2ac:	f8b8 0064 	ldrh.w	r0, [r8, #100]	; 0x64
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e2b0:	9305      	str	r3, [sp, #20]
 800e2b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 800e2b6:	f7ff fef3 	bl	800e0a0 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 800e2ba:	2301      	movs	r3, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e2bc:	220c      	movs	r2, #12
    hdr.id = lwip_htons(entry->txid);
 800e2be:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
 800e2c2:	f88d 300e 	strb.w	r3, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e2c6:	eb0d 0102 	add.w	r1, sp, r2
    hdr.numquestions = PP_HTONS(1);
 800e2ca:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e2ce:	4628      	mov	r0, r5
    hdr.numquestions = PP_HTONS(1);
 800e2d0:	f8ad 3010 	strh.w	r3, [sp, #16]
    --hostname;
 800e2d4:	3f01      	subs	r7, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e2d6:	f001 fad7 	bl	800f888 <pbuf_take>
      if (query_idx + n + 1 > 0xFFFF) {
 800e2da:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    query_idx = SIZEOF_DNS_HDR;
 800e2de:	210c      	movs	r1, #12
      ++hostname;
 800e2e0:	f107 0901 	add.w	r9, r7, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e2e4:	464b      	mov	r3, r9
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	461f      	mov	r7, r3
 800e2ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2ee:	282e      	cmp	r0, #46	; 0x2e
 800e2f0:	d000      	beq.n	800e2f4 <dns_send+0xf8>
 800e2f2:	b968      	cbnz	r0, 800e310 <dns_send+0x114>
      if (query_idx + n + 1 > 0xFFFF) {
 800e2f4:	eb01 0802 	add.w	r8, r1, r2
      copy_len = (u16_t)(hostname - hostname_part);
 800e2f8:	eba7 0a09 	sub.w	sl, r7, r9
      if (query_idx + n + 1 > 0xFFFF) {
 800e2fc:	45d8      	cmp	r8, fp
      copy_len = (u16_t)(hostname - hostname_part);
 800e2fe:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 800e302:	dd08      	ble.n	800e316 <dns_send+0x11a>
  pbuf_free(p);
 800e304:	4628      	mov	r0, r5
 800e306:	f001 f83b 	bl	800f380 <pbuf_free>
  return ERR_VAL;
 800e30a:	f06f 0405 	mvn.w	r4, #5
 800e30e:	e7b0      	b.n	800e272 <dns_send+0x76>
        ++n;
 800e310:	3201      	adds	r2, #1
 800e312:	b2d2      	uxtb	r2, r2
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e314:	e7e8      	b.n	800e2e8 <dns_send+0xec>
      pbuf_put_at(p, query_idx, n);
 800e316:	4628      	mov	r0, r5
 800e318:	9101      	str	r1, [sp, #4]
 800e31a:	f001 fb85 	bl	800fa28 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800e31e:	9901      	ldr	r1, [sp, #4]
 800e320:	1c4b      	adds	r3, r1, #1
 800e322:	4652      	mov	r2, sl
 800e324:	4649      	mov	r1, r9
 800e326:	b29b      	uxth	r3, r3
 800e328:	4628      	mov	r0, r5
 800e32a:	f001 fb0b 	bl	800f944 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800e32e:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 800e332:	783a      	ldrb	r2, [r7, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 800e334:	f108 0101 	add.w	r1, r8, #1
 800e338:	b289      	uxth	r1, r1
    } while (*hostname != 0);
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d1d0      	bne.n	800e2e0 <dns_send+0xe4>
    pbuf_put_at(p, query_idx, 0);
 800e33e:	4628      	mov	r0, r5
 800e340:	f001 fb72 	bl	800fa28 <pbuf_put_at>
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 800e344:	f44f 7094 	mov.w	r0, #296	; 0x128
 800e348:	fb00 4606 	mla	r6, r0, r6, r4
    query_idx++;
 800e34c:	f108 0802 	add.w	r8, r8, #2
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 800e350:	f896 316c 	ldrb.w	r3, [r6, #364]	; 0x16c
 800e354:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800e358:	2b01      	cmp	r3, #1
 800e35a:	bf0c      	ite	eq
 800e35c:	f44f 53e0 	moveq.w	r3, #7168	; 0x1c00
 800e360:	f44f 7380 	movne.w	r3, #256	; 0x100
 800e364:	f8ad 3008 	strh.w	r3, [sp, #8]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800e368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e36c:	f8ad 300a 	strh.w	r3, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800e370:	2204      	movs	r2, #4
 800e372:	fa1f f388 	uxth.w	r3, r8
 800e376:	a902      	add	r1, sp, #8
 800e378:	4628      	mov	r0, r5
 800e37a:	f001 fae3 	bl	800f944 <pbuf_take_at>
    if (entry->is_mdns) {
 800e37e:	f896 316d 	ldrb.w	r3, [r6, #365]	; 0x16d
    pcb_idx = entry->pcb_idx;
 800e382:	f896 006b 	ldrb.w	r0, [r6, #107]	; 0x6b
    if (entry->is_mdns) {
 800e386:	b1bb      	cbz	r3, 800e3b8 <dns_send+0x1bc>
      if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 800e388:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
 800e38c:	f002 01fd 	and.w	r1, r2, #253	; 0xfd
      dst_port = DNS_MQUERY_PORT;
 800e390:	4a14      	ldr	r2, [pc, #80]	; (800e3e4 <dns_send+0x1e8>)
 800e392:	f102 0618 	add.w	r6, r2, #24
 800e396:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800e39a:	2901      	cmp	r1, #1
 800e39c:	bf18      	it	ne
 800e39e:	4632      	movne	r2, r6
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800e3a0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f8d4 0518 	ldr.w	r0, [r4, #1304]	; 0x518
 800e3aa:	f005 fedd 	bl	8014168 <udp_sendto>
 800e3ae:	4604      	mov	r4, r0
    pbuf_free(p);
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f000 ffe5 	bl	800f380 <pbuf_free>
 800e3b6:	e75c      	b.n	800e272 <dns_send+0x76>
      dst = &dns_servers[entry->server_idx];
 800e3b8:	f896 2067 	ldrb.w	r2, [r6, #103]	; 0x67
 800e3bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e3c0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
      dst_port = DNS_SERVER_PORT;
 800e3c4:	2335      	movs	r3, #53	; 0x35
 800e3c6:	e7eb      	b.n	800e3a0 <dns_send+0x1a4>
    err = ERR_MEM;
 800e3c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e3cc:	e751      	b.n	800e272 <dns_send+0x76>
 800e3ce:	bf00      	nop
 800e3d0:	20006ad4 	.word	0x20006ad4
 800e3d4:	0802cc2f 	.word	0x0802cc2f
 800e3d8:	0802cca8 	.word	0x0802cca8
 800e3dc:	0802aecf 	.word	0x0802aecf
 800e3e0:	20006b40 	.word	0x20006b40
 800e3e4:	0801fc6c 	.word	0x0801fc6c

0800e3e8 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e3e8:	2803      	cmp	r0, #3
{
 800e3ea:	b570      	push	{r4, r5, r6, lr}
 800e3ec:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e3ee:	d906      	bls.n	800e3fe <dns_check_entry+0x16>
 800e3f0:	4b3c      	ldr	r3, [pc, #240]	; (800e4e4 <dns_check_entry+0xfc>)
 800e3f2:	493d      	ldr	r1, [pc, #244]	; (800e4e8 <dns_check_entry+0x100>)
 800e3f4:	483d      	ldr	r0, [pc, #244]	; (800e4ec <dns_check_entry+0x104>)
 800e3f6:	f240 421c 	movw	r2, #1052	; 0x41c
 800e3fa:	f00e fb95 	bl	801cb28 <iprintf>

  switch (entry->state) {
 800e3fe:	4e3c      	ldr	r6, [pc, #240]	; (800e4f0 <dns_check_entry+0x108>)
 800e400:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e404:	fb03 6204 	mla	r2, r3, r4, r6
 800e408:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800e40c:	2a03      	cmp	r2, #3
 800e40e:	d85f      	bhi.n	800e4d0 <dns_check_entry+0xe8>
 800e410:	e8df f002 	tbb	[pc, r2]
 800e414:	54230250 	.word	0x54230250
  txid = (u16_t)DNS_RAND_TXID();
 800e418:	f00e fbcc 	bl	801cbb4 <rand>
 800e41c:	4b35      	ldr	r3, [pc, #212]	; (800e4f4 <dns_check_entry+0x10c>)
 800e41e:	b280      	uxth	r0, r0
 800e420:	2200      	movs	r2, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e422:	7f99      	ldrb	r1, [r3, #30]
 800e424:	2902      	cmp	r1, #2
 800e426:	d102      	bne.n	800e42e <dns_check_entry+0x46>
 800e428:	8b99      	ldrh	r1, [r3, #28]
 800e42a:	4281      	cmp	r1, r0
 800e42c:	d0f4      	beq.n	800e418 <dns_check_entry+0x30>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e42e:	3201      	adds	r2, #1
 800e430:	2a04      	cmp	r2, #4
 800e432:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800e436:	d1f4      	bne.n	800e422 <dns_check_entry+0x3a>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800e438:	f44f 7394 	mov.w	r3, #296	; 0x128
 800e43c:	fb03 6604 	mla	r6, r3, r4, r6
      entry->state = DNS_STATE_ASKING;
 800e440:	2302      	movs	r3, #2
 800e442:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
      entry->server_idx = 0;
      entry->tmr = 1;
 800e446:	2301      	movs	r3, #1
      entry->txid = dns_create_txid();
 800e448:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
      entry->tmr = 1;
 800e44c:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800e450:	4620      	mov	r0, r4
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 800e452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err = dns_send(i);
 800e456:	f7ff bed1 	b.w	800e1fc <dns_send>
      if (--entry->tmr == 0) {
 800e45a:	4363      	muls	r3, r4
 800e45c:	18f5      	adds	r5, r6, r3
 800e45e:	f895 2068 	ldrb.w	r2, [r5, #104]	; 0x68
 800e462:	3a01      	subs	r2, #1
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
 800e46a:	bb1a      	cbnz	r2, 800e4b4 <dns_check_entry+0xcc>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800e46c:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
 800e470:	3201      	adds	r2, #1
 800e472:	b2d2      	uxtb	r2, r2
 800e474:	2a04      	cmp	r2, #4
 800e476:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
 800e47a:	d11c      	bne.n	800e4b6 <dns_check_entry+0xce>
          if (dns_backupserver_available(entry)
 800e47c:	481d      	ldr	r0, [pc, #116]	; (800e4f4 <dns_check_entry+0x10c>)
 800e47e:	4418      	add	r0, r3
 800e480:	f7ff fe14 	bl	800e0ac <dns_backupserver_available>
 800e484:	b158      	cbz	r0, 800e49e <dns_check_entry+0xb6>
              && !entry->is_mdns
 800e486:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
 800e48a:	b943      	cbnz	r3, 800e49e <dns_check_entry+0xb6>
            entry->server_idx++;
 800e48c:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
 800e490:	3301      	adds	r3, #1
 800e492:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
            entry->tmr = 1;
 800e496:	2301      	movs	r3, #1
 800e498:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800e49c:	e7d8      	b.n	800e450 <dns_check_entry+0x68>
            dns_call_found(i, NULL);
 800e49e:	2100      	movs	r1, #0
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7ff fe1f 	bl	800e0e4 <dns_call_found>
        entry->state = DNS_STATE_UNUSED;
 800e4a6:	f44f 7094 	mov.w	r0, #296	; 0x128
 800e4aa:	fb00 6404 	mla	r4, r0, r4, r6
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
}
 800e4b4:	bd70      	pop	{r4, r5, r6, pc}
          entry->tmr = entry->retries;
 800e4b6:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
 800e4ba:	e7c9      	b.n	800e450 <dns_check_entry+0x68>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800e4bc:	fb03 6304 	mla	r3, r3, r4, r6
 800e4c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d0ef      	beq.n	800e4a6 <dns_check_entry+0xbe>
 800e4c6:	3a01      	subs	r2, #1
 800e4c8:	649a      	str	r2, [r3, #72]	; 0x48
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	d0eb      	beq.n	800e4a6 <dns_check_entry+0xbe>
 800e4ce:	e7f1      	b.n	800e4b4 <dns_check_entry+0xcc>
}
 800e4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800e4d4:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <dns_check_entry+0xfc>)
 800e4d6:	4908      	ldr	r1, [pc, #32]	; (800e4f8 <dns_check_entry+0x110>)
 800e4d8:	4804      	ldr	r0, [pc, #16]	; (800e4ec <dns_check_entry+0x104>)
 800e4da:	f240 425b 	movw	r2, #1115	; 0x45b
 800e4de:	f00e bb23 	b.w	801cb28 <iprintf>
 800e4e2:	bf00      	nop
 800e4e4:	0802cc2f 	.word	0x0802cc2f
 800e4e8:	0802ccc0 	.word	0x0802ccc0
 800e4ec:	0802aecf 	.word	0x0802aecf
 800e4f0:	20006ad4 	.word	0x20006ad4
 800e4f4:	20006b1c 	.word	0x20006b1c
 800e4f8:	0802ccda 	.word	0x0802ccda

0800e4fc <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 800e4fc:	2802      	cmp	r0, #2
{
 800e4fe:	b530      	push	{r4, r5, lr}
  if (numdns < DNS_MAX_SERVERS) {
 800e500:	d80b      	bhi.n	800e51a <dns_setserver+0x1e>
    if (dnsserver != NULL) {
 800e502:	4c07      	ldr	r4, [pc, #28]	; (800e520 <dns_setserver+0x24>)
 800e504:	2318      	movs	r3, #24
      dns_servers[numdns] = (*dnsserver);
 800e506:	fb03 4400 	mla	r4, r3, r0, r4
    if (dnsserver != NULL) {
 800e50a:	b139      	cbz	r1, 800e51c <dns_setserver+0x20>
      dns_servers[numdns] = (*dnsserver);
 800e50c:	460d      	mov	r5, r1
      dns_servers[numdns] = *IP_ADDR_ANY;
 800e50e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e512:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e516:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800e51a:	bd30      	pop	{r4, r5, pc}
      dns_servers[numdns] = *IP_ADDR_ANY;
 800e51c:	4d01      	ldr	r5, [pc, #4]	; (800e524 <dns_setserver+0x28>)
 800e51e:	e7f6      	b.n	800e50e <dns_setserver+0x12>
 800e520:	20006ad4 	.word	0x20006ad4
 800e524:	0801fc2c 	.word	0x0801fc2c

0800e528 <dns_init>:
{
 800e528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  DNS_SERVER_ADDRESS(&dnsserver);
 800e52a:	4809      	ldr	r0, [pc, #36]	; (800e550 <dns_init+0x28>)
 800e52c:	f7fc f9b8 	bl	800a8a0 <ipaddr_addr>
  dns_setserver(0, &dnsserver);
 800e530:	4669      	mov	r1, sp
  DNS_SERVER_ADDRESS(&dnsserver);
 800e532:	9000      	str	r0, [sp, #0]
 800e534:	2000      	movs	r0, #0
 800e536:	e9cd 0002 	strd	r0, r0, [sp, #8]
 800e53a:	f88d 0014 	strb.w	r0, [sp, #20]
 800e53e:	9001      	str	r0, [sp, #4]
 800e540:	f88d 0010 	strb.w	r0, [sp, #16]
  dns_setserver(0, &dnsserver);
 800e544:	f7ff ffda 	bl	800e4fc <dns_setserver>
}
 800e548:	b007      	add	sp, #28
 800e54a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e54e:	bf00      	nop
 800e550:	0802ccf9 	.word	0x0802ccf9

0800e554 <dns_tmr>:
{
 800e554:	b508      	push	{r3, lr}
dns_check_entries(void)
{
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
    dns_check_entry(i);
 800e556:	2000      	movs	r0, #0
 800e558:	f7ff ff46 	bl	800e3e8 <dns_check_entry>
 800e55c:	2001      	movs	r0, #1
 800e55e:	f7ff ff43 	bl	800e3e8 <dns_check_entry>
 800e562:	2002      	movs	r0, #2
 800e564:	f7ff ff40 	bl	800e3e8 <dns_check_entry>
}
 800e568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 800e56c:	2003      	movs	r0, #3
 800e56e:	f7ff bf3b 	b.w	800e3e8 <dns_check_entry>

0800e572 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e572:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800e574:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e576:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800e57a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800e57e:	d007      	beq.n	800e590 <lwip_standard_chksum+0x1e>
 800e580:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800e582:	bfc2      	ittt	gt
 800e584:	f810 3b01 	ldrbgt.w	r3, [r0], #1
 800e588:	f88d 3007 	strbgt.w	r3, [sp, #7]
    len--;
 800e58c:	f101 31ff 	addgt.w	r1, r1, #4294967295
  u32_t sum = 0;
 800e590:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800e592:	2901      	cmp	r1, #1
 800e594:	dc15      	bgt.n	800e5c2 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e596:	bf04      	itt	eq
 800e598:	7803      	ldrbeq	r3, [r0, #0]
 800e59a:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800e59e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e5a2:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e5a4:	b298      	uxth	r0, r3
 800e5a6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 800e5aa:	b298      	uxth	r0, r3
 800e5ac:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800e5b0:	b124      	cbz	r4, 800e5bc <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e5b2:	0203      	lsls	r3, r0, #8
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800e5ba:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800e5bc:	b280      	uxth	r0, r0
 800e5be:	b002      	add	sp, #8
 800e5c0:	bd10      	pop	{r4, pc}
    sum += *ps++;
 800e5c2:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 800e5c6:	3902      	subs	r1, #2
    sum += *ps++;
 800e5c8:	441a      	add	r2, r3
    len -= 2;
 800e5ca:	e7e2      	b.n	800e592 <lwip_standard_chksum+0x20>

0800e5cc <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460f      	mov	r7, r1
 800e5d4:	4616      	mov	r6, r2
 800e5d6:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;
 800e5d8:	f04f 0800 	mov.w	r8, #0

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800e5dc:	b9d5      	cbnz	r5, 800e614 <inet_cksum_pseudo_base+0x48>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800e5de:	f1b8 0f00 	cmp.w	r8, #0
 800e5e2:	d004      	beq.n	800e5ee <inet_cksum_pseudo_base+0x22>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e5e4:	0222      	lsls	r2, r4, #8
 800e5e6:	b292      	uxth	r2, r2
 800e5e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e5ec:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	f7ff fd56 	bl	800e0a0 <lwip_htons>
 800e5f4:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f7ff fd52 	bl	800e0a0 <lwip_htons>
 800e5fc:	4428      	add	r0, r5
 800e5fe:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800e600:	b2a0      	uxth	r0, r4
 800e602:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 800e606:	b2a0      	uxth	r0, r4
 800e608:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800e60c:	43c0      	mvns	r0, r0
}
 800e60e:	b280      	uxth	r0, r0
 800e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e614:	8969      	ldrh	r1, [r5, #10]
 800e616:	6868      	ldr	r0, [r5, #4]
 800e618:	f7ff ffab 	bl	800e572 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800e61c:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e61e:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
 800e620:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 800e622:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 800e624:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 800e628:	d506      	bpl.n	800e638 <inet_cksum_pseudo_base+0x6c>
      acc = SWAP_BYTES_IN_WORD(acc);
 800e62a:	0222      	lsls	r2, r4, #8
 800e62c:	b292      	uxth	r2, r2
 800e62e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e632:	f088 0801 	eor.w	r8, r8, #1
 800e636:	4314      	orrs	r4, r2
  for (q = p; q != NULL; q = q->next) {
 800e638:	682d      	ldr	r5, [r5, #0]
 800e63a:	e7cf      	b.n	800e5dc <inet_cksum_pseudo_base+0x10>

0800e63c <ip6_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip6_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                  const ip6_addr_t *src, const ip6_addr_t *dest)
{
 800e63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e63e:	9e05      	ldr	r6, [sp, #20]
 800e640:	1f1f      	subs	r7, r3, #4
 800e642:	3e04      	subs	r6, #4
 800e644:	330c      	adds	r3, #12
  u32_t acc = 0;
 800e646:	2500      	movs	r5, #0
  u32_t addr;
  u8_t addr_part;

  for (addr_part = 0; addr_part < 4; addr_part++) {
    addr = src->addr[addr_part];
 800e648:	f857 4f04 	ldr.w	r4, [r7, #4]!
    acc = (u32_t)(acc + (addr & 0xffffUL));
    acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
    addr = dest->addr[addr_part];
 800e64c:	f856 cf04 	ldr.w	ip, [r6, #4]!
    acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800e650:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    acc = (u32_t)(acc + (addr & 0xffffUL));
    acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800e654:	fa1e f484 	uxtah	r4, lr, r4
 800e658:	fa14 f48c 	uxtah	r4, r4, ip
 800e65c:	eb04 441c 	add.w	r4, r4, ip, lsr #16
  for (addr_part = 0; addr_part < 4; addr_part++) {
 800e660:	42bb      	cmp	r3, r7
    acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800e662:	4425      	add	r5, r4
  for (addr_part = 0; addr_part < 4; addr_part++) {
 800e664:	d1f0      	bne.n	800e648 <ip6_chksum_pseudo+0xc>
  }
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800e666:	b2ab      	uxth	r3, r5
 800e668:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 800e66c:	b29c      	uxth	r4, r3

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800e66e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
}
 800e672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800e676:	f7ff bfa9 	b.w	800e5cc <inet_cksum_pseudo_base>

0800e67a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e67a:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e67c:	2600      	movs	r6, #0
{
 800e67e:	4605      	mov	r5, r0

  acc = 0;
 800e680:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800e682:	b945      	cbnz	r5, 800e696 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800e684:	b126      	cbz	r6, 800e690 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e686:	0223      	lsls	r3, r4, #8
 800e688:	b29b      	uxth	r3, r3
 800e68a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e68e:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800e690:	43e0      	mvns	r0, r4
}
 800e692:	b280      	uxth	r0, r0
 800e694:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e696:	8969      	ldrh	r1, [r5, #10]
 800e698:	6868      	ldr	r0, [r5, #4]
 800e69a:	f7ff ff6a 	bl	800e572 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800e69e:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e6a0:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 800e6a2:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 800e6a4:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 800e6a6:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 800e6aa:	d506      	bpl.n	800e6ba <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800e6ac:	0223      	lsls	r3, r4, #8
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e6b4:	f086 0601 	eor.w	r6, r6, #1
 800e6b8:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800e6ba:	682d      	ldr	r5, [r5, #0]
 800e6bc:	e7e1      	b.n	800e682 <inet_chksum_pbuf+0x8>

0800e6be <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e6be:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e6c0:	f006 f8b8 	bl	8014834 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e6c4:	f000 f81c 	bl	800e700 <mem_init>
  memp_init();
 800e6c8:	f000 fac2 	bl	800ec50 <memp_init>
  pbuf_init();
  netif_init();
 800e6cc:	f000 fb7d 	bl	800edca <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e6d0:	f005 f9ac 	bl	8013a2c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e6d4:	f001 fa16 	bl	800fb04 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800e6d8:	f7ff ff26 	bl	800e528 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800e6dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800e6e0:	f005 b964 	b.w	80139ac <sys_timeouts_init>

0800e6e4 <ip_input>:
 * Don't call directly, pass to netif_add() and call netif->input().
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  if (p != NULL) {
 800e6e4:	b140      	cbz	r0, 800e6f8 <ip_input+0x14>
    if (IP_HDR_GET_VERSION(p->payload) == 6) {
 800e6e6:	6843      	ldr	r3, [r0, #4]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	091b      	lsrs	r3, r3, #4
 800e6ec:	2b06      	cmp	r3, #6
 800e6ee:	d101      	bne.n	800e6f4 <ip_input+0x10>
      return ip6_input(p, inp);
 800e6f0:	f7fd b806 	b.w	800b700 <ip6_input>
    }
    return ip4_input(p, inp);
 800e6f4:	f7fb bebe 	b.w	800a474 <ip4_input>
  }
  return ERR_VAL;
}
 800e6f8:	f06f 0005 	mvn.w	r0, #5
 800e6fc:	4770      	bx	lr
	...

0800e700 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e700:	4b10      	ldr	r3, [pc, #64]	; (800e744 <mem_init+0x44>)
 800e702:	4811      	ldr	r0, [pc, #68]	; (800e748 <mem_init+0x48>)
 800e704:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800e708:	f44f 5220 	mov.w	r2, #10240	; 0x2800
{
 800e70c:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 800e70e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
 800e710:	2200      	movs	r2, #0
 800e712:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800e714:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800e718:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
 800e71c:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 800e71e:	2101      	movs	r1, #1
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e720:	6003      	str	r3, [r0, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e722:	6042      	str	r2, [r0, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e724:	6083      	str	r3, [r0, #8]
  ram_end->used = 1;
 800e726:	7111      	strb	r1, [r2, #4]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e728:	300c      	adds	r0, #12
 800e72a:	f006 f88f 	bl	801484c <sys_mutex_new>
 800e72e:	b140      	cbz	r0, 800e742 <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800e730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e734:	4b05      	ldr	r3, [pc, #20]	; (800e74c <mem_init+0x4c>)
 800e736:	4906      	ldr	r1, [pc, #24]	; (800e750 <mem_init+0x50>)
 800e738:	4806      	ldr	r0, [pc, #24]	; (800e754 <mem_init+0x54>)
 800e73a:	f240 221f 	movw	r2, #543	; 0x21f
 800e73e:	f00e b9f3 	b.w	801cb28 <iprintf>
}
 800e742:	bd10      	pop	{r4, pc}
 800e744:	2000f4ff 	.word	0x2000f4ff
 800e748:	20007000 	.word	0x20007000
 800e74c:	0802cd08 	.word	0x0802cd08
 800e750:	0802cd70 	.word	0x0802cd70
 800e754:	0802aecf 	.word	0x0802aecf

0800e758 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e75a:	4604      	mov	r4, r0
 800e75c:	2800      	cmp	r0, #0
 800e75e:	f000 80b8 	beq.w	800e8d2 <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e762:	0783      	lsls	r3, r0, #30
 800e764:	d00c      	beq.n	800e780 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e766:	4b5b      	ldr	r3, [pc, #364]	; (800e8d4 <mem_free+0x17c>)
 800e768:	495b      	ldr	r1, [pc, #364]	; (800e8d8 <mem_free+0x180>)
 800e76a:	f240 2273 	movw	r2, #627	; 0x273
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e76e:	485b      	ldr	r0, [pc, #364]	; (800e8dc <mem_free+0x184>)
 800e770:	f00e f9da 	bl	801cb28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e774:	f006 f890 	bl	8014898 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800e778:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800e77c:	f006 b898 	b.w	80148b0 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e780:	4f57      	ldr	r7, [pc, #348]	; (800e8e0 <mem_free+0x188>)
 800e782:	683b      	ldr	r3, [r7, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e784:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e788:	42b3      	cmp	r3, r6
 800e78a:	463d      	mov	r5, r7
 800e78c:	d804      	bhi.n	800e798 <mem_free+0x40>
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	f100 030c 	add.w	r3, r0, #12
 800e794:	429a      	cmp	r2, r3
 800e796:	d204      	bcs.n	800e7a2 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e798:	4b4e      	ldr	r3, [pc, #312]	; (800e8d4 <mem_free+0x17c>)
 800e79a:	4952      	ldr	r1, [pc, #328]	; (800e8e4 <mem_free+0x18c>)
 800e79c:	f240 227f 	movw	r2, #639	; 0x27f
 800e7a0:	e7e5      	b.n	800e76e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 800e7a2:	f107 000c 	add.w	r0, r7, #12
 800e7a6:	f006 f85f 	bl	8014868 <sys_mutex_lock>
  if (!mem->used) {
 800e7aa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800e7ae:	b95b      	cbnz	r3, 800e7c8 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e7b0:	4b48      	ldr	r3, [pc, #288]	; (800e8d4 <mem_free+0x17c>)
 800e7b2:	494d      	ldr	r1, [pc, #308]	; (800e8e8 <mem_free+0x190>)
 800e7b4:	4849      	ldr	r0, [pc, #292]	; (800e8dc <mem_free+0x184>)
 800e7b6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e7ba:	f00e f9b5 	bl	801cb28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e7be:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 800e7c2:	f006 f856 	bl	8014872 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800e7c6:	e7d5      	b.n	800e774 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800e7c8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e7cc:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800e7d0:	d813      	bhi.n	800e7fa <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 800e7d2:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e7d6:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800e7da:	d80e      	bhi.n	800e7fa <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 800e7dc:	6839      	ldr	r1, [r7, #0]
 800e7de:	1a73      	subs	r3, r6, r1
 800e7e0:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	d002      	beq.n	800e7ec <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e7e6:	5a08      	ldrh	r0, [r1, r0]
 800e7e8:	4298      	cmp	r0, r3
 800e7ea:	d106      	bne.n	800e7fa <mem_free+0xa2>
 800e7ec:	6868      	ldr	r0, [r5, #4]
  return (struct mem *)(void *)&ram[ptr];
 800e7ee:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e7f0:	4282      	cmp	r2, r0
 800e7f2:	d00b      	beq.n	800e80c <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e7f4:	8852      	ldrh	r2, [r2, #2]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d008      	beq.n	800e80c <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e7fa:	4b36      	ldr	r3, [pc, #216]	; (800e8d4 <mem_free+0x17c>)
 800e7fc:	493b      	ldr	r1, [pc, #236]	; (800e8ec <mem_free+0x194>)
 800e7fe:	4837      	ldr	r0, [pc, #220]	; (800e8dc <mem_free+0x184>)
 800e800:	f240 2295 	movw	r2, #661	; 0x295
 800e804:	f00e f990 	bl	801cb28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e808:	4839      	ldr	r0, [pc, #228]	; (800e8f0 <mem_free+0x198>)
 800e80a:	e7da      	b.n	800e7c2 <mem_free+0x6a>
  mem->used = 0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800e812:	68ab      	ldr	r3, [r5, #8]
 800e814:	42b3      	cmp	r3, r6
    lfree = mem;
 800e816:	bf88      	it	hi
 800e818:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e81a:	428e      	cmp	r6, r1
 800e81c:	d206      	bcs.n	800e82c <mem_free+0xd4>
 800e81e:	4b2d      	ldr	r3, [pc, #180]	; (800e8d4 <mem_free+0x17c>)
 800e820:	4934      	ldr	r1, [pc, #208]	; (800e8f4 <mem_free+0x19c>)
 800e822:	482e      	ldr	r0, [pc, #184]	; (800e8dc <mem_free+0x184>)
 800e824:	f240 12df 	movw	r2, #479	; 0x1df
 800e828:	f00e f97e 	bl	801cb28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e82c:	686b      	ldr	r3, [r5, #4]
 800e82e:	429e      	cmp	r6, r3
 800e830:	d306      	bcc.n	800e840 <mem_free+0xe8>
 800e832:	4b28      	ldr	r3, [pc, #160]	; (800e8d4 <mem_free+0x17c>)
 800e834:	4930      	ldr	r1, [pc, #192]	; (800e8f8 <mem_free+0x1a0>)
 800e836:	4829      	ldr	r0, [pc, #164]	; (800e8dc <mem_free+0x184>)
 800e838:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e83c:	f00e f974 	bl	801cb28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e840:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800e844:	b133      	cbz	r3, 800e854 <mem_free+0xfc>
 800e846:	4b23      	ldr	r3, [pc, #140]	; (800e8d4 <mem_free+0x17c>)
 800e848:	492c      	ldr	r1, [pc, #176]	; (800e8fc <mem_free+0x1a4>)
 800e84a:	4824      	ldr	r0, [pc, #144]	; (800e8dc <mem_free+0x184>)
 800e84c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e850:	f00e f96a 	bl	801cb28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e854:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800e858:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e85c:	d906      	bls.n	800e86c <mem_free+0x114>
 800e85e:	4b1d      	ldr	r3, [pc, #116]	; (800e8d4 <mem_free+0x17c>)
 800e860:	4927      	ldr	r1, [pc, #156]	; (800e900 <mem_free+0x1a8>)
 800e862:	481e      	ldr	r0, [pc, #120]	; (800e8dc <mem_free+0x184>)
 800e864:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e868:	f00e f95e 	bl	801cb28 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800e872:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e874:	4296      	cmp	r6, r2
 800e876:	d012      	beq.n	800e89e <mem_free+0x146>
 800e878:	7910      	ldrb	r0, [r2, #4]
 800e87a:	b980      	cbnz	r0, 800e89e <mem_free+0x146>
 800e87c:	6868      	ldr	r0, [r5, #4]
 800e87e:	4282      	cmp	r2, r0
 800e880:	d00d      	beq.n	800e89e <mem_free+0x146>
    if (lfree == nmem) {
 800e882:	68a8      	ldr	r0, [r5, #8]
 800e884:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800e886:	5a5a      	ldrh	r2, [r3, r1]
 800e888:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e88c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800e88e:	bf08      	it	eq
 800e890:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e892:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e896:	bf1e      	ittt	ne
 800e898:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800e89a:	1af1      	subne	r1, r6, r3
 800e89c:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800e89e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800e8a2:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800e8a4:	428e      	cmp	r6, r1
 800e8a6:	d00f      	beq.n	800e8c8 <mem_free+0x170>
 800e8a8:	7908      	ldrb	r0, [r1, #4]
 800e8aa:	b968      	cbnz	r0, 800e8c8 <mem_free+0x170>
    if (lfree == mem) {
 800e8ac:	68a8      	ldr	r0, [r5, #8]
 800e8ae:	4286      	cmp	r6, r0
      lfree = pmem;
 800e8b0:	bf08      	it	eq
 800e8b2:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800e8b4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800e8b8:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e8ba:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800e8be:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e8c2:	bf1c      	itt	ne
 800e8c4:	185b      	addne	r3, r3, r1
 800e8c6:	805a      	strhne	r2, [r3, #2]
}
 800e8c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800e8cc:	4808      	ldr	r0, [pc, #32]	; (800e8f0 <mem_free+0x198>)
 800e8ce:	f005 bfd0 	b.w	8014872 <sys_mutex_unlock>
}
 800e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d4:	0802cd08 	.word	0x0802cd08
 800e8d8:	0802cd8b 	.word	0x0802cd8b
 800e8dc:	0802aecf 	.word	0x0802aecf
 800e8e0:	20007000 	.word	0x20007000
 800e8e4:	0802cdac 	.word	0x0802cdac
 800e8e8:	0802cdc5 	.word	0x0802cdc5
 800e8ec:	0802cdeb 	.word	0x0802cdeb
 800e8f0:	2000700c 	.word	0x2000700c
 800e8f4:	0802ce1d 	.word	0x0802ce1d
 800e8f8:	0802ce34 	.word	0x0802ce34
 800e8fc:	0802ce4e 	.word	0x0802ce4e
 800e900:	0802ce69 	.word	0x0802ce69

0800e904 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e908:	1ccc      	adds	r4, r1, #3
 800e90a:	f024 0403 	bic.w	r4, r4, #3
 800e90e:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800e910:	2c0b      	cmp	r4, #11
{
 800e912:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 800e914:	d904      	bls.n	800e920 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e916:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 800e91a:	d902      	bls.n	800e922 <mem_trim+0x1e>
    return NULL;
 800e91c:	2500      	movs	r5, #0
 800e91e:	e01a      	b.n	800e956 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 800e920:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e922:	42a1      	cmp	r1, r4
 800e924:	d8fa      	bhi.n	800e91c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e926:	4e47      	ldr	r6, [pc, #284]	; (800ea44 <mem_trim+0x140>)
 800e928:	6833      	ldr	r3, [r6, #0]
 800e92a:	42ab      	cmp	r3, r5
 800e92c:	d802      	bhi.n	800e934 <mem_trim+0x30>
 800e92e:	6873      	ldr	r3, [r6, #4]
 800e930:	42ab      	cmp	r3, r5
 800e932:	d806      	bhi.n	800e942 <mem_trim+0x3e>
 800e934:	4b44      	ldr	r3, [pc, #272]	; (800ea48 <mem_trim+0x144>)
 800e936:	4945      	ldr	r1, [pc, #276]	; (800ea4c <mem_trim+0x148>)
 800e938:	4845      	ldr	r0, [pc, #276]	; (800ea50 <mem_trim+0x14c>)
 800e93a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e93e:	f00e f8f3 	bl	801cb28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e942:	6833      	ldr	r3, [r6, #0]
 800e944:	42ab      	cmp	r3, r5
 800e946:	d802      	bhi.n	800e94e <mem_trim+0x4a>
 800e948:	6872      	ldr	r2, [r6, #4]
 800e94a:	42aa      	cmp	r2, r5
 800e94c:	d806      	bhi.n	800e95c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e94e:	f005 ffa3 	bl	8014898 <sys_arch_protect>
 800e952:	f005 ffad 	bl	80148b0 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800e956:	4628      	mov	r0, r5
 800e958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e95c:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e960:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800e964:	1aff      	subs	r7, r7, r3
 800e966:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e968:	f1a8 0808 	sub.w	r8, r8, #8
 800e96c:	eba8 0807 	sub.w	r8, r8, r7
 800e970:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e974:	45a0      	cmp	r8, r4
 800e976:	d207      	bcs.n	800e988 <mem_trim+0x84>
 800e978:	4b33      	ldr	r3, [pc, #204]	; (800ea48 <mem_trim+0x144>)
 800e97a:	4936      	ldr	r1, [pc, #216]	; (800ea54 <mem_trim+0x150>)
 800e97c:	4834      	ldr	r0, [pc, #208]	; (800ea50 <mem_trim+0x14c>)
 800e97e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e982:	f00e f8d1 	bl	801cb28 <iprintf>
  if (newsize > size) {
 800e986:	e7c9      	b.n	800e91c <mem_trim+0x18>
  if (newsize == size) {
 800e988:	d0e5      	beq.n	800e956 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 800e98a:	4833      	ldr	r0, [pc, #204]	; (800ea58 <mem_trim+0x154>)
 800e98c:	f005 ff6c 	bl	8014868 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800e990:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800e994:	f8d6 b000 	ldr.w	fp, [r6]
 800e998:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 800e99c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800e9a0:	bb3b      	cbnz	r3, 800e9f2 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e9a2:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 800e9a6:	d106      	bne.n	800e9b6 <mem_trim+0xb2>
 800e9a8:	4b27      	ldr	r3, [pc, #156]	; (800ea48 <mem_trim+0x144>)
 800e9aa:	492c      	ldr	r1, [pc, #176]	; (800ea5c <mem_trim+0x158>)
 800e9ac:	4828      	ldr	r0, [pc, #160]	; (800ea50 <mem_trim+0x14c>)
 800e9ae:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e9b2:	f00e f8b9 	bl	801cb28 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e9b6:	f107 0308 	add.w	r3, r7, #8
 800e9ba:	441c      	add	r4, r3
 800e9bc:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 800e9be:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 800e9c0:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e9c4:	b2a2      	uxth	r2, r4
    if (lfree == mem2) {
 800e9c6:	fa13 f484 	uxtah	r4, r3, r4
 800e9ca:	4551      	cmp	r1, sl
    mem2->used = 0;
 800e9cc:	f04f 0100 	mov.w	r1, #0
 800e9d0:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 800e9d2:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800e9d4:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 800e9d6:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e9da:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 800e9dc:	bf08      	it	eq
 800e9de:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e9e0:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 800e9e4:	d001      	beq.n	800e9ea <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e9e6:	440b      	add	r3, r1
 800e9e8:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800e9ea:	481b      	ldr	r0, [pc, #108]	; (800ea58 <mem_trim+0x154>)
 800e9ec:	f005 ff41 	bl	8014872 <sys_mutex_unlock>
  return rmem;
 800e9f0:	e7b1      	b.n	800e956 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e9f2:	f104 0314 	add.w	r3, r4, #20
 800e9f6:	4543      	cmp	r3, r8
 800e9f8:	d8f7      	bhi.n	800e9ea <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e9fa:	f107 0308 	add.w	r3, r7, #8
 800e9fe:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ea00:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ea04:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ea06:	d106      	bne.n	800ea16 <mem_trim+0x112>
 800ea08:	4b0f      	ldr	r3, [pc, #60]	; (800ea48 <mem_trim+0x144>)
 800ea0a:	4914      	ldr	r1, [pc, #80]	; (800ea5c <mem_trim+0x158>)
 800ea0c:	4810      	ldr	r0, [pc, #64]	; (800ea50 <mem_trim+0x14c>)
 800ea0e:	f240 3216 	movw	r2, #790	; 0x316
 800ea12:	f00e f889 	bl	801cb28 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800ea16:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 800ea18:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 800ea1a:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800ea1c:	4291      	cmp	r1, r2
    mem2->used = 0;
 800ea1e:	f04f 0100 	mov.w	r1, #0
 800ea22:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800ea24:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800ea28:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800ea2a:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800ea2c:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = mem2;
 800ea30:	bf88      	it	hi
 800ea32:	60b2      	strhi	r2, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ea34:	5b1a      	ldrh	r2, [r3, r4]
 800ea36:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ea3a:	bf1c      	itt	ne
 800ea3c:	189b      	addne	r3, r3, r2
 800ea3e:	805c      	strhne	r4, [r3, #2]
 800ea40:	e7d3      	b.n	800e9ea <mem_trim+0xe6>
 800ea42:	bf00      	nop
 800ea44:	20007000 	.word	0x20007000
 800ea48:	0802cd08 	.word	0x0802cd08
 800ea4c:	0802ce93 	.word	0x0802ce93
 800ea50:	0802aecf 	.word	0x0802aecf
 800ea54:	0802ceaa 	.word	0x0802ceaa
 800ea58:	2000700c 	.word	0x2000700c
 800ea5c:	0802ceca 	.word	0x0802ceca

0800ea60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ea64:	2800      	cmp	r0, #0
 800ea66:	f000 8088 	beq.w	800eb7a <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ea6a:	1cc5      	adds	r5, r0, #3
 800ea6c:	f025 0503 	bic.w	r5, r5, #3
 800ea70:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 800ea72:	2d0b      	cmp	r5, #11
 800ea74:	d904      	bls.n	800ea80 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ea76:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800ea7a:	d902      	bls.n	800ea82 <mem_malloc+0x22>
    return NULL;
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e07c      	b.n	800eb7a <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 800ea80:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ea82:	42a8      	cmp	r0, r5
 800ea84:	d8fa      	bhi.n	800ea7c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ea86:	4f42      	ldr	r7, [pc, #264]	; (800eb90 <mem_malloc+0x130>)
 800ea88:	f107 000c 	add.w	r0, r7, #12
 800ea8c:	f005 feec 	bl	8014868 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	68be      	ldr	r6, [r7, #8]
 800ea94:	1ab6      	subs	r6, r6, r2
 800ea96:	b2b6      	uxth	r6, r6
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ea98:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ea9c:	f06f 0c07 	mvn.w	ip, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800eaa0:	4286      	cmp	r6, r0
 800eaa2:	d303      	bcc.n	800eaac <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800eaa4:	483b      	ldr	r0, [pc, #236]	; (800eb94 <mem_malloc+0x134>)
 800eaa6:	f005 fee4 	bl	8014872 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800eaaa:	e7e7      	b.n	800ea7c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 800eaac:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 800eaae:	5b91      	ldrh	r1, [r2, r6]
 800eab0:	7923      	ldrb	r3, [r4, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d169      	bne.n	800eb8a <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800eab6:	ebac 0306 	sub.w	r3, ip, r6
 800eaba:	440b      	add	r3, r1
      if ((!mem->used) &&
 800eabc:	42ab      	cmp	r3, r5
 800eabe:	d364      	bcc.n	800eb8a <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800eac0:	f105 0214 	add.w	r2, r5, #20
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d35a      	bcc.n	800eb7e <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800eac8:	f105 0808 	add.w	r8, r5, #8
 800eacc:	44b0      	add	r8, r6
 800eace:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ead2:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800ead6:	d106      	bne.n	800eae6 <mem_malloc+0x86>
 800ead8:	4b2f      	ldr	r3, [pc, #188]	; (800eb98 <mem_malloc+0x138>)
 800eada:	4930      	ldr	r1, [pc, #192]	; (800eb9c <mem_malloc+0x13c>)
 800eadc:	4830      	ldr	r0, [pc, #192]	; (800eba0 <mem_malloc+0x140>)
 800eade:	f240 3287 	movw	r2, #903	; 0x387
 800eae2:	f00e f821 	bl	801cb28 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 800eaec:	2100      	movs	r1, #0
 800eaee:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800eaf0:	8821      	ldrh	r1, [r4, #0]
 800eaf2:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 800eaf6:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 800eaf8:	2201      	movs	r2, #1
          mem->next = ptr2;
 800eafa:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 800eafe:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800eb00:	f833 2008 	ldrh.w	r2, [r3, r8]
 800eb04:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800eb08:	d002      	beq.n	800eb10 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800eb0a:	4413      	add	r3, r2
 800eb0c:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	42a3      	cmp	r3, r4
 800eb14:	d110      	bne.n	800eb38 <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 800eb16:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 800eb1a:	791a      	ldrb	r2, [r3, #4]
 800eb1c:	b10a      	cbz	r2, 800eb22 <mem_malloc+0xc2>
 800eb1e:	4299      	cmp	r1, r3
 800eb20:	d130      	bne.n	800eb84 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800eb22:	4299      	cmp	r1, r3
          lfree = cur;
 800eb24:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800eb26:	d007      	beq.n	800eb38 <mem_malloc+0xd8>
 800eb28:	b132      	cbz	r2, 800eb38 <mem_malloc+0xd8>
 800eb2a:	4b1b      	ldr	r3, [pc, #108]	; (800eb98 <mem_malloc+0x138>)
 800eb2c:	491d      	ldr	r1, [pc, #116]	; (800eba4 <mem_malloc+0x144>)
 800eb2e:	481c      	ldr	r0, [pc, #112]	; (800eba0 <mem_malloc+0x140>)
 800eb30:	f240 32b5 	movw	r2, #949	; 0x3b5
 800eb34:	f00d fff8 	bl	801cb28 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 800eb38:	4816      	ldr	r0, [pc, #88]	; (800eb94 <mem_malloc+0x134>)
 800eb3a:	f005 fe9a 	bl	8014872 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800eb3e:	3508      	adds	r5, #8
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4425      	add	r5, r4
 800eb44:	42ab      	cmp	r3, r5
 800eb46:	d206      	bcs.n	800eb56 <mem_malloc+0xf6>
 800eb48:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <mem_malloc+0x138>)
 800eb4a:	4917      	ldr	r1, [pc, #92]	; (800eba8 <mem_malloc+0x148>)
 800eb4c:	4814      	ldr	r0, [pc, #80]	; (800eba0 <mem_malloc+0x140>)
 800eb4e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800eb52:	f00d ffe9 	bl	801cb28 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800eb56:	07a3      	lsls	r3, r4, #30
 800eb58:	d00d      	beq.n	800eb76 <mem_malloc+0x116>
 800eb5a:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <mem_malloc+0x138>)
 800eb5c:	4913      	ldr	r1, [pc, #76]	; (800ebac <mem_malloc+0x14c>)
 800eb5e:	4810      	ldr	r0, [pc, #64]	; (800eba0 <mem_malloc+0x140>)
 800eb60:	f240 32bb 	movw	r2, #955	; 0x3bb
 800eb64:	f00d ffe0 	bl	801cb28 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800eb68:	4b0b      	ldr	r3, [pc, #44]	; (800eb98 <mem_malloc+0x138>)
 800eb6a:	4911      	ldr	r1, [pc, #68]	; (800ebb0 <mem_malloc+0x150>)
 800eb6c:	480c      	ldr	r0, [pc, #48]	; (800eba0 <mem_malloc+0x140>)
 800eb6e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800eb72:	f00d ffd9 	bl	801cb28 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800eb76:	f104 0008 	add.w	r0, r4, #8
}
 800eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	7123      	strb	r3, [r4, #4]
 800eb82:	e7c5      	b.n	800eb10 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	4403      	add	r3, r0
 800eb88:	e7c7      	b.n	800eb1a <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 800eb8a:	460e      	mov	r6, r1
 800eb8c:	e788      	b.n	800eaa0 <mem_malloc+0x40>
 800eb8e:	bf00      	nop
 800eb90:	20007000 	.word	0x20007000
 800eb94:	2000700c 	.word	0x2000700c
 800eb98:	0802cd08 	.word	0x0802cd08
 800eb9c:	0802ceca 	.word	0x0802ceca
 800eba0:	0802aecf 	.word	0x0802aecf
 800eba4:	0802cedb 	.word	0x0802cedb
 800eba8:	0802cef4 	.word	0x0802cef4
 800ebac:	0802cf24 	.word	0x0802cf24
 800ebb0:	0802cf53 	.word	0x0802cf53

0800ebb4 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ebb8:	f005 fe6e 	bl	8014898 <sys_arch_protect>

  memp = *desc->tab;
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 800ebc0:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ebc2:	b15c      	cbz	r4, 800ebdc <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ebc4:	6822      	ldr	r2, [r4, #0]
 800ebc6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ebc8:	07a3      	lsls	r3, r4, #30
 800ebca:	d006      	beq.n	800ebda <do_memp_malloc_pool.isra.0+0x26>
 800ebcc:	4b05      	ldr	r3, [pc, #20]	; (800ebe4 <do_memp_malloc_pool.isra.0+0x30>)
 800ebce:	4906      	ldr	r1, [pc, #24]	; (800ebe8 <do_memp_malloc_pool.isra.0+0x34>)
 800ebd0:	4806      	ldr	r0, [pc, #24]	; (800ebec <do_memp_malloc_pool.isra.0+0x38>)
 800ebd2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ebd6:	f00d ffa7 	bl	801cb28 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ebda:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ebdc:	f005 fe68 	bl	80148b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	0802cf76 	.word	0x0802cf76
 800ebe8:	0802cfdf 	.word	0x0802cfdf
 800ebec:	0802aecf 	.word	0x0802aecf

0800ebf0 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800ebf0:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ebf2:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800ebf4:	4605      	mov	r5, r0
 800ebf6:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ebf8:	d006      	beq.n	800ec08 <do_memp_free_pool.isra.0+0x18>
 800ebfa:	4b08      	ldr	r3, [pc, #32]	; (800ec1c <do_memp_free_pool.isra.0+0x2c>)
 800ebfc:	4908      	ldr	r1, [pc, #32]	; (800ec20 <do_memp_free_pool.isra.0+0x30>)
 800ebfe:	4809      	ldr	r0, [pc, #36]	; (800ec24 <do_memp_free_pool.isra.0+0x34>)
 800ec00:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ec04:	f00d ff90 	bl	801cb28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800ec08:	f005 fe46 	bl	8014898 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ec12:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ec14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800ec18:	f005 be4a 	b.w	80148b0 <sys_arch_unprotect>
 800ec1c:	0802cf76 	.word	0x0802cf76
 800ec20:	0802d002 	.word	0x0802d002
 800ec24:	0802aecf 	.word	0x0802aecf

0800ec28 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ec28:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800ec2a:	6881      	ldr	r1, [r0, #8]
{
 800ec2c:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 800ec2e:	2200      	movs	r2, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ec30:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800ec32:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800ec34:	600a      	str	r2, [r1, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ec36:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800ec3a:	4294      	cmp	r4, r2
 800ec3c:	dc00      	bgt.n	800ec40 <memp_init_pool+0x18>
}
 800ec3e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800ec40:	680d      	ldr	r5, [r1, #0]
 800ec42:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ec44:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800ec46:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800ec48:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ec4a:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800ec4c:	e7f5      	b.n	800ec3a <memp_init_pool+0x12>
	...

0800ec50 <memp_init>:
{
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	4d05      	ldr	r5, [pc, #20]	; (800ec68 <memp_init+0x18>)
 800ec54:	2411      	movs	r4, #17
    memp_init_pool(memp_pools[i]);
 800ec56:	3c01      	subs	r4, #1
 800ec58:	f855 0b04 	ldr.w	r0, [r5], #4
 800ec5c:	b2a4      	uxth	r4, r4
 800ec5e:	f7ff ffe3 	bl	800ec28 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d1f7      	bne.n	800ec56 <memp_init+0x6>
}
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	0801fcb4 	.word	0x0801fcb4

0800ec6c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ec6c:	2810      	cmp	r0, #16
{
 800ec6e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ec70:	d807      	bhi.n	800ec82 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ec72:	4b08      	ldr	r3, [pc, #32]	; (800ec94 <memp_malloc+0x28>)
 800ec74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800ec78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ec7c:	3008      	adds	r0, #8
 800ec7e:	f7ff bf99 	b.w	800ebb4 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ec82:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <memp_malloc+0x2c>)
 800ec84:	4905      	ldr	r1, [pc, #20]	; (800ec9c <memp_malloc+0x30>)
 800ec86:	4806      	ldr	r0, [pc, #24]	; (800eca0 <memp_malloc+0x34>)
 800ec88:	f240 1257 	movw	r2, #343	; 0x157
 800ec8c:	f00d ff4c 	bl	801cb28 <iprintf>
}
 800ec90:	2000      	movs	r0, #0
 800ec92:	bd08      	pop	{r3, pc}
 800ec94:	0801fcb4 	.word	0x0801fcb4
 800ec98:	0802cf76 	.word	0x0802cf76
 800ec9c:	0802d034 	.word	0x0802d034
 800eca0:	0802aecf 	.word	0x0802aecf

0800eca4 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800eca4:	2810      	cmp	r0, #16
 800eca6:	d906      	bls.n	800ecb6 <memp_free+0x12>
 800eca8:	4b07      	ldr	r3, [pc, #28]	; (800ecc8 <memp_free+0x24>)
 800ecaa:	4908      	ldr	r1, [pc, #32]	; (800eccc <memp_free+0x28>)
 800ecac:	4808      	ldr	r0, [pc, #32]	; (800ecd0 <memp_free+0x2c>)
 800ecae:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ecb2:	f00d bf39 	b.w	801cb28 <iprintf>

  if (mem == NULL) {
 800ecb6:	b129      	cbz	r1, 800ecc4 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <memp_free+0x30>)
 800ecba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ecbe:	3008      	adds	r0, #8
 800ecc0:	f7ff bf96 	b.w	800ebf0 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	0802cf76 	.word	0x0802cf76
 800eccc:	0802d051 	.word	0x0802d051
 800ecd0:	0802aecf 	.word	0x0802aecf
 800ecd4:	0801fcb4 	.word	0x0801fcb4

0800ecd8 <netif_null_output_ip6>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800ecd8:	f06f 000b 	mvn.w	r0, #11
 800ecdc:	4770      	bx	lr

0800ecde <netif_do_ip_addr_changed>:
{
 800ecde:	b538      	push	{r3, r4, r5, lr}
 800ece0:	4604      	mov	r4, r0
 800ece2:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ece4:	f002 f94e 	bl	8010f84 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ece8:	4629      	mov	r1, r5
 800ecea:	4620      	mov	r0, r4
}
 800ecec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ecf0:	f005 bbfc 	b.w	80144ec <udp_netif_ip_addr_changed>

0800ecf4 <netif_issue_reports>:
{
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	b930      	cbnz	r0, 800ed0a <netif_issue_reports+0x16>
 800ecfc:	4b0f      	ldr	r3, [pc, #60]	; (800ed3c <netif_issue_reports+0x48>)
 800ecfe:	4910      	ldr	r1, [pc, #64]	; (800ed40 <netif_issue_reports+0x4c>)
 800ed00:	4810      	ldr	r0, [pc, #64]	; (800ed44 <netif_issue_reports+0x50>)
 800ed02:	f240 326d 	movw	r2, #877	; 0x36d
 800ed06:	f00d ff0f 	bl	801cb28 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed0a:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800ed0e:	f003 0205 	and.w	r2, r3, #5
 800ed12:	2a05      	cmp	r2, #5
 800ed14:	d110      	bne.n	800ed38 <netif_issue_reports+0x44>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed16:	07e9      	lsls	r1, r5, #31
 800ed18:	d507      	bpl.n	800ed2a <netif_issue_reports+0x36>
 800ed1a:	6862      	ldr	r2, [r4, #4]
 800ed1c:	b12a      	cbz	r2, 800ed2a <netif_issue_reports+0x36>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ed1e:	071a      	lsls	r2, r3, #28
 800ed20:	d503      	bpl.n	800ed2a <netif_issue_reports+0x36>
      etharp_gratuitous(netif);
 800ed22:	1d21      	adds	r1, r4, #4
 800ed24:	4620      	mov	r0, r4
 800ed26:	f7fb f8a1 	bl	8009e6c <etharp_request>
  if (report_type & NETIF_REPORT_TYPE_IPV6) {
 800ed2a:	07ab      	lsls	r3, r5, #30
 800ed2c:	d504      	bpl.n	800ed38 <netif_issue_reports+0x44>
    mld6_report_groups(netif);
 800ed2e:	4620      	mov	r0, r4
}
 800ed30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mld6_report_groups(netif);
 800ed34:	f7fd bd52 	b.w	800c7dc <mld6_report_groups>
}
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0802d06c 	.word	0x0802d06c
 800ed40:	0802d0d6 	.word	0x0802d0d6
 800ed44:	0802aecf 	.word	0x0802aecf

0800ed48 <netif_do_set_ipaddr>:
{
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	b086      	sub	sp, #24
 800ed4e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ed50:	460e      	mov	r6, r1
 800ed52:	b931      	cbnz	r1, 800ed62 <netif_do_set_ipaddr+0x1a>
 800ed54:	4b18      	ldr	r3, [pc, #96]	; (800edb8 <netif_do_set_ipaddr+0x70>)
 800ed56:	4919      	ldr	r1, [pc, #100]	; (800edbc <netif_do_set_ipaddr+0x74>)
 800ed58:	4819      	ldr	r0, [pc, #100]	; (800edc0 <netif_do_set_ipaddr+0x78>)
 800ed5a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ed5e:	f00d fee3 	bl	801cb28 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ed62:	686b      	ldr	r3, [r5, #4]
 800ed64:	6832      	ldr	r2, [r6, #0]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	f04f 0000 	mov.w	r0, #0
 800ed6c:	d01d      	beq.n	800edaa <netif_do_set_ipaddr+0x62>
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ed6e:	9200      	str	r2, [sp, #0]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ed70:	7e2a      	ldrb	r2, [r5, #24]
 800ed72:	7522      	strb	r2, [r4, #20]
 800ed74:	7e2a      	ldrb	r2, [r5, #24]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
 800ed76:	f88d 0014 	strb.w	r0, [sp, #20]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ed7a:	2a06      	cmp	r2, #6
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	d116      	bne.n	800edae <netif_do_set_ipaddr+0x66>
 800ed80:	68ab      	ldr	r3, [r5, #8]
 800ed82:	6063      	str	r3, [r4, #4]
 800ed84:	68eb      	ldr	r3, [r5, #12]
 800ed86:	60a3      	str	r3, [r4, #8]
 800ed88:	692b      	ldr	r3, [r5, #16]
 800ed8a:	60e3      	str	r3, [r4, #12]
 800ed8c:	7d2b      	ldrb	r3, [r5, #20]
 800ed8e:	7423      	strb	r3, [r4, #16]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ed90:	4669      	mov	r1, sp
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7ff ffa3 	bl	800ecde <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ed98:	6833      	ldr	r3, [r6, #0]
 800ed9a:	606b      	str	r3, [r5, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 800ed9c:	2300      	movs	r3, #0
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ed9e:	4628      	mov	r0, r5
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 800eda0:	762b      	strb	r3, [r5, #24]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800eda2:	2101      	movs	r1, #1
 800eda4:	f7ff ffa6 	bl	800ecf4 <netif_issue_reports>
    return 1; /* address changed */
 800eda8:	2001      	movs	r0, #1
}
 800edaa:	b006      	add	sp, #24
 800edac:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800edae:	e9c4 0002 	strd	r0, r0, [r4, #8]
 800edb2:	6060      	str	r0, [r4, #4]
 800edb4:	7420      	strb	r0, [r4, #16]
 800edb6:	e7eb      	b.n	800ed90 <netif_do_set_ipaddr+0x48>
 800edb8:	0802d06c 	.word	0x0802d06c
 800edbc:	0802b32b 	.word	0x0802b32b
 800edc0:	0802aecf 	.word	0x0802aecf

0800edc4 <netif_null_output_ip4>:
 800edc4:	f06f 000b 	mvn.w	r0, #11
 800edc8:	4770      	bx	lr

0800edca <netif_init>:
}
 800edca:	4770      	bx	lr

0800edcc <netif_set_addr>:
{
 800edcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800edce:	4f17      	ldr	r7, [pc, #92]	; (800ee2c <netif_set_addr+0x60>)
 800edd0:	2900      	cmp	r1, #0
 800edd2:	bf14      	ite	ne
 800edd4:	460d      	movne	r5, r1
 800edd6:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 800edd8:	2a00      	cmp	r2, #0
 800edda:	bf14      	ite	ne
 800eddc:	4616      	movne	r6, r2
 800edde:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	bf18      	it	ne
 800ede4:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 800ede6:	682b      	ldr	r3, [r5, #0]
{
 800ede8:	b087      	sub	sp, #28
 800edea:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
 800edec:	b9e3      	cbnz	r3, 800ee28 <netif_set_addr+0x5c>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800edee:	466a      	mov	r2, sp
 800edf0:	4629      	mov	r1, r5
 800edf2:	f7ff ffa9 	bl	800ed48 <netif_do_set_ipaddr>
 800edf6:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800edf8:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800edfa:	69e1      	ldr	r1, [r4, #28]
 800edfc:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800edfe:	bf1e      	ittt	ne
 800ee00:	61e2      	strne	r2, [r4, #28]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
 800ee02:	2200      	movne	r2, #0
 800ee04:	f884 2030 	strbne.w	r2, [r4, #48]	; 0x30
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ee08:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ee0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee0c:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ee0e:	bf1e      	ittt	ne
 800ee10:	6362      	strne	r2, [r4, #52]	; 0x34
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
 800ee12:	2200      	movne	r2, #0
 800ee14:	f884 2048 	strbne.w	r2, [r4, #72]	; 0x48
  if (!remove) {
 800ee18:	b923      	cbnz	r3, 800ee24 <netif_set_addr+0x58>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ee1a:	466a      	mov	r2, sp
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f7ff ff92 	bl	800ed48 <netif_do_set_ipaddr>
}
 800ee24:	b007      	add	sp, #28
 800ee26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800ee28:	2300      	movs	r3, #0
 800ee2a:	e7e5      	b.n	800edf8 <netif_set_addr+0x2c>
 800ee2c:	0801fc2c 	.word	0x0801fc2c

0800ee30 <netif_add>:
{
 800ee30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ee38:	460f      	mov	r7, r1
 800ee3a:	4690      	mov	r8, r2
 800ee3c:	4699      	mov	r9, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ee3e:	4604      	mov	r4, r0
 800ee40:	b948      	cbnz	r0, 800ee56 <netif_add+0x26>
 800ee42:	4b60      	ldr	r3, [pc, #384]	; (800efc4 <netif_add+0x194>)
 800ee44:	4960      	ldr	r1, [pc, #384]	; (800efc8 <netif_add+0x198>)
 800ee46:	4861      	ldr	r0, [pc, #388]	; (800efcc <netif_add+0x19c>)
 800ee48:	f240 1227 	movw	r2, #295	; 0x127
 800ee4c:	f00d fe6c 	bl	801cb28 <iprintf>
}
 800ee50:	4620      	mov	r0, r4
 800ee52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ee56:	f1ba 0f00 	cmp.w	sl, #0
 800ee5a:	d108      	bne.n	800ee6e <netif_add+0x3e>
 800ee5c:	4b59      	ldr	r3, [pc, #356]	; (800efc4 <netif_add+0x194>)
 800ee5e:	495c      	ldr	r1, [pc, #368]	; (800efd0 <netif_add+0x1a0>)
 800ee60:	485a      	ldr	r0, [pc, #360]	; (800efcc <netif_add+0x19c>)
 800ee62:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ee66:	f00d fe5f 	bl	801cb28 <iprintf>
    return NULL;
 800ee6a:	2400      	movs	r4, #0
 800ee6c:	e7f0      	b.n	800ee50 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ee6e:	4b59      	ldr	r3, [pc, #356]	; (800efd4 <netif_add+0x1a4>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ee70:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ee72:	2900      	cmp	r1, #0
 800ee74:	bf08      	it	eq
 800ee76:	461f      	moveq	r7, r3
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	bf08      	it	eq
 800ee7c:	4698      	moveq	r8, r3
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ee7e:	f1b9 0f00 	cmp.w	r9, #0
 800ee82:	bf08      	it	eq
 800ee84:	4699      	moveq	r9, r3
  netif->output = netif_null_output_ip4;
 800ee86:	4b54      	ldr	r3, [pc, #336]	; (800efd8 <netif_add+0x1a8>)
 800ee88:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ee8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee90:	e9c0 5503 	strd	r5, r5, [r0, #12]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ee94:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800ee98:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  ip_addr_set_zero_ip4(&netif->gw);
 800ee9c:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
 800eea0:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800eea4:	7505      	strb	r5, [r0, #20]
 800eea6:	7605      	strb	r5, [r0, #24]
  ip_addr_set_zero_ip4(&netif->netmask);
 800eea8:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 800eeac:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 800eeb0:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
 800eeb4:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800eeb8:	4606      	mov	r6, r0
 800eeba:	f100 0294 	add.w	r2, r0, #148	; 0x94
 800eebe:	f100 0398 	add.w	r3, r0, #152	; 0x98
 800eec2:	f100 0148 	add.w	r1, r0, #72	; 0x48
    ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
 800eec6:	2006      	movs	r0, #6
 800eec8:	f886 505c 	strb.w	r5, [r6, #92]	; 0x5c
 800eecc:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
 800eed0:	e9c6 5513 	strd	r5, r5, [r6, #76]	; 0x4c
 800eed4:	e9c6 5515 	strd	r5, r5, [r6, #84]	; 0x54
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
 800eed8:	f802 5b01 	strb.w	r5, [r2], #1
    netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
 800eedc:	3618      	adds	r6, #24
 800eede:	f843 5b04 	str.w	r5, [r3], #4
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800eee2:	428e      	cmp	r6, r1
    netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
 800eee4:	609d      	str	r5, [r3, #8]
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800eee6:	d1ef      	bne.n	800eec8 <netif_add+0x98>
  netif->output_ip6 = netif_null_output_ip6;
 800eee8:	4b3c      	ldr	r3, [pc, #240]	; (800efdc <netif_add+0x1ac>)
 800eeea:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  nd6_restart_netif(netif);
 800eeee:	4620      	mov	r0, r4
  netif->num = netif_num;
 800eef0:	4e3b      	ldr	r6, [pc, #236]	; (800efe0 <netif_add+0x1b0>)
  netif->mtu = 0;
 800eef2:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
  netif->flags = 0;
 800eef6:	f884 50db 	strb.w	r5, [r4, #219]	; 0xdb
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800eefa:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 800eefe:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
  netif->ip6_autoconfig_enabled = 0;
 800ef02:	f884 50df 	strb.w	r5, [r4, #223]	; 0xdf
  nd6_restart_netif(netif);
 800ef06:	f7ff f8c7 	bl	800e098 <nd6_restart_netif>
  netif->state = state;
 800ef0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef0c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  netif->num = netif_num;
 800ef10:	7833      	ldrb	r3, [r6, #0]
 800ef12:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
  netif->input = input;
 800ef16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef18:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ef1c:	4620      	mov	r0, r4
  netif->link_callback = NULL;
 800ef1e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  netif->mld_mac_filter = NULL;
 800ef22:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ef26:	464b      	mov	r3, r9
 800ef28:	4642      	mov	r2, r8
 800ef2a:	4639      	mov	r1, r7
 800ef2c:	f7ff ff4e 	bl	800edcc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800ef30:	4620      	mov	r0, r4
 800ef32:	47d0      	blx	sl
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d198      	bne.n	800ee6a <netif_add+0x3a>
  netif->mtu6 = netif->mtu;
 800ef38:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ef3c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800efe8 <netif_add+0x1b8>
  netif->mtu6 = netif->mtu;
 800ef40:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ef44:	4b1f      	ldr	r3, [pc, #124]	; (800efc4 <netif_add+0x194>)
 800ef46:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 800ef48:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ef4c:	f8d9 5000 	ldr.w	r5, [r9]
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ef50:	f8df b098 	ldr.w	fp, [pc, #152]	; 800efec <netif_add+0x1bc>
 800ef54:	f8df a074 	ldr.w	sl, [pc, #116]	; 800efcc <netif_add+0x19c>
      if (netif->num == 255) {
 800ef58:	2aff      	cmp	r2, #255	; 0xff
        netif->num = 0;
 800ef5a:	bf04      	itt	eq
 800ef5c:	2200      	moveq	r2, #0
 800ef5e:	f884 20de 	strbeq.w	r2, [r4, #222]	; 0xde
      num_netifs = 0;
 800ef62:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ef64:	b92d      	cbnz	r5, 800ef72 <netif_add+0x142>
  if (netif->num == 254) {
 800ef66:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 800ef6a:	2bfe      	cmp	r3, #254	; 0xfe
 800ef6c:	d120      	bne.n	800efb0 <netif_add+0x180>
    netif_num = 0;
 800ef6e:	462b      	mov	r3, r5
 800ef70:	e020      	b.n	800efb4 <netif_add+0x184>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ef72:	42a5      	cmp	r5, r4
 800ef74:	d106      	bne.n	800ef84 <netif_add+0x154>
 800ef76:	f240 128b 	movw	r2, #395	; 0x18b
 800ef7a:	4659      	mov	r1, fp
 800ef7c:	4650      	mov	r0, sl
 800ef7e:	f00d fdd3 	bl	801cb28 <iprintf>
 800ef82:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <netif_add+0x194>)
        num_netifs++;
 800ef84:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ef86:	2fff      	cmp	r7, #255	; 0xff
 800ef88:	dd06      	ble.n	800ef98 <netif_add+0x168>
 800ef8a:	4916      	ldr	r1, [pc, #88]	; (800efe4 <netif_add+0x1b4>)
 800ef8c:	f240 128d 	movw	r2, #397	; 0x18d
 800ef90:	4650      	mov	r0, sl
 800ef92:	f00d fdc9 	bl	801cb28 <iprintf>
 800ef96:	4b0b      	ldr	r3, [pc, #44]	; (800efc4 <netif_add+0x194>)
        if (netif2->num == netif->num) {
 800ef98:	f894 10de 	ldrb.w	r1, [r4, #222]	; 0xde
 800ef9c:	f895 20de 	ldrb.w	r2, [r5, #222]	; 0xde
 800efa0:	428a      	cmp	r2, r1
 800efa2:	d103      	bne.n	800efac <netif_add+0x17c>
          netif->num++;
 800efa4:	3201      	adds	r2, #1
 800efa6:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
    } while (netif2 != NULL);
 800efaa:	e7cd      	b.n	800ef48 <netif_add+0x118>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800efac:	682d      	ldr	r5, [r5, #0]
 800efae:	e7d9      	b.n	800ef64 <netif_add+0x134>
    netif_num = (u8_t)(netif->num + 1);
 800efb0:	3301      	adds	r3, #1
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800efb6:	f8d8 3000 	ldr.w	r3, [r8]
 800efba:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800efbc:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 800efc0:	e746      	b.n	800ee50 <netif_add+0x20>
 800efc2:	bf00      	nop
 800efc4:	0802d06c 	.word	0x0802d06c
 800efc8:	0802d18b 	.word	0x0802d18b
 800efcc:	0802aecf 	.word	0x0802aecf
 800efd0:	0802d1a4 	.word	0x0802d1a4
 800efd4:	0801fc2c 	.word	0x0801fc2c
 800efd8:	0800edc5 	.word	0x0800edc5
 800efdc:	0800ecd9 	.word	0x0800ecd9
 800efe0:	20007054 	.word	0x20007054
 800efe4:	0802d1da 	.word	0x0802d1da
 800efe8:	20016108 	.word	0x20016108
 800efec:	0802d1c6 	.word	0x0802d1c6

0800eff0 <netif_set_default>:
  netif_default = netif;
 800eff0:	4b01      	ldr	r3, [pc, #4]	; (800eff8 <netif_set_default+0x8>)
 800eff2:	6018      	str	r0, [r3, #0]
}
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	2001610c 	.word	0x2001610c

0800effc <netif_set_up>:
{
 800effc:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800effe:	4604      	mov	r4, r0
 800f000:	b940      	cbnz	r0, 800f014 <netif_set_up+0x18>
}
 800f002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <netif_set_up+0x3c>)
 800f008:	490c      	ldr	r1, [pc, #48]	; (800f03c <netif_set_up+0x40>)
 800f00a:	480d      	ldr	r0, [pc, #52]	; (800f040 <netif_set_up+0x44>)
 800f00c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f010:	f00d bd8a 	b.w	801cb28 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f014:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800f018:	07da      	lsls	r2, r3, #31
 800f01a:	d40b      	bmi.n	800f034 <netif_set_up+0x38>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f01c:	f043 0301 	orr.w	r3, r3, #1
 800f020:	f880 30db 	strb.w	r3, [r0, #219]	; 0xdb
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f024:	2103      	movs	r1, #3
 800f026:	f7ff fe65 	bl	800ecf4 <netif_issue_reports>
    nd6_restart_netif(netif);
 800f02a:	4620      	mov	r0, r4
}
 800f02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nd6_restart_netif(netif);
 800f030:	f7ff b832 	b.w	800e098 <nd6_restart_netif>
}
 800f034:	bd10      	pop	{r4, pc}
 800f036:	bf00      	nop
 800f038:	0802d06c 	.word	0x0802d06c
 800f03c:	0802d208 	.word	0x0802d208
 800f040:	0802aecf 	.word	0x0802aecf

0800f044 <netif_set_down>:
{
 800f044:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f046:	4604      	mov	r4, r0
 800f048:	b940      	cbnz	r0, 800f05c <netif_set_down+0x18>
}
 800f04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f04e:	4b0c      	ldr	r3, [pc, #48]	; (800f080 <netif_set_down+0x3c>)
 800f050:	490c      	ldr	r1, [pc, #48]	; (800f084 <netif_set_down+0x40>)
 800f052:	480d      	ldr	r0, [pc, #52]	; (800f088 <netif_set_down+0x44>)
 800f054:	f240 329b 	movw	r2, #923	; 0x39b
 800f058:	f00d bd66 	b.w	801cb28 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800f05c:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800f060:	07da      	lsls	r2, r3, #31
 800f062:	d50c      	bpl.n	800f07e <netif_set_down+0x3a>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f064:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f068:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f06a:	f880 20db 	strb.w	r2, [r0, #219]	; 0xdb
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f06e:	d501      	bpl.n	800f074 <netif_set_down+0x30>
      etharp_cleanup_netif(netif);
 800f070:	f7fa fe3e 	bl	8009cf0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
 800f074:	4620      	mov	r0, r4
}
 800f076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nd6_cleanup_netif(netif);
 800f07a:	f7fe bf9f 	b.w	800dfbc <nd6_cleanup_netif>
}
 800f07e:	bd10      	pop	{r4, pc}
 800f080:	0802d06c 	.word	0x0802d06c
 800f084:	0802d224 	.word	0x0802d224
 800f088:	0802aecf 	.word	0x0802aecf

0800f08c <netif_set_link_callback>:
  if (netif) {
 800f08c:	b108      	cbz	r0, 800f092 <netif_set_link_callback+0x6>
    netif->link_callback = link_callback;
 800f08e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
 800f092:	4770      	bx	lr

0800f094 <netif_ip6_addr_set_state>:
{
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	460d      	mov	r5, r1
 800f09a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f09c:	4604      	mov	r4, r0
 800f09e:	b930      	cbnz	r0, 800f0ae <netif_ip6_addr_set_state+0x1a>
 800f0a0:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <netif_ip6_addr_set_state+0x84>)
 800f0a2:	491e      	ldr	r1, [pc, #120]	; (800f11c <netif_ip6_addr_set_state+0x88>)
 800f0a4:	481e      	ldr	r0, [pc, #120]	; (800f120 <netif_ip6_addr_set_state+0x8c>)
 800f0a6:	f240 5275 	movw	r2, #1397	; 0x575
 800f0aa:	f00d fd3d 	bl	801cb28 <iprintf>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 800f0ae:	2d02      	cmp	r5, #2
 800f0b0:	dd06      	ble.n	800f0c0 <netif_ip6_addr_set_state+0x2c>
 800f0b2:	4b19      	ldr	r3, [pc, #100]	; (800f118 <netif_ip6_addr_set_state+0x84>)
 800f0b4:	491b      	ldr	r1, [pc, #108]	; (800f124 <netif_ip6_addr_set_state+0x90>)
 800f0b6:	481a      	ldr	r0, [pc, #104]	; (800f120 <netif_ip6_addr_set_state+0x8c>)
 800f0b8:	f240 5276 	movw	r2, #1398	; 0x576
 800f0bc:	f00d fd34 	bl	801cb28 <iprintf>
  old_state = netif_ip6_addr_state(netif, addr_idx);
 800f0c0:	eb04 0905 	add.w	r9, r4, r5
 800f0c4:	f899 7094 	ldrb.w	r7, [r9, #148]	; 0x94
  if (old_state != state) {
 800f0c8:	42b7      	cmp	r7, r6
 800f0ca:	d023      	beq.n	800f114 <netif_ip6_addr_set_state+0x80>
    if (netif->flags & NETIF_FLAG_MLD6) {
 800f0cc:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800f0d0:	065b      	lsls	r3, r3, #25
    u8_t old_valid = old_state & IP6_ADDR_VALID;
 800f0d2:	f007 0710 	and.w	r7, r7, #16
    u8_t new_valid = state & IP6_ADDR_VALID;
 800f0d6:	f006 0810 	and.w	r8, r6, #16
    if (netif->flags & NETIF_FLAG_MLD6) {
 800f0da:	d504      	bpl.n	800f0e6 <netif_ip6_addr_set_state+0x52>
      nd6_adjust_mld_membership(netif, addr_idx, state);
 800f0dc:	4632      	mov	r2, r6
 800f0de:	4629      	mov	r1, r5
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7fe ff9f 	bl	800e024 <nd6_adjust_mld_membership>
    if (old_valid && !new_valid) {
 800f0e6:	b14f      	cbz	r7, 800f0fc <netif_ip6_addr_set_state+0x68>
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	d106      	bne.n	800f0fc <netif_ip6_addr_set_state+0x68>
      netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
 800f0ee:	2018      	movs	r0, #24
 800f0f0:	fb00 4005 	mla	r0, r0, r5, r4
 800f0f4:	4641      	mov	r1, r8
 800f0f6:	304c      	adds	r0, #76	; 0x4c
 800f0f8:	f7ff fdf1 	bl	800ecde <netif_do_ip_addr_changed>
    netif->ip6_addr_state[addr_idx] = state;
 800f0fc:	f889 6094 	strb.w	r6, [r9, #148]	; 0x94
    if (!old_valid && new_valid) {
 800f100:	b947      	cbnz	r7, 800f114 <netif_ip6_addr_set_state+0x80>
 800f102:	f1b8 0f00 	cmp.w	r8, #0
 800f106:	d005      	beq.n	800f114 <netif_ip6_addr_set_state+0x80>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 800f108:	4620      	mov	r0, r4
 800f10a:	2102      	movs	r1, #2
}
 800f10c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 800f110:	f7ff bdf0 	b.w	800ecf4 <netif_issue_reports>
}
 800f114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f118:	0802d06c 	.word	0x0802d06c
 800f11c:	0802c112 	.word	0x0802c112
 800f120:	0802aecf 	.word	0x0802aecf
 800f124:	0802d286 	.word	0x0802d286

0800f128 <netif_get_ip6_addr_match>:
{
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 800f12c:	4604      	mov	r4, r0
 800f12e:	b930      	cbnz	r0, 800f13e <netif_get_ip6_addr_match+0x16>
 800f130:	4b1b      	ldr	r3, [pc, #108]	; (800f1a0 <netif_get_ip6_addr_match+0x78>)
 800f132:	491c      	ldr	r1, [pc, #112]	; (800f1a4 <netif_get_ip6_addr_match+0x7c>)
 800f134:	481c      	ldr	r0, [pc, #112]	; (800f1a8 <netif_get_ip6_addr_match+0x80>)
 800f136:	f240 52be 	movw	r2, #1470	; 0x5be
 800f13a:	f00d fcf5 	bl	801cb28 <iprintf>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 800f13e:	b935      	cbnz	r5, 800f14e <netif_get_ip6_addr_match+0x26>
 800f140:	4b17      	ldr	r3, [pc, #92]	; (800f1a0 <netif_get_ip6_addr_match+0x78>)
 800f142:	491a      	ldr	r1, [pc, #104]	; (800f1ac <netif_get_ip6_addr_match+0x84>)
 800f144:	4818      	ldr	r0, [pc, #96]	; (800f1a8 <netif_get_ip6_addr_match+0x80>)
 800f146:	f240 52bf 	movw	r2, #1471	; 0x5bf
 800f14a:	f00d fced 	bl	801cb28 <iprintf>
  if (ip6_addr_has_zone(ip6addr) && !ip6_addr_test_zone(ip6addr, netif)) {
 800f14e:	7c2a      	ldrb	r2, [r5, #16]
 800f150:	b12a      	cbz	r2, 800f15e <netif_get_ip6_addr_match+0x36>
 800f152:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 800f156:	3301      	adds	r3, #1
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d11d      	bne.n	800f19a <netif_get_ip6_addr_match+0x72>
 800f15e:	f104 0294 	add.w	r2, r4, #148	; 0x94
 800f162:	4623      	mov	r3, r4
{
 800f164:	2000      	movs	r0, #0
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 800f166:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f16a:	b179      	cbz	r1, 800f18c <netif_get_ip6_addr_match+0x64>
 800f16c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f16e:	6829      	ldr	r1, [r5, #0]
 800f170:	428c      	cmp	r4, r1
 800f172:	d10b      	bne.n	800f18c <netif_get_ip6_addr_match+0x64>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 800f174:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800f176:	6869      	ldr	r1, [r5, #4]
 800f178:	428c      	cmp	r4, r1
 800f17a:	d107      	bne.n	800f18c <netif_get_ip6_addr_match+0x64>
 800f17c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800f17e:	68a9      	ldr	r1, [r5, #8]
 800f180:	428c      	cmp	r4, r1
 800f182:	d103      	bne.n	800f18c <netif_get_ip6_addr_match+0x64>
 800f184:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800f186:	68e9      	ldr	r1, [r5, #12]
 800f188:	428c      	cmp	r4, r1
 800f18a:	d008      	beq.n	800f19e <netif_get_ip6_addr_match+0x76>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 800f18c:	3001      	adds	r0, #1
 800f18e:	b2c1      	uxtb	r1, r0
 800f190:	2903      	cmp	r1, #3
 800f192:	b240      	sxtb	r0, r0
 800f194:	f103 0318 	add.w	r3, r3, #24
 800f198:	d1e5      	bne.n	800f166 <netif_get_ip6_addr_match+0x3e>
    return -1; /* wrong zone, no match */
 800f19a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	0802d06c 	.word	0x0802d06c
 800f1a4:	0802d2d8 	.word	0x0802d2d8
 800f1a8:	0802aecf 	.word	0x0802aecf
 800f1ac:	0802d300 	.word	0x0802d300

0800f1b0 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	b158      	cbz	r0, 800f1cc <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800f1b4:	4a06      	ldr	r2, [pc, #24]	; (800f1d0 <netif_get_by_index+0x20>)
 800f1b6:	6810      	ldr	r0, [r2, #0]
 800f1b8:	b900      	cbnz	r0, 800f1bc <netif_get_by_index+0xc>
 800f1ba:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800f1bc:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
 800f1c0:	3201      	adds	r2, #1
 800f1c2:	b2d2      	uxtb	r2, r2
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d001      	beq.n	800f1cc <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800f1c8:	6800      	ldr	r0, [r0, #0]
 800f1ca:	e7f5      	b.n	800f1b8 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	20016108 	.word	0x20016108

0800f1d4 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800f1d4:	b510      	push	{r4, lr}
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	b908      	cbnz	r0, 800f1de <netif_find+0xa>
    return NULL;
 800f1da:	2000      	movs	r0, #0
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
}
 800f1dc:	bd10      	pop	{r4, pc}
  num = (u8_t)atoi(&name[2]);
 800f1de:	3002      	adds	r0, #2
 800f1e0:	f00c fc6a 	bl	801bab8 <atoi>
  NETIF_FOREACH(netif) {
 800f1e4:	4a0a      	ldr	r2, [pc, #40]	; (800f210 <netif_find+0x3c>)
  num = (u8_t)atoi(&name[2]);
 800f1e6:	b2c3      	uxtb	r3, r0
  NETIF_FOREACH(netif) {
 800f1e8:	6810      	ldr	r0, [r2, #0]
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d0f5      	beq.n	800f1da <netif_find+0x6>
    if (num == netif->num &&
 800f1ee:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d109      	bne.n	800f20a <netif_find+0x36>
 800f1f6:	7821      	ldrb	r1, [r4, #0]
 800f1f8:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 800f1fc:	4291      	cmp	r1, r2
 800f1fe:	d104      	bne.n	800f20a <netif_find+0x36>
        name[0] == netif->name[0] &&
 800f200:	7861      	ldrb	r1, [r4, #1]
 800f202:	f890 20dd 	ldrb.w	r2, [r0, #221]	; 0xdd
 800f206:	4291      	cmp	r1, r2
 800f208:	d0e8      	beq.n	800f1dc <netif_find+0x8>
  NETIF_FOREACH(netif) {
 800f20a:	6800      	ldr	r0, [r0, #0]
 800f20c:	e7ed      	b.n	800f1ea <netif_find+0x16>
 800f20e:	bf00      	nop
 800f210:	20016108 	.word	0x20016108

0800f214 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f214:	b110      	cbz	r0, 800f21c <pbuf_skip_const+0x8>
 800f216:	8943      	ldrh	r3, [r0, #10]
 800f218:	428b      	cmp	r3, r1
 800f21a:	d902      	bls.n	800f222 <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 800f21c:	b102      	cbz	r2, 800f220 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 800f21e:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800f220:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 800f222:	1ac9      	subs	r1, r1, r3
    q = q->next;
 800f224:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800f226:	b289      	uxth	r1, r1
    q = q->next;
 800f228:	e7f4      	b.n	800f214 <pbuf_skip_const>
	...

0800f22c <pbuf_add_header_impl>:
{
 800f22c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f22e:	b968      	cbnz	r0, 800f24c <pbuf_add_header_impl+0x20>
 800f230:	4b14      	ldr	r3, [pc, #80]	; (800f284 <pbuf_add_header_impl+0x58>)
 800f232:	4915      	ldr	r1, [pc, #84]	; (800f288 <pbuf_add_header_impl+0x5c>)
 800f234:	4815      	ldr	r0, [pc, #84]	; (800f28c <pbuf_add_header_impl+0x60>)
 800f236:	f240 12df 	movw	r2, #479	; 0x1df
 800f23a:	f00d fc75 	bl	801cb28 <iprintf>
    return 1;
 800f23e:	2001      	movs	r0, #1
 800f240:	e01f      	b.n	800f282 <pbuf_add_header_impl+0x56>
    if (force) {
 800f242:	2a00      	cmp	r2, #0
 800f244:	d0fb      	beq.n	800f23e <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800f246:	6842      	ldr	r2, [r0, #4]
 800f248:	1a51      	subs	r1, r2, r1
 800f24a:	e014      	b.n	800f276 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f24c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f250:	d2f5      	bcs.n	800f23e <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800f252:	b1a9      	cbz	r1, 800f280 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f254:	8903      	ldrh	r3, [r0, #8]
 800f256:	fa13 f381 	uxtah	r3, r3, r1
  increment_magnitude = (u16_t)header_size_increment;
 800f25a:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	429c      	cmp	r4, r3
 800f260:	d8ed      	bhi.n	800f23e <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f262:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800f266:	2d00      	cmp	r5, #0
 800f268:	daeb      	bge.n	800f242 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800f26a:	6842      	ldr	r2, [r0, #4]
 800f26c:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f26e:	f100 0210 	add.w	r2, r0, #16
 800f272:	4291      	cmp	r1, r2
 800f274:	d3e3      	bcc.n	800f23e <pbuf_add_header_impl+0x12>
  p->len = (u16_t)(p->len + increment_magnitude);
 800f276:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800f278:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f27a:	4414      	add	r4, r2
 800f27c:	8144      	strh	r4, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f27e:	8103      	strh	r3, [r0, #8]
  return 0;
 800f280:	2000      	movs	r0, #0
}
 800f282:	bd38      	pop	{r3, r4, r5, pc}
 800f284:	0802d3a8 	.word	0x0802d3a8
 800f288:	0802d4b3 	.word	0x0802d4b3
 800f28c:	0802aecf 	.word	0x0802aecf

0800f290 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f290:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800f294:	2b01      	cmp	r3, #1
{
 800f296:	b570      	push	{r4, r5, r6, lr}
 800f298:	4606      	mov	r6, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f29e:	d006      	beq.n	800f2ae <pbuf_alloc_reference+0x1e>
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <pbuf_alloc_reference+0x3c>)
 800f2a2:	490b      	ldr	r1, [pc, #44]	; (800f2d0 <pbuf_alloc_reference+0x40>)
 800f2a4:	480b      	ldr	r0, [pc, #44]	; (800f2d4 <pbuf_alloc_reference+0x44>)
 800f2a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f2aa:	f00d fc3d 	bl	801cb28 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f2ae:	200f      	movs	r0, #15
 800f2b0:	f7ff fcdc 	bl	800ec6c <memp_malloc>
  if (p == NULL) {
 800f2b4:	b140      	cbz	r0, 800f2c8 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800f2b6:	2300      	movs	r3, #0
  p->payload = payload;
 800f2b8:	e9c0 3600 	strd	r3, r6, [r0]
  p->flags = flags;
 800f2bc:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800f2be:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800f2c0:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800f2c2:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800f2c4:	7304      	strb	r4, [r0, #12]
  p->ref = 1;
 800f2c6:	81c3      	strh	r3, [r0, #14]
}
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0802d3a8 	.word	0x0802d3a8
 800f2d0:	0802d411 	.word	0x0802d411
 800f2d4:	0802aecf 	.word	0x0802aecf

0800f2d8 <pbuf_alloced_custom>:
{
 800f2d8:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f2da:	3003      	adds	r0, #3
 800f2dc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800f2e0:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f2e2:	f020 0003 	bic.w	r0, r0, #3
 800f2e6:	180e      	adds	r6, r1, r0
 800f2e8:	42ae      	cmp	r6, r5
 800f2ea:	d80d      	bhi.n	800f308 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800f2ec:	b104      	cbz	r4, 800f2f0 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f2ee:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f2f0:	4618      	mov	r0, r3
  p->next = NULL;
 800f2f2:	2300      	movs	r3, #0
  p->payload = payload;
 800f2f4:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800f2fc:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800f2fe:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800f300:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800f302:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800f304:	81c3      	strh	r3, [r0, #14]
}
 800f306:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800f308:	2000      	movs	r0, #0
 800f30a:	e7fc      	b.n	800f306 <pbuf_alloced_custom+0x2e>

0800f30c <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f30c:	2200      	movs	r2, #0
 800f30e:	f7ff bf8d 	b.w	800f22c <pbuf_add_header_impl>

0800f312 <pbuf_add_header_force>:
  return pbuf_add_header_impl(p, header_size_increment, 1);
 800f312:	2201      	movs	r2, #1
 800f314:	f7ff bf8a 	b.w	800f22c <pbuf_add_header_impl>

0800f318 <pbuf_remove_header>:
{
 800f318:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f31a:	b990      	cbnz	r0, 800f342 <pbuf_remove_header+0x2a>
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <pbuf_remove_header+0x48>)
 800f31e:	4911      	ldr	r1, [pc, #68]	; (800f364 <pbuf_remove_header+0x4c>)
 800f320:	f240 224b 	movw	r2, #587	; 0x24b
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f324:	4810      	ldr	r0, [pc, #64]	; (800f368 <pbuf_remove_header+0x50>)
 800f326:	f00d fbff 	bl	801cb28 <iprintf>
    return 1;
 800f32a:	2001      	movs	r0, #1
 800f32c:	e008      	b.n	800f340 <pbuf_remove_header+0x28>
  p->len = (u16_t)(p->len - increment_magnitude);
 800f32e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f330:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800f332:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f334:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f336:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f338:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f33a:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f33c:	8103      	strh	r3, [r0, #8]
  return 0;
 800f33e:	2000      	movs	r0, #0
}
 800f340:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f342:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f346:	d2f0      	bcs.n	800f32a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800f348:	2900      	cmp	r1, #0
 800f34a:	d0f8      	beq.n	800f33e <pbuf_remove_header+0x26>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f34c:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
 800f34e:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f350:	4293      	cmp	r3, r2
 800f352:	d2ec      	bcs.n	800f32e <pbuf_remove_header+0x16>
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <pbuf_remove_header+0x48>)
 800f356:	4905      	ldr	r1, [pc, #20]	; (800f36c <pbuf_remove_header+0x54>)
 800f358:	f240 2255 	movw	r2, #597	; 0x255
 800f35c:	e7e2      	b.n	800f324 <pbuf_remove_header+0xc>
 800f35e:	bf00      	nop
 800f360:	0802d3a8 	.word	0x0802d3a8
 800f364:	0802d4b3 	.word	0x0802d4b3
 800f368:	0802aecf 	.word	0x0802aecf
 800f36c:	0802d423 	.word	0x0802d423

0800f370 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800f370:	1e0b      	subs	r3, r1, #0
 800f372:	da02      	bge.n	800f37a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f374:	4259      	negs	r1, r3
 800f376:	f7ff bfcf 	b.w	800f318 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f37a:	2201      	movs	r2, #1
 800f37c:	f7ff bf56 	b.w	800f22c <pbuf_add_header_impl>

0800f380 <pbuf_free>:
{
 800f380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 800f384:	4604      	mov	r4, r0
 800f386:	b950      	cbnz	r0, 800f39e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f388:	4b2b      	ldr	r3, [pc, #172]	; (800f438 <pbuf_free+0xb8>)
 800f38a:	492c      	ldr	r1, [pc, #176]	; (800f43c <pbuf_free+0xbc>)
 800f38c:	482c      	ldr	r0, [pc, #176]	; (800f440 <pbuf_free+0xc0>)
 800f38e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f392:	f00d fbc9 	bl	801cb28 <iprintf>
    return 0;
 800f396:	4625      	mov	r5, r4
}
 800f398:	4628      	mov	r0, r5
 800f39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f39e:	4f26      	ldr	r7, [pc, #152]	; (800f438 <pbuf_free+0xb8>)
 800f3a0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800f44c <pbuf_free+0xcc>
 800f3a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800f440 <pbuf_free+0xc0>
  count = 0;
 800f3a8:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 800f3aa:	f005 fa75 	bl	8014898 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f3ae:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800f3b0:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f3b2:	b933      	cbnz	r3, 800f3c2 <pbuf_free+0x42>
 800f3b4:	463b      	mov	r3, r7
 800f3b6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f3ba:	4651      	mov	r1, sl
 800f3bc:	4640      	mov	r0, r8
 800f3be:	f00d fbb3 	bl	801cb28 <iprintf>
    ref = --(p->ref);
 800f3c2:	7ba6      	ldrb	r6, [r4, #14]
 800f3c4:	3e01      	subs	r6, #1
 800f3c6:	b2f6      	uxtb	r6, r6
 800f3c8:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800f3ca:	4648      	mov	r0, r9
 800f3cc:	f005 fa70 	bl	80148b0 <sys_arch_unprotect>
    if (ref == 0) {
 800f3d0:	2e00      	cmp	r6, #0
 800f3d2:	d1e1      	bne.n	800f398 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f3d4:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800f3d6:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f3d8:	079b      	lsls	r3, r3, #30
 800f3da:	d511      	bpl.n	800f400 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	b933      	cbnz	r3, 800f3ee <pbuf_free+0x6e>
 800f3e0:	4918      	ldr	r1, [pc, #96]	; (800f444 <pbuf_free+0xc4>)
 800f3e2:	463b      	mov	r3, r7
 800f3e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	f00d fb9d 	bl	801cb28 <iprintf>
        pc->custom_free_function(p);
 800f3ee:	6923      	ldr	r3, [r4, #16]
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	4798      	blx	r3
      count++;
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800f3f8:	2e00      	cmp	r6, #0
 800f3fa:	d0cd      	beq.n	800f398 <pbuf_free+0x18>
 800f3fc:	4634      	mov	r4, r6
 800f3fe:	e7d4      	b.n	800f3aa <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800f400:	7b23      	ldrb	r3, [r4, #12]
 800f402:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f406:	2b02      	cmp	r3, #2
 800f408:	d104      	bne.n	800f414 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800f40a:	4621      	mov	r1, r4
 800f40c:	2010      	movs	r0, #16
          memp_free(MEMP_PBUF, p);
 800f40e:	f7ff fc49 	bl	800eca4 <memp_free>
 800f412:	e7ef      	b.n	800f3f4 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f414:	2b01      	cmp	r3, #1
 800f416:	d102      	bne.n	800f41e <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800f418:	4621      	mov	r1, r4
 800f41a:	200f      	movs	r0, #15
 800f41c:	e7f7      	b.n	800f40e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f41e:	b91b      	cbnz	r3, 800f428 <pbuf_free+0xa8>
          mem_free(p);
 800f420:	4620      	mov	r0, r4
 800f422:	f7ff f999 	bl	800e758 <mem_free>
 800f426:	e7e5      	b.n	800f3f4 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800f428:	4907      	ldr	r1, [pc, #28]	; (800f448 <pbuf_free+0xc8>)
 800f42a:	463b      	mov	r3, r7
 800f42c:	f240 320f 	movw	r2, #783	; 0x30f
 800f430:	4640      	mov	r0, r8
 800f432:	f00d fb79 	bl	801cb28 <iprintf>
 800f436:	e7dd      	b.n	800f3f4 <pbuf_free+0x74>
 800f438:	0802d3a8 	.word	0x0802d3a8
 800f43c:	0802d4b3 	.word	0x0802d4b3
 800f440:	0802aecf 	.word	0x0802aecf
 800f444:	0802d457 	.word	0x0802d457
 800f448:	0802d478 	.word	0x0802d478
 800f44c:	0802d441 	.word	0x0802d441

0800f450 <pbuf_alloc>:
  switch (type) {
 800f450:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800f454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f458:	4606      	mov	r6, r0
 800f45a:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800f45c:	b284      	uxth	r4, r0
  switch (type) {
 800f45e:	d014      	beq.n	800f48a <pbuf_alloc+0x3a>
 800f460:	d808      	bhi.n	800f474 <pbuf_alloc+0x24>
 800f462:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800f466:	2b01      	cmp	r3, #1
 800f468:	d107      	bne.n	800f47a <pbuf_alloc+0x2a>
}
 800f46a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800f46e:	2000      	movs	r0, #0
 800f470:	f7ff bf0e 	b.w	800f290 <pbuf_alloc_reference>
  switch (type) {
 800f474:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800f478:	d03c      	beq.n	800f4f4 <pbuf_alloc+0xa4>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f47a:	4b2e      	ldr	r3, [pc, #184]	; (800f534 <pbuf_alloc+0xe4>)
 800f47c:	492e      	ldr	r1, [pc, #184]	; (800f538 <pbuf_alloc+0xe8>)
 800f47e:	482f      	ldr	r0, [pc, #188]	; (800f53c <pbuf_alloc+0xec>)
 800f480:	f240 1227 	movw	r2, #295	; 0x127
 800f484:	f00d fb50 	bl	801cb28 <iprintf>
 800f488:	e00c      	b.n	800f4a4 <pbuf_alloc+0x54>
  switch (type) {
 800f48a:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 800f48c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800f544 <pbuf_alloc+0xf4>
  switch (type) {
 800f490:	4635      	mov	r5, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f492:	f240 58f4 	movw	r8, #1524	; 0x5f4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f496:	2010      	movs	r0, #16
 800f498:	f7ff fbe8 	bl	800ec6c <memp_malloc>
        if (q == NULL) {
 800f49c:	46b2      	mov	sl, r6
 800f49e:	4606      	mov	r6, r0
 800f4a0:	b930      	cbnz	r0, 800f4b0 <pbuf_alloc+0x60>
          if (p) {
 800f4a2:	b90d      	cbnz	r5, 800f4a8 <pbuf_alloc+0x58>
      return NULL;
 800f4a4:	2500      	movs	r5, #0
 800f4a6:	e020      	b.n	800f4ea <pbuf_alloc+0x9a>
            pbuf_free(p);
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	f7ff ff69 	bl	800f380 <pbuf_free>
 800f4ae:	e7f9      	b.n	800f4a4 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f4b0:	1ce3      	adds	r3, r4, #3
 800f4b2:	f023 0303 	bic.w	r3, r3, #3
 800f4b6:	eba8 0303 	sub.w	r3, r8, r3
 800f4ba:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f4bc:	4404      	add	r4, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f4be:	42bb      	cmp	r3, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f4c0:	f104 0413 	add.w	r4, r4, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f4c4:	bf28      	it	cs
 800f4c6:	463b      	movcs	r3, r7
  p->next = NULL;
 800f4c8:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f4ca:	f024 0403 	bic.w	r4, r4, #3
  p->next = NULL;
 800f4ce:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 800f4d0:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 800f4d2:	8107      	strh	r7, [r0, #8]
  p->len = len;
 800f4d4:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 800f4d6:	f8c0 900c 	str.w	r9, [r0, #12]
        if (p == NULL) {
 800f4da:	b14d      	cbz	r5, 800f4f0 <pbuf_alloc+0xa0>
          last->next = q;
 800f4dc:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800f4e0:	1afb      	subs	r3, r7, r3
 800f4e2:	b29f      	uxth	r7, r3
        offset = 0;
 800f4e4:	2400      	movs	r4, #0
      } while (rem_len > 0);
 800f4e6:	2f00      	cmp	r7, #0
 800f4e8:	d1d5      	bne.n	800f496 <pbuf_alloc+0x46>
}
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	e7f5      	b.n	800f4e0 <pbuf_alloc+0x90>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f4f4:	3403      	adds	r4, #3
 800f4f6:	1ccb      	adds	r3, r1, #3
 800f4f8:	f023 0303 	bic.w	r3, r3, #3
 800f4fc:	f024 0403 	bic.w	r4, r4, #3
 800f500:	441c      	add	r4, r3
 800f502:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f504:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f508:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f50a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f50c:	d3ca      	bcc.n	800f4a4 <pbuf_alloc+0x54>
 800f50e:	4283      	cmp	r3, r0
 800f510:	d8c8      	bhi.n	800f4a4 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f512:	f7ff faa5 	bl	800ea60 <mem_malloc>
      if (p == NULL) {
 800f516:	4605      	mov	r5, r0
 800f518:	2800      	cmp	r0, #0
 800f51a:	d0e6      	beq.n	800f4ea <pbuf_alloc+0x9a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f51c:	4406      	add	r6, r0
  p->next = NULL;
 800f51e:	2300      	movs	r3, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f520:	3613      	adds	r6, #19
  p->next = NULL;
 800f522:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f524:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 800f528:	4b05      	ldr	r3, [pc, #20]	; (800f540 <pbuf_alloc+0xf0>)
  p->payload = payload;
 800f52a:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800f52c:	8107      	strh	r7, [r0, #8]
  p->len = len;
 800f52e:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800f530:	60c3      	str	r3, [r0, #12]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f532:	e7da      	b.n	800f4ea <pbuf_alloc+0x9a>
 800f534:	0802d3a8 	.word	0x0802d3a8
 800f538:	0802d48a 	.word	0x0802d48a
 800f53c:	0802aecf 	.word	0x0802aecf
 800f540:	00010080 	.word	0x00010080
 800f544:	00010082 	.word	0x00010082

0800f548 <pbuf_realloc>:
{
 800f548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f54c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f54e:	4604      	mov	r4, r0
 800f550:	b930      	cbnz	r0, 800f560 <pbuf_realloc+0x18>
 800f552:	4b24      	ldr	r3, [pc, #144]	; (800f5e4 <pbuf_realloc+0x9c>)
 800f554:	4924      	ldr	r1, [pc, #144]	; (800f5e8 <pbuf_realloc+0xa0>)
 800f556:	4825      	ldr	r0, [pc, #148]	; (800f5ec <pbuf_realloc+0xa4>)
 800f558:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f55c:	f00d fae4 	bl	801cb28 <iprintf>
  if (new_len >= p->tot_len) {
 800f560:	8927      	ldrh	r7, [r4, #8]
 800f562:	42b7      	cmp	r7, r6
 800f564:	d93c      	bls.n	800f5e0 <pbuf_realloc+0x98>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f566:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800f5e4 <pbuf_realloc+0x9c>
 800f56a:	f8df a088 	ldr.w	sl, [pc, #136]	; 800f5f4 <pbuf_realloc+0xac>
 800f56e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800f5ec <pbuf_realloc+0xa4>
 800f572:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 800f574:	8962      	ldrh	r2, [r4, #10]
 800f576:	42aa      	cmp	r2, r5
 800f578:	d319      	bcc.n	800f5ae <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f57a:	7b23      	ldrb	r3, [r4, #12]
 800f57c:	0719      	lsls	r1, r3, #28
 800f57e:	d127      	bne.n	800f5d0 <pbuf_realloc+0x88>
 800f580:	42aa      	cmp	r2, r5
 800f582:	d025      	beq.n	800f5d0 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f584:	7b63      	ldrb	r3, [r4, #13]
 800f586:	079b      	lsls	r3, r3, #30
 800f588:	d422      	bmi.n	800f5d0 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f58a:	6861      	ldr	r1, [r4, #4]
 800f58c:	1b09      	subs	r1, r1, r4
 800f58e:	4429      	add	r1, r5
 800f590:	4620      	mov	r0, r4
 800f592:	b289      	uxth	r1, r1
 800f594:	f7ff f9b6 	bl	800e904 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f598:	4604      	mov	r4, r0
 800f59a:	b9c8      	cbnz	r0, 800f5d0 <pbuf_realloc+0x88>
 800f59c:	4b11      	ldr	r3, [pc, #68]	; (800f5e4 <pbuf_realloc+0x9c>)
 800f59e:	4914      	ldr	r1, [pc, #80]	; (800f5f0 <pbuf_realloc+0xa8>)
 800f5a0:	4812      	ldr	r0, [pc, #72]	; (800f5ec <pbuf_realloc+0xa4>)
 800f5a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f5a6:	f00d fabf 	bl	801cb28 <iprintf>
  q->len = rem_len;
 800f5aa:	8164      	strh	r4, [r4, #10]
 800f5ac:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800f5ae:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f5b0:	8922      	ldrh	r2, [r4, #8]
 800f5b2:	1bf3      	subs	r3, r6, r7
 800f5b4:	4413      	add	r3, r2
 800f5b6:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800f5b8:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
 800f5ba:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f5bc:	2c00      	cmp	r4, #0
 800f5be:	d1d9      	bne.n	800f574 <pbuf_realloc+0x2c>
 800f5c0:	4643      	mov	r3, r8
 800f5c2:	f240 12af 	movw	r2, #431	; 0x1af
 800f5c6:	4651      	mov	r1, sl
 800f5c8:	4648      	mov	r0, r9
 800f5ca:	f00d faad 	bl	801cb28 <iprintf>
 800f5ce:	e7d1      	b.n	800f574 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800f5d0:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800f5d2:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800f5d4:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800f5d6:	b108      	cbz	r0, 800f5dc <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800f5d8:	f7ff fed2 	bl	800f380 <pbuf_free>
  q->next = NULL;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	6023      	str	r3, [r4, #0]
}
 800f5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5e4:	0802d3a8 	.word	0x0802d3a8
 800f5e8:	0802d4a5 	.word	0x0802d4a5
 800f5ec:	0802aecf 	.word	0x0802aecf
 800f5f0:	0802d4d5 	.word	0x0802d4d5
 800f5f4:	0802d4bd 	.word	0x0802d4bd

0800f5f8 <pbuf_free_header>:
{
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	460d      	mov	r5, r1
  struct pbuf *p = q;
 800f5fc:	4604      	mov	r4, r0
      f->next = 0;
 800f5fe:	2600      	movs	r6, #0
  while (free_left && p) {
 800f600:	b185      	cbz	r5, 800f624 <pbuf_free_header+0x2c>
 800f602:	b17c      	cbz	r4, 800f624 <pbuf_free_header+0x2c>
    if (free_left >= p->len) {
 800f604:	8961      	ldrh	r1, [r4, #10]
 800f606:	42a9      	cmp	r1, r5
 800f608:	d808      	bhi.n	800f61c <pbuf_free_header+0x24>
      p = p->next;
 800f60a:	6827      	ldr	r7, [r4, #0]
      f->next = 0;
 800f60c:	6026      	str	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 800f60e:	1a6d      	subs	r5, r5, r1
      pbuf_free(f);
 800f610:	4620      	mov	r0, r4
 800f612:	f7ff feb5 	bl	800f380 <pbuf_free>
      free_left = (u16_t)(free_left - p->len);
 800f616:	b2ad      	uxth	r5, r5
      p = p->next;
 800f618:	463c      	mov	r4, r7
 800f61a:	e7f1      	b.n	800f600 <pbuf_free_header+0x8>
      pbuf_remove_header(p, free_left);
 800f61c:	4629      	mov	r1, r5
 800f61e:	4620      	mov	r0, r4
 800f620:	f7ff fe7a 	bl	800f318 <pbuf_remove_header>
}
 800f624:	4620      	mov	r0, r4
 800f626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f628 <pbuf_clen>:
{
 800f628:	4603      	mov	r3, r0
  while (p != NULL) {
 800f62a:	2200      	movs	r2, #0
 800f62c:	b290      	uxth	r0, r2
 800f62e:	3201      	adds	r2, #1
 800f630:	b903      	cbnz	r3, 800f634 <pbuf_clen+0xc>
}
 800f632:	4770      	bx	lr
    p = p->next;
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	e7f9      	b.n	800f62c <pbuf_clen+0x4>

0800f638 <pbuf_ref>:
{
 800f638:	b510      	push	{r4, lr}
  if (p != NULL) {
 800f63a:	4604      	mov	r4, r0
 800f63c:	b188      	cbz	r0, 800f662 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f63e:	f005 f92b 	bl	8014898 <sys_arch_protect>
 800f642:	7ba3      	ldrb	r3, [r4, #14]
 800f644:	3301      	adds	r3, #1
 800f646:	73a3      	strb	r3, [r4, #14]
 800f648:	f005 f932 	bl	80148b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f64c:	7ba3      	ldrb	r3, [r4, #14]
 800f64e:	b943      	cbnz	r3, 800f662 <pbuf_ref+0x2a>
}
 800f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f654:	4b03      	ldr	r3, [pc, #12]	; (800f664 <pbuf_ref+0x2c>)
 800f656:	4904      	ldr	r1, [pc, #16]	; (800f668 <pbuf_ref+0x30>)
 800f658:	4804      	ldr	r0, [pc, #16]	; (800f66c <pbuf_ref+0x34>)
 800f65a:	f240 3242 	movw	r2, #834	; 0x342
 800f65e:	f00d ba63 	b.w	801cb28 <iprintf>
}
 800f662:	bd10      	pop	{r4, pc}
 800f664:	0802d3a8 	.word	0x0802d3a8
 800f668:	0802d4f1 	.word	0x0802d4f1
 800f66c:	0802aecf 	.word	0x0802aecf

0800f670 <pbuf_cat>:
{
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f674:	4604      	mov	r4, r0
 800f676:	b100      	cbz	r0, 800f67a <pbuf_cat+0xa>
 800f678:	b961      	cbnz	r1, 800f694 <pbuf_cat+0x24>
}
 800f67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f67e:	4b14      	ldr	r3, [pc, #80]	; (800f6d0 <pbuf_cat+0x60>)
 800f680:	4914      	ldr	r1, [pc, #80]	; (800f6d4 <pbuf_cat+0x64>)
 800f682:	4815      	ldr	r0, [pc, #84]	; (800f6d8 <pbuf_cat+0x68>)
 800f684:	f240 3259 	movw	r2, #857	; 0x359
 800f688:	f00d ba4e 	b.w	801cb28 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f68c:	8929      	ldrh	r1, [r5, #8]
 800f68e:	440b      	add	r3, r1
 800f690:	8123      	strh	r3, [r4, #8]
 800f692:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800f694:	6822      	ldr	r2, [r4, #0]
 800f696:	8923      	ldrh	r3, [r4, #8]
 800f698:	2a00      	cmp	r2, #0
 800f69a:	d1f7      	bne.n	800f68c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f69c:	8962      	ldrh	r2, [r4, #10]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d00f      	beq.n	800f6c2 <pbuf_cat+0x52>
 800f6a2:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <pbuf_cat+0x60>)
 800f6a4:	490d      	ldr	r1, [pc, #52]	; (800f6dc <pbuf_cat+0x6c>)
 800f6a6:	480c      	ldr	r0, [pc, #48]	; (800f6d8 <pbuf_cat+0x68>)
 800f6a8:	f240 3262 	movw	r2, #866	; 0x362
 800f6ac:	f00d fa3c 	bl	801cb28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	b133      	cbz	r3, 800f6c2 <pbuf_cat+0x52>
 800f6b4:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <pbuf_cat+0x60>)
 800f6b6:	490a      	ldr	r1, [pc, #40]	; (800f6e0 <pbuf_cat+0x70>)
 800f6b8:	4807      	ldr	r0, [pc, #28]	; (800f6d8 <pbuf_cat+0x68>)
 800f6ba:	f240 3263 	movw	r2, #867	; 0x363
 800f6be:	f00d fa33 	bl	801cb28 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6c2:	892a      	ldrh	r2, [r5, #8]
 800f6c4:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800f6c6:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f6c8:	4413      	add	r3, r2
 800f6ca:	8123      	strh	r3, [r4, #8]
}
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0802d3a8 	.word	0x0802d3a8
 800f6d4:	0802d503 	.word	0x0802d503
 800f6d8:	0802aecf 	.word	0x0802aecf
 800f6dc:	0802d538 	.word	0x0802d538
 800f6e0:	0802d565 	.word	0x0802d565

0800f6e4 <pbuf_chain>:
{
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800f6e8:	f7ff ffc2 	bl	800f670 <pbuf_cat>
  pbuf_ref(t);
 800f6ec:	4620      	mov	r0, r4
}
 800f6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800f6f2:	f7ff bfa1 	b.w	800f638 <pbuf_ref>
	...

0800f6f8 <pbuf_copy>:
{
 800f6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f6fe:	4605      	mov	r5, r0
 800f700:	b120      	cbz	r0, 800f70c <pbuf_copy+0x14>
 800f702:	b119      	cbz	r1, 800f70c <pbuf_copy+0x14>
 800f704:	8902      	ldrh	r2, [r0, #8]
 800f706:	890b      	ldrh	r3, [r1, #8]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d20a      	bcs.n	800f722 <pbuf_copy+0x2a>
 800f70c:	4b34      	ldr	r3, [pc, #208]	; (800f7e0 <pbuf_copy+0xe8>)
 800f70e:	4935      	ldr	r1, [pc, #212]	; (800f7e4 <pbuf_copy+0xec>)
 800f710:	f240 32c9 	movw	r2, #969	; 0x3c9
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f714:	4834      	ldr	r0, [pc, #208]	; (800f7e8 <pbuf_copy+0xf0>)
 800f716:	f00d fa07 	bl	801cb28 <iprintf>
 800f71a:	f06f 000f 	mvn.w	r0, #15
}
 800f71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800f722:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f724:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800f7e0 <pbuf_copy+0xe8>
 800f728:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800f7f8 <pbuf_copy+0x100>
 800f72c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800f7e8 <pbuf_copy+0xf0>
  size_t offset_to = 0, offset_from = 0, len;
 800f730:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f732:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800f736:	8962      	ldrh	r2, [r4, #10]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f738:	6868      	ldr	r0, [r5, #4]
 800f73a:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f73c:	eba8 0807 	sub.w	r8, r8, r7
 800f740:	1b92      	subs	r2, r2, r6
 800f742:	4590      	cmp	r8, r2
 800f744:	bf28      	it	cs
 800f746:	4690      	movcs	r8, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f748:	4431      	add	r1, r6
 800f74a:	4438      	add	r0, r7
 800f74c:	4642      	mov	r2, r8
 800f74e:	f00c fd77 	bl	801c240 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f752:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800f754:	4447      	add	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f756:	429f      	cmp	r7, r3
    offset_from += len;
 800f758:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f75a:	d906      	bls.n	800f76a <pbuf_copy+0x72>
 800f75c:	465b      	mov	r3, fp
 800f75e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f762:	4651      	mov	r1, sl
 800f764:	4648      	mov	r0, r9
 800f766:	f00d f9df 	bl	801cb28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f76a:	8963      	ldrh	r3, [r4, #10]
 800f76c:	429e      	cmp	r6, r3
 800f76e:	d906      	bls.n	800f77e <pbuf_copy+0x86>
 800f770:	491e      	ldr	r1, [pc, #120]	; (800f7ec <pbuf_copy+0xf4>)
 800f772:	465b      	mov	r3, fp
 800f774:	f240 32da 	movw	r2, #986	; 0x3da
 800f778:	4648      	mov	r0, r9
 800f77a:	f00d f9d5 	bl	801cb28 <iprintf>
    if (offset_from >= p_from->len) {
 800f77e:	8963      	ldrh	r3, [r4, #10]
 800f780:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800f782:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800f784:	bf24      	itt	cs
 800f786:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800f788:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800f78a:	429f      	cmp	r7, r3
 800f78c:	d108      	bne.n	800f7a0 <pbuf_copy+0xa8>
      p_to = p_to->next;
 800f78e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f790:	b92d      	cbnz	r5, 800f79e <pbuf_copy+0xa6>
 800f792:	b314      	cbz	r4, 800f7da <pbuf_copy+0xe2>
 800f794:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <pbuf_copy+0xe8>)
 800f796:	4916      	ldr	r1, [pc, #88]	; (800f7f0 <pbuf_copy+0xf8>)
 800f798:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f79c:	e7ba      	b.n	800f714 <pbuf_copy+0x1c>
      offset_to = 0;
 800f79e:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f7a0:	b17c      	cbz	r4, 800f7c2 <pbuf_copy+0xca>
 800f7a2:	8962      	ldrh	r2, [r4, #10]
 800f7a4:	8923      	ldrh	r3, [r4, #8]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d10b      	bne.n	800f7c2 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f7aa:	6823      	ldr	r3, [r4, #0]
 800f7ac:	b14b      	cbz	r3, 800f7c2 <pbuf_copy+0xca>
 800f7ae:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <pbuf_copy+0xe8>)
 800f7b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f7b4:	490f      	ldr	r1, [pc, #60]	; (800f7f4 <pbuf_copy+0xfc>)
 800f7b6:	480c      	ldr	r0, [pc, #48]	; (800f7e8 <pbuf_copy+0xf0>)
 800f7b8:	f00d f9b6 	bl	801cb28 <iprintf>
 800f7bc:	f06f 0005 	mvn.w	r0, #5
 800f7c0:	e7ad      	b.n	800f71e <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f7c2:	896a      	ldrh	r2, [r5, #10]
 800f7c4:	892b      	ldrh	r3, [r5, #8]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d105      	bne.n	800f7d6 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f7ca:	682b      	ldr	r3, [r5, #0]
 800f7cc:	b11b      	cbz	r3, 800f7d6 <pbuf_copy+0xde>
 800f7ce:	4b04      	ldr	r3, [pc, #16]	; (800f7e0 <pbuf_copy+0xe8>)
 800f7d0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f7d4:	e7ee      	b.n	800f7b4 <pbuf_copy+0xbc>
  } while (p_from);
 800f7d6:	2c00      	cmp	r4, #0
 800f7d8:	d1ab      	bne.n	800f732 <pbuf_copy+0x3a>
  return ERR_OK;
 800f7da:	4620      	mov	r0, r4
 800f7dc:	e79f      	b.n	800f71e <pbuf_copy+0x26>
 800f7de:	bf00      	nop
 800f7e0:	0802d3a8 	.word	0x0802d3a8
 800f7e4:	0802d5ac 	.word	0x0802d5ac
 800f7e8:	0802aecf 	.word	0x0802aecf
 800f7ec:	0802d5f3 	.word	0x0802d5f3
 800f7f0:	0802d60e 	.word	0x0802d60e
 800f7f4:	0802d61b 	.word	0x0802d61b
 800f7f8:	0802d5dc 	.word	0x0802d5dc

0800f7fc <pbuf_copy_partial>:
{
 800f7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f800:	4688      	mov	r8, r1
 800f802:	4691      	mov	r9, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f804:	4606      	mov	r6, r0
 800f806:	b950      	cbnz	r0, 800f81e <pbuf_copy_partial+0x22>
 800f808:	4b1b      	ldr	r3, [pc, #108]	; (800f878 <pbuf_copy_partial+0x7c>)
 800f80a:	491c      	ldr	r1, [pc, #112]	; (800f87c <pbuf_copy_partial+0x80>)
 800f80c:	481c      	ldr	r0, [pc, #112]	; (800f880 <pbuf_copy_partial+0x84>)
 800f80e:	f240 420a 	movw	r2, #1034	; 0x40a
 800f812:	f00d f989 	bl	801cb28 <iprintf>
 800f816:	4637      	mov	r7, r6
}
 800f818:	4638      	mov	r0, r7
 800f81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f81e:	bb49      	cbnz	r1, 800f874 <pbuf_copy_partial+0x78>
 800f820:	4b15      	ldr	r3, [pc, #84]	; (800f878 <pbuf_copy_partial+0x7c>)
 800f822:	4918      	ldr	r1, [pc, #96]	; (800f884 <pbuf_copy_partial+0x88>)
 800f824:	4816      	ldr	r0, [pc, #88]	; (800f880 <pbuf_copy_partial+0x84>)
 800f826:	f240 420b 	movw	r2, #1035	; 0x40b
 800f82a:	f00d f97d 	bl	801cb28 <iprintf>
 800f82e:	4647      	mov	r7, r8
 800f830:	e7f2      	b.n	800f818 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800f832:	8975      	ldrh	r5, [r6, #10]
 800f834:	b153      	cbz	r3, 800f84c <pbuf_copy_partial+0x50>
 800f836:	42ab      	cmp	r3, r5
 800f838:	d308      	bcc.n	800f84c <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800f83a:	1b5b      	subs	r3, r3, r5
 800f83c:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f83e:	6836      	ldr	r6, [r6, #0]
 800f840:	f1b9 0f00 	cmp.w	r9, #0
 800f844:	d0e8      	beq.n	800f818 <pbuf_copy_partial+0x1c>
 800f846:	2e00      	cmp	r6, #0
 800f848:	d1f3      	bne.n	800f832 <pbuf_copy_partial+0x36>
 800f84a:	e7e5      	b.n	800f818 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800f84c:	1aec      	subs	r4, r5, r3
 800f84e:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 800f850:	454c      	cmp	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f852:	6871      	ldr	r1, [r6, #4]
 800f854:	bf28      	it	cs
 800f856:	464c      	movcs	r4, r9
 800f858:	4622      	mov	r2, r4
 800f85a:	4419      	add	r1, r3
 800f85c:	eb08 0007 	add.w	r0, r8, r7
 800f860:	f00c fcee 	bl	801c240 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f864:	4427      	add	r7, r4
      len = (u16_t)(len - buf_copy_len);
 800f866:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f86a:	b2bf      	uxth	r7, r7
      len = (u16_t)(len - buf_copy_len);
 800f86c:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	e7e4      	b.n	800f83e <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800f874:	2700      	movs	r7, #0
 800f876:	e7e3      	b.n	800f840 <pbuf_copy_partial+0x44>
 800f878:	0802d3a8 	.word	0x0802d3a8
 800f87c:	0802d645 	.word	0x0802d645
 800f880:	0802aecf 	.word	0x0802aecf
 800f884:	0802d664 	.word	0x0802d664

0800f888 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	4689      	mov	r9, r1
 800f88e:	4616      	mov	r6, r2
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f890:	4605      	mov	r5, r0
 800f892:	b950      	cbnz	r0, 800f8aa <pbuf_take+0x22>
 800f894:	4b24      	ldr	r3, [pc, #144]	; (800f928 <pbuf_take+0xa0>)
 800f896:	4925      	ldr	r1, [pc, #148]	; (800f92c <pbuf_take+0xa4>)
 800f898:	f240 42b3 	movw	r2, #1203	; 0x4b3
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f89c:	4824      	ldr	r0, [pc, #144]	; (800f930 <pbuf_take+0xa8>)
 800f89e:	f00d f943 	bl	801cb28 <iprintf>
 800f8a2:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
 800f8a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f8aa:	b921      	cbnz	r1, 800f8b6 <pbuf_take+0x2e>
 800f8ac:	4b1e      	ldr	r3, [pc, #120]	; (800f928 <pbuf_take+0xa0>)
 800f8ae:	4921      	ldr	r1, [pc, #132]	; (800f934 <pbuf_take+0xac>)
 800f8b0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f8b4:	e7f2      	b.n	800f89c <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f8b6:	8903      	ldrh	r3, [r0, #8]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d22b      	bcs.n	800f914 <pbuf_take+0x8c>
 800f8bc:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <pbuf_take+0xa0>)
 800f8be:	491e      	ldr	r1, [pc, #120]	; (800f938 <pbuf_take+0xb0>)
 800f8c0:	481b      	ldr	r0, [pc, #108]	; (800f930 <pbuf_take+0xa8>)
 800f8c2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f8c6:	f00d f92f 	bl	801cb28 <iprintf>
 800f8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ce:	e7ea      	b.n	800f8a6 <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f8d0:	b92d      	cbnz	r5, 800f8de <pbuf_take+0x56>
 800f8d2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f8d6:	4651      	mov	r1, sl
 800f8d8:	4658      	mov	r0, fp
 800f8da:	f00d f925 	bl	801cb28 <iprintf>
    if (buf_copy_len > p->len) {
 800f8de:	896f      	ldrh	r7, [r5, #10]
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f8e0:	6868      	ldr	r0, [r5, #4]
 800f8e2:	42a7      	cmp	r7, r4
 800f8e4:	bf28      	it	cs
 800f8e6:	4627      	movcs	r7, r4
 800f8e8:	eb09 0108 	add.w	r1, r9, r8
 800f8ec:	463a      	mov	r2, r7
 800f8ee:	f00c fca7 	bl	801c240 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f8f2:	682d      	ldr	r5, [r5, #0]
 800f8f4:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <pbuf_take+0xa0>)
    total_copy_len -= buf_copy_len;
 800f8f6:	1be4      	subs	r4, r4, r7
    copied_total += buf_copy_len;
 800f8f8:	44b8      	add	r8, r7
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	d1e8      	bne.n	800f8d0 <pbuf_take+0x48>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f8fe:	45b0      	cmp	r8, r6
 800f900:	d006      	beq.n	800f910 <pbuf_take+0x88>
 800f902:	4b09      	ldr	r3, [pc, #36]	; (800f928 <pbuf_take+0xa0>)
 800f904:	490d      	ldr	r1, [pc, #52]	; (800f93c <pbuf_take+0xb4>)
 800f906:	480a      	ldr	r0, [pc, #40]	; (800f930 <pbuf_take+0xa8>)
 800f908:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f90c:	f00d f90c 	bl	801cb28 <iprintf>
  return ERR_OK;
 800f910:	4620      	mov	r0, r4
 800f912:	e7c8      	b.n	800f8a6 <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f914:	4b04      	ldr	r3, [pc, #16]	; (800f928 <pbuf_take+0xa0>)
 800f916:	f8df a028 	ldr.w	sl, [pc, #40]	; 800f940 <pbuf_take+0xb8>
 800f91a:	f8df b014 	ldr.w	fp, [pc, #20]	; 800f930 <pbuf_take+0xa8>
  size_t total_copy_len = len;
 800f91e:	4614      	mov	r4, r2
  size_t copied_total = 0;
 800f920:	f04f 0800 	mov.w	r8, #0
 800f924:	e7e9      	b.n	800f8fa <pbuf_take+0x72>
 800f926:	bf00      	nop
 800f928:	0802d3a8 	.word	0x0802d3a8
 800f92c:	0802d6cd 	.word	0x0802d6cd
 800f930:	0802aecf 	.word	0x0802aecf
 800f934:	0802d6e4 	.word	0x0802d6e4
 800f938:	0802d6ff 	.word	0x0802d6ff
 800f93c:	0802d737 	.word	0x0802d737
 800f940:	0802d71f 	.word	0x0802d71f

0800f944 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f946:	460f      	mov	r7, r1
 800f948:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f94a:	4619      	mov	r1, r3
 800f94c:	f10d 0206 	add.w	r2, sp, #6
 800f950:	f7ff fc60 	bl	800f214 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f954:	4606      	mov	r6, r0
 800f956:	b330      	cbz	r0, 800f9a6 <pbuf_take_at+0x62>
 800f958:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f95c:	8901      	ldrh	r1, [r0, #8]
 800f95e:	191a      	adds	r2, r3, r4
 800f960:	4291      	cmp	r1, r2
 800f962:	db20      	blt.n	800f9a6 <pbuf_take_at+0x62>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f964:	8942      	ldrh	r2, [r0, #10]
 800f966:	429a      	cmp	r2, r3
 800f968:	d806      	bhi.n	800f978 <pbuf_take_at+0x34>
 800f96a:	4b11      	ldr	r3, [pc, #68]	; (800f9b0 <pbuf_take_at+0x6c>)
 800f96c:	4911      	ldr	r1, [pc, #68]	; (800f9b4 <pbuf_take_at+0x70>)
 800f96e:	4812      	ldr	r0, [pc, #72]	; (800f9b8 <pbuf_take_at+0x74>)
 800f970:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f974:	f00d f8d8 	bl	801cb28 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f978:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f97c:	8975      	ldrh	r5, [r6, #10]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f97e:	6870      	ldr	r0, [r6, #4]
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f980:	1aed      	subs	r5, r5, r3
 800f982:	42ac      	cmp	r4, r5
 800f984:	bfcc      	ite	gt
 800f986:	b2ad      	uxthgt	r5, r5
 800f988:	4625      	movle	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f98a:	462a      	mov	r2, r5
 800f98c:	4639      	mov	r1, r7
 800f98e:	4418      	add	r0, r3
 800f990:	f00c fc56 	bl	801c240 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f994:	1b62      	subs	r2, r4, r5
 800f996:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 800f998:	b142      	cbz	r2, 800f9ac <pbuf_take_at+0x68>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f99a:	6830      	ldr	r0, [r6, #0]
 800f99c:	1979      	adds	r1, r7, r5
 800f99e:	f7ff ff73 	bl	800f888 <pbuf_take>
    }
    return ERR_OK;
  }
  return ERR_MEM;
}
 800f9a2:	b003      	add	sp, #12
 800f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_MEM;
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9aa:	e7fa      	b.n	800f9a2 <pbuf_take_at+0x5e>
    return ERR_OK;
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	e7f8      	b.n	800f9a2 <pbuf_take_at+0x5e>
 800f9b0:	0802d3a8 	.word	0x0802d3a8
 800f9b4:	0802d74d 	.word	0x0802d74d
 800f9b8:	0802aecf 	.word	0x0802aecf

0800f9bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f9bc:	b538      	push	{r3, r4, r5, lr}
 800f9be:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f9c0:	460a      	mov	r2, r1
 800f9c2:	8929      	ldrh	r1, [r5, #8]
 800f9c4:	f7ff fd44 	bl	800f450 <pbuf_alloc>
  if (q == NULL) {
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	b150      	cbz	r0, 800f9e2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	f7ff fe93 	bl	800f6f8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f9d2:	b130      	cbz	r0, 800f9e2 <pbuf_clone+0x26>
 800f9d4:	4b04      	ldr	r3, [pc, #16]	; (800f9e8 <pbuf_clone+0x2c>)
 800f9d6:	4905      	ldr	r1, [pc, #20]	; (800f9ec <pbuf_clone+0x30>)
 800f9d8:	4805      	ldr	r0, [pc, #20]	; (800f9f0 <pbuf_clone+0x34>)
 800f9da:	f240 5224 	movw	r2, #1316	; 0x524
 800f9de:	f00d f8a3 	bl	801cb28 <iprintf>
  return q;
}
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	bd38      	pop	{r3, r4, r5, pc}
 800f9e6:	bf00      	nop
 800f9e8:	0802d3a8 	.word	0x0802d3a8
 800f9ec:	0802d764 	.word	0x0802d764
 800f9f0:	0802aecf 	.word	0x0802aecf

0800f9f4 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f9f4:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f9f6:	f10d 0206 	add.w	r2, sp, #6
 800f9fa:	f7ff fc0b 	bl	800f214 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f9fe:	b148      	cbz	r0, 800fa14 <pbuf_try_get_at+0x20>
 800fa00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa04:	8942      	ldrh	r2, [r0, #10]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d904      	bls.n	800fa14 <pbuf_try_get_at+0x20>
    return ((u8_t *)q->payload)[q_idx];
 800fa0a:	6842      	ldr	r2, [r0, #4]
 800fa0c:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 800fa0e:	b003      	add	sp, #12
 800fa10:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800fa14:	f04f 30ff 	mov.w	r0, #4294967295
 800fa18:	e7f9      	b.n	800fa0e <pbuf_try_get_at+0x1a>

0800fa1a <pbuf_get_at>:
{
 800fa1a:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 800fa1c:	f7ff ffea 	bl	800f9f4 <pbuf_try_get_at>
  if (ret >= 0) {
 800fa20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800fa24:	b2c0      	uxtb	r0, r0
 800fa26:	bd08      	pop	{r3, pc}

0800fa28 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800fa28:	b513      	push	{r0, r1, r4, lr}
 800fa2a:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800fa2c:	f10d 0206 	add.w	r2, sp, #6
 800fa30:	f7ff fbf0 	bl	800f214 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fa34:	b130      	cbz	r0, 800fa44 <pbuf_put_at+0x1c>
 800fa36:	8942      	ldrh	r2, [r0, #10]
 800fa38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa3c:	429a      	cmp	r2, r3
    ((u8_t *)q->payload)[q_idx] = data;
 800fa3e:	bf84      	itt	hi
 800fa40:	6842      	ldrhi	r2, [r0, #4]
 800fa42:	54d4      	strbhi	r4, [r2, r3]
  }
}
 800fa44:	b002      	add	sp, #8
 800fa46:	bd10      	pop	{r4, pc}

0800fa48 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 800fa48:	4a12      	ldr	r2, [pc, #72]	; (800fa94 <tcp_new_port+0x4c>)
 800fa4a:	8813      	ldrh	r3, [r2, #0]
{
 800fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fa52:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 800fa56:	3301      	adds	r3, #1
 800fa58:	b29b      	uxth	r3, r3
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fa5a:	4d0f      	ldr	r5, [pc, #60]	; (800fa98 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fa5c:	42b3      	cmp	r3, r6
 800fa5e:	bf08      	it	eq
 800fa60:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 800fa64:	2104      	movs	r1, #4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fa66:	f855 4b04 	ldr.w	r4, [r5], #4
 800fa6a:	6824      	ldr	r4, [r4, #0]
 800fa6c:	b934      	cbnz	r4, 800fa7c <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fa6e:	3901      	subs	r1, #1
 800fa70:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800fa74:	d1f7      	bne.n	800fa66 <tcp_new_port+0x1e>
 800fa76:	8013      	strh	r3, [r2, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fa78:	4618      	mov	r0, r3
 800fa7a:	e007      	b.n	800fa8c <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800fa7c:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 800fa7e:	429f      	cmp	r7, r3
 800fa80:	d105      	bne.n	800fa8e <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fa82:	3801      	subs	r0, #1
 800fa84:	b280      	uxth	r0, r0
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d1e5      	bne.n	800fa56 <tcp_new_port+0xe>
 800fa8a:	8013      	strh	r3, [r2, #0]
}
 800fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fa8e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800fa90:	e7ec      	b.n	800fa6c <tcp_new_port+0x24>
 800fa92:	bf00      	nop
 800fa94:	20000040 	.word	0x20000040
 800fa98:	0801fdc4 	.word	0x0801fdc4

0800fa9c <tcp_close_shutdown_fin>:
{
 800fa9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa9e:	4604      	mov	r4, r0
 800faa0:	b930      	cbnz	r0, 800fab0 <tcp_close_shutdown_fin+0x14>
 800faa2:	4b15      	ldr	r3, [pc, #84]	; (800faf8 <tcp_close_shutdown_fin+0x5c>)
 800faa4:	4915      	ldr	r1, [pc, #84]	; (800fafc <tcp_close_shutdown_fin+0x60>)
 800faa6:	4816      	ldr	r0, [pc, #88]	; (800fb00 <tcp_close_shutdown_fin+0x64>)
 800faa8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800faac:	f00d f83c 	bl	801cb28 <iprintf>
  switch (pcb->state) {
 800fab0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fab4:	2b04      	cmp	r3, #4
 800fab6:	d003      	beq.n	800fac0 <tcp_close_shutdown_fin+0x24>
 800fab8:	2b07      	cmp	r3, #7
 800faba:	d00d      	beq.n	800fad8 <tcp_close_shutdown_fin+0x3c>
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d109      	bne.n	800fad4 <tcp_close_shutdown_fin+0x38>
      err = tcp_send_fin(pcb);
 800fac0:	4620      	mov	r0, r4
 800fac2:	f003 fa9b 	bl	8012ffc <tcp_send_fin>
      if (err == ERR_OK) {
 800fac6:	b968      	cbnz	r0, 800fae4 <tcp_close_shutdown_fin+0x48>
        pcb->state = FIN_WAIT_1;
 800fac8:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 800faca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tcp_output(pcb);
 800face:	4620      	mov	r0, r4
 800fad0:	f003 fc0c 	bl	80132ec <tcp_output>
  switch (pcb->state) {
 800fad4:	2000      	movs	r0, #0
}
 800fad6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800fad8:	4620      	mov	r0, r4
 800fada:	f003 fa8f 	bl	8012ffc <tcp_send_fin>
      if (err == ERR_OK) {
 800fade:	b908      	cbnz	r0, 800fae4 <tcp_close_shutdown_fin+0x48>
        pcb->state = LAST_ACK;
 800fae0:	2309      	movs	r3, #9
 800fae2:	e7f2      	b.n	800faca <tcp_close_shutdown_fin+0x2e>
  } else if (err == ERR_MEM) {
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d1f6      	bne.n	800fad6 <tcp_close_shutdown_fin+0x3a>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fae8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800faec:	f043 0308 	orr.w	r3, r3, #8
 800faf0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 800faf4:	e7ee      	b.n	800fad4 <tcp_close_shutdown_fin+0x38>
 800faf6:	bf00      	nop
 800faf8:	0802d775 	.word	0x0802d775
 800fafc:	0802d7dd 	.word	0x0802d7dd
 800fb00:	0802aecf 	.word	0x0802aecf

0800fb04 <tcp_init>:
{
 800fb04:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb06:	f00d f855 	bl	801cbb4 <rand>
 800fb0a:	4b03      	ldr	r3, [pc, #12]	; (800fb18 <tcp_init+0x14>)
 800fb0c:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800fb10:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800fb14:	8018      	strh	r0, [r3, #0]
}
 800fb16:	bd08      	pop	{r3, pc}
 800fb18:	20000040 	.word	0x20000040

0800fb1c <tcp_free>:
{
 800fb1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fb1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fb22:	2b01      	cmp	r3, #1
{
 800fb24:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fb26:	d105      	bne.n	800fb34 <tcp_free+0x18>
 800fb28:	4b05      	ldr	r3, [pc, #20]	; (800fb40 <tcp_free+0x24>)
 800fb2a:	4906      	ldr	r1, [pc, #24]	; (800fb44 <tcp_free+0x28>)
 800fb2c:	4806      	ldr	r0, [pc, #24]	; (800fb48 <tcp_free+0x2c>)
 800fb2e:	22d4      	movs	r2, #212	; 0xd4
 800fb30:	f00c fffa 	bl	801cb28 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800fb34:	4621      	mov	r1, r4
 800fb36:	2001      	movs	r0, #1
}
 800fb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800fb3c:	f7ff b8b2 	b.w	800eca4 <memp_free>
 800fb40:	0802d775 	.word	0x0802d775
 800fb44:	0802d7e9 	.word	0x0802d7e9
 800fb48:	0802aecf 	.word	0x0802aecf

0800fb4c <tcp_bind>:
{
 800fb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ipaddr = IP4_ADDR_ANY;
 800fb50:	4c70      	ldr	r4, [pc, #448]	; (800fd14 <tcp_bind+0x1c8>)
{
 800fb52:	b087      	sub	sp, #28
 800fb54:	4616      	mov	r6, r2
    ipaddr = IP4_ADDR_ANY;
 800fb56:	2900      	cmp	r1, #0
 800fb58:	bf18      	it	ne
 800fb5a:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	b958      	cbnz	r0, 800fb78 <tcp_bind+0x2c>
 800fb60:	4b6d      	ldr	r3, [pc, #436]	; (800fd18 <tcp_bind+0x1cc>)
 800fb62:	496e      	ldr	r1, [pc, #440]	; (800fd1c <tcp_bind+0x1d0>)
 800fb64:	486e      	ldr	r0, [pc, #440]	; (800fd20 <tcp_bind+0x1d4>)
 800fb66:	f240 22a9 	movw	r2, #681	; 0x2a9
 800fb6a:	f00c ffdd 	bl	801cb28 <iprintf>
 800fb6e:	f06f 000f 	mvn.w	r0, #15
}
 800fb72:	b007      	add	sp, #28
 800fb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fb78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fb7c:	b14b      	cbz	r3, 800fb92 <tcp_bind+0x46>
 800fb7e:	4b66      	ldr	r3, [pc, #408]	; (800fd18 <tcp_bind+0x1cc>)
 800fb80:	4968      	ldr	r1, [pc, #416]	; (800fd24 <tcp_bind+0x1d8>)
 800fb82:	4867      	ldr	r0, [pc, #412]	; (800fd20 <tcp_bind+0x1d4>)
 800fb84:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fb88:	f00c ffce 	bl	801cb28 <iprintf>
 800fb8c:	f06f 0005 	mvn.w	r0, #5
 800fb90:	e7ef      	b.n	800fb72 <tcp_bind+0x26>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNICAST)) {
 800fb92:	7d22      	ldrb	r2, [r4, #20]
 800fb94:	2a06      	cmp	r2, #6
 800fb96:	d132      	bne.n	800fbfe <tcp_bind+0xb2>
 800fb98:	7c27      	ldrb	r7, [r4, #16]
 800fb9a:	bb87      	cbnz	r7, 800fbfe <tcp_bind+0xb2>
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	f24c 08ff 	movw	r8, #49407	; 0xc0ff
 800fba2:	ea03 0908 	and.w	r9, r3, r8
 800fba6:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800fbaa:	4589      	cmp	r9, r1
 800fbac:	d127      	bne.n	800fbfe <tcp_bind+0xb2>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	6863      	ldr	r3, [r4, #4]
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	68a3      	ldr	r3, [r4, #8]
 800fbb6:	9302      	str	r3, [sp, #8]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800fbb8:	4669      	mov	r1, sp
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800fbba:	68e3      	ldr	r3, [r4, #12]
 800fbbc:	f88d 2014 	strb.w	r2, [sp, #20]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800fbc0:	4668      	mov	r0, sp
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800fbc2:	9303      	str	r3, [sp, #12]
 800fbc4:	f88d 7010 	strb.w	r7, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800fbc8:	f7fb fbf8 	bl	800b3bc <ip6_route>
 800fbcc:	b1b0      	cbz	r0, 800fbfc <tcp_bind+0xb0>
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	ea03 0808 	and.w	r8, r3, r8
 800fbd4:	45c8      	cmp	r8, r9
 800fbd6:	d00b      	beq.n	800fbf0 <tcp_bind+0xa4>
 800fbd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbdc:	041b      	lsls	r3, r3, #16
 800fbde:	0c1b      	lsrs	r3, r3, #16
 800fbe0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d003      	beq.n	800fbf0 <tcp_bind+0xa4>
 800fbe8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d103      	bne.n	800fbf8 <tcp_bind+0xac>
 800fbf0:	f890 70de 	ldrb.w	r7, [r0, #222]	; 0xde
 800fbf4:	3701      	adds	r7, #1
 800fbf6:	b2ff      	uxtb	r7, r7
 800fbf8:	f88d 7010 	strb.w	r7, [sp, #16]
    ipaddr = &zoned_ipaddr;
 800fbfc:	466c      	mov	r4, sp
  if (port == 0) {
 800fbfe:	b936      	cbnz	r6, 800fc0e <tcp_bind+0xc2>
    port = tcp_new_port();
 800fc00:	f7ff ff22 	bl	800fa48 <tcp_new_port>
    if (port == 0) {
 800fc04:	4606      	mov	r6, r0
 800fc06:	b978      	cbnz	r0, 800fc28 <tcp_bind+0xdc>
      return ERR_BUF;
 800fc08:	f06f 0001 	mvn.w	r0, #1
 800fc0c:	e7b1      	b.n	800fb72 <tcp_bind+0x26>
 800fc0e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800fd2c <tcp_bind+0x1e0>
    for (i = 0; i < max_pcb_list; i++) {
 800fc12:	f04f 0e00 	mov.w	lr, #0
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fc16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	b9f3      	cbnz	r3, 800fc5c <tcp_bind+0x110>
    for (i = 0; i < max_pcb_list; i++) {
 800fc1e:	f10e 0e01 	add.w	lr, lr, #1
 800fc22:	f1be 0f04 	cmp.w	lr, #4
 800fc26:	d1f6      	bne.n	800fc16 <tcp_bind+0xca>
  if (!ip_addr_isany(ipaddr)
 800fc28:	7d22      	ldrb	r2, [r4, #20]
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	2a06      	cmp	r2, #6
 800fc2e:	d15e      	bne.n	800fcee <tcp_bind+0x1a2>
 800fc30:	b933      	cbnz	r3, 800fc40 <tcp_bind+0xf4>
 800fc32:	6861      	ldr	r1, [r4, #4]
 800fc34:	b921      	cbnz	r1, 800fc40 <tcp_bind+0xf4>
 800fc36:	68a1      	ldr	r1, [r4, #8]
 800fc38:	b911      	cbnz	r1, 800fc40 <tcp_bind+0xf4>
 800fc3a:	68e1      	ldr	r1, [r4, #12]
 800fc3c:	2900      	cmp	r1, #0
 800fc3e:	d058      	beq.n	800fcf2 <tcp_bind+0x1a6>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fc40:	752a      	strb	r2, [r5, #20]
 800fc42:	7d22      	ldrb	r2, [r4, #20]
 800fc44:	602b      	str	r3, [r5, #0]
 800fc46:	2a06      	cmp	r2, #6
 800fc48:	d15f      	bne.n	800fd0a <tcp_bind+0x1be>
 800fc4a:	6863      	ldr	r3, [r4, #4]
 800fc4c:	606b      	str	r3, [r5, #4]
 800fc4e:	68a3      	ldr	r3, [r4, #8]
 800fc50:	60ab      	str	r3, [r5, #8]
 800fc52:	68e3      	ldr	r3, [r4, #12]
 800fc54:	60eb      	str	r3, [r5, #12]
 800fc56:	7c23      	ldrb	r3, [r4, #16]
 800fc58:	742b      	strb	r3, [r5, #16]
 800fc5a:	e04d      	b.n	800fcf8 <tcp_bind+0x1ac>
        if (cpcb->local_port == port) {
 800fc5c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800fc5e:	42b2      	cmp	r2, r6
 800fc60:	d136      	bne.n	800fcd0 <tcp_bind+0x184>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fc62:	7d1a      	ldrb	r2, [r3, #20]
 800fc64:	f894 8014 	ldrb.w	r8, [r4, #20]
 800fc68:	1f90      	subs	r0, r2, #6
 800fc6a:	4247      	negs	r7, r0
 800fc6c:	f1a8 0906 	sub.w	r9, r8, #6
 800fc70:	4147      	adcs	r7, r0
 800fc72:	f1d9 0100 	rsbs	r1, r9, #0
 800fc76:	eb41 0109 	adc.w	r1, r1, r9
 800fc7a:	428f      	cmp	r7, r1
 800fc7c:	d128      	bne.n	800fcd0 <tcp_bind+0x184>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fc7e:	2a06      	cmp	r2, #6
 800fc80:	6819      	ldr	r1, [r3, #0]
 800fc82:	d127      	bne.n	800fcd4 <tcp_bind+0x188>
 800fc84:	b929      	cbnz	r1, 800fc92 <tcp_bind+0x146>
 800fc86:	685f      	ldr	r7, [r3, #4]
 800fc88:	b91f      	cbnz	r7, 800fc92 <tcp_bind+0x146>
 800fc8a:	689f      	ldr	r7, [r3, #8]
 800fc8c:	b90f      	cbnz	r7, 800fc92 <tcp_bind+0x146>
 800fc8e:	68df      	ldr	r7, [r3, #12]
 800fc90:	b317      	cbz	r7, 800fcd8 <tcp_bind+0x18c>
                 ip_addr_isany(ipaddr) ||
 800fc92:	f1b8 0f06 	cmp.w	r8, #6
 800fc96:	6827      	ldr	r7, [r4, #0]
 800fc98:	d121      	bne.n	800fcde <tcp_bind+0x192>
 800fc9a:	b92f      	cbnz	r7, 800fca8 <tcp_bind+0x15c>
 800fc9c:	6860      	ldr	r0, [r4, #4]
 800fc9e:	b918      	cbnz	r0, 800fca8 <tcp_bind+0x15c>
 800fca0:	68a0      	ldr	r0, [r4, #8]
 800fca2:	b908      	cbnz	r0, 800fca8 <tcp_bind+0x15c>
 800fca4:	68e0      	ldr	r0, [r4, #12]
 800fca6:	b1b8      	cbz	r0, 800fcd8 <tcp_bind+0x18c>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fca8:	2a06      	cmp	r2, #6
 800fcaa:	d111      	bne.n	800fcd0 <tcp_bind+0x184>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fcac:	428f      	cmp	r7, r1
 800fcae:	d10f      	bne.n	800fcd0 <tcp_bind+0x184>
 800fcb0:	6859      	ldr	r1, [r3, #4]
 800fcb2:	6862      	ldr	r2, [r4, #4]
 800fcb4:	4291      	cmp	r1, r2
 800fcb6:	d10b      	bne.n	800fcd0 <tcp_bind+0x184>
 800fcb8:	6899      	ldr	r1, [r3, #8]
 800fcba:	68a2      	ldr	r2, [r4, #8]
 800fcbc:	4291      	cmp	r1, r2
 800fcbe:	d107      	bne.n	800fcd0 <tcp_bind+0x184>
 800fcc0:	68d9      	ldr	r1, [r3, #12]
 800fcc2:	68e2      	ldr	r2, [r4, #12]
 800fcc4:	4291      	cmp	r1, r2
 800fcc6:	d103      	bne.n	800fcd0 <tcp_bind+0x184>
 800fcc8:	7c19      	ldrb	r1, [r3, #16]
 800fcca:	7c22      	ldrb	r2, [r4, #16]
 800fccc:	4291      	cmp	r1, r2
                 ip_addr_isany(ipaddr) ||
 800fcce:	d003      	beq.n	800fcd8 <tcp_bind+0x18c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcd2:	e7a3      	b.n	800fc1c <tcp_bind+0xd0>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	d1dc      	bne.n	800fc92 <tcp_bind+0x146>
              return ERR_USE;
 800fcd8:	f06f 0007 	mvn.w	r0, #7
 800fcdc:	e749      	b.n	800fb72 <tcp_bind+0x26>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fcde:	2f00      	cmp	r7, #0
 800fce0:	d0fa      	beq.n	800fcd8 <tcp_bind+0x18c>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fce2:	4542      	cmp	r2, r8
 800fce4:	d1f4      	bne.n	800fcd0 <tcp_bind+0x184>
 800fce6:	2a06      	cmp	r2, #6
 800fce8:	d0e0      	beq.n	800fcac <tcp_bind+0x160>
                 ip_addr_isany(ipaddr) ||
 800fcea:	428f      	cmp	r7, r1
 800fcec:	e7ef      	b.n	800fcce <tcp_bind+0x182>
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1a6      	bne.n	800fc40 <tcp_bind+0xf4>
 800fcf2:	7d29      	ldrb	r1, [r5, #20]
 800fcf4:	4291      	cmp	r1, r2
 800fcf6:	d1a3      	bne.n	800fc40 <tcp_bind+0xf4>
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fcf8:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <tcp_bind+0x1dc>)
  pcb->local_port = port;
 800fcfa:	87ee      	strh	r6, [r5, #62]	; 0x3e
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	636a      	str	r2, [r5, #52]	; 0x34
 800fd00:	601d      	str	r5, [r3, #0]
 800fd02:	f003 fe1d 	bl	8013940 <tcp_timer_needed>
  return ERR_OK;
 800fd06:	2000      	movs	r0, #0
 800fd08:	e733      	b.n	800fb72 <tcp_bind+0x26>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	e9c5 3302 	strd	r3, r3, [r5, #8]
 800fd10:	606b      	str	r3, [r5, #4]
 800fd12:	e7a1      	b.n	800fc58 <tcp_bind+0x10c>
 800fd14:	0801fc2c 	.word	0x0801fc2c
 800fd18:	0802d775 	.word	0x0802d775
 800fd1c:	0802d7fa 	.word	0x0802d7fa
 800fd20:	0802aecf 	.word	0x0802aecf
 800fd24:	0802d810 	.word	0x0802d810
 800fd28:	20016120 	.word	0x20016120
 800fd2c:	0801fdc4 	.word	0x0801fdc4

0800fd30 <tcp_bind_netif>:
  if (netif != NULL) {
 800fd30:	b119      	cbz	r1, 800fd3a <tcp_bind_netif+0xa>
    pcb->netif_idx = netif_get_index(netif);
 800fd32:	f891 10de 	ldrb.w	r1, [r1, #222]	; 0xde
 800fd36:	3101      	adds	r1, #1
 800fd38:	b2c9      	uxtb	r1, r1
 800fd3a:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
 800fd3e:	4770      	bx	lr

0800fd40 <tcp_listen_with_backlog_and_err>:
{
 800fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd42:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fd44:	4605      	mov	r5, r0
 800fd46:	b968      	cbnz	r0, 800fd64 <tcp_listen_with_backlog_and_err+0x24>
 800fd48:	4b38      	ldr	r3, [pc, #224]	; (800fe2c <tcp_listen_with_backlog_and_err+0xec>)
 800fd4a:	4939      	ldr	r1, [pc, #228]	; (800fe30 <tcp_listen_with_backlog_and_err+0xf0>)
 800fd4c:	4839      	ldr	r0, [pc, #228]	; (800fe34 <tcp_listen_with_backlog_and_err+0xf4>)
 800fd4e:	f240 3259 	movw	r2, #857	; 0x359
 800fd52:	f00c fee9 	bl	801cb28 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800fd56:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fd58:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800fd5c:	b107      	cbz	r7, 800fd60 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800fd5e:	703b      	strb	r3, [r7, #0]
}
 800fd60:	4620      	mov	r0, r4
 800fd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fd64:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
 800fd68:	b156      	cbz	r6, 800fd80 <tcp_listen_with_backlog_and_err+0x40>
 800fd6a:	4b30      	ldr	r3, [pc, #192]	; (800fe2c <tcp_listen_with_backlog_and_err+0xec>)
 800fd6c:	4932      	ldr	r1, [pc, #200]	; (800fe38 <tcp_listen_with_backlog_and_err+0xf8>)
 800fd6e:	4831      	ldr	r0, [pc, #196]	; (800fe34 <tcp_listen_with_backlog_and_err+0xf4>)
 800fd70:	f240 325a 	movw	r2, #858	; 0x35a
 800fd74:	f00c fed8 	bl	801cb28 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800fd78:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fd7a:	f06f 030e 	mvn.w	r3, #14
 800fd7e:	e7ed      	b.n	800fd5c <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fd80:	2002      	movs	r0, #2
 800fd82:	f7fe ff73 	bl	800ec6c <memp_malloc>
  if (lpcb == NULL) {
 800fd86:	4604      	mov	r4, r0
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d04c      	beq.n	800fe26 <tcp_listen_with_backlog_and_err+0xe6>
  lpcb->callback_arg = pcb->callback_arg;
 800fd8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  lpcb->local_port = pcb->local_port;
 800fd8e:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
  lpcb->callback_arg = pcb->callback_arg;
 800fd90:	6383      	str	r3, [r0, #56]	; 0x38
  lpcb->state = LISTEN;
 800fd92:	2301      	movs	r3, #1
 800fd94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  lpcb->local_port = pcb->local_port;
 800fd98:	87c2      	strh	r2, [r0, #62]	; 0x3e
  lpcb->prio = pcb->prio;
 800fd9a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800fd9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  lpcb->so_options = pcb->so_options;
 800fda2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800fda6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  lpcb->netif_idx = NETIF_NO_INDEX;
 800fdaa:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
  lpcb->ttl = pcb->ttl;
 800fdae:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800fdb2:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  lpcb->tos = pcb->tos;
 800fdb6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800fdba:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
 800fdbe:	7d2b      	ldrb	r3, [r5, #20]
 800fdc0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fdc4:	7503      	strb	r3, [r0, #20]
 800fdc6:	6829      	ldr	r1, [r5, #0]
 800fdc8:	6001      	str	r1, [r0, #0]
 800fdca:	2b06      	cmp	r3, #6
 800fdcc:	d11d      	bne.n	800fe0a <tcp_listen_with_backlog_and_err+0xca>
 800fdce:	686b      	ldr	r3, [r5, #4]
 800fdd0:	6043      	str	r3, [r0, #4]
 800fdd2:	68ab      	ldr	r3, [r5, #8]
 800fdd4:	6083      	str	r3, [r0, #8]
 800fdd6:	68eb      	ldr	r3, [r5, #12]
 800fdd8:	60c3      	str	r3, [r0, #12]
 800fdda:	7c2b      	ldrb	r3, [r5, #16]
 800fddc:	7403      	strb	r3, [r0, #16]
  if (pcb->local_port != 0) {
 800fdde:	b13a      	cbz	r2, 800fdf0 <tcp_listen_with_backlog_and_err+0xb0>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fde0:	4a16      	ldr	r2, [pc, #88]	; (800fe3c <tcp_listen_with_backlog_and_err+0xfc>)
 800fde2:	6813      	ldr	r3, [r2, #0]
 800fde4:	42ab      	cmp	r3, r5
 800fde6:	d116      	bne.n	800fe16 <tcp_listen_with_backlog_and_err+0xd6>
 800fde8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fdea:	6013      	str	r3, [r2, #0]
 800fdec:	2300      	movs	r3, #0
 800fdee:	636b      	str	r3, [r5, #52]	; 0x34
  tcp_free(pcb);
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f7ff fe93 	bl	800fb1c <tcp_free>
  lpcb->accept = tcp_accept_null;
 800fdf6:	4b12      	ldr	r3, [pc, #72]	; (800fe40 <tcp_listen_with_backlog_and_err+0x100>)
 800fdf8:	6423      	str	r3, [r4, #64]	; 0x40
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fdfa:	4b12      	ldr	r3, [pc, #72]	; (800fe44 <tcp_listen_with_backlog_and_err+0x104>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	6362      	str	r2, [r4, #52]	; 0x34
 800fe00:	601c      	str	r4, [r3, #0]
 800fe02:	f003 fd9d 	bl	8013940 <tcp_timer_needed>
  res = ERR_OK;
 800fe06:	2300      	movs	r3, #0
 800fe08:	e7a8      	b.n	800fd5c <tcp_listen_with_backlog_and_err+0x1c>
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fe0a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800fe0e:	6046      	str	r6, [r0, #4]
 800fe10:	7406      	strb	r6, [r0, #16]
 800fe12:	e7e4      	b.n	800fdde <tcp_listen_with_backlog_and_err+0x9e>
 800fe14:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0e8      	beq.n	800fdec <tcp_listen_with_backlog_and_err+0xac>
 800fe1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe1c:	42aa      	cmp	r2, r5
 800fe1e:	d1f9      	bne.n	800fe14 <tcp_listen_with_backlog_and_err+0xd4>
 800fe20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800fe22:	635a      	str	r2, [r3, #52]	; 0x34
 800fe24:	e7e2      	b.n	800fdec <tcp_listen_with_backlog_and_err+0xac>
    res = ERR_MEM;
 800fe26:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2a:	e797      	b.n	800fd5c <tcp_listen_with_backlog_and_err+0x1c>
 800fe2c:	0802d775 	.word	0x0802d775
 800fe30:	0802d838 	.word	0x0802d838
 800fe34:	0802aecf 	.word	0x0802aecf
 800fe38:	0802d865 	.word	0x0802d865
 800fe3c:	20016120 	.word	0x20016120
 800fe40:	08010ab5 	.word	0x08010ab5
 800fe44:	2001611c 	.word	0x2001611c

0800fe48 <tcp_update_rcv_ann_wnd>:
{
 800fe48:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	b930      	cbnz	r0, 800fe5c <tcp_update_rcv_ann_wnd+0x14>
 800fe4e:	4b18      	ldr	r3, [pc, #96]	; (800feb0 <tcp_update_rcv_ann_wnd+0x68>)
 800fe50:	4918      	ldr	r1, [pc, #96]	; (800feb4 <tcp_update_rcv_ann_wnd+0x6c>)
 800fe52:	4819      	ldr	r0, [pc, #100]	; (800feb8 <tcp_update_rcv_ann_wnd+0x70>)
 800fe54:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fe58:	f00c fe66 	bl	801cb28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fe5c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fe60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fe62:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fe66:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fe68:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800fe6c:	1ac8      	subs	r0, r1, r3
 800fe6e:	42b2      	cmp	r2, r6
 800fe70:	4428      	add	r0, r5
 800fe72:	bf94      	ite	ls
 800fe74:	1a82      	subls	r2, r0, r2
 800fe76:	1b82      	subhi	r2, r0, r6
 800fe78:	2a00      	cmp	r2, #0
 800fe7a:	db02      	blt.n	800fe82 <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fe7c:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
}
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fe82:	1aea      	subs	r2, r5, r3
 800fe84:	2a00      	cmp	r2, #0
 800fe86:	dd03      	ble.n	800fe90 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 800fe88:	2000      	movs	r0, #0
 800fe8a:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
 800fe8e:	e7f7      	b.n	800fe80 <tcp_update_rcv_ann_wnd+0x38>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fe90:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fe92:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800fe96:	d306      	bcc.n	800fea6 <tcp_update_rcv_ann_wnd+0x5e>
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <tcp_update_rcv_ann_wnd+0x68>)
 800fe9a:	4908      	ldr	r1, [pc, #32]	; (800febc <tcp_update_rcv_ann_wnd+0x74>)
 800fe9c:	4806      	ldr	r0, [pc, #24]	; (800feb8 <tcp_update_rcv_ann_wnd+0x70>)
 800fe9e:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fea2:	f00c fe41 	bl	801cb28 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fea6:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    return 0;
 800feaa:	2000      	movs	r0, #0
 800feac:	e7e8      	b.n	800fe80 <tcp_update_rcv_ann_wnd+0x38>
 800feae:	bf00      	nop
 800feb0:	0802d775 	.word	0x0802d775
 800feb4:	0802d89c 	.word	0x0802d89c
 800feb8:	0802aecf 	.word	0x0802aecf
 800febc:	0802d8c0 	.word	0x0802d8c0

0800fec0 <tcp_recved>:
{
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fec4:	4605      	mov	r5, r0
 800fec6:	b940      	cbnz	r0, 800feda <tcp_recved+0x1a>
}
 800fec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fecc:	4b19      	ldr	r3, [pc, #100]	; (800ff34 <tcp_recved+0x74>)
 800fece:	491a      	ldr	r1, [pc, #104]	; (800ff38 <tcp_recved+0x78>)
 800fed0:	481a      	ldr	r0, [pc, #104]	; (800ff3c <tcp_recved+0x7c>)
 800fed2:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fed6:	f00c be27 	b.w	801cb28 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800feda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d106      	bne.n	800fef0 <tcp_recved+0x30>
 800fee2:	4b14      	ldr	r3, [pc, #80]	; (800ff34 <tcp_recved+0x74>)
 800fee4:	4916      	ldr	r1, [pc, #88]	; (800ff40 <tcp_recved+0x80>)
 800fee6:	4815      	ldr	r0, [pc, #84]	; (800ff3c <tcp_recved+0x7c>)
 800fee8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800feec:	f00c fe1c 	bl	801cb28 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fef0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800fef4:	1911      	adds	r1, r2, r4
 800fef6:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fef8:	f640 3368 	movw	r3, #2920	; 0xb68
 800fefc:	4299      	cmp	r1, r3
 800fefe:	d816      	bhi.n	800ff2e <tcp_recved+0x6e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ff00:	428a      	cmp	r2, r1
 800ff02:	bf88      	it	hi
 800ff04:	4619      	movhi	r1, r3
 800ff06:	f8a5 1050 	strh.w	r1, [r5, #80]	; 0x50
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f7ff ff9c 	bl	800fe48 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ff10:	f240 23d9 	movw	r3, #729	; 0x2d9
 800ff14:	4298      	cmp	r0, r3
 800ff16:	d90c      	bls.n	800ff32 <tcp_recved+0x72>
    tcp_ack_now(pcb);
 800ff18:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800ff1c:	f043 0302 	orr.w	r3, r3, #2
 800ff20:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    tcp_output(pcb);
 800ff24:	4628      	mov	r0, r5
}
 800ff26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800ff2a:	f003 b9df 	b.w	80132ec <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ff2e:	4619      	mov	r1, r3
 800ff30:	e7e9      	b.n	800ff06 <tcp_recved+0x46>
}
 800ff32:	bd70      	pop	{r4, r5, r6, pc}
 800ff34:	0802d775 	.word	0x0802d775
 800ff38:	0802d8da 	.word	0x0802d8da
 800ff3c:	0802aecf 	.word	0x0802aecf
 800ff40:	0802d8f2 	.word	0x0802d8f2

0800ff44 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ff44:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800ff46:	4604      	mov	r4, r0
 800ff48:	b148      	cbz	r0, 800ff5e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800ff4a:	6840      	ldr	r0, [r0, #4]
 800ff4c:	b108      	cbz	r0, 800ff52 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800ff4e:	f7ff fa17 	bl	800f380 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ff52:	4621      	mov	r1, r4
 800ff54:	2003      	movs	r0, #3
  }
}
 800ff56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800ff5a:	f7fe bea3 	b.w	800eca4 <memp_free>
}
 800ff5e:	bd10      	pop	{r4, pc}

0800ff60 <tcp_segs_free>:
{
 800ff60:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800ff62:	b900      	cbnz	r0, 800ff66 <tcp_segs_free+0x6>
}
 800ff64:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800ff66:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800ff68:	f7ff ffec 	bl	800ff44 <tcp_seg_free>
    seg = next;
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	e7f8      	b.n	800ff62 <tcp_segs_free+0x2>

0800ff70 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ff70:	b100      	cbz	r0, 800ff74 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ff72:	6381      	str	r1, [r0, #56]	; 0x38
  }
}
 800ff74:	4770      	bx	lr
	...

0800ff78 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	b160      	cbz	r0, 800ff9a <tcp_recv+0x22>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ff80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d106      	bne.n	800ff96 <tcp_recv+0x1e>
 800ff88:	4b04      	ldr	r3, [pc, #16]	; (800ff9c <tcp_recv+0x24>)
 800ff8a:	4905      	ldr	r1, [pc, #20]	; (800ffa0 <tcp_recv+0x28>)
 800ff8c:	4805      	ldr	r0, [pc, #20]	; (800ffa4 <tcp_recv+0x2c>)
 800ff8e:	f240 72df 	movw	r2, #2015	; 0x7df
 800ff92:	f00c fdc9 	bl	801cb28 <iprintf>
    pcb->recv = recv;
 800ff96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
  }
}
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	0802d775 	.word	0x0802d775
 800ffa0:	0802d931 	.word	0x0802d931
 800ffa4:	0802aecf 	.word	0x0802aecf

0800ffa8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ffac:	4604      	mov	r4, r0
 800ffae:	b160      	cbz	r0, 800ffca <tcp_sent+0x22>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ffb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d106      	bne.n	800ffc6 <tcp_sent+0x1e>
 800ffb8:	4b04      	ldr	r3, [pc, #16]	; (800ffcc <tcp_sent+0x24>)
 800ffba:	4905      	ldr	r1, [pc, #20]	; (800ffd0 <tcp_sent+0x28>)
 800ffbc:	4805      	ldr	r0, [pc, #20]	; (800ffd4 <tcp_sent+0x2c>)
 800ffbe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ffc2:	f00c fdb1 	bl	801cb28 <iprintf>
    pcb->sent = sent;
 800ffc6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
  }
}
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	0802d775 	.word	0x0802d775
 800ffd0:	0802d958 	.word	0x0802d958
 800ffd4:	0802aecf 	.word	0x0802aecf

0800ffd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ffd8:	b538      	push	{r3, r4, r5, lr}
 800ffda:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ffdc:	4604      	mov	r4, r0
 800ffde:	b160      	cbz	r0, 800fffa <tcp_err+0x22>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ffe0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d106      	bne.n	800fff6 <tcp_err+0x1e>
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <tcp_err+0x24>)
 800ffea:	4905      	ldr	r1, [pc, #20]	; (8010000 <tcp_err+0x28>)
 800ffec:	4805      	ldr	r0, [pc, #20]	; (8010004 <tcp_err+0x2c>)
 800ffee:	f640 020d 	movw	r2, #2061	; 0x80d
 800fff2:	f00c fd99 	bl	801cb28 <iprintf>
    pcb->errf = err;
 800fff6:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  }
}
 800fffa:	bd38      	pop	{r3, r4, r5, pc}
 800fffc:	0802d775 	.word	0x0802d775
 8010000:	0802d97f 	.word	0x0802d97f
 8010004:	0802aecf 	.word	0x0802aecf

08010008 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010008:	b120      	cbz	r0, 8010014 <tcp_accept+0xc>
 801000a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801000e:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8010010:	bf08      	it	eq
 8010012:	6401      	streq	r1, [r0, #64]	; 0x40
  }
}
 8010014:	4770      	bx	lr
	...

08010018 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	460e      	mov	r6, r1
 801001c:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801001e:	4604      	mov	r4, r0
 8010020:	b940      	cbnz	r0, 8010034 <tcp_poll+0x1c>
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8010022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010026:	4b0b      	ldr	r3, [pc, #44]	; (8010054 <tcp_poll+0x3c>)
 8010028:	490b      	ldr	r1, [pc, #44]	; (8010058 <tcp_poll+0x40>)
 801002a:	480c      	ldr	r0, [pc, #48]	; (801005c <tcp_poll+0x44>)
 801002c:	f640 023d 	movw	r2, #2109	; 0x83d
 8010030:	f00c bd7a 	b.w	801cb28 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010034:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010038:	2b01      	cmp	r3, #1
 801003a:	d106      	bne.n	801004a <tcp_poll+0x32>
 801003c:	4b05      	ldr	r3, [pc, #20]	; (8010054 <tcp_poll+0x3c>)
 801003e:	4908      	ldr	r1, [pc, #32]	; (8010060 <tcp_poll+0x48>)
 8010040:	4806      	ldr	r0, [pc, #24]	; (801005c <tcp_poll+0x44>)
 8010042:	f640 023e 	movw	r2, #2110	; 0x83e
 8010046:	f00c fd6f 	bl	801cb28 <iprintf>
  pcb->pollinterval = interval;
 801004a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  pcb->poll = poll;
 801004e:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
}
 8010052:	bd70      	pop	{r4, r5, r6, pc}
 8010054:	0802d775 	.word	0x0802d775
 8010058:	0802d9a5 	.word	0x0802d9a5
 801005c:	0802aecf 	.word	0x0802aecf
 8010060:	0802d9bb 	.word	0x0802d9bb

08010064 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010064:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010066:	4604      	mov	r4, r0
 8010068:	b940      	cbnz	r0, 801007c <tcp_pcb_purge+0x18>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 801006a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801006e:	4b13      	ldr	r3, [pc, #76]	; (80100bc <tcp_pcb_purge+0x58>)
 8010070:	4913      	ldr	r1, [pc, #76]	; (80100c0 <tcp_pcb_purge+0x5c>)
 8010072:	4814      	ldr	r0, [pc, #80]	; (80100c4 <tcp_pcb_purge+0x60>)
 8010074:	f640 0251 	movw	r2, #2129	; 0x851
 8010078:	f00c bd56 	b.w	801cb28 <iprintf>
  if (pcb->state != CLOSED &&
 801007c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010080:	2b01      	cmp	r3, #1
 8010082:	d91a      	bls.n	80100ba <tcp_pcb_purge+0x56>
 8010084:	2b0a      	cmp	r3, #10
 8010086:	d018      	beq.n	80100ba <tcp_pcb_purge+0x56>
    if (pcb->refused_data != NULL) {
 8010088:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 801008c:	b120      	cbz	r0, 8010098 <tcp_pcb_purge+0x34>
      pbuf_free(pcb->refused_data);
 801008e:	f7ff f977 	bl	800f380 <pbuf_free>
      pcb->refused_data = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    pcb->rtime = -1;
 8010098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801009c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    tcp_segs_free(pcb->unsent);
 80100a0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80100a4:	f7ff ff5c 	bl	800ff60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80100a8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80100ac:	f7ff ff58 	bl	800ff60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80100b0:	2300      	movs	r3, #0
 80100b2:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
    pcb->unsent_oversize = 0;
 80100b6:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
}
 80100ba:	bd10      	pop	{r4, pc}
 80100bc:	0802d775 	.word	0x0802d775
 80100c0:	0802d9d9 	.word	0x0802d9d9
 80100c4:	0802aecf 	.word	0x0802aecf

080100c8 <tcp_slowtmr>:
{
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80100cc:	4eba      	ldr	r6, [pc, #744]	; (80103b8 <tcp_slowtmr+0x2f0>)
 80100ce:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80103c4 <tcp_slowtmr+0x2fc>
 80100d2:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80100d4:	4fb9      	ldr	r7, [pc, #740]	; (80103bc <tcp_slowtmr+0x2f4>)
  ++tcp_ticks;
 80100d6:	3301      	adds	r3, #1
 80100d8:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80100da:	4bb9      	ldr	r3, [pc, #740]	; (80103c0 <tcp_slowtmr+0x2f8>)
 80100dc:	781a      	ldrb	r2, [r3, #0]
{
 80100de:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80100e0:	3201      	adds	r2, #1
 80100e2:	701a      	strb	r2, [r3, #0]
 80100e4:	9304      	str	r3, [sp, #16]
  pcb = tcp_active_pcbs;
 80100e6:	4bb7      	ldr	r3, [pc, #732]	; (80103c4 <tcp_slowtmr+0x2fc>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80100e8:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80103ec <tcp_slowtmr+0x324>
  pcb = tcp_active_pcbs;
 80100ec:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 80100ee:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 80100f2:	b96c      	cbnz	r4, 8010110 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 80100f4:	4fb4      	ldr	r7, [pc, #720]	; (80103c8 <tcp_slowtmr+0x300>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100f6:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 80103bc <tcp_slowtmr+0x2f4>
  pcb = tcp_tw_pcbs;
 80100fa:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100fc:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80103f0 <tcp_slowtmr+0x328>
 8010100:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 80103ec <tcp_slowtmr+0x324>
  while (pcb != NULL) {
 8010104:	2d00      	cmp	r5, #0
 8010106:	f040 81c3 	bne.w	8010490 <tcp_slowtmr+0x3c8>
}
 801010a:	b007      	add	sp, #28
 801010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010110:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010114:	b933      	cbnz	r3, 8010124 <tcp_slowtmr+0x5c>
 8010116:	49ad      	ldr	r1, [pc, #692]	; (80103cc <tcp_slowtmr+0x304>)
 8010118:	463b      	mov	r3, r7
 801011a:	f240 42be 	movw	r2, #1214	; 0x4be
 801011e:	4640      	mov	r0, r8
 8010120:	f00c fd02 	bl	801cb28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010124:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010128:	2b01      	cmp	r3, #1
 801012a:	d106      	bne.n	801013a <tcp_slowtmr+0x72>
 801012c:	49a8      	ldr	r1, [pc, #672]	; (80103d0 <tcp_slowtmr+0x308>)
 801012e:	463b      	mov	r3, r7
 8010130:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010134:	4640      	mov	r0, r8
 8010136:	f00c fcf7 	bl	801cb28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801013a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801013e:	2b0a      	cmp	r3, #10
 8010140:	d106      	bne.n	8010150 <tcp_slowtmr+0x88>
 8010142:	49a4      	ldr	r1, [pc, #656]	; (80103d4 <tcp_slowtmr+0x30c>)
 8010144:	463b      	mov	r3, r7
 8010146:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801014a:	4640      	mov	r0, r8
 801014c:	f00c fcec 	bl	801cb28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010150:	9b04      	ldr	r3, [sp, #16]
 8010152:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	429a      	cmp	r2, r3
 801015a:	d103      	bne.n	8010164 <tcp_slowtmr+0x9c>
      pcb = pcb->next;
 801015c:	6b65      	ldr	r5, [r4, #52]	; 0x34
      continue;
 801015e:	46a1      	mov	r9, r4
 8010160:	462c      	mov	r4, r5
 8010162:	e7c6      	b.n	80100f2 <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010164:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    pcb->last_timer = tcp_timer_ctr;
 8010168:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801016c:	2a02      	cmp	r2, #2
 801016e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8010172:	d17e      	bne.n	8010272 <tcp_slowtmr+0x1aa>
 8010174:	2b05      	cmp	r3, #5
 8010176:	d97e      	bls.n	8010276 <tcp_slowtmr+0x1ae>
      ++pcb_remove;
 8010178:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 801017c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010180:	2b06      	cmp	r3, #6
 8010182:	d10c      	bne.n	801019e <tcp_slowtmr+0xd6>
      if (pcb->flags & TF_RXCLOSED) {
 8010184:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8010188:	06d2      	lsls	r2, r2, #27
 801018a:	d508      	bpl.n	801019e <tcp_slowtmr+0xd6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801018c:	6832      	ldr	r2, [r6, #0]
 801018e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010190:	1a52      	subs	r2, r2, r1
 8010192:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8010194:	bf84      	itt	hi
 8010196:	f10b 0b01 	addhi.w	fp, fp, #1
 801019a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801019e:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 80101a2:	f015 0508 	ands.w	r5, r5, #8
 80101a6:	d019      	beq.n	80101dc <tcp_slowtmr+0x114>
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d002      	beq.n	80101b2 <tcp_slowtmr+0xea>
        ((pcb->state == ESTABLISHED) ||
 80101ac:	2b07      	cmp	r3, #7
 80101ae:	f040 8133 	bne.w	8010418 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101b2:	6831      	ldr	r1, [r6, #0]
 80101b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80101b6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101ba:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80101bc:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80101c0:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80101c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80101c8:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101cc:	4291      	cmp	r1, r2
 80101ce:	f240 8111 	bls.w	80103f4 <tcp_slowtmr+0x32c>
        ++pcb_remove;
 80101d2:	f10b 0b01 	add.w	fp, fp, #1
 80101d6:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80101da:	2501      	movs	r5, #1
    if (pcb->state == SYN_RCVD) {
 80101dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	f040 811b 	bne.w	801041c <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101e6:	6833      	ldr	r3, [r6, #0]
 80101e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80101ea:	1a9b      	subs	r3, r3, r2
 80101ec:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80101ee:	d803      	bhi.n	80101f8 <tcp_slowtmr+0x130>
    if (pcb_remove) {
 80101f0:	f1bb 0f00 	cmp.w	fp, #0
 80101f4:	f000 8127 	beq.w	8010446 <tcp_slowtmr+0x37e>
      tcp_pcb_purge(pcb);
 80101f8:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80101fa:	f8d4 b0b4 	ldr.w	fp, [r4, #180]	; 0xb4
      tcp_pcb_purge(pcb);
 80101fe:	f7ff ff31 	bl	8010064 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010202:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 8010206:	f1b9 0f00 	cmp.w	r9, #0
 801020a:	f000 810f 	beq.w	801042c <tcp_slowtmr+0x364>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801020e:	42a3      	cmp	r3, r4
 8010210:	d106      	bne.n	8010220 <tcp_slowtmr+0x158>
 8010212:	4971      	ldr	r1, [pc, #452]	; (80103d8 <tcp_slowtmr+0x310>)
 8010214:	463b      	mov	r3, r7
 8010216:	f240 526d 	movw	r2, #1389	; 0x56d
 801021a:	4640      	mov	r0, r8
 801021c:	f00c fc84 	bl	801cb28 <iprintf>
        prev->next = pcb->next;
 8010220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010222:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
      if (pcb_reset) {
 8010226:	b16d      	cbz	r5, 8010244 <tcp_slowtmr+0x17c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010228:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801022c:	9302      	str	r3, [sp, #8]
 801022e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010230:	9301      	str	r3, [sp, #4]
 8010232:	f104 0318 	add.w	r3, r4, #24
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801023a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 801023c:	4623      	mov	r3, r4
 801023e:	4620      	mov	r0, r4
 8010240:	f002 ffd6 	bl	80131f0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      pcb = pcb->next;
 8010246:	6b65      	ldr	r5, [r4, #52]	; 0x34
      err_arg = pcb->callback_arg;
 8010248:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 801024a:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 801024c:	4c63      	ldr	r4, [pc, #396]	; (80103dc <tcp_slowtmr+0x314>)
      tcp_free(pcb2);
 801024e:	f7ff fc65 	bl	800fb1c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010252:	2200      	movs	r2, #0
 8010254:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010256:	f1bb 0f00 	cmp.w	fp, #0
 801025a:	d008      	beq.n	801026e <tcp_slowtmr+0x1a6>
 801025c:	9b05      	ldr	r3, [sp, #20]
 801025e:	f06f 010c 	mvn.w	r1, #12
 8010262:	4618      	mov	r0, r3
 8010264:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8010266:	7823      	ldrb	r3, [r4, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	f47f af3c 	bne.w	80100e6 <tcp_slowtmr+0x1e>
 801026e:	464c      	mov	r4, r9
 8010270:	e775      	b.n	801015e <tcp_slowtmr+0x96>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010272:	2b0b      	cmp	r3, #11
 8010274:	e77f      	b.n	8010176 <tcp_slowtmr+0xae>
      if (pcb->persist_backoff > 0) {
 8010276:	f894 b0bd 	ldrb.w	fp, [r4, #189]	; 0xbd
 801027a:	f1bb 0f00 	cmp.w	fp, #0
 801027e:	d047      	beq.n	8010310 <tcp_slowtmr+0x248>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010280:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8010284:	b133      	cbz	r3, 8010294 <tcp_slowtmr+0x1cc>
 8010286:	4956      	ldr	r1, [pc, #344]	; (80103e0 <tcp_slowtmr+0x318>)
 8010288:	463b      	mov	r3, r7
 801028a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801028e:	4640      	mov	r0, r8
 8010290:	f00c fc4a 	bl	801cb28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010294:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8010298:	b933      	cbnz	r3, 80102a8 <tcp_slowtmr+0x1e0>
 801029a:	4952      	ldr	r1, [pc, #328]	; (80103e4 <tcp_slowtmr+0x31c>)
 801029c:	463b      	mov	r3, r7
 801029e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80102a2:	4640      	mov	r0, r8
 80102a4:	f00c fc40 	bl	801cb28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80102a8:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 80102ac:	2b0b      	cmp	r3, #11
 80102ae:	f63f af63 	bhi.w	8010178 <tcp_slowtmr+0xb0>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80102b2:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
 80102b6:	4b4c      	ldr	r3, [pc, #304]	; (80103e8 <tcp_slowtmr+0x320>)
 80102b8:	4413      	add	r3, r2
 80102ba:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 80102bc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d30b      	bcc.n	80102dc <tcp_slowtmr+0x214>
            if (pcb->snd_wnd == 0) {
 80102c4:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 80102c8:	b189      	cbz	r1, 80102ee <tcp_slowtmr+0x226>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80102ca:	4620      	mov	r0, r4
 80102cc:	f002 fd28 	bl	8012d20 <tcp_split_unsent_seg>
 80102d0:	b990      	cbnz	r0, 80102f8 <tcp_slowtmr+0x230>
                if (tcp_output(pcb) == ERR_OK) {
 80102d2:	4620      	mov	r0, r4
 80102d4:	f003 f80a 	bl	80132ec <tcp_output>
 80102d8:	b130      	cbz	r0, 80102e8 <tcp_slowtmr+0x220>
 80102da:	e00d      	b.n	80102f8 <tcp_slowtmr+0x230>
            pcb->persist_cnt++;
 80102dc:	3301      	adds	r3, #1
 80102de:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80102e0:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80102e2:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
          if (pcb->persist_cnt >= backoff_cnt) {
 80102e6:	d2ed      	bcs.n	80102c4 <tcp_slowtmr+0x1fc>
    pcb_remove = 0;
 80102e8:	f04f 0b00 	mov.w	fp, #0
 80102ec:	e746      	b.n	801017c <tcp_slowtmr+0xb4>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80102ee:	4620      	mov	r0, r4
 80102f0:	f003 fa56 	bl	80137a0 <tcp_zero_window_probe>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d1f7      	bne.n	80102e8 <tcp_slowtmr+0x220>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80102f8:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
              pcb->persist_cnt = 0;
 80102fc:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010300:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8010302:	f884 b0bc 	strb.w	fp, [r4, #188]	; 0xbc
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010306:	d8ef      	bhi.n	80102e8 <tcp_slowtmr+0x220>
                pcb->persist_backoff++;
 8010308:	3301      	adds	r3, #1
 801030a:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 801030e:	e735      	b.n	801017c <tcp_slowtmr+0xb4>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010310:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8010314:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010318:	4293      	cmp	r3, r2
          ++pcb->rtime;
 801031a:	bf9c      	itt	ls
 801031c:	3301      	addls	r3, #1
 801031e:	f8a4 3058 	strhls.w	r3, [r4, #88]	; 0x58
        if (pcb->rtime >= pcb->rto) {
 8010322:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 8010326:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801032a:	429a      	cmp	r2, r3
 801032c:	dbdc      	blt.n	80102e8 <tcp_slowtmr+0x220>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801032e:	4620      	mov	r0, r4
 8010330:	f002 fe98 	bl	8013064 <tcp_rexmit_rto_prepare>
 8010334:	b138      	cbz	r0, 8010346 <tcp_slowtmr+0x27e>
 8010336:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801033a:	2b00      	cmp	r3, #0
 801033c:	d1d4      	bne.n	80102e8 <tcp_slowtmr+0x220>
 801033e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8010342:	2b00      	cmp	r3, #0
 8010344:	d0d0      	beq.n	80102e8 <tcp_slowtmr+0x220>
            if (pcb->state != SYN_SENT) {
 8010346:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801034a:	2b02      	cmp	r3, #2
 801034c:	d015      	beq.n	801037a <tcp_slowtmr+0x2b2>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801034e:	f9b4 2064 	ldrsh.w	r2, [r4, #100]	; 0x64
 8010352:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010356:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801035a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 801035e:	4a22      	ldr	r2, [pc, #136]	; (80103e8 <tcp_slowtmr+0x320>)
 8010360:	290c      	cmp	r1, #12
 8010362:	bf94      	ite	ls
 8010364:	1852      	addls	r2, r2, r1
 8010366:	320c      	addhi	r2, #12
 8010368:	7dd2      	ldrb	r2, [r2, #23]
 801036a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801036c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010370:	4293      	cmp	r3, r2
 8010372:	bfa8      	it	ge
 8010374:	4613      	movge	r3, r2
 8010376:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801037a:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
 801037e:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010382:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
            pcb->cwnd = pcb->mss;
 8010386:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
            pcb->ssthresh = eff_wnd >> 1;
 801038a:	429a      	cmp	r2, r3
 801038c:	bf28      	it	cs
 801038e:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010390:	006b      	lsls	r3, r5, #1
 8010392:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 8010394:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010396:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
            pcb->rtime = 0;
 801039a:	f04f 0000 	mov.w	r0, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801039e:	bf98      	it	ls
 80103a0:	460b      	movls	r3, r1
            pcb->rtime = 0;
 80103a2:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
            pcb->bytes_acked = 0;
 80103a6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80103aa:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
            tcp_rexmit_rto_commit(pcb);
 80103ae:	4620      	mov	r0, r4
 80103b0:	f003 f996 	bl	80136e0 <tcp_rexmit_rto_commit>
 80103b4:	e6e2      	b.n	801017c <tcp_slowtmr+0xb4>
 80103b6:	bf00      	nop
 80103b8:	20016118 	.word	0x20016118
 80103bc:	0802d775 	.word	0x0802d775
 80103c0:	20007055 	.word	0x20007055
 80103c4:	20016114 	.word	0x20016114
 80103c8:	20016124 	.word	0x20016124
 80103cc:	0802d9f4 	.word	0x0802d9f4
 80103d0:	0802da1e 	.word	0x0802da1e
 80103d4:	0802da48 	.word	0x0802da48
 80103d8:	0802dadc 	.word	0x0802dadc
 80103dc:	20016110 	.word	0x20016110
 80103e0:	0802da75 	.word	0x0802da75
 80103e4:	0802daa7 	.word	0x0802daa7
 80103e8:	0801fdc4 	.word	0x0801fdc4
 80103ec:	0802aecf 	.word	0x0802aecf
 80103f0:	0802db31 	.word	0x0802db31
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80103f4:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
 80103f8:	4a41      	ldr	r2, [pc, #260]	; (8010500 <tcp_slowtmr+0x438>)
 80103fa:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 80103fe:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010402:	4299      	cmp	r1, r3
 8010404:	d908      	bls.n	8010418 <tcp_slowtmr+0x350>
        err = tcp_keepalive(pcb);
 8010406:	4620      	mov	r0, r4
 8010408:	f003 f9a0 	bl	801374c <tcp_keepalive>
        if (err == ERR_OK) {
 801040c:	b920      	cbnz	r0, 8010418 <tcp_slowtmr+0x350>
          pcb->keep_cnt_sent++;
 801040e:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
 8010412:	3301      	adds	r3, #1
 8010414:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    pcb_reset = 0;
 8010418:	2500      	movs	r5, #0
 801041a:	e6df      	b.n	80101dc <tcp_slowtmr+0x114>
    if (pcb->state == LAST_ACK) {
 801041c:	2b09      	cmp	r3, #9
 801041e:	f47f aee7 	bne.w	80101f0 <tcp_slowtmr+0x128>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010422:	6833      	ldr	r3, [r6, #0]
 8010424:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010426:	1a9b      	subs	r3, r3, r2
 8010428:	2bf0      	cmp	r3, #240	; 0xf0
 801042a:	e6e0      	b.n	80101ee <tcp_slowtmr+0x126>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801042c:	42a3      	cmp	r3, r4
 801042e:	d006      	beq.n	801043e <tcp_slowtmr+0x376>
 8010430:	4934      	ldr	r1, [pc, #208]	; (8010504 <tcp_slowtmr+0x43c>)
 8010432:	463b      	mov	r3, r7
 8010434:	f240 5271 	movw	r2, #1393	; 0x571
 8010438:	4640      	mov	r0, r8
 801043a:	f00c fb75 	bl	801cb28 <iprintf>
        tcp_active_pcbs = pcb->next;
 801043e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010440:	f8ca 3000 	str.w	r3, [sl]
 8010444:	e6ef      	b.n	8010226 <tcp_slowtmr+0x15e>
      ++prev->polltmr;
 8010446:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
      if (prev->polltmr >= prev->pollinterval) {
 801044a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
      pcb = pcb->next;
 801044e:	6b65      	ldr	r5, [r4, #52]	; 0x34
      ++prev->polltmr;
 8010450:	3301      	adds	r3, #1
 8010452:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8010454:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8010456:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (prev->polltmr >= prev->pollinterval) {
 801045a:	f63f ae80 	bhi.w	801015e <tcp_slowtmr+0x96>
        tcp_active_pcbs_changed = 0;
 801045e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8010510 <tcp_slowtmr+0x448>
        TCP_EVENT_POLL(prev, err);
 8010462:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
        prev->polltmr = 0;
 8010466:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
        tcp_active_pcbs_changed = 0;
 801046a:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 801046e:	b91b      	cbnz	r3, 8010478 <tcp_slowtmr+0x3b0>
          tcp_output(prev);
 8010470:	4620      	mov	r0, r4
 8010472:	f002 ff3b 	bl	80132ec <tcp_output>
 8010476:	e672      	b.n	801015e <tcp_slowtmr+0x96>
        TCP_EVENT_POLL(prev, err);
 8010478:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801047a:	4621      	mov	r1, r4
 801047c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801047e:	f899 3000 	ldrb.w	r3, [r9]
 8010482:	2b00      	cmp	r3, #0
 8010484:	f47f ae2f 	bne.w	80100e6 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8010488:	2800      	cmp	r0, #0
 801048a:	f47f ae68 	bne.w	801015e <tcp_slowtmr+0x96>
 801048e:	e7ef      	b.n	8010470 <tcp_slowtmr+0x3a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010490:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010494:	2b0a      	cmp	r3, #10
 8010496:	d006      	beq.n	80104a6 <tcp_slowtmr+0x3de>
 8010498:	4643      	mov	r3, r8
 801049a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801049e:	4651      	mov	r1, sl
 80104a0:	4648      	mov	r0, r9
 80104a2:	f00c fb41 	bl	801cb28 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104a6:	6833      	ldr	r3, [r6, #0]
 80104a8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	2bf0      	cmp	r3, #240	; 0xf0
 80104ae:	d910      	bls.n	80104d2 <tcp_slowtmr+0x40a>
      tcp_pcb_purge(pcb);
 80104b0:	4628      	mov	r0, r5
 80104b2:	f7ff fdd7 	bl	8010064 <tcp_pcb_purge>
      if (prev != NULL) {
 80104b6:	b97c      	cbnz	r4, 80104d8 <tcp_slowtmr+0x410>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	42ab      	cmp	r3, r5
 80104bc:	d006      	beq.n	80104cc <tcp_slowtmr+0x404>
 80104be:	4912      	ldr	r1, [pc, #72]	; (8010508 <tcp_slowtmr+0x440>)
 80104c0:	4643      	mov	r3, r8
 80104c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80104c6:	4648      	mov	r0, r9
 80104c8:	f00c fb2e 	bl	801cb28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80104cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	e00e      	b.n	80104f0 <tcp_slowtmr+0x428>
      pcb = pcb->next;
 80104d2:	462c      	mov	r4, r5
 80104d4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80104d6:	e615      	b.n	8010104 <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	42ab      	cmp	r3, r5
 80104dc:	d106      	bne.n	80104ec <tcp_slowtmr+0x424>
 80104de:	490b      	ldr	r1, [pc, #44]	; (801050c <tcp_slowtmr+0x444>)
 80104e0:	4643      	mov	r3, r8
 80104e2:	f240 52af 	movw	r2, #1455	; 0x5af
 80104e6:	4648      	mov	r0, r9
 80104e8:	f00c fb1e 	bl	801cb28 <iprintf>
        prev->next = pcb->next;
 80104ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80104ee:	6363      	str	r3, [r4, #52]	; 0x34
      pcb = pcb->next;
 80104f0:	f8d5 b034 	ldr.w	fp, [r5, #52]	; 0x34
      tcp_free(pcb2);
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7ff fb11 	bl	800fb1c <tcp_free>
      pcb = pcb->next;
 80104fa:	465d      	mov	r5, fp
 80104fc:	e602      	b.n	8010104 <tcp_slowtmr+0x3c>
 80104fe:	bf00      	nop
 8010500:	000124f8 	.word	0x000124f8
 8010504:	0802db07 	.word	0x0802db07
 8010508:	0802db87 	.word	0x0802db87
 801050c:	0802db60 	.word	0x0802db60
 8010510:	20016110 	.word	0x20016110

08010514 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010514:	b538      	push	{r3, r4, r5, lr}
 8010516:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010518:	460c      	mov	r4, r1
 801051a:	b931      	cbnz	r1, 801052a <tcp_pcb_remove+0x16>
 801051c:	4b28      	ldr	r3, [pc, #160]	; (80105c0 <tcp_pcb_remove+0xac>)
 801051e:	4929      	ldr	r1, [pc, #164]	; (80105c4 <tcp_pcb_remove+0xb0>)
 8010520:	4829      	ldr	r0, [pc, #164]	; (80105c8 <tcp_pcb_remove+0xb4>)
 8010522:	f640 0283 	movw	r2, #2179	; 0x883
 8010526:	f00c faff 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801052a:	b935      	cbnz	r5, 801053a <tcp_pcb_remove+0x26>
 801052c:	4b24      	ldr	r3, [pc, #144]	; (80105c0 <tcp_pcb_remove+0xac>)
 801052e:	4927      	ldr	r1, [pc, #156]	; (80105cc <tcp_pcb_remove+0xb8>)
 8010530:	4825      	ldr	r0, [pc, #148]	; (80105c8 <tcp_pcb_remove+0xb4>)
 8010532:	f640 0284 	movw	r2, #2180	; 0x884
 8010536:	f00c faf7 	bl	801cb28 <iprintf>

  TCP_RMV(pcblist, pcb);
 801053a:	682b      	ldr	r3, [r5, #0]
 801053c:	42a3      	cmp	r3, r4
 801053e:	d119      	bne.n	8010574 <tcp_pcb_remove+0x60>
 8010540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010542:	602b      	str	r3, [r5, #0]
 8010544:	2300      	movs	r3, #0
 8010546:	6363      	str	r3, [r4, #52]	; 0x34

  tcp_pcb_purge(pcb);
 8010548:	4620      	mov	r0, r4
 801054a:	f7ff fd8b 	bl	8010064 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801054e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010552:	2b0a      	cmp	r3, #10
 8010554:	d116      	bne.n	8010584 <tcp_pcb_remove+0x70>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010556:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801055a:	bb4b      	cbnz	r3, 80105b0 <tcp_pcb_remove+0x9c>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801055c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8010560:	b30b      	cbz	r3, 80105a6 <tcp_pcb_remove+0x92>
 8010562:	4b17      	ldr	r3, [pc, #92]	; (80105c0 <tcp_pcb_remove+0xac>)
 8010564:	491a      	ldr	r1, [pc, #104]	; (80105d0 <tcp_pcb_remove+0xbc>)
 8010566:	4818      	ldr	r0, [pc, #96]	; (80105c8 <tcp_pcb_remove+0xb4>)
 8010568:	f640 0294 	movw	r2, #2196	; 0x894
 801056c:	f00c fadc 	bl	801cb28 <iprintf>
 8010570:	e019      	b.n	80105a6 <tcp_pcb_remove+0x92>
 8010572:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8010574:	2b00      	cmp	r3, #0
 8010576:	d0e5      	beq.n	8010544 <tcp_pcb_remove+0x30>
 8010578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801057a:	42a2      	cmp	r2, r4
 801057c:	d1f9      	bne.n	8010572 <tcp_pcb_remove+0x5e>
 801057e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010580:	635a      	str	r2, [r3, #52]	; 0x34
 8010582:	e7df      	b.n	8010544 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8010584:	2b01      	cmp	r3, #1
 8010586:	d00e      	beq.n	80105a6 <tcp_pcb_remove+0x92>
      (pcb->flags & TF_ACK_DELAY)) {
 8010588:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
      (pcb->state != LISTEN) &&
 801058c:	07da      	lsls	r2, r3, #31
 801058e:	d5e2      	bpl.n	8010556 <tcp_pcb_remove+0x42>
    tcp_ack_now(pcb);
 8010590:	f043 0302 	orr.w	r3, r3, #2
 8010594:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 8010598:	4620      	mov	r0, r4
 801059a:	f002 fea7 	bl	80132ec <tcp_output>
  if (pcb->state != LISTEN) {
 801059e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d1d7      	bne.n	8010556 <tcp_pcb_remove+0x42>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80105ac:	87e3      	strh	r3, [r4, #62]	; 0x3e

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80105b0:	4b03      	ldr	r3, [pc, #12]	; (80105c0 <tcp_pcb_remove+0xac>)
 80105b2:	4908      	ldr	r1, [pc, #32]	; (80105d4 <tcp_pcb_remove+0xc0>)
 80105b4:	4804      	ldr	r0, [pc, #16]	; (80105c8 <tcp_pcb_remove+0xb4>)
 80105b6:	f640 0293 	movw	r2, #2195	; 0x893
 80105ba:	f00c fab5 	bl	801cb28 <iprintf>
 80105be:	e7cd      	b.n	801055c <tcp_pcb_remove+0x48>
 80105c0:	0802d775 	.word	0x0802d775
 80105c4:	0802dbad 	.word	0x0802dbad
 80105c8:	0802aecf 	.word	0x0802aecf
 80105cc:	0802dbc9 	.word	0x0802dbc9
 80105d0:	0802dc01 	.word	0x0802dc01
 80105d4:	0802dbe9 	.word	0x0802dbe9

080105d8 <tcp_close_shutdown>:
{
 80105d8:	b530      	push	{r4, r5, lr}
 80105da:	460d      	mov	r5, r1
 80105dc:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80105de:	4604      	mov	r4, r0
 80105e0:	b930      	cbnz	r0, 80105f0 <tcp_close_shutdown+0x18>
 80105e2:	4b50      	ldr	r3, [pc, #320]	; (8010724 <tcp_close_shutdown+0x14c>)
 80105e4:	4950      	ldr	r1, [pc, #320]	; (8010728 <tcp_close_shutdown+0x150>)
 80105e6:	4851      	ldr	r0, [pc, #324]	; (801072c <tcp_close_shutdown+0x154>)
 80105e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80105ec:	f00c fa9c 	bl	801cb28 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80105f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80105f4:	2d00      	cmp	r5, #0
 80105f6:	d045      	beq.n	8010684 <tcp_close_shutdown+0xac>
 80105f8:	2b04      	cmp	r3, #4
 80105fa:	d001      	beq.n	8010600 <tcp_close_shutdown+0x28>
 80105fc:	2b07      	cmp	r3, #7
 80105fe:	d141      	bne.n	8010684 <tcp_close_shutdown+0xac>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010600:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8010604:	b92a      	cbnz	r2, 8010612 <tcp_close_shutdown+0x3a>
 8010606:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801060a:	f640 3268 	movw	r2, #2920	; 0xb68
 801060e:	4291      	cmp	r1, r2
 8010610:	d038      	beq.n	8010684 <tcp_close_shutdown+0xac>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010612:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8010616:	06db      	lsls	r3, r3, #27
 8010618:	d406      	bmi.n	8010628 <tcp_close_shutdown+0x50>
 801061a:	4b42      	ldr	r3, [pc, #264]	; (8010724 <tcp_close_shutdown+0x14c>)
 801061c:	4944      	ldr	r1, [pc, #272]	; (8010730 <tcp_close_shutdown+0x158>)
 801061e:	4843      	ldr	r0, [pc, #268]	; (801072c <tcp_close_shutdown+0x154>)
 8010620:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010624:	f00c fa80 	bl	801cb28 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010628:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801062c:	9302      	str	r3, [sp, #8]
 801062e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	f104 0318 	add.w	r3, r4, #24
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801063a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 801063c:	4623      	mov	r3, r4
 801063e:	4620      	mov	r0, r4
 8010640:	f002 fdd6 	bl	80131f0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8010644:	4620      	mov	r0, r4
 8010646:	f7ff fd0d 	bl	8010064 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801064a:	4a3a      	ldr	r2, [pc, #232]	; (8010734 <tcp_close_shutdown+0x15c>)
 801064c:	6813      	ldr	r3, [r2, #0]
 801064e:	42a3      	cmp	r3, r4
 8010650:	d110      	bne.n	8010674 <tcp_close_shutdown+0x9c>
 8010652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010654:	6013      	str	r3, [r2, #0]
 8010656:	2300      	movs	r3, #0
 8010658:	6363      	str	r3, [r4, #52]	; 0x34
 801065a:	4b37      	ldr	r3, [pc, #220]	; (8010738 <tcp_close_shutdown+0x160>)
 801065c:	2201      	movs	r2, #1
 801065e:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8010660:	4b36      	ldr	r3, [pc, #216]	; (801073c <tcp_close_shutdown+0x164>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	42a3      	cmp	r3, r4
 8010666:	d11d      	bne.n	80106a4 <tcp_close_shutdown+0xcc>
        tcp_trigger_input_pcb_close();
 8010668:	f001 fefa 	bl	8012460 <tcp_trigger_input_pcb_close>
}
 801066c:	2000      	movs	r0, #0
 801066e:	b005      	add	sp, #20
 8010670:	bd30      	pop	{r4, r5, pc}
 8010672:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8010674:	2b00      	cmp	r3, #0
 8010676:	d0ee      	beq.n	8010656 <tcp_close_shutdown+0x7e>
 8010678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801067a:	42a2      	cmp	r2, r4
 801067c:	d1f9      	bne.n	8010672 <tcp_close_shutdown+0x9a>
 801067e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010680:	635a      	str	r2, [r3, #52]	; 0x34
 8010682:	e7e8      	b.n	8010656 <tcp_close_shutdown+0x7e>
  switch (pcb->state) {
 8010684:	2b01      	cmp	r3, #1
 8010686:	d01a      	beq.n	80106be <tcp_close_shutdown+0xe6>
 8010688:	2b02      	cmp	r3, #2
 801068a:	d03c      	beq.n	8010706 <tcp_close_shutdown+0x12e>
 801068c:	2b00      	cmp	r3, #0
 801068e:	d142      	bne.n	8010716 <tcp_close_shutdown+0x13e>
      if (pcb->local_port != 0) {
 8010690:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010692:	b13b      	cbz	r3, 80106a4 <tcp_close_shutdown+0xcc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010694:	4a2a      	ldr	r2, [pc, #168]	; (8010740 <tcp_close_shutdown+0x168>)
 8010696:	6813      	ldr	r3, [r2, #0]
 8010698:	42a3      	cmp	r3, r4
 801069a:	d108      	bne.n	80106ae <tcp_close_shutdown+0xd6>
 801069c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801069e:	6013      	str	r3, [r2, #0]
 80106a0:	2300      	movs	r3, #0
 80106a2:	6363      	str	r3, [r4, #52]	; 0x34
      tcp_free(pcb);
 80106a4:	4620      	mov	r0, r4
 80106a6:	f7ff fa39 	bl	800fb1c <tcp_free>
      break;
 80106aa:	e7df      	b.n	801066c <tcp_close_shutdown+0x94>
 80106ac:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0f6      	beq.n	80106a0 <tcp_close_shutdown+0xc8>
 80106b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106b4:	42a2      	cmp	r2, r4
 80106b6:	d1f9      	bne.n	80106ac <tcp_close_shutdown+0xd4>
 80106b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80106ba:	635a      	str	r2, [r3, #52]	; 0x34
 80106bc:	e7f0      	b.n	80106a0 <tcp_close_shutdown+0xc8>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80106be:	4921      	ldr	r1, [pc, #132]	; (8010744 <tcp_close_shutdown+0x16c>)
      pcb->listener = NULL;
 80106c0:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80106c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80106c6:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80106c8:	b9aa      	cbnz	r2, 80106f6 <tcp_close_shutdown+0x11e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80106ca:	3301      	adds	r3, #1
 80106cc:	2b04      	cmp	r3, #4
 80106ce:	d1f8      	bne.n	80106c2 <tcp_close_shutdown+0xea>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80106d0:	481d      	ldr	r0, [pc, #116]	; (8010748 <tcp_close_shutdown+0x170>)
 80106d2:	4621      	mov	r1, r4
 80106d4:	f7ff ff1e 	bl	8010514 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80106d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d105      	bne.n	80106ec <tcp_close_shutdown+0x114>
 80106e0:	4b10      	ldr	r3, [pc, #64]	; (8010724 <tcp_close_shutdown+0x14c>)
 80106e2:	491a      	ldr	r1, [pc, #104]	; (801074c <tcp_close_shutdown+0x174>)
 80106e4:	4811      	ldr	r0, [pc, #68]	; (801072c <tcp_close_shutdown+0x154>)
 80106e6:	22df      	movs	r2, #223	; 0xdf
 80106e8:	f00c fa1e 	bl	801cb28 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80106ec:	4621      	mov	r1, r4
 80106ee:	2002      	movs	r0, #2
 80106f0:	f7fe fad8 	bl	800eca4 <memp_free>
}
 80106f4:	e7ba      	b.n	801066c <tcp_close_shutdown+0x94>
    if (pcb->listener == lpcb) {
 80106f6:	f8d2 50a0 	ldr.w	r5, [r2, #160]	; 0xa0
 80106fa:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80106fc:	bf08      	it	eq
 80106fe:	f8c2 00a0 	streq.w	r0, [r2, #160]	; 0xa0
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010704:	e7e0      	b.n	80106c8 <tcp_close_shutdown+0xf0>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010706:	480b      	ldr	r0, [pc, #44]	; (8010734 <tcp_close_shutdown+0x15c>)
 8010708:	4621      	mov	r1, r4
 801070a:	f7ff ff03 	bl	8010514 <tcp_pcb_remove>
 801070e:	4b0a      	ldr	r3, [pc, #40]	; (8010738 <tcp_close_shutdown+0x160>)
 8010710:	2201      	movs	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]
 8010714:	e7c6      	b.n	80106a4 <tcp_close_shutdown+0xcc>
      return tcp_close_shutdown_fin(pcb);
 8010716:	4620      	mov	r0, r4
}
 8010718:	b005      	add	sp, #20
 801071a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801071e:	f7ff b9bd 	b.w	800fa9c <tcp_close_shutdown_fin>
 8010722:	bf00      	nop
 8010724:	0802d775 	.word	0x0802d775
 8010728:	0802dc1a 	.word	0x0802dc1a
 801072c:	0802aecf 	.word	0x0802aecf
 8010730:	0802dc3a 	.word	0x0802dc3a
 8010734:	20016114 	.word	0x20016114
 8010738:	20016110 	.word	0x20016110
 801073c:	20016128 	.word	0x20016128
 8010740:	20016120 	.word	0x20016120
 8010744:	0801fdc4 	.word	0x0801fdc4
 8010748:	2001611c 	.word	0x2001611c
 801074c:	0802dc53 	.word	0x0802dc53

08010750 <tcp_close>:
{
 8010750:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010752:	b170      	cbz	r0, 8010772 <tcp_close+0x22>
  if (pcb->state != LISTEN) {
 8010754:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010758:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 801075a:	bf1e      	ittt	ne
 801075c:	f8b0 3042 	ldrhne.w	r3, [r0, #66]	; 0x42
 8010760:	f043 0310 	orrne.w	r3, r3, #16
 8010764:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
  return tcp_close_shutdown(pcb, 1);
 8010768:	2101      	movs	r1, #1
}
 801076a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801076e:	f7ff bf33 	b.w	80105d8 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010772:	4b05      	ldr	r3, [pc, #20]	; (8010788 <tcp_close+0x38>)
 8010774:	4905      	ldr	r1, [pc, #20]	; (801078c <tcp_close+0x3c>)
 8010776:	4806      	ldr	r0, [pc, #24]	; (8010790 <tcp_close+0x40>)
 8010778:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801077c:	f00c f9d4 	bl	801cb28 <iprintf>
}
 8010780:	f06f 000f 	mvn.w	r0, #15
 8010784:	bd08      	pop	{r3, pc}
 8010786:	bf00      	nop
 8010788:	0802d775 	.word	0x0802d775
 801078c:	0802dc6c 	.word	0x0802dc6c
 8010790:	0802aecf 	.word	0x0802aecf

08010794 <tcp_recv_null>:
{
 8010794:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010796:	4608      	mov	r0, r1
{
 8010798:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801079a:	b949      	cbnz	r1, 80107b0 <tcp_recv_null+0x1c>
 801079c:	4b0c      	ldr	r3, [pc, #48]	; (80107d0 <tcp_recv_null+0x3c>)
 801079e:	490d      	ldr	r1, [pc, #52]	; (80107d4 <tcp_recv_null+0x40>)
 80107a0:	480d      	ldr	r0, [pc, #52]	; (80107d8 <tcp_recv_null+0x44>)
 80107a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80107a6:	f00c f9bf 	bl	801cb28 <iprintf>
 80107aa:	f06f 000f 	mvn.w	r0, #15
}
 80107ae:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 80107b0:	b13a      	cbz	r2, 80107c2 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 80107b2:	8911      	ldrh	r1, [r2, #8]
 80107b4:	f7ff fb84 	bl	800fec0 <tcp_recved>
    pbuf_free(p);
 80107b8:	4620      	mov	r0, r4
 80107ba:	f7fe fde1 	bl	800f380 <pbuf_free>
  return ERR_OK;
 80107be:	2000      	movs	r0, #0
 80107c0:	e7f5      	b.n	80107ae <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 80107c2:	b91b      	cbnz	r3, 80107cc <tcp_recv_null+0x38>
}
 80107c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80107c8:	f7ff bfc2 	b.w	8010750 <tcp_close>
  return ERR_OK;
 80107cc:	4610      	mov	r0, r2
 80107ce:	e7ee      	b.n	80107ae <tcp_recv_null+0x1a>
 80107d0:	0802d775 	.word	0x0802d775
 80107d4:	0802dc83 	.word	0x0802dc83
 80107d8:	0802aecf 	.word	0x0802aecf

080107dc <tcp_process_refused_data>:
{
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80107de:	4604      	mov	r4, r0
 80107e0:	b950      	cbnz	r0, 80107f8 <tcp_process_refused_data+0x1c>
 80107e2:	4b20      	ldr	r3, [pc, #128]	; (8010864 <tcp_process_refused_data+0x88>)
 80107e4:	4920      	ldr	r1, [pc, #128]	; (8010868 <tcp_process_refused_data+0x8c>)
 80107e6:	4821      	ldr	r0, [pc, #132]	; (801086c <tcp_process_refused_data+0x90>)
 80107e8:	f240 6209 	movw	r2, #1545	; 0x609
 80107ec:	f00c f99c 	bl	801cb28 <iprintf>
 80107f0:	f06f 050f 	mvn.w	r5, #15
}
 80107f4:	4628      	mov	r0, r5
 80107f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 80107f8:	f8d0 609c 	ldr.w	r6, [r0, #156]	; 0x9c
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80107fc:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
    u8_t refused_flags = pcb->refused_data->flags;
 8010800:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8010802:	2300      	movs	r3, #0
 8010804:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010808:	b1f5      	cbz	r5, 8010848 <tcp_process_refused_data+0x6c>
 801080a:	4601      	mov	r1, r0
 801080c:	4632      	mov	r2, r6
 801080e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010810:	47a8      	blx	r5
 8010812:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8010814:	b9f8      	cbnz	r0, 8010856 <tcp_process_refused_data+0x7a>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010816:	06bb      	lsls	r3, r7, #26
 8010818:	d5ec      	bpl.n	80107f4 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801081a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
        TCP_EVENT_CLOSED(pcb, err);
 801081e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010822:	f640 3268 	movw	r2, #2920	; 0xb68
 8010826:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8010828:	bf1c      	itt	ne
 801082a:	3301      	addne	r3, #1
 801082c:	f8a4 3050 	strhne.w	r3, [r4, #80]	; 0x50
        TCP_EVENT_CLOSED(pcb, err);
 8010830:	2e00      	cmp	r6, #0
 8010832:	d0df      	beq.n	80107f4 <tcp_process_refused_data+0x18>
 8010834:	2300      	movs	r3, #0
 8010836:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010838:	461a      	mov	r2, r3
 801083a:	4621      	mov	r1, r4
 801083c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 801083e:	300d      	adds	r0, #13
 8010840:	d1d8      	bne.n	80107f4 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8010842:	f06f 050c 	mvn.w	r5, #12
 8010846:	e7d5      	b.n	80107f4 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010848:	4601      	mov	r1, r0
 801084a:	462b      	mov	r3, r5
 801084c:	4632      	mov	r2, r6
 801084e:	4628      	mov	r0, r5
 8010850:	f7ff ffa0 	bl	8010794 <tcp_recv_null>
 8010854:	e7dd      	b.n	8010812 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 8010856:	350d      	adds	r5, #13
 8010858:	d0f3      	beq.n	8010842 <tcp_process_refused_data+0x66>
      pcb->refused_data = refused_data;
 801085a:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      return ERR_INPROGRESS;
 801085e:	f06f 0504 	mvn.w	r5, #4
 8010862:	e7c7      	b.n	80107f4 <tcp_process_refused_data+0x18>
 8010864:	0802d775 	.word	0x0802d775
 8010868:	0802dc9e 	.word	0x0802dc9e
 801086c:	0802aecf 	.word	0x0802aecf

08010870 <tcp_fasttmr>:
{
 8010870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8010874:	4d20      	ldr	r5, [pc, #128]	; (80108f8 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 8010876:	4f21      	ldr	r7, [pc, #132]	; (80108fc <tcp_fasttmr+0x8c>)
  ++tcp_timer_ctr;
 8010878:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801087a:	4e21      	ldr	r6, [pc, #132]	; (8010900 <tcp_fasttmr+0x90>)
  ++tcp_timer_ctr;
 801087c:	3301      	adds	r3, #1
 801087e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8010880:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8010882:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8010886:	b90c      	cbnz	r4, 801088c <tcp_fasttmr+0x1c>
}
 8010888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 801088c:	782b      	ldrb	r3, [r5, #0]
 801088e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8010892:	429a      	cmp	r2, r3
 8010894:	d02c      	beq.n	80108f0 <tcp_fasttmr+0x80>
      pcb->last_timer = tcp_timer_ctr;
 8010896:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      if (pcb->flags & TF_ACK_DELAY) {
 801089a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801089e:	07d9      	lsls	r1, r3, #31
 80108a0:	d50c      	bpl.n	80108bc <tcp_fasttmr+0x4c>
        tcp_ack_now(pcb);
 80108a2:	f043 0302 	orr.w	r3, r3, #2
 80108a6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_output(pcb);
 80108aa:	4620      	mov	r0, r4
 80108ac:	f002 fd1e 	bl	80132ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108b0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80108b4:	f023 0303 	bic.w	r3, r3, #3
 80108b8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->flags & TF_CLOSEPEND) {
 80108bc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80108c0:	071a      	lsls	r2, r3, #28
 80108c2:	d506      	bpl.n	80108d2 <tcp_fasttmr+0x62>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80108c4:	f023 0308 	bic.w	r3, r3, #8
 80108c8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_close_shutdown_fin(pcb);
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7ff f8e5 	bl	800fa9c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 80108d2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
      next = pcb->next;
 80108d6:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
      if (pcb->refused_data != NULL) {
 80108da:	b13b      	cbz	r3, 80108ec <tcp_fasttmr+0x7c>
        tcp_process_refused_data(pcb);
 80108dc:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80108de:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80108e2:	f7ff ff7b 	bl	80107dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80108e6:	7833      	ldrb	r3, [r6, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1c9      	bne.n	8010880 <tcp_fasttmr+0x10>
{
 80108ec:	464c      	mov	r4, r9
 80108ee:	e7ca      	b.n	8010886 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80108f0:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 80108f4:	e7fa      	b.n	80108ec <tcp_fasttmr+0x7c>
 80108f6:	bf00      	nop
 80108f8:	20007055 	.word	0x20007055
 80108fc:	20016114 	.word	0x20016114
 8010900:	20016110 	.word	0x20016110

08010904 <tcp_tmr>:
{
 8010904:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8010906:	f7ff ffb3 	bl	8010870 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801090a:	4a06      	ldr	r2, [pc, #24]	; (8010924 <tcp_tmr+0x20>)
 801090c:	7853      	ldrb	r3, [r2, #1]
 801090e:	3301      	adds	r3, #1
 8010910:	b2db      	uxtb	r3, r3
 8010912:	7053      	strb	r3, [r2, #1]
 8010914:	07db      	lsls	r3, r3, #31
 8010916:	d503      	bpl.n	8010920 <tcp_tmr+0x1c>
}
 8010918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801091c:	f7ff bbd4 	b.w	80100c8 <tcp_slowtmr>
}
 8010920:	bd08      	pop	{r3, pc}
 8010922:	bf00      	nop
 8010924:	20007055 	.word	0x20007055

08010928 <tcp_shutdown>:
{
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801092c:	4605      	mov	r5, r0
 801092e:	b948      	cbnz	r0, 8010944 <tcp_shutdown+0x1c>
 8010930:	4b19      	ldr	r3, [pc, #100]	; (8010998 <tcp_shutdown+0x70>)
 8010932:	491a      	ldr	r1, [pc, #104]	; (801099c <tcp_shutdown+0x74>)
 8010934:	481a      	ldr	r0, [pc, #104]	; (80109a0 <tcp_shutdown+0x78>)
 8010936:	f240 2207 	movw	r2, #519	; 0x207
 801093a:	f00c f8f5 	bl	801cb28 <iprintf>
 801093e:	f06f 000f 	mvn.w	r0, #15
}
 8010942:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 8010944:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010948:	2b01      	cmp	r3, #1
 801094a:	d01c      	beq.n	8010986 <tcp_shutdown+0x5e>
  if (shut_rx) {
 801094c:	b1a9      	cbz	r1, 801097a <tcp_shutdown+0x52>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801094e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8010952:	f043 0310 	orr.w	r3, r3, #16
 8010956:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (shut_tx) {
 801095a:	b122      	cbz	r2, 8010966 <tcp_shutdown+0x3e>
      return tcp_close_shutdown(pcb, 1);
 801095c:	2101      	movs	r1, #1
}
 801095e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010962:	f7ff be39 	b.w	80105d8 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8010966:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 801096a:	b908      	cbnz	r0, 8010970 <tcp_shutdown+0x48>
  return ERR_OK;
 801096c:	2000      	movs	r0, #0
 801096e:	e7e8      	b.n	8010942 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 8010970:	f7fe fd06 	bl	800f380 <pbuf_free>
      pcb->refused_data = NULL;
 8010974:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
 8010978:	e7f8      	b.n	801096c <tcp_shutdown+0x44>
  if (shut_tx) {
 801097a:	2a00      	cmp	r2, #0
 801097c:	d0f6      	beq.n	801096c <tcp_shutdown+0x44>
    switch (pcb->state) {
 801097e:	2b04      	cmp	r3, #4
 8010980:	d804      	bhi.n	801098c <tcp_shutdown+0x64>
 8010982:	2b02      	cmp	r3, #2
 8010984:	d804      	bhi.n	8010990 <tcp_shutdown+0x68>
 8010986:	f06f 000a 	mvn.w	r0, #10
 801098a:	e7da      	b.n	8010942 <tcp_shutdown+0x1a>
 801098c:	2b07      	cmp	r3, #7
 801098e:	d1fa      	bne.n	8010986 <tcp_shutdown+0x5e>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010990:	2100      	movs	r1, #0
 8010992:	4628      	mov	r0, r5
 8010994:	e7e3      	b.n	801095e <tcp_shutdown+0x36>
 8010996:	bf00      	nop
 8010998:	0802d775 	.word	0x0802d775
 801099c:	0802dcc4 	.word	0x0802dcc4
 80109a0:	0802aecf 	.word	0x0802aecf

080109a4 <tcp_abandon>:
{
 80109a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109a8:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80109aa:	4604      	mov	r4, r0
 80109ac:	b948      	cbnz	r0, 80109c2 <tcp_abandon+0x1e>
 80109ae:	4b37      	ldr	r3, [pc, #220]	; (8010a8c <tcp_abandon+0xe8>)
 80109b0:	4937      	ldr	r1, [pc, #220]	; (8010a90 <tcp_abandon+0xec>)
 80109b2:	4838      	ldr	r0, [pc, #224]	; (8010a94 <tcp_abandon+0xf0>)
 80109b4:	f240 223d 	movw	r2, #573	; 0x23d
}
 80109b8:	b004      	add	sp, #16
 80109ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80109be:	f00c b8b3 	b.w	801cb28 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80109c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	d106      	bne.n	80109d8 <tcp_abandon+0x34>
 80109ca:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <tcp_abandon+0xe8>)
 80109cc:	4932      	ldr	r1, [pc, #200]	; (8010a98 <tcp_abandon+0xf4>)
 80109ce:	4831      	ldr	r0, [pc, #196]	; (8010a94 <tcp_abandon+0xf0>)
 80109d0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109d4:	f00c f8a8 	bl	801cb28 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80109d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80109dc:	2b0a      	cmp	r3, #10
 80109de:	d109      	bne.n	80109f4 <tcp_abandon+0x50>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80109e0:	482e      	ldr	r0, [pc, #184]	; (8010a9c <tcp_abandon+0xf8>)
 80109e2:	4621      	mov	r1, r4
 80109e4:	f7ff fd96 	bl	8010514 <tcp_pcb_remove>
    tcp_free(pcb);
 80109e8:	4620      	mov	r0, r4
}
 80109ea:	b004      	add	sp, #16
 80109ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 80109f0:	f7ff b894 	b.w	800fb1c <tcp_free>
    seqno = pcb->snd_nxt;
 80109f4:	f8d4 9078 	ldr.w	r9, [r4, #120]	; 0x78
    ackno = pcb->rcv_nxt;
 80109f8:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
    errf = pcb->errf;
 80109fc:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
    errf_arg = pcb->callback_arg;
 8010a00:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
    if (pcb->state == CLOSED) {
 8010a04:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 8010a06:	b99b      	cbnz	r3, 8010a30 <tcp_abandon+0x8c>
      if (pcb->local_port != 0) {
 8010a08:	b13d      	cbz	r5, 8010a1a <tcp_abandon+0x76>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a0a:	4a25      	ldr	r2, [pc, #148]	; (8010aa0 <tcp_abandon+0xfc>)
 8010a0c:	6813      	ldr	r3, [r2, #0]
 8010a0e:	42a3      	cmp	r3, r4
 8010a10:	d106      	bne.n	8010a20 <tcp_abandon+0x7c>
 8010a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a14:	6013      	str	r3, [r2, #0]
 8010a16:	2500      	movs	r5, #0
 8010a18:	6365      	str	r5, [r4, #52]	; 0x34
    int send_rst = 0;
 8010a1a:	462e      	mov	r6, r5
 8010a1c:	e00f      	b.n	8010a3e <tcp_abandon+0x9a>
 8010a1e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0f8      	beq.n	8010a16 <tcp_abandon+0x72>
 8010a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a26:	42a2      	cmp	r2, r4
 8010a28:	d1f9      	bne.n	8010a1e <tcp_abandon+0x7a>
 8010a2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8010a2e:	e7f2      	b.n	8010a16 <tcp_abandon+0x72>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010a30:	481c      	ldr	r0, [pc, #112]	; (8010aa4 <tcp_abandon+0x100>)
 8010a32:	4621      	mov	r1, r4
 8010a34:	f7ff fd6e 	bl	8010514 <tcp_pcb_remove>
 8010a38:	4b1b      	ldr	r3, [pc, #108]	; (8010aa8 <tcp_abandon+0x104>)
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8010a3e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8010a42:	b108      	cbz	r0, 8010a48 <tcp_abandon+0xa4>
      tcp_segs_free(pcb->unacked);
 8010a44:	f7ff fa8c 	bl	800ff60 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010a48:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8010a4c:	b108      	cbz	r0, 8010a52 <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 8010a4e:	f7ff fa87 	bl	800ff60 <tcp_segs_free>
    if (send_rst) {
 8010a52:	b166      	cbz	r6, 8010a6e <tcp_abandon+0xca>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010a54:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8010a58:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8010a5c:	f104 0318 	add.w	r3, r4, #24
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4652      	mov	r2, sl
 8010a64:	4623      	mov	r3, r4
 8010a66:	4649      	mov	r1, r9
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f002 fbc1 	bl	80131f0 <tcp_rst>
    tcp_free(pcb);
 8010a6e:	4620      	mov	r0, r4
 8010a70:	f7ff f854 	bl	800fb1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010a74:	b13f      	cbz	r7, 8010a86 <tcp_abandon+0xe2>
 8010a76:	f06f 010c 	mvn.w	r1, #12
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	463b      	mov	r3, r7
}
 8010a7e:	b004      	add	sp, #16
 8010a80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010a84:	4718      	bx	r3
}
 8010a86:	b004      	add	sp, #16
 8010a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a8c:	0802d775 	.word	0x0802d775
 8010a90:	0802dcde 	.word	0x0802dcde
 8010a94:	0802aecf 	.word	0x0802aecf
 8010a98:	0802dcf7 	.word	0x0802dcf7
 8010a9c:	20016124 	.word	0x20016124
 8010aa0:	20016120 	.word	0x20016120
 8010aa4:	20016114 	.word	0x20016114
 8010aa8:	20016110 	.word	0x20016110

08010aac <tcp_abort>:
  tcp_abandon(pcb, 1);
 8010aac:	2101      	movs	r1, #1
 8010aae:	f7ff bf79 	b.w	80109a4 <tcp_abandon>
	...

08010ab4 <tcp_accept_null>:
{
 8010ab4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	b931      	cbnz	r1, 8010ac8 <tcp_accept_null+0x14>
 8010aba:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <tcp_accept_null+0x20>)
 8010abc:	4906      	ldr	r1, [pc, #24]	; (8010ad8 <tcp_accept_null+0x24>)
 8010abe:	4807      	ldr	r0, [pc, #28]	; (8010adc <tcp_accept_null+0x28>)
 8010ac0:	f240 320f 	movw	r2, #783	; 0x30f
 8010ac4:	f00c f830 	bl	801cb28 <iprintf>
  tcp_abort(pcb);
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f7ff ffef 	bl	8010aac <tcp_abort>
}
 8010ace:	f06f 000c 	mvn.w	r0, #12
 8010ad2:	bd10      	pop	{r4, pc}
 8010ad4:	0802d775 	.word	0x0802d775
 8010ad8:	0802dd28 	.word	0x0802dd28
 8010adc:	0802aecf 	.word	0x0802aecf

08010ae0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010ae4:	4605      	mov	r5, r0
 8010ae6:	b930      	cbnz	r0, 8010af6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8010ae8:	4b16      	ldr	r3, [pc, #88]	; (8010b44 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8010aea:	4917      	ldr	r1, [pc, #92]	; (8010b48 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8010aec:	4817      	ldr	r0, [pc, #92]	; (8010b4c <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8010aee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010af2:	f00c f819 	bl	801cb28 <iprintf>

  while (pcb != NULL) {
 8010af6:	b904      	cbnz	r4, 8010afa <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8010af8:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010afa:	7d23      	ldrb	r3, [r4, #20]
 8010afc:	7d29      	ldrb	r1, [r5, #20]
 8010afe:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8010b00:	4299      	cmp	r1, r3
 8010b02:	d11c      	bne.n	8010b3e <tcp_netif_ip_addr_changed_pcblist+0x5e>
 8010b04:	2906      	cmp	r1, #6
 8010b06:	6823      	ldr	r3, [r4, #0]
 8010b08:	682a      	ldr	r2, [r5, #0]
 8010b0a:	d10f      	bne.n	8010b2c <tcp_netif_ip_addr_changed_pcblist+0x4c>
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d111      	bne.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x54>
 8010b10:	6862      	ldr	r2, [r4, #4]
 8010b12:	686b      	ldr	r3, [r5, #4]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d10d      	bne.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x54>
 8010b18:	68a2      	ldr	r2, [r4, #8]
 8010b1a:	68ab      	ldr	r3, [r5, #8]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d109      	bne.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x54>
 8010b20:	68e2      	ldr	r2, [r4, #12]
 8010b22:	68eb      	ldr	r3, [r5, #12]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d105      	bne.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x54>
 8010b28:	7c23      	ldrb	r3, [r4, #16]
 8010b2a:	7c2a      	ldrb	r2, [r5, #16]
 8010b2c:	1a9a      	subs	r2, r3, r2
 8010b2e:	4253      	negs	r3, r2
 8010b30:	4153      	adcs	r3, r2
 8010b32:	e000      	b.n	8010b36 <tcp_netif_ip_addr_changed_pcblist+0x56>
 8010b34:	2300      	movs	r3, #0
 8010b36:	b113      	cbz	r3, 8010b3e <tcp_netif_ip_addr_changed_pcblist+0x5e>
      tcp_abort(pcb);
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7ff ffb7 	bl	8010aac <tcp_abort>
      pcb = pcb->next;
 8010b3e:	4634      	mov	r4, r6
 8010b40:	e7d9      	b.n	8010af6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8010b42:	bf00      	nop
 8010b44:	0802d775 	.word	0x0802d775
 8010b48:	0802dd45 	.word	0x0802dd45
 8010b4c:	0802aecf 	.word	0x0802aecf

08010b50 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <tcp_kill_state+0x38>)
 8010b52:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b54:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <tcp_kill_state+0x3c>)
{
 8010b56:	b430      	push	{r4, r5}
  inactivity = 0;
 8010b58:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b5a:	681d      	ldr	r5, [r3, #0]
{
 8010b5c:	4604      	mov	r4, r0
  inactive = NULL;
 8010b5e:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b60:	b919      	cbnz	r1, 8010b6a <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8010b62:	b170      	cbz	r0, 8010b82 <tcp_kill_state+0x32>
}
 8010b64:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8010b66:	f7ff bf1d 	b.w	80109a4 <tcp_abandon>
    if (pcb->state == state) {
 8010b6a:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 8010b6e:	42a3      	cmp	r3, r4
 8010b70:	d105      	bne.n	8010b7e <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b72:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010b74:	1aeb      	subs	r3, r5, r3
 8010b76:	4293      	cmp	r3, r2
 8010b78:	bf24      	itt	cs
 8010b7a:	461a      	movcs	r2, r3
 8010b7c:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010b80:	e7ee      	b.n	8010b60 <tcp_kill_state+0x10>
}
 8010b82:	bc30      	pop	{r4, r5}
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	20016114 	.word	0x20016114
 8010b8c:	20016118 	.word	0x20016118

08010b90 <tcp_alloc>:
{
 8010b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b92:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b94:	2001      	movs	r0, #1
 8010b96:	f7fe f869 	bl	800ec6c <memp_malloc>
  if (pcb == NULL) {
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d136      	bne.n	8010c0e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010ba0:	4e42      	ldr	r6, [pc, #264]	; (8010cac <tcp_alloc+0x11c>)
 8010ba2:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	d15b      	bne.n	8010c60 <tcp_alloc+0xd0>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ba8:	4b41      	ldr	r3, [pc, #260]	; (8010cb0 <tcp_alloc+0x120>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010baa:	4d42      	ldr	r5, [pc, #264]	; (8010cb4 <tcp_alloc+0x124>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bac:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010bae:	682f      	ldr	r7, [r5, #0]
  inactivity = 0;
 8010bb0:	4601      	mov	r1, r0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d161      	bne.n	8010c7a <tcp_alloc+0xea>
  if (inactive != NULL) {
 8010bb6:	b108      	cbz	r0, 8010bbc <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8010bb8:	f7ff ff78 	bl	8010aac <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010bbc:	2001      	movs	r0, #1
 8010bbe:	f7fe f855 	bl	800ec6c <memp_malloc>
    if (pcb == NULL) {
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	bb18      	cbnz	r0, 8010c0e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 8010bc6:	2009      	movs	r0, #9
 8010bc8:	f7ff ffc2 	bl	8010b50 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010bcc:	2001      	movs	r0, #1
 8010bce:	f7fe f84d 	bl	800ec6c <memp_malloc>
      if (pcb == NULL) {
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	b9d8      	cbnz	r0, 8010c0e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 8010bd6:	2008      	movs	r0, #8
 8010bd8:	f7ff ffba 	bl	8010b50 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010bdc:	2001      	movs	r0, #1
 8010bde:	f7fe f845 	bl	800ec6c <memp_malloc>
        if (pcb == NULL) {
 8010be2:	4603      	mov	r3, r0
 8010be4:	b998      	cbnz	r0, 8010c0e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010be6:	0622      	lsls	r2, r4, #24
 8010be8:	d44f      	bmi.n	8010c8a <tcp_alloc+0xfa>
  if (mprio == 0) {
 8010bea:	b15c      	cbz	r4, 8010c04 <tcp_alloc+0x74>
 8010bec:	4621      	mov	r1, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bee:	6832      	ldr	r2, [r6, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010bf0:	682e      	ldr	r6, [r5, #0]
  mprio--;
 8010bf2:	3901      	subs	r1, #1
 8010bf4:	b2c9      	uxtb	r1, r1
  inactivity = 0;
 8010bf6:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bf8:	2a00      	cmp	r2, #0
 8010bfa:	d148      	bne.n	8010c8e <tcp_alloc+0xfe>
  if (inactive != NULL) {
 8010bfc:	b113      	cbz	r3, 8010c04 <tcp_alloc+0x74>
    tcp_abort(inactive);
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff ff54 	bl	8010aac <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c04:	2001      	movs	r0, #1
 8010c06:	f7fe f831 	bl	800ec6c <memp_malloc>
  if (pcb != NULL) {
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	b330      	cbz	r0, 8010c5c <tcp_alloc+0xcc>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010c0e:	22c0      	movs	r2, #192	; 0xc0
 8010c10:	4618      	mov	r0, r3
 8010c12:	2100      	movs	r1, #0
 8010c14:	f00b fb3c 	bl	801c290 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8010c18:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010c1c:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010c20:	4a25      	ldr	r2, [pc, #148]	; (8010cb8 <tcp_alloc+0x128>)
 8010c22:	6502      	str	r2, [r0, #80]	; 0x50
    pcb->ttl = TCP_TTL;
 8010c24:	22ff      	movs	r2, #255	; 0xff
 8010c26:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010c2a:	2206      	movs	r2, #6
 8010c2c:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010c30:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
    pcb->rtime = -1;
 8010c34:	4a21      	ldr	r2, [pc, #132]	; (8010cbc <tcp_alloc+0x12c>)
 8010c36:	6582      	str	r2, [r0, #88]	; 0x58
    pcb->tmr = tcp_ticks;
 8010c38:	4a1e      	ldr	r2, [pc, #120]	; (8010cb4 <tcp_alloc+0x124>)
    pcb->prio = prio;
 8010c3a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    pcb->tmr = tcp_ticks;
 8010c3e:	6812      	ldr	r2, [r2, #0]
 8010c40:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->last_timer = tcp_timer_ctr;
 8010c42:	4a1f      	ldr	r2, [pc, #124]	; (8010cc0 <tcp_alloc+0x130>)
 8010c44:	7812      	ldrb	r2, [r2, #0]
 8010c46:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
    pcb->cwnd = 1;
 8010c4a:	4a1e      	ldr	r2, [pc, #120]	; (8010cc4 <tcp_alloc+0x134>)
 8010c4c:	6702      	str	r2, [r0, #112]	; 0x70
    pcb->recv = tcp_recv_null;
 8010c4e:	4a1e      	ldr	r2, [pc, #120]	; (8010cc8 <tcp_alloc+0x138>)
 8010c50:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010c54:	4a1d      	ldr	r2, [pc, #116]	; (8010ccc <tcp_alloc+0x13c>)
 8010c56:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010c5a:	4603      	mov	r3, r0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8010c60:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    struct tcp_pcb *next = pcb->next;
 8010c64:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (pcb->flags & TF_CLOSEPEND) {
 8010c66:	0719      	lsls	r1, r3, #28
 8010c68:	d505      	bpl.n	8010c76 <tcp_alloc+0xe6>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010c6a:	f023 0308 	bic.w	r3, r3, #8
 8010c6e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      tcp_close_shutdown_fin(pcb);
 8010c72:	f7fe ff13 	bl	800fa9c <tcp_close_shutdown_fin>
{
 8010c76:	4628      	mov	r0, r5
 8010c78:	e794      	b.n	8010ba4 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010c7c:	1aba      	subs	r2, r7, r2
 8010c7e:	428a      	cmp	r2, r1
 8010c80:	bf24      	itt	cs
 8010c82:	4618      	movcs	r0, r3
 8010c84:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c88:	e793      	b.n	8010bb2 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010c8a:	217f      	movs	r1, #127	; 0x7f
 8010c8c:	e7af      	b.n	8010bee <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8010c8e:	f892 703d 	ldrb.w	r7, [r2, #61]	; 0x3d
 8010c92:	428f      	cmp	r7, r1
 8010c94:	d304      	bcc.n	8010ca0 <tcp_alloc+0x110>
 8010c96:	d107      	bne.n	8010ca8 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010c98:	6c95      	ldr	r5, [r2, #72]	; 0x48
 8010c9a:	1b75      	subs	r5, r6, r5
 8010c9c:	4285      	cmp	r5, r0
 8010c9e:	d303      	bcc.n	8010ca8 <tcp_alloc+0x118>
      inactivity = tcp_ticks - pcb->tmr;
 8010ca0:	6c90      	ldr	r0, [r2, #72]	; 0x48
    if ((pcb->prio < mprio) ||
 8010ca2:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 8010ca4:	1a30      	subs	r0, r6, r0
 8010ca6:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010caa:	e7a5      	b.n	8010bf8 <tcp_alloc+0x68>
 8010cac:	20016114 	.word	0x20016114
 8010cb0:	20016124 	.word	0x20016124
 8010cb4:	20016118 	.word	0x20016118
 8010cb8:	0b680b68 	.word	0x0b680b68
 8010cbc:	0218ffff 	.word	0x0218ffff
 8010cc0:	20007055 	.word	0x20007055
 8010cc4:	16d00001 	.word	0x16d00001
 8010cc8:	08010795 	.word	0x08010795
 8010ccc:	006ddd00 	.word	0x006ddd00

08010cd0 <tcp_new_ip_type>:
{
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	4604      	mov	r4, r0
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010cd4:	2040      	movs	r0, #64	; 0x40
 8010cd6:	f7ff ff5b 	bl	8010b90 <tcp_alloc>
  if (pcb != NULL) {
 8010cda:	b110      	cbz	r0, 8010ce2 <tcp_new_ip_type+0x12>
    IP_SET_TYPE_VAL(pcb->local_ip, type);
 8010cdc:	7504      	strb	r4, [r0, #20]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
 8010cde:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
}
 8010ce2:	bd10      	pop	{r4, pc}

08010ce4 <tcp_next_iss>:
{
 8010ce4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010ce6:	b930      	cbnz	r0, 8010cf6 <tcp_next_iss+0x12>
 8010ce8:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <tcp_next_iss+0x20>)
 8010cea:	4907      	ldr	r1, [pc, #28]	; (8010d08 <tcp_next_iss+0x24>)
 8010cec:	4807      	ldr	r0, [pc, #28]	; (8010d0c <tcp_next_iss+0x28>)
 8010cee:	f640 02af 	movw	r2, #2223	; 0x8af
 8010cf2:	f00b ff19 	bl	801cb28 <iprintf>
  iss += tcp_ticks;       /* XXX */
 8010cf6:	4b06      	ldr	r3, [pc, #24]	; (8010d10 <tcp_next_iss+0x2c>)
 8010cf8:	4a06      	ldr	r2, [pc, #24]	; (8010d14 <tcp_next_iss+0x30>)
 8010cfa:	6858      	ldr	r0, [r3, #4]
 8010cfc:	6812      	ldr	r2, [r2, #0]
 8010cfe:	4410      	add	r0, r2
 8010d00:	6058      	str	r0, [r3, #4]
}
 8010d02:	bd08      	pop	{r3, pc}
 8010d04:	0802d775 	.word	0x0802d775
 8010d08:	0802dd79 	.word	0x0802dd79
 8010d0c:	0802aecf 	.word	0x0802aecf
 8010d10:	20000040 	.word	0x20000040
 8010d14:	20016118 	.word	0x20016118

08010d18 <tcp_eff_send_mss_netif>:
{
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010d1e:	4614      	mov	r4, r2
 8010d20:	b9da      	cbnz	r2, 8010d5a <tcp_eff_send_mss_netif+0x42>
 8010d22:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <tcp_eff_send_mss_netif+0x58>)
 8010d24:	4913      	ldr	r1, [pc, #76]	; (8010d74 <tcp_eff_send_mss_netif+0x5c>)
 8010d26:	4814      	ldr	r0, [pc, #80]	; (8010d78 <tcp_eff_send_mss_netif+0x60>)
 8010d28:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010d2c:	f00b fefc 	bl	801cb28 <iprintf>
    if (outif == NULL) {
 8010d30:	b1de      	cbz	r6, 8010d6a <tcp_eff_send_mss_netif+0x52>
    mtu = outif->mtu;
 8010d32:	f8b6 00d0 	ldrh.w	r0, [r6, #208]	; 0xd0
  if (mtu != 0) {
 8010d36:	b1c0      	cbz	r0, 8010d6a <tcp_eff_send_mss_netif+0x52>
    if (IP_IS_V6(dest))
 8010d38:	b16c      	cbz	r4, 8010d56 <tcp_eff_send_mss_netif+0x3e>
 8010d3a:	7d23      	ldrb	r3, [r4, #20]
      offset = IP_HLEN + TCP_HLEN;
 8010d3c:	2b06      	cmp	r3, #6
 8010d3e:	bf0c      	ite	eq
 8010d40:	233c      	moveq	r3, #60	; 0x3c
 8010d42:	2328      	movne	r3, #40	; 0x28
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010d44:	4283      	cmp	r3, r0
 8010d46:	bf36      	itet	cc
 8010d48:	1ac3      	subcc	r3, r0, r3
 8010d4a:	2300      	movcs	r3, #0
 8010d4c:	b29b      	uxthcc	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010d4e:	429d      	cmp	r5, r3
 8010d50:	bf28      	it	cs
 8010d52:	461d      	movcs	r5, r3
 8010d54:	e009      	b.n	8010d6a <tcp_eff_send_mss_netif+0x52>
      offset = IP_HLEN + TCP_HLEN;
 8010d56:	2328      	movs	r3, #40	; 0x28
 8010d58:	e7f4      	b.n	8010d44 <tcp_eff_send_mss_netif+0x2c>
  if (IP_IS_V6(dest))
 8010d5a:	7d13      	ldrb	r3, [r2, #20]
 8010d5c:	2b06      	cmp	r3, #6
 8010d5e:	d1e7      	bne.n	8010d30 <tcp_eff_send_mss_netif+0x18>
    mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7fd f8b3 	bl	800decc <nd6_get_destination_mtu>
  if (mtu != 0) {
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d1e7      	bne.n	8010d3a <tcp_eff_send_mss_netif+0x22>
}
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	bd70      	pop	{r4, r5, r6, pc}
 8010d6e:	bf00      	nop
 8010d70:	0802d775 	.word	0x0802d775
 8010d74:	0802dd93 	.word	0x0802dd93
 8010d78:	0802aecf 	.word	0x0802aecf

08010d7c <tcp_connect>:
{
 8010d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d80:	460d      	mov	r5, r1
 8010d82:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d84:	4604      	mov	r4, r0
 8010d86:	b958      	cbnz	r0, 8010da0 <tcp_connect+0x24>
 8010d88:	4b75      	ldr	r3, [pc, #468]	; (8010f60 <tcp_connect+0x1e4>)
 8010d8a:	4976      	ldr	r1, [pc, #472]	; (8010f64 <tcp_connect+0x1e8>)
 8010d8c:	f240 4235 	movw	r2, #1077	; 0x435
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010d90:	4875      	ldr	r0, [pc, #468]	; (8010f68 <tcp_connect+0x1ec>)
 8010d92:	f00b fec9 	bl	801cb28 <iprintf>
 8010d96:	f06f 050f 	mvn.w	r5, #15
}
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010da0:	b921      	cbnz	r1, 8010dac <tcp_connect+0x30>
 8010da2:	4b6f      	ldr	r3, [pc, #444]	; (8010f60 <tcp_connect+0x1e4>)
 8010da4:	4971      	ldr	r1, [pc, #452]	; (8010f6c <tcp_connect+0x1f0>)
 8010da6:	f240 4236 	movw	r2, #1078	; 0x436
 8010daa:	e7f1      	b.n	8010d90 <tcp_connect+0x14>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010dac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010db0:	b14b      	cbz	r3, 8010dc6 <tcp_connect+0x4a>
 8010db2:	4b6b      	ldr	r3, [pc, #428]	; (8010f60 <tcp_connect+0x1e4>)
 8010db4:	496e      	ldr	r1, [pc, #440]	; (8010f70 <tcp_connect+0x1f4>)
 8010db6:	486c      	ldr	r0, [pc, #432]	; (8010f68 <tcp_connect+0x1ec>)
 8010db8:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010dbc:	f00b feb4 	bl	801cb28 <iprintf>
 8010dc0:	f06f 0509 	mvn.w	r5, #9
 8010dc4:	e7e9      	b.n	8010d9a <tcp_connect+0x1e>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010dc6:	7d09      	ldrb	r1, [r1, #20]
 8010dc8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8010dcc:	2906      	cmp	r1, #6
 8010dce:	f100 0618 	add.w	r6, r0, #24
 8010dd2:	d116      	bne.n	8010e02 <tcp_connect+0x86>
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	6183      	str	r3, [r0, #24]
 8010dd8:	686b      	ldr	r3, [r5, #4]
 8010dda:	61c3      	str	r3, [r0, #28]
 8010ddc:	68ab      	ldr	r3, [r5, #8]
 8010dde:	6203      	str	r3, [r0, #32]
 8010de0:	68eb      	ldr	r3, [r5, #12]
 8010de2:	6243      	str	r3, [r0, #36]	; 0x24
 8010de4:	7c2b      	ldrb	r3, [r5, #16]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010de6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010dea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  pcb->remote_port = port;
 8010dee:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010df2:	b160      	cbz	r0, 8010e0e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010df4:	f7fe f9dc 	bl	800f1b0 <netif_get_by_index>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010df8:	4680      	mov	r8, r0
  if (netif == NULL) {
 8010dfa:	b998      	cbnz	r0, 8010e24 <tcp_connect+0xa8>
    return ERR_RTE;
 8010dfc:	f06f 0503 	mvn.w	r5, #3
 8010e00:	e7cb      	b.n	8010d9a <tcp_connect+0x1e>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010e02:	6828      	ldr	r0, [r5, #0]
 8010e04:	61a0      	str	r0, [r4, #24]
 8010e06:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8010e0a:	61e3      	str	r3, [r4, #28]
 8010e0c:	e7eb      	b.n	8010de6 <tcp_connect+0x6a>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010e0e:	2906      	cmp	r1, #6
 8010e10:	d104      	bne.n	8010e1c <tcp_connect+0xa0>
 8010e12:	4631      	mov	r1, r6
 8010e14:	4620      	mov	r0, r4
 8010e16:	f7fa fad1 	bl	800b3bc <ip6_route>
 8010e1a:	e7ed      	b.n	8010df8 <tcp_connect+0x7c>
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7f9 faf3 	bl	800a408 <ip4_route>
 8010e22:	e7e9      	b.n	8010df8 <tcp_connect+0x7c>
  if (ip_addr_isany(&pcb->local_ip)) {
 8010e24:	7d22      	ldrb	r2, [r4, #20]
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	2a06      	cmp	r2, #6
 8010e2a:	d17d      	bne.n	8010f28 <tcp_connect+0x1ac>
 8010e2c:	b943      	cbnz	r3, 8010e40 <tcp_connect+0xc4>
 8010e2e:	6862      	ldr	r2, [r4, #4]
 8010e30:	b932      	cbnz	r2, 8010e40 <tcp_connect+0xc4>
 8010e32:	68a3      	ldr	r3, [r4, #8]
 8010e34:	b92b      	cbnz	r3, 8010e42 <tcp_connect+0xc6>
 8010e36:	68e2      	ldr	r2, [r4, #12]
 8010e38:	fab2 f282 	clz	r2, r2
 8010e3c:	0952      	lsrs	r2, r2, #5
 8010e3e:	e000      	b.n	8010e42 <tcp_connect+0xc6>
 8010e40:	2200      	movs	r2, #0
 8010e42:	b1b2      	cbz	r2, 8010e72 <tcp_connect+0xf6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010e44:	7d2b      	ldrb	r3, [r5, #20]
 8010e46:	2b06      	cmp	r3, #6
 8010e48:	d171      	bne.n	8010f2e <tcp_connect+0x1b2>
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	4640      	mov	r0, r8
 8010e4e:	f7fa fbbd 	bl	800b5cc <ip6_select_source_address>
    if (local_ip == NULL) {
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d0d2      	beq.n	8010dfc <tcp_connect+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010e56:	7d03      	ldrb	r3, [r0, #20]
 8010e58:	7523      	strb	r3, [r4, #20]
 8010e5a:	2b06      	cmp	r3, #6
 8010e5c:	6803      	ldr	r3, [r0, #0]
 8010e5e:	6023      	str	r3, [r4, #0]
 8010e60:	d168      	bne.n	8010f34 <tcp_connect+0x1b8>
 8010e62:	6843      	ldr	r3, [r0, #4]
 8010e64:	6063      	str	r3, [r4, #4]
 8010e66:	6883      	ldr	r3, [r0, #8]
 8010e68:	60a3      	str	r3, [r4, #8]
 8010e6a:	68c3      	ldr	r3, [r0, #12]
 8010e6c:	60e3      	str	r3, [r4, #12]
 8010e6e:	7c03      	ldrb	r3, [r0, #16]
 8010e70:	7423      	strb	r3, [r4, #16]
  if (IP_IS_V6(&pcb->remote_ip) &&
 8010e72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010e76:	2b06      	cmp	r3, #6
 8010e78:	d110      	bne.n	8010e9c <tcp_connect+0x120>
 8010e7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e7e:	b96b      	cbnz	r3, 8010e9c <tcp_connect+0x120>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
 8010e80:	69a3      	ldr	r3, [r4, #24]
 8010e82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e86:	041b      	lsls	r3, r3, #16
 8010e88:	0c1b      	lsrs	r3, r3, #16
 8010e8a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8010e8e:	4293      	cmp	r3, r2
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
 8010e90:	bf02      	ittt	eq
 8010e92:	f898 30de 	ldrbeq.w	r3, [r8, #222]	; 0xde
 8010e96:	3301      	addeq	r3, #1
 8010e98:	f884 3028 	strbeq.w	r3, [r4, #40]	; 0x28
  old_local_port = pcb->local_port;
 8010e9c:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
  if (pcb->local_port == 0) {
 8010ea0:	f1b9 0f00 	cmp.w	r9, #0
 8010ea4:	d04b      	beq.n	8010f3e <tcp_connect+0x1c2>
  iss = tcp_next_iss(pcb);
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f7ff ff1c 	bl	8010ce4 <tcp_next_iss>
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010eac:	4a31      	ldr	r2, [pc, #196]	; (8010f74 <tcp_connect+0x1f8>)
  pcb->snd_nxt = iss;
 8010eae:	67a0      	str	r0, [r4, #120]	; 0x78
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010eb0:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 8010eb2:	3801      	subs	r0, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010eb4:	e9c4 3213 	strd	r3, r2, [r4, #76]	; 0x4c
  pcb->snd_lbb = iss - 1;
 8010eb8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
  pcb->lastack = iss - 1;
 8010ebc:	66e0      	str	r0, [r4, #108]	; 0x6c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010ebe:	6563      	str	r3, [r4, #84]	; 0x54
  pcb->mss = INITIAL_MSS;
 8010ec0:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 8010ec4:	f640 3368 	movw	r3, #2920	; 0xb68
 8010ec8:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010ecc:	4632      	mov	r2, r6
 8010ece:	4641      	mov	r1, r8
  pcb->mss = INITIAL_MSS;
 8010ed0:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010ed4:	f7ff ff20 	bl	8010d18 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 8010ed8:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010eda:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
  pcb->cwnd = 1;
 8010ede:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  pcb->connected = connected;
 8010ee2:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010ee6:	2102      	movs	r1, #2
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f001 ffe7 	bl	8012ebc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8010eee:	4605      	mov	r5, r0
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	f47f af52 	bne.w	8010d9a <tcp_connect+0x1e>
    pcb->state = SYN_SENT;
 8010ef6:	2302      	movs	r3, #2
 8010ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (old_local_port != 0) {
 8010efc:	f1b9 0f00 	cmp.w	r9, #0
 8010f00:	d005      	beq.n	8010f0e <tcp_connect+0x192>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f02:	4a1d      	ldr	r2, [pc, #116]	; (8010f78 <tcp_connect+0x1fc>)
 8010f04:	6813      	ldr	r3, [r2, #0]
 8010f06:	42a3      	cmp	r3, r4
 8010f08:	d122      	bne.n	8010f50 <tcp_connect+0x1d4>
 8010f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f0c:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8010f0e:	4b1b      	ldr	r3, [pc, #108]	; (8010f7c <tcp_connect+0x200>)
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	6362      	str	r2, [r4, #52]	; 0x34
 8010f14:	601c      	str	r4, [r3, #0]
 8010f16:	f002 fd13 	bl	8013940 <tcp_timer_needed>
 8010f1a:	4b19      	ldr	r3, [pc, #100]	; (8010f80 <tcp_connect+0x204>)
 8010f1c:	2201      	movs	r2, #1
    tcp_output(pcb);
 8010f1e:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8010f20:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8010f22:	f002 f9e3 	bl	80132ec <tcp_output>
 8010f26:	e738      	b.n	8010d9a <tcp_connect+0x1e>
  if (ip_addr_isany(&pcb->local_ip)) {
 8010f28:	fab3 f283 	clz	r2, r3
 8010f2c:	e786      	b.n	8010e3c <tcp_connect+0xc0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010f2e:	f108 0004 	add.w	r0, r8, #4
    if (local_ip == NULL) {
 8010f32:	e790      	b.n	8010e56 <tcp_connect+0xda>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f34:	2300      	movs	r3, #0
 8010f36:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8010f3a:	6063      	str	r3, [r4, #4]
 8010f3c:	e798      	b.n	8010e70 <tcp_connect+0xf4>
    pcb->local_port = tcp_new_port();
 8010f3e:	f7fe fd83 	bl	800fa48 <tcp_new_port>
 8010f42:	87e0      	strh	r0, [r4, #62]	; 0x3e
    if (pcb->local_port == 0) {
 8010f44:	2800      	cmp	r0, #0
 8010f46:	d1ae      	bne.n	8010ea6 <tcp_connect+0x12a>
      return ERR_BUF;
 8010f48:	f06f 0501 	mvn.w	r5, #1
 8010f4c:	e725      	b.n	8010d9a <tcp_connect+0x1e>
 8010f4e:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d0dc      	beq.n	8010f0e <tcp_connect+0x192>
 8010f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f56:	42a2      	cmp	r2, r4
 8010f58:	d1f9      	bne.n	8010f4e <tcp_connect+0x1d2>
 8010f5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8010f5e:	e7d6      	b.n	8010f0e <tcp_connect+0x192>
 8010f60:	0802d775 	.word	0x0802d775
 8010f64:	0802ddba 	.word	0x0802ddba
 8010f68:	0802aecf 	.word	0x0802aecf
 8010f6c:	0802ddd3 	.word	0x0802ddd3
 8010f70:	0802ddef 	.word	0x0802ddef
 8010f74:	0b680b68 	.word	0x0b680b68
 8010f78:	20016120 	.word	0x20016120
 8010f7c:	20016114 	.word	0x20016114
 8010f80:	20016110 	.word	0x20016110

08010f84 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010f84:	b570      	push	{r4, r5, r6, lr}
 8010f86:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010f88:	4604      	mov	r4, r0
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d02e      	beq.n	8010fec <tcp_netif_ip_addr_changed+0x68>
 8010f8e:	7d02      	ldrb	r2, [r0, #20]
 8010f90:	6803      	ldr	r3, [r0, #0]
 8010f92:	2a06      	cmp	r2, #6
 8010f94:	d105      	bne.n	8010fa2 <tcp_netif_ip_addr_changed+0x1e>
 8010f96:	b943      	cbnz	r3, 8010faa <tcp_netif_ip_addr_changed+0x26>
 8010f98:	6843      	ldr	r3, [r0, #4]
 8010f9a:	b933      	cbnz	r3, 8010faa <tcp_netif_ip_addr_changed+0x26>
 8010f9c:	6883      	ldr	r3, [r0, #8]
 8010f9e:	b923      	cbnz	r3, 8010faa <tcp_netif_ip_addr_changed+0x26>
 8010fa0:	68c3      	ldr	r3, [r0, #12]
 8010fa2:	3b00      	subs	r3, #0
 8010fa4:	bf18      	it	ne
 8010fa6:	2301      	movne	r3, #1
 8010fa8:	e000      	b.n	8010fac <tcp_netif_ip_addr_changed+0x28>
 8010faa:	2301      	movs	r3, #1
 8010fac:	b1f3      	cbz	r3, 8010fec <tcp_netif_ip_addr_changed+0x68>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010fae:	4b2a      	ldr	r3, [pc, #168]	; (8011058 <tcp_netif_ip_addr_changed+0xd4>)
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	6819      	ldr	r1, [r3, #0]
 8010fb4:	f7ff fd94 	bl	8010ae0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010fb8:	4b28      	ldr	r3, [pc, #160]	; (801105c <tcp_netif_ip_addr_changed+0xd8>)
 8010fba:	4620      	mov	r0, r4
 8010fbc:	6819      	ldr	r1, [r3, #0]
 8010fbe:	f7ff fd8f 	bl	8010ae0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010fc2:	b19d      	cbz	r5, 8010fec <tcp_netif_ip_addr_changed+0x68>
 8010fc4:	7d2a      	ldrb	r2, [r5, #20]
 8010fc6:	682b      	ldr	r3, [r5, #0]
 8010fc8:	2a06      	cmp	r2, #6
 8010fca:	d105      	bne.n	8010fd8 <tcp_netif_ip_addr_changed+0x54>
 8010fcc:	b943      	cbnz	r3, 8010fe0 <tcp_netif_ip_addr_changed+0x5c>
 8010fce:	686b      	ldr	r3, [r5, #4]
 8010fd0:	b933      	cbnz	r3, 8010fe0 <tcp_netif_ip_addr_changed+0x5c>
 8010fd2:	68ab      	ldr	r3, [r5, #8]
 8010fd4:	b923      	cbnz	r3, 8010fe0 <tcp_netif_ip_addr_changed+0x5c>
 8010fd6:	68eb      	ldr	r3, [r5, #12]
 8010fd8:	3b00      	subs	r3, #0
 8010fda:	bf18      	it	ne
 8010fdc:	2301      	movne	r3, #1
 8010fde:	e000      	b.n	8010fe2 <tcp_netif_ip_addr_changed+0x5e>
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	b11b      	cbz	r3, 8010fec <tcp_netif_ip_addr_changed+0x68>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fe4:	4b1e      	ldr	r3, [pc, #120]	; (8011060 <tcp_netif_ip_addr_changed+0xdc>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010fe8:	2100      	movs	r1, #0
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fea:	b903      	cbnz	r3, 8010fee <tcp_netif_ip_addr_changed+0x6a>
        }
      }
    }
  }
}
 8010fec:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010fee:	7d1a      	ldrb	r2, [r3, #20]
 8010ff0:	7d26      	ldrb	r6, [r4, #20]
 8010ff2:	4296      	cmp	r6, r2
 8010ff4:	d128      	bne.n	8011048 <tcp_netif_ip_addr_changed+0xc4>
 8010ff6:	2e06      	cmp	r6, #6
 8010ff8:	6818      	ldr	r0, [r3, #0]
 8010ffa:	6822      	ldr	r2, [r4, #0]
 8010ffc:	d10f      	bne.n	801101e <tcp_netif_ip_addr_changed+0x9a>
 8010ffe:	4282      	cmp	r2, r0
 8011000:	d111      	bne.n	8011026 <tcp_netif_ip_addr_changed+0xa2>
 8011002:	6858      	ldr	r0, [r3, #4]
 8011004:	6862      	ldr	r2, [r4, #4]
 8011006:	4290      	cmp	r0, r2
 8011008:	d10d      	bne.n	8011026 <tcp_netif_ip_addr_changed+0xa2>
 801100a:	6898      	ldr	r0, [r3, #8]
 801100c:	68a2      	ldr	r2, [r4, #8]
 801100e:	4290      	cmp	r0, r2
 8011010:	d109      	bne.n	8011026 <tcp_netif_ip_addr_changed+0xa2>
 8011012:	68d8      	ldr	r0, [r3, #12]
 8011014:	68e2      	ldr	r2, [r4, #12]
 8011016:	4290      	cmp	r0, r2
 8011018:	d105      	bne.n	8011026 <tcp_netif_ip_addr_changed+0xa2>
 801101a:	7c1a      	ldrb	r2, [r3, #16]
 801101c:	7c20      	ldrb	r0, [r4, #16]
 801101e:	1a10      	subs	r0, r2, r0
 8011020:	4242      	negs	r2, r0
 8011022:	4142      	adcs	r2, r0
 8011024:	e000      	b.n	8011028 <tcp_netif_ip_addr_changed+0xa4>
 8011026:	2200      	movs	r2, #0
 8011028:	b172      	cbz	r2, 8011048 <tcp_netif_ip_addr_changed+0xc4>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801102a:	7d2a      	ldrb	r2, [r5, #20]
 801102c:	751a      	strb	r2, [r3, #20]
 801102e:	7d2a      	ldrb	r2, [r5, #20]
 8011030:	2a06      	cmp	r2, #6
 8011032:	682a      	ldr	r2, [r5, #0]
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	d109      	bne.n	801104c <tcp_netif_ip_addr_changed+0xc8>
 8011038:	686a      	ldr	r2, [r5, #4]
 801103a:	605a      	str	r2, [r3, #4]
 801103c:	68aa      	ldr	r2, [r5, #8]
 801103e:	609a      	str	r2, [r3, #8]
 8011040:	68ea      	ldr	r2, [r5, #12]
 8011042:	60da      	str	r2, [r3, #12]
 8011044:	7c2a      	ldrb	r2, [r5, #16]
 8011046:	741a      	strb	r2, [r3, #16]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104a:	e7ce      	b.n	8010fea <tcp_netif_ip_addr_changed+0x66>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801104c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8011050:	6059      	str	r1, [r3, #4]
 8011052:	7419      	strb	r1, [r3, #16]
 8011054:	e7f8      	b.n	8011048 <tcp_netif_ip_addr_changed+0xc4>
 8011056:	bf00      	nop
 8011058:	20016114 	.word	0x20016114
 801105c:	20016120 	.word	0x20016120
 8011060:	2001611c 	.word	0x2001611c

08011064 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8011064:	4a08      	ldr	r2, [pc, #32]	; (8011088 <tcp_get_next_optbyte+0x24>)
 8011066:	8813      	ldrh	r3, [r2, #0]
 8011068:	1c59      	adds	r1, r3, #1
 801106a:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801106c:	6851      	ldr	r1, [r2, #4]
 801106e:	4610      	mov	r0, r2
 8011070:	b111      	cbz	r1, 8011078 <tcp_get_next_optbyte+0x14>
 8011072:	8912      	ldrh	r2, [r2, #8]
 8011074:	4293      	cmp	r3, r2
 8011076:	d203      	bcs.n	8011080 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 8011078:	68c2      	ldr	r2, [r0, #12]
 801107a:	4413      	add	r3, r2
 801107c:	7d18      	ldrb	r0, [r3, #20]
 801107e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011080:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 8011082:	b2db      	uxtb	r3, r3
 8011084:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8011086:	4770      	bx	lr
 8011088:	20007058 	.word	0x20007058

0801108c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011090:	4606      	mov	r6, r0
 8011092:	b930      	cbnz	r0, 80110a2 <tcp_parseopt+0x16>
 8011094:	4b1e      	ldr	r3, [pc, #120]	; (8011110 <tcp_parseopt+0x84>)
 8011096:	491f      	ldr	r1, [pc, #124]	; (8011114 <tcp_parseopt+0x88>)
 8011098:	481f      	ldr	r0, [pc, #124]	; (8011118 <tcp_parseopt+0x8c>)
 801109a:	f240 727d 	movw	r2, #1917	; 0x77d
 801109e:	f00b fd43 	bl	801cb28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80110a2:	4d1e      	ldr	r5, [pc, #120]	; (801111c <tcp_parseopt+0x90>)
 80110a4:	8a2f      	ldrh	r7, [r5, #16]
 80110a6:	b17f      	cbz	r7, 80110c8 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110a8:	2300      	movs	r3, #0
 80110aa:	802b      	strh	r3, [r5, #0]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80110ac:	f240 58b3 	movw	r8, #1459	; 0x5b3
 80110b0:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110b4:	882b      	ldrh	r3, [r5, #0]
 80110b6:	42bb      	cmp	r3, r7
 80110b8:	d206      	bcs.n	80110c8 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 80110ba:	f7ff ffd3 	bl	8011064 <tcp_get_next_optbyte>
      switch (opt) {
 80110be:	2801      	cmp	r0, #1
 80110c0:	d0f8      	beq.n	80110b4 <tcp_parseopt+0x28>
 80110c2:	2802      	cmp	r0, #2
 80110c4:	d002      	beq.n	80110cc <tcp_parseopt+0x40>
 80110c6:	b9d0      	cbnz	r0, 80110fe <tcp_parseopt+0x72>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 80110c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80110cc:	f7ff ffca 	bl	8011064 <tcp_get_next_optbyte>
 80110d0:	2804      	cmp	r0, #4
 80110d2:	d1f9      	bne.n	80110c8 <tcp_parseopt+0x3c>
 80110d4:	882b      	ldrh	r3, [r5, #0]
 80110d6:	3301      	adds	r3, #1
 80110d8:	42bb      	cmp	r3, r7
 80110da:	daf5      	bge.n	80110c8 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80110dc:	f7ff ffc2 	bl	8011064 <tcp_get_next_optbyte>
 80110e0:	0200      	lsls	r0, r0, #8
 80110e2:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 80110e4:	f7ff ffbe 	bl	8011064 <tcp_get_next_optbyte>
 80110e8:	ea44 0300 	orr.w	r3, r4, r0
 80110ec:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80110ee:	1e5a      	subs	r2, r3, #1
 80110f0:	b292      	uxth	r2, r2
 80110f2:	4542      	cmp	r2, r8
 80110f4:	bf88      	it	hi
 80110f6:	464b      	movhi	r3, r9
 80110f8:	f8a6 305a 	strh.w	r3, [r6, #90]	; 0x5a
          break;
 80110fc:	e7da      	b.n	80110b4 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 80110fe:	f7ff ffb1 	bl	8011064 <tcp_get_next_optbyte>
          if (data < 2) {
 8011102:	2801      	cmp	r0, #1
 8011104:	d9e0      	bls.n	80110c8 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 8011106:	882b      	ldrh	r3, [r5, #0]
 8011108:	3b02      	subs	r3, #2
 801110a:	4418      	add	r0, r3
 801110c:	8028      	strh	r0, [r5, #0]
 801110e:	e7d1      	b.n	80110b4 <tcp_parseopt+0x28>
 8011110:	0802de79 	.word	0x0802de79
 8011114:	0802dee4 	.word	0x0802dee4
 8011118:	0802aecf 	.word	0x0802aecf
 801111c:	20007058 	.word	0x20007058

08011120 <tcp_input_delayed_close>:
{
 8011120:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011122:	4604      	mov	r4, r0
 8011124:	b930      	cbnz	r0, 8011134 <tcp_input_delayed_close+0x14>
 8011126:	4b10      	ldr	r3, [pc, #64]	; (8011168 <tcp_input_delayed_close+0x48>)
 8011128:	4910      	ldr	r1, [pc, #64]	; (801116c <tcp_input_delayed_close+0x4c>)
 801112a:	4811      	ldr	r0, [pc, #68]	; (8011170 <tcp_input_delayed_close+0x50>)
 801112c:	f240 225a 	movw	r2, #602	; 0x25a
 8011130:	f00b fcfa 	bl	801cb28 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8011134:	4b0f      	ldr	r3, [pc, #60]	; (8011174 <tcp_input_delayed_close+0x54>)
 8011136:	7c98      	ldrb	r0, [r3, #18]
 8011138:	f010 0010 	ands.w	r0, r0, #16
 801113c:	d012      	beq.n	8011164 <tcp_input_delayed_close+0x44>
    if (!(pcb->flags & TF_RXCLOSED)) {
 801113e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8011142:	06db      	lsls	r3, r3, #27
 8011144:	d406      	bmi.n	8011154 <tcp_input_delayed_close+0x34>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011146:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801114a:	b11b      	cbz	r3, 8011154 <tcp_input_delayed_close+0x34>
 801114c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801114e:	f06f 010e 	mvn.w	r1, #14
 8011152:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011154:	4808      	ldr	r0, [pc, #32]	; (8011178 <tcp_input_delayed_close+0x58>)
 8011156:	4621      	mov	r1, r4
 8011158:	f7ff f9dc 	bl	8010514 <tcp_pcb_remove>
    tcp_free(pcb);
 801115c:	4620      	mov	r0, r4
 801115e:	f7fe fcdd 	bl	800fb1c <tcp_free>
 8011162:	2001      	movs	r0, #1
}
 8011164:	bd10      	pop	{r4, pc}
 8011166:	bf00      	nop
 8011168:	0802de79 	.word	0x0802de79
 801116c:	0802defe 	.word	0x0802defe
 8011170:	0802aecf 	.word	0x0802aecf
 8011174:	20007058 	.word	0x20007058
 8011178:	20016114 	.word	0x20016114

0801117c <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011180:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8011230 <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011184:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8011228 <tcp_free_acked_segments.isra.0+0xac>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8011188:	4606      	mov	r6, r0
 801118a:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 801118c:	460c      	mov	r4, r1
  while (seg_list != NULL &&
 801118e:	2c00      	cmp	r4, #0
 8011190:	d037      	beq.n	8011202 <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011192:	68e3      	ldr	r3, [r4, #12]
 8011194:	6858      	ldr	r0, [r3, #4]
 8011196:	f7fc ff86 	bl	800e0a6 <lwip_htonl>
 801119a:	68e3      	ldr	r3, [r4, #12]
 801119c:	8925      	ldrh	r5, [r4, #8]
 801119e:	4682      	mov	sl, r0
 80111a0:	8998      	ldrh	r0, [r3, #12]
 80111a2:	f7fc ff7d 	bl	800e0a0 <lwip_htons>
 80111a6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80111aa:	f010 0003 	ands.w	r0, r0, #3
 80111ae:	eba5 0303 	sub.w	r3, r5, r3
 80111b2:	bf18      	it	ne
 80111b4:	2001      	movne	r0, #1
 80111b6:	eb03 050a 	add.w	r5, r3, sl
 80111ba:	4405      	add	r5, r0
  while (seg_list != NULL &&
 80111bc:	2d00      	cmp	r5, #0
 80111be:	dc21      	bgt.n	8011204 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 80111c0:	e9d4 a000 	ldrd	sl, r0, [r4]
 80111c4:	f7fe fa30 	bl	800f628 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111c8:	8833      	ldrh	r3, [r6, #0]
 80111ca:	4283      	cmp	r3, r0
    clen = pbuf_clen(next->p);
 80111cc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111ce:	d206      	bcs.n	80111de <tcp_free_acked_segments.isra.0+0x62>
 80111d0:	4913      	ldr	r1, [pc, #76]	; (8011220 <tcp_free_acked_segments.isra.0+0xa4>)
 80111d2:	4814      	ldr	r0, [pc, #80]	; (8011224 <tcp_free_acked_segments.isra.0+0xa8>)
 80111d4:	464b      	mov	r3, r9
 80111d6:	f240 4257 	movw	r2, #1111	; 0x457
 80111da:	f00b fca5 	bl	801cb28 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80111de:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111e0:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80111e4:	1b45      	subs	r5, r0, r5
 80111e6:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111e8:	8923      	ldrh	r3, [r4, #8]
    tcp_seg_free(next);
 80111ea:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111ec:	4413      	add	r3, r2
 80111ee:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 80111f2:	f7fe fea7 	bl	800ff44 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80111f6:	8833      	ldrh	r3, [r6, #0]
 80111f8:	b17b      	cbz	r3, 801121a <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80111fa:	f1ba 0f00 	cmp.w	sl, #0
 80111fe:	d10c      	bne.n	801121a <tcp_free_acked_segments.isra.0+0x9e>
 8011200:	b11f      	cbz	r7, 801120a <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 8011202:	2400      	movs	r4, #0
}
 8011204:	4620      	mov	r0, r4
 8011206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801120a:	4b07      	ldr	r3, [pc, #28]	; (8011228 <tcp_free_acked_segments.isra.0+0xac>)
 801120c:	4907      	ldr	r1, [pc, #28]	; (801122c <tcp_free_acked_segments.isra.0+0xb0>)
 801120e:	4805      	ldr	r0, [pc, #20]	; (8011224 <tcp_free_acked_segments.isra.0+0xa8>)
 8011210:	f240 4261 	movw	r2, #1121	; 0x461
 8011214:	f00b fc88 	bl	801cb28 <iprintf>
  while (seg_list != NULL &&
 8011218:	e7f3      	b.n	8011202 <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 801121a:	4654      	mov	r4, sl
 801121c:	e7b7      	b.n	801118e <tcp_free_acked_segments.isra.0+0x12>
 801121e:	bf00      	nop
 8011220:	0802df23 	.word	0x0802df23
 8011224:	0802aecf 	.word	0x0802aecf
 8011228:	0802de79 	.word	0x0802de79
 801122c:	0802df4b 	.word	0x0802df4b
 8011230:	20007058 	.word	0x20007058

08011234 <tcp_receive>:
{
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011236:	4604      	mov	r4, r0
 8011238:	b930      	cbnz	r0, 8011248 <tcp_receive+0x14>
 801123a:	4b37      	ldr	r3, [pc, #220]	; (8011318 <tcp_receive+0xe4>)
 801123c:	4937      	ldr	r1, [pc, #220]	; (801131c <tcp_receive+0xe8>)
 801123e:	4838      	ldr	r0, [pc, #224]	; (8011320 <tcp_receive+0xec>)
 8011240:	f240 427b 	movw	r2, #1147	; 0x47b
 8011244:	f00b fc70 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011248:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801124c:	2b03      	cmp	r3, #3
 801124e:	d806      	bhi.n	801125e <tcp_receive+0x2a>
 8011250:	4b31      	ldr	r3, [pc, #196]	; (8011318 <tcp_receive+0xe4>)
 8011252:	4934      	ldr	r1, [pc, #208]	; (8011324 <tcp_receive+0xf0>)
 8011254:	4832      	ldr	r0, [pc, #200]	; (8011320 <tcp_receive+0xec>)
 8011256:	f240 427c 	movw	r2, #1148	; 0x47c
 801125a:	f00b fc65 	bl	801cb28 <iprintf>
  if (flags & TCP_ACK) {
 801125e:	4d32      	ldr	r5, [pc, #200]	; (8011328 <tcp_receive+0xf4>)
 8011260:	7f2b      	ldrb	r3, [r5, #28]
 8011262:	06de      	lsls	r6, r3, #27
 8011264:	f140 808d 	bpl.w	8011382 <tcp_receive+0x14e>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011268:	e9d4 601f 	ldrd	r6, r0, [r4, #124]	; 0x7c
 801126c:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801126e:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 8011272:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011274:	1af7      	subs	r7, r6, r3
 8011276:	2f00      	cmp	r7, #0
 8011278:	db0a      	blt.n	8011290 <tcp_receive+0x5c>
 801127a:	429e      	cmp	r6, r3
 801127c:	d102      	bne.n	8011284 <tcp_receive+0x50>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801127e:	1a86      	subs	r6, r0, r2
 8011280:	2e00      	cmp	r6, #0
 8011282:	db05      	blt.n	8011290 <tcp_receive+0x5c>
 8011284:	4290      	cmp	r0, r2
 8011286:	d110      	bne.n	80112aa <tcp_receive+0x76>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011288:	68ee      	ldr	r6, [r5, #12]
 801128a:	89f6      	ldrh	r6, [r6, #14]
 801128c:	428e      	cmp	r6, r1
 801128e:	d90c      	bls.n	80112aa <tcp_receive+0x76>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011290:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011292:	f8b4 c08a 	ldrh.w	ip, [r4, #138]	; 0x8a
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011296:	89f6      	ldrh	r6, [r6, #14]
 8011298:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
 801129c:	b2b7      	uxth	r7, r6
      pcb->snd_wl2 = ackno;
 801129e:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80112a2:	45bc      	cmp	ip, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
 80112a4:	bf38      	it	cc
 80112a6:	f8a4 608a 	strhcc.w	r6, [r4, #138]	; 0x8a
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80112aa:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80112ac:	1b93      	subs	r3, r2, r6
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f300 8156 	bgt.w	8011560 <tcp_receive+0x32c>
      if (tcplen == 0) {
 80112b4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f040 814e 	bne.w	8011558 <tcp_receive+0x324>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80112bc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 80112c0:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80112c4:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80112c6:	443b      	add	r3, r7
 80112c8:	428b      	cmp	r3, r1
 80112ca:	f040 8145 	bne.w	8011558 <tcp_receive+0x324>
          if (pcb->rtime >= 0) {
 80112ce:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f2c0 8140 	blt.w	8011558 <tcp_receive+0x324>
            if (pcb->lastack == ackno) {
 80112d8:	4296      	cmp	r6, r2
 80112da:	f040 813d 	bne.w	8011558 <tcp_receive+0x324>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80112de:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 80112e2:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 80112e4:	bf1c      	itt	ne
 80112e6:	3301      	addne	r3, #1
 80112e8:	f884 306b 	strbne.w	r3, [r4, #107]	; 0x6b
              if (pcb->dupacks > 3) {
 80112ec:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d91b      	bls.n	801132c <tcp_receive+0xf8>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80112f4:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 80112f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80112fc:	4413      	add	r3, r2
 80112fe:	b29b      	uxth	r3, r3
 8011300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011304:	429a      	cmp	r2, r3
 8011306:	bf88      	it	hi
 8011308:	460b      	movhi	r3, r1
 801130a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
                tcp_rexmit_fast(pcb);
 801130e:	4620      	mov	r0, r4
 8011310:	f001 ff34 	bl	801317c <tcp_rexmit_fast>
      if (!found_dupack) {
 8011314:	e00b      	b.n	801132e <tcp_receive+0xfa>
 8011316:	bf00      	nop
 8011318:	0802de79 	.word	0x0802de79
 801131c:	0802df6b 	.word	0x0802df6b
 8011320:	0802aecf 	.word	0x0802aecf
 8011324:	0802df84 	.word	0x0802df84
 8011328:	20007058 	.word	0x20007058
              if (pcb->dupacks >= 3) {
 801132c:	d0ef      	beq.n	801130e <tcp_receive+0xda>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801132e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011330:	b338      	cbz	r0, 8011382 <tcp_receive+0x14e>
 8011332:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011334:	69aa      	ldr	r2, [r5, #24]
 8011336:	1a9b      	subs	r3, r3, r2
 8011338:	2b00      	cmp	r3, #0
 801133a:	da22      	bge.n	8011382 <tcp_receive+0x14e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801133c:	4baa      	ldr	r3, [pc, #680]	; (80115e8 <tcp_receive+0x3b4>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801133e:	f9b4 7064 	ldrsh.w	r7, [r4, #100]	; 0x64
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011342:	881a      	ldrh	r2, [r3, #0]
 8011344:	b280      	uxth	r0, r0
 8011346:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 8011348:	f3c7 06cf 	ubfx	r6, r7, #3, #16
 801134c:	1b89      	subs	r1, r1, r6
 801134e:	b20b      	sxth	r3, r1
      if (m < 0) {
 8011350:	2b00      	cmp	r3, #0
        m = (s16_t) - m;
 8011352:	bfb8      	it	lt
 8011354:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 8011356:	f9b4 2066 	ldrsh.w	r2, [r4, #102]	; 0x66
        m = (s16_t) - m;
 801135a:	bfbc      	itt	lt
 801135c:	1980      	addlt	r0, r0, r6
 801135e:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 8011360:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      pcb->sa = (s16_t)(pcb->sa + m);
 8011364:	fa17 f181 	uxtah	r1, r7, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8011368:	4413      	add	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801136a:	b209      	sxth	r1, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 801136c:	b29b      	uxth	r3, r3
 801136e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011372:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8011376:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      pcb->rttest = 0;
 801137a:	2300      	movs	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 801137c:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      pcb->rttest = 0;
 8011380:	65e3      	str	r3, [r4, #92]	; 0x5c
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011382:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8011384:	6a2b      	ldr	r3, [r5, #32]
 8011386:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011388:	2800      	cmp	r0, #0
 801138a:	f000 81b2 	beq.w	80116f2 <tcp_receive+0x4be>
 801138e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8011392:	2906      	cmp	r1, #6
 8011394:	f200 81ad 	bhi.w	80116f2 <tcp_receive+0x4be>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011398:	1ad7      	subs	r7, r2, r3
 801139a:	2f01      	cmp	r7, #1
 801139c:	f100 819a 	bmi.w	80116d4 <tcp_receive+0x4a0>
 80113a0:	f1c3 0101 	rsb	r1, r3, #1
 80113a4:	1a09      	subs	r1, r1, r0
 80113a6:	4411      	add	r1, r2
 80113a8:	2900      	cmp	r1, #0
 80113aa:	f300 8193 	bgt.w	80116d4 <tcp_receive+0x4a0>
      struct pbuf *p = inseg.p;
 80113ae:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80113b0:	b936      	cbnz	r6, 80113c0 <tcp_receive+0x18c>
 80113b2:	4b8e      	ldr	r3, [pc, #568]	; (80115ec <tcp_receive+0x3b8>)
 80113b4:	498e      	ldr	r1, [pc, #568]	; (80115f0 <tcp_receive+0x3bc>)
 80113b6:	488f      	ldr	r0, [pc, #572]	; (80115f4 <tcp_receive+0x3c0>)
 80113b8:	f240 5294 	movw	r2, #1428	; 0x594
 80113bc:	f00b fbb4 	bl	801cb28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80113c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80113c4:	429f      	cmp	r7, r3
 80113c6:	d906      	bls.n	80113d6 <tcp_receive+0x1a2>
 80113c8:	4b88      	ldr	r3, [pc, #544]	; (80115ec <tcp_receive+0x3b8>)
 80113ca:	498b      	ldr	r1, [pc, #556]	; (80115f8 <tcp_receive+0x3c4>)
 80113cc:	4889      	ldr	r0, [pc, #548]	; (80115f4 <tcp_receive+0x3c0>)
 80113ce:	f240 5295 	movw	r2, #1429	; 0x595
 80113d2:	f00b fba9 	bl	801cb28 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80113d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80113d8:	891b      	ldrh	r3, [r3, #8]
      off = (u16_t)off32;
 80113da:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80113dc:	42bb      	cmp	r3, r7
 80113de:	d206      	bcs.n	80113ee <tcp_receive+0x1ba>
 80113e0:	4b82      	ldr	r3, [pc, #520]	; (80115ec <tcp_receive+0x3b8>)
 80113e2:	4986      	ldr	r1, [pc, #536]	; (80115fc <tcp_receive+0x3c8>)
 80113e4:	4883      	ldr	r0, [pc, #524]	; (80115f4 <tcp_receive+0x3c0>)
 80113e6:	f240 5297 	movw	r2, #1431	; 0x597
 80113ea:	f00b fb9d 	bl	801cb28 <iprintf>
      inseg.len -= off;
 80113ee:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80113f0:	1bdb      	subs	r3, r3, r7
 80113f2:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80113f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80113f6:	891b      	ldrh	r3, [r3, #8]
 80113f8:	1bdb      	subs	r3, r3, r7
 80113fa:	b29b      	uxth	r3, r3
        p->len = 0;
 80113fc:	2100      	movs	r1, #0
      while (p->len < off) {
 80113fe:	8972      	ldrh	r2, [r6, #10]
 8011400:	42ba      	cmp	r2, r7
 8011402:	f0c0 8161 	bcc.w	80116c8 <tcp_receive+0x494>
      pbuf_remove_header(p, off);
 8011406:	4639      	mov	r1, r7
 8011408:	4630      	mov	r0, r6
 801140a:	f7fd ff85 	bl	800f318 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801140e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011410:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011412:	622b      	str	r3, [r5, #32]
 8011414:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011416:	6a29      	ldr	r1, [r5, #32]
 8011418:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801141a:	1a8b      	subs	r3, r1, r2
 801141c:	2b00      	cmp	r3, #0
 801141e:	f2c0 8163 	blt.w	80116e8 <tcp_receive+0x4b4>
 8011422:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8011426:	1c4b      	adds	r3, r1, #1
 8011428:	1a9b      	subs	r3, r3, r2
 801142a:	1a1b      	subs	r3, r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	f300 815b 	bgt.w	80116e8 <tcp_receive+0x4b4>
      if (pcb->rcv_nxt == seqno) {
 8011432:	4291      	cmp	r1, r2
 8011434:	f040 8158 	bne.w	80116e8 <tcp_receive+0x4b4>
        tcplen = TCP_TCPLEN(&inseg);
 8011438:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801143a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 801143c:	8998      	ldrh	r0, [r3, #12]
 801143e:	f7fc fe2f 	bl	800e0a0 <lwip_htons>
 8011442:	f010 0003 	ands.w	r0, r0, #3
 8011446:	bf18      	it	ne
 8011448:	2001      	movne	r0, #1
        if (tcplen > pcb->rcv_wnd) {
 801144a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
        tcplen = TCP_TCPLEN(&inseg);
 801144e:	4430      	add	r0, r6
 8011450:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8011452:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8011454:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 8011456:	d240      	bcs.n	80114da <tcp_receive+0x2a6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011458:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801145a:	8998      	ldrh	r0, [r3, #12]
 801145c:	f7fc fe20 	bl	800e0a0 <lwip_htons>
 8011460:	07c6      	lsls	r6, r0, #31
 8011462:	d50d      	bpl.n	8011480 <tcp_receive+0x24c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011464:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011466:	899e      	ldrh	r6, [r3, #12]
 8011468:	4630      	mov	r0, r6
 801146a:	f7fc fe19 	bl	800e0a0 <lwip_htons>
 801146e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8011472:	f7fc fe15 	bl	800e0a0 <lwip_htons>
 8011476:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 801147a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801147c:	4306      	orrs	r6, r0
 801147e:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011480:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8011484:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011486:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011488:	8998      	ldrh	r0, [r3, #12]
 801148a:	f7fc fe09 	bl	800e0a0 <lwip_htons>
 801148e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8011490:	bf48      	it	mi
 8011492:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 8011494:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 8011496:	bf44      	itt	mi
 8011498:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801149c:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 801149e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80114a0:	f7fe f852 	bl	800f548 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80114a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80114a6:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 80114a8:	8998      	ldrh	r0, [r3, #12]
 80114aa:	f7fc fdf9 	bl	800e0a0 <lwip_htons>
 80114ae:	f010 0003 	ands.w	r0, r0, #3
 80114b2:	bf18      	it	ne
 80114b4:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80114b6:	6a2b      	ldr	r3, [r5, #32]
 80114b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          tcplen = TCP_TCPLEN(&inseg);
 80114ba:	4430      	add	r0, r6
 80114bc:	b280      	uxth	r0, r0
 80114be:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80114c0:	4418      	add	r0, r3
 80114c2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80114c6:	4413      	add	r3, r2
 80114c8:	4298      	cmp	r0, r3
 80114ca:	d006      	beq.n	80114da <tcp_receive+0x2a6>
 80114cc:	4b47      	ldr	r3, [pc, #284]	; (80115ec <tcp_receive+0x3b8>)
 80114ce:	494c      	ldr	r1, [pc, #304]	; (8011600 <tcp_receive+0x3cc>)
 80114d0:	4848      	ldr	r0, [pc, #288]	; (80115f4 <tcp_receive+0x3c0>)
 80114d2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80114d6:	f00b fb27 	bl	801cb28 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 80114da:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 80114dc:	6a2b      	ldr	r3, [r5, #32]
 80114de:	4413      	add	r3, r2
 80114e0:	64e3      	str	r3, [r4, #76]	; 0x4c
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80114e2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d206      	bcs.n	80114f8 <tcp_receive+0x2c4>
 80114ea:	4b40      	ldr	r3, [pc, #256]	; (80115ec <tcp_receive+0x3b8>)
 80114ec:	4945      	ldr	r1, [pc, #276]	; (8011604 <tcp_receive+0x3d0>)
 80114ee:	4841      	ldr	r0, [pc, #260]	; (80115f4 <tcp_receive+0x3c0>)
 80114f0:	f240 6207 	movw	r2, #1543	; 0x607
 80114f4:	f00b fb18 	bl	801cb28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80114f8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80114fc:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        tcp_update_rcv_ann_wnd(pcb);
 8011504:	4620      	mov	r0, r4
 8011506:	f7fe fc9f 	bl	800fe48 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801150a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801150c:	891a      	ldrh	r2, [r3, #8]
 801150e:	b112      	cbz	r2, 8011516 <tcp_receive+0x2e2>
          recv_data = inseg.p;
 8011510:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 8011512:	2300      	movs	r3, #0
 8011514:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011516:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011518:	8998      	ldrh	r0, [r3, #12]
 801151a:	f7fc fdc1 	bl	800e0a0 <lwip_htons>
 801151e:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 8011520:	bf48      	it	mi
 8011522:	7cab      	ldrbmi	r3, [r5, #18]
        if (ip_current_is_v6()) {
 8011524:	4838      	ldr	r0, [pc, #224]	; (8011608 <tcp_receive+0x3d4>)
          recv_flags |= TF_GOT_FIN;
 8011526:	bf44      	itt	mi
 8011528:	f043 0320 	orrmi.w	r3, r3, #32
 801152c:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 801152e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8011532:	07da      	lsls	r2, r3, #31
 8011534:	bf46      	itte	mi
 8011536:	f023 0301 	bicmi.w	r3, r3, #1
 801153a:	f043 0302 	orrmi.w	r3, r3, #2
 801153e:	f043 0301 	orrpl.w	r3, r3, #1
 8011542:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ip_current_is_v6()) {
 8011546:	68c3      	ldr	r3, [r0, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 80e2 	beq.w	8011712 <tcp_receive+0x4de>
}
 801154e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          nd6_reachability_hint(ip6_current_src_addr());
 8011552:	3014      	adds	r0, #20
 8011554:	f7fc bcd0 	b.w	800def8 <nd6_reachability_hint>
        pcb->dupacks = 0;
 8011558:	2300      	movs	r3, #0
 801155a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801155e:	e6e6      	b.n	801132e <tcp_receive+0xfa>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011560:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8011562:	1a51      	subs	r1, r2, r1
 8011564:	2900      	cmp	r1, #0
 8011566:	f300 80ab 	bgt.w	80116c0 <tcp_receive+0x48c>
      if (pcb->flags & TF_INFR) {
 801156a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 801156e:	0748      	lsls	r0, r1, #29
 8011570:	d50a      	bpl.n	8011588 <tcp_receive+0x354>
        tcp_clear_flags(pcb, TF_INFR);
 8011572:	f021 0104 	bic.w	r1, r1, #4
 8011576:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
        pcb->cwnd = pcb->ssthresh;
 801157a:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
 801157e:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
        pcb->bytes_acked = 0;
 8011582:	2100      	movs	r1, #0
 8011584:	f8a4 1092 	strh.w	r1, [r4, #146]	; 0x92
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011588:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
 801158c:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
      pcb->lastack = ackno;
 8011590:	66e2      	str	r2, [r4, #108]	; 0x6c
      if (pcb->state >= ESTABLISHED) {
 8011592:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011596:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 801159a:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
      if (pcb->state >= ESTABLISHED) {
 801159e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 80115a0:	f04f 0100 	mov.w	r1, #0
 80115a4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      if (pcb->state >= ESTABLISHED) {
 80115a8:	d93a      	bls.n	8011620 <tcp_receive+0x3ec>
        if (pcb->cwnd < pcb->ssthresh) {
 80115aa:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 80115ae:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 80115b2:	428a      	cmp	r2, r1
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80115b4:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 80115b6:	d929      	bls.n	801160c <tcp_receive+0x3d8>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80115b8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80115bc:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80115c0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80115c4:	bf14      	ite	ne
 80115c6:	2001      	movne	r0, #1
 80115c8:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80115ca:	fb12 f200 	smulbb	r2, r2, r0
 80115ce:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 80115d0:	429a      	cmp	r2, r3
 80115d2:	bf94      	ite	ls
 80115d4:	188b      	addls	r3, r1, r2
 80115d6:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115d8:	b29b      	uxth	r3, r3
 80115da:	4299      	cmp	r1, r3
 80115dc:	d901      	bls.n	80115e2 <tcp_receive+0x3ae>
          TCP_WND_INC(pcb->cwnd, increase);
 80115de:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115e2:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 80115e6:	e01b      	b.n	8011620 <tcp_receive+0x3ec>
 80115e8:	20016118 	.word	0x20016118
 80115ec:	0802de79 	.word	0x0802de79
 80115f0:	0802df9d 	.word	0x0802df9d
 80115f4:	0802aecf 	.word	0x0802aecf
 80115f8:	0802dfad 	.word	0x0802dfad
 80115fc:	0802dfbc 	.word	0x0802dfbc
 8011600:	0802dfcc 	.word	0x0802dfcc
 8011604:	0802e003 	.word	0x0802e003
 8011608:	2000f4b8 	.word	0x2000f4b8
          TCP_WND_INC(pcb->bytes_acked, acked);
 801160c:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
 8011610:	4413      	add	r3, r2
 8011612:	b29b      	uxth	r3, r3
 8011614:	429a      	cmp	r2, r3
 8011616:	d840      	bhi.n	801169a <tcp_receive+0x466>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011618:	4299      	cmp	r1, r3
 801161a:	d940      	bls.n	801169e <tcp_receive+0x46a>
 801161c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011620:	f104 068e 	add.w	r6, r4, #142	; 0x8e
 8011624:	e9d4 2125 	ldrd	r2, r1, [r4, #148]	; 0x94
 8011628:	4630      	mov	r0, r6
 801162a:	f7ff fda7 	bl	801117c <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801162e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011632:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8011636:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011638:	4630      	mov	r0, r6
 801163a:	f7ff fd9f 	bl	801117c <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 801163e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011642:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
      if (pcb->unacked == NULL) {
 8011646:	fab3 f383 	clz	r3, r3
 801164a:	095b      	lsrs	r3, r3, #5
 801164c:	425b      	negs	r3, r3
 801164e:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
      pcb->polltmr = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (pcb->unsent == NULL) {
 8011658:	b908      	cbnz	r0, 801165e <tcp_receive+0x42a>
        pcb->unsent_oversize = 0;
 801165a:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
      if (ip_current_is_v6()) {
 801165e:	482d      	ldr	r0, [pc, #180]	; (8011714 <tcp_receive+0x4e0>)
 8011660:	68c3      	ldr	r3, [r0, #12]
 8011662:	b113      	cbz	r3, 801166a <tcp_receive+0x436>
        nd6_reachability_hint(ip6_current_src_addr());
 8011664:	3014      	adds	r0, #20
 8011666:	f7fc fc47 	bl	800def8 <nd6_reachability_hint>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801166a:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 801166e:	8aaa      	ldrh	r2, [r5, #20]
 8011670:	4413      	add	r3, r2
 8011672:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
      if (pcb->flags & TF_RTO) {
 8011676:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801167a:	051f      	lsls	r7, r3, #20
 801167c:	f57f ae57 	bpl.w	801132e <tcp_receive+0xfa>
        if (pcb->unacked == NULL) {
 8011680:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011684:	b993      	cbnz	r3, 80116ac <tcp_receive+0x478>
          if ((pcb->unsent == NULL) ||
 8011686:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801168a:	b97b      	cbnz	r3, 80116ac <tcp_receive+0x478>
          tcp_clear_flags(pcb, TF_RTO);
 801168c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8011690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011694:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8011698:	e649      	b.n	801132e <tcp_receive+0xfa>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801169a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801169e:	1a5b      	subs	r3, r3, r1
 80116a0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116a4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80116a8:	440b      	add	r3, r1
 80116aa:	e795      	b.n	80115d8 <tcp_receive+0x3a4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80116b0:	6858      	ldr	r0, [r3, #4]
 80116b2:	f7fc fcf8 	bl	800e0a6 <lwip_htonl>
 80116b6:	1a30      	subs	r0, r6, r0
 80116b8:	2800      	cmp	r0, #0
 80116ba:	f73f ae38 	bgt.w	801132e <tcp_receive+0xfa>
 80116be:	e7e5      	b.n	801168c <tcp_receive+0x458>
      tcp_send_empty_ack(pcb);
 80116c0:	4620      	mov	r0, r4
 80116c2:	f001 fddb 	bl	801327c <tcp_send_empty_ack>
 80116c6:	e632      	b.n	801132e <tcp_receive+0xfa>
        off -= p->len;
 80116c8:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 80116ca:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 80116cc:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 80116ce:	b2bf      	uxth	r7, r7
        p = p->next;
 80116d0:	6836      	ldr	r6, [r6, #0]
 80116d2:	e694      	b.n	80113fe <tcp_receive+0x1ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80116d4:	1a9b      	subs	r3, r3, r2
 80116d6:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80116d8:	bfbe      	ittt	lt
 80116da:	f8b4 3042 	ldrhlt.w	r3, [r4, #66]	; 0x42
 80116de:	f043 0302 	orrlt.w	r3, r3, #2
 80116e2:	f8a4 3042 	strhlt.w	r3, [r4, #66]	; 0x42
 80116e6:	e696      	b.n	8011416 <tcp_receive+0x1e2>
        tcp_send_empty_ack(pcb);
 80116e8:	4620      	mov	r0, r4
}
 80116ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 80116ee:	f001 bdc5 	b.w	801327c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116f2:	1a99      	subs	r1, r3, r2
 80116f4:	2900      	cmp	r1, #0
 80116f6:	db06      	blt.n	8011706 <tcp_receive+0x4d2>
 80116f8:	3301      	adds	r3, #1
 80116fa:	1a9b      	subs	r3, r3, r2
 80116fc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8011700:	1a9b      	subs	r3, r3, r2
 8011702:	2b00      	cmp	r3, #0
 8011704:	dd05      	ble.n	8011712 <tcp_receive+0x4de>
      tcp_ack_now(pcb);
 8011706:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801170a:	f043 0302 	orr.w	r3, r3, #2
 801170e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 8011712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011714:	2000f4b8 	.word	0x2000f4b8

08011718 <tcp_input>:
{
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801171c:	4683      	mov	fp, r0
{
 801171e:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011720:	b928      	cbnz	r0, 801172e <tcp_input+0x16>
 8011722:	4bac      	ldr	r3, [pc, #688]	; (80119d4 <tcp_input+0x2bc>)
 8011724:	49ac      	ldr	r1, [pc, #688]	; (80119d8 <tcp_input+0x2c0>)
 8011726:	48ad      	ldr	r0, [pc, #692]	; (80119dc <tcp_input+0x2c4>)
 8011728:	2283      	movs	r2, #131	; 0x83
 801172a:	f00b f9fd 	bl	801cb28 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 801172e:	4bac      	ldr	r3, [pc, #688]	; (80119e0 <tcp_input+0x2c8>)
 8011730:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011734:	60da      	str	r2, [r3, #12]
  if (p->len < TCP_HLEN) {
 8011736:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801173a:	2a13      	cmp	r2, #19
 801173c:	4699      	mov	r9, r3
 801173e:	d912      	bls.n	8011766 <tcp_input+0x4e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011740:	4ca8      	ldr	r4, [pc, #672]	; (80119e4 <tcp_input+0x2cc>)
 8011742:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011746:	2b06      	cmp	r3, #6
 8011748:	d113      	bne.n	8011772 <tcp_input+0x5a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801174a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801174e:	2bff      	cmp	r3, #255	; 0xff
 8011750:	d009      	beq.n	8011766 <tcp_input+0x4e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011752:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011756:	8998      	ldrh	r0, [r3, #12]
 8011758:	f7fc fca2 	bl	800e0a0 <lwip_htons>
 801175c:	0a80      	lsrs	r0, r0, #10
 801175e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011762:	2913      	cmp	r1, #19
 8011764:	d814      	bhi.n	8011790 <tcp_input+0x78>
  pbuf_free(p);
 8011766:	4658      	mov	r0, fp
}
 8011768:	b009      	add	sp, #36	; 0x24
 801176a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801176e:	f7fd be07 	b.w	800f380 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011772:	6821      	ldr	r1, [r4, #0]
 8011774:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011776:	f7f8 ffdc 	bl	800a732 <ip4_addr_isbroadcast_u32>
 801177a:	2800      	cmp	r0, #0
 801177c:	d1f3      	bne.n	8011766 <tcp_input+0x4e>
 801177e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8011782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011784:	2a06      	cmp	r2, #6
 8011786:	d0e0      	beq.n	801174a <tcp_input+0x32>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801178c:	2be0      	cmp	r3, #224	; 0xe0
 801178e:	e7df      	b.n	8011750 <tcp_input+0x38>
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011790:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8011794:	428b      	cmp	r3, r1
 8011796:	b28a      	uxth	r2, r1
 8011798:	d3e5      	bcc.n	8011766 <tcp_input+0x4e>
  tcphdr_opt2 = NULL;
 801179a:	2000      	movs	r0, #0
 801179c:	f8c9 0004 	str.w	r0, [r9, #4]
  if (p->len >= hdrlen_bytes) {
 80117a0:	f8bb 000a 	ldrh.w	r0, [fp, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80117a4:	f1a2 0314 	sub.w	r3, r2, #20
 80117a8:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 80117aa:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80117ac:	f8a9 3010 	strh.w	r3, [r9, #16]
  if (p->len >= hdrlen_bytes) {
 80117b0:	d347      	bcc.n	8011842 <tcp_input+0x12a>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80117b2:	4658      	mov	r0, fp
    tcphdr_opt1len = tcphdr_optlen;
 80117b4:	f8a9 3008 	strh.w	r3, [r9, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80117b8:	f7fd fdae 	bl	800f318 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80117bc:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80117c0:	8828      	ldrh	r0, [r5, #0]
 80117c2:	f7fc fc6d 	bl	800e0a0 <lwip_htons>
 80117c6:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80117c8:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80117cc:	8868      	ldrh	r0, [r5, #2]
 80117ce:	f7fc fc67 	bl	800e0a0 <lwip_htons>
 80117d2:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80117d4:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80117d8:	6868      	ldr	r0, [r5, #4]
 80117da:	f7fc fc64 	bl	800e0a6 <lwip_htonl>
 80117de:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80117e0:	f8d9 500c 	ldr.w	r5, [r9, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80117e4:	f8c9 0020 	str.w	r0, [r9, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80117e8:	68a8      	ldr	r0, [r5, #8]
 80117ea:	f7fc fc5c 	bl	800e0a6 <lwip_htonl>
 80117ee:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80117f0:	f8d9 500c 	ldr.w	r5, [r9, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80117f4:	f8c9 0018 	str.w	r0, [r9, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80117f8:	89e8      	ldrh	r0, [r5, #14]
 80117fa:	f7fc fc51 	bl	800e0a0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80117fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011802:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 8011804:	8998      	ldrh	r0, [r3, #12]
 8011806:	f7fc fc4b 	bl	800e0a0 <lwip_htons>
 801180a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 801180e:	0785      	lsls	r5, r0, #30
  tcplen = p->tot_len;
 8011810:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  flags = TCPH_FLAGS(tcphdr);
 8011814:	f889 301c 	strb.w	r3, [r9, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011818:	d155      	bne.n	80118c6 <tcp_input+0x1ae>
  tcplen = p->tot_len;
 801181a:	f8a9 2024 	strh.w	r2, [r9, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801181e:	4e72      	ldr	r6, [pc, #456]	; (80119e8 <tcp_input+0x2d0>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011820:	4b6c      	ldr	r3, [pc, #432]	; (80119d4 <tcp_input+0x2bc>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011822:	6835      	ldr	r5, [r6, #0]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011824:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8011a08 <tcp_input+0x2f0>
 8011828:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80119dc <tcp_input+0x2c4>
  prev = NULL;
 801182c:	2700      	movs	r7, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801182e:	2d00      	cmp	r5, #0
 8011830:	d150      	bne.n	80118d4 <tcp_input+0x1bc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011832:	4b6e      	ldr	r3, [pc, #440]	; (80119ec <tcp_input+0x2d4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011834:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80119d4 <tcp_input+0x2bc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011838:	f8d3 a000 	ldr.w	sl, [r3]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801183c:	4f6c      	ldr	r7, [pc, #432]	; (80119f0 <tcp_input+0x2d8>)
 801183e:	4e67      	ldr	r6, [pc, #412]	; (80119dc <tcp_input+0x2c4>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011840:	e1f1      	b.n	8011c26 <tcp_input+0x50e>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011842:	f8db 3000 	ldr.w	r3, [fp]
 8011846:	b92b      	cbnz	r3, 8011854 <tcp_input+0x13c>
 8011848:	4b62      	ldr	r3, [pc, #392]	; (80119d4 <tcp_input+0x2bc>)
 801184a:	496a      	ldr	r1, [pc, #424]	; (80119f4 <tcp_input+0x2dc>)
 801184c:	4863      	ldr	r0, [pc, #396]	; (80119dc <tcp_input+0x2c4>)
 801184e:	22c2      	movs	r2, #194	; 0xc2
 8011850:	f00b f96a 	bl	801cb28 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 8011854:	2114      	movs	r1, #20
 8011856:	4658      	mov	r0, fp
 8011858:	f7fd fd5e 	bl	800f318 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 801185c:	f8bb 500a 	ldrh.w	r5, [fp, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011860:	f8b9 7010 	ldrh.w	r7, [r9, #16]
    tcphdr_opt1len = p->len;
 8011864:	f8a9 5008 	strh.w	r5, [r9, #8]
    pbuf_remove_header(p, tcphdr_opt1len);
 8011868:	4629      	mov	r1, r5
 801186a:	4658      	mov	r0, fp
 801186c:	f7fd fd54 	bl	800f318 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8011870:	f8db 0000 	ldr.w	r0, [fp]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011874:	1b7e      	subs	r6, r7, r5
    if (opt2len > p->next->len) {
 8011876:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011878:	b2b6      	uxth	r6, r6
    if (opt2len > p->next->len) {
 801187a:	42b3      	cmp	r3, r6
 801187c:	f4ff af73 	bcc.w	8011766 <tcp_input+0x4e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011880:	6843      	ldr	r3, [r0, #4]
 8011882:	f8c9 3004 	str.w	r3, [r9, #4]
    pbuf_remove_header(p->next, opt2len);
 8011886:	4631      	mov	r1, r6
 8011888:	f7fd fd46 	bl	800f318 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801188c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8011890:	441d      	add	r5, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011892:	f8bb 300a 	ldrh.w	r3, [fp, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011896:	1bed      	subs	r5, r5, r7
 8011898:	f8ab 5008 	strh.w	r5, [fp, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801189c:	b12b      	cbz	r3, 80118aa <tcp_input+0x192>
 801189e:	4b4d      	ldr	r3, [pc, #308]	; (80119d4 <tcp_input+0x2bc>)
 80118a0:	4955      	ldr	r1, [pc, #340]	; (80119f8 <tcp_input+0x2e0>)
 80118a2:	484e      	ldr	r0, [pc, #312]	; (80119dc <tcp_input+0x2c4>)
 80118a4:	22df      	movs	r2, #223	; 0xdf
 80118a6:	f00b f93f 	bl	801cb28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80118aa:	f8db 3000 	ldr.w	r3, [fp]
 80118ae:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 80118b2:	891b      	ldrh	r3, [r3, #8]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d081      	beq.n	80117bc <tcp_input+0xa4>
 80118b8:	4b46      	ldr	r3, [pc, #280]	; (80119d4 <tcp_input+0x2bc>)
 80118ba:	4950      	ldr	r1, [pc, #320]	; (80119fc <tcp_input+0x2e4>)
 80118bc:	4847      	ldr	r0, [pc, #284]	; (80119dc <tcp_input+0x2c4>)
 80118be:	22e0      	movs	r2, #224	; 0xe0
 80118c0:	f00b f932 	bl	801cb28 <iprintf>
 80118c4:	e77a      	b.n	80117bc <tcp_input+0xa4>
    tcplen++;
 80118c6:	1c53      	adds	r3, r2, #1
 80118c8:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 80118ca:	429a      	cmp	r2, r3
    tcplen++;
 80118cc:	f8a9 3024 	strh.w	r3, [r9, #36]	; 0x24
    if (tcplen < p->tot_len) {
 80118d0:	d9a5      	bls.n	801181e <tcp_input+0x106>
 80118d2:	e748      	b.n	8011766 <tcp_input+0x4e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80118d4:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80118d8:	b92a      	cbnz	r2, 80118e6 <tcp_input+0x1ce>
 80118da:	22fb      	movs	r2, #251	; 0xfb
 80118dc:	4651      	mov	r1, sl
 80118de:	4640      	mov	r0, r8
 80118e0:	f00b f922 	bl	801cb28 <iprintf>
 80118e4:	4b3b      	ldr	r3, [pc, #236]	; (80119d4 <tcp_input+0x2bc>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80118e6:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80118ea:	2a0a      	cmp	r2, #10
 80118ec:	d105      	bne.n	80118fa <tcp_input+0x1e2>
 80118ee:	4944      	ldr	r1, [pc, #272]	; (8011a00 <tcp_input+0x2e8>)
 80118f0:	22fc      	movs	r2, #252	; 0xfc
 80118f2:	4640      	mov	r0, r8
 80118f4:	f00b f918 	bl	801cb28 <iprintf>
 80118f8:	4b36      	ldr	r3, [pc, #216]	; (80119d4 <tcp_input+0x2bc>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80118fa:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80118fe:	2a01      	cmp	r2, #1
 8011900:	d105      	bne.n	801190e <tcp_input+0x1f6>
 8011902:	4940      	ldr	r1, [pc, #256]	; (8011a04 <tcp_input+0x2ec>)
 8011904:	22fd      	movs	r2, #253	; 0xfd
 8011906:	4640      	mov	r0, r8
 8011908:	f00b f90e 	bl	801cb28 <iprintf>
 801190c:	4b31      	ldr	r3, [pc, #196]	; (80119d4 <tcp_input+0x2bc>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801190e:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8011912:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011914:	b138      	cbz	r0, 8011926 <tcp_input+0x20e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011916:	6862      	ldr	r2, [r4, #4]
 8011918:	f892 20de 	ldrb.w	r2, [r2, #222]	; 0xde
 801191c:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801191e:	b2d2      	uxtb	r2, r2
 8011920:	4290      	cmp	r0, r2
 8011922:	f040 80d4 	bne.w	8011ace <tcp_input+0x3b6>
    if (pcb->remote_port == tcphdr->src &&
 8011926:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801192a:	f8b5 c040 	ldrh.w	ip, [r5, #64]	; 0x40
 801192e:	8810      	ldrh	r0, [r2, #0]
 8011930:	4584      	cmp	ip, r0
 8011932:	f040 80cc 	bne.w	8011ace <tcp_input+0x3b6>
 8011936:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
 8011938:	8852      	ldrh	r2, [r2, #2]
 801193a:	4290      	cmp	r0, r2
 801193c:	f040 80c7 	bne.w	8011ace <tcp_input+0x3b6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011940:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
        pcb->local_port == tcphdr->dest &&
 8011944:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8011948:	4594      	cmp	ip, r2
 801194a:	f040 80c0 	bne.w	8011ace <tcp_input+0x3b6>
 801194e:	f1bc 0f06 	cmp.w	ip, #6
 8011952:	69a8      	ldr	r0, [r5, #24]
 8011954:	6962      	ldr	r2, [r4, #20]
 8011956:	d111      	bne.n	801197c <tcp_input+0x264>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011958:	4282      	cmp	r2, r0
 801195a:	d113      	bne.n	8011984 <tcp_input+0x26c>
 801195c:	69e8      	ldr	r0, [r5, #28]
 801195e:	69a2      	ldr	r2, [r4, #24]
 8011960:	4290      	cmp	r0, r2
 8011962:	d10f      	bne.n	8011984 <tcp_input+0x26c>
 8011964:	6a28      	ldr	r0, [r5, #32]
 8011966:	69e2      	ldr	r2, [r4, #28]
 8011968:	4290      	cmp	r0, r2
 801196a:	d10b      	bne.n	8011984 <tcp_input+0x26c>
 801196c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801196e:	6a22      	ldr	r2, [r4, #32]
 8011970:	4290      	cmp	r0, r2
 8011972:	d107      	bne.n	8011984 <tcp_input+0x26c>
 8011974:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8011978:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
        pcb->local_port == tcphdr->dest &&
 801197c:	1a10      	subs	r0, r2, r0
 801197e:	4242      	negs	r2, r0
 8011980:	4142      	adcs	r2, r0
 8011982:	e000      	b.n	8011986 <tcp_input+0x26e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011984:	2200      	movs	r2, #0
        pcb->local_port == tcphdr->dest &&
 8011986:	2a00      	cmp	r2, #0
 8011988:	f000 80a1 	beq.w	8011ace <tcp_input+0x3b6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801198c:	7d2a      	ldrb	r2, [r5, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801198e:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
 8011992:	4594      	cmp	ip, r2
 8011994:	f040 809b 	bne.w	8011ace <tcp_input+0x3b6>
 8011998:	f1bc 0f06 	cmp.w	ip, #6
 801199c:	6828      	ldr	r0, [r5, #0]
 801199e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80119a0:	d110      	bne.n	80119c4 <tcp_input+0x2ac>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80119a2:	4282      	cmp	r2, r0
 80119a4:	d132      	bne.n	8011a0c <tcp_input+0x2f4>
 80119a6:	6868      	ldr	r0, [r5, #4]
 80119a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80119aa:	4290      	cmp	r0, r2
 80119ac:	d12e      	bne.n	8011a0c <tcp_input+0x2f4>
 80119ae:	68a8      	ldr	r0, [r5, #8]
 80119b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80119b2:	4290      	cmp	r0, r2
 80119b4:	d12a      	bne.n	8011a0c <tcp_input+0x2f4>
 80119b6:	68e8      	ldr	r0, [r5, #12]
 80119b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80119ba:	4290      	cmp	r0, r2
 80119bc:	d126      	bne.n	8011a0c <tcp_input+0x2f4>
 80119be:	7c2a      	ldrb	r2, [r5, #16]
 80119c0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80119c4:	eba2 0e00 	sub.w	lr, r2, r0
 80119c8:	f1de 0200 	rsbs	r2, lr, #0
 80119cc:	eb42 020e 	adc.w	r2, r2, lr
 80119d0:	e01d      	b.n	8011a0e <tcp_input+0x2f6>
 80119d2:	bf00      	nop
 80119d4:	0802de79 	.word	0x0802de79
 80119d8:	0802e022 	.word	0x0802e022
 80119dc:	0802aecf 	.word	0x0802aecf
 80119e0:	20007058 	.word	0x20007058
 80119e4:	2000f4b8 	.word	0x2000f4b8
 80119e8:	20016114 	.word	0x20016114
 80119ec:	20016124 	.word	0x20016124
 80119f0:	0802e142 	.word	0x0802e142
 80119f4:	0802e03a 	.word	0x0802e03a
 80119f8:	0802e04a 	.word	0x0802e04a
 80119fc:	0802e056 	.word	0x0802e056
 8011a00:	0802e09c 	.word	0x0802e09c
 8011a04:	0802e0c6 	.word	0x0802e0c6
 8011a08:	0802e075 	.word	0x0802e075
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011a0c:	2200      	movs	r2, #0
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a0e:	2a00      	cmp	r2, #0
 8011a10:	d05d      	beq.n	8011ace <tcp_input+0x3b6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011a12:	42a9      	cmp	r1, r5
 8011a14:	f040 8514 	bne.w	8012440 <tcp_input+0xd28>
 8011a18:	4b99      	ldr	r3, [pc, #612]	; (8011c80 <tcp_input+0x568>)
 8011a1a:	499a      	ldr	r1, [pc, #616]	; (8011c84 <tcp_input+0x56c>)
 8011a1c:	489a      	ldr	r0, [pc, #616]	; (8011c88 <tcp_input+0x570>)
 8011a1e:	f240 120d 	movw	r2, #269	; 0x10d
 8011a22:	f00b f881 	bl	801cb28 <iprintf>
      if (prev != NULL) {
 8011a26:	b127      	cbz	r7, 8011a32 <tcp_input+0x31a>
        prev->next = pcb->next;
 8011a28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a2a:	637b      	str	r3, [r7, #52]	; 0x34
        pcb->next = tcp_active_pcbs;
 8011a2c:	6833      	ldr	r3, [r6, #0]
 8011a2e:	636b      	str	r3, [r5, #52]	; 0x34
        tcp_active_pcbs = pcb;
 8011a30:	6035      	str	r5, [r6, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011a32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011a34:	42ab      	cmp	r3, r5
 8011a36:	d106      	bne.n	8011a46 <tcp_input+0x32e>
 8011a38:	4b91      	ldr	r3, [pc, #580]	; (8011c80 <tcp_input+0x568>)
 8011a3a:	4994      	ldr	r1, [pc, #592]	; (8011c8c <tcp_input+0x574>)
 8011a3c:	4892      	ldr	r0, [pc, #584]	; (8011c88 <tcp_input+0x570>)
 8011a3e:	f240 1215 	movw	r2, #277	; 0x115
 8011a42:	f00b f871 	bl	801cb28 <iprintf>
    inseg.len = p->tot_len;
 8011a46:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8011a4a:	f8a9 2030 	strh.w	r2, [r9, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 8011a4e:	f8d9 200c 	ldr.w	r2, [r9, #12]
    inseg.p = p;
 8011a52:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
    inseg.next = NULL;
 8011a56:	2300      	movs	r3, #0
    recv_data = NULL;
 8011a58:	e9c9 230d 	strd	r2, r3, [r9, #52]	; 0x34
    inseg.next = NULL;
 8011a5c:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
    recv_flags = 0;
 8011a60:	f889 3012 	strb.w	r3, [r9, #18]
    recv_acked = 0;
 8011a64:	f8a9 3014 	strh.w	r3, [r9, #20]
    if (flags & TCP_PSH) {
 8011a68:	f899 301c 	ldrb.w	r3, [r9, #28]
 8011a6c:	071b      	lsls	r3, r3, #28
 8011a6e:	d505      	bpl.n	8011a7c <tcp_input+0x364>
      p->flags |= PBUF_FLAG_PUSH;
 8011a70:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8011a74:	f043 0301 	orr.w	r3, r3, #1
 8011a78:	f88b 300d 	strb.w	r3, [fp, #13]
    if (pcb->refused_data != NULL) {
 8011a7c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8011a80:	4f83      	ldr	r7, [pc, #524]	; (8011c90 <tcp_input+0x578>)
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 8209 	beq.w	8011e9a <tcp_input+0x782>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f7fe fea7 	bl	80107dc <tcp_process_refused_data>
 8011a8e:	300d      	adds	r0, #13
 8011a90:	d009      	beq.n	8011aa6 <tcp_input+0x38e>
 8011a92:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f000 81ff 	beq.w	8011e9a <tcp_input+0x782>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011a9c:	f8b9 3024 	ldrh.w	r3, [r9, #36]	; 0x24
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 81fa 	beq.w	8011e9a <tcp_input+0x782>
        if (pcb->rcv_ann_wnd == 0) {
 8011aa6:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8011aaa:	b913      	cbnz	r3, 8011ab2 <tcp_input+0x39a>
          tcp_send_empty_ack(pcb);
 8011aac:	4628      	mov	r0, r5
 8011aae:	f001 fbe5 	bl	801327c <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8011ab2:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
    tcp_input_pcb = NULL;
 8011ab6:	2400      	movs	r4, #0
 8011ab8:	603c      	str	r4, [r7, #0]
    recv_data = NULL;
 8011aba:	f8c9 4038 	str.w	r4, [r9, #56]	; 0x38
    if (inseg.p != NULL) {
 8011abe:	b118      	cbz	r0, 8011ac8 <tcp_input+0x3b0>
      pbuf_free(inseg.p);
 8011ac0:	f7fd fc5e 	bl	800f380 <pbuf_free>
      inseg.p = NULL;
 8011ac4:	f8c9 402c 	str.w	r4, [r9, #44]	; 0x2c
}
 8011ac8:	b009      	add	sp, #36	; 0x24
 8011aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ace:	462f      	mov	r7, r5
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	e6ac      	b.n	801182e <tcp_input+0x116>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011ad4:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 8011ad8:	2b0a      	cmp	r3, #10
 8011ada:	d006      	beq.n	8011aea <tcp_input+0x3d2>
 8011adc:	4643      	mov	r3, r8
 8011ade:	f240 121f 	movw	r2, #287	; 0x11f
 8011ae2:	4639      	mov	r1, r7
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f00b f81f 	bl	801cb28 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011aea:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8011aee:	b13a      	cbz	r2, 8011b00 <tcp_input+0x3e8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011af0:	6863      	ldr	r3, [r4, #4]
 8011af2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8011af6:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	429a      	cmp	r2, r3
 8011afc:	f040 8091 	bne.w	8011c22 <tcp_input+0x50a>
      if (pcb->remote_port == tcphdr->src &&
 8011b00:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011b04:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
 8011b08:	881d      	ldrh	r5, [r3, #0]
 8011b0a:	42aa      	cmp	r2, r5
 8011b0c:	f040 8089 	bne.w	8011c22 <tcp_input+0x50a>
          pcb->local_port == tcphdr->dest &&
 8011b10:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8011b12:	f8ba 303e 	ldrh.w	r3, [sl, #62]	; 0x3e
 8011b16:	4283      	cmp	r3, r0
 8011b18:	f040 8083 	bne.w	8011c22 <tcp_input+0x50a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b1c:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
          pcb->local_port == tcphdr->dest &&
 8011b20:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011b24:	4299      	cmp	r1, r3
 8011b26:	d17c      	bne.n	8011c22 <tcp_input+0x50a>
 8011b28:	2906      	cmp	r1, #6
 8011b2a:	f8da 2018 	ldr.w	r2, [sl, #24]
 8011b2e:	6963      	ldr	r3, [r4, #20]
 8011b30:	d114      	bne.n	8011b5c <tcp_input+0x444>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d119      	bne.n	8011b6a <tcp_input+0x452>
 8011b36:	f8da 201c 	ldr.w	r2, [sl, #28]
 8011b3a:	69a3      	ldr	r3, [r4, #24]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d114      	bne.n	8011b6a <tcp_input+0x452>
 8011b40:	f8da 2020 	ldr.w	r2, [sl, #32]
 8011b44:	69e3      	ldr	r3, [r4, #28]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d10f      	bne.n	8011b6a <tcp_input+0x452>
 8011b4a:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8011b4e:	6a23      	ldr	r3, [r4, #32]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d10a      	bne.n	8011b6a <tcp_input+0x452>
 8011b54:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 8011b58:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
          pcb->local_port == tcphdr->dest &&
 8011b5c:	eba3 0c02 	sub.w	ip, r3, r2
 8011b60:	f1dc 0300 	rsbs	r3, ip, #0
 8011b64:	eb43 030c 	adc.w	r3, r3, ip
 8011b68:	e000      	b.n	8011b6c <tcp_input+0x454>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b6a:	2300      	movs	r3, #0
          pcb->local_port == tcphdr->dest &&
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d058      	beq.n	8011c22 <tcp_input+0x50a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b70:	f89a 3014 	ldrb.w	r3, [sl, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b74:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8011b78:	4299      	cmp	r1, r3
 8011b7a:	d152      	bne.n	8011c22 <tcp_input+0x50a>
 8011b7c:	2906      	cmp	r1, #6
 8011b7e:	f8da 2000 	ldr.w	r2, [sl]
 8011b82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b84:	d114      	bne.n	8011bb0 <tcp_input+0x498>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b86:	4293      	cmp	r3, r2
 8011b88:	d116      	bne.n	8011bb8 <tcp_input+0x4a0>
 8011b8a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d111      	bne.n	8011bb8 <tcp_input+0x4a0>
 8011b94:	f8da 2008 	ldr.w	r2, [sl, #8]
 8011b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d10c      	bne.n	8011bb8 <tcp_input+0x4a0>
 8011b9e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8011ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d107      	bne.n	8011bb8 <tcp_input+0x4a0>
 8011ba8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011bac:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011bb0:	1a99      	subs	r1, r3, r2
 8011bb2:	424b      	negs	r3, r1
 8011bb4:	414b      	adcs	r3, r1
 8011bb6:	e000      	b.n	8011bba <tcp_input+0x4a2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011bb8:	2300      	movs	r3, #0
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011bba:	b393      	cbz	r3, 8011c22 <tcp_input+0x50a>
  if (flags & TCP_RST) {
 8011bbc:	f899 301c 	ldrb.w	r3, [r9, #28]
 8011bc0:	075a      	lsls	r2, r3, #29
 8011bc2:	f53f add0 	bmi.w	8011766 <tcp_input+0x4e>
  if (flags & TCP_SYN) {
 8011bc6:	079f      	lsls	r7, r3, #30
 8011bc8:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
 8011bcc:	d516      	bpl.n	8011bfc <tcp_input+0x4e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011bce:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8011bd2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	d416      	bmi.n	8011c08 <tcp_input+0x4f0>
 8011bda:	f8ba 4050 	ldrh.w	r4, [sl, #80]	; 0x50
 8011bde:	1b1b      	subs	r3, r3, r4
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dc11      	bgt.n	8011c08 <tcp_input+0x4f0>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011be4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8011be8:	4b2a      	ldr	r3, [pc, #168]	; (8011c94 <tcp_input+0x57c>)
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	440a      	add	r2, r1
 8011bee:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8011bf2:	3318      	adds	r3, #24
 8011bf4:	4650      	mov	r0, sl
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bf6:	f001 fafb 	bl	80131f0 <tcp_rst>
 8011bfa:	e5b4      	b.n	8011766 <tcp_input+0x4e>
  } else if (flags & TCP_FIN) {
 8011bfc:	07de      	lsls	r6, r3, #31
    pcb->tmr = tcp_ticks;
 8011bfe:	bf42      	ittt	mi
 8011c00:	4b25      	ldrmi	r3, [pc, #148]	; (8011c98 <tcp_input+0x580>)
 8011c02:	681b      	ldrmi	r3, [r3, #0]
 8011c04:	f8ca 3048 	strmi.w	r3, [sl, #72]	; 0x48
  if ((tcplen > 0)) {
 8011c08:	2900      	cmp	r1, #0
 8011c0a:	f43f adac 	beq.w	8011766 <tcp_input+0x4e>
    tcp_ack_now(pcb);
 8011c0e:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
 8011c12:	f043 0302 	orr.w	r3, r3, #2
 8011c16:	f8aa 3042 	strh.w	r3, [sl, #66]	; 0x42
    tcp_output(pcb);
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	f001 fb66 	bl	80132ec <tcp_output>
        pbuf_free(p);
 8011c20:	e5a1      	b.n	8011766 <tcp_input+0x4e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c22:	f8da a034 	ldr.w	sl, [sl, #52]	; 0x34
 8011c26:	f1ba 0f00 	cmp.w	sl, #0
 8011c2a:	f47f af53 	bne.w	8011ad4 <tcp_input+0x3bc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c2e:	4b1b      	ldr	r3, [pc, #108]	; (8011c9c <tcp_input+0x584>)
      if (lpcb->local_port == tcphdr->dest) {
 8011c30:	f8d9 100c 	ldr.w	r1, [r9, #12]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c34:	6818      	ldr	r0, [r3, #0]
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c36:	6863      	ldr	r3, [r4, #4]
 8011c38:	9306      	str	r3, [sp, #24]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011c3c:	9305      	str	r3, [sp, #20]
 8011c3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 8011c40:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011c44:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8011c48:	9307      	str	r3, [sp, #28]
 8011c4a:	e9d4 8e0d 	ldrd	r8, lr, [r4, #52]	; 0x34
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c4e:	4604      	mov	r4, r0
 8011c50:	bb34      	cbnz	r4, 8011ca0 <tcp_input+0x588>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011c52:	8988      	ldrh	r0, [r1, #12]
 8011c54:	f7fc fa24 	bl	800e0a0 <lwip_htons>
 8011c58:	0742      	lsls	r2, r0, #29
 8011c5a:	f53f ad84 	bmi.w	8011766 <tcp_input+0x4e>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c5e:	f8d9 300c 	ldr.w	r3, [r9, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c62:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
 8011c66:	8818      	ldrh	r0, [r3, #0]
 8011c68:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8011c6c:	9002      	str	r0, [sp, #8]
 8011c6e:	885b      	ldrh	r3, [r3, #2]
 8011c70:	9301      	str	r3, [sp, #4]
 8011c72:	4b08      	ldr	r3, [pc, #32]	; (8011c94 <tcp_input+0x57c>)
 8011c74:	9300      	str	r3, [sp, #0]
 8011c76:	440a      	add	r2, r1
 8011c78:	3318      	adds	r3, #24
 8011c7a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8011c7e:	e055      	b.n	8011d2c <tcp_input+0x614>
 8011c80:	0802de79 	.word	0x0802de79
 8011c84:	0802e0ed 	.word	0x0802e0ed
 8011c88:	0802aecf 	.word	0x0802aecf
 8011c8c:	0802e118 	.word	0x0802e118
 8011c90:	20016128 	.word	0x20016128
 8011c94:	2000f4cc 	.word	0x2000f4cc
 8011c98:	20016118 	.word	0x20016118
 8011c9c:	2001611c 	.word	0x2001611c
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011ca0:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 8011ca4:	b135      	cbz	r5, 8011cb4 <tcp_input+0x59c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ca6:	9b06      	ldr	r3, [sp, #24]
 8011ca8:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8011cac:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	429d      	cmp	r5, r3
 8011cb2:	d144      	bne.n	8011d3e <tcp_input+0x626>
      if (lpcb->local_port == tcphdr->dest) {
 8011cb4:	884e      	ldrh	r6, [r1, #2]
 8011cb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8011cb8:	42b3      	cmp	r3, r6
 8011cba:	d140      	bne.n	8011d3e <tcp_input+0x626>
        if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
 8011cbc:	7d23      	ldrb	r3, [r4, #20]
 8011cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8011cc0:	d019      	beq.n	8011cf6 <tcp_input+0x5de>
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 8011cc2:	42bb      	cmp	r3, r7
 8011cc4:	d13b      	bne.n	8011d3e <tcp_input+0x626>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011cc6:	2f06      	cmp	r7, #6
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	9a05      	ldr	r2, [sp, #20]
 8011ccc:	d130      	bne.n	8011d30 <tcp_input+0x618>
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	f040 83bb 	bne.w	801244a <tcp_input+0xd32>
 8011cd4:	6862      	ldr	r2, [r4, #4]
 8011cd6:	9d07      	ldr	r5, [sp, #28]
 8011cd8:	42aa      	cmp	r2, r5
 8011cda:	f040 83b6 	bne.w	801244a <tcp_input+0xd32>
 8011cde:	68a5      	ldr	r5, [r4, #8]
 8011ce0:	4545      	cmp	r5, r8
 8011ce2:	f040 83b2 	bne.w	801244a <tcp_input+0xd32>
 8011ce6:	68e5      	ldr	r5, [r4, #12]
 8011ce8:	4575      	cmp	r5, lr
 8011cea:	f040 83ae 	bne.w	801244a <tcp_input+0xd32>
 8011cee:	7c25      	ldrb	r5, [r4, #16]
 8011cf0:	4565      	cmp	r5, ip
 8011cf2:	f040 83aa 	bne.w	801244a <tcp_input+0xd32>
      if (prev != NULL) {
 8011cf6:	f1ba 0f00 	cmp.w	sl, #0
 8011cfa:	d005      	beq.n	8011d08 <tcp_input+0x5f0>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cfe:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011d02:	4b9d      	ldr	r3, [pc, #628]	; (8011f78 <tcp_input+0x860>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011d04:	6360      	str	r0, [r4, #52]	; 0x34
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011d06:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8011d08:	489c      	ldr	r0, [pc, #624]	; (8011f7c <tcp_input+0x864>)
 8011d0a:	7f03      	ldrb	r3, [r0, #28]
 8011d0c:	075d      	lsls	r5, r3, #29
 8011d0e:	f53f ad2a 	bmi.w	8011766 <tcp_input+0x4e>
  if (flags & TCP_ACK) {
 8011d12:	f013 0710 	ands.w	r7, r3, #16
 8011d16:	d01d      	beq.n	8011d54 <tcp_input+0x63c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d18:	880b      	ldrh	r3, [r1, #0]
 8011d1a:	8c85      	ldrh	r5, [r0, #36]	; 0x24
 8011d1c:	6a02      	ldr	r2, [r0, #32]
 8011d1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8011d22:	4b97      	ldr	r3, [pc, #604]	; (8011f80 <tcp_input+0x868>)
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	6981      	ldr	r1, [r0, #24]
 8011d28:	3318      	adds	r3, #24
 8011d2a:	442a      	add	r2, r5
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	e762      	b.n	8011bf6 <tcp_input+0x4de>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d0e0      	beq.n	8011cf6 <tcp_input+0x5de>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011d34:	fab3 f383 	clz	r3, r3
 8011d38:	095b      	lsrs	r3, r3, #5
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d1db      	bne.n	8011cf6 <tcp_input+0x5de>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d3e:	46a2      	mov	sl, r4
 8011d40:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8011d42:	e785      	b.n	8011c50 <tcp_input+0x538>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011d44:	6865      	ldr	r5, [r4, #4]
 8011d46:	2d00      	cmp	r5, #0
 8011d48:	d1f7      	bne.n	8011d3a <tcp_input+0x622>
 8011d4a:	68a5      	ldr	r5, [r4, #8]
 8011d4c:	2d00      	cmp	r5, #0
 8011d4e:	d1f4      	bne.n	8011d3a <tcp_input+0x622>
 8011d50:	68e3      	ldr	r3, [r4, #12]
 8011d52:	e7ef      	b.n	8011d34 <tcp_input+0x61c>
  } else if (flags & TCP_SYN) {
 8011d54:	0799      	lsls	r1, r3, #30
 8011d56:	f57f ad06 	bpl.w	8011766 <tcp_input+0x4e>
    npcb = tcp_alloc(pcb->prio);
 8011d5a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8011d5e:	f7fe ff17 	bl	8010b90 <tcp_alloc>
    if (npcb == NULL) {
 8011d62:	4605      	mov	r5, r0
 8011d64:	b948      	cbnz	r0, 8011d7a <tcp_input+0x662>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f43f acfc 	beq.w	8011766 <tcp_input+0x4e>
 8011d6e:	4601      	mov	r1, r0
 8011d70:	f04f 32ff 	mov.w	r2, #4294967295
 8011d74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8011d76:	4798      	blx	r3
 8011d78:	e4f5      	b.n	8011766 <tcp_input+0x4e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011d7a:	4b82      	ldr	r3, [pc, #520]	; (8011f84 <tcp_input+0x86c>)
 8011d7c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8011d80:	7501      	strb	r1, [r0, #20]
 8011d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d84:	6002      	str	r2, [r0, #0]
 8011d86:	2906      	cmp	r1, #6
 8011d88:	d177      	bne.n	8011e7a <tcp_input+0x762>
 8011d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d8c:	6042      	str	r2, [r0, #4]
 8011d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d90:	6082      	str	r2, [r0, #8]
 8011d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d94:	60c2      	str	r2, [r0, #12]
 8011d96:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8011d9a:	7402      	strb	r2, [r0, #16]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011d9c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8011da0:	695a      	ldr	r2, [r3, #20]
 8011da2:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
 8011da6:	2906      	cmp	r1, #6
 8011da8:	61aa      	str	r2, [r5, #24]
 8011daa:	d16b      	bne.n	8011e84 <tcp_input+0x76c>
 8011dac:	699a      	ldr	r2, [r3, #24]
 8011dae:	61ea      	str	r2, [r5, #28]
 8011db0:	69da      	ldr	r2, [r3, #28]
 8011db2:	622a      	str	r2, [r5, #32]
 8011db4:	6a1a      	ldr	r2, [r3, #32]
 8011db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011dba:	626a      	str	r2, [r5, #36]	; 0x24
    npcb->remote_port = tcphdr->src;
 8011dbc:	f8d9 200c 	ldr.w	r2, [r9, #12]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011dc0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    npcb->local_port = pcb->local_port;
 8011dc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8011dc6:	87eb      	strh	r3, [r5, #62]	; 0x3e
    npcb->remote_port = tcphdr->src;
 8011dc8:	7813      	ldrb	r3, [r2, #0]
 8011dca:	7852      	ldrb	r2, [r2, #1]
 8011dcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011dd0:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    npcb->state = SYN_RCVD;
 8011dd4:	2303      	movs	r3, #3
 8011dd6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    npcb->rcv_nxt = seqno + 1;
 8011dda:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011dde:	3301      	adds	r3, #1
 8011de0:	64eb      	str	r3, [r5, #76]	; 0x4c
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011de2:	656b      	str	r3, [r5, #84]	; 0x54
    iss = tcp_next_iss(npcb);
 8011de4:	4628      	mov	r0, r5
 8011de6:	f7fe ff7d 	bl	8010ce4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011dea:	f8d9 3020 	ldr.w	r3, [r9, #32]
    npcb->snd_wl2 = iss;
 8011dee:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011df2:	3b01      	subs	r3, #1
 8011df4:	67eb      	str	r3, [r5, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 8011df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    npcb->snd_nxt = iss;
 8011df8:	67a8      	str	r0, [r5, #120]	; 0x78
    npcb->lastack = iss;
 8011dfa:	66e8      	str	r0, [r5, #108]	; 0x6c
    npcb->snd_lbb = iss;
 8011dfc:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
    npcb->listener = pcb;
 8011e00:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
    npcb->callback_arg = pcb->callback_arg;
 8011e04:	63ab      	str	r3, [r5, #56]	; 0x38
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011e06:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8011e0a:	f003 030c 	and.w	r3, r3, #12
 8011e0e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    npcb->netif_idx = pcb->netif_idx;
 8011e12:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8011e16:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    TCP_REG_ACTIVE(npcb);
 8011e1a:	4b5b      	ldr	r3, [pc, #364]	; (8011f88 <tcp_input+0x870>)
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	636a      	str	r2, [r5, #52]	; 0x34
 8011e20:	601d      	str	r5, [r3, #0]
 8011e22:	f001 fd8d 	bl	8013940 <tcp_timer_needed>
 8011e26:	4b59      	ldr	r3, [pc, #356]	; (8011f8c <tcp_input+0x874>)
 8011e28:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8011e2a:	4628      	mov	r0, r5
    TCP_REG_ACTIVE(npcb);
 8011e2c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011e2e:	f7ff f92d 	bl	801108c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011e32:	f8d9 300c 	ldr.w	r3, [r9, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e36:	f8b5 605a 	ldrh.w	r6, [r5, #90]	; 0x5a
    npcb->snd_wnd = tcphdr->wnd;
 8011e3a:	89db      	ldrh	r3, [r3, #14]
 8011e3c:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011e40:	f8a5 308a 	strh.w	r3, [r5, #138]	; 0x8a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e44:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011e48:	2b06      	cmp	r3, #6
 8011e4a:	f105 0418 	add.w	r4, r5, #24
 8011e4e:	d11e      	bne.n	8011e8e <tcp_input+0x776>
 8011e50:	4621      	mov	r1, r4
 8011e52:	4628      	mov	r0, r5
 8011e54:	f7f9 fab2 	bl	800b3bc <ip6_route>
 8011e58:	4601      	mov	r1, r0
 8011e5a:	4622      	mov	r2, r4
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7fe ff5b 	bl	8010d18 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011e62:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e64:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f001 f827 	bl	8012ebc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8011e6e:	b190      	cbz	r0, 8011e96 <tcp_input+0x77e>
      tcp_abandon(npcb, 0);
 8011e70:	2100      	movs	r1, #0
 8011e72:	4628      	mov	r0, r5
 8011e74:	f7fe fd96 	bl	80109a4 <tcp_abandon>
      return;
 8011e78:	e475      	b.n	8011766 <tcp_input+0x4e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011e7a:	e9c0 7702 	strd	r7, r7, [r0, #8]
 8011e7e:	6047      	str	r7, [r0, #4]
 8011e80:	7407      	strb	r7, [r0, #16]
 8011e82:	e78b      	b.n	8011d9c <tcp_input+0x684>
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011e84:	2300      	movs	r3, #0
 8011e86:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8011e8a:	61eb      	str	r3, [r5, #28]
 8011e8c:	e796      	b.n	8011dbc <tcp_input+0x6a4>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f7f8 faba 	bl	800a408 <ip4_route>
 8011e94:	e7e0      	b.n	8011e58 <tcp_input+0x740>
    tcp_output(npcb);
 8011e96:	4628      	mov	r0, r5
 8011e98:	e6c0      	b.n	8011c1c <tcp_input+0x504>
  if (flags & TCP_RST) {
 8011e9a:	f899 201c 	ldrb.w	r2, [r9, #28]
 8011e9e:	4c37      	ldr	r4, [pc, #220]	; (8011f7c <tcp_input+0x864>)
    tcp_input_pcb = pcb;
 8011ea0:	603d      	str	r5, [r7, #0]
  if (flags & TCP_RST) {
 8011ea2:	f012 0f04 	tst.w	r2, #4
 8011ea6:	d041      	beq.n	8011f2c <tcp_input+0x814>
    if (pcb->state == SYN_SENT) {
 8011ea8:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
 8011eac:	2902      	cmp	r1, #2
 8011eae:	d124      	bne.n	8011efa <tcp_input+0x7e2>
      if (ackno == pcb->snd_nxt) {
 8011eb0:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8011eb2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d10b      	bne.n	8011ed2 <tcp_input+0x7ba>
      recv_flags |= TF_RESET;
 8011eba:	f899 3012 	ldrb.w	r3, [r9, #18]
 8011ebe:	f043 0308 	orr.w	r3, r3, #8
 8011ec2:	f889 3012 	strb.w	r3, [r9, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011ec6:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8011eca:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 8011ece:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
      if (recv_flags & TF_RESET) {
 8011ed2:	f899 3012 	ldrb.w	r3, [r9, #18]
 8011ed6:	0718      	lsls	r0, r3, #28
 8011ed8:	f140 8242 	bpl.w	8012360 <tcp_input+0xc48>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011edc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8011ee0:	b11b      	cbz	r3, 8011eea <tcp_input+0x7d2>
 8011ee2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8011ee4:	f06f 010d 	mvn.w	r1, #13
 8011ee8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011eea:	4827      	ldr	r0, [pc, #156]	; (8011f88 <tcp_input+0x870>)
 8011eec:	4629      	mov	r1, r5
 8011eee:	f7fe fb11 	bl	8010514 <tcp_pcb_remove>
        tcp_free(pcb);
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f7fd fe12 	bl	800fb1c <tcp_free>
 8011ef8:	e5db      	b.n	8011ab2 <tcp_input+0x39a>
      if (seqno == pcb->rcv_nxt) {
 8011efa:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8011efc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d009      	beq.n	8011f18 <tcp_input+0x800>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f04:	1a9b      	subs	r3, r3, r2
 8011f06:	d4e4      	bmi.n	8011ed2 <tcp_input+0x7ba>
 8011f08:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8011f0c:	1a9b      	subs	r3, r3, r2
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dcdf      	bgt.n	8011ed2 <tcp_input+0x7ba>
        tcp_ack_now(pcb);
 8011f12:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8011f16:	e012      	b.n	8011f3e <tcp_input+0x826>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	d1ce      	bne.n	8011eba <tcp_input+0x7a2>
 8011f1c:	4b1c      	ldr	r3, [pc, #112]	; (8011f90 <tcp_input+0x878>)
 8011f1e:	491d      	ldr	r1, [pc, #116]	; (8011f94 <tcp_input+0x87c>)
 8011f20:	481d      	ldr	r0, [pc, #116]	; (8011f98 <tcp_input+0x880>)
 8011f22:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011f26:	f00a fdff 	bl	801cb28 <iprintf>
 8011f2a:	e7c6      	b.n	8011eba <tcp_input+0x7a2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f2c:	0792      	lsls	r2, r2, #30
 8011f2e:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8011f32:	d507      	bpl.n	8011f44 <tcp_input+0x82c>
 8011f34:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 8011f38:	3a02      	subs	r2, #2
 8011f3a:	2a01      	cmp	r2, #1
 8011f3c:	d902      	bls.n	8011f44 <tcp_input+0x82c>
        tcp_ack_now(pcb);
 8011f3e:	f043 0302 	orr.w	r3, r3, #2
 8011f42:	e7c4      	b.n	8011ece <tcp_input+0x7b6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011f44:	06d8      	lsls	r0, r3, #27
    pcb->tmr = tcp_ticks;
 8011f46:	bf5e      	ittt	pl
 8011f48:	4b14      	ldrpl	r3, [pc, #80]	; (8011f9c <tcp_input+0x884>)
 8011f4a:	681b      	ldrpl	r3, [r3, #0]
 8011f4c:	64ab      	strpl	r3, [r5, #72]	; 0x48
  pcb->persist_probe = 0;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
  tcp_parseopt(pcb);
 8011f54:	4628      	mov	r0, r5
 8011f56:	f7ff f899 	bl	801108c <tcp_parseopt>
  switch (pcb->state) {
 8011f5a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011f5e:	3b02      	subs	r3, #2
 8011f60:	2b07      	cmp	r3, #7
 8011f62:	d8b6      	bhi.n	8011ed2 <tcp_input+0x7ba>
 8011f64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011f68:	00c7001c 	.word	0x00c7001c
 8011f6c:	01460140 	.word	0x01460140
 8011f70:	01400196 	.word	0x01400196
 8011f74:	01e201b1 	.word	0x01e201b1
 8011f78:	2001611c 	.word	0x2001611c
 8011f7c:	20007058 	.word	0x20007058
 8011f80:	2000f4cc 	.word	0x2000f4cc
 8011f84:	2000f4b8 	.word	0x2000f4b8
 8011f88:	20016114 	.word	0x20016114
 8011f8c:	20016110 	.word	0x20016110
 8011f90:	0802de79 	.word	0x0802de79
 8011f94:	0802e16f 	.word	0x0802e16f
 8011f98:	0802aecf 	.word	0x0802aecf
 8011f9c:	20016118 	.word	0x20016118
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011fa0:	f899 301c 	ldrb.w	r3, [r9, #28]
 8011fa4:	f003 0212 	and.w	r2, r3, #18
 8011fa8:	2a12      	cmp	r2, #18
 8011faa:	f040 8082 	bne.w	80120b2 <tcp_input+0x99a>
          && (ackno == pcb->lastack + 1)) {
 8011fae:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8011fb0:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8011fb4:	3201      	adds	r2, #1
 8011fb6:	428a      	cmp	r2, r1
 8011fb8:	d17b      	bne.n	80120b2 <tcp_input+0x99a>
        pcb->rcv_nxt = seqno + 1;
 8011fba:	f8d9 3020 	ldr.w	r3, [r9, #32]
        pcb->lastack = ackno;
 8011fbe:	66ea      	str	r2, [r5, #108]	; 0x6c
        pcb->rcv_nxt = seqno + 1;
 8011fc0:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 8011fc2:	f8d9 200c 	ldr.w	r2, [r9, #12]
        pcb->rcv_nxt = seqno + 1;
 8011fc6:	64e9      	str	r1, [r5, #76]	; 0x4c
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011fc8:	3b01      	subs	r3, #1
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011fca:	6569      	str	r1, [r5, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 8011fcc:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011fce:	67eb      	str	r3, [r5, #124]	; 0x7c
        pcb->state = ESTABLISHED;
 8011fd0:	2304      	movs	r3, #4
 8011fd2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011fd6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011fda:	f8b5 605a 	ldrh.w	r6, [r5, #90]	; 0x5a
        pcb->snd_wnd = tcphdr->wnd;
 8011fde:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011fe2:	2b06      	cmp	r3, #6
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011fe4:	f8a5 208a 	strh.w	r2, [r5, #138]	; 0x8a
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011fe8:	f105 0818 	add.w	r8, r5, #24
 8011fec:	d14f      	bne.n	801208e <tcp_input+0x976>
 8011fee:	4641      	mov	r1, r8
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	f7f9 f9e3 	bl	800b3bc <ip6_route>
 8011ff6:	4601      	mov	r1, r0
 8011ff8:	4642      	mov	r2, r8
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f7fe fe8c 	bl	8010d18 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012000:	f241 131c 	movw	r3, #4380	; 0x111c
 8012004:	0042      	lsls	r2, r0, #1
 8012006:	429a      	cmp	r2, r3
 8012008:	4616      	mov	r6, r2
 801200a:	bf38      	it	cc
 801200c:	461e      	movcc	r6, r3
 801200e:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012012:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012016:	ea4f 0180 	mov.w	r1, r0, lsl #2
 801201a:	d93c      	bls.n	8012096 <tcp_input+0x97e>
 801201c:	b28b      	uxth	r3, r1
 801201e:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012022:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
 8012026:	b933      	cbnz	r3, 8012036 <tcp_input+0x91e>
 8012028:	4bb8      	ldr	r3, [pc, #736]	; (801230c <tcp_input+0xbf4>)
 801202a:	49b9      	ldr	r1, [pc, #740]	; (8012310 <tcp_input+0xbf8>)
 801202c:	48b9      	ldr	r0, [pc, #740]	; (8012314 <tcp_input+0xbfc>)
 801202e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012032:	f00a fd79 	bl	801cb28 <iprintf>
        --pcb->snd_queuelen;
 8012036:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
        rseg = pcb->unacked;
 801203a:	f8d5 6098 	ldr.w	r6, [r5, #152]	; 0x98
        --pcb->snd_queuelen;
 801203e:	3b01      	subs	r3, #1
 8012040:	f8a5 308e 	strh.w	r3, [r5, #142]	; 0x8e
        if (rseg == NULL) {
 8012044:	bb5e      	cbnz	r6, 801209e <tcp_input+0x986>
          rseg = pcb->unsent;
 8012046:	f8d5 6094 	ldr.w	r6, [r5, #148]	; 0x94
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801204a:	b936      	cbnz	r6, 801205a <tcp_input+0x942>
 801204c:	4baf      	ldr	r3, [pc, #700]	; (801230c <tcp_input+0xbf4>)
 801204e:	49b2      	ldr	r1, [pc, #712]	; (8012318 <tcp_input+0xc00>)
 8012050:	48b0      	ldr	r0, [pc, #704]	; (8012314 <tcp_input+0xbfc>)
 8012052:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012056:	f00a fd67 	bl	801cb28 <iprintf>
          pcb->unsent = rseg->next;
 801205a:	6833      	ldr	r3, [r6, #0]
 801205c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tcp_seg_free(rseg);
 8012060:	4630      	mov	r0, r6
 8012062:	f7fd ff6f 	bl	800ff44 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8012066:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 801206a:	b9e3      	cbnz	r3, 80120a6 <tcp_input+0x98e>
          pcb->rtime = -1;
 801206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012070:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012074:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8012078:	2b00      	cmp	r3, #0
 801207a:	f43f af4a 	beq.w	8011f12 <tcp_input+0x7fa>
 801207e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012080:	2200      	movs	r2, #0
 8012082:	4629      	mov	r1, r5
 8012084:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8012086:	300d      	adds	r0, #13
 8012088:	f47f af43 	bne.w	8011f12 <tcp_input+0x7fa>
 801208c:	e511      	b.n	8011ab2 <tcp_input+0x39a>
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801208e:	4640      	mov	r0, r8
 8012090:	f7f8 f9ba 	bl	800a408 <ip4_route>
 8012094:	e7af      	b.n	8011ff6 <tcp_input+0x8de>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012096:	429a      	cmp	r2, r3
 8012098:	bf88      	it	hi
 801209a:	b293      	uxthhi	r3, r2
 801209c:	e7bf      	b.n	801201e <tcp_input+0x906>
          pcb->unacked = rseg->next;
 801209e:	6833      	ldr	r3, [r6, #0]
 80120a0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80120a4:	e7dc      	b.n	8012060 <tcp_input+0x948>
          pcb->rtime = 0;
 80120a6:	2300      	movs	r3, #0
 80120a8:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
          pcb->nrtx = 0;
 80120ac:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 80120b0:	e7e0      	b.n	8012074 <tcp_input+0x95c>
      else if (flags & TCP_ACK) {
 80120b2:	06d9      	lsls	r1, r3, #27
 80120b4:	f57f af0d 	bpl.w	8011ed2 <tcp_input+0x7ba>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120b8:	f8d9 300c 	ldr.w	r3, [r9, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120bc:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
 80120c0:	8818      	ldrh	r0, [r3, #0]
 80120c2:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80120c6:	9002      	str	r0, [sp, #8]
 80120c8:	885b      	ldrh	r3, [r3, #2]
 80120ca:	9301      	str	r3, [sp, #4]
 80120cc:	4b93      	ldr	r3, [pc, #588]	; (801231c <tcp_input+0xc04>)
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	440a      	add	r2, r1
 80120d2:	3318      	adds	r3, #24
 80120d4:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80120d8:	4628      	mov	r0, r5
 80120da:	f001 f889 	bl	80131f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80120de:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
 80120e2:	2b05      	cmp	r3, #5
 80120e4:	f63f aef5 	bhi.w	8011ed2 <tcp_input+0x7ba>
          pcb->rtime = 0;
 80120e8:	2300      	movs	r3, #0
 80120ea:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
          tcp_rexmit_rto(pcb);
 80120ee:	4628      	mov	r0, r5
 80120f0:	f001 fb12 	bl	8013718 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 80120f4:	e6ed      	b.n	8011ed2 <tcp_input+0x7ba>
      if (flags & TCP_ACK) {
 80120f6:	f899 301c 	ldrb.w	r3, [r9, #28]
 80120fa:	06da      	lsls	r2, r3, #27
 80120fc:	d566      	bpl.n	80121cc <tcp_input+0xab4>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120fe:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8012100:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8012104:	43db      	mvns	r3, r3
 8012106:	42cb      	cmn	r3, r1
 8012108:	d44e      	bmi.n	80121a8 <tcp_input+0xa90>
 801210a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801210c:	1acb      	subs	r3, r1, r3
 801210e:	2b00      	cmp	r3, #0
 8012110:	dc4a      	bgt.n	80121a8 <tcp_input+0xa90>
          pcb->state = ESTABLISHED;
 8012112:	2304      	movs	r3, #4
 8012114:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          if (pcb->listener == NULL) {
 8012118:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 801211c:	b91b      	cbnz	r3, 8012126 <tcp_input+0xa0e>
            tcp_abort(pcb);
 801211e:	4628      	mov	r0, r5
 8012120:	f7fe fcc4 	bl	8010aac <tcp_abort>
            goto aborted;
 8012124:	e4c5      	b.n	8011ab2 <tcp_input+0x39a>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012128:	b933      	cbnz	r3, 8012138 <tcp_input+0xa20>
 801212a:	4b78      	ldr	r3, [pc, #480]	; (801230c <tcp_input+0xbf4>)
 801212c:	497c      	ldr	r1, [pc, #496]	; (8012320 <tcp_input+0xc08>)
 801212e:	4879      	ldr	r0, [pc, #484]	; (8012314 <tcp_input+0xbfc>)
 8012130:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012134:	f00a fcf8 	bl	801cb28 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012138:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 801213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801213e:	2b00      	cmp	r3, #0
 8012140:	d0ed      	beq.n	801211e <tcp_input+0xa06>
 8012142:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012144:	2200      	movs	r2, #0
 8012146:	4629      	mov	r1, r5
 8012148:	4798      	blx	r3
          if (err != ERR_OK) {
 801214a:	b118      	cbz	r0, 8012154 <tcp_input+0xa3c>
            if (err != ERR_ABRT) {
 801214c:	300d      	adds	r0, #13
 801214e:	f43f acb0 	beq.w	8011ab2 <tcp_input+0x39a>
 8012152:	e7e4      	b.n	801211e <tcp_input+0xa06>
          tcp_receive(pcb);
 8012154:	4628      	mov	r0, r5
 8012156:	f7ff f86d 	bl	8011234 <tcp_receive>
          if (recv_acked != 0) {
 801215a:	8aa3      	ldrh	r3, [r4, #20]
 801215c:	b10b      	cbz	r3, 8012162 <tcp_input+0xa4a>
            recv_acked--;
 801215e:	3b01      	subs	r3, #1
 8012160:	82a3      	strh	r3, [r4, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012162:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
 8012166:	f241 131c 	movw	r3, #4380	; 0x111c
 801216a:	004a      	lsls	r2, r1, #1
 801216c:	429a      	cmp	r2, r3
 801216e:	4616      	mov	r6, r2
 8012170:	bf38      	it	cc
 8012172:	461e      	movcc	r6, r3
 8012174:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 8012178:	ea4f 0081 	mov.w	r0, r1, lsl #2
 801217c:	d910      	bls.n	80121a0 <tcp_input+0xa88>
 801217e:	b283      	uxth	r3, r0
 8012180:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
          if (recv_flags & TF_GOT_FIN) {
 8012184:	7ca3      	ldrb	r3, [r4, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012186:	0698      	lsls	r0, r3, #26
 8012188:	f57f aea3 	bpl.w	8011ed2 <tcp_input+0x7ba>
        tcp_ack_now(pcb);
 801218c:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8012190:	f043 0302 	orr.w	r3, r3, #2
 8012194:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
        pcb->state = CLOSE_WAIT;
 8012198:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 801219a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (err != ERR_ABRT) {
 801219e:	e698      	b.n	8011ed2 <tcp_input+0x7ba>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80121a0:	429a      	cmp	r2, r3
 80121a2:	bf88      	it	hi
 80121a4:	b293      	uxthhi	r3, r2
 80121a6:	e7eb      	b.n	8012180 <tcp_input+0xa68>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121ac:	f8b9 0024 	ldrh.w	r0, [r9, #36]	; 0x24
 80121b0:	881e      	ldrh	r6, [r3, #0]
 80121b2:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80121b6:	9602      	str	r6, [sp, #8]
 80121b8:	885b      	ldrh	r3, [r3, #2]
 80121ba:	9301      	str	r3, [sp, #4]
 80121bc:	4b57      	ldr	r3, [pc, #348]	; (801231c <tcp_input+0xc04>)
 80121be:	9300      	str	r3, [sp, #0]
 80121c0:	4402      	add	r2, r0
 80121c2:	3318      	adds	r3, #24
 80121c4:	4628      	mov	r0, r5
 80121c6:	f001 f813 	bl	80131f0 <tcp_rst>
    if (err != ERR_ABRT) {
 80121ca:	e682      	b.n	8011ed2 <tcp_input+0x7ba>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80121cc:	079e      	lsls	r6, r3, #30
 80121ce:	f57f ae80 	bpl.w	8011ed2 <tcp_input+0x7ba>
 80121d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80121d4:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80121d8:	3b01      	subs	r3, #1
 80121da:	4293      	cmp	r3, r2
 80121dc:	f47f ae79 	bne.w	8011ed2 <tcp_input+0x7ba>
        tcp_rexmit(pcb);
 80121e0:	4628      	mov	r0, r5
 80121e2:	f000 ff87 	bl	80130f4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 80121e6:	e674      	b.n	8011ed2 <tcp_input+0x7ba>
      tcp_receive(pcb);
 80121e8:	4628      	mov	r0, r5
 80121ea:	f7ff f823 	bl	8011234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80121ee:	f899 3012 	ldrb.w	r3, [r9, #18]
 80121f2:	e7c8      	b.n	8012186 <tcp_input+0xa6e>
      tcp_receive(pcb);
 80121f4:	4628      	mov	r0, r5
 80121f6:	f7ff f81d 	bl	8011234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80121fa:	f899 3012 	ldrb.w	r3, [r9, #18]
 80121fe:	f013 0f20 	tst.w	r3, #32
 8012202:	f899 301c 	ldrb.w	r3, [r9, #28]
 8012206:	d035      	beq.n	8012274 <tcp_input+0xb5c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012208:	f013 0f10 	tst.w	r3, #16
 801220c:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8012210:	d02a      	beq.n	8012268 <tcp_input+0xb50>
 8012212:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8012214:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8012218:	4291      	cmp	r1, r2
 801221a:	d125      	bne.n	8012268 <tcp_input+0xb50>
 801221c:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8012220:	bb12      	cbnz	r2, 8012268 <tcp_input+0xb50>
          tcp_ack_now(pcb);
 8012222:	f043 0302 	orr.w	r3, r3, #2
 8012226:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
          tcp_pcb_purge(pcb);
 801222a:	4628      	mov	r0, r5
 801222c:	f7fd ff1a 	bl	8010064 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012230:	6833      	ldr	r3, [r6, #0]
 8012232:	429d      	cmp	r5, r3
 8012234:	d109      	bne.n	801224a <tcp_input+0xb32>
        TCP_RMV_ACTIVE(pcb);
 8012236:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012238:	6033      	str	r3, [r6, #0]
 801223a:	e008      	b.n	801224e <tcp_input+0xb36>
          TCP_RMV_ACTIVE(pcb);
 801223c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801223e:	4295      	cmp	r5, r2
 8012240:	d102      	bne.n	8012248 <tcp_input+0xb30>
        TCP_RMV_ACTIVE(pcb);
 8012242:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8012244:	635a      	str	r2, [r3, #52]	; 0x34
 8012246:	e002      	b.n	801224e <tcp_input+0xb36>
 8012248:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1f6      	bne.n	801223c <tcp_input+0xb24>
        TCP_RMV_ACTIVE(pcb);
 801224e:	4b35      	ldr	r3, [pc, #212]	; (8012324 <tcp_input+0xc0c>)
 8012250:	2201      	movs	r2, #1
 8012252:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012254:	230a      	movs	r3, #10
 8012256:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 801225a:	4b33      	ldr	r3, [pc, #204]	; (8012328 <tcp_input+0xc10>)
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	636a      	str	r2, [r5, #52]	; 0x34
 8012260:	601d      	str	r5, [r3, #0]
 8012262:	f001 fb6d 	bl	8013940 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 8012266:	e634      	b.n	8011ed2 <tcp_input+0x7ba>
          tcp_ack_now(pcb);
 8012268:	f043 0302 	orr.w	r3, r3, #2
 801226c:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
          pcb->state = CLOSING;
 8012270:	2308      	movs	r3, #8
 8012272:	e792      	b.n	801219a <tcp_input+0xa82>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012274:	06d9      	lsls	r1, r3, #27
 8012276:	f57f ae2c 	bpl.w	8011ed2 <tcp_input+0x7ba>
 801227a:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801227c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012280:	429a      	cmp	r2, r3
 8012282:	f47f ae26 	bne.w	8011ed2 <tcp_input+0x7ba>
 8012286:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801228a:	2b00      	cmp	r3, #0
 801228c:	f47f ae21 	bne.w	8011ed2 <tcp_input+0x7ba>
        pcb->state = FIN_WAIT_2;
 8012290:	2306      	movs	r3, #6
 8012292:	e782      	b.n	801219a <tcp_input+0xa82>
      tcp_receive(pcb);
 8012294:	4628      	mov	r0, r5
 8012296:	f7fe ffcd 	bl	8011234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801229a:	f899 3012 	ldrb.w	r3, [r9, #18]
 801229e:	069a      	lsls	r2, r3, #26
 80122a0:	f57f ae17 	bpl.w	8011ed2 <tcp_input+0x7ba>
        tcp_ack_now(pcb);
 80122a4:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 80122a8:	f043 0302 	orr.w	r3, r3, #2
 80122ac:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
        tcp_pcb_purge(pcb);
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7fd fed7 	bl	8010064 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80122b6:	6833      	ldr	r3, [r6, #0]
 80122b8:	429d      	cmp	r5, r3
 80122ba:	d0bc      	beq.n	8012236 <tcp_input+0xb1e>
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d0c6      	beq.n	801224e <tcp_input+0xb36>
 80122c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122c2:	4295      	cmp	r5, r2
 80122c4:	d0bd      	beq.n	8012242 <tcp_input+0xb2a>
 80122c6:	4613      	mov	r3, r2
 80122c8:	e7f8      	b.n	80122bc <tcp_input+0xba4>
      tcp_receive(pcb);
 80122ca:	4628      	mov	r0, r5
 80122cc:	f7fe ffb2 	bl	8011234 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80122d0:	f899 301c 	ldrb.w	r3, [r9, #28]
 80122d4:	06db      	lsls	r3, r3, #27
 80122d6:	f57f adfc 	bpl.w	8011ed2 <tcp_input+0x7ba>
 80122da:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80122dc:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	f47f adf6 	bne.w	8011ed2 <tcp_input+0x7ba>
 80122e6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f47f adf1 	bne.w	8011ed2 <tcp_input+0x7ba>
        tcp_pcb_purge(pcb);
 80122f0:	4628      	mov	r0, r5
 80122f2:	f7fd feb7 	bl	8010064 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80122f6:	6833      	ldr	r3, [r6, #0]
 80122f8:	429d      	cmp	r5, r3
 80122fa:	d09c      	beq.n	8012236 <tcp_input+0xb1e>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d0a6      	beq.n	801224e <tcp_input+0xb36>
 8012300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012302:	4295      	cmp	r5, r2
 8012304:	d09d      	beq.n	8012242 <tcp_input+0xb2a>
 8012306:	4613      	mov	r3, r2
 8012308:	e7f8      	b.n	80122fc <tcp_input+0xbe4>
 801230a:	bf00      	nop
 801230c:	0802de79 	.word	0x0802de79
 8012310:	0802e18f 	.word	0x0802e18f
 8012314:	0802aecf 	.word	0x0802aecf
 8012318:	0802e1a5 	.word	0x0802e1a5
 801231c:	2000f4cc 	.word	0x2000f4cc
 8012320:	0802e1b8 	.word	0x0802e1b8
 8012324:	20016110 	.word	0x20016110
 8012328:	20016124 	.word	0x20016124
      tcp_receive(pcb);
 801232c:	4628      	mov	r0, r5
 801232e:	f7fe ff81 	bl	8011234 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012332:	f899 301c 	ldrb.w	r3, [r9, #28]
 8012336:	06de      	lsls	r6, r3, #27
 8012338:	f57f adcb 	bpl.w	8011ed2 <tcp_input+0x7ba>
 801233c:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801233e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012342:	429a      	cmp	r2, r3
 8012344:	f47f adc5 	bne.w	8011ed2 <tcp_input+0x7ba>
 8012348:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801234c:	2b00      	cmp	r3, #0
 801234e:	f47f adc0 	bne.w	8011ed2 <tcp_input+0x7ba>
        recv_flags |= TF_CLOSED;
 8012352:	f899 3012 	ldrb.w	r3, [r9, #18]
 8012356:	f043 0310 	orr.w	r3, r3, #16
 801235a:	f889 3012 	strb.w	r3, [r9, #18]
    if (err != ERR_ABRT) {
 801235e:	e5b8      	b.n	8011ed2 <tcp_input+0x7ba>
        if (recv_acked > 0) {
 8012360:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8012364:	b12a      	cbz	r2, 8012372 <tcp_input+0xc5a>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012366:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 801236a:	bb03      	cbnz	r3, 80123ae <tcp_input+0xc96>
          recv_acked = 0;
 801236c:	2300      	movs	r3, #0
 801236e:	f8a9 3014 	strh.w	r3, [r9, #20]
        if (tcp_input_delayed_close(pcb)) {
 8012372:	4628      	mov	r0, r5
 8012374:	f7fe fed4 	bl	8011120 <tcp_input_delayed_close>
 8012378:	2800      	cmp	r0, #0
 801237a:	f47f ab9a 	bne.w	8011ab2 <tcp_input+0x39a>
        if (recv_data != NULL) {
 801237e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8012382:	b34b      	cbz	r3, 80123d8 <tcp_input+0xcc0>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012384:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8012388:	b133      	cbz	r3, 8012398 <tcp_input+0xc80>
 801238a:	4b32      	ldr	r3, [pc, #200]	; (8012454 <tcp_input+0xd3c>)
 801238c:	4932      	ldr	r1, [pc, #200]	; (8012458 <tcp_input+0xd40>)
 801238e:	4833      	ldr	r0, [pc, #204]	; (801245c <tcp_input+0xd44>)
 8012390:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012394:	f00a fbc8 	bl	801cb28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012398:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 801239c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80123a0:	f013 0310 	ands.w	r3, r3, #16
 80123a4:	d00a      	beq.n	80123bc <tcp_input+0xca4>
            pbuf_free(recv_data);
 80123a6:	4610      	mov	r0, r2
 80123a8:	f7fc ffea 	bl	800f380 <pbuf_free>
 80123ac:	e6b7      	b.n	801211e <tcp_input+0xa06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80123ae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80123b0:	4629      	mov	r1, r5
 80123b2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80123b4:	300d      	adds	r0, #13
 80123b6:	d1d9      	bne.n	801236c <tcp_input+0xc54>
 80123b8:	f7ff bb7b 	b.w	8011ab2 <tcp_input+0x39a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80123bc:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80123c0:	b316      	cbz	r6, 8012408 <tcp_input+0xcf0>
 80123c2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80123c4:	4629      	mov	r1, r5
 80123c6:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80123c8:	f110 0f0d 	cmn.w	r0, #13
 80123cc:	f43f ab71 	beq.w	8011ab2 <tcp_input+0x39a>
          if (err != ERR_OK) {
 80123d0:	b110      	cbz	r0, 80123d8 <tcp_input+0xcc0>
            pcb->refused_data = recv_data;
 80123d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80123d4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (recv_flags & TF_GOT_FIN) {
 80123d8:	f899 3012 	ldrb.w	r3, [r9, #18]
 80123dc:	0699      	lsls	r1, r3, #26
 80123de:	d506      	bpl.n	80123ee <tcp_input+0xcd6>
          if (pcb->refused_data != NULL) {
 80123e0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80123e4:	b1b3      	cbz	r3, 8012414 <tcp_input+0xcfc>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80123e6:	7b5a      	ldrb	r2, [r3, #13]
 80123e8:	f042 0220 	orr.w	r2, r2, #32
 80123ec:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80123ee:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80123f0:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 80123f2:	603b      	str	r3, [r7, #0]
        if (tcp_input_delayed_close(pcb)) {
 80123f4:	f7fe fe94 	bl	8011120 <tcp_input_delayed_close>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f47f ab5a 	bne.w	8011ab2 <tcp_input+0x39a>
        tcp_output(pcb);
 80123fe:	4628      	mov	r0, r5
 8012400:	f000 ff74 	bl	80132ec <tcp_output>
 8012404:	f7ff bb55 	b.w	8011ab2 <tcp_input+0x39a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012408:	4633      	mov	r3, r6
 801240a:	4629      	mov	r1, r5
 801240c:	4630      	mov	r0, r6
 801240e:	f7fe f9c1 	bl	8010794 <tcp_recv_null>
 8012412:	e7d9      	b.n	80123c8 <tcp_input+0xcb0>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012414:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
            TCP_EVENT_CLOSED(pcb, err);
 8012418:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801241c:	f640 3268 	movw	r2, #2920	; 0xb68
 8012420:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8012422:	bf1c      	itt	ne
 8012424:	3301      	addne	r3, #1
 8012426:	f8a5 3050 	strhne.w	r3, [r5, #80]	; 0x50
            TCP_EVENT_CLOSED(pcb, err);
 801242a:	2c00      	cmp	r4, #0
 801242c:	d0df      	beq.n	80123ee <tcp_input+0xcd6>
 801242e:	2300      	movs	r3, #0
 8012430:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012432:	461a      	mov	r2, r3
 8012434:	4629      	mov	r1, r5
 8012436:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8012438:	300d      	adds	r0, #13
 801243a:	d1d8      	bne.n	80123ee <tcp_input+0xcd6>
 801243c:	f7ff bb39 	b.w	8011ab2 <tcp_input+0x39a>
      if (prev != NULL) {
 8012440:	2f00      	cmp	r7, #0
 8012442:	f47f aaf1 	bne.w	8011a28 <tcp_input+0x310>
 8012446:	f7ff bafe 	b.w	8011a46 <tcp_input+0x32e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801244a:	2b00      	cmp	r3, #0
 801244c:	f43f ac7a 	beq.w	8011d44 <tcp_input+0x62c>
 8012450:	2300      	movs	r3, #0
 8012452:	e472      	b.n	8011d3a <tcp_input+0x622>
 8012454:	0802de79 	.word	0x0802de79
 8012458:	0802e1d6 	.word	0x0802e1d6
 801245c:	0802aecf 	.word	0x0802aecf

08012460 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8012460:	4a02      	ldr	r2, [pc, #8]	; (801246c <tcp_trigger_input_pcb_close+0xc>)
 8012462:	7c93      	ldrb	r3, [r2, #18]
 8012464:	f043 0310 	orr.w	r3, r3, #16
 8012468:	7493      	strb	r3, [r2, #18]
}
 801246a:	4770      	bx	lr
 801246c:	20007058 	.word	0x20007058

08012470 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012470:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012472:	4604      	mov	r4, r0
 8012474:	b930      	cbnz	r0, 8012484 <tcp_output_segment_busy+0x14>
 8012476:	4b06      	ldr	r3, [pc, #24]	; (8012490 <tcp_output_segment_busy+0x20>)
 8012478:	4906      	ldr	r1, [pc, #24]	; (8012494 <tcp_output_segment_busy+0x24>)
 801247a:	4807      	ldr	r0, [pc, #28]	; (8012498 <tcp_output_segment_busy+0x28>)
 801247c:	f240 529a 	movw	r2, #1434	; 0x59a
 8012480:	f00a fb52 	bl	801cb28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012484:	6863      	ldr	r3, [r4, #4]
 8012486:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8012488:	3801      	subs	r0, #1
 801248a:	bf18      	it	ne
 801248c:	2001      	movne	r0, #1
 801248e:	bd10      	pop	{r4, pc}
 8012490:	0802e1f0 	.word	0x0802e1f0
 8012494:	0802e25c 	.word	0x0802e25c
 8012498:	0802aecf 	.word	0x0802aecf

0801249c <tcp_pbuf_prealloc>:
{
 801249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a0:	9d08      	ldr	r5, [sp, #32]
 80124a2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 80124a6:	4680      	mov	r8, r0
 80124a8:	460c      	mov	r4, r1
 80124aa:	4617      	mov	r7, r2
 80124ac:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80124ae:	b92d      	cbnz	r5, 80124bc <tcp_pbuf_prealloc+0x20>
 80124b0:	4b1d      	ldr	r3, [pc, #116]	; (8012528 <tcp_pbuf_prealloc+0x8c>)
 80124b2:	491e      	ldr	r1, [pc, #120]	; (801252c <tcp_pbuf_prealloc+0x90>)
 80124b4:	481e      	ldr	r0, [pc, #120]	; (8012530 <tcp_pbuf_prealloc+0x94>)
 80124b6:	22e9      	movs	r2, #233	; 0xe9
 80124b8:	f00a fb36 	bl	801cb28 <iprintf>
  if (length < max_length) {
 80124bc:	42bc      	cmp	r4, r7
 80124be:	d231      	bcs.n	8012524 <tcp_pbuf_prealloc+0x88>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80124c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80124c4:	079a      	lsls	r2, r3, #30
 80124c6:	d40c      	bmi.n	80124e2 <tcp_pbuf_prealloc+0x46>
 80124c8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 80124cc:	065b      	lsls	r3, r3, #25
 80124ce:	d429      	bmi.n	8012524 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80124d0:	f1b9 0f00 	cmp.w	r9, #0
 80124d4:	d005      	beq.n	80124e2 <tcp_pbuf_prealloc+0x46>
         (!first_seg ||
 80124d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80124da:	b913      	cbnz	r3, 80124e2 <tcp_pbuf_prealloc+0x46>
          pcb->unsent != NULL ||
 80124dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80124e0:	b303      	cbz	r3, 8012524 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80124e2:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 80124e6:	f025 0103 	bic.w	r1, r5, #3
 80124ea:	42b9      	cmp	r1, r7
 80124ec:	460a      	mov	r2, r1
 80124ee:	bf28      	it	cs
 80124f0:	463a      	movcs	r2, r7
 80124f2:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80124f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124f8:	4640      	mov	r0, r8
 80124fa:	f7fc ffa9 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 80124fe:	4605      	mov	r5, r0
 8012500:	b168      	cbz	r0, 801251e <tcp_pbuf_prealloc+0x82>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012502:	6803      	ldr	r3, [r0, #0]
 8012504:	b133      	cbz	r3, 8012514 <tcp_pbuf_prealloc+0x78>
 8012506:	4b08      	ldr	r3, [pc, #32]	; (8012528 <tcp_pbuf_prealloc+0x8c>)
 8012508:	490a      	ldr	r1, [pc, #40]	; (8012534 <tcp_pbuf_prealloc+0x98>)
 801250a:	4809      	ldr	r0, [pc, #36]	; (8012530 <tcp_pbuf_prealloc+0x94>)
 801250c:	f240 120b 	movw	r2, #267	; 0x10b
 8012510:	f00a fb0a 	bl	801cb28 <iprintf>
  *oversize = p->len - length;
 8012514:	896b      	ldrh	r3, [r5, #10]
 8012516:	1b1b      	subs	r3, r3, r4
 8012518:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801251a:	812c      	strh	r4, [r5, #8]
 801251c:	816c      	strh	r4, [r5, #10]
}
 801251e:	4628      	mov	r0, r5
 8012520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012524:	4621      	mov	r1, r4
 8012526:	e7e5      	b.n	80124f4 <tcp_pbuf_prealloc+0x58>
 8012528:	0802e1f0 	.word	0x0802e1f0
 801252c:	0802e281 	.word	0x0802e281
 8012530:	0802aecf 	.word	0x0802aecf
 8012534:	0802e2a0 	.word	0x0802e2a0

08012538 <tcp_create_segment>:
{
 8012538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801253c:	460e      	mov	r6, r1
 801253e:	f89d a020 	ldrb.w	sl, [sp, #32]
 8012542:	4690      	mov	r8, r2
 8012544:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012546:	4607      	mov	r7, r0
 8012548:	b928      	cbnz	r0, 8012556 <tcp_create_segment+0x1e>
 801254a:	4b2f      	ldr	r3, [pc, #188]	; (8012608 <tcp_create_segment+0xd0>)
 801254c:	492f      	ldr	r1, [pc, #188]	; (801260c <tcp_create_segment+0xd4>)
 801254e:	4830      	ldr	r0, [pc, #192]	; (8012610 <tcp_create_segment+0xd8>)
 8012550:	22a3      	movs	r2, #163	; 0xa3
 8012552:	f00a fae9 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012556:	b92e      	cbnz	r6, 8012564 <tcp_create_segment+0x2c>
 8012558:	4b2b      	ldr	r3, [pc, #172]	; (8012608 <tcp_create_segment+0xd0>)
 801255a:	492e      	ldr	r1, [pc, #184]	; (8012614 <tcp_create_segment+0xdc>)
 801255c:	482c      	ldr	r0, [pc, #176]	; (8012610 <tcp_create_segment+0xd8>)
 801255e:	22a4      	movs	r2, #164	; 0xa4
 8012560:	f00a fae2 	bl	801cb28 <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012564:	2003      	movs	r0, #3
 8012566:	f7fc fb81 	bl	800ec6c <memp_malloc>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801256a:	ea4f 058a 	mov.w	r5, sl, lsl #2
 801256e:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012572:	4604      	mov	r4, r0
 8012574:	b928      	cbnz	r0, 8012582 <tcp_create_segment+0x4a>
    pbuf_free(p);
 8012576:	4630      	mov	r0, r6
 8012578:	f7fc ff02 	bl	800f380 <pbuf_free>
}
 801257c:	4620      	mov	r0, r4
 801257e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8012582:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8012586:	2300      	movs	r3, #0
  seg->p = p;
 8012588:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801258c:	8933      	ldrh	r3, [r6, #8]
 801258e:	42ab      	cmp	r3, r5
 8012590:	fa1f fa85 	uxth.w	sl, r5
 8012594:	d205      	bcs.n	80125a2 <tcp_create_segment+0x6a>
 8012596:	4b1c      	ldr	r3, [pc, #112]	; (8012608 <tcp_create_segment+0xd0>)
 8012598:	491f      	ldr	r1, [pc, #124]	; (8012618 <tcp_create_segment+0xe0>)
 801259a:	481d      	ldr	r0, [pc, #116]	; (8012610 <tcp_create_segment+0xd8>)
 801259c:	22b0      	movs	r2, #176	; 0xb0
 801259e:	f00a fac3 	bl	801cb28 <iprintf>
  seg->len = p->tot_len - optlen;
 80125a2:	8933      	ldrh	r3, [r6, #8]
 80125a4:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 80125a8:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 80125aa:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 80125ac:	2114      	movs	r1, #20
 80125ae:	f7fc fead 	bl	800f30c <pbuf_add_header>
 80125b2:	4606      	mov	r6, r0
 80125b4:	b120      	cbz	r0, 80125c0 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 80125b6:	4620      	mov	r0, r4
 80125b8:	f7fd fcc4 	bl	800ff44 <tcp_seg_free>
    return NULL;
 80125bc:	2400      	movs	r4, #0
 80125be:	e7dd      	b.n	801257c <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80125c0:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80125c2:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80125c4:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80125c8:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80125cc:	f7fb fd68 	bl	800e0a0 <lwip_htons>
 80125d0:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80125d4:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 80125d8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80125dc:	f7fb fd60 	bl	800e0a0 <lwip_htons>
 80125e0:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80125e4:	4648      	mov	r0, r9
 80125e6:	68e7      	ldr	r7, [r4, #12]
 80125e8:	f7fb fd5d 	bl	800e0a6 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80125ec:	08ad      	lsrs	r5, r5, #2
 80125ee:	3505      	adds	r5, #5
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80125f0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80125f2:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 80125f6:	68e7      	ldr	r7, [r4, #12]
 80125f8:	f7fb fd52 	bl	800e0a0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80125fc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80125fe:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 8012600:	749e      	strb	r6, [r3, #18]
 8012602:	74de      	strb	r6, [r3, #19]
  return seg;
 8012604:	e7ba      	b.n	801257c <tcp_create_segment+0x44>
 8012606:	bf00      	nop
 8012608:	0802e1f0 	.word	0x0802e1f0
 801260c:	0802e2b4 	.word	0x0802e2b4
 8012610:	0802aecf 	.word	0x0802aecf
 8012614:	0802e2d4 	.word	0x0802e2d4
 8012618:	0802e2f5 	.word	0x0802e2f5

0801261c <tcp_route>:
{
 801261c:	4603      	mov	r3, r0
 801261e:	4608      	mov	r0, r1
 8012620:	4611      	mov	r1, r2
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012622:	b12b      	cbz	r3, 8012630 <tcp_route+0x14>
 8012624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012628:	b113      	cbz	r3, 8012630 <tcp_route+0x14>
    return netif_get_by_index(pcb->netif_idx);
 801262a:	4618      	mov	r0, r3
 801262c:	f7fc bdc0 	b.w	800f1b0 <netif_get_by_index>
    return ip_route(src, dst);
 8012630:	b121      	cbz	r1, 801263c <tcp_route+0x20>
 8012632:	7d0b      	ldrb	r3, [r1, #20]
 8012634:	2b06      	cmp	r3, #6
 8012636:	d101      	bne.n	801263c <tcp_route+0x20>
 8012638:	f7f8 bec0 	b.w	800b3bc <ip6_route>
 801263c:	4608      	mov	r0, r1
 801263e:	f7f7 bee3 	b.w	800a408 <ip4_route>
	...

08012644 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012646:	4604      	mov	r4, r0
 8012648:	b085      	sub	sp, #20
 801264a:	4617      	mov	r7, r2
 801264c:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801264e:	460e      	mov	r6, r1
 8012650:	b931      	cbnz	r1, 8012660 <tcp_output_control_segment+0x1c>
 8012652:	4b1a      	ldr	r3, [pc, #104]	; (80126bc <tcp_output_control_segment+0x78>)
 8012654:	491a      	ldr	r1, [pc, #104]	; (80126c0 <tcp_output_control_segment+0x7c>)
 8012656:	481b      	ldr	r0, [pc, #108]	; (80126c4 <tcp_output_control_segment+0x80>)
 8012658:	f240 7287 	movw	r2, #1927	; 0x787
 801265c:	f00a fa64 	bl	801cb28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012660:	462a      	mov	r2, r5
 8012662:	4639      	mov	r1, r7
 8012664:	4620      	mov	r0, r4
 8012666:	f7ff ffd9 	bl	801261c <tcp_route>
  if (netif == NULL) {
 801266a:	b318      	cbz	r0, 80126b4 <tcp_output_control_segment+0x70>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801266c:	b1b4      	cbz	r4, 801269c <tcp_output_control_segment+0x58>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801266e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      tos = pcb->tos;
 8012672:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012676:	b19d      	cbz	r5, 80126a0 <tcp_output_control_segment+0x5c>
 8012678:	7d2a      	ldrb	r2, [r5, #20]
 801267a:	2a06      	cmp	r2, #6
 801267c:	d110      	bne.n	80126a0 <tcp_output_control_segment+0x5c>
 801267e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8012682:	9400      	str	r4, [sp, #0]
 8012684:	462a      	mov	r2, r5
 8012686:	4639      	mov	r1, r7
 8012688:	4630      	mov	r0, r6
 801268a:	f7f9 fb25 	bl	800bcd8 <ip6_output_if>
 801268e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012690:	4630      	mov	r0, r6
 8012692:	f7fc fe75 	bl	800f380 <pbuf_free>
  return err;
}
 8012696:	4620      	mov	r0, r4
 8012698:	b005      	add	sp, #20
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ttl = TCP_TTL;
 801269c:	23ff      	movs	r3, #255	; 0xff
 801269e:	e7ea      	b.n	8012676 <tcp_output_control_segment+0x32>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80126a0:	2206      	movs	r2, #6
 80126a2:	e9cd 4200 	strd	r4, r2, [sp]
 80126a6:	9002      	str	r0, [sp, #8]
 80126a8:	462a      	mov	r2, r5
 80126aa:	4639      	mov	r1, r7
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7f8 f82f 	bl	800a710 <ip4_output_if>
 80126b2:	e7ec      	b.n	801268e <tcp_output_control_segment+0x4a>
    err = ERR_RTE;
 80126b4:	f06f 0403 	mvn.w	r4, #3
 80126b8:	e7ea      	b.n	8012690 <tcp_output_control_segment+0x4c>
 80126ba:	bf00      	nop
 80126bc:	0802e1f0 	.word	0x0802e1f0
 80126c0:	0802e30a 	.word	0x0802e30a
 80126c4:	0802aecf 	.word	0x0802aecf

080126c8 <tcp_output_alloc_header_common.constprop.0>:
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80126c8:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80126ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80126ce:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80126d0:	4606      	mov	r6, r0
 80126d2:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80126d4:	2036      	movs	r0, #54	; 0x36
 80126d6:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80126da:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80126dc:	f7fc feb8 	bl	800f450 <pbuf_alloc>
  if (p != NULL) {
 80126e0:	4605      	mov	r5, r0
 80126e2:	b348      	cbz	r0, 8012738 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80126e4:	8943      	ldrh	r3, [r0, #10]
 80126e6:	2b13      	cmp	r3, #19
 80126e8:	d806      	bhi.n	80126f8 <tcp_output_alloc_header_common.constprop.0+0x30>
 80126ea:	4b15      	ldr	r3, [pc, #84]	; (8012740 <tcp_output_alloc_header_common.constprop.0+0x78>)
 80126ec:	4915      	ldr	r1, [pc, #84]	; (8012744 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 80126ee:	4816      	ldr	r0, [pc, #88]	; (8012748 <tcp_output_alloc_header_common.constprop.0+0x80>)
 80126f0:	f240 7223 	movw	r2, #1827	; 0x723
 80126f4:	f00a fa18 	bl	801cb28 <iprintf>
    tcphdr->src = lwip_htons(src_port);
 80126f8:	4640      	mov	r0, r8
    tcphdr = (struct tcp_hdr *)p->payload;
 80126fa:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 80126fc:	f7fb fcd0 	bl	800e0a0 <lwip_htons>
 8012700:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012702:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8012706:	f7fb fccb 	bl	800e0a0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801270a:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801270c:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801270e:	4630      	mov	r0, r6
 8012710:	f7fb fcc9 	bl	800e0a6 <lwip_htonl>
 8012714:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012716:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801271a:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 801271e:	f7fb fcbf 	bl	800e0a0 <lwip_htons>
 8012722:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012724:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8012728:	f7fb fcba 	bl	800e0a0 <lwip_htons>
    tcphdr->chksum = 0;
 801272c:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801272e:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8012730:	7423      	strb	r3, [r4, #16]
 8012732:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8012734:	74a3      	strb	r3, [r4, #18]
 8012736:	74e3      	strb	r3, [r4, #19]
}
 8012738:	4628      	mov	r0, r5
 801273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273e:	bf00      	nop
 8012740:	0802e1f0 	.word	0x0802e1f0
 8012744:	0802e333 	.word	0x0802e333
 8012748:	0802aecf 	.word	0x0802aecf

0801274c <tcp_output_alloc_header.constprop.0>:
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801274c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801274e:	460d      	mov	r5, r1
 8012750:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012752:	4604      	mov	r4, r0
 8012754:	b930      	cbnz	r0, 8012764 <tcp_output_alloc_header.constprop.0+0x18>
 8012756:	4b0e      	ldr	r3, [pc, #56]	; (8012790 <tcp_output_alloc_header.constprop.0+0x44>)
 8012758:	490e      	ldr	r1, [pc, #56]	; (8012794 <tcp_output_alloc_header.constprop.0+0x48>)
 801275a:	480f      	ldr	r0, [pc, #60]	; (8012798 <tcp_output_alloc_header.constprop.0+0x4c>)
 801275c:	f240 7242 	movw	r2, #1858	; 0x742
 8012760:	f00a f9e2 	bl	801cb28 <iprintf>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012764:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8012768:	9302      	str	r3, [sp, #8]
 801276a:	2310      	movs	r3, #16
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8012772:	9300      	str	r3, [sp, #0]
 8012774:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012776:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012778:	4632      	mov	r2, r6
 801277a:	4629      	mov	r1, r5
 801277c:	f7ff ffa4 	bl	80126c8 <tcp_output_alloc_header_common.constprop.0>
  if (p != NULL) {
 8012780:	b120      	cbz	r0, 801278c <tcp_output_alloc_header.constprop.0+0x40>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012782:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012788:	4413      	add	r3, r2
 801278a:	6563      	str	r3, [r4, #84]	; 0x54
}
 801278c:	b004      	add	sp, #16
 801278e:	bd70      	pop	{r4, r5, r6, pc}
 8012790:	0802e1f0 	.word	0x0802e1f0
 8012794:	0802e361 	.word	0x0802e361
 8012798:	0802aecf 	.word	0x0802aecf

0801279c <tcp_output_fill_options.isra.0.constprop.0>:
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801279c:	b930      	cbnz	r0, 80127ac <tcp_output_fill_options.isra.0.constprop.0+0x10>
 801279e:	4b04      	ldr	r3, [pc, #16]	; (80127b0 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 80127a0:	4904      	ldr	r1, [pc, #16]	; (80127b4 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 80127a2:	4805      	ldr	r0, [pc, #20]	; (80127b8 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 80127a4:	f240 7256 	movw	r2, #1878	; 0x756
 80127a8:	f00a b9be 	b.w	801cb28 <iprintf>
}
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	0802e1f0 	.word	0x0802e1f0
 80127b4:	0802e386 	.word	0x0802e386
 80127b8:	0802aecf 	.word	0x0802aecf

080127bc <tcp_write>:
{
 80127bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c0:	ed2d 8b02 	vpush	{d8}
 80127c4:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80127c6:	4604      	mov	r4, r0
{
 80127c8:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 80127ca:	2300      	movs	r3, #0
{
 80127cc:	9107      	str	r1, [sp, #28]
 80127ce:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 80127d0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80127d4:	b968      	cbnz	r0, 80127f2 <tcp_write+0x36>
 80127d6:	4baf      	ldr	r3, [pc, #700]	; (8012a94 <tcp_write+0x2d8>)
 80127d8:	49af      	ldr	r1, [pc, #700]	; (8012a98 <tcp_write+0x2dc>)
 80127da:	f44f 72cf 	mov.w	r2, #414	; 0x19e
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80127de:	48af      	ldr	r0, [pc, #700]	; (8012a9c <tcp_write+0x2e0>)
 80127e0:	f00a f9a2 	bl	801cb28 <iprintf>
 80127e4:	f06f 000f 	mvn.w	r0, #15
}
 80127e8:	b00f      	add	sp, #60	; 0x3c
 80127ea:	ecbd 8b02 	vpop	{d8}
 80127ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80127f2:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 80127f6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80127fa:	085b      	lsrs	r3, r3, #1
 80127fc:	4293      	cmp	r3, r2
 80127fe:	bf28      	it	cs
 8012800:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8012802:	2b00      	cmp	r3, #0
 8012804:	bf08      	it	eq
 8012806:	4613      	moveq	r3, r2
 8012808:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801280a:	9b07      	ldr	r3, [sp, #28]
 801280c:	b923      	cbnz	r3, 8012818 <tcp_write+0x5c>
 801280e:	4ba1      	ldr	r3, [pc, #644]	; (8012a94 <tcp_write+0x2d8>)
 8012810:	49a3      	ldr	r1, [pc, #652]	; (8012aa0 <tcp_write+0x2e4>)
 8012812:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012816:	e7e2      	b.n	80127de <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 8012818:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801281c:	2b07      	cmp	r3, #7
 801281e:	d003      	beq.n	8012828 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 8012820:	3b02      	subs	r3, #2
 8012822:	2b02      	cmp	r3, #2
 8012824:	f200 826a 	bhi.w	8012cfc <tcp_write+0x540>
  } else if (len == 0) {
 8012828:	9b04      	ldr	r3, [sp, #16]
 801282a:	b1fb      	cbz	r3, 801286c <tcp_write+0xb0>
  if (len > pcb->snd_buf) {
 801282c:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8012830:	9a04      	ldr	r2, [sp, #16]
 8012832:	4293      	cmp	r3, r2
 8012834:	d208      	bcs.n	8012848 <tcp_write+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012836:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801283e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_MEM;
 8012842:	f04f 30ff 	mov.w	r0, #4294967295
 8012846:	e7cf      	b.n	80127e8 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012848:	f8b4 208e 	ldrh.w	r2, [r4, #142]	; 0x8e
 801284c:	2a07      	cmp	r2, #7
 801284e:	d8f2      	bhi.n	8012836 <tcp_write+0x7a>
  if (pcb->snd_queuelen != 0) {
 8012850:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8012854:	b312      	cbz	r2, 801289c <tcp_write+0xe0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012856:	b94b      	cbnz	r3, 801286c <tcp_write+0xb0>
 8012858:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801285c:	b933      	cbnz	r3, 801286c <tcp_write+0xb0>
 801285e:	4b8d      	ldr	r3, [pc, #564]	; (8012a94 <tcp_write+0x2d8>)
 8012860:	4990      	ldr	r1, [pc, #576]	; (8012aa4 <tcp_write+0x2e8>)
 8012862:	f240 1255 	movw	r2, #341	; 0x155
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012866:	488d      	ldr	r0, [pc, #564]	; (8012a9c <tcp_write+0x2e0>)
 8012868:	f00a f95e 	bl	801cb28 <iprintf>
  if (pcb->unsent != NULL) {
 801286c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  queuelen = pcb->snd_queuelen;
 8012870:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8012874:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 8012876:	b9e6      	cbnz	r6, 80128b2 <tcp_write+0xf6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012878:	f8b4 7090 	ldrh.w	r7, [r4, #144]	; 0x90
 801287c:	2f00      	cmp	r7, #0
 801287e:	f000 81c2 	beq.w	8012c06 <tcp_write+0x44a>
 8012882:	4b84      	ldr	r3, [pc, #528]	; (8012a94 <tcp_write+0x2d8>)
 8012884:	4988      	ldr	r1, [pc, #544]	; (8012aa8 <tcp_write+0x2ec>)
 8012886:	4885      	ldr	r0, [pc, #532]	; (8012a9c <tcp_write+0x2e0>)
 8012888:	f240 224a 	movw	r2, #586	; 0x24a
 801288c:	f00a f94c 	bl	801cb28 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012890:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8012892:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 8012894:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 8012896:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 8012898:	4637      	mov	r7, r6
 801289a:	e08a      	b.n	80129b2 <tcp_write+0x1f6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801289c:	b91b      	cbnz	r3, 80128a6 <tcp_write+0xea>
 801289e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d0e2      	beq.n	801286c <tcp_write+0xb0>
 80128a6:	4b7b      	ldr	r3, [pc, #492]	; (8012a94 <tcp_write+0x2d8>)
 80128a8:	4980      	ldr	r1, [pc, #512]	; (8012aac <tcp_write+0x2f0>)
 80128aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80128ae:	e7da      	b.n	8012866 <tcp_write+0xaa>
 80128b0:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128b2:	f8d6 a000 	ldr.w	sl, [r6]
 80128b6:	46b0      	mov	r8, r6
 80128b8:	f1ba 0f00 	cmp.w	sl, #0
 80128bc:	d1f8      	bne.n	80128b0 <tcp_write+0xf4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80128be:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80128c0:	8933      	ldrh	r3, [r6, #8]
 80128c2:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80128c4:	00ad      	lsls	r5, r5, #2
 80128c6:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80128ca:	442b      	add	r3, r5
 80128cc:	429a      	cmp	r2, r3
 80128ce:	da06      	bge.n	80128de <tcp_write+0x122>
 80128d0:	4b70      	ldr	r3, [pc, #448]	; (8012a94 <tcp_write+0x2d8>)
 80128d2:	4977      	ldr	r1, [pc, #476]	; (8012ab0 <tcp_write+0x2f4>)
 80128d4:	4871      	ldr	r0, [pc, #452]	; (8012a9c <tcp_write+0x2e0>)
 80128d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80128da:	f00a f925 	bl	801cb28 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80128de:	8937      	ldrh	r7, [r6, #8]
 80128e0:	9b06      	ldr	r3, [sp, #24]
 80128e2:	1bdf      	subs	r7, r3, r7
 80128e4:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 80128e6:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
 80128ea:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    space = mss_local - (last_unsent->len + unsent_optlen);
 80128ee:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 80128f0:	2d00      	cmp	r5, #0
 80128f2:	d067      	beq.n	80129c4 <tcp_write+0x208>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80128f4:	42bd      	cmp	r5, r7
 80128f6:	d906      	bls.n	8012906 <tcp_write+0x14a>
 80128f8:	4b66      	ldr	r3, [pc, #408]	; (8012a94 <tcp_write+0x2d8>)
 80128fa:	496e      	ldr	r1, [pc, #440]	; (8012ab4 <tcp_write+0x2f8>)
 80128fc:	4867      	ldr	r0, [pc, #412]	; (8012a9c <tcp_write+0x2e0>)
 80128fe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012902:	f00a f911 	bl	801cb28 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012906:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801290a:	9a04      	ldr	r2, [sp, #16]
 801290c:	429a      	cmp	r2, r3
 801290e:	bf28      	it	cs
 8012910:	461a      	movcs	r2, r3
 8012912:	42ba      	cmp	r2, r7
 8012914:	4615      	mov	r5, r2
 8012916:	bf28      	it	cs
 8012918:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 801291a:	1b5b      	subs	r3, r3, r5
 801291c:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801291e:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 8012920:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 8012924:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012926:	b153      	cbz	r3, 801293e <tcp_write+0x182>
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	42ab      	cmp	r3, r5
 801292c:	f000 8170 	beq.w	8012c10 <tcp_write+0x454>
 8012930:	4b58      	ldr	r3, [pc, #352]	; (8012a94 <tcp_write+0x2d8>)
 8012932:	4961      	ldr	r1, [pc, #388]	; (8012ab8 <tcp_write+0x2fc>)
 8012934:	4859      	ldr	r0, [pc, #356]	; (8012a9c <tcp_write+0x2e0>)
 8012936:	f44f 7200 	mov.w	r2, #512	; 0x200
 801293a:	f00a f8f5 	bl	801cb28 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801293e:	9b04      	ldr	r3, [sp, #16]
 8012940:	429d      	cmp	r5, r3
 8012942:	f080 8165 	bcs.w	8012c10 <tcp_write+0x454>
 8012946:	2f00      	cmp	r7, #0
 8012948:	f000 815a 	beq.w	8012c00 <tcp_write+0x444>
 801294c:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8012950:	f1b9 0f00 	cmp.w	r9, #0
 8012954:	f000 8155 	beq.w	8012c02 <tcp_write+0x446>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012958:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801295c:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 801295e:	45b9      	cmp	r9, r7
 8012960:	bfa8      	it	ge
 8012962:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012964:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012966:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801296a:	d52d      	bpl.n	80129c8 <tcp_write+0x20c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801296c:	2301      	movs	r3, #1
 801296e:	9302      	str	r3, [sp, #8]
 8012970:	9b08      	ldr	r3, [sp, #32]
 8012972:	463a      	mov	r2, r7
 8012974:	e9cd 4300 	strd	r4, r3, [sp]
 8012978:	4631      	mov	r1, r6
 801297a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 801297e:	2000      	movs	r0, #0
 8012980:	f7ff fd8c 	bl	801249c <tcp_pbuf_prealloc>
 8012984:	4683      	mov	fp, r0
 8012986:	2800      	cmp	r0, #0
 8012988:	f000 81b5 	beq.w	8012cf6 <tcp_write+0x53a>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801298c:	9b07      	ldr	r3, [sp, #28]
 801298e:	6840      	ldr	r0, [r0, #4]
 8012990:	4632      	mov	r2, r6
 8012992:	1959      	adds	r1, r3, r5
 8012994:	f009 fc54 	bl	801c240 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8012998:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 801299a:	f7fc fe45 	bl	800f628 <pbuf_clen>
 801299e:	9b05      	ldr	r3, [sp, #20]
 80129a0:	4403      	add	r3, r0
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	9305      	str	r3, [sp, #20]
  u16_t extendlen = 0;
 80129a6:	f04f 0900 	mov.w	r9, #0
      pos += seglen;
 80129aa:	19af      	adds	r7, r5, r6
 80129ac:	b2bf      	uxth	r7, r7
 80129ae:	4646      	mov	r6, r8
 80129b0:	46da      	mov	sl, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129b2:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 80129b4:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129b8:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 80129bc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129c0:	930a      	str	r3, [sp, #40]	; 0x28
 80129c2:	e0ec      	b.n	8012b9e <tcp_write+0x3e2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80129c4:	462e      	mov	r6, r5
 80129c6:	e7ba      	b.n	801293e <tcp_write+0x182>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80129c8:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80129cc:	465a      	mov	r2, fp
 80129ce:	f8db b000 	ldr.w	fp, [fp]
 80129d2:	f1bb 0f00 	cmp.w	fp, #0
 80129d6:	d1f9      	bne.n	80129cc <tcp_write+0x210>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80129d8:	7b13      	ldrb	r3, [r2, #12]
 80129da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80129de:	d10f      	bne.n	8012a00 <tcp_write+0x244>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80129e0:	8951      	ldrh	r1, [r2, #10]
 80129e2:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80129e4:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80129e6:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d109      	bne.n	8012a00 <tcp_write+0x244>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80129ec:	b135      	cbz	r5, 80129fc <tcp_write+0x240>
 80129ee:	4b29      	ldr	r3, [pc, #164]	; (8012a94 <tcp_write+0x2d8>)
 80129f0:	4932      	ldr	r1, [pc, #200]	; (8012abc <tcp_write+0x300>)
 80129f2:	482a      	ldr	r0, [pc, #168]	; (8012a9c <tcp_write+0x2e0>)
 80129f4:	f240 2231 	movw	r2, #561	; 0x231
 80129f8:	f00a f896 	bl	801cb28 <iprintf>
          extendlen = seglen;
 80129fc:	46b1      	mov	r9, r6
 80129fe:	e7d4      	b.n	80129aa <tcp_write+0x1ee>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012a00:	2201      	movs	r2, #1
 8012a02:	4631      	mov	r1, r6
 8012a04:	2000      	movs	r0, #0
 8012a06:	f7fc fd23 	bl	800f450 <pbuf_alloc>
 8012a0a:	4683      	mov	fp, r0
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f000 8172 	beq.w	8012cf6 <tcp_write+0x53a>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012a12:	9b07      	ldr	r3, [sp, #28]
 8012a14:	442b      	add	r3, r5
 8012a16:	6043      	str	r3, [r0, #4]
 8012a18:	e7bf      	b.n	801299a <tcp_write+0x1de>
    u16_t left = len - pos;
 8012a1a:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012a1c:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 8012a1e:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	4293      	cmp	r3, r2
 8012a24:	bf28      	it	cs
 8012a26:	4613      	movcs	r3, r2
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d047      	beq.n	8012ac4 <tcp_write+0x308>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012a34:	fabb f38b 	clz	r3, fp
 8012a38:	095b      	lsrs	r3, r3, #5
 8012a3a:	9302      	str	r3, [sp, #8]
 8012a3c:	9b08      	ldr	r3, [sp, #32]
 8012a3e:	ee18 1a10 	vmov	r1, s16
 8012a42:	e9cd 4300 	strd	r4, r3, [sp]
 8012a46:	204a      	movs	r0, #74	; 0x4a
 8012a48:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8012a4c:	f7ff fd26 	bl	801249c <tcp_pbuf_prealloc>
 8012a50:	4606      	mov	r6, r0
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d057      	beq.n	8012b06 <tcp_write+0x34a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012a56:	8943      	ldrh	r3, [r0, #10]
 8012a58:	ee18 2a10 	vmov	r2, s16
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d206      	bcs.n	8012a6e <tcp_write+0x2b2>
 8012a60:	4b0c      	ldr	r3, [pc, #48]	; (8012a94 <tcp_write+0x2d8>)
 8012a62:	4917      	ldr	r1, [pc, #92]	; (8012ac0 <tcp_write+0x304>)
 8012a64:	480d      	ldr	r0, [pc, #52]	; (8012a9c <tcp_write+0x2e0>)
 8012a66:	f240 2266 	movw	r2, #614	; 0x266
 8012a6a:	f00a f85d 	bl	801cb28 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012a6e:	9b07      	ldr	r3, [sp, #28]
 8012a70:	6870      	ldr	r0, [r6, #4]
 8012a72:	ee18 2a10 	vmov	r2, s16
 8012a76:	19d9      	adds	r1, r3, r7
 8012a78:	f009 fbe2 	bl	801c240 <memcpy>
    queuelen += pbuf_clen(p);
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f7fc fdd3 	bl	800f628 <pbuf_clen>
 8012a82:	9b05      	ldr	r3, [sp, #20]
 8012a84:	4403      	add	r3, r0
 8012a86:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012a88:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 8012a8a:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012a8c:	d968      	bls.n	8012b60 <tcp_write+0x3a4>
      pbuf_free(p);
 8012a8e:	4630      	mov	r0, r6
 8012a90:	e037      	b.n	8012b02 <tcp_write+0x346>
 8012a92:	bf00      	nop
 8012a94:	0802e1f0 	.word	0x0802e1f0
 8012a98:	0802e3ac 	.word	0x0802e3ac
 8012a9c:	0802aecf 	.word	0x0802aecf
 8012aa0:	0802e3c3 	.word	0x0802e3c3
 8012aa4:	0802e3f4 	.word	0x0802e3f4
 8012aa8:	0802e4de 	.word	0x0802e4de
 8012aac:	0802e42e 	.word	0x0802e42e
 8012ab0:	0802e460 	.word	0x0802e460
 8012ab4:	0802e477 	.word	0x0802e477
 8012ab8:	0802e497 	.word	0x0802e497
 8012abc:	0802e4b5 	.word	0x0802e4b5
 8012ac0:	0802e50d 	.word	0x0802e50d
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012ac4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012ac8:	b133      	cbz	r3, 8012ad8 <tcp_write+0x31c>
 8012aca:	4b8e      	ldr	r3, [pc, #568]	; (8012d04 <tcp_write+0x548>)
 8012acc:	498e      	ldr	r1, [pc, #568]	; (8012d08 <tcp_write+0x54c>)
 8012ace:	488f      	ldr	r0, [pc, #572]	; (8012d0c <tcp_write+0x550>)
 8012ad0:	f240 2271 	movw	r2, #625	; 0x271
 8012ad4:	f00a f828 	bl	801cb28 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012ad8:	ee18 1a10 	vmov	r1, s16
 8012adc:	2201      	movs	r2, #1
 8012ade:	204a      	movs	r0, #74	; 0x4a
 8012ae0:	f7fc fcb6 	bl	800f450 <pbuf_alloc>
 8012ae4:	b178      	cbz	r0, 8012b06 <tcp_write+0x34a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012ae6:	9a07      	ldr	r2, [sp, #28]
 8012ae8:	900b      	str	r0, [sp, #44]	; 0x2c
 8012aea:	443a      	add	r2, r7
 8012aec:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012aee:	2100      	movs	r1, #0
 8012af0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012af4:	204a      	movs	r0, #74	; 0x4a
 8012af6:	f7fc fcab 	bl	800f450 <pbuf_alloc>
 8012afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012afc:	4606      	mov	r6, r0
 8012afe:	bb58      	cbnz	r0, 8012b58 <tcp_write+0x39c>
        pbuf_free(p2);
 8012b00:	4618      	mov	r0, r3
      pbuf_free(p);
 8012b02:	f7fc fc3d 	bl	800f380 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b06:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b0e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  if (concat_p != NULL) {
 8012b12:	f1ba 0f00 	cmp.w	sl, #0
 8012b16:	d002      	beq.n	8012b1e <tcp_write+0x362>
    pbuf_free(concat_p);
 8012b18:	4650      	mov	r0, sl
 8012b1a:	f7fc fc31 	bl	800f380 <pbuf_free>
  if (queue != NULL) {
 8012b1e:	f1bb 0f00 	cmp.w	fp, #0
 8012b22:	d002      	beq.n	8012b2a <tcp_write+0x36e>
    tcp_segs_free(queue);
 8012b24:	4658      	mov	r0, fp
 8012b26:	f7fd fa1b 	bl	800ff60 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8012b2a:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f43f ae87 	beq.w	8012842 <tcp_write+0x86>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012b34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f47f ae82 	bne.w	8012842 <tcp_write+0x86>
 8012b3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	f47f ae7d 	bne.w	8012842 <tcp_write+0x86>
 8012b48:	4b6e      	ldr	r3, [pc, #440]	; (8012d04 <tcp_write+0x548>)
 8012b4a:	4971      	ldr	r1, [pc, #452]	; (8012d10 <tcp_write+0x554>)
 8012b4c:	486f      	ldr	r0, [pc, #444]	; (8012d0c <tcp_write+0x550>)
 8012b4e:	f240 3227 	movw	r2, #807	; 0x327
 8012b52:	f009 ffe9 	bl	801cb28 <iprintf>
 8012b56:	e674      	b.n	8012842 <tcp_write+0x86>
      pbuf_cat(p/*header*/, p2/*data*/);
 8012b58:	4619      	mov	r1, r3
 8012b5a:	f7fc fd89 	bl	800f670 <pbuf_cat>
 8012b5e:	e78d      	b.n	8012a7c <tcp_write+0x2c0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012b60:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012b64:	2200      	movs	r2, #0
 8012b66:	4631      	mov	r1, r6
 8012b68:	9200      	str	r2, [sp, #0]
 8012b6a:	443b      	add	r3, r7
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f7ff fce3 	bl	8012538 <tcp_create_segment>
 8012b72:	4606      	mov	r6, r0
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d0c6      	beq.n	8012b06 <tcp_write+0x34a>
    if (queue == NULL) {
 8012b78:	f1bb 0f00 	cmp.w	fp, #0
 8012b7c:	d03e      	beq.n	8012bfc <tcp_write+0x440>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b80:	b933      	cbnz	r3, 8012b90 <tcp_write+0x3d4>
 8012b82:	4b60      	ldr	r3, [pc, #384]	; (8012d04 <tcp_write+0x548>)
 8012b84:	4963      	ldr	r1, [pc, #396]	; (8012d14 <tcp_write+0x558>)
 8012b86:	4861      	ldr	r0, [pc, #388]	; (8012d0c <tcp_write+0x550>)
 8012b88:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b8c:	f009 ffcc 	bl	801cb28 <iprintf>
      prev_seg->next = seg;
 8012b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b92:	601e      	str	r6, [r3, #0]
    pos += seglen;
 8012b94:	ee18 3a10 	vmov	r3, s16
 8012b98:	441f      	add	r7, r3
 8012b9a:	b2bf      	uxth	r7, r7
 8012b9c:	9609      	str	r6, [sp, #36]	; 0x24
  while (pos < len) {
 8012b9e:	9b04      	ldr	r3, [sp, #16]
 8012ba0:	429f      	cmp	r7, r3
 8012ba2:	f4ff af3a 	bcc.w	8012a1a <tcp_write+0x25e>
 8012ba6:	4657      	mov	r7, sl
 8012ba8:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 8012baa:	b14d      	cbz	r5, 8012bc0 <tcp_write+0x404>
    for (p = last_unsent->p; p; p = p->next) {
 8012bac:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012bb0:	f1bb 0f00 	cmp.w	fp, #0
 8012bb4:	d12f      	bne.n	8012c16 <tcp_write+0x45a>
    last_unsent->len += oversize_used;
 8012bb6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8012bba:	441d      	add	r5, r3
 8012bbc:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 8012bc0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012bc4:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if (concat_p != NULL) {
 8012bc8:	2f00      	cmp	r7, #0
 8012bca:	d03d      	beq.n	8012c48 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012bcc:	f1b8 0f00 	cmp.w	r8, #0
 8012bd0:	d106      	bne.n	8012be0 <tcp_write+0x424>
 8012bd2:	4b4c      	ldr	r3, [pc, #304]	; (8012d04 <tcp_write+0x548>)
 8012bd4:	4950      	ldr	r1, [pc, #320]	; (8012d18 <tcp_write+0x55c>)
 8012bd6:	484d      	ldr	r0, [pc, #308]	; (8012d0c <tcp_write+0x550>)
 8012bd8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012bdc:	f009 ffa4 	bl	801cb28 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8012be0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012be4:	4639      	mov	r1, r7
 8012be6:	f7fc fd43 	bl	800f670 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012bea:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8012bee:	893a      	ldrh	r2, [r7, #8]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 8012bf6:	f8c8 a000 	str.w	sl, [r8]
 8012bfa:	e04d      	b.n	8012c98 <tcp_write+0x4dc>
 8012bfc:	4683      	mov	fp, r0
 8012bfe:	e7c9      	b.n	8012b94 <tcp_write+0x3d8>
  u16_t extendlen = 0;
 8012c00:	46b9      	mov	r9, r7
 8012c02:	462f      	mov	r7, r5
 8012c04:	e6d5      	b.n	80129b2 <tcp_write+0x1f6>
 8012c06:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 8012c08:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012c0a:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 8012c0c:	46ba      	mov	sl, r7
 8012c0e:	e6d0      	b.n	80129b2 <tcp_write+0x1f6>
 8012c10:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 8012c12:	46b9      	mov	r9, r7
 8012c14:	e7c9      	b.n	8012baa <tcp_write+0x3ee>
      p->tot_len += oversize_used;
 8012c16:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8012c1a:	442b      	add	r3, r5
 8012c1c:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 8012c20:	f8db 3000 	ldr.w	r3, [fp]
 8012c24:	b96b      	cbnz	r3, 8012c42 <tcp_write+0x486>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012c26:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012c2a:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 8012c2e:	9907      	ldr	r1, [sp, #28]
 8012c30:	4418      	add	r0, r3
 8012c32:	462a      	mov	r2, r5
 8012c34:	f009 fb04 	bl	801c240 <memcpy>
        p->len += oversize_used;
 8012c38:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8012c3c:	442b      	add	r3, r5
 8012c3e:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012c42:	f8db b000 	ldr.w	fp, [fp]
 8012c46:	e7b3      	b.n	8012bb0 <tcp_write+0x3f4>
  } else if (extendlen > 0) {
 8012c48:	f1b9 0f00 	cmp.w	r9, #0
 8012c4c:	d01f      	beq.n	8012c8e <tcp_write+0x4d2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012c4e:	f1b8 0f00 	cmp.w	r8, #0
 8012c52:	d002      	beq.n	8012c5a <tcp_write+0x49e>
 8012c54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c58:	b933      	cbnz	r3, 8012c68 <tcp_write+0x4ac>
 8012c5a:	4b2a      	ldr	r3, [pc, #168]	; (8012d04 <tcp_write+0x548>)
 8012c5c:	492f      	ldr	r1, [pc, #188]	; (8012d1c <tcp_write+0x560>)
 8012c5e:	482b      	ldr	r0, [pc, #172]	; (8012d0c <tcp_write+0x550>)
 8012c60:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012c64:	f009 ff60 	bl	801cb28 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c6c:	891a      	ldrh	r2, [r3, #8]
 8012c6e:	6819      	ldr	r1, [r3, #0]
 8012c70:	444a      	add	r2, r9
 8012c72:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 8012c74:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c76:	b941      	cbnz	r1, 8012c8a <tcp_write+0x4ce>
    p->len += extendlen;
 8012c78:	895a      	ldrh	r2, [r3, #10]
 8012c7a:	444a      	add	r2, r9
 8012c7c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012c7e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8012c82:	4499      	add	r9, r3
 8012c84:	f8a8 9008 	strh.w	r9, [r8, #8]
 8012c88:	e7b5      	b.n	8012bf6 <tcp_write+0x43a>
      p->tot_len += extendlen;
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	e7ee      	b.n	8012c6c <tcp_write+0x4b0>
  if (last_unsent == NULL) {
 8012c8e:	f1b8 0f00 	cmp.w	r8, #0
 8012c92:	d1b0      	bne.n	8012bf6 <tcp_write+0x43a>
    pcb->unsent = queue;
 8012c94:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
  pcb->snd_lbb += len;
 8012c98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012c9c:	9a04      	ldr	r2, [sp, #16]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  pcb->snd_buf -= len;
 8012ca4:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8012ca8:	9b04      	ldr	r3, [sp, #16]
 8012caa:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 8012cac:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 8012cae:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
  pcb->snd_queuelen = queuelen;
 8012cb2:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 8012cb6:	b163      	cbz	r3, 8012cd2 <tcp_write+0x516>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012cb8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8012cbc:	b94b      	cbnz	r3, 8012cd2 <tcp_write+0x516>
 8012cbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012cc2:	b933      	cbnz	r3, 8012cd2 <tcp_write+0x516>
 8012cc4:	4b0f      	ldr	r3, [pc, #60]	; (8012d04 <tcp_write+0x548>)
 8012cc6:	4912      	ldr	r1, [pc, #72]	; (8012d10 <tcp_write+0x554>)
 8012cc8:	4810      	ldr	r0, [pc, #64]	; (8012d0c <tcp_write+0x550>)
 8012cca:	f240 3212 	movw	r2, #786	; 0x312
 8012cce:	f009 ff2b 	bl	801cb28 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012cd2:	b176      	cbz	r6, 8012cf2 <tcp_write+0x536>
 8012cd4:	68f0      	ldr	r0, [r6, #12]
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	f43f ad86 	beq.w	80127e8 <tcp_write+0x2c>
 8012cdc:	9b08      	ldr	r3, [sp, #32]
 8012cde:	f013 0402 	ands.w	r4, r3, #2
 8012ce2:	d106      	bne.n	8012cf2 <tcp_write+0x536>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012ce4:	8985      	ldrh	r5, [r0, #12]
 8012ce6:	2008      	movs	r0, #8
 8012ce8:	f7fb f9da 	bl	800e0a0 <lwip_htons>
 8012cec:	68f3      	ldr	r3, [r6, #12]
 8012cee:	4328      	orrs	r0, r5
 8012cf0:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8012cf2:	2000      	movs	r0, #0
 8012cf4:	e578      	b.n	80127e8 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012cf6:	f04f 0b00 	mov.w	fp, #0
 8012cfa:	e704      	b.n	8012b06 <tcp_write+0x34a>
    return ERR_CONN;
 8012cfc:	f06f 000a 	mvn.w	r0, #10
 8012d00:	e572      	b.n	80127e8 <tcp_write+0x2c>
 8012d02:	bf00      	nop
 8012d04:	0802e1f0 	.word	0x0802e1f0
 8012d08:	0802e54b 	.word	0x0802e54b
 8012d0c:	0802aecf 	.word	0x0802aecf
 8012d10:	0802e5d7 	.word	0x0802e5d7
 8012d14:	0802e559 	.word	0x0802e559
 8012d18:	0802e56a 	.word	0x0802e56a
 8012d1c:	0802e5a2 	.word	0x0802e5a2

08012d20 <tcp_split_unsent_seg>:
{
 8012d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012d26:	4606      	mov	r6, r0
 8012d28:	b930      	cbnz	r0, 8012d38 <tcp_split_unsent_seg+0x18>
 8012d2a:	4b5e      	ldr	r3, [pc, #376]	; (8012ea4 <tcp_split_unsent_seg+0x184>)
 8012d2c:	495e      	ldr	r1, [pc, #376]	; (8012ea8 <tcp_split_unsent_seg+0x188>)
 8012d2e:	485f      	ldr	r0, [pc, #380]	; (8012eac <tcp_split_unsent_seg+0x18c>)
 8012d30:	f240 324b 	movw	r2, #843	; 0x34b
 8012d34:	f009 fef8 	bl	801cb28 <iprintf>
  useg = pcb->unsent;
 8012d38:	f8d6 4094 	ldr.w	r4, [r6, #148]	; 0x94
  if (useg == NULL) {
 8012d3c:	b914      	cbnz	r4, 8012d44 <tcp_split_unsent_seg+0x24>
  return ERR_MEM;
 8012d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d42:	e009      	b.n	8012d58 <tcp_split_unsent_seg+0x38>
  if (split == 0) {
 8012d44:	b95d      	cbnz	r5, 8012d5e <tcp_split_unsent_seg+0x3e>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012d46:	4b57      	ldr	r3, [pc, #348]	; (8012ea4 <tcp_split_unsent_seg+0x184>)
 8012d48:	4959      	ldr	r1, [pc, #356]	; (8012eb0 <tcp_split_unsent_seg+0x190>)
 8012d4a:	4858      	ldr	r0, [pc, #352]	; (8012eac <tcp_split_unsent_seg+0x18c>)
 8012d4c:	f240 3253 	movw	r2, #851	; 0x353
 8012d50:	f009 feea 	bl	801cb28 <iprintf>
    return ERR_VAL;
 8012d54:	f06f 0005 	mvn.w	r0, #5
}
 8012d58:	b003      	add	sp, #12
 8012d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 8012d5e:	8923      	ldrh	r3, [r4, #8]
 8012d60:	42ab      	cmp	r3, r5
 8012d62:	d801      	bhi.n	8012d68 <tcp_split_unsent_seg+0x48>
    return ERR_OK;
 8012d64:	2000      	movs	r0, #0
 8012d66:	e7f7      	b.n	8012d58 <tcp_split_unsent_seg+0x38>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012d68:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
 8012d6c:	42ab      	cmp	r3, r5
 8012d6e:	d206      	bcs.n	8012d7e <tcp_split_unsent_seg+0x5e>
 8012d70:	4b4c      	ldr	r3, [pc, #304]	; (8012ea4 <tcp_split_unsent_seg+0x184>)
 8012d72:	4950      	ldr	r1, [pc, #320]	; (8012eb4 <tcp_split_unsent_seg+0x194>)
 8012d74:	484d      	ldr	r0, [pc, #308]	; (8012eac <tcp_split_unsent_seg+0x18c>)
 8012d76:	f240 325b 	movw	r2, #859	; 0x35b
 8012d7a:	f009 fed5 	bl	801cb28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012d7e:	8923      	ldrh	r3, [r4, #8]
 8012d80:	b933      	cbnz	r3, 8012d90 <tcp_split_unsent_seg+0x70>
 8012d82:	4b48      	ldr	r3, [pc, #288]	; (8012ea4 <tcp_split_unsent_seg+0x184>)
 8012d84:	494c      	ldr	r1, [pc, #304]	; (8012eb8 <tcp_split_unsent_seg+0x198>)
 8012d86:	4849      	ldr	r0, [pc, #292]	; (8012eac <tcp_split_unsent_seg+0x18c>)
 8012d88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012d8c:	f009 fecc 	bl	801cb28 <iprintf>
  optflags = useg->flags;
 8012d90:	f894 b00a 	ldrb.w	fp, [r4, #10]
  remainder = useg->len - split;
 8012d94:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012d98:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 8012d9c:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012da0:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 8012da4:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012da8:	fa17 f181 	uxtah	r1, r7, r1
 8012dac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012db0:	b289      	uxth	r1, r1
 8012db2:	204a      	movs	r0, #74	; 0x4a
 8012db4:	f7fc fb4c 	bl	800f450 <pbuf_alloc>
  if (p == NULL) {
 8012db8:	4681      	mov	r9, r0
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d0bf      	beq.n	8012d3e <tcp_split_unsent_seg+0x1e>
  offset = useg->p->tot_len - useg->len + split;
 8012dbe:	6860      	ldr	r0, [r4, #4]
 8012dc0:	8922      	ldrh	r2, [r4, #8]
 8012dc2:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012dc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 8012dc8:	1a9b      	subs	r3, r3, r2
 8012dca:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	4642      	mov	r2, r8
 8012dd0:	4439      	add	r1, r7
 8012dd2:	f7fc fd13 	bl	800f7fc <pbuf_copy_partial>
 8012dd6:	4540      	cmp	r0, r8
 8012dd8:	d15f      	bne.n	8012e9a <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012dda:	68e3      	ldr	r3, [r4, #12]
 8012ddc:	8998      	ldrh	r0, [r3, #12]
 8012dde:	f7fb f95f 	bl	800e0a0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8012de2:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012de6:	b2c7      	uxtb	r7, r0
 8012de8:	bf0e      	itee	eq
 8012dea:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8012dee:	f007 0737 	andne.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8012df2:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 8012df6:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012df8:	68e3      	ldr	r3, [r4, #12]
 8012dfa:	6858      	ldr	r0, [r3, #4]
    remainder_flags |= TCP_FIN;
 8012dfc:	bf44      	itt	mi
 8012dfe:	f048 0801 	orrmi.w	r8, r8, #1
    split_flags &= ~TCP_FIN;
 8012e02:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012e06:	f7fb f94e 	bl	800e0a6 <lwip_htonl>
 8012e0a:	4642      	mov	r2, r8
 8012e0c:	182b      	adds	r3, r5, r0
 8012e0e:	f8cd b000 	str.w	fp, [sp]
 8012e12:	4649      	mov	r1, r9
 8012e14:	4630      	mov	r0, r6
 8012e16:	f7ff fb8f 	bl	8012538 <tcp_create_segment>
  if (seg == NULL) {
 8012e1a:	4680      	mov	r8, r0
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d03c      	beq.n	8012e9a <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012e20:	6860      	ldr	r0, [r4, #4]
 8012e22:	f7fc fc01 	bl	800f628 <pbuf_clen>
 8012e26:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 8012e2a:	1a18      	subs	r0, r3, r0
 8012e2c:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012e30:	6860      	ldr	r0, [r4, #4]
 8012e32:	8901      	ldrh	r1, [r0, #8]
 8012e34:	eba5 050a 	sub.w	r5, r5, sl
 8012e38:	fa11 f185 	uxtah	r1, r1, r5
 8012e3c:	b289      	uxth	r1, r1
 8012e3e:	f7fc fb83 	bl	800f548 <pbuf_realloc>
  useg->len -= remainder;
 8012e42:	8923      	ldrh	r3, [r4, #8]
 8012e44:	fa1f f985 	uxth.w	r9, r5
 8012e48:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012e4a:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 8012e4c:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012e50:	4638      	mov	r0, r7
 8012e52:	899d      	ldrh	r5, [r3, #12]
 8012e54:	f7fb f924 	bl	800e0a0 <lwip_htons>
 8012e58:	68e3      	ldr	r3, [r4, #12]
 8012e5a:	4328      	orrs	r0, r5
 8012e5c:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012e5e:	6860      	ldr	r0, [r4, #4]
 8012e60:	f7fc fbe2 	bl	800f628 <pbuf_clen>
 8012e64:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 8012e68:	4418      	add	r0, r3
 8012e6a:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012e72:	f7fc fbd9 	bl	800f628 <pbuf_clen>
 8012e76:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 8012e7a:	4418      	add	r0, r3
  seg->next = useg->next;
 8012e7c:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e7e:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
  seg->next = useg->next;
 8012e82:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 8012e86:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 8012e8a:	f8d8 0000 	ldr.w	r0, [r8]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	f47f af68 	bne.w	8012d64 <tcp_split_unsent_seg+0x44>
    pcb->unsent_oversize = 0;
 8012e94:	f8a6 0090 	strh.w	r0, [r6, #144]	; 0x90
 8012e98:	e75e      	b.n	8012d58 <tcp_split_unsent_seg+0x38>
    pbuf_free(p);
 8012e9a:	4648      	mov	r0, r9
 8012e9c:	f7fc fa70 	bl	800f380 <pbuf_free>
 8012ea0:	e74d      	b.n	8012d3e <tcp_split_unsent_seg+0x1e>
 8012ea2:	bf00      	nop
 8012ea4:	0802e1f0 	.word	0x0802e1f0
 8012ea8:	0802e5f5 	.word	0x0802e5f5
 8012eac:	0802aecf 	.word	0x0802aecf
 8012eb0:	0802e617 	.word	0x0802e617
 8012eb4:	0802e639 	.word	0x0802e639
 8012eb8:	0802e646 	.word	0x0802e646

08012ebc <tcp_enqueue_flags>:
{
 8012ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012ec0:	f011 0803 	ands.w	r8, r1, #3
{
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012ec8:	d106      	bne.n	8012ed8 <tcp_enqueue_flags+0x1c>
 8012eca:	4b44      	ldr	r3, [pc, #272]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012ecc:	4944      	ldr	r1, [pc, #272]	; (8012fe0 <tcp_enqueue_flags+0x124>)
 8012ece:	4845      	ldr	r0, [pc, #276]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012ed0:	f240 4211 	movw	r2, #1041	; 0x411
 8012ed4:	f009 fe28 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012ed8:	b934      	cbnz	r4, 8012ee8 <tcp_enqueue_flags+0x2c>
 8012eda:	4b40      	ldr	r3, [pc, #256]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012edc:	4942      	ldr	r1, [pc, #264]	; (8012fe8 <tcp_enqueue_flags+0x12c>)
 8012ede:	4841      	ldr	r0, [pc, #260]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012ee0:	f240 4213 	movw	r2, #1043	; 0x413
 8012ee4:	f009 fe20 	bl	801cb28 <iprintf>
  if (flags & TCP_SYN) {
 8012ee8:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012eec:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8012ef0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ef4:	4649      	mov	r1, r9
 8012ef6:	204a      	movs	r0, #74	; 0x4a
 8012ef8:	f7fc faaa 	bl	800f450 <pbuf_alloc>
 8012efc:	4605      	mov	r5, r0
 8012efe:	b950      	cbnz	r0, 8012f16 <tcp_enqueue_flags+0x5a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f00:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f08:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 8012f0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012f10:	b003      	add	sp, #12
 8012f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012f16:	8943      	ldrh	r3, [r0, #10]
 8012f18:	454b      	cmp	r3, r9
 8012f1a:	d206      	bcs.n	8012f2a <tcp_enqueue_flags+0x6e>
 8012f1c:	4b2f      	ldr	r3, [pc, #188]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012f1e:	4933      	ldr	r1, [pc, #204]	; (8012fec <tcp_enqueue_flags+0x130>)
 8012f20:	4830      	ldr	r0, [pc, #192]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012f22:	f240 4239 	movw	r2, #1081	; 0x439
 8012f26:	f009 fdff 	bl	801cb28 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012f2a:	9700      	str	r7, [sp, #0]
 8012f2c:	4629      	mov	r1, r5
 8012f2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012f32:	4632      	mov	r2, r6
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7ff faff 	bl	8012538 <tcp_create_segment>
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d0df      	beq.n	8012f00 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012f40:	68c3      	ldr	r3, [r0, #12]
 8012f42:	079a      	lsls	r2, r3, #30
 8012f44:	d006      	beq.n	8012f54 <tcp_enqueue_flags+0x98>
 8012f46:	4b25      	ldr	r3, [pc, #148]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012f48:	4929      	ldr	r1, [pc, #164]	; (8012ff0 <tcp_enqueue_flags+0x134>)
 8012f4a:	4826      	ldr	r0, [pc, #152]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012f4c:	f240 4242 	movw	r2, #1090	; 0x442
 8012f50:	f009 fdea 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012f54:	892b      	ldrh	r3, [r5, #8]
 8012f56:	b133      	cbz	r3, 8012f66 <tcp_enqueue_flags+0xaa>
 8012f58:	4b20      	ldr	r3, [pc, #128]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012f5a:	4926      	ldr	r1, [pc, #152]	; (8012ff4 <tcp_enqueue_flags+0x138>)
 8012f5c:	4821      	ldr	r0, [pc, #132]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012f5e:	f240 4243 	movw	r2, #1091	; 0x443
 8012f62:	f009 fde1 	bl	801cb28 <iprintf>
  if (pcb->unsent == NULL) {
 8012f66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012f6a:	bb83      	cbnz	r3, 8012fce <tcp_enqueue_flags+0x112>
    pcb->unsent = seg;
 8012f6c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  pcb->unsent_oversize = 0;
 8012f70:	2300      	movs	r3, #0
 8012f72:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012f76:	f1b8 0f00 	cmp.w	r8, #0
 8012f7a:	d004      	beq.n	8012f86 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8012f7c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012f80:	3301      	adds	r3, #1
 8012f82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (flags & TCP_FIN) {
 8012f86:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 8012f88:	bf48      	it	mi
 8012f8a:	f8b4 3042 	ldrhmi.w	r3, [r4, #66]	; 0x42
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f8e:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 8012f90:	bf44      	itt	mi
 8012f92:	f043 0320 	orrmi.w	r3, r3, #32
 8012f96:	f8a4 3042 	strhmi.w	r3, [r4, #66]	; 0x42
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f9a:	f7fc fb45 	bl	800f628 <pbuf_clen>
 8012f9e:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8012fa2:	4418      	add	r0, r3
 8012fa4:	b280      	uxth	r0, r0
 8012fa6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d0b0      	beq.n	8012f10 <tcp_enqueue_flags+0x54>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012fae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8012fb2:	b950      	cbnz	r0, 8012fca <tcp_enqueue_flags+0x10e>
 8012fb4:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 8012fb8:	2c00      	cmp	r4, #0
 8012fba:	d1a9      	bne.n	8012f10 <tcp_enqueue_flags+0x54>
 8012fbc:	4b07      	ldr	r3, [pc, #28]	; (8012fdc <tcp_enqueue_flags+0x120>)
 8012fbe:	490e      	ldr	r1, [pc, #56]	; (8012ff8 <tcp_enqueue_flags+0x13c>)
 8012fc0:	4808      	ldr	r0, [pc, #32]	; (8012fe4 <tcp_enqueue_flags+0x128>)
 8012fc2:	f240 4265 	movw	r2, #1125	; 0x465
 8012fc6:	f009 fdaf 	bl	801cb28 <iprintf>
  return ERR_OK;
 8012fca:	2000      	movs	r0, #0
 8012fcc:	e7a0      	b.n	8012f10 <tcp_enqueue_flags+0x54>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012fce:	461a      	mov	r2, r3
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1fb      	bne.n	8012fce <tcp_enqueue_flags+0x112>
    useg->next = seg;
 8012fd6:	6015      	str	r5, [r2, #0]
 8012fd8:	e7ca      	b.n	8012f70 <tcp_enqueue_flags+0xb4>
 8012fda:	bf00      	nop
 8012fdc:	0802e1f0 	.word	0x0802e1f0
 8012fe0:	0802e654 	.word	0x0802e654
 8012fe4:	0802aecf 	.word	0x0802aecf
 8012fe8:	0802e6a9 	.word	0x0802e6a9
 8012fec:	0802e6c8 	.word	0x0802e6c8
 8012ff0:	0802e701 	.word	0x0802e701
 8012ff4:	0802e719 	.word	0x0802e719
 8012ff8:	0802e743 	.word	0x0802e743

08012ffc <tcp_send_fin>:
{
 8012ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012ffe:	4604      	mov	r4, r0
 8013000:	b930      	cbnz	r0, 8013010 <tcp_send_fin+0x14>
 8013002:	4b15      	ldr	r3, [pc, #84]	; (8013058 <tcp_send_fin+0x5c>)
 8013004:	4915      	ldr	r1, [pc, #84]	; (801305c <tcp_send_fin+0x60>)
 8013006:	4816      	ldr	r0, [pc, #88]	; (8013060 <tcp_send_fin+0x64>)
 8013008:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801300c:	f009 fd8c 	bl	801cb28 <iprintf>
  if (pcb->unsent != NULL) {
 8013010:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8013014:	b14d      	cbz	r5, 801302a <tcp_send_fin+0x2e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013016:	462f      	mov	r7, r5
 8013018:	682d      	ldr	r5, [r5, #0]
 801301a:	2d00      	cmp	r5, #0
 801301c:	d1fb      	bne.n	8013016 <tcp_send_fin+0x1a>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	8998      	ldrh	r0, [r3, #12]
 8013022:	f7fb f83d 	bl	800e0a0 <lwip_htons>
 8013026:	0743      	lsls	r3, r0, #29
 8013028:	d005      	beq.n	8013036 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801302a:	4620      	mov	r0, r4
 801302c:	2101      	movs	r1, #1
}
 801302e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013032:	f7ff bf43 	b.w	8012ebc <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2001      	movs	r0, #1
 801303a:	899e      	ldrh	r6, [r3, #12]
 801303c:	f7fb f830 	bl	800e0a0 <lwip_htons>
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	4330      	orrs	r0, r6
 8013044:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013046:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801304a:	f043 0320 	orr.w	r3, r3, #32
 801304e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 8013052:	4628      	mov	r0, r5
 8013054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013056:	bf00      	nop
 8013058:	0802e1f0 	.word	0x0802e1f0
 801305c:	0802e76b 	.word	0x0802e76b
 8013060:	0802aecf 	.word	0x0802aecf

08013064 <tcp_rexmit_rto_prepare>:
{
 8013064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013068:	4604      	mov	r4, r0
 801306a:	b930      	cbnz	r0, 801307a <tcp_rexmit_rto_prepare+0x16>
 801306c:	4b1e      	ldr	r3, [pc, #120]	; (80130e8 <tcp_rexmit_rto_prepare+0x84>)
 801306e:	491f      	ldr	r1, [pc, #124]	; (80130ec <tcp_rexmit_rto_prepare+0x88>)
 8013070:	481f      	ldr	r0, [pc, #124]	; (80130f0 <tcp_rexmit_rto_prepare+0x8c>)
 8013072:	f240 6263 	movw	r2, #1635	; 0x663
 8013076:	f009 fd57 	bl	801cb28 <iprintf>
  if (pcb->unacked == NULL) {
 801307a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 801307e:	b945      	cbnz	r5, 8013092 <tcp_rexmit_rto_prepare+0x2e>
    return ERR_VAL;
 8013080:	f06f 0005 	mvn.w	r0, #5
}
 8013084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 8013088:	f7ff f9f2 	bl	8012470 <tcp_output_segment_busy>
 801308c:	2800      	cmp	r0, #0
 801308e:	d1f7      	bne.n	8013080 <tcp_rexmit_rto_prepare+0x1c>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013090:	682d      	ldr	r5, [r5, #0]
 8013092:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 8013094:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013096:	2b00      	cmp	r3, #0
 8013098:	d1f6      	bne.n	8013088 <tcp_rexmit_rto_prepare+0x24>
  if (tcp_output_segment_busy(seg)) {
 801309a:	f7ff f9e9 	bl	8012470 <tcp_output_segment_busy>
 801309e:	4606      	mov	r6, r0
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d1ed      	bne.n	8013080 <tcp_rexmit_rto_prepare+0x1c>
  seg->next = pcb->unsent;
 80130a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80130a8:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 80130aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  pcb->unacked = NULL;
 80130ae:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
  tcp_set_flags(pcb, TF_RTO);
 80130b2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80130b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130ba:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130be:	68eb      	ldr	r3, [r5, #12]
 80130c0:	6858      	ldr	r0, [r3, #4]
 80130c2:	f7fa fff0 	bl	800e0a6 <lwip_htonl>
 80130c6:	68eb      	ldr	r3, [r5, #12]
 80130c8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80130cc:	4607      	mov	r7, r0
 80130ce:	8998      	ldrh	r0, [r3, #12]
 80130d0:	f7fa ffe6 	bl	800e0a0 <lwip_htons>
 80130d4:	f010 0303 	ands.w	r3, r0, #3
 80130d8:	bf18      	it	ne
 80130da:	2301      	movne	r3, #1
 80130dc:	4447      	add	r7, r8
 80130de:	443b      	add	r3, r7
 80130e0:	6763      	str	r3, [r4, #116]	; 0x74
  pcb->rttest = 0;
 80130e2:	65e6      	str	r6, [r4, #92]	; 0x5c
  return ERR_OK;
 80130e4:	4630      	mov	r0, r6
 80130e6:	e7cd      	b.n	8013084 <tcp_rexmit_rto_prepare+0x20>
 80130e8:	0802e1f0 	.word	0x0802e1f0
 80130ec:	0802e785 	.word	0x0802e785
 80130f0:	0802aecf 	.word	0x0802aecf

080130f4 <tcp_rexmit>:
{
 80130f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80130f6:	4604      	mov	r4, r0
 80130f8:	b930      	cbnz	r0, 8013108 <tcp_rexmit+0x14>
 80130fa:	4b1d      	ldr	r3, [pc, #116]	; (8013170 <tcp_rexmit+0x7c>)
 80130fc:	491d      	ldr	r1, [pc, #116]	; (8013174 <tcp_rexmit+0x80>)
 80130fe:	481e      	ldr	r0, [pc, #120]	; (8013178 <tcp_rexmit+0x84>)
 8013100:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013104:	f009 fd10 	bl	801cb28 <iprintf>
  if (pcb->unacked == NULL) {
 8013108:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 801310c:	b915      	cbnz	r5, 8013114 <tcp_rexmit+0x20>
    return ERR_VAL;
 801310e:	f06f 0005 	mvn.w	r0, #5
}
 8013112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 8013114:	4628      	mov	r0, r5
 8013116:	f7ff f9ab 	bl	8012470 <tcp_output_segment_busy>
 801311a:	2800      	cmp	r0, #0
 801311c:	d1f7      	bne.n	801310e <tcp_rexmit+0x1a>
  pcb->unacked = seg->next;
 801311e:	682b      	ldr	r3, [r5, #0]
 8013120:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  cur_seg = &(pcb->unsent);
 8013124:	f104 0694 	add.w	r6, r4, #148	; 0x94
  while (*cur_seg &&
 8013128:	6833      	ldr	r3, [r6, #0]
 801312a:	b993      	cbnz	r3, 8013152 <tcp_rexmit+0x5e>
  seg->next = *cur_seg;
 801312c:	6833      	ldr	r3, [r6, #0]
 801312e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8013130:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 8013132:	682b      	ldr	r3, [r5, #0]
 8013134:	b90b      	cbnz	r3, 801313a <tcp_rexmit+0x46>
    pcb->unsent_oversize = 0;
 8013136:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if (pcb->nrtx < 0xFF) {
 801313a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 801313e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8013140:	bf18      	it	ne
 8013142:	3301      	addne	r3, #1
  pcb->rttest = 0;
 8013144:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
 8013148:	bf18      	it	ne
 801314a:	f884 306a 	strbne.w	r3, [r4, #106]	; 0x6a
  pcb->rttest = 0;
 801314e:	65e0      	str	r0, [r4, #92]	; 0x5c
  return ERR_OK;
 8013150:	e7df      	b.n	8013112 <tcp_rexmit+0x1e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	6858      	ldr	r0, [r3, #4]
 8013156:	f7fa ffa6 	bl	800e0a6 <lwip_htonl>
 801315a:	68eb      	ldr	r3, [r5, #12]
 801315c:	4607      	mov	r7, r0
 801315e:	6858      	ldr	r0, [r3, #4]
 8013160:	f7fa ffa1 	bl	800e0a6 <lwip_htonl>
 8013164:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8013166:	2800      	cmp	r0, #0
 8013168:	dae0      	bge.n	801312c <tcp_rexmit+0x38>
    cur_seg = &((*cur_seg)->next );
 801316a:	6836      	ldr	r6, [r6, #0]
 801316c:	e7dc      	b.n	8013128 <tcp_rexmit+0x34>
 801316e:	bf00      	nop
 8013170:	0802e1f0 	.word	0x0802e1f0
 8013174:	0802e7a9 	.word	0x0802e7a9
 8013178:	0802aecf 	.word	0x0802aecf

0801317c <tcp_rexmit_fast>:
{
 801317c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801317e:	4604      	mov	r4, r0
 8013180:	b930      	cbnz	r0, 8013190 <tcp_rexmit_fast+0x14>
 8013182:	4b18      	ldr	r3, [pc, #96]	; (80131e4 <tcp_rexmit_fast+0x68>)
 8013184:	4918      	ldr	r1, [pc, #96]	; (80131e8 <tcp_rexmit_fast+0x6c>)
 8013186:	4819      	ldr	r0, [pc, #100]	; (80131ec <tcp_rexmit_fast+0x70>)
 8013188:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801318c:	f009 fccc 	bl	801cb28 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013190:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8013194:	b32b      	cbz	r3, 80131e2 <tcp_rexmit_fast+0x66>
 8013196:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801319a:	075b      	lsls	r3, r3, #29
 801319c:	d421      	bmi.n	80131e2 <tcp_rexmit_fast+0x66>
    if (tcp_rexmit(pcb) == ERR_OK) {
 801319e:	4620      	mov	r0, r4
 80131a0:	f7ff ffa8 	bl	80130f4 <tcp_rexmit>
 80131a4:	b9e8      	cbnz	r0, 80131e2 <tcp_rexmit_fast+0x66>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80131a6:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 80131aa:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
      pcb->rtime = 0;
 80131ae:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80131b2:	4299      	cmp	r1, r3
 80131b4:	bf28      	it	cs
 80131b6:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80131b8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80131bc:	005d      	lsls	r5, r3, #1
        pcb->ssthresh = 2 * pcb->mss;
 80131be:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80131c2:	ea4f 0261 	mov.w	r2, r1, asr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131c6:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 80131c8:	bf88      	it	hi
 80131ca:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131cc:	4413      	add	r3, r2
 80131ce:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
      tcp_set_flags(pcb, TF_INFR);
 80131d2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
        pcb->ssthresh = 2 * pcb->mss;
 80131d6:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
      tcp_set_flags(pcb, TF_INFR);
 80131da:	f043 0304 	orr.w	r3, r3, #4
 80131de:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	0802e1f0 	.word	0x0802e1f0
 80131e8:	0802e7c1 	.word	0x0802e7c1
 80131ec:	0802aecf 	.word	0x0802aecf

080131f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80131f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80131f8:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80131fc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8013200:	4606      	mov	r6, r0
 8013202:	460f      	mov	r7, r1
 8013204:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013206:	461d      	mov	r5, r3
 8013208:	b933      	cbnz	r3, 8013218 <tcp_rst+0x28>
 801320a:	4b18      	ldr	r3, [pc, #96]	; (801326c <tcp_rst+0x7c>)
 801320c:	4918      	ldr	r1, [pc, #96]	; (8013270 <tcp_rst+0x80>)
 801320e:	4819      	ldr	r0, [pc, #100]	; (8013274 <tcp_rst+0x84>)
 8013210:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013214:	f009 fc88 	bl	801cb28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013218:	f1b8 0f00 	cmp.w	r8, #0
 801321c:	d106      	bne.n	801322c <tcp_rst+0x3c>
 801321e:	4b13      	ldr	r3, [pc, #76]	; (801326c <tcp_rst+0x7c>)
 8013220:	4915      	ldr	r1, [pc, #84]	; (8013278 <tcp_rst+0x88>)
 8013222:	4814      	ldr	r0, [pc, #80]	; (8013274 <tcp_rst+0x84>)
 8013224:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013228:	f009 fc7e 	bl	801cb28 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801322c:	4638      	mov	r0, r7
 801322e:	f7fa ff3a 	bl	800e0a6 <lwip_htonl>
 8013232:	2314      	movs	r3, #20
 8013234:	f646 010b 	movw	r1, #26635	; 0x680b
 8013238:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801323c:	4602      	mov	r2, r0
 801323e:	f8cd a000 	str.w	sl, [sp]
 8013242:	4620      	mov	r0, r4
 8013244:	464b      	mov	r3, r9
 8013246:	2100      	movs	r1, #0
 8013248:	f7ff fa3e 	bl	80126c8 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801324c:	4604      	mov	r4, r0
 801324e:	b150      	cbz	r0, 8013266 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013250:	f7ff faa4 	bl	801279c <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013254:	4643      	mov	r3, r8
 8013256:	462a      	mov	r2, r5
 8013258:	4621      	mov	r1, r4
 801325a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801325c:	b004      	add	sp, #16
 801325e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013262:	f7ff b9ef 	b.w	8012644 <tcp_output_control_segment>
}
 8013266:	b004      	add	sp, #16
 8013268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801326c:	0802e1f0 	.word	0x0802e1f0
 8013270:	0802e7de 	.word	0x0802e7de
 8013274:	0802aecf 	.word	0x0802aecf
 8013278:	0802e7f8 	.word	0x0802e7f8

0801327c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801327c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801327e:	4604      	mov	r4, r0
 8013280:	b930      	cbnz	r0, 8013290 <tcp_send_empty_ack+0x14>
 8013282:	4b17      	ldr	r3, [pc, #92]	; (80132e0 <tcp_send_empty_ack+0x64>)
 8013284:	4917      	ldr	r1, [pc, #92]	; (80132e4 <tcp_send_empty_ack+0x68>)
 8013286:	4818      	ldr	r0, [pc, #96]	; (80132e8 <tcp_send_empty_ack+0x6c>)
 8013288:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801328c:	f009 fc4c 	bl	801cb28 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013290:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8013292:	f7fa ff08 	bl	800e0a6 <lwip_htonl>
 8013296:	2100      	movs	r1, #0
 8013298:	4602      	mov	r2, r0
 801329a:	4620      	mov	r0, r4
 801329c:	f7ff fa56 	bl	801274c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80132a0:	4605      	mov	r5, r0
 80132a2:	b940      	cbnz	r0, 80132b6 <tcp_send_empty_ack+0x3a>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132a4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80132a8:	f043 0303 	orr.w	r3, r3, #3
 80132ac:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80132b0:	f06f 0001 	mvn.w	r0, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80132b4:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80132b6:	f7ff fa71 	bl	801279c <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132ba:	f104 0318 	add.w	r3, r4, #24
 80132be:	4622      	mov	r2, r4
 80132c0:	4629      	mov	r1, r5
 80132c2:	4620      	mov	r0, r4
 80132c4:	f7ff f9be 	bl	8012644 <tcp_output_control_segment>
  if (err != ERR_OK) {
 80132c8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80132cc:	b120      	cbz	r0, 80132d8 <tcp_send_empty_ack+0x5c>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132ce:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132d2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 80132d6:	e7ed      	b.n	80132b4 <tcp_send_empty_ack+0x38>
 80132d8:	f023 0303 	bic.w	r3, r3, #3
 80132dc:	e7f9      	b.n	80132d2 <tcp_send_empty_ack+0x56>
 80132de:	bf00      	nop
 80132e0:	0802e1f0 	.word	0x0802e1f0
 80132e4:	0802e813 	.word	0x0802e813
 80132e8:	0802aecf 	.word	0x0802aecf

080132ec <tcp_output>:
{
 80132ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80132f0:	4604      	mov	r4, r0
{
 80132f2:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80132f4:	b930      	cbnz	r0, 8013304 <tcp_output+0x18>
 80132f6:	4bb4      	ldr	r3, [pc, #720]	; (80135c8 <tcp_output+0x2dc>)
 80132f8:	49b4      	ldr	r1, [pc, #720]	; (80135cc <tcp_output+0x2e0>)
 80132fa:	48b5      	ldr	r0, [pc, #724]	; (80135d0 <tcp_output+0x2e4>)
 80132fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013300:	f009 fc12 	bl	801cb28 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013304:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8013308:	2b01      	cmp	r3, #1
 801330a:	d106      	bne.n	801331a <tcp_output+0x2e>
 801330c:	4bae      	ldr	r3, [pc, #696]	; (80135c8 <tcp_output+0x2dc>)
 801330e:	49b1      	ldr	r1, [pc, #708]	; (80135d4 <tcp_output+0x2e8>)
 8013310:	48af      	ldr	r0, [pc, #700]	; (80135d0 <tcp_output+0x2e4>)
 8013312:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013316:	f009 fc07 	bl	801cb28 <iprintf>
  if (tcp_input_pcb == pcb) {
 801331a:	4baf      	ldr	r3, [pc, #700]	; (80135d8 <tcp_output+0x2ec>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	42a3      	cmp	r3, r4
 8013320:	f000 81c2 	beq.w	80136a8 <tcp_output+0x3bc>
  seg = pcb->unsent;
 8013324:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 8013328:	b955      	cbnz	r5, 8013340 <tcp_output+0x54>
    if (pcb->flags & TF_ACK_NOW) {
 801332a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801332e:	0798      	lsls	r0, r3, #30
 8013330:	f140 81b4 	bpl.w	801369c <tcp_output+0x3b0>
      return tcp_send_empty_ack(pcb);
 8013334:	4620      	mov	r0, r4
}
 8013336:	b007      	add	sp, #28
 8013338:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801333c:	f7ff bf9e 	b.w	801327c <tcp_send_empty_ack>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013340:	f104 0818 	add.w	r8, r4, #24
 8013344:	4642      	mov	r2, r8
 8013346:	4621      	mov	r1, r4
 8013348:	4620      	mov	r0, r4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801334a:	f8b4 9070 	ldrh.w	r9, [r4, #112]	; 0x70
 801334e:	f8b4 6088 	ldrh.w	r6, [r4, #136]	; 0x88
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013352:	f7ff f963 	bl	801261c <tcp_route>
  if (netif == NULL) {
 8013356:	4607      	mov	r7, r0
 8013358:	b920      	cbnz	r0, 8013364 <tcp_output+0x78>
    return ERR_RTE;
 801335a:	f06f 0003 	mvn.w	r0, #3
}
 801335e:	b007      	add	sp, #28
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (ip_addr_isany(&pcb->local_ip)) {
 8013364:	7d23      	ldrb	r3, [r4, #20]
 8013366:	6822      	ldr	r2, [r4, #0]
 8013368:	2b06      	cmp	r3, #6
 801336a:	d143      	bne.n	80133f4 <tcp_output+0x108>
 801336c:	b942      	cbnz	r2, 8013380 <tcp_output+0x94>
 801336e:	6863      	ldr	r3, [r4, #4]
 8013370:	b933      	cbnz	r3, 8013380 <tcp_output+0x94>
 8013372:	68a2      	ldr	r2, [r4, #8]
 8013374:	b92a      	cbnz	r2, 8013382 <tcp_output+0x96>
 8013376:	68e3      	ldr	r3, [r4, #12]
 8013378:	fab3 f383 	clz	r3, r3
 801337c:	095b      	lsrs	r3, r3, #5
 801337e:	e000      	b.n	8013382 <tcp_output+0x96>
 8013380:	2300      	movs	r3, #0
 8013382:	b1bb      	cbz	r3, 80133b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013384:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013388:	2b06      	cmp	r3, #6
 801338a:	d136      	bne.n	80133fa <tcp_output+0x10e>
 801338c:	4641      	mov	r1, r8
 801338e:	4638      	mov	r0, r7
 8013390:	f7f8 f91c 	bl	800b5cc <ip6_select_source_address>
    if (local_ip == NULL) {
 8013394:	2800      	cmp	r0, #0
 8013396:	d0e0      	beq.n	801335a <tcp_output+0x6e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013398:	7d03      	ldrb	r3, [r0, #20]
 801339a:	7523      	strb	r3, [r4, #20]
 801339c:	2b06      	cmp	r3, #6
 801339e:	6803      	ldr	r3, [r0, #0]
 80133a0:	6023      	str	r3, [r4, #0]
 80133a2:	d12c      	bne.n	80133fe <tcp_output+0x112>
 80133a4:	6843      	ldr	r3, [r0, #4]
 80133a6:	6063      	str	r3, [r4, #4]
 80133a8:	6883      	ldr	r3, [r0, #8]
 80133aa:	60a3      	str	r3, [r4, #8]
 80133ac:	68c3      	ldr	r3, [r0, #12]
 80133ae:	60e3      	str	r3, [r4, #12]
 80133b0:	7c03      	ldrb	r3, [r0, #16]
 80133b2:	7423      	strb	r3, [r4, #16]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80133b4:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80133b6:	45b1      	cmp	r9, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80133b8:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80133ba:	bf28      	it	cs
 80133bc:	46b1      	movcs	r9, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80133be:	f7fa fe72 	bl	800e0a6 <lwip_htonl>
 80133c2:	892b      	ldrh	r3, [r5, #8]
 80133c4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80133c6:	1a9b      	subs	r3, r3, r2
 80133c8:	4418      	add	r0, r3
 80133ca:	4548      	cmp	r0, r9
 80133cc:	d91c      	bls.n	8013408 <tcp_output+0x11c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80133ce:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 80133d2:	454b      	cmp	r3, r9
 80133d4:	d1a9      	bne.n	801332a <tcp_output+0x3e>
 80133d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1a5      	bne.n	801332a <tcp_output+0x3e>
 80133de:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1a1      	bne.n	801332a <tcp_output+0x3e>
      pcb->persist_cnt = 0;
 80133e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133ea:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
      pcb->persist_probe = 0;
 80133ee:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 80133f2:	e79a      	b.n	801332a <tcp_output+0x3e>
  if (ip_addr_isany(&pcb->local_ip)) {
 80133f4:	fab2 f382 	clz	r3, r2
 80133f8:	e7c0      	b.n	801337c <tcp_output+0x90>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80133fa:	1d38      	adds	r0, r7, #4
    if (local_ip == NULL) {
 80133fc:	e7cc      	b.n	8013398 <tcp_output+0xac>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80133fe:	2300      	movs	r3, #0
 8013400:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8013404:	6063      	str	r3, [r4, #4]
 8013406:	e7d4      	b.n	80133b2 <tcp_output+0xc6>
  useg = pcb->unacked;
 8013408:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  pcb->persist_backoff = 0;
 801340c:	2300      	movs	r3, #0
 801340e:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
  if (useg != NULL) {
 8013412:	b126      	cbz	r6, 801341e <tcp_output+0x132>
    for (; useg->next != NULL; useg = useg->next);
 8013414:	4633      	mov	r3, r6
 8013416:	6836      	ldr	r6, [r6, #0]
 8013418:	2e00      	cmp	r6, #0
 801341a:	d1fb      	bne.n	8013414 <tcp_output+0x128>
 801341c:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 801341e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 80135c8 <tcp_output+0x2dc>
 8013422:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80135d0 <tcp_output+0x2e4>
 8013426:	e0f6      	b.n	8013616 <tcp_output+0x32a>
    if (pcb->state != SYN_SENT) {
 8013428:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801342c:	2b02      	cmp	r3, #2
 801342e:	d009      	beq.n	8013444 <tcp_output+0x158>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013430:	68eb      	ldr	r3, [r5, #12]
 8013432:	2010      	movs	r0, #16
 8013434:	899b      	ldrh	r3, [r3, #12]
 8013436:	9304      	str	r3, [sp, #16]
 8013438:	f7fa fe32 	bl	800e0a0 <lwip_htons>
 801343c:	9b04      	ldr	r3, [sp, #16]
 801343e:	68ea      	ldr	r2, [r5, #12]
 8013440:	4318      	orrs	r0, r3
 8013442:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 8013444:	4628      	mov	r0, r5
 8013446:	f7ff f813 	bl	8012470 <tcp_output_segment_busy>
 801344a:	2800      	cmp	r0, #0
 801344c:	d17f      	bne.n	801354e <tcp_output+0x262>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801344e:	68eb      	ldr	r3, [r5, #12]
 8013450:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8013452:	9304      	str	r3, [sp, #16]
 8013454:	f7fa fe27 	bl	800e0a6 <lwip_htonl>
 8013458:	9b04      	ldr	r3, [sp, #16]
 801345a:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801345c:	68eb      	ldr	r3, [r5, #12]
 801345e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 8013462:	9304      	str	r3, [sp, #16]
 8013464:	f7fa fe1c 	bl	800e0a0 <lwip_htons>
 8013468:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801346a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801346e:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013470:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013472:	4413      	add	r3, r2
 8013474:	6563      	str	r3, [r4, #84]	; 0x54
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013476:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013478:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801347a:	07d2      	lsls	r2, r2, #31
 801347c:	d44f      	bmi.n	801351e <tcp_output+0x232>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801347e:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 8013482:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8013486:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8013488:	bfbc      	itt	lt
 801348a:	2300      	movlt	r3, #0
 801348c:	f8a4 3058 	strhlt.w	r3, [r4, #88]	; 0x58
  if (pcb->rttest == 0) {
 8013490:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013492:	b94b      	cbnz	r3, 80134a8 <tcp_output+0x1bc>
    pcb->rttest = tcp_ticks;
 8013494:	4951      	ldr	r1, [pc, #324]	; (80135dc <tcp_output+0x2f0>)
 8013496:	68eb      	ldr	r3, [r5, #12]
 8013498:	6809      	ldr	r1, [r1, #0]
 801349a:	9204      	str	r2, [sp, #16]
 801349c:	65e1      	str	r1, [r4, #92]	; 0x5c
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801349e:	6858      	ldr	r0, [r3, #4]
 80134a0:	f7fa fe01 	bl	800e0a6 <lwip_htonl>
 80134a4:	9a04      	ldr	r2, [sp, #16]
 80134a6:	6620      	str	r0, [r4, #96]	; 0x60
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80134a8:	6869      	ldr	r1, [r5, #4]
 80134aa:	68eb      	ldr	r3, [r5, #12]
 80134ac:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 80134ae:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  seg->p->payload = seg->tcphdr;
 80134b2:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80134b4:	1a18      	subs	r0, r3, r0
 80134b6:	b280      	uxth	r0, r0
  seg->p->len -= len;
 80134b8:	ebac 0c00 	sub.w	ip, ip, r0
 80134bc:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 80134c0:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80134c4:	ebac 0000 	sub.w	r0, ip, r0
 80134c8:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 80134ca:	2100      	movs	r1, #0
 80134cc:	7419      	strb	r1, [r3, #16]
 80134ce:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80134d0:	7aa9      	ldrb	r1, [r5, #10]
 80134d2:	0089      	lsls	r1, r1, #2
 80134d4:	f001 0104 	and.w	r1, r1, #4
 80134d8:	3114      	adds	r1, #20
 80134da:	440b      	add	r3, r1
 80134dc:	429a      	cmp	r2, r3
 80134de:	d006      	beq.n	80134ee <tcp_output+0x202>
 80134e0:	493f      	ldr	r1, [pc, #252]	; (80135e0 <tcp_output+0x2f4>)
 80134e2:	4653      	mov	r3, sl
 80134e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80134e8:	4658      	mov	r0, fp
 80134ea:	f009 fb1d 	bl	801cb28 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80134ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80134f2:	6868      	ldr	r0, [r5, #4]
 80134f4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80134f8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80134fc:	9702      	str	r7, [sp, #8]
 80134fe:	2906      	cmp	r1, #6
 8013500:	d11d      	bne.n	801353e <tcp_output+0x252>
 8013502:	e9cd 2100 	strd	r2, r1, [sp]
 8013506:	4642      	mov	r2, r8
 8013508:	4621      	mov	r1, r4
 801350a:	f7f8 fbe5 	bl	800bcd8 <ip6_output_if>
    if (err != ERR_OK) {
 801350e:	b1f0      	cbz	r0, 801354e <tcp_output+0x262>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013510:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013518:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      return err;
 801351c:	e71f      	b.n	801335e <tcp_output+0x72>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801351e:	4642      	mov	r2, r8
 8013520:	4639      	mov	r1, r7
 8013522:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8013526:	9304      	str	r3, [sp, #16]
 8013528:	f7fd fbf6 	bl	8010d18 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801352c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8013530:	f7fa fdb9 	bl	800e0a6 <lwip_htonl>
 8013534:	9b04      	ldr	r3, [sp, #16]
 8013536:	6158      	str	r0, [r3, #20]
    opts += 1;
 8013538:	f103 0218 	add.w	r2, r3, #24
 801353c:	e7a1      	b.n	8013482 <tcp_output+0x196>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801353e:	2106      	movs	r1, #6
 8013540:	e9cd 2100 	strd	r2, r1, [sp]
 8013544:	4642      	mov	r2, r8
 8013546:	4621      	mov	r1, r4
 8013548:	f7f7 f8e2 	bl	800a710 <ip4_output_if>
 801354c:	e7df      	b.n	801350e <tcp_output+0x222>
    pcb->unsent = seg->next;
 801354e:	682b      	ldr	r3, [r5, #0]
 8013550:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    if (pcb->state != SYN_SENT) {
 8013554:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8013558:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801355a:	bf1e      	ittt	ne
 801355c:	f8b4 3042 	ldrhne.w	r3, [r4, #66]	; 0x42
 8013560:	f023 0303 	bicne.w	r3, r3, #3
 8013564:	f8a4 3042 	strhne.w	r3, [r4, #66]	; 0x42
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013568:	68eb      	ldr	r3, [r5, #12]
 801356a:	6858      	ldr	r0, [r3, #4]
 801356c:	f7fa fd9b 	bl	800e0a6 <lwip_htonl>
 8013570:	8929      	ldrh	r1, [r5, #8]
 8013572:	68eb      	ldr	r3, [r5, #12]
 8013574:	9104      	str	r1, [sp, #16]
 8013576:	9005      	str	r0, [sp, #20]
 8013578:	8998      	ldrh	r0, [r3, #12]
 801357a:	f7fa fd91 	bl	800e0a0 <lwip_htons>
 801357e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8013582:	f010 0303 	ands.w	r3, r0, #3
 8013586:	440a      	add	r2, r1
 8013588:	bf18      	it	ne
 801358a:	2301      	movne	r3, #1
 801358c:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801358e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8013590:	1ad2      	subs	r2, r2, r3
 8013592:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 8013594:	bfb8      	it	lt
 8013596:	67a3      	strlt	r3, [r4, #120]	; 0x78
    if (TCP_TCPLEN(seg) > 0) {
 8013598:	68ea      	ldr	r2, [r5, #12]
 801359a:	892b      	ldrh	r3, [r5, #8]
 801359c:	9304      	str	r3, [sp, #16]
 801359e:	8990      	ldrh	r0, [r2, #12]
 80135a0:	f7fa fd7e 	bl	800e0a0 <lwip_htons>
 80135a4:	9b04      	ldr	r3, [sp, #16]
 80135a6:	f010 0003 	ands.w	r0, r0, #3
 80135aa:	bf18      	it	ne
 80135ac:	2001      	movne	r0, #1
 80135ae:	42d8      	cmn	r0, r3
 80135b0:	f000 808f 	beq.w	80136d2 <tcp_output+0x3e6>
      seg->next = NULL;
 80135b4:	2300      	movs	r3, #0
 80135b6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 80135b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80135bc:	b993      	cbnz	r3, 80135e4 <tcp_output+0x2f8>
        pcb->unacked = seg;
 80135be:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
          useg->next = seg;
 80135c2:	462e      	mov	r6, r5
 80135c4:	e023      	b.n	801360e <tcp_output+0x322>
 80135c6:	bf00      	nop
 80135c8:	0802e1f0 	.word	0x0802e1f0
 80135cc:	0802e833 	.word	0x0802e833
 80135d0:	0802aecf 	.word	0x0802aecf
 80135d4:	0802e84b 	.word	0x0802e84b
 80135d8:	20016128 	.word	0x20016128
 80135dc:	20016118 	.word	0x20016118
 80135e0:	0802e888 	.word	0x0802e888
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80135e4:	68eb      	ldr	r3, [r5, #12]
 80135e6:	6858      	ldr	r0, [r3, #4]
 80135e8:	f7fa fd5d 	bl	800e0a6 <lwip_htonl>
 80135ec:	68f2      	ldr	r2, [r6, #12]
 80135ee:	9004      	str	r0, [sp, #16]
 80135f0:	6850      	ldr	r0, [r2, #4]
 80135f2:	f7fa fd58 	bl	800e0a6 <lwip_htonl>
 80135f6:	9b04      	ldr	r3, [sp, #16]
 80135f8:	1a18      	subs	r0, r3, r0
 80135fa:	2800      	cmp	r0, #0
 80135fc:	da67      	bge.n	80136ce <tcp_output+0x3e2>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135fe:	f104 0398 	add.w	r3, r4, #152	; 0x98
          while (*cur_seg &&
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	2a00      	cmp	r2, #0
 8013606:	d151      	bne.n	80136ac <tcp_output+0x3c0>
          seg->next = (*cur_seg);
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801360c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 801360e:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  while (seg != NULL &&
 8013612:	2d00      	cmp	r5, #0
 8013614:	d03f      	beq.n	8013696 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013616:	68eb      	ldr	r3, [r5, #12]
 8013618:	6858      	ldr	r0, [r3, #4]
 801361a:	f7fa fd44 	bl	800e0a6 <lwip_htonl>
 801361e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013620:	1ac0      	subs	r0, r0, r3
 8013622:	892b      	ldrh	r3, [r5, #8]
 8013624:	4418      	add	r0, r3
  while (seg != NULL &&
 8013626:	4548      	cmp	r0, r9
 8013628:	d832      	bhi.n	8013690 <tcp_output+0x3a4>
    LWIP_ASSERT("RST not expected here!",
 801362a:	68eb      	ldr	r3, [r5, #12]
 801362c:	8998      	ldrh	r0, [r3, #12]
 801362e:	f7fa fd37 	bl	800e0a0 <lwip_htons>
 8013632:	0741      	lsls	r1, r0, #29
 8013634:	d506      	bpl.n	8013644 <tcp_output+0x358>
 8013636:	4929      	ldr	r1, [pc, #164]	; (80136dc <tcp_output+0x3f0>)
 8013638:	4653      	mov	r3, sl
 801363a:	f240 5236 	movw	r2, #1334	; 0x536
 801363e:	4658      	mov	r0, fp
 8013640:	f009 fa72 	bl	801cb28 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013644:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8013648:	2b00      	cmp	r3, #0
 801364a:	f43f aeed 	beq.w	8013428 <tcp_output+0x13c>
 801364e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8013652:	f012 0f44 	tst.w	r2, #68	; 0x44
 8013656:	f47f aee7 	bne.w	8013428 <tcp_output+0x13c>
 801365a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801365e:	b14b      	cbz	r3, 8013674 <tcp_output+0x388>
 8013660:	6819      	ldr	r1, [r3, #0]
 8013662:	2900      	cmp	r1, #0
 8013664:	f47f aee0 	bne.w	8013428 <tcp_output+0x13c>
 8013668:	8919      	ldrh	r1, [r3, #8]
 801366a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801366e:	4299      	cmp	r1, r3
 8013670:	f4bf aeda 	bcs.w	8013428 <tcp_output+0x13c>
 8013674:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8013678:	2b00      	cmp	r3, #0
 801367a:	f43f aed5 	beq.w	8013428 <tcp_output+0x13c>
 801367e:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8013682:	2b07      	cmp	r3, #7
 8013684:	f63f aed0 	bhi.w	8013428 <tcp_output+0x13c>
 8013688:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 801368c:	f47f aecc 	bne.w	8013428 <tcp_output+0x13c>
  if (pcb->unsent == NULL) {
 8013690:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8013694:	b913      	cbnz	r3, 801369c <tcp_output+0x3b0>
    pcb->unsent_oversize = 0;
 8013696:	2300      	movs	r3, #0
 8013698:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801369c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80136a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136a4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 80136a8:	2000      	movs	r0, #0
 80136aa:	e658      	b.n	801335e <tcp_output+0x72>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136ac:	68d2      	ldr	r2, [r2, #12]
 80136ae:	9305      	str	r3, [sp, #20]
 80136b0:	6850      	ldr	r0, [r2, #4]
 80136b2:	f7fa fcf8 	bl	800e0a6 <lwip_htonl>
 80136b6:	68e9      	ldr	r1, [r5, #12]
 80136b8:	9004      	str	r0, [sp, #16]
 80136ba:	6848      	ldr	r0, [r1, #4]
 80136bc:	f7fa fcf3 	bl	800e0a6 <lwip_htonl>
 80136c0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 80136c2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136c4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 80136c6:	2800      	cmp	r0, #0
 80136c8:	da9e      	bge.n	8013608 <tcp_output+0x31c>
            cur_seg = &((*cur_seg)->next );
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	e799      	b.n	8013602 <tcp_output+0x316>
          useg->next = seg;
 80136ce:	6035      	str	r5, [r6, #0]
 80136d0:	e777      	b.n	80135c2 <tcp_output+0x2d6>
      tcp_seg_free(seg);
 80136d2:	4628      	mov	r0, r5
 80136d4:	f7fc fc36 	bl	800ff44 <tcp_seg_free>
 80136d8:	e799      	b.n	801360e <tcp_output+0x322>
 80136da:	bf00      	nop
 80136dc:	0802e871 	.word	0x0802e871

080136e0 <tcp_rexmit_rto_commit>:
{
 80136e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80136e2:	4604      	mov	r4, r0
 80136e4:	b930      	cbnz	r0, 80136f4 <tcp_rexmit_rto_commit+0x14>
 80136e6:	4b09      	ldr	r3, [pc, #36]	; (801370c <tcp_rexmit_rto_commit+0x2c>)
 80136e8:	4909      	ldr	r1, [pc, #36]	; (8013710 <tcp_rexmit_rto_commit+0x30>)
 80136ea:	480a      	ldr	r0, [pc, #40]	; (8013714 <tcp_rexmit_rto_commit+0x34>)
 80136ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80136f0:	f009 fa1a 	bl	801cb28 <iprintf>
  if (pcb->nrtx < 0xFF) {
 80136f4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80136f8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80136fa:	bf1c      	itt	ne
 80136fc:	3301      	addne	r3, #1
 80136fe:	f884 306a 	strbne.w	r3, [r4, #106]	; 0x6a
  tcp_output(pcb);
 8013702:	4620      	mov	r0, r4
}
 8013704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8013708:	f7ff bdf0 	b.w	80132ec <tcp_output>
 801370c:	0802e1f0 	.word	0x0802e1f0
 8013710:	0802e89b 	.word	0x0802e89b
 8013714:	0802aecf 	.word	0x0802aecf

08013718 <tcp_rexmit_rto>:
{
 8013718:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801371a:	4604      	mov	r4, r0
 801371c:	b930      	cbnz	r0, 801372c <tcp_rexmit_rto+0x14>
 801371e:	4b08      	ldr	r3, [pc, #32]	; (8013740 <tcp_rexmit_rto+0x28>)
 8013720:	4908      	ldr	r1, [pc, #32]	; (8013744 <tcp_rexmit_rto+0x2c>)
 8013722:	4809      	ldr	r0, [pc, #36]	; (8013748 <tcp_rexmit_rto+0x30>)
 8013724:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013728:	f009 f9fe 	bl	801cb28 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801372c:	4620      	mov	r0, r4
 801372e:	f7ff fc99 	bl	8013064 <tcp_rexmit_rto_prepare>
 8013732:	b920      	cbnz	r0, 801373e <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 8013734:	4620      	mov	r0, r4
}
 8013736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801373a:	f7ff bfd1 	b.w	80136e0 <tcp_rexmit_rto_commit>
}
 801373e:	bd10      	pop	{r4, pc}
 8013740:	0802e1f0 	.word	0x0802e1f0
 8013744:	0802e8be 	.word	0x0802e8be
 8013748:	0802aecf 	.word	0x0802aecf

0801374c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801374c:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801374e:	4604      	mov	r4, r0
 8013750:	b930      	cbnz	r0, 8013760 <tcp_keepalive+0x14>
 8013752:	4b10      	ldr	r3, [pc, #64]	; (8013794 <tcp_keepalive+0x48>)
 8013754:	4910      	ldr	r1, [pc, #64]	; (8013798 <tcp_keepalive+0x4c>)
 8013756:	4811      	ldr	r0, [pc, #68]	; (801379c <tcp_keepalive+0x50>)
 8013758:	f640 0224 	movw	r2, #2084	; 0x824
 801375c:	f009 f9e4 	bl	801cb28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013760:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8013762:	3801      	subs	r0, #1
 8013764:	f7fa fc9f 	bl	800e0a6 <lwip_htonl>
 8013768:	2100      	movs	r1, #0
 801376a:	4602      	mov	r2, r0
 801376c:	4620      	mov	r0, r4
 801376e:	f7fe ffed 	bl	801274c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8013772:	4605      	mov	r5, r0
 8013774:	b150      	cbz	r0, 801378c <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013776:	f7ff f811 	bl	801279c <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801377a:	f104 0318 	add.w	r3, r4, #24
 801377e:	4622      	mov	r2, r4
 8013780:	4629      	mov	r1, r5
 8013782:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8013784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013788:	f7fe bf5c 	b.w	8012644 <tcp_output_control_segment>
}
 801378c:	f04f 30ff 	mov.w	r0, #4294967295
 8013790:	bd70      	pop	{r4, r5, r6, pc}
 8013792:	bf00      	nop
 8013794:	0802e1f0 	.word	0x0802e1f0
 8013798:	0802e8da 	.word	0x0802e8da
 801379c:	0802aecf 	.word	0x0802aecf

080137a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80137a4:	4606      	mov	r6, r0
 80137a6:	b930      	cbnz	r0, 80137b6 <tcp_zero_window_probe+0x16>
 80137a8:	4b2d      	ldr	r3, [pc, #180]	; (8013860 <tcp_zero_window_probe+0xc0>)
 80137aa:	492e      	ldr	r1, [pc, #184]	; (8013864 <tcp_zero_window_probe+0xc4>)
 80137ac:	482e      	ldr	r0, [pc, #184]	; (8013868 <tcp_zero_window_probe+0xc8>)
 80137ae:	f640 024f 	movw	r2, #2127	; 0x84f
 80137b2:	f009 f9b9 	bl	801cb28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80137b6:	f8d6 5094 	ldr.w	r5, [r6, #148]	; 0x94
  if (seg == NULL) {
 80137ba:	2d00      	cmp	r5, #0
 80137bc:	d049      	beq.n	8013852 <tcp_zero_window_probe+0xb2>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80137be:	f896 30be 	ldrb.w	r3, [r6, #190]	; 0xbe
 80137c2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 80137c4:	bf1c      	itt	ne
 80137c6:	3301      	addne	r3, #1
 80137c8:	f886 30be 	strbne.w	r3, [r6, #190]	; 0xbe
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137cc:	68eb      	ldr	r3, [r5, #12]
 80137ce:	8998      	ldrh	r0, [r3, #12]
 80137d0:	f7fa fc66 	bl	800e0a0 <lwip_htons>
 80137d4:	f010 0401 	ands.w	r4, r0, #1
 80137d8:	bf18      	it	ne
 80137da:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80137dc:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137de:	bf1c      	itt	ne
 80137e0:	fab4 f484 	clzne	r4, r4
 80137e4:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80137e6:	685a      	ldr	r2, [r3, #4]
 80137e8:	f084 0101 	eor.w	r1, r4, #1
 80137ec:	4630      	mov	r0, r6
 80137ee:	f7fe ffad 	bl	801274c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80137f2:	4607      	mov	r7, r0
 80137f4:	b380      	cbz	r0, 8013858 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80137f6:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80137fa:	b1fc      	cbz	r4, 801383c <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80137fc:	2011      	movs	r0, #17
 80137fe:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 8013802:	f7fa fc4d 	bl	800e0a0 <lwip_htons>
 8013806:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 801380a:	4320      	orrs	r0, r4
 801380c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013810:	68eb      	ldr	r3, [r5, #12]
 8013812:	6858      	ldr	r0, [r3, #4]
 8013814:	f7fa fc47 	bl	800e0a6 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013818:	6fb3      	ldr	r3, [r6, #120]	; 0x78
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801381a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801381c:	1a1b      	subs	r3, r3, r0
 801381e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8013820:	bfb8      	it	lt
 8013822:	67b0      	strlt	r0, [r6, #120]	; 0x78
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013824:	4638      	mov	r0, r7
 8013826:	f7fe ffb9 	bl	801279c <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801382a:	f106 0318 	add.w	r3, r6, #24
 801382e:	4632      	mov	r2, r6
 8013830:	4639      	mov	r1, r7
 8013832:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8013834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013838:	f7fe bf04 	b.w	8012644 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801383c:	6868      	ldr	r0, [r5, #4]
 801383e:	892a      	ldrh	r2, [r5, #8]
 8013840:	8903      	ldrh	r3, [r0, #8]
 8013842:	1a9b      	subs	r3, r3, r2
 8013844:	b29b      	uxth	r3, r3
 8013846:	2201      	movs	r2, #1
 8013848:	f108 0114 	add.w	r1, r8, #20
 801384c:	f7fb ffd6 	bl	800f7fc <pbuf_copy_partial>
 8013850:	e7de      	b.n	8013810 <tcp_zero_window_probe+0x70>
    return ERR_OK;
 8013852:	4628      	mov	r0, r5
}
 8013854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8013858:	f04f 30ff 	mov.w	r0, #4294967295
 801385c:	e7fa      	b.n	8013854 <tcp_zero_window_probe+0xb4>
 801385e:	bf00      	nop
 8013860:	0802e1f0 	.word	0x0802e1f0
 8013864:	0802e8f5 	.word	0x0802e8f5
 8013868:	0802aecf 	.word	0x0802aecf

0801386c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013870:	200a      	movs	r0, #10
{
 8013872:	460e      	mov	r6, r1
 8013874:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013876:	f7fb f9f9 	bl	800ec6c <memp_malloc>
  if (timeout == NULL) {
 801387a:	b938      	cbnz	r0, 801388c <sys_timeout_abs+0x20>
        t->next = timeout;
        break;
      }
    }
  }
}
 801387c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013880:	4b0f      	ldr	r3, [pc, #60]	; (80138c0 <sys_timeout_abs+0x54>)
 8013882:	4910      	ldr	r1, [pc, #64]	; (80138c4 <sys_timeout_abs+0x58>)
 8013884:	4810      	ldr	r0, [pc, #64]	; (80138c8 <sys_timeout_abs+0x5c>)
 8013886:	22be      	movs	r2, #190	; 0xbe
 8013888:	f009 b94e 	b.w	801cb28 <iprintf>
  if (next_timeout == NULL) {
 801388c:	4a0f      	ldr	r2, [pc, #60]	; (80138cc <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 801388e:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 8013890:	2300      	movs	r3, #0
 8013892:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 8013894:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 8013896:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 801389a:	b90b      	cbnz	r3, 80138a0 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 801389c:	6010      	str	r0, [r2, #0]
}
 801389e:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80138a0:	6859      	ldr	r1, [r3, #4]
 80138a2:	1a61      	subs	r1, r4, r1
 80138a4:	2900      	cmp	r1, #0
 80138a6:	da01      	bge.n	80138ac <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 80138a8:	6003      	str	r3, [r0, #0]
 80138aa:	e7f7      	b.n	801389c <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80138ac:	4619      	mov	r1, r3
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	b11b      	cbz	r3, 80138ba <sys_timeout_abs+0x4e>
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	1aa2      	subs	r2, r4, r2
 80138b6:	2a00      	cmp	r2, #0
 80138b8:	daf8      	bge.n	80138ac <sys_timeout_abs+0x40>
        timeout->next = t->next;
 80138ba:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 80138bc:	6008      	str	r0, [r1, #0]
        break;
 80138be:	e7ee      	b.n	801389e <sys_timeout_abs+0x32>
 80138c0:	0802e918 	.word	0x0802e918
 80138c4:	0802e985 	.word	0x0802e985
 80138c8:	0802aecf 	.word	0x0802aecf
 80138cc:	20007094 	.word	0x20007094

080138d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80138d0:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80138d2:	6843      	ldr	r3, [r0, #4]
{
 80138d4:	4604      	mov	r4, r0
  cyclic->handler();
 80138d6:	4798      	blx	r3

  now = sys_now();
 80138d8:	f7ed fce2 	bl	80012a0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80138dc:	4b07      	ldr	r3, [pc, #28]	; (80138fc <lwip_cyclic_timer+0x2c>)
 80138de:	6825      	ldr	r5, [r4, #0]
 80138e0:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80138e2:	4907      	ldr	r1, [pc, #28]	; (8013900 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80138e4:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80138e6:	1a1a      	subs	r2, r3, r0
 80138e8:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80138ea:	bfb8      	it	lt
 80138ec:	1940      	addlt	r0, r0, r5
 80138ee:	4622      	mov	r2, r4
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80138f0:	bfa8      	it	ge
 80138f2:	4618      	movge	r0, r3
#endif
  }
}
 80138f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80138f8:	f7ff bfb8 	b.w	801386c <sys_timeout_abs>
 80138fc:	20007094 	.word	0x20007094
 8013900:	080138d1 	.word	0x080138d1

08013904 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013904:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8013908:	b570      	push	{r4, r5, r6, lr}
 801390a:	4604      	mov	r4, r0
 801390c:	460d      	mov	r5, r1
 801390e:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013910:	d306      	bcc.n	8013920 <sys_timeout+0x1c>
 8013912:	4b08      	ldr	r3, [pc, #32]	; (8013934 <sys_timeout+0x30>)
 8013914:	4908      	ldr	r1, [pc, #32]	; (8013938 <sys_timeout+0x34>)
 8013916:	4809      	ldr	r0, [pc, #36]	; (801393c <sys_timeout+0x38>)
 8013918:	f240 1229 	movw	r2, #297	; 0x129
 801391c:	f009 f904 	bl	801cb28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013920:	f7ed fcbe 	bl	80012a0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013924:	4632      	mov	r2, r6
 8013926:	4629      	mov	r1, r5
 8013928:	4420      	add	r0, r4
#endif
}
 801392a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801392e:	f7ff bf9d 	b.w	801386c <sys_timeout_abs>
 8013932:	bf00      	nop
 8013934:	0802e918 	.word	0x0802e918
 8013938:	0802e9c2 	.word	0x0802e9c2
 801393c:	0802aecf 	.word	0x0802aecf

08013940 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013940:	4b08      	ldr	r3, [pc, #32]	; (8013964 <tcp_timer_needed+0x24>)
 8013942:	689a      	ldr	r2, [r3, #8]
 8013944:	b962      	cbnz	r2, 8013960 <tcp_timer_needed+0x20>
 8013946:	4a08      	ldr	r2, [pc, #32]	; (8013968 <tcp_timer_needed+0x28>)
 8013948:	6812      	ldr	r2, [r2, #0]
 801394a:	b912      	cbnz	r2, 8013952 <tcp_timer_needed+0x12>
 801394c:	4a07      	ldr	r2, [pc, #28]	; (801396c <tcp_timer_needed+0x2c>)
 801394e:	6812      	ldr	r2, [r2, #0]
 8013950:	b132      	cbz	r2, 8013960 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8013952:	2201      	movs	r2, #1
 8013954:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013956:	4906      	ldr	r1, [pc, #24]	; (8013970 <tcp_timer_needed+0x30>)
 8013958:	2200      	movs	r2, #0
 801395a:	20fa      	movs	r0, #250	; 0xfa
 801395c:	f7ff bfd2 	b.w	8013904 <sys_timeout>
}
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	20007094 	.word	0x20007094
 8013968:	20016114 	.word	0x20016114
 801396c:	20016124 	.word	0x20016124
 8013970:	08013975 	.word	0x08013975

08013974 <tcpip_tcp_timer>:
{
 8013974:	b508      	push	{r3, lr}
  tcp_tmr();
 8013976:	f7fc ffc5 	bl	8010904 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801397a:	4b08      	ldr	r3, [pc, #32]	; (801399c <tcpip_tcp_timer+0x28>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	b913      	cbnz	r3, 8013986 <tcpip_tcp_timer+0x12>
 8013980:	4b07      	ldr	r3, [pc, #28]	; (80139a0 <tcpip_tcp_timer+0x2c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	b133      	cbz	r3, 8013994 <tcpip_tcp_timer+0x20>
}
 8013986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801398a:	4906      	ldr	r1, [pc, #24]	; (80139a4 <tcpip_tcp_timer+0x30>)
 801398c:	2200      	movs	r2, #0
 801398e:	20fa      	movs	r0, #250	; 0xfa
 8013990:	f7ff bfb8 	b.w	8013904 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8013994:	4a04      	ldr	r2, [pc, #16]	; (80139a8 <tcpip_tcp_timer+0x34>)
 8013996:	6093      	str	r3, [r2, #8]
}
 8013998:	bd08      	pop	{r3, pc}
 801399a:	bf00      	nop
 801399c:	20016114 	.word	0x20016114
 80139a0:	20016124 	.word	0x20016124
 80139a4:	08013975 	.word	0x08013975
 80139a8:	20007094 	.word	0x20007094

080139ac <sys_timeouts_init>:
{
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	4d06      	ldr	r5, [pc, #24]	; (80139c8 <sys_timeouts_init+0x1c>)
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139b0:	4e06      	ldr	r6, [pc, #24]	; (80139cc <sys_timeouts_init+0x20>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139b2:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139b4:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80139b8:	4631      	mov	r1, r6
 80139ba:	462a      	mov	r2, r5
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139bc:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139be:	f7ff ffa1 	bl	8013904 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139c2:	2c09      	cmp	r4, #9
 80139c4:	d1f6      	bne.n	80139b4 <sys_timeouts_init+0x8>
}
 80139c6:	bd70      	pop	{r4, r5, r6, pc}
 80139c8:	0801fe14 	.word	0x0801fe14
 80139cc:	080138d1 	.word	0x080138d1

080139d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80139d2:	f7ed fc65 	bl	80012a0 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80139d6:	4d0b      	ldr	r5, [pc, #44]	; (8013a04 <sys_check_timeouts+0x34>)
  now = sys_now();
 80139d8:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 80139da:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 80139dc:	b181      	cbz	r1, 8013a00 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80139de:	684b      	ldr	r3, [r1, #4]
 80139e0:	1ae2      	subs	r2, r4, r3
 80139e2:	2a00      	cmp	r2, #0
 80139e4:	db0c      	blt.n	8013a00 <sys_check_timeouts+0x30>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
 80139e6:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    next_timeout = tmptimeout->next;
 80139ea:	680a      	ldr	r2, [r1, #0]
 80139ec:	602a      	str	r2, [r5, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80139ee:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 80139f0:	606b      	str	r3, [r5, #4]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80139f2:	f7fb f957 	bl	800eca4 <memp_free>
    if (handler != NULL) {
 80139f6:	2e00      	cmp	r6, #0
 80139f8:	d0ef      	beq.n	80139da <sys_check_timeouts+0xa>
      handler(arg);
 80139fa:	4638      	mov	r0, r7
 80139fc:	47b0      	blx	r6
 80139fe:	e7ec      	b.n	80139da <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a02:	bf00      	nop
 8013a04:	20007094 	.word	0x20007094

08013a08 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013a08:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013a0a:	4c07      	ldr	r4, [pc, #28]	; (8013a28 <sys_timeouts_sleeptime+0x20>)
 8013a0c:	6823      	ldr	r3, [r4, #0]
 8013a0e:	b13b      	cbz	r3, 8013a20 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8013a10:	f7ed fc46 	bl	80012a0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	1a18      	subs	r0, r3, r0
    return 0;
 8013a1a:	bf48      	it	mi
 8013a1c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8013a1e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295
 8013a24:	e7fb      	b.n	8013a1e <sys_timeouts_sleeptime+0x16>
 8013a26:	bf00      	nop
 8013a28:	20007094 	.word	0x20007094

08013a2c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013a2c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a2e:	f009 f8c1 	bl	801cbb4 <rand>
 8013a32:	4b03      	ldr	r3, [pc, #12]	; (8013a40 <udp_init+0x14>)
 8013a34:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8013a38:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8013a3c:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 8013a3e:	bd08      	pop	{r3, pc}
 8013a40:	20000048 	.word	0x20000048

08013a44 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a48:	4688      	mov	r8, r1
 8013a4a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013a4c:	4607      	mov	r7, r0
 8013a4e:	b928      	cbnz	r0, 8013a5c <udp_input+0x18>
 8013a50:	4b9e      	ldr	r3, [pc, #632]	; (8013ccc <udp_input+0x288>)
 8013a52:	499f      	ldr	r1, [pc, #636]	; (8013cd0 <udp_input+0x28c>)
 8013a54:	489f      	ldr	r0, [pc, #636]	; (8013cd4 <udp_input+0x290>)
 8013a56:	22cf      	movs	r2, #207	; 0xcf
 8013a58:	f009 f866 	bl	801cb28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013a5c:	f1b8 0f00 	cmp.w	r8, #0
 8013a60:	d105      	bne.n	8013a6e <udp_input+0x2a>
 8013a62:	4b9a      	ldr	r3, [pc, #616]	; (8013ccc <udp_input+0x288>)
 8013a64:	499c      	ldr	r1, [pc, #624]	; (8013cd8 <udp_input+0x294>)
 8013a66:	489b      	ldr	r0, [pc, #620]	; (8013cd4 <udp_input+0x290>)
 8013a68:	22d0      	movs	r2, #208	; 0xd0
 8013a6a:	f009 f85d 	bl	801cb28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013a6e:	897b      	ldrh	r3, [r7, #10]
 8013a70:	2b07      	cmp	r3, #7
 8013a72:	d805      	bhi.n	8013a80 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013a74:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013a76:	b005      	add	sp, #20
 8013a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8013a7c:	f7fb bc80 	b.w	800f380 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013a80:	4d96      	ldr	r5, [pc, #600]	; (8013cdc <udp_input+0x298>)
  udphdr = (struct udp_hdr *)p->payload;
 8013a82:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013a84:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8013a88:	2b06      	cmp	r3, #6
 8013a8a:	d02f      	beq.n	8013aec <udp_input+0xa8>
 8013a8c:	6829      	ldr	r1, [r5, #0]
 8013a8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013a90:	f7f6 fe4f 	bl	800a732 <ip4_addr_isbroadcast_u32>
 8013a94:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 8013a96:	8820      	ldrh	r0, [r4, #0]
 8013a98:	f7fa fb02 	bl	800e0a0 <lwip_htons>
 8013a9c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 8013a9e:	8860      	ldrh	r0, [r4, #2]
 8013aa0:	f7fa fafe 	bl	800e0a0 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aa4:	4b8e      	ldr	r3, [pc, #568]	; (8013ce0 <udp_input+0x29c>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013aa6:	498f      	ldr	r1, [pc, #572]	; (8013ce4 <udp_input+0x2a0>)
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aa8:	681c      	ldr	r4, [r3, #0]
  dest = lwip_ntohs(udphdr->dest);
 8013aaa:	9003      	str	r0, [sp, #12]
  uncon_pcb = NULL;
 8013aac:	2600      	movs	r6, #0
  prev = NULL;
 8013aae:	46b3      	mov	fp, r6
 8013ab0:	469a      	mov	sl, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ab2:	b9f4      	cbnz	r4, 8013af2 <udp_input+0xae>
  if (pcb != NULL) {
 8013ab4:	b95e      	cbnz	r6, 8013ace <udp_input+0x8a>
    if (ip_current_is_v6()) {
 8013ab6:	68eb      	ldr	r3, [r5, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f040 80c6 	bne.w	8013c4a <udp_input+0x206>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013abe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013ac2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013ac4:	1ac3      	subs	r3, r0, r3
 8013ac6:	4258      	negs	r0, r3
 8013ac8:	4158      	adcs	r0, r3
  if (for_us) {
 8013aca:	2800      	cmp	r0, #0
 8013acc:	d0d2      	beq.n	8013a74 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013ace:	2108      	movs	r1, #8
 8013ad0:	4638      	mov	r0, r7
 8013ad2:	f7fb fc21 	bl	800f318 <pbuf_remove_header>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	f000 80c3 	beq.w	8013c62 <udp_input+0x21e>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013adc:	4b7b      	ldr	r3, [pc, #492]	; (8013ccc <udp_input+0x288>)
 8013ade:	4982      	ldr	r1, [pc, #520]	; (8013ce8 <udp_input+0x2a4>)
 8013ae0:	487c      	ldr	r0, [pc, #496]	; (8013cd4 <udp_input+0x290>)
 8013ae2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013ae6:	f009 f81f 	bl	801cb28 <iprintf>
 8013aea:	e7c3      	b.n	8013a74 <udp_input+0x30>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013aec:	f04f 0900 	mov.w	r9, #0
 8013af0:	e7d1      	b.n	8013a96 <udp_input+0x52>
    if ((pcb->local_port == dest) &&
 8013af2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8013af4:	9a03      	ldr	r2, [sp, #12]
 8013af6:	4293      	cmp	r3, r2
 8013af8:	f040 808d 	bne.w	8013c16 <udp_input+0x1d2>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013afc:	f1b8 0f00 	cmp.w	r8, #0
 8013b00:	d105      	bne.n	8013b0e <udp_input+0xca>
 8013b02:	4b72      	ldr	r3, [pc, #456]	; (8013ccc <udp_input+0x288>)
 8013b04:	4873      	ldr	r0, [pc, #460]	; (8013cd4 <udp_input+0x290>)
 8013b06:	2288      	movs	r2, #136	; 0x88
 8013b08:	f009 f80e 	bl	801cb28 <iprintf>
 8013b0c:	4975      	ldr	r1, [pc, #468]	; (8013ce4 <udp_input+0x2a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b0e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8013b12:	b132      	cbz	r2, 8013b22 <udp_input+0xde>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013b14:	686b      	ldr	r3, [r5, #4]
 8013b16:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8013b1a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d179      	bne.n	8013c16 <udp_input+0x1d2>
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 8013b22:	7d22      	ldrb	r2, [r4, #20]
 8013b24:	2a2e      	cmp	r2, #46	; 0x2e
 8013b26:	d011      	beq.n	8013b4c <udp_input+0x108>
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
 8013b28:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d172      	bne.n	8013c16 <udp_input+0x1d2>
    if (broadcast != 0) {
 8013b30:	6823      	ldr	r3, [r4, #0]
 8013b32:	f1b9 0f00 	cmp.w	r9, #0
 8013b36:	d050      	beq.n	8013bda <udp_input+0x196>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b38:	b143      	cbz	r3, 8013b4c <udp_input+0x108>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b3a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013b40:	d004      	beq.n	8013b4c <udp_input+0x108>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013b42:	4043      	eors	r3, r0
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b44:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8013b48:	4203      	tst	r3, r0
 8013b4a:	d164      	bne.n	8013c16 <udp_input+0x1d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013b4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013b50:	0758      	lsls	r0, r3, #29
 8013b52:	d415      	bmi.n	8013b80 <udp_input+0x13c>
        if (uncon_pcb == NULL) {
 8013b54:	2e00      	cmp	r6, #0
 8013b56:	d065      	beq.n	8013c24 <udp_input+0x1e0>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013b58:	f1b9 0f00 	cmp.w	r9, #0
 8013b5c:	d010      	beq.n	8013b80 <udp_input+0x13c>
 8013b5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013b60:	3301      	adds	r3, #1
 8013b62:	d10d      	bne.n	8013b80 <udp_input+0x13c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013b64:	7d33      	ldrb	r3, [r6, #20]
 8013b66:	b923      	cbnz	r3, 8013b72 <udp_input+0x12e>
 8013b68:	6830      	ldr	r0, [r6, #0]
 8013b6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b6e:	4298      	cmp	r0, r3
 8013b70:	d006      	beq.n	8013b80 <udp_input+0x13c>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b72:	b92a      	cbnz	r2, 8013b80 <udp_input+0x13c>
 8013b74:	6822      	ldr	r2, [r4, #0]
 8013b76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	bf08      	it	eq
 8013b7e:	4626      	moveq	r6, r4
      if ((pcb->remote_port == src) &&
 8013b80:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8013b82:	9a02      	ldr	r2, [sp, #8]
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d146      	bne.n	8013c16 <udp_input+0x1d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b88:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013b8c:	69a3      	ldr	r3, [r4, #24]
      if ((pcb->remote_port == src) &&
 8013b8e:	2a06      	cmp	r2, #6
 8013b90:	d14a      	bne.n	8013c28 <udp_input+0x1e4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b92:	b933      	cbnz	r3, 8013ba2 <udp_input+0x15e>
 8013b94:	69e0      	ldr	r0, [r4, #28]
 8013b96:	b920      	cbnz	r0, 8013ba2 <udp_input+0x15e>
 8013b98:	6a20      	ldr	r0, [r4, #32]
 8013b9a:	b910      	cbnz	r0, 8013ba2 <udp_input+0x15e>
 8013b9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d044      	beq.n	8013c2c <udp_input+0x1e8>
      if ((pcb->remote_port == src) &&
 8013ba2:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8013ba6:	4290      	cmp	r0, r2
 8013ba8:	d135      	bne.n	8013c16 <udp_input+0x1d2>
 8013baa:	2a06      	cmp	r2, #6
 8013bac:	6968      	ldr	r0, [r5, #20]
 8013bae:	d14a      	bne.n	8013c46 <udp_input+0x202>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013bb0:	4283      	cmp	r3, r0
 8013bb2:	d130      	bne.n	8013c16 <udp_input+0x1d2>
 8013bb4:	69e2      	ldr	r2, [r4, #28]
 8013bb6:	69ab      	ldr	r3, [r5, #24]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d12c      	bne.n	8013c16 <udp_input+0x1d2>
 8013bbc:	6a22      	ldr	r2, [r4, #32]
 8013bbe:	69eb      	ldr	r3, [r5, #28]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d128      	bne.n	8013c16 <udp_input+0x1d2>
 8013bc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013bc6:	6a2b      	ldr	r3, [r5, #32]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d124      	bne.n	8013c16 <udp_input+0x1d2>
 8013bcc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8013bd0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013bd4:	429a      	cmp	r2, r3
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013bd6:	d11e      	bne.n	8013c16 <udp_input+0x1d2>
 8013bd8:	e028      	b.n	8013c2c <udp_input+0x1e8>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013bda:	2a06      	cmp	r2, #6
 8013bdc:	d11e      	bne.n	8013c1c <udp_input+0x1d8>
 8013bde:	b933      	cbnz	r3, 8013bee <udp_input+0x1aa>
 8013be0:	6860      	ldr	r0, [r4, #4]
 8013be2:	b920      	cbnz	r0, 8013bee <udp_input+0x1aa>
 8013be4:	68a0      	ldr	r0, [r4, #8]
 8013be6:	b910      	cbnz	r0, 8013bee <udp_input+0x1aa>
 8013be8:	68e0      	ldr	r0, [r4, #12]
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d0ae      	beq.n	8013b4c <udp_input+0x108>
 8013bee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013bf0:	4298      	cmp	r0, r3
 8013bf2:	d110      	bne.n	8013c16 <udp_input+0x1d2>
 8013bf4:	6860      	ldr	r0, [r4, #4]
 8013bf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013bf8:	4298      	cmp	r0, r3
 8013bfa:	d10c      	bne.n	8013c16 <udp_input+0x1d2>
 8013bfc:	68a0      	ldr	r0, [r4, #8]
 8013bfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013c00:	4298      	cmp	r0, r3
 8013c02:	d108      	bne.n	8013c16 <udp_input+0x1d2>
 8013c04:	68e0      	ldr	r0, [r4, #12]
 8013c06:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013c08:	4298      	cmp	r0, r3
 8013c0a:	d104      	bne.n	8013c16 <udp_input+0x1d2>
 8013c0c:	7c20      	ldrb	r0, [r4, #16]
 8013c0e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8013c12:	4298      	cmp	r0, r3
 8013c14:	d09a      	beq.n	8013b4c <udp_input+0x108>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c16:	46a3      	mov	fp, r4
 8013c18:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8013c1a:	e74a      	b.n	8013ab2 <udp_input+0x6e>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d095      	beq.n	8013b4c <udp_input+0x108>
 8013c20:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013c22:	e7f6      	b.n	8013c12 <udp_input+0x1ce>
 8013c24:	4626      	mov	r6, r4
 8013c26:	e7ab      	b.n	8013b80 <udp_input+0x13c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d1ba      	bne.n	8013ba2 <udp_input+0x15e>
        if (prev != NULL) {
 8013c2c:	f1bb 0f00 	cmp.w	fp, #0
 8013c30:	d007      	beq.n	8013c42 <udp_input+0x1fe>
          prev->next = pcb->next;
 8013c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c34:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
          pcb->next = udp_pcbs;
 8013c38:	f8da 3000 	ldr.w	r3, [sl]
 8013c3c:	6363      	str	r3, [r4, #52]	; 0x34
          udp_pcbs = pcb;
 8013c3e:	f8ca 4000 	str.w	r4, [sl]
 8013c42:	4626      	mov	r6, r4
 8013c44:	e743      	b.n	8013ace <udp_input+0x8a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c46:	4283      	cmp	r3, r0
 8013c48:	e7c5      	b.n	8013bd6 <udp_input+0x192>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 8013c4a:	4928      	ldr	r1, [pc, #160]	; (8013cec <udp_input+0x2a8>)
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	f7fb fa6b 	bl	800f128 <netif_get_ip6_addr_match>
    if (!ip_current_is_v6()) {
 8013c52:	68eb      	ldr	r3, [r5, #12]
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 8013c54:	43c0      	mvns	r0, r0
 8013c56:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (!ip_current_is_v6()) {
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f47f af35 	bne.w	8013aca <udp_input+0x86>
 8013c60:	e72d      	b.n	8013abe <udp_input+0x7a>
    if (pcb != NULL) {
 8013c62:	b16e      	cbz	r6, 8013c80 <udp_input+0x23c>
      if (pcb->recv != NULL) {
 8013c64:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8013c66:	2c00      	cmp	r4, #0
 8013c68:	f43f af04 	beq.w	8013a74 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c6c:	9b02      	ldr	r3, [sp, #8]
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013c72:	4b1f      	ldr	r3, [pc, #124]	; (8013cf0 <udp_input+0x2ac>)
 8013c74:	463a      	mov	r2, r7
 8013c76:	4631      	mov	r1, r6
 8013c78:	47a0      	blx	r4
}
 8013c7a:	b005      	add	sp, #20
 8013c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c80:	f1b9 0f00 	cmp.w	r9, #0
 8013c84:	f47f aef6 	bne.w	8013a74 <udp_input+0x30>
 8013c88:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8013c8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013c8e:	2a06      	cmp	r2, #6
 8013c90:	d113      	bne.n	8013cba <udp_input+0x276>
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	3bff      	subs	r3, #255	; 0xff
 8013c96:	bf18      	it	ne
 8013c98:	2301      	movne	r3, #1
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f43f aeea 	beq.w	8013a74 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ca0:	8a29      	ldrh	r1, [r5, #16]
 8013ca2:	3108      	adds	r1, #8
 8013ca4:	b209      	sxth	r1, r1
 8013ca6:	4638      	mov	r0, r7
 8013ca8:	f7fb fb62 	bl	800f370 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013cac:	68eb      	ldr	r3, [r5, #12]
 8013cae:	b143      	cbz	r3, 8013cc2 <udp_input+0x27e>
 8013cb0:	2104      	movs	r1, #4
 8013cb2:	4638      	mov	r0, r7
 8013cb4:	f7f7 fb16 	bl	800b2e4 <icmp6_dest_unreach>
 8013cb8:	e6dc      	b.n	8013a74 <udp_input+0x30>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013cbe:	3be0      	subs	r3, #224	; 0xe0
 8013cc0:	e7e9      	b.n	8013c96 <udp_input+0x252>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013cc2:	2103      	movs	r1, #3
 8013cc4:	4638      	mov	r0, r7
 8013cc6:	f7f6 fb7b 	bl	800a3c0 <icmp_dest_unreach>
 8013cca:	e6d3      	b.n	8013a74 <udp_input+0x30>
 8013ccc:	0802e9f8 	.word	0x0802e9f8
 8013cd0:	0802ea60 	.word	0x0802ea60
 8013cd4:	0802aecf 	.word	0x0802aecf
 8013cd8:	0802ea78 	.word	0x0802ea78
 8013cdc:	2000f4b8 	.word	0x2000f4b8
 8013ce0:	2001612c 	.word	0x2001612c
 8013ce4:	0802ea91 	.word	0x0802ea91
 8013ce8:	0802eab6 	.word	0x0802eab6
 8013cec:	2000f4e4 	.word	0x2000f4e4
 8013cf0:	2000f4cc 	.word	0x2000f4cc

08013cf4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8013cf8:	4b71      	ldr	r3, [pc, #452]	; (8013ec0 <udp_bind+0x1cc>)
{
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	4616      	mov	r6, r2
    ipaddr = IP4_ADDR_ANY;
 8013cfe:	2900      	cmp	r1, #0
 8013d00:	bf08      	it	eq
 8013d02:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d04:	4605      	mov	r5, r0
 8013d06:	b958      	cbnz	r0, 8013d20 <udp_bind+0x2c>
 8013d08:	4b6e      	ldr	r3, [pc, #440]	; (8013ec4 <udp_bind+0x1d0>)
 8013d0a:	496f      	ldr	r1, [pc, #444]	; (8013ec8 <udp_bind+0x1d4>)
 8013d0c:	486f      	ldr	r0, [pc, #444]	; (8013ecc <udp_bind+0x1d8>)
 8013d0e:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013d12:	f008 ff09 	bl	801cb28 <iprintf>
 8013d16:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8013d1a:	b006      	add	sp, #24
 8013d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d20:	4b6b      	ldr	r3, [pc, #428]	; (8013ed0 <udp_bind+0x1dc>)
 8013d22:	681c      	ldr	r4, [r3, #0]
 8013d24:	4698      	mov	r8, r3
 8013d26:	2c00      	cmp	r4, #0
 8013d28:	d16f      	bne.n	8013e0a <udp_bind+0x116>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 8013d2a:	7d0b      	ldrb	r3, [r1, #20]
 8013d2c:	2b06      	cmp	r3, #6
 8013d2e:	d142      	bne.n	8013db6 <udp_bind+0xc2>
 8013d30:	7c0f      	ldrb	r7, [r1, #16]
 8013d32:	2f00      	cmp	r7, #0
 8013d34:	d13f      	bne.n	8013db6 <udp_bind+0xc2>
 8013d36:	680b      	ldr	r3, [r1, #0]
 8013d38:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8013d3c:	4018      	ands	r0, r3
 8013d3e:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013d42:	4290      	cmp	r0, r2
 8013d44:	d00a      	beq.n	8013d5c <udp_bind+0x68>
 8013d46:	f648 72ff 	movw	r2, #36863	; 0x8fff
 8013d4a:	401a      	ands	r2, r3
 8013d4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013d50:	4282      	cmp	r2, r0
 8013d52:	d003      	beq.n	8013d5c <udp_bind+0x68>
 8013d54:	f240 20ff 	movw	r0, #767	; 0x2ff
 8013d58:	4282      	cmp	r2, r0
 8013d5a:	d12c      	bne.n	8013db6 <udp_bind+0xc2>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	684b      	ldr	r3, [r1, #4]
 8013d60:	9301      	str	r3, [sp, #4]
 8013d62:	688b      	ldr	r3, [r1, #8]
 8013d64:	9302      	str	r3, [sp, #8]
 8013d66:	68cb      	ldr	r3, [r1, #12]
 8013d68:	9303      	str	r3, [sp, #12]
 8013d6a:	2206      	movs	r2, #6
 8013d6c:	2300      	movs	r3, #0
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 8013d6e:	4669      	mov	r1, sp
 8013d70:	4668      	mov	r0, sp
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 8013d72:	f88d 2014 	strb.w	r2, [sp, #20]
 8013d76:	f88d 3010 	strb.w	r3, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 8013d7a:	f7f7 fb1f 	bl	800b3bc <ip6_route>
 8013d7e:	b1c8      	cbz	r0, 8013db4 <udp_bind+0xc0>
 8013d80:	9b00      	ldr	r3, [sp, #0]
 8013d82:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8013d86:	4019      	ands	r1, r3
 8013d88:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013d8c:	4291      	cmp	r1, r2
 8013d8e:	d00b      	beq.n	8013da8 <udp_bind+0xb4>
 8013d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013d94:	041b      	lsls	r3, r3, #16
 8013d96:	0c1b      	lsrs	r3, r3, #16
 8013d98:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013d9c:	4293      	cmp	r3, r2
 8013d9e:	d003      	beq.n	8013da8 <udp_bind+0xb4>
 8013da0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013da4:	4293      	cmp	r3, r2
 8013da6:	d103      	bne.n	8013db0 <udp_bind+0xbc>
 8013da8:	f890 70de 	ldrb.w	r7, [r0, #222]	; 0xde
 8013dac:	3701      	adds	r7, #1
 8013dae:	b2ff      	uxtb	r7, r7
 8013db0:	f88d 7010 	strb.w	r7, [sp, #16]
    ipaddr = &zoned_ipaddr;
 8013db4:	4669      	mov	r1, sp
  if (port == 0) {
 8013db6:	f8d8 c000 	ldr.w	ip, [r8]
 8013dba:	2e00      	cmp	r6, #0
 8013dbc:	d177      	bne.n	8013eae <udp_bind+0x1ba>
 8013dbe:	4b45      	ldr	r3, [pc, #276]	; (8013ed4 <udp_bind+0x1e0>)
 8013dc0:	881e      	ldrh	r6, [r3, #0]
 8013dc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013dc6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013dca:	42be      	cmp	r6, r7
 8013dcc:	bf1a      	itte	ne
 8013dce:	3601      	addne	r6, #1
 8013dd0:	b2b6      	uxthne	r6, r6
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013dd2:	f44f 4640 	moveq.w	r6, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dd6:	4662      	mov	r2, ip
 8013dd8:	b9da      	cbnz	r2, 8013e12 <udp_bind+0x11e>
 8013dda:	801e      	strh	r6, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013ddc:	7d0b      	ldrb	r3, [r1, #20]
 8013dde:	752b      	strb	r3, [r5, #20]
 8013de0:	7d0b      	ldrb	r3, [r1, #20]
 8013de2:	2b06      	cmp	r3, #6
 8013de4:	680b      	ldr	r3, [r1, #0]
 8013de6:	602b      	str	r3, [r5, #0]
 8013de8:	d163      	bne.n	8013eb2 <udp_bind+0x1be>
 8013dea:	684b      	ldr	r3, [r1, #4]
 8013dec:	606b      	str	r3, [r5, #4]
 8013dee:	688b      	ldr	r3, [r1, #8]
 8013df0:	60ab      	str	r3, [r5, #8]
 8013df2:	68cb      	ldr	r3, [r1, #12]
 8013df4:	60eb      	str	r3, [r5, #12]
 8013df6:	7c0b      	ldrb	r3, [r1, #16]
 8013df8:	742b      	strb	r3, [r5, #16]
  pcb->local_port = port;
 8013dfa:	876e      	strh	r6, [r5, #58]	; 0x3a
  if (rebind == 0) {
 8013dfc:	b91c      	cbnz	r4, 8013e06 <udp_bind+0x112>
    pcb->next = udp_pcbs;
 8013dfe:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
    udp_pcbs = pcb;
 8013e02:	f8c8 5000 	str.w	r5, [r8]
  return ERR_OK;
 8013e06:	2000      	movs	r0, #0
 8013e08:	e787      	b.n	8013d1a <udp_bind+0x26>
    if (pcb == ipcb) {
 8013e0a:	42ac      	cmp	r4, r5
 8013e0c:	d056      	beq.n	8013ebc <udp_bind+0x1c8>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e0e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8013e10:	e789      	b.n	8013d26 <udp_bind+0x32>
    if (pcb->local_port == udp_port) {
 8013e12:	f8b2 e03a 	ldrh.w	lr, [r2, #58]	; 0x3a
 8013e16:	45b6      	cmp	lr, r6
 8013e18:	d107      	bne.n	8013e2a <udp_bind+0x136>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013e1a:	3801      	subs	r0, #1
 8013e1c:	b280      	uxth	r0, r0
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d1d3      	bne.n	8013dca <udp_bind+0xd6>
 8013e22:	801e      	strh	r6, [r3, #0]
      return ERR_USE;
 8013e24:	f06f 0007 	mvn.w	r0, #7
 8013e28:	e777      	b.n	8013d1a <udp_bind+0x26>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013e2c:	e7d4      	b.n	8013dd8 <udp_bind+0xe4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e2e:	42ba      	cmp	r2, r7
 8013e30:	d0f8      	beq.n	8013e24 <udp_bind+0x130>
 8013e32:	2806      	cmp	r0, #6
 8013e34:	d031      	beq.n	8013e9a <udp_bind+0x1a6>
 8013e36:	2a00      	cmp	r2, #0
 8013e38:	d0f4      	beq.n	8013e24 <udp_bind+0x130>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e3a:	f1be 0f06 	cmp.w	lr, #6
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	d105      	bne.n	8013e4e <udp_bind+0x15a>
 8013e42:	b932      	cbnz	r2, 8013e52 <udp_bind+0x15e>
 8013e44:	685a      	ldr	r2, [r3, #4]
 8013e46:	b922      	cbnz	r2, 8013e52 <udp_bind+0x15e>
 8013e48:	689a      	ldr	r2, [r3, #8]
 8013e4a:	b912      	cbnz	r2, 8013e52 <udp_bind+0x15e>
 8013e4c:	68da      	ldr	r2, [r3, #12]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e4e:	2a00      	cmp	r2, #0
 8013e50:	d0e8      	beq.n	8013e24 <udp_bind+0x130>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d0c1      	beq.n	8013ddc <udp_bind+0xe8>
      if (pcb != ipcb) {
 8013e58:	42ab      	cmp	r3, r5
 8013e5a:	d0fa      	beq.n	8013e52 <udp_bind+0x15e>
          if ((ipcb->local_port == port) &&
 8013e5c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8013e5e:	42b2      	cmp	r2, r6
 8013e60:	d1f7      	bne.n	8013e52 <udp_bind+0x15e>
 8013e62:	7d08      	ldrb	r0, [r1, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e64:	f893 e014 	ldrb.w	lr, [r3, #20]
 8013e68:	680a      	ldr	r2, [r1, #0]
          if ((ipcb->local_port == port) &&
 8013e6a:	4586      	cmp	lr, r0
 8013e6c:	d1e1      	bne.n	8013e32 <udp_bind+0x13e>
 8013e6e:	f1be 0f06 	cmp.w	lr, #6
 8013e72:	681f      	ldr	r7, [r3, #0]
 8013e74:	d1db      	bne.n	8013e2e <udp_bind+0x13a>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e76:	42ba      	cmp	r2, r7
 8013e78:	d10f      	bne.n	8013e9a <udp_bind+0x1a6>
 8013e7a:	685f      	ldr	r7, [r3, #4]
 8013e7c:	6848      	ldr	r0, [r1, #4]
 8013e7e:	4287      	cmp	r7, r0
 8013e80:	d10b      	bne.n	8013e9a <udp_bind+0x1a6>
 8013e82:	689f      	ldr	r7, [r3, #8]
 8013e84:	6888      	ldr	r0, [r1, #8]
 8013e86:	4287      	cmp	r7, r0
 8013e88:	d107      	bne.n	8013e9a <udp_bind+0x1a6>
 8013e8a:	68df      	ldr	r7, [r3, #12]
 8013e8c:	68c8      	ldr	r0, [r1, #12]
 8013e8e:	4287      	cmp	r7, r0
 8013e90:	d103      	bne.n	8013e9a <udp_bind+0x1a6>
 8013e92:	7c1f      	ldrb	r7, [r3, #16]
 8013e94:	7c08      	ldrb	r0, [r1, #16]
 8013e96:	4287      	cmp	r7, r0
 8013e98:	d0c4      	beq.n	8013e24 <udp_bind+0x130>
 8013e9a:	2a00      	cmp	r2, #0
 8013e9c:	d1cd      	bne.n	8013e3a <udp_bind+0x146>
 8013e9e:	684a      	ldr	r2, [r1, #4]
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	d1ca      	bne.n	8013e3a <udp_bind+0x146>
 8013ea4:	688a      	ldr	r2, [r1, #8]
 8013ea6:	2a00      	cmp	r2, #0
 8013ea8:	d1c7      	bne.n	8013e3a <udp_bind+0x146>
 8013eaa:	68ca      	ldr	r2, [r1, #12]
 8013eac:	e7c3      	b.n	8013e36 <udp_bind+0x142>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013eae:	4663      	mov	r3, ip
 8013eb0:	e7d0      	b.n	8013e54 <udp_bind+0x160>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8013eb8:	606b      	str	r3, [r5, #4]
 8013eba:	e79d      	b.n	8013df8 <udp_bind+0x104>
      rebind = 1;
 8013ebc:	2401      	movs	r4, #1
 8013ebe:	e734      	b.n	8013d2a <udp_bind+0x36>
 8013ec0:	0801fc2c 	.word	0x0801fc2c
 8013ec4:	0802e9f8 	.word	0x0802e9f8
 8013ec8:	0802ead1 	.word	0x0802ead1
 8013ecc:	0802aecf 	.word	0x0802aecf
 8013ed0:	2001612c 	.word	0x2001612c
 8013ed4:	20000048 	.word	0x20000048

08013ed8 <udp_sendto_if_src>:
{
 8013ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013edc:	b085      	sub	sp, #20
 8013ede:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
 8013ee2:	4688      	mov	r8, r1
 8013ee4:	4617      	mov	r7, r2
 8013ee6:	469b      	mov	fp, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ee8:	4606      	mov	r6, r0
 8013eea:	b960      	cbnz	r0, 8013f06 <udp_sendto_if_src+0x2e>
 8013eec:	4b5f      	ldr	r3, [pc, #380]	; (801406c <udp_sendto_if_src+0x194>)
 8013eee:	4960      	ldr	r1, [pc, #384]	; (8014070 <udp_sendto_if_src+0x198>)
 8013ef0:	f240 22d1 	movw	r2, #721	; 0x2d1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013ef4:	485f      	ldr	r0, [pc, #380]	; (8014074 <udp_sendto_if_src+0x19c>)
 8013ef6:	f008 fe17 	bl	801cb28 <iprintf>
 8013efa:	f06f 040f 	mvn.w	r4, #15
}
 8013efe:	4620      	mov	r0, r4
 8013f00:	b005      	add	sp, #20
 8013f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013f06:	b921      	cbnz	r1, 8013f12 <udp_sendto_if_src+0x3a>
 8013f08:	4b58      	ldr	r3, [pc, #352]	; (801406c <udp_sendto_if_src+0x194>)
 8013f0a:	495b      	ldr	r1, [pc, #364]	; (8014078 <udp_sendto_if_src+0x1a0>)
 8013f0c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013f10:	e7f0      	b.n	8013ef4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013f12:	b922      	cbnz	r2, 8013f1e <udp_sendto_if_src+0x46>
 8013f14:	4b55      	ldr	r3, [pc, #340]	; (801406c <udp_sendto_if_src+0x194>)
 8013f16:	4959      	ldr	r1, [pc, #356]	; (801407c <udp_sendto_if_src+0x1a4>)
 8013f18:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013f1c:	e7ea      	b.n	8013ef4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013f1e:	f1b9 0f00 	cmp.w	r9, #0
 8013f22:	d104      	bne.n	8013f2e <udp_sendto_if_src+0x56>
 8013f24:	4b51      	ldr	r3, [pc, #324]	; (801406c <udp_sendto_if_src+0x194>)
 8013f26:	4956      	ldr	r1, [pc, #344]	; (8014080 <udp_sendto_if_src+0x1a8>)
 8013f28:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013f2c:	e7e2      	b.n	8013ef4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013f2e:	f1ba 0f00 	cmp.w	sl, #0
 8013f32:	d104      	bne.n	8013f3e <udp_sendto_if_src+0x66>
 8013f34:	4b4d      	ldr	r3, [pc, #308]	; (801406c <udp_sendto_if_src+0x194>)
 8013f36:	4953      	ldr	r1, [pc, #332]	; (8014084 <udp_sendto_if_src+0x1ac>)
 8013f38:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013f3c:	e7da      	b.n	8013ef4 <udp_sendto_if_src+0x1c>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8013f3e:	7d02      	ldrb	r2, [r0, #20]
 8013f40:	2a2e      	cmp	r2, #46	; 0x2e
 8013f42:	d008      	beq.n	8013f56 <udp_sendto_if_src+0x7e>
 8013f44:	f899 3014 	ldrb.w	r3, [r9, #20]
 8013f48:	4293      	cmp	r3, r2
 8013f4a:	f040 808b 	bne.w	8014064 <udp_sendto_if_src+0x18c>
 8013f4e:	7d3a      	ldrb	r2, [r7, #20]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	f040 8087 	bne.w	8014064 <udp_sendto_if_src+0x18c>
  if (pcb->local_port == 0) {
 8013f56:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8013f58:	b142      	cbz	r2, 8013f6c <udp_sendto_if_src+0x94>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013f5a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8013f5e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d90a      	bls.n	8013f7c <udp_sendto_if_src+0xa4>
    return ERR_MEM;
 8013f66:	f04f 34ff 	mov.w	r4, #4294967295
 8013f6a:	e7c8      	b.n	8013efe <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	4630      	mov	r0, r6
 8013f70:	f7ff fec0 	bl	8013cf4 <udp_bind>
    if (err != ERR_OK) {
 8013f74:	4604      	mov	r4, r0
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d0ef      	beq.n	8013f5a <udp_sendto_if_src+0x82>
 8013f7a:	e7c0      	b.n	8013efe <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013f7c:	2108      	movs	r1, #8
 8013f7e:	4640      	mov	r0, r8
 8013f80:	f7fb f9c4 	bl	800f30c <pbuf_add_header>
 8013f84:	2800      	cmp	r0, #0
 8013f86:	d05c      	beq.n	8014042 <udp_sendto_if_src+0x16a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013f88:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f8c:	2108      	movs	r1, #8
 8013f8e:	2036      	movs	r0, #54	; 0x36
 8013f90:	f7fb fa5e 	bl	800f450 <pbuf_alloc>
    if (q == NULL) {
 8013f94:	4605      	mov	r5, r0
 8013f96:	2800      	cmp	r0, #0
 8013f98:	d0e5      	beq.n	8013f66 <udp_sendto_if_src+0x8e>
    if (p->tot_len != 0) {
 8013f9a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8013f9e:	b113      	cbz	r3, 8013fa6 <udp_sendto_if_src+0xce>
      pbuf_chain(q, p);
 8013fa0:	4641      	mov	r1, r8
 8013fa2:	f7fb fb9f 	bl	800f6e4 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013fa6:	896b      	ldrh	r3, [r5, #10]
 8013fa8:	2b07      	cmp	r3, #7
 8013faa:	d806      	bhi.n	8013fba <udp_sendto_if_src+0xe2>
 8013fac:	4b2f      	ldr	r3, [pc, #188]	; (801406c <udp_sendto_if_src+0x194>)
 8013fae:	4936      	ldr	r1, [pc, #216]	; (8014088 <udp_sendto_if_src+0x1b0>)
 8013fb0:	4830      	ldr	r0, [pc, #192]	; (8014074 <udp_sendto_if_src+0x19c>)
 8013fb2:	f240 320d 	movw	r2, #781	; 0x30d
 8013fb6:	f008 fdb7 	bl	801cb28 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8013fba:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
  udphdr = (struct udp_hdr *)q->payload;
 8013fbc:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8013fbe:	f7fa f86f 	bl	800e0a0 <lwip_htons>
 8013fc2:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013fc4:	4658      	mov	r0, fp
 8013fc6:	f7fa f86b 	bl	800e0a0 <lwip_htons>
  udphdr->chksum = 0x0000;
 8013fca:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8013fcc:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 8013fce:	71a3      	strb	r3, [r4, #6]
 8013fd0:	71e3      	strb	r3, [r4, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8013fd2:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8013fd6:	071b      	lsls	r3, r3, #28
 8013fd8:	d50d      	bpl.n	8013ff6 <udp_sendto_if_src+0x11e>
 8013fda:	7d3a      	ldrb	r2, [r7, #20]
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	2a06      	cmp	r2, #6
 8013fe0:	d131      	bne.n	8014046 <udp_sendto_if_src+0x16e>
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2bff      	cmp	r3, #255	; 0xff
 8013fe6:	bf14      	ite	ne
 8013fe8:	2300      	movne	r3, #0
 8013fea:	2301      	moveq	r3, #1
 8013fec:	b11b      	cbz	r3, 8013ff6 <udp_sendto_if_src+0x11e>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8013fee:	7b6b      	ldrb	r3, [r5, #13]
 8013ff0:	f043 0304 	orr.w	r3, r3, #4
 8013ff4:	736b      	strb	r3, [r5, #13]
    udphdr->len = lwip_htons(q->tot_len);
 8013ff6:	8928      	ldrh	r0, [r5, #8]
 8013ff8:	f7fa f852 	bl	800e0a0 <lwip_htons>
 8013ffc:	80a0      	strh	r0, [r4, #4]
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8013ffe:	7d39      	ldrb	r1, [r7, #20]
 8014000:	2906      	cmp	r1, #6
 8014002:	d124      	bne.n	801404e <udp_sendto_if_src+0x176>
 8014004:	783b      	ldrb	r3, [r7, #0]
 8014006:	2bff      	cmp	r3, #255	; 0xff
 8014008:	bf14      	ite	ne
 801400a:	2300      	movne	r3, #0
 801400c:	2301      	moveq	r3, #1
 801400e:	b31b      	cbz	r3, 8014058 <udp_sendto_if_src+0x180>
 8014010:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014014:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 8014018:	f8cd a008 	str.w	sl, [sp, #8]
 801401c:	2906      	cmp	r1, #6
 801401e:	f04f 0111 	mov.w	r1, #17
 8014022:	e9cd 2100 	strd	r2, r1, [sp]
 8014026:	4628      	mov	r0, r5
 8014028:	463a      	mov	r2, r7
 801402a:	4649      	mov	r1, r9
 801402c:	d117      	bne.n	801405e <udp_sendto_if_src+0x186>
 801402e:	f7f7 fd89 	bl	800bb44 <ip6_output_if_src>
  if (q != p) {
 8014032:	4545      	cmp	r5, r8
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014034:	4604      	mov	r4, r0
  if (q != p) {
 8014036:	f43f af62 	beq.w	8013efe <udp_sendto_if_src+0x26>
    pbuf_free(q);
 801403a:	4628      	mov	r0, r5
 801403c:	f7fb f9a0 	bl	800f380 <pbuf_free>
    q = NULL;
 8014040:	e75d      	b.n	8013efe <udp_sendto_if_src+0x26>
 8014042:	4645      	mov	r5, r8
 8014044:	e7af      	b.n	8013fa6 <udp_sendto_if_src+0xce>
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8014046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801404a:	2be0      	cmp	r3, #224	; 0xe0
 801404c:	e7cb      	b.n	8013fe6 <udp_sendto_if_src+0x10e>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014054:	2be0      	cmp	r3, #224	; 0xe0
 8014056:	e7d7      	b.n	8014008 <udp_sendto_if_src+0x130>
 8014058:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 801405c:	e7da      	b.n	8014014 <udp_sendto_if_src+0x13c>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801405e:	f7f6 fadd 	bl	800a61c <ip4_output_if_src>
 8014062:	e7e6      	b.n	8014032 <udp_sendto_if_src+0x15a>
    return ERR_VAL;
 8014064:	f06f 0405 	mvn.w	r4, #5
 8014068:	e749      	b.n	8013efe <udp_sendto_if_src+0x26>
 801406a:	bf00      	nop
 801406c:	0802e9f8 	.word	0x0802e9f8
 8014070:	0802eae7 	.word	0x0802eae7
 8014074:	0802aecf 	.word	0x0802aecf
 8014078:	0802eb06 	.word	0x0802eb06
 801407c:	0802eb26 	.word	0x0802eb26
 8014080:	0802eb48 	.word	0x0802eb48
 8014084:	0802eb6a 	.word	0x0802eb6a
 8014088:	0802eb8b 	.word	0x0802eb8b

0801408c <udp_sendto_if>:
{
 801408c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014090:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014092:	4688      	mov	r8, r1
 8014094:	4616      	mov	r6, r2
 8014096:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014098:	4604      	mov	r4, r0
 801409a:	b958      	cbnz	r0, 80140b4 <udp_sendto_if+0x28>
 801409c:	4b2c      	ldr	r3, [pc, #176]	; (8014150 <udp_sendto_if+0xc4>)
 801409e:	492d      	ldr	r1, [pc, #180]	; (8014154 <udp_sendto_if+0xc8>)
 80140a0:	f44f 7220 	mov.w	r2, #640	; 0x280
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80140a4:	482c      	ldr	r0, [pc, #176]	; (8014158 <udp_sendto_if+0xcc>)
 80140a6:	f008 fd3f 	bl	801cb28 <iprintf>
 80140aa:	f06f 000f 	mvn.w	r0, #15
}
 80140ae:	b003      	add	sp, #12
 80140b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80140b4:	b921      	cbnz	r1, 80140c0 <udp_sendto_if+0x34>
 80140b6:	4b26      	ldr	r3, [pc, #152]	; (8014150 <udp_sendto_if+0xc4>)
 80140b8:	4928      	ldr	r1, [pc, #160]	; (801415c <udp_sendto_if+0xd0>)
 80140ba:	f240 2281 	movw	r2, #641	; 0x281
 80140be:	e7f1      	b.n	80140a4 <udp_sendto_if+0x18>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80140c0:	b922      	cbnz	r2, 80140cc <udp_sendto_if+0x40>
 80140c2:	4b23      	ldr	r3, [pc, #140]	; (8014150 <udp_sendto_if+0xc4>)
 80140c4:	4926      	ldr	r1, [pc, #152]	; (8014160 <udp_sendto_if+0xd4>)
 80140c6:	f240 2282 	movw	r2, #642	; 0x282
 80140ca:	e7eb      	b.n	80140a4 <udp_sendto_if+0x18>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80140cc:	b927      	cbnz	r7, 80140d8 <udp_sendto_if+0x4c>
 80140ce:	4b20      	ldr	r3, [pc, #128]	; (8014150 <udp_sendto_if+0xc4>)
 80140d0:	4924      	ldr	r1, [pc, #144]	; (8014164 <udp_sendto_if+0xd8>)
 80140d2:	f240 2283 	movw	r2, #643	; 0x283
 80140d6:	e7e5      	b.n	80140a4 <udp_sendto_if+0x18>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80140d8:	7d02      	ldrb	r2, [r0, #20]
 80140da:	7d33      	ldrb	r3, [r6, #20]
 80140dc:	2a2e      	cmp	r2, #46	; 0x2e
 80140de:	d001      	beq.n	80140e4 <udp_sendto_if+0x58>
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d132      	bne.n	801414a <udp_sendto_if+0xbe>
  if (IP_IS_V6(dst_ip)) {
 80140e4:	2b06      	cmp	r3, #6
 80140e6:	6820      	ldr	r0, [r4, #0]
 80140e8:	d123      	bne.n	8014132 <udp_sendto_if+0xa6>
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 80140ea:	b9a8      	cbnz	r0, 8014118 <udp_sendto_if+0x8c>
 80140ec:	6863      	ldr	r3, [r4, #4]
 80140ee:	b91b      	cbnz	r3, 80140f8 <udp_sendto_if+0x6c>
 80140f0:	68a3      	ldr	r3, [r4, #8]
 80140f2:	b90b      	cbnz	r3, 80140f8 <udp_sendto_if+0x6c>
 80140f4:	68e3      	ldr	r3, [r4, #12]
 80140f6:	b193      	cbz	r3, 801411e <udp_sendto_if+0x92>
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 80140f8:	4621      	mov	r1, r4
 80140fa:	4638      	mov	r0, r7
 80140fc:	f7fb f814 	bl	800f128 <netif_get_ip6_addr_match>
 8014100:	2800      	cmp	r0, #0
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 8014102:	4625      	mov	r5, r4
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 8014104:	db12      	blt.n	801412c <udp_sendto_if+0xa0>
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014106:	e9cd 7500 	strd	r7, r5, [sp]
 801410a:	464b      	mov	r3, r9
 801410c:	4632      	mov	r2, r6
 801410e:	4641      	mov	r1, r8
 8014110:	4620      	mov	r0, r4
 8014112:	f7ff fee1 	bl	8013ed8 <udp_sendto_if_src>
 8014116:	e7ca      	b.n	80140ae <udp_sendto_if+0x22>
        ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
 8014118:	b2c0      	uxtb	r0, r0
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 801411a:	28ff      	cmp	r0, #255	; 0xff
 801411c:	d1ec      	bne.n	80140f8 <udp_sendto_if+0x6c>
      src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
 801411e:	4631      	mov	r1, r6
 8014120:	4638      	mov	r0, r7
 8014122:	f7f7 fa53 	bl	800b5cc <ip6_select_source_address>
      if (src_ip == NULL) {
 8014126:	4605      	mov	r5, r0
 8014128:	2800      	cmp	r0, #0
 801412a:	d1ec      	bne.n	8014106 <udp_sendto_if+0x7a>
        return ERR_RTE;
 801412c:	f06f 0003 	mvn.w	r0, #3
 8014130:	e7bd      	b.n	80140ae <udp_sendto_if+0x22>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014132:	b118      	cbz	r0, 801413c <udp_sendto_if+0xb0>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014134:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014138:	2be0      	cmp	r3, #224	; 0xe0
 801413a:	d101      	bne.n	8014140 <udp_sendto_if+0xb4>
      src_ip = netif_ip_addr4(netif);
 801413c:	1d3d      	adds	r5, r7, #4
 801413e:	e7e2      	b.n	8014106 <udp_sendto_if+0x7a>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	4283      	cmp	r3, r0
 8014144:	d1f2      	bne.n	801412c <udp_sendto_if+0xa0>
      src_ip = &pcb->local_ip;
 8014146:	4625      	mov	r5, r4
 8014148:	e7dd      	b.n	8014106 <udp_sendto_if+0x7a>
    return ERR_VAL;
 801414a:	f06f 0005 	mvn.w	r0, #5
 801414e:	e7ae      	b.n	80140ae <udp_sendto_if+0x22>
 8014150:	0802e9f8 	.word	0x0802e9f8
 8014154:	0802ebb9 	.word	0x0802ebb9
 8014158:	0802aecf 	.word	0x0802aecf
 801415c:	0802ebd4 	.word	0x0802ebd4
 8014160:	0802ebf0 	.word	0x0802ebf0
 8014164:	0802ec0e 	.word	0x0802ec0e

08014168 <udp_sendto>:
{
 8014168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801416a:	460d      	mov	r5, r1
 801416c:	4617      	mov	r7, r2
 801416e:	461e      	mov	r6, r3
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014170:	4604      	mov	r4, r0
 8014172:	b950      	cbnz	r0, 801418a <udp_sendto+0x22>
 8014174:	4b2d      	ldr	r3, [pc, #180]	; (801422c <udp_sendto+0xc4>)
 8014176:	492e      	ldr	r1, [pc, #184]	; (8014230 <udp_sendto+0xc8>)
 8014178:	f44f 7206 	mov.w	r2, #536	; 0x218
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801417c:	482d      	ldr	r0, [pc, #180]	; (8014234 <udp_sendto+0xcc>)
 801417e:	f008 fcd3 	bl	801cb28 <iprintf>
 8014182:	f06f 000f 	mvn.w	r0, #15
}
 8014186:	b003      	add	sp, #12
 8014188:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801418a:	b921      	cbnz	r1, 8014196 <udp_sendto+0x2e>
 801418c:	4b27      	ldr	r3, [pc, #156]	; (801422c <udp_sendto+0xc4>)
 801418e:	492a      	ldr	r1, [pc, #168]	; (8014238 <udp_sendto+0xd0>)
 8014190:	f240 2219 	movw	r2, #537	; 0x219
 8014194:	e7f2      	b.n	801417c <udp_sendto+0x14>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014196:	b922      	cbnz	r2, 80141a2 <udp_sendto+0x3a>
 8014198:	4b24      	ldr	r3, [pc, #144]	; (801422c <udp_sendto+0xc4>)
 801419a:	4928      	ldr	r1, [pc, #160]	; (801423c <udp_sendto+0xd4>)
 801419c:	f240 221a 	movw	r2, #538	; 0x21a
 80141a0:	e7ec      	b.n	801417c <udp_sendto+0x14>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80141a2:	7d03      	ldrb	r3, [r0, #20]
 80141a4:	2b2e      	cmp	r3, #46	; 0x2e
 80141a6:	d002      	beq.n	80141ae <udp_sendto+0x46>
 80141a8:	7d12      	ldrb	r2, [r2, #20]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d13a      	bne.n	8014224 <udp_sendto+0xbc>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80141ae:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80141b2:	b128      	cbz	r0, 80141c0 <udp_sendto+0x58>
    netif = netif_get_by_index(pcb->netif_idx);
 80141b4:	f7fa fffc 	bl	800f1b0 <netif_get_by_index>
  if (netif == NULL) {
 80141b8:	b9c0      	cbnz	r0, 80141ec <udp_sendto+0x84>
    return ERR_RTE;
 80141ba:	f06f 0003 	mvn.w	r0, #3
 80141be:	e7e2      	b.n	8014186 <udp_sendto+0x1e>
    if (ip_addr_ismulticast(dst_ip)) {
 80141c0:	7d3a      	ldrb	r2, [r7, #20]
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	2a06      	cmp	r2, #6
 80141c6:	d107      	bne.n	80141d8 <udp_sendto+0x70>
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	2bff      	cmp	r3, #255	; 0xff
 80141cc:	d008      	beq.n	80141e0 <udp_sendto+0x78>
      netif = ip_route(&pcb->local_ip, dst_ip);
 80141ce:	4639      	mov	r1, r7
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7f7 f8f3 	bl	800b3bc <ip6_route>
 80141d6:	e7ef      	b.n	80141b8 <udp_sendto+0x50>
    if (ip_addr_ismulticast(dst_ip)) {
 80141d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141dc:	2be0      	cmp	r3, #224	; 0xe0
 80141de:	d111      	bne.n	8014204 <udp_sendto+0x9c>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 80141e0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80141e4:	b150      	cbz	r0, 80141fc <udp_sendto+0x94>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 80141e6:	f7fa ffe3 	bl	800f1b0 <netif_get_by_index>
    if (netif == NULL)
 80141ea:	b140      	cbz	r0, 80141fe <udp_sendto+0x96>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80141ec:	9000      	str	r0, [sp, #0]
 80141ee:	4633      	mov	r3, r6
 80141f0:	463a      	mov	r2, r7
 80141f2:	4629      	mov	r1, r5
 80141f4:	4620      	mov	r0, r4
 80141f6:	f7ff ff49 	bl	801408c <udp_sendto_if>
 80141fa:	e7c4      	b.n	8014186 <udp_sendto+0x1e>
        if (IP_IS_V4(dst_ip))
 80141fc:	b132      	cbz	r2, 801420c <udp_sendto+0xa4>
      netif = ip_route(&pcb->local_ip, dst_ip);
 80141fe:	7d3b      	ldrb	r3, [r7, #20]
 8014200:	2b06      	cmp	r3, #6
 8014202:	d0e4      	beq.n	80141ce <udp_sendto+0x66>
 8014204:	4638      	mov	r0, r7
 8014206:	f7f6 f8ff 	bl	800a408 <ip4_route>
 801420a:	e7d5      	b.n	80141b8 <udp_sendto+0x50>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 801420c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801420e:	2b00      	cmp	r3, #0
 8014210:	d0f8      	beq.n	8014204 <udp_sendto+0x9c>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8014212:	4a0b      	ldr	r2, [pc, #44]	; (8014240 <udp_sendto+0xd8>)
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8014214:	6812      	ldr	r2, [r2, #0]
 8014216:	4293      	cmp	r3, r2
 8014218:	d0f4      	beq.n	8014204 <udp_sendto+0x9c>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 801421a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801421e:	f7f6 f8f3 	bl	800a408 <ip4_route>
 8014222:	e7e2      	b.n	80141ea <udp_sendto+0x82>
    return ERR_VAL;
 8014224:	f06f 0005 	mvn.w	r0, #5
 8014228:	e7ad      	b.n	8014186 <udp_sendto+0x1e>
 801422a:	bf00      	nop
 801422c:	0802e9f8 	.word	0x0802e9f8
 8014230:	0802ec2b 	.word	0x0802ec2b
 8014234:	0802aecf 	.word	0x0802aecf
 8014238:	0802ec43 	.word	0x0802ec43
 801423c:	0802ec5c 	.word	0x0802ec5c
 8014240:	0801fc14 	.word	0x0801fc14

08014244 <udp_send>:
{
 8014244:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014246:	4602      	mov	r2, r0
 8014248:	b948      	cbnz	r0, 801425e <udp_send+0x1a>
 801424a:	4b0e      	ldr	r3, [pc, #56]	; (8014284 <udp_send+0x40>)
 801424c:	490e      	ldr	r1, [pc, #56]	; (8014288 <udp_send+0x44>)
 801424e:	f240 12d5 	movw	r2, #469	; 0x1d5
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014252:	480e      	ldr	r0, [pc, #56]	; (801428c <udp_send+0x48>)
 8014254:	f008 fc68 	bl	801cb28 <iprintf>
 8014258:	f06f 000f 	mvn.w	r0, #15
}
 801425c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801425e:	b921      	cbnz	r1, 801426a <udp_send+0x26>
 8014260:	4b08      	ldr	r3, [pc, #32]	; (8014284 <udp_send+0x40>)
 8014262:	490b      	ldr	r1, [pc, #44]	; (8014290 <udp_send+0x4c>)
 8014264:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014268:	e7f3      	b.n	8014252 <udp_send+0xe>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 801426a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801426e:	2b2e      	cmp	r3, #46	; 0x2e
 8014270:	d005      	beq.n	801427e <udp_send+0x3a>
}
 8014272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8014276:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8014278:	3218      	adds	r2, #24
 801427a:	f7ff bf75 	b.w	8014168 <udp_sendto>
    return ERR_VAL;
 801427e:	f06f 0005 	mvn.w	r0, #5
 8014282:	e7eb      	b.n	801425c <udp_send+0x18>
 8014284:	0802e9f8 	.word	0x0802e9f8
 8014288:	0802ec77 	.word	0x0802ec77
 801428c:	0802aecf 	.word	0x0802aecf
 8014290:	0802ec8d 	.word	0x0802ec8d

08014294 <udp_bind_netif>:
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8014294:	b119      	cbz	r1, 801429e <udp_bind_netif+0xa>
    pcb->netif_idx = netif_get_index(netif);
 8014296:	f891 10de 	ldrb.w	r1, [r1, #222]	; 0xde
 801429a:	3101      	adds	r1, #1
 801429c:	b2c9      	uxtb	r1, r1
 801429e:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80142a2:	4770      	bx	lr

080142a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80142a4:	b570      	push	{r4, r5, r6, lr}
 80142a6:	460d      	mov	r5, r1
 80142a8:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80142aa:	4604      	mov	r4, r0
 80142ac:	b948      	cbnz	r0, 80142c2 <udp_connect+0x1e>
 80142ae:	4b3e      	ldr	r3, [pc, #248]	; (80143a8 <udp_connect+0x104>)
 80142b0:	493e      	ldr	r1, [pc, #248]	; (80143ac <udp_connect+0x108>)
 80142b2:	f240 4235 	movw	r2, #1077	; 0x435
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80142b6:	483e      	ldr	r0, [pc, #248]	; (80143b0 <udp_connect+0x10c>)
 80142b8:	f008 fc36 	bl	801cb28 <iprintf>
 80142bc:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 80142c0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80142c2:	b921      	cbnz	r1, 80142ce <udp_connect+0x2a>
 80142c4:	4b38      	ldr	r3, [pc, #224]	; (80143a8 <udp_connect+0x104>)
 80142c6:	493b      	ldr	r1, [pc, #236]	; (80143b4 <udp_connect+0x110>)
 80142c8:	f240 4236 	movw	r2, #1078	; 0x436
 80142cc:	e7f3      	b.n	80142b6 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 80142ce:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 80142d0:	b1fa      	cbz	r2, 8014312 <udp_connect+0x6e>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80142d2:	7d2b      	ldrb	r3, [r5, #20]
 80142d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80142d8:	2b06      	cmp	r3, #6
 80142da:	d120      	bne.n	801431e <udp_connect+0x7a>
 80142dc:	682b      	ldr	r3, [r5, #0]
 80142de:	61a3      	str	r3, [r4, #24]
 80142e0:	686a      	ldr	r2, [r5, #4]
 80142e2:	61e2      	str	r2, [r4, #28]
 80142e4:	68aa      	ldr	r2, [r5, #8]
 80142e6:	6222      	str	r2, [r4, #32]
 80142e8:	68ea      	ldr	r2, [r5, #12]
 80142ea:	7c2d      	ldrb	r5, [r5, #16]
 80142ec:	6262      	str	r2, [r4, #36]	; 0x24
 80142ee:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  if (IP_IS_V6(&pcb->remote_ip) &&
 80142f2:	b1ed      	cbz	r5, 8014330 <udp_connect+0x8c>
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80142f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  pcb->remote_port = port;
 80142f8:	87a6      	strh	r6, [r4, #60]	; 0x3c
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80142fa:	f043 0304 	orr.w	r3, r3, #4
 80142fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014302:	4b2d      	ldr	r3, [pc, #180]	; (80143b8 <udp_connect+0x114>)
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	4610      	mov	r0, r2
 8014308:	2800      	cmp	r0, #0
 801430a:	d146      	bne.n	801439a <udp_connect+0xf6>
  pcb->next = udp_pcbs;
 801430c:	6362      	str	r2, [r4, #52]	; 0x34
  udp_pcbs = pcb;
 801430e:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8014310:	e7d6      	b.n	80142c0 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014312:	4601      	mov	r1, r0
 8014314:	f7ff fcee 	bl	8013cf4 <udp_bind>
    if (err != ERR_OK) {
 8014318:	2800      	cmp	r0, #0
 801431a:	d0da      	beq.n	80142d2 <udp_connect+0x2e>
 801431c:	e7d0      	b.n	80142c0 <udp_connect+0x1c>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801431e:	682b      	ldr	r3, [r5, #0]
 8014320:	61a3      	str	r3, [r4, #24]
 8014322:	2300      	movs	r3, #0
 8014324:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8014328:	61e3      	str	r3, [r4, #28]
 801432a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  if (IP_IS_V6(&pcb->remote_ip) &&
 801432e:	e7e1      	b.n	80142f4 <udp_connect+0x50>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 8014330:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8014334:	4019      	ands	r1, r3
 8014336:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801433a:	4291      	cmp	r1, r2
 801433c:	d00b      	beq.n	8014356 <udp_connect+0xb2>
 801433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014342:	041b      	lsls	r3, r3, #16
 8014344:	0c1b      	lsrs	r3, r3, #16
 8014346:	f240 12ff 	movw	r2, #511	; 0x1ff
 801434a:	4293      	cmp	r3, r2
 801434c:	d003      	beq.n	8014356 <udp_connect+0xb2>
 801434e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014352:	4293      	cmp	r3, r2
 8014354:	d1ce      	bne.n	80142f4 <udp_connect+0x50>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
 8014356:	f104 0118 	add.w	r1, r4, #24
 801435a:	4620      	mov	r0, r4
 801435c:	f7f7 f82e 	bl	800b3bc <ip6_route>
 8014360:	2800      	cmp	r0, #0
 8014362:	d0c7      	beq.n	80142f4 <udp_connect+0x50>
 8014364:	69a3      	ldr	r3, [r4, #24]
 8014366:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801436a:	4019      	ands	r1, r3
 801436c:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014370:	4291      	cmp	r1, r2
 8014372:	d00b      	beq.n	801438c <udp_connect+0xe8>
 8014374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014378:	041b      	lsls	r3, r3, #16
 801437a:	0c1b      	lsrs	r3, r3, #16
 801437c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014380:	4293      	cmp	r3, r2
 8014382:	d003      	beq.n	801438c <udp_connect+0xe8>
 8014384:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014388:	4293      	cmp	r3, r2
 801438a:	d103      	bne.n	8014394 <udp_connect+0xf0>
 801438c:	f890 50de 	ldrb.w	r5, [r0, #222]	; 0xde
 8014390:	3501      	adds	r5, #1
 8014392:	b2ed      	uxtb	r5, r5
 8014394:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8014398:	e7ac      	b.n	80142f4 <udp_connect+0x50>
    if (pcb == ipcb) {
 801439a:	42a0      	cmp	r0, r4
 801439c:	d001      	beq.n	80143a2 <udp_connect+0xfe>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801439e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80143a0:	e7b2      	b.n	8014308 <udp_connect+0x64>
      return ERR_OK;
 80143a2:	2000      	movs	r0, #0
 80143a4:	e78c      	b.n	80142c0 <udp_connect+0x1c>
 80143a6:	bf00      	nop
 80143a8:	0802e9f8 	.word	0x0802e9f8
 80143ac:	0802eca4 	.word	0x0802eca4
 80143b0:	0802aecf 	.word	0x0802aecf
 80143b4:	0802ecbd 	.word	0x0802ecbd
 80143b8:	2001612c 	.word	0x2001612c

080143bc <udp_disconnect>:
void
udp_disconnect(struct udp_pcb *pcb)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80143bc:	b930      	cbnz	r0, 80143cc <udp_disconnect+0x10>
 80143be:	4b1e      	ldr	r3, [pc, #120]	; (8014438 <udp_disconnect+0x7c>)
 80143c0:	491e      	ldr	r1, [pc, #120]	; (801443c <udp_disconnect+0x80>)
 80143c2:	481f      	ldr	r0, [pc, #124]	; (8014440 <udp_disconnect+0x84>)
 80143c4:	f240 426a 	movw	r2, #1130	; 0x46a
 80143c8:	f008 bbae 	b.w	801cb28 <iprintf>

  /* reset remote address association */
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 80143cc:	7d03      	ldrb	r3, [r0, #20]
 80143ce:	2b2e      	cmp	r3, #46	; 0x2e
 80143d0:	d116      	bne.n	8014400 <udp_disconnect+0x44>
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
 80143d2:	4b1c      	ldr	r3, [pc, #112]	; (8014444 <udp_disconnect+0x88>)
 80143d4:	7d19      	ldrb	r1, [r3, #20]
 80143d6:	681a      	ldr	r2, [r3, #0]
 80143d8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80143dc:	2906      	cmp	r1, #6
 80143de:	6182      	str	r2, [r0, #24]
 80143e0:	d109      	bne.n	80143f6 <udp_disconnect+0x3a>
 80143e2:	685a      	ldr	r2, [r3, #4]
 80143e4:	61c2      	str	r2, [r0, #28]
 80143e6:	689a      	ldr	r2, [r3, #8]
 80143e8:	6202      	str	r2, [r0, #32]
 80143ea:	68da      	ldr	r2, [r3, #12]
 80143ec:	7c1b      	ldrb	r3, [r3, #16]
 80143ee:	6242      	str	r2, [r0, #36]	; 0x24
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80143f0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80143f4:	e011      	b.n	801441a <udp_disconnect+0x5e>
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
 80143f6:	2300      	movs	r3, #0
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80143f8:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80143fc:	61c3      	str	r3, [r0, #28]
 80143fe:	e7f7      	b.n	80143f0 <udp_disconnect+0x34>
 8014400:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8014404:	2300      	movs	r3, #0
 8014406:	2a06      	cmp	r2, #6
 8014408:	6183      	str	r3, [r0, #24]
 801440a:	d111      	bne.n	8014430 <udp_disconnect+0x74>
 801440c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014410:	6243      	str	r3, [r0, #36]	; 0x24
 8014412:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014416:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801441a:	2300      	movs	r3, #0
 801441c:	8783      	strh	r3, [r0, #60]	; 0x3c
  pcb->netif_idx = NETIF_NO_INDEX;
 801441e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8014422:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014426:	f023 0304 	bic.w	r3, r3, #4
 801442a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 801442e:	4770      	bx	lr
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8014430:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8014434:	e7e0      	b.n	80143f8 <udp_disconnect+0x3c>
 8014436:	bf00      	nop
 8014438:	0802e9f8 	.word	0x0802e9f8
 801443c:	0802ecd9 	.word	0x0802ecd9
 8014440:	0802aecf 	.word	0x0802aecf
 8014444:	0801fc9c 	.word	0x0801fc9c

08014448 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014448:	b930      	cbnz	r0, 8014458 <udp_recv+0x10>
 801444a:	4b05      	ldr	r3, [pc, #20]	; (8014460 <udp_recv+0x18>)
 801444c:	4905      	ldr	r1, [pc, #20]	; (8014464 <udp_recv+0x1c>)
 801444e:	4806      	ldr	r0, [pc, #24]	; (8014468 <udp_recv+0x20>)
 8014450:	f240 428a 	movw	r2, #1162	; 0x48a
 8014454:	f008 bb68 	b.w	801cb28 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8014458:	e9c0 1212 	strd	r1, r2, [r0, #72]	; 0x48
}
 801445c:	4770      	bx	lr
 801445e:	bf00      	nop
 8014460:	0802e9f8 	.word	0x0802e9f8
 8014464:	0802ecf5 	.word	0x0802ecf5
 8014468:	0802aecf 	.word	0x0802aecf

0801446c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801446c:	4601      	mov	r1, r0
 801446e:	b930      	cbnz	r0, 801447e <udp_remove+0x12>
 8014470:	4b0d      	ldr	r3, [pc, #52]	; (80144a8 <udp_remove+0x3c>)
 8014472:	490e      	ldr	r1, [pc, #56]	; (80144ac <udp_remove+0x40>)
 8014474:	480e      	ldr	r0, [pc, #56]	; (80144b0 <udp_remove+0x44>)
 8014476:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801447a:	f008 bb55 	b.w	801cb28 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801447e:	4a0d      	ldr	r2, [pc, #52]	; (80144b4 <udp_remove+0x48>)
 8014480:	6813      	ldr	r3, [r2, #0]
 8014482:	4283      	cmp	r3, r0
 8014484:	d105      	bne.n	8014492 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014486:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014488:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801448a:	2000      	movs	r0, #0
 801448c:	f7fa bc0a 	b.w	800eca4 <memp_free>
 8014490:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014492:	2b00      	cmp	r3, #0
 8014494:	d0f9      	beq.n	801448a <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014498:	2a00      	cmp	r2, #0
 801449a:	d0f6      	beq.n	801448a <udp_remove+0x1e>
 801449c:	428a      	cmp	r2, r1
 801449e:	d1f7      	bne.n	8014490 <udp_remove+0x24>
        pcb2->next = pcb->next;
 80144a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80144a2:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80144a4:	e7f1      	b.n	801448a <udp_remove+0x1e>
 80144a6:	bf00      	nop
 80144a8:	0802e9f8 	.word	0x0802e9f8
 80144ac:	0802ed0b 	.word	0x0802ed0b
 80144b0:	0802aecf 	.word	0x0802aecf
 80144b4:	2001612c 	.word	0x2001612c

080144b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80144b8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80144ba:	2000      	movs	r0, #0
 80144bc:	f7fa fbd6 	bl	800ec6c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80144c0:	4604      	mov	r4, r0
 80144c2:	b140      	cbz	r0, 80144d6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80144c4:	2250      	movs	r2, #80	; 0x50
 80144c6:	2100      	movs	r1, #0
 80144c8:	f007 fee2 	bl	801c290 <memset>
    pcb->ttl = UDP_TTL;
 80144cc:	23ff      	movs	r3, #255	; 0xff
 80144ce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 80144d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80144d6:	4620      	mov	r0, r4
 80144d8:	bd10      	pop	{r4, pc}

080144da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80144da:	b510      	push	{r4, lr}
 80144dc:	4604      	mov	r4, r0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80144de:	f7ff ffeb 	bl	80144b8 <udp_new>
#if LWIP_IPV4 && LWIP_IPV6
  if (pcb != NULL) {
 80144e2:	b110      	cbz	r0, 80144ea <udp_new_ip_type+0x10>
    IP_SET_TYPE_VAL(pcb->local_ip,  type);
 80144e4:	7504      	strb	r4, [r0, #20]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
 80144e6:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80144ea:	bd10      	pop	{r4, pc}

080144ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80144ec:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80144ee:	b320      	cbz	r0, 801453a <udp_netif_ip_addr_changed+0x4e>
 80144f0:	7d02      	ldrb	r2, [r0, #20]
 80144f2:	6803      	ldr	r3, [r0, #0]
 80144f4:	2a06      	cmp	r2, #6
 80144f6:	d105      	bne.n	8014504 <udp_netif_ip_addr_changed+0x18>
 80144f8:	b943      	cbnz	r3, 801450c <udp_netif_ip_addr_changed+0x20>
 80144fa:	6843      	ldr	r3, [r0, #4]
 80144fc:	b933      	cbnz	r3, 801450c <udp_netif_ip_addr_changed+0x20>
 80144fe:	6883      	ldr	r3, [r0, #8]
 8014500:	b923      	cbnz	r3, 801450c <udp_netif_ip_addr_changed+0x20>
 8014502:	68c3      	ldr	r3, [r0, #12]
 8014504:	3b00      	subs	r3, #0
 8014506:	bf18      	it	ne
 8014508:	2301      	movne	r3, #1
 801450a:	e000      	b.n	801450e <udp_netif_ip_addr_changed+0x22>
 801450c:	2301      	movs	r3, #1
 801450e:	b1a3      	cbz	r3, 801453a <udp_netif_ip_addr_changed+0x4e>
 8014510:	b199      	cbz	r1, 801453a <udp_netif_ip_addr_changed+0x4e>
 8014512:	7d0a      	ldrb	r2, [r1, #20]
 8014514:	680b      	ldr	r3, [r1, #0]
 8014516:	2a06      	cmp	r2, #6
 8014518:	d105      	bne.n	8014526 <udp_netif_ip_addr_changed+0x3a>
 801451a:	b943      	cbnz	r3, 801452e <udp_netif_ip_addr_changed+0x42>
 801451c:	684b      	ldr	r3, [r1, #4]
 801451e:	b933      	cbnz	r3, 801452e <udp_netif_ip_addr_changed+0x42>
 8014520:	688b      	ldr	r3, [r1, #8]
 8014522:	b923      	cbnz	r3, 801452e <udp_netif_ip_addr_changed+0x42>
 8014524:	68cb      	ldr	r3, [r1, #12]
 8014526:	3b00      	subs	r3, #0
 8014528:	bf18      	it	ne
 801452a:	2301      	movne	r3, #1
 801452c:	e000      	b.n	8014530 <udp_netif_ip_addr_changed+0x44>
 801452e:	2301      	movs	r3, #1
 8014530:	b11b      	cbz	r3, 801453a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014532:	4b1c      	ldr	r3, [pc, #112]	; (80145a4 <udp_netif_ip_addr_changed+0xb8>)
 8014534:	681b      	ldr	r3, [r3, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014536:	2400      	movs	r4, #0
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014538:	b903      	cbnz	r3, 801453c <udp_netif_ip_addr_changed+0x50>
      }
    }
  }
}
 801453a:	bd70      	pop	{r4, r5, r6, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801453c:	7d1a      	ldrb	r2, [r3, #20]
 801453e:	7d06      	ldrb	r6, [r0, #20]
 8014540:	4296      	cmp	r6, r2
 8014542:	d128      	bne.n	8014596 <udp_netif_ip_addr_changed+0xaa>
 8014544:	2e06      	cmp	r6, #6
 8014546:	681d      	ldr	r5, [r3, #0]
 8014548:	6802      	ldr	r2, [r0, #0]
 801454a:	d10f      	bne.n	801456c <udp_netif_ip_addr_changed+0x80>
 801454c:	42aa      	cmp	r2, r5
 801454e:	d111      	bne.n	8014574 <udp_netif_ip_addr_changed+0x88>
 8014550:	685d      	ldr	r5, [r3, #4]
 8014552:	6842      	ldr	r2, [r0, #4]
 8014554:	4295      	cmp	r5, r2
 8014556:	d10d      	bne.n	8014574 <udp_netif_ip_addr_changed+0x88>
 8014558:	689d      	ldr	r5, [r3, #8]
 801455a:	6882      	ldr	r2, [r0, #8]
 801455c:	4295      	cmp	r5, r2
 801455e:	d109      	bne.n	8014574 <udp_netif_ip_addr_changed+0x88>
 8014560:	68dd      	ldr	r5, [r3, #12]
 8014562:	68c2      	ldr	r2, [r0, #12]
 8014564:	4295      	cmp	r5, r2
 8014566:	d105      	bne.n	8014574 <udp_netif_ip_addr_changed+0x88>
 8014568:	7c1a      	ldrb	r2, [r3, #16]
 801456a:	7c05      	ldrb	r5, [r0, #16]
 801456c:	1b55      	subs	r5, r2, r5
 801456e:	426a      	negs	r2, r5
 8014570:	416a      	adcs	r2, r5
 8014572:	e000      	b.n	8014576 <udp_netif_ip_addr_changed+0x8a>
 8014574:	2200      	movs	r2, #0
 8014576:	b172      	cbz	r2, 8014596 <udp_netif_ip_addr_changed+0xaa>
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014578:	7d0a      	ldrb	r2, [r1, #20]
 801457a:	751a      	strb	r2, [r3, #20]
 801457c:	7d0a      	ldrb	r2, [r1, #20]
 801457e:	2a06      	cmp	r2, #6
 8014580:	680a      	ldr	r2, [r1, #0]
 8014582:	601a      	str	r2, [r3, #0]
 8014584:	d109      	bne.n	801459a <udp_netif_ip_addr_changed+0xae>
 8014586:	684a      	ldr	r2, [r1, #4]
 8014588:	605a      	str	r2, [r3, #4]
 801458a:	688a      	ldr	r2, [r1, #8]
 801458c:	609a      	str	r2, [r3, #8]
 801458e:	68ca      	ldr	r2, [r1, #12]
 8014590:	60da      	str	r2, [r3, #12]
 8014592:	7c0a      	ldrb	r2, [r1, #16]
 8014594:	741a      	strb	r2, [r3, #16]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014598:	e7ce      	b.n	8014538 <udp_netif_ip_addr_changed+0x4c>
        ip_addr_copy(upcb->local_ip, *new_addr);
 801459a:	e9c3 4402 	strd	r4, r4, [r3, #8]
 801459e:	605c      	str	r4, [r3, #4]
 80145a0:	741c      	strb	r4, [r3, #16]
 80145a2:	e7f8      	b.n	8014596 <udp_netif_ip_addr_changed+0xaa>
 80145a4:	2001612c 	.word	0x2001612c

080145a8 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80145a8:	8943      	ldrh	r3, [r0, #10]
 80145aa:	2b0e      	cmp	r3, #14
{
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	4604      	mov	r4, r0
 80145b0:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 80145b2:	d954      	bls.n	801465e <ethernet_input+0xb6>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80145b4:	7bc3      	ldrb	r3, [r0, #15]
 80145b6:	b91b      	cbnz	r3, 80145c0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 80145b8:	f891 30de 	ldrb.w	r3, [r1, #222]	; 0xde
 80145bc:	3301      	adds	r3, #1
 80145be:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80145c0:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80145c2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80145c4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80145c6:	07d9      	lsls	r1, r3, #31
 80145c8:	d50a      	bpl.n	80145e0 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80145ca:	2b01      	cmp	r3, #1
 80145cc:	d120      	bne.n	8014610 <ethernet_input+0x68>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80145ce:	7843      	ldrb	r3, [r0, #1]
 80145d0:	b933      	cbnz	r3, 80145e0 <ethernet_input+0x38>
 80145d2:	7883      	ldrb	r3, [r0, #2]
 80145d4:	2b5e      	cmp	r3, #94	; 0x5e
 80145d6:	d103      	bne.n	80145e0 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80145d8:	7b63      	ldrb	r3, [r4, #13]
 80145da:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80145de:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80145e0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80145e4:	d023      	beq.n	801462e <ethernet_input+0x86>
 80145e6:	f64d 5386 	movw	r3, #56710	; 0xdd86
 80145ea:	429e      	cmp	r6, r3
 80145ec:	d02d      	beq.n	801464a <ethernet_input+0xa2>
 80145ee:	2e08      	cmp	r6, #8
 80145f0:	d135      	bne.n	801465e <ethernet_input+0xb6>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80145f2:	f895 30db 	ldrb.w	r3, [r5, #219]	; 0xdb
 80145f6:	071a      	lsls	r2, r3, #28
 80145f8:	d531      	bpl.n	801465e <ethernet_input+0xb6>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80145fa:	210e      	movs	r1, #14
 80145fc:	4620      	mov	r0, r4
 80145fe:	f7fa fe8b 	bl	800f318 <pbuf_remove_header>
 8014602:	bb60      	cbnz	r0, 801465e <ethernet_input+0xb6>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8014604:	4629      	mov	r1, r5
 8014606:	4620      	mov	r0, r4
 8014608:	f7f5 ff34 	bl	800a474 <ip4_input>
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  return ERR_OK;
}
 801460c:	2000      	movs	r0, #0
 801460e:	bd70      	pop	{r4, r5, r6, pc}
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014610:	2b33      	cmp	r3, #51	; 0x33
 8014612:	d102      	bne.n	801461a <ethernet_input+0x72>
 8014614:	7843      	ldrb	r3, [r0, #1]
 8014616:	2b33      	cmp	r3, #51	; 0x33
 8014618:	d0de      	beq.n	80145d8 <ethernet_input+0x30>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801461a:	4913      	ldr	r1, [pc, #76]	; (8014668 <ethernet_input+0xc0>)
 801461c:	2206      	movs	r2, #6
 801461e:	f007 fe01 	bl	801c224 <memcmp>
 8014622:	2800      	cmp	r0, #0
 8014624:	d1dc      	bne.n	80145e0 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 8014626:	7b63      	ldrb	r3, [r4, #13]
 8014628:	f043 0308 	orr.w	r3, r3, #8
 801462c:	e7d7      	b.n	80145de <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801462e:	f895 30db 	ldrb.w	r3, [r5, #219]	; 0xdb
 8014632:	071b      	lsls	r3, r3, #28
 8014634:	d513      	bpl.n	801465e <ethernet_input+0xb6>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014636:	210e      	movs	r1, #14
 8014638:	4620      	mov	r0, r4
 801463a:	f7fa fe6d 	bl	800f318 <pbuf_remove_header>
 801463e:	b970      	cbnz	r0, 801465e <ethernet_input+0xb6>
        etharp_input(p, netif);
 8014640:	4629      	mov	r1, r5
 8014642:	4620      	mov	r0, r4
 8014644:	f7f5 fb68 	bl	8009d18 <etharp_input>
      break;
 8014648:	e7e0      	b.n	801460c <ethernet_input+0x64>
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 801464a:	210e      	movs	r1, #14
 801464c:	4620      	mov	r0, r4
 801464e:	f7fa fe63 	bl	800f318 <pbuf_remove_header>
 8014652:	b920      	cbnz	r0, 801465e <ethernet_input+0xb6>
        ip6_input(p, netif);
 8014654:	4629      	mov	r1, r5
 8014656:	4620      	mov	r0, r4
 8014658:	f7f7 f852 	bl	800b700 <ip6_input>
      break;
 801465c:	e7d6      	b.n	801460c <ethernet_input+0x64>
  pbuf_free(p);
 801465e:	4620      	mov	r0, r4
 8014660:	f7fa fe8e 	bl	800f380 <pbuf_free>
  return ERR_OK;
 8014664:	e7d2      	b.n	801460c <ethernet_input+0x64>
 8014666:	bf00      	nop
 8014668:	0801fe60 	.word	0x0801fe60

0801466c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014670:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014672:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8014676:	460d      	mov	r5, r1
 8014678:	4616      	mov	r6, r2
 801467a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801467c:	f7f9 fd10 	bl	800e0a0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014680:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8014682:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014684:	4628      	mov	r0, r5
 8014686:	f7fa fe41 	bl	800f30c <pbuf_add_header>
 801468a:	b9e8      	cbnz	r0, 80146c8 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801468c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 801468e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	600b      	str	r3, [r1, #0]
 8014696:	88bb      	ldrh	r3, [r7, #4]
 8014698:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801469a:	6833      	ldr	r3, [r6, #0]
 801469c:	f8c1 3006 	str.w	r3, [r1, #6]
 80146a0:	88b3      	ldrh	r3, [r6, #4]
 80146a2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80146a4:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 80146a8:	2b06      	cmp	r3, #6
 80146aa:	d006      	beq.n	80146ba <ethernet_output+0x4e>
 80146ac:	4b08      	ldr	r3, [pc, #32]	; (80146d0 <ethernet_output+0x64>)
 80146ae:	4909      	ldr	r1, [pc, #36]	; (80146d4 <ethernet_output+0x68>)
 80146b0:	4809      	ldr	r0, [pc, #36]	; (80146d8 <ethernet_output+0x6c>)
 80146b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80146b6:	f008 fa37 	bl	801cb28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80146ba:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80146be:	4629      	mov	r1, r5
 80146c0:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80146c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80146c6:	4718      	bx	r3
}
 80146c8:	f06f 0001 	mvn.w	r0, #1
 80146cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d0:	0802ed23 	.word	0x0802ed23
 80146d4:	0802ed91 	.word	0x0802ed91
 80146d8:	0802aecf 	.word	0x0802aecf

080146dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80146dc:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80146de:	2304      	movs	r3, #4
{
 80146e0:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 80146e2:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80146e4:	4668      	mov	r0, sp
 80146e6:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 80146e8:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80146ea:	f7f0 f847 	bl	800477c <osMessageCreate>
 80146ee:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80146f0:	fab0 f080 	clz	r0, r0
 80146f4:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 80146f6:	4240      	negs	r0, r0
 80146f8:	b002      	add	sp, #8
 80146fa:	bd10      	pop	{r4, pc}

080146fc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80146fc:	b510      	push	{r4, lr}
 80146fe:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014700:	6800      	ldr	r0, [r0, #0]
 8014702:	f7f0 f8b0 	bl	8004866 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014706:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 801470c:	f7f0 b8b2 	b.w	8004874 <osMessageDelete>

08014710 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8014710:	b538      	push	{r3, r4, r5, lr}
 8014712:	4604      	mov	r4, r0
 8014714:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8014716:	6820      	ldr	r0, [r4, #0]
 8014718:	f04f 32ff 	mov.w	r2, #4294967295
 801471c:	4629      	mov	r1, r5
 801471e:	f7f0 f833 	bl	8004788 <osMessagePut>
 8014722:	2800      	cmp	r0, #0
 8014724:	d1f7      	bne.n	8014716 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8014726:	bd38      	pop	{r3, r4, r5, pc}

08014728 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014728:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801472a:	2200      	movs	r2, #0
 801472c:	6800      	ldr	r0, [r0, #0]
 801472e:	f7f0 f82b 	bl	8004788 <osMessagePut>
 8014732:	3800      	subs	r0, #0
 8014734:	bf18      	it	ne
 8014736:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8014738:	4240      	negs	r0, r0
 801473a:	bd08      	pop	{r3, pc}

0801473c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801473c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801473e:	b085      	sub	sp, #20
 8014740:	4606      	mov	r6, r0
 8014742:	460d      	mov	r5, r1
 8014744:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014746:	f7ef ff56 	bl	80045f6 <osKernelSysTick>
 801474a:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801474c:	b177      	cbz	r7, 801476c <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801474e:	6831      	ldr	r1, [r6, #0]
 8014750:	463a      	mov	r2, r7
 8014752:	a801      	add	r0, sp, #4
 8014754:	f7f0 f840 	bl	80047d8 <osMessageGet>

    if(event.status == osEventMessage)
 8014758:	9b01      	ldr	r3, [sp, #4]
 801475a:	2b10      	cmp	r3, #16
 801475c:	d10d      	bne.n	801477a <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 801475e:	9b02      	ldr	r3, [sp, #8]
 8014760:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 8014762:	f7ef ff48 	bl	80045f6 <osKernelSysTick>
 8014766:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014768:	b005      	add	sp, #20
 801476a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801476c:	6831      	ldr	r1, [r6, #0]
 801476e:	f04f 32ff 	mov.w	r2, #4294967295
 8014772:	a801      	add	r0, sp, #4
 8014774:	f7f0 f830 	bl	80047d8 <osMessageGet>
 8014778:	e7f1      	b.n	801475e <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 801477a:	f04f 30ff 	mov.w	r0, #4294967295
 801477e:	e7f3      	b.n	8014768 <sys_arch_mbox_fetch+0x2c>

08014780 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014782:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014784:	2200      	movs	r2, #0
 8014786:	6801      	ldr	r1, [r0, #0]
 8014788:	a801      	add	r0, sp, #4
 801478a:	f7f0 f825 	bl	80047d8 <osMessageGet>

  if(event.status == osEventMessage)
 801478e:	9b01      	ldr	r3, [sp, #4]
 8014790:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 8014792:	bf03      	ittte	eq
 8014794:	9b02      	ldreq	r3, [sp, #8]
 8014796:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014798:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801479a:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 801479e:	b004      	add	sp, #16
 80147a0:	bd10      	pop	{r4, pc}

080147a2 <sys_mbox_valid>:
 80147a2:	6800      	ldr	r0, [r0, #0]
 80147a4:	3800      	subs	r0, #0
 80147a6:	bf18      	it	ne
 80147a8:	2001      	movne	r0, #1
 80147aa:	4770      	bx	lr

080147ac <sys_mbox_set_invalid>:
 80147ac:	2300      	movs	r3, #0
 80147ae:	6003      	str	r3, [r0, #0]
 80147b0:	4770      	bx	lr

080147b2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80147b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80147b4:	4606      	mov	r6, r0
 80147b6:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80147b8:	2400      	movs	r4, #0
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80147ba:	2101      	movs	r1, #1
 80147bc:	a801      	add	r0, sp, #4
  osSemaphoreDef(SEM);
 80147be:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80147c0:	f7ef ff9c 	bl	80046fc <osSemaphoreCreate>
 80147c4:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80147c6:	b130      	cbz	r0, 80147d6 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 80147c8:	b945      	cbnz	r5, 80147dc <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80147ca:	4629      	mov	r1, r5
 80147cc:	f7ef ffac 	bl	8004728 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80147d0:	4628      	mov	r0, r5
}
 80147d2:	b002      	add	sp, #8
 80147d4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80147d6:	f04f 30ff 	mov.w	r0, #4294967295
 80147da:	e7fa      	b.n	80147d2 <sys_sem_new+0x20>
  return ERR_OK;
 80147dc:	4620      	mov	r0, r4
 80147de:	e7f8      	b.n	80147d2 <sys_sem_new+0x20>

080147e0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80147e0:	b570      	push	{r4, r5, r6, lr}
 80147e2:	4605      	mov	r5, r0
 80147e4:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80147e6:	f7ef ff06 	bl	80045f6 <osKernelSysTick>
 80147ea:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80147ec:	b146      	cbz	r6, 8014800 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80147ee:	6828      	ldr	r0, [r5, #0]
 80147f0:	4631      	mov	r1, r6
 80147f2:	f7ef ff99 	bl	8004728 <osSemaphoreWait>
 80147f6:	b958      	cbnz	r0, 8014810 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 80147f8:	f7ef fefd 	bl	80045f6 <osKernelSysTick>
 80147fc:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80147fe:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014800:	6828      	ldr	r0, [r5, #0]
 8014802:	f04f 31ff 	mov.w	r1, #4294967295
 8014806:	f7ef ff8f 	bl	8004728 <osSemaphoreWait>
 801480a:	2800      	cmp	r0, #0
 801480c:	d1f8      	bne.n	8014800 <sys_arch_sem_wait+0x20>
 801480e:	e7f3      	b.n	80147f8 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 8014810:	f04f 30ff 	mov.w	r0, #4294967295
 8014814:	e7f3      	b.n	80147fe <sys_arch_sem_wait+0x1e>

08014816 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8014816:	6800      	ldr	r0, [r0, #0]
 8014818:	f7ef bfac 	b.w	8004774 <osSemaphoreRelease>

0801481c <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801481c:	6800      	ldr	r0, [r0, #0]
 801481e:	f7ef bfab 	b.w	8004778 <osSemaphoreDelete>

08014822 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8014822:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8014824:	3800      	subs	r0, #0
 8014826:	bf18      	it	ne
 8014828:	2001      	movne	r0, #1
 801482a:	4770      	bx	lr

0801482c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	6003      	str	r3, [r0, #0]
}
 8014830:	4770      	bx	lr
	...

08014834 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014834:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014836:	4803      	ldr	r0, [pc, #12]	; (8014844 <sys_init+0x10>)
 8014838:	f7ef ff09 	bl	800464e <osMutexCreate>
 801483c:	4b02      	ldr	r3, [pc, #8]	; (8014848 <sys_init+0x14>)
 801483e:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014840:	bd08      	pop	{r3, pc}
 8014842:	bf00      	nop
 8014844:	0801fe6c 	.word	0x0801fe6c
 8014848:	20016134 	.word	0x20016134

0801484c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801484c:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801484e:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014850:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014852:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 8014854:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014856:	f7ef fefa 	bl	800464e <osMutexCreate>
 801485a:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801485c:	fab0 f080 	clz	r0, r0
 8014860:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8014862:	4240      	negs	r0, r0
 8014864:	b002      	add	sp, #8
 8014866:	bd10      	pop	{r4, pc}

08014868 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014868:	6800      	ldr	r0, [r0, #0]
 801486a:	f04f 31ff 	mov.w	r1, #4294967295
 801486e:	f7ef bef1 	b.w	8004654 <osMutexWait>

08014872 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8014872:	6800      	ldr	r0, [r0, #0]
 8014874:	f7ef bf14 	b.w	80046a0 <osMutexRelease>

08014878 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801487a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801487e:	9908      	ldr	r1, [sp, #32]
 8014880:	f8ad 100c 	strh.w	r1, [sp, #12]
 8014884:	2100      	movs	r1, #0
 8014886:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 801488a:	a801      	add	r0, sp, #4
 801488c:	4611      	mov	r1, r2
 801488e:	f7ef feb9 	bl	8004604 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014892:	b007      	add	sp, #28
 8014894:	f85d fb04 	ldr.w	pc, [sp], #4

08014898 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014898:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801489a:	4b04      	ldr	r3, [pc, #16]	; (80148ac <sys_arch_protect+0x14>)
 801489c:	f04f 31ff 	mov.w	r1, #4294967295
 80148a0:	6818      	ldr	r0, [r3, #0]
 80148a2:	f7ef fed7 	bl	8004654 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 80148a6:	2001      	movs	r0, #1
 80148a8:	bd08      	pop	{r3, pc}
 80148aa:	bf00      	nop
 80148ac:	20016134 	.word	0x20016134

080148b0 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80148b0:	4b01      	ldr	r3, [pc, #4]	; (80148b8 <sys_arch_unprotect+0x8>)
 80148b2:	6818      	ldr	r0, [r3, #0]
 80148b4:	f7ef bef4 	b.w	80046a0 <osMutexRelease>
 80148b8:	20016134 	.word	0x20016134

080148bc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80148bc:	b570      	push	{r4, r5, r6, lr}
 80148be:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80148c0:	4604      	mov	r4, r0
 80148c2:	b1a8      	cbz	r0, 80148f0 <fs_open+0x34>
 80148c4:	b1a1      	cbz	r1, 80148f0 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80148c6:	4d0c      	ldr	r5, [pc, #48]	; (80148f8 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 80148c8:	6869      	ldr	r1, [r5, #4]
 80148ca:	4630      	mov	r0, r6
 80148cc:	f7eb fcd0 	bl	8000270 <strcmp>
 80148d0:	b940      	cbnz	r0, 80148e4 <fs_open+0x28>
      file->data = (const char *)f->data;
 80148d2:	68ab      	ldr	r3, [r5, #8]
 80148d4:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 80148d6:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 80148d8:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 80148da:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 80148de:	7c2b      	ldrb	r3, [r5, #16]
 80148e0:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80148e4:	682d      	ldr	r5, [r5, #0]
 80148e6:	2d00      	cmp	r5, #0
 80148e8:	d1ee      	bne.n	80148c8 <fs_open+0xc>
  return ERR_VAL;
 80148ea:	f06f 0005 	mvn.w	r0, #5
 80148ee:	e7f8      	b.n	80148e2 <fs_open+0x26>
    return ERR_ARG;
 80148f0:	f06f 000f 	mvn.w	r0, #15
 80148f4:	e7f5      	b.n	80148e2 <fs_open+0x26>
 80148f6:	bf00      	nop
 80148f8:	0801fe70 	.word	0x0801fe70

080148fc <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80148fc:	4770      	bx	lr
	...

08014900 <hnd_espressif_delete>:
                     coap_session_t *session,
                     coap_pdu_t *request,
                     coap_binary_t *token,
                     coap_string_t *query,
                     coap_pdu_t *response)
{
 8014900:	b510      	push	{r4, lr}
    coap_resource_notify_observers(resource, NULL);
    snprintf(espressif_data, sizeof(espressif_data), INITIAL_DATA);
 8014902:	4c08      	ldr	r4, [pc, #32]	; (8014924 <hnd_espressif_delete+0x24>)
{
 8014904:	4608      	mov	r0, r1
    coap_resource_notify_observers(resource, NULL);
 8014906:	2100      	movs	r1, #0
 8014908:	f006 fde1 	bl	801b4ce <coap_resource_notify_observers>
    snprintf(espressif_data, sizeof(espressif_data), INITIAL_DATA);
 801490c:	4906      	ldr	r1, [pc, #24]	; (8014928 <hnd_espressif_delete+0x28>)
 801490e:	4620      	mov	r0, r4
 8014910:	f008 fa50 	bl	801cdb4 <strcpy>
    espressif_data_len = strlen(espressif_data);
 8014914:	4620      	mov	r0, r4
 8014916:	f7eb fcb5 	bl	8000284 <strlen>
    response->code = COAP_RESPONSE_CODE(202);
 801491a:	9b04      	ldr	r3, [sp, #16]
    espressif_data_len = strlen(espressif_data);
 801491c:	6660      	str	r0, [r4, #100]	; 0x64
    response->code = COAP_RESPONSE_CODE(202);
 801491e:	2242      	movs	r2, #66	; 0x42
 8014920:	705a      	strb	r2, [r3, #1]
}
 8014922:	bd10      	pop	{r4, pc}
 8014924:	200070a0 	.word	0x200070a0
 8014928:	0802edc8 	.word	0x0802edc8

0801492c <hnd_espressif_get>:
{
 801492c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801492e:	4608      	mov	r0, r1
 8014930:	4611      	mov	r1, r2
 8014932:	461a      	mov	r2, r3
    coap_add_data_blocked_response(resource, session, request, response, token,
 8014934:	4b07      	ldr	r3, [pc, #28]	; (8014954 <hnd_espressif_get+0x28>)
 8014936:	9304      	str	r3, [sp, #16]
 8014938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801493a:	9303      	str	r3, [sp, #12]
 801493c:	2300      	movs	r3, #0
 801493e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014942:	9b08      	ldr	r3, [sp, #32]
 8014944:	9300      	str	r3, [sp, #0]
 8014946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014948:	f000 fa10 	bl	8014d6c <coap_add_data_blocked_response>
}
 801494c:	b007      	add	sp, #28
 801494e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014952:	bf00      	nop
 8014954:	200070a0 	.word	0x200070a0

08014958 <hnd_espressif_put>:
{
 8014958:	b513      	push	{r0, r1, r4, lr}
 801495a:	4608      	mov	r0, r1
    coap_resource_notify_observers(resource, NULL);
 801495c:	2100      	movs	r1, #0
{
 801495e:	461c      	mov	r4, r3
    coap_resource_notify_observers(resource, NULL);
 8014960:	f006 fdb5 	bl	801b4ce <coap_resource_notify_observers>
    if (strcmp (espressif_data, INITIAL_DATA) == 0) {
 8014964:	4912      	ldr	r1, [pc, #72]	; (80149b0 <hnd_espressif_put+0x58>)
 8014966:	4813      	ldr	r0, [pc, #76]	; (80149b4 <hnd_espressif_put+0x5c>)
 8014968:	f7eb fc82 	bl	8000270 <strcmp>
 801496c:	9b06      	ldr	r3, [sp, #24]
 801496e:	2800      	cmp	r0, #0
        response->code = COAP_RESPONSE_CODE(204);
 8014970:	bf0c      	ite	eq
 8014972:	2241      	moveq	r2, #65	; 0x41
 8014974:	2244      	movne	r2, #68	; 0x44
 8014976:	705a      	strb	r2, [r3, #1]
    (void)coap_get_data(request, &size, &data);
 8014978:	4620      	mov	r0, r4
 801497a:	aa01      	add	r2, sp, #4
 801497c:	4669      	mov	r1, sp
 801497e:	f005 fbb3 	bl	801a0e8 <coap_get_data>
    if (size == 0) {      /* re-init */
 8014982:	9a00      	ldr	r2, [sp, #0]
 8014984:	4c0b      	ldr	r4, [pc, #44]	; (80149b4 <hnd_espressif_put+0x5c>)
 8014986:	b94a      	cbnz	r2, 801499c <hnd_espressif_put+0x44>
        snprintf(espressif_data, sizeof(espressif_data), INITIAL_DATA);
 8014988:	4909      	ldr	r1, [pc, #36]	; (80149b0 <hnd_espressif_put+0x58>)
 801498a:	4620      	mov	r0, r4
 801498c:	f008 fa12 	bl	801cdb4 <strcpy>
        espressif_data_len = strlen(espressif_data);
 8014990:	4620      	mov	r0, r4
 8014992:	f7eb fc77 	bl	8000284 <strlen>
 8014996:	6660      	str	r0, [r4, #100]	; 0x64
}
 8014998:	b002      	add	sp, #8
 801499a:	bd10      	pop	{r4, pc}
        espressif_data_len = size > sizeof (espressif_data) ? sizeof (espressif_data) : size;
 801499c:	2a64      	cmp	r2, #100	; 0x64
 801499e:	bf28      	it	cs
 80149a0:	2264      	movcs	r2, #100	; 0x64
        memcpy (espressif_data, data, espressif_data_len);
 80149a2:	9901      	ldr	r1, [sp, #4]
        espressif_data_len = size > sizeof (espressif_data) ? sizeof (espressif_data) : size;
 80149a4:	6662      	str	r2, [r4, #100]	; 0x64
        memcpy (espressif_data, data, espressif_data_len);
 80149a6:	4620      	mov	r0, r4
 80149a8:	f007 fc4a 	bl	801c240 <memcpy>
}
 80149ac:	e7f4      	b.n	8014998 <hnd_espressif_put+0x40>
 80149ae:	bf00      	nop
 80149b0:	0802edc8 	.word	0x0802edc8
 80149b4:	200070a0 	.word	0x200070a0

080149b8 <coap_server>:
////////

void coap_server(void const * argument)
{
 80149b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    coap_context_t *ctx = NULL;
    coap_address_t serv_addr;
    coap_resource_t *resource = NULL;

    snprintf(espressif_data, sizeof(espressif_data), INITIAL_DATA);
 80149bc:	4c2e      	ldr	r4, [pc, #184]	; (8014a78 <coap_server+0xc0>)
 80149be:	492f      	ldr	r1, [pc, #188]	; (8014a7c <coap_server+0xc4>)
        if (!ep) {

            goto clean_up;
        }

        resource = coap_resource_init(coap_make_str_const("hello"), 0);
 80149c0:	4e2f      	ldr	r6, [pc, #188]	; (8014a80 <coap_server+0xc8>)
        if (!resource) {

            goto clean_up;
        }
        coap_register_handler(resource, COAP_REQUEST_GET, hnd_espressif_get);
 80149c2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8014a8c <coap_server+0xd4>
{
 80149c6:	b08a      	sub	sp, #40	; 0x28
    snprintf(espressif_data, sizeof(espressif_data), INITIAL_DATA);
 80149c8:	4620      	mov	r0, r4
 80149ca:	f008 f9f3 	bl	801cdb4 <strcpy>
    espressif_data_len = strlen(espressif_data);
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7eb fc58 	bl	8000284 <strlen>
 80149d4:	6660      	str	r0, [r4, #100]	; 0x64
    coap_set_log_level(LOG_EMERG);
 80149d6:	2000      	movs	r0, #0
 80149d8:	f000 fb0a 	bl	8014ff0 <coap_set_log_level>
 * @param addr The coap_address_t object to initialize.
 */
COAP_STATIC_INLINE void
coap_address_init(coap_address_t *addr) {
  assert(addr);
  memset(addr, 0, sizeof(coap_address_t));
 80149dc:	2700      	movs	r7, #0
 80149de:	241c      	movs	r4, #28
 80149e0:	4622      	mov	r2, r4
 80149e2:	2100      	movs	r1, #0
 80149e4:	a803      	add	r0, sp, #12
 80149e6:	f007 fc53 	bl	801c290 <memset>
        serv_addr.addr.sin.sin_family      = AF_INET;
 80149ea:	2302      	movs	r3, #2
        serv_addr.addr.sin.sin_port        = htons(COAP_DEFAULT_PORT);
 80149ec:	f241 6033 	movw	r0, #5683	; 0x1633
        serv_addr.addr.sin.sin_family      = AF_INET;
 80149f0:	f88d 300d 	strb.w	r3, [sp, #13]
#if !defined(WITH_LWIP) && !defined(WITH_CONTIKI)
  /* lwip and Contiki have constant address sizes and doesn't need the .size part */
  addr->size = sizeof(addr->addr);
 80149f4:	9402      	str	r4, [sp, #8]
        serv_addr.addr.sin.sin_addr.s_addr = INADDR_ANY;
 80149f6:	9704      	str	r7, [sp, #16]
        serv_addr.addr.sin.sin_port        = htons(COAP_DEFAULT_PORT);
 80149f8:	f7f9 fb52 	bl	800e0a0 <lwip_htons>
 80149fc:	f8ad 000e 	strh.w	r0, [sp, #14]
        ctx = coap_new_context(NULL);
 8014a00:	2000      	movs	r0, #0
 8014a02:	f004 feeb 	bl	80197dc <coap_new_context>
        if (!ctx) {
 8014a06:	4605      	mov	r5, r0
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d0e8      	beq.n	80149de <coap_server+0x26>
        ep = coap_new_endpoint(ctx, &serv_addr, COAP_PROTO_UDP);
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	a902      	add	r1, sp, #8
 8014a10:	f002 fad4 	bl	8016fbc <coap_new_endpoint>
        if (!ep) {
 8014a14:	b340      	cbz	r0, 8014a68 <coap_server+0xb0>
        resource = coap_resource_init(coap_make_str_const("hello"), 0);
 8014a16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014a1a:	466b      	mov	r3, sp
 8014a1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a20:	2100      	movs	r1, #0
 8014a22:	4618      	mov	r0, r3
 8014a24:	f005 fe24 	bl	801a670 <coap_resource_init>
        if (!resource) {
 8014a28:	4604      	mov	r4, r0
 8014a2a:	b1e8      	cbz	r0, 8014a68 <coap_server+0xb0>
        coap_register_handler(resource, COAP_REQUEST_GET, hnd_espressif_get);
 8014a2c:	4642      	mov	r2, r8
 8014a2e:	2101      	movs	r1, #1
 8014a30:	f006 fbe0 	bl	801b1f4 <coap_register_handler>
        coap_register_handler(resource, COAP_REQUEST_PUT, hnd_espressif_put);
 8014a34:	4a13      	ldr	r2, [pc, #76]	; (8014a84 <coap_server+0xcc>)
 8014a36:	2103      	movs	r1, #3
 8014a38:	4620      	mov	r0, r4
 8014a3a:	f006 fbdb 	bl	801b1f4 <coap_register_handler>
        coap_register_handler(resource, COAP_REQUEST_DELETE, hnd_espressif_delete);
 8014a3e:	2104      	movs	r1, #4
 8014a40:	4620      	mov	r0, r4
 8014a42:	4a11      	ldr	r2, [pc, #68]	; (8014a88 <coap_server+0xd0>)
 8014a44:	f006 fbd6 	bl	801b1f4 <coap_register_handler>
 * @param mode     @c 1 if Observable is to be set, @c 0 otherwise.
 *
 */
COAP_STATIC_INLINE void
coap_resource_set_get_observable(coap_resource_t *resource, int mode) {
  resource->observable = mode ? 1 : 0;
 8014a48:	7823      	ldrb	r3, [r4, #0]
 8014a4a:	f043 0304 	orr.w	r3, r3, #4
 8014a4e:	7023      	strb	r3, [r4, #0]
        /* We possibly want to Observe the GETs */
        coap_resource_set_get_observable(resource, 1);
        coap_add_resource(ctx, resource);
 8014a50:	4621      	mov	r1, r4
 8014a52:	4628      	mov	r0, r5
 8014a54:	f006 f830 	bl	801aab8 <coap_add_resource>

        wait_ms = COAP_RESOURCE_CHECK_TIME * 1000;

        while (1) {
            int result = coap_run_once(ctx, wait_ms);
 8014a58:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	f001 fefd 	bl	801685c <coap_run_once>
            if (result < 0) {
 8014a62:	2800      	cmp	r0, #0
 8014a64:	daf8      	bge.n	8014a58 <coap_server+0xa0>
 8014a66:	e7ba      	b.n	80149de <coap_server+0x26>
                wait_ms = COAP_RESOURCE_CHECK_TIME * 1000;
            }
        }
    }
clean_up:
    coap_free_context(ctx);
 8014a68:	4628      	mov	r0, r5
 8014a6a:	f003 fa1c 	bl	8017ea6 <coap_free_context>
    coap_cleanup();
 8014a6e:	f004 ff07 	bl	8019880 <coap_cleanup>

   // vTaskDelete(NULL);
}
 8014a72:	b00a      	add	sp, #40	; 0x28
 8014a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a78:	200070a0 	.word	0x200070a0
 8014a7c:	0802edc8 	.word	0x0802edc8
 8014a80:	0802a7f4 	.word	0x0802a7f4
 8014a84:	08014959 	.word	0x08014959
 8014a88:	08014901 	.word	0x08014901
 8014a8c:	0801492d 	.word	0x0801492d

08014a90 <coap_address_equals>:
/* FIXME */
#define IN_MULTICAST(Address) (0)
#endif /* RIOT_VERSION */

int
coap_address_equals(const coap_address_t *a, const coap_address_t *b) {
 8014a90:	b508      	push	{r3, lr}
  assert(a); assert(b);
 8014a92:	b928      	cbnz	r0, 8014aa0 <coap_address_equals+0x10>
 8014a94:	4b15      	ldr	r3, [pc, #84]	; (8014aec <coap_address_equals+0x5c>)
 8014a96:	4a16      	ldr	r2, [pc, #88]	; (8014af0 <coap_address_equals+0x60>)
 8014a98:	4816      	ldr	r0, [pc, #88]	; (8014af4 <coap_address_equals+0x64>)
 8014a9a:	2126      	movs	r1, #38	; 0x26
 8014a9c:	f006 ffee 	bl	801ba7c <__assert_func>
 8014aa0:	b909      	cbnz	r1, 8014aa6 <coap_address_equals+0x16>
 8014aa2:	4b15      	ldr	r3, [pc, #84]	; (8014af8 <coap_address_equals+0x68>)
 8014aa4:	e7f7      	b.n	8014a96 <coap_address_equals+0x6>

  if (a->size != b->size || a->addr.sa.sa_family != b->addr.sa.sa_family)
 8014aa6:	6802      	ldr	r2, [r0, #0]
 8014aa8:	680b      	ldr	r3, [r1, #0]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d107      	bne.n	8014abe <coap_address_equals+0x2e>
 8014aae:	7942      	ldrb	r2, [r0, #5]
 8014ab0:	794b      	ldrb	r3, [r1, #5]
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d103      	bne.n	8014abe <coap_address_equals+0x2e>
    return 0;

  /* need to compare only relevant parts of sockaddr_in6 */
 switch (a->addr.sa.sa_family) {
 8014ab6:	2b02      	cmp	r3, #2
 8014ab8:	d003      	beq.n	8014ac2 <coap_address_equals+0x32>
 8014aba:	2b0a      	cmp	r3, #10
 8014abc:	d00e      	beq.n	8014adc <coap_address_equals+0x4c>
 case AF_INET:
   return
     a->addr.sin.sin_port == b->addr.sin.sin_port &&
 8014abe:	2000      	movs	r0, #0
 8014ac0:	e00b      	b.n	8014ada <coap_address_equals+0x4a>
 8014ac2:	88c2      	ldrh	r2, [r0, #6]
 8014ac4:	88cb      	ldrh	r3, [r1, #6]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d1f9      	bne.n	8014abe <coap_address_equals+0x2e>
     memcmp(&a->addr.sin.sin_addr, &b->addr.sin.sin_addr,
 8014aca:	2204      	movs	r2, #4
 8014acc:	3108      	adds	r1, #8
 8014ace:	3008      	adds	r0, #8
            sizeof(struct in_addr)) == 0;
 case AF_INET6:
   return a->addr.sin6.sin6_port == b->addr.sin6.sin6_port &&
     memcmp(&a->addr.sin6.sin6_addr, &b->addr.sin6.sin6_addr,
 8014ad0:	f007 fba8 	bl	801c224 <memcmp>
   return a->addr.sin6.sin6_port == b->addr.sin6.sin6_port &&
 8014ad4:	fab0 f080 	clz	r0, r0
 8014ad8:	0940      	lsrs	r0, r0, #5
            sizeof(struct in6_addr)) == 0;
 default: /* fall through and signal error */
   ;
 }
 return 0;
}
 8014ada:	bd08      	pop	{r3, pc}
   return a->addr.sin6.sin6_port == b->addr.sin6.sin6_port &&
 8014adc:	88c2      	ldrh	r2, [r0, #6]
 8014ade:	88cb      	ldrh	r3, [r1, #6]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d1ec      	bne.n	8014abe <coap_address_equals+0x2e>
     memcmp(&a->addr.sin6.sin6_addr, &b->addr.sin6.sin6_addr,
 8014ae4:	2210      	movs	r2, #16
 8014ae6:	310c      	adds	r1, #12
 8014ae8:	300c      	adds	r0, #12
 8014aea:	e7f1      	b.n	8014ad0 <coap_address_equals+0x40>
 8014aec:	0802d74b 	.word	0x0802d74b
 8014af0:	0802a7fc 	.word	0x0802a7fc
 8014af4:	0802edd5 	.word	0x0802edd5
 8014af8:	0802dcc2 	.word	0x0802dcc2

08014afc <coap_is_mcast>:

int coap_is_mcast(const coap_address_t *a) {
 8014afc:	b508      	push	{r3, lr}
  if (!a)
 8014afe:	b128      	cbz	r0, 8014b0c <coap_is_mcast+0x10>
    return 0;

 switch (a->addr.sa.sa_family) {
 8014b00:	7943      	ldrb	r3, [r0, #5]
 8014b02:	2b02      	cmp	r3, #2
 8014b04:	d003      	beq.n	8014b0e <coap_is_mcast+0x12>
 8014b06:	2b0a      	cmp	r3, #10
 8014b08:	d00b      	beq.n	8014b22 <coap_is_mcast+0x26>
 8014b0a:	2000      	movs	r0, #0
   return IN6_IS_ADDR_MULTICAST(&a->addr.sin6.sin6_addr);
 default:  /* fall through and signal error */
   ;
  }
 return 0;
}
 8014b0c:	bd08      	pop	{r3, pc}
   return IN_MULTICAST(ntohl(a->addr.sin.sin_addr.s_addr));
 8014b0e:	6880      	ldr	r0, [r0, #8]
 8014b10:	f7f9 fac9 	bl	800e0a6 <lwip_htonl>
   return IN6_IS_ADDR_MULTICAST(&a->addr.sin6.sin6_addr);
 8014b14:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8014b18:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8014b1c:	4258      	negs	r0, r3
 8014b1e:	4158      	adcs	r0, r3
 8014b20:	e7f4      	b.n	8014b0c <coap_is_mcast+0x10>
 8014b22:	300c      	adds	r0, #12
 8014b24:	e7f6      	b.n	8014b14 <coap_is_mcast+0x18>

08014b26 <coap_opt_block_num>:
#define min(a,b) ((a) < (b) ? (a) : (b))
#endif

#ifndef WITHOUT_BLOCK
unsigned int
coap_opt_block_num(const coap_opt_t *block_opt) {
 8014b26:	b570      	push	{r4, r5, r6, lr}
 8014b28:	4605      	mov	r5, r0
  unsigned int num = 0;
  uint16_t len;

  len = coap_opt_length(block_opt);
 8014b2a:	f004 ffb9 	bl	8019aa0 <coap_opt_length>

  if (len == 0) {
 8014b2e:	b1f0      	cbz	r0, 8014b6e <coap_opt_block_num+0x48>
    return 0;
  }

  if (len > 1) {
 8014b30:	2801      	cmp	r0, #1
 8014b32:	d91d      	bls.n	8014b70 <coap_opt_block_num+0x4a>
    num = coap_decode_var_bytes(coap_opt_value(block_opt),
 8014b34:	4628      	mov	r0, r5
 8014b36:	f004 ffed 	bl	8019b14 <coap_opt_value>
 8014b3a:	4604      	mov	r4, r0
                                coap_opt_length(block_opt) - 1);
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f004 ffaf 	bl	8019aa0 <coap_opt_length>
    num = coap_decode_var_bytes(coap_opt_value(block_opt),
 8014b42:	1e41      	subs	r1, r0, #1
 8014b44:	4620      	mov	r0, r4
 8014b46:	f002 ffb1 	bl	8017aac <coap_decode_var_bytes>
 8014b4a:	4604      	mov	r4, r0
  }

  return (num << 4) | ((*COAP_OPT_BLOCK_LAST(block_opt) & 0xF0) >> 4);
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	f004 ffa7 	bl	8019aa0 <coap_opt_length>
 8014b52:	b178      	cbz	r0, 8014b74 <coap_opt_block_num+0x4e>
 8014b54:	4628      	mov	r0, r5
 8014b56:	f004 ffdd 	bl	8019b14 <coap_opt_value>
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f004 ff9f 	bl	8019aa0 <coap_opt_length>
 8014b62:	4430      	add	r0, r6
 8014b64:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014b68:	0120      	lsls	r0, r4, #4
 8014b6a:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
}
 8014b6e:	bd70      	pop	{r4, r5, r6, pc}
  unsigned int num = 0;
 8014b70:	2400      	movs	r4, #0
 8014b72:	e7eb      	b.n	8014b4c <coap_opt_block_num+0x26>
  return (num << 4) | ((*COAP_OPT_BLOCK_LAST(block_opt) & 0xF0) >> 4);
 8014b74:	7803      	ldrb	r3, [r0, #0]
 8014b76:	deff      	udf	#255	; 0xff

08014b78 <coap_get_block>:

int
coap_get_block(coap_pdu_t *pdu, uint16_t type, coap_block_t *block) {
 8014b78:	b570      	push	{r4, r5, r6, lr}
  coap_opt_iterator_t opt_iter;
  coap_opt_t *option;

  assert(block);
 8014b7a:	4615      	mov	r5, r2
coap_get_block(coap_pdu_t *pdu, uint16_t type, coap_block_t *block) {
 8014b7c:	b086      	sub	sp, #24
  assert(block);
 8014b7e:	b92a      	cbnz	r2, 8014b8c <coap_get_block+0x14>
 8014b80:	4b25      	ldr	r3, [pc, #148]	; (8014c18 <coap_get_block+0xa0>)
 8014b82:	4a26      	ldr	r2, [pc, #152]	; (8014c1c <coap_get_block+0xa4>)
 8014b84:	4826      	ldr	r0, [pc, #152]	; (8014c20 <coap_get_block+0xa8>)
 8014b86:	2132      	movs	r1, #50	; 0x32
 8014b88:	f006 ff78 	bl	801ba7c <__assert_func>
  memset(block, 0, sizeof(coap_block_t));
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	602a      	str	r2, [r5, #0]
 8014b90:	606a      	str	r2, [r5, #4]

  if (pdu && (option = coap_check_option(pdu, type, &opt_iter)) != NULL) {
 8014b92:	b120      	cbz	r0, 8014b9e <coap_get_block+0x26>
 8014b94:	466a      	mov	r2, sp
 8014b96:	f005 f905 	bl	8019da4 <coap_check_option>
 8014b9a:	4604      	mov	r4, r0
 8014b9c:	b910      	cbnz	r0, 8014ba4 <coap_get_block+0x2c>
    }
    block->num = num;
    return 1;
  }

  return 0;
 8014b9e:	2000      	movs	r0, #0
}
 8014ba0:	b006      	add	sp, #24
 8014ba2:	bd70      	pop	{r4, r5, r6, pc}
    block->szx = COAP_OPT_BLOCK_SZX(option);
 8014ba4:	f004 ff7c 	bl	8019aa0 <coap_opt_length>
 8014ba8:	b178      	cbz	r0, 8014bca <coap_get_block+0x52>
 8014baa:	4620      	mov	r0, r4
 8014bac:	f004 ff78 	bl	8019aa0 <coap_opt_length>
 8014bb0:	b380      	cbz	r0, 8014c14 <coap_get_block+0x9c>
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f004 ffae 	bl	8019b14 <coap_opt_value>
 8014bb8:	4606      	mov	r6, r0
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f004 ff70 	bl	8019aa0 <coap_opt_length>
 8014bc0:	4430      	add	r0, r6
 8014bc2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8014bc6:	f000 0007 	and.w	r0, r0, #7
 8014bca:	792b      	ldrb	r3, [r5, #4]
 8014bcc:	f360 0343 	bfi	r3, r0, #1, #3
 8014bd0:	712b      	strb	r3, [r5, #4]
    if (COAP_OPT_BLOCK_MORE(option))
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	f004 ff64 	bl	8019aa0 <coap_opt_length>
 8014bd8:	b198      	cbz	r0, 8014c02 <coap_get_block+0x8a>
 8014bda:	4620      	mov	r0, r4
 8014bdc:	f004 ff60 	bl	8019aa0 <coap_opt_length>
 8014be0:	b1c0      	cbz	r0, 8014c14 <coap_get_block+0x9c>
 8014be2:	4620      	mov	r0, r4
 8014be4:	f004 ff96 	bl	8019b14 <coap_opt_value>
 8014be8:	4606      	mov	r6, r0
 8014bea:	4620      	mov	r0, r4
 8014bec:	f004 ff58 	bl	8019aa0 <coap_opt_length>
 8014bf0:	4430      	add	r0, r6
 8014bf2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014bf6:	071b      	lsls	r3, r3, #28
      block->m = 1;
 8014bf8:	bf42      	ittt	mi
 8014bfa:	792b      	ldrbmi	r3, [r5, #4]
 8014bfc:	f043 0301 	orrmi.w	r3, r3, #1
 8014c00:	712b      	strbmi	r3, [r5, #4]
    num = coap_opt_block_num(option);
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7ff ff8f 	bl	8014b26 <coap_opt_block_num>
    if (num > 0xFFFFF) {
 8014c08:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8014c0c:	d2c7      	bcs.n	8014b9e <coap_get_block+0x26>
    block->num = num;
 8014c0e:	6028      	str	r0, [r5, #0]
    return 1;
 8014c10:	2001      	movs	r0, #1
 8014c12:	e7c5      	b.n	8014ba0 <coap_get_block+0x28>
    if (COAP_OPT_BLOCK_MORE(option))
 8014c14:	7803      	ldrb	r3, [r0, #0]
 8014c16:	deff      	udf	#255	; 0xff
 8014c18:	0802ee3f 	.word	0x0802ee3f
 8014c1c:	0802a810 	.word	0x0802a810
 8014c20:	0802ee45 	.word	0x0802ee45

08014c24 <coap_write_block_opt>:

int
coap_write_block_opt(coap_block_t *block, uint16_t type,
                     coap_pdu_t *pdu, size_t data_length) {
 8014c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014c28:	4604      	mov	r4, r0
 8014c2a:	4688      	mov	r8, r1
  size_t start, want, avail;
  unsigned char buf[4];

  assert(pdu);
 8014c2c:	4617      	mov	r7, r2
 8014c2e:	b92a      	cbnz	r2, 8014c3c <coap_write_block_opt+0x18>
 8014c30:	4b3c      	ldr	r3, [pc, #240]	; (8014d24 <coap_write_block_opt+0x100>)
 8014c32:	4a3d      	ldr	r2, [pc, #244]	; (8014d28 <coap_write_block_opt+0x104>)
 8014c34:	214f      	movs	r1, #79	; 0x4f
  if (data_length <= start) {
    coap_log(LOG_DEBUG, "illegal block requested\n");
    return -2;
  }

  assert(pdu->max_size > 0);
 8014c36:	483d      	ldr	r0, [pc, #244]	; (8014d2c <coap_write_block_opt+0x108>)
 8014c38:	f006 ff20 	bl	801ba7c <__assert_func>
  start = block->num << (block->szx + 4);
 8014c3c:	7900      	ldrb	r0, [r0, #4]
 8014c3e:	6821      	ldr	r1, [r4, #0]
 8014c40:	f3c0 0242 	ubfx	r2, r0, #1, #3
 8014c44:	1d16      	adds	r6, r2, #4
 8014c46:	40b1      	lsls	r1, r6
  if (data_length <= start) {
 8014c48:	4299      	cmp	r1, r3
 8014c4a:	d30a      	bcc.n	8014c62 <coap_write_block_opt+0x3e>
    coap_log(LOG_DEBUG, "illegal block requested\n");
 8014c4c:	f000 f9ca 	bl	8014fe4 <coap_get_log_level>
 8014c50:	2806      	cmp	r0, #6
 8014c52:	d903      	bls.n	8014c5c <coap_write_block_opt+0x38>
 8014c54:	4936      	ldr	r1, [pc, #216]	; (8014d30 <coap_write_block_opt+0x10c>)
 8014c56:	2007      	movs	r0, #7
 8014c58:	f000 fa2e 	bl	80150b8 <coap_log_impl>
    return -2;
 8014c5c:	f06f 0001 	mvn.w	r0, #1
 8014c60:	e02b      	b.n	8014cba <coap_write_block_opt+0x96>
  assert(pdu->max_size > 0);
 8014c62:	697d      	ldr	r5, [r7, #20]
 8014c64:	b91d      	cbnz	r5, 8014c6e <coap_write_block_opt+0x4a>
 8014c66:	4b33      	ldr	r3, [pc, #204]	; (8014d34 <coap_write_block_opt+0x110>)
 8014c68:	4a2f      	ldr	r2, [pc, #188]	; (8014d28 <coap_write_block_opt+0x104>)
 8014c6a:	2157      	movs	r1, #87	; 0x57
 8014c6c:	e7e3      	b.n	8014c36 <coap_write_block_opt+0x12>
  avail = pdu->max_size - pdu->used_size - 4;
 8014c6e:	693a      	ldr	r2, [r7, #16]
 8014c70:	3d04      	subs	r5, #4
 8014c72:	1aad      	subs	r5, r5, r2
  want = (size_t)1 << (block->szx + 4);
 8014c74:	2201      	movs	r2, #1
 8014c76:	40b2      	lsls	r2, r6

  /* check if entire block fits in message */
  if (want <= avail) {
 8014c78:	4295      	cmp	r5, r2
 8014c7a:	eba3 0301 	sub.w	r3, r3, r1
 8014c7e:	d31f      	bcc.n	8014cc0 <coap_write_block_opt+0x9c>
    block->m = want < data_length - start;
 8014c80:	429a      	cmp	r2, r3
 8014c82:	bf2c      	ite	cs
 8014c84:	2200      	movcs	r2, #0
 8014c86:	2201      	movcc	r2, #1
 8014c88:	f362 0000 	bfi	r0, r2, #0, #1
     * data left that cannot be delivered in this message. */

    if (data_length - start <= avail) {

      /* it's the final block and everything fits in the message */
      block->m = 0;
 8014c8c:	7120      	strb	r0, [r4, #4]

  /* to re-encode the block option */
  coap_add_option(pdu, type, coap_encode_var_safe(buf, sizeof(buf),
                                                  ((block->num << 4) |
                                                   (block->m << 3) |
                                                   block->szx)),
 8014c8e:	7923      	ldrb	r3, [r4, #4]
                                                  ((block->num << 4) |
 8014c90:	6821      	ldr	r1, [r4, #0]
                                                   block->szx)),
 8014c92:	f3c3 0242 	ubfx	r2, r3, #1, #3
  coap_add_option(pdu, type, coap_encode_var_safe(buf, sizeof(buf),
 8014c96:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                                                   (block->m << 3) |
 8014c9a:	f003 0301 	and.w	r3, r3, #1
  coap_add_option(pdu, type, coap_encode_var_safe(buf, sizeof(buf),
 8014c9e:	2104      	movs	r1, #4
 8014ca0:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
 8014ca4:	eb0d 0001 	add.w	r0, sp, r1
 8014ca8:	f002 ff0c 	bl	8017ac4 <coap_encode_var_safe>
 8014cac:	ab01      	add	r3, sp, #4
 8014cae:	4602      	mov	r2, r0
 8014cb0:	4641      	mov	r1, r8
 8014cb2:	4638      	mov	r0, r7
 8014cb4:	f005 f988 	bl	8019fc8 <coap_add_option>
                  buf);

  return 1;
 8014cb8:	2001      	movs	r0, #1
}
 8014cba:	b002      	add	sp, #8
 8014cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (data_length - start <= avail) {
 8014cc0:	429d      	cmp	r5, r3
 8014cc2:	d302      	bcc.n	8014cca <coap_write_block_opt+0xa6>
      block->m = 0;
 8014cc4:	f36f 0000 	bfc	r0, #0, #1
 8014cc8:	e7e0      	b.n	8014c8c <coap_write_block_opt+0x68>
      if (avail < 16) {         /* bad luck, this is the smallest block size */
 8014cca:	2d0f      	cmp	r5, #15
 8014ccc:	d80a      	bhi.n	8014ce4 <coap_write_block_opt+0xc0>
        coap_log(LOG_DEBUG,
 8014cce:	f000 f989 	bl	8014fe4 <coap_get_log_level>
 8014cd2:	2806      	cmp	r0, #6
 8014cd4:	d903      	bls.n	8014cde <coap_write_block_opt+0xba>
 8014cd6:	4918      	ldr	r1, [pc, #96]	; (8014d38 <coap_write_block_opt+0x114>)
 8014cd8:	2007      	movs	r0, #7
 8014cda:	f000 f9ed 	bl	80150b8 <coap_log_impl>
        return -3;
 8014cde:	f06f 0002 	mvn.w	r0, #2
 8014ce2:	e7ea      	b.n	8014cba <coap_write_block_opt+0x96>
      newBlockSize = coap_flsll((long long)avail) - 5;
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f002 fed0 	bl	8017a8c <coap_flsll>
 8014cec:	1f46      	subs	r6, r0, #5
      coap_log(LOG_DEBUG,
 8014cee:	f000 f979 	bl	8014fe4 <coap_get_log_level>
 8014cf2:	2806      	cmp	r0, #6
 8014cf4:	d905      	bls.n	8014d02 <coap_write_block_opt+0xde>
 8014cf6:	4911      	ldr	r1, [pc, #68]	; (8014d3c <coap_write_block_opt+0x118>)
 8014cf8:	4633      	mov	r3, r6
 8014cfa:	462a      	mov	r2, r5
 8014cfc:	2007      	movs	r0, #7
 8014cfe:	f000 f9db 	bl	80150b8 <coap_log_impl>
      szx = block->szx;
 8014d02:	7922      	ldrb	r2, [r4, #4]
      block->m = 1;
 8014d04:	f006 0607 	and.w	r6, r6, #7
 8014d08:	0073      	lsls	r3, r6, #1
      szx = block->szx;
 8014d0a:	f3c2 0042 	ubfx	r0, r2, #1, #3
      block->m = 1;
 8014d0e:	f043 0301 	orr.w	r3, r3, #1
 8014d12:	f022 020f 	bic.w	r2, r2, #15
 8014d16:	4313      	orrs	r3, r2
      block->num <<= szx - block->szx;
 8014d18:	6822      	ldr	r2, [r4, #0]
      block->m = 1;
 8014d1a:	7123      	strb	r3, [r4, #4]
      block->num <<= szx - block->szx;
 8014d1c:	1b86      	subs	r6, r0, r6
 8014d1e:	40b2      	lsls	r2, r6
 8014d20:	6022      	str	r2, [r4, #0]
 8014d22:	e7b4      	b.n	8014c8e <coap_write_block_opt+0x6a>
 8014d24:	0802eead 	.word	0x0802eead
 8014d28:	0802a81f 	.word	0x0802a81f
 8014d2c:	0802ee45 	.word	0x0802ee45
 8014d30:	0802eeb1 	.word	0x0802eeb1
 8014d34:	0802eeca 	.word	0x0802eeca
 8014d38:	0802eedc 	.word	0x0802eedc
 8014d3c:	0802ef13 	.word	0x0802ef13

08014d40 <coap_add_block>:

int
coap_add_block(coap_pdu_t *pdu, unsigned int len, const uint8_t *data,
               unsigned int block_num, unsigned char block_szx) {
 8014d40:	b410      	push	{r4}
 8014d42:	f89d 4004 	ldrb.w	r4, [sp, #4]
  unsigned int start;
  start = block_num << (block_szx + 4);
 8014d46:	3404      	adds	r4, #4
 8014d48:	40a3      	lsls	r3, r4

  if (len <= start)
 8014d4a:	428b      	cmp	r3, r1
 8014d4c:	d20a      	bcs.n	8014d64 <coap_add_block+0x24>
    return 0;

  return coap_add_data(pdu,
                       min(len - start, (1U << (block_szx + 4))),
 8014d4e:	1ac9      	subs	r1, r1, r3
  return coap_add_data(pdu,
 8014d50:	fa31 fc04 	lsrs.w	ip, r1, r4
 8014d54:	bf1c      	itt	ne
 8014d56:	2101      	movne	r1, #1
 8014d58:	40a1      	lslne	r1, r4
 8014d5a:	441a      	add	r2, r3
                       data + start);
}
 8014d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return coap_add_data(pdu,
 8014d60:	f005 b9b0 	b.w	801a0c4 <coap_add_data>
}
 8014d64:	2000      	movs	r0, #0
 8014d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d6a:	4770      	bx	lr

08014d6c <coap_add_data_blocked_response>:
                       const coap_binary_t *token,
                       uint16_t media_type,
                       int maxage,
                       size_t length,
                       const uint8_t* data
) {
 8014d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d70:	b088      	sub	sp, #32
 8014d72:	461c      	mov	r4, r3
  coap_key_t etag;
  unsigned char buf[4];
  coap_block_t block2 = { 0, 0, 0 };
 8014d74:	2300      	movs	r3, #0
 8014d76:	9306      	str	r3, [sp, #24]
 8014d78:	f89d 301c 	ldrb.w	r3, [sp, #28]
) {
 8014d7c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  coap_block_t block2 = { 0, 0, 0 };
 8014d80:	f023 030f 	bic.w	r3, r3, #15
) {
 8014d84:	4617      	mov	r7, r2
  int block2_requested = 0;
  coap_subscription_t *subscription = coap_find_observer(resource, session, token);
 8014d86:	9a10      	ldr	r2, [sp, #64]	; 0x40
  coap_block_t block2 = { 0, 0, 0 };
 8014d88:	f88d 301c 	strb.w	r3, [sp, #28]
) {
 8014d8c:	e9dd a512 	ldrd	sl, r5, [sp, #72]	; 0x48
 8014d90:	4681      	mov	r9, r0
  coap_subscription_t *subscription = coap_find_observer(resource, session, token);
 8014d92:	f006 fa4d 	bl	801b230 <coap_find_observer>
 8014d96:	4606      	mov	r6, r0

  /*
   * Need to check that a valid block is getting asked for so that the
   * correct options are put into the PDU.
   */
  if (request) {
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	d07c      	beq.n	8014e96 <coap_add_data_blocked_response+0x12a>
    if (coap_get_block(request, COAP_OPTION_BLOCK2, &block2)) {
 8014d9c:	aa06      	add	r2, sp, #24
 8014d9e:	2117      	movs	r1, #23
 8014da0:	4638      	mov	r0, r7
 8014da2:	f7ff fee9 	bl	8014b78 <coap_get_block>
 8014da6:	2800      	cmp	r0, #0
 8014da8:	d148      	bne.n	8014e3c <coap_add_data_blocked_response+0xd0>
  int block2_requested = 0;
 8014daa:	2700      	movs	r7, #0
  else if (subscription && subscription->has_block2) {
    block2 = subscription->block2;
    block2.num = 0;
    block2_requested = 1;
  }
  response->code = COAP_RESPONSE_CODE(205);
 8014dac:	2345      	movs	r3, #69	; 0x45
 8014dae:	7063      	strb	r3, [r4, #1]

  /* add etag for the resource */
  memset(etag, 0, sizeof(etag));
  coap_hash(data, length, etag);
 8014db0:	aa04      	add	r2, sp, #16
  memset(etag, 0, sizeof(etag));
 8014db2:	2300      	movs	r3, #0
  coap_hash(data, length, etag);
 8014db4:	4629      	mov	r1, r5
 8014db6:	4640      	mov	r0, r8
  memset(etag, 0, sizeof(etag));
 8014db8:	9304      	str	r3, [sp, #16]
  coap_hash(data, length, etag);
 8014dba:	f000 fd19 	bl	80157f0 <coap_hash_impl>
  coap_add_option(response, COAP_OPTION_ETAG, sizeof(etag), etag);
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	ab04      	add	r3, sp, #16
 8014dc2:	4611      	mov	r1, r2
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f005 f8ff 	bl	8019fc8 <coap_add_option>

  if ((block2.num == 0) && subscription) {
 8014dca:	9b06      	ldr	r3, [sp, #24]
 8014dcc:	b963      	cbnz	r3, 8014de8 <coap_add_data_blocked_response+0x7c>
 8014dce:	b15e      	cbz	r6, 8014de8 <coap_add_data_blocked_response+0x7c>
    coap_add_option(response, COAP_OPTION_OBSERVE,
 8014dd0:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 8014dd4:	2104      	movs	r1, #4
 8014dd6:	a805      	add	r0, sp, #20
 8014dd8:	f002 fe74 	bl	8017ac4 <coap_encode_var_safe>
 8014ddc:	ab05      	add	r3, sp, #20
 8014dde:	4602      	mov	r2, r0
 8014de0:	2106      	movs	r1, #6
 8014de2:	4620      	mov	r0, r4
 8014de4:	f005 f8f0 	bl	8019fc8 <coap_add_option>
                    coap_encode_var_safe(buf, sizeof (buf),
                                         resource->observe),
                    buf);
  }

  coap_add_option(response, COAP_OPTION_CONTENT_TYPE,
 8014de8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8014dec:	2104      	movs	r1, #4
 8014dee:	a805      	add	r0, sp, #20
 8014df0:	f002 fe68 	bl	8017ac4 <coap_encode_var_safe>
 8014df4:	ab05      	add	r3, sp, #20
 8014df6:	4602      	mov	r2, r0
 8014df8:	210c      	movs	r1, #12
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f005 f8e4 	bl	8019fc8 <coap_add_option>
                  coap_encode_var_safe(buf, sizeof(buf),
                                       media_type),
                  buf);

  if (maxage >= 0) {
 8014e00:	f1ba 0f00 	cmp.w	sl, #0
 8014e04:	db0a      	blt.n	8014e1c <coap_add_data_blocked_response+0xb0>
    coap_add_option(response,
 8014e06:	4652      	mov	r2, sl
 8014e08:	2104      	movs	r1, #4
 8014e0a:	a805      	add	r0, sp, #20
 8014e0c:	f002 fe5a 	bl	8017ac4 <coap_encode_var_safe>
 8014e10:	ab05      	add	r3, sp, #20
 8014e12:	4602      	mov	r2, r0
 8014e14:	210e      	movs	r1, #14
 8014e16:	4620      	mov	r0, r4
 8014e18:	f005 f8d6 	bl	8019fc8 <coap_add_option>
                    COAP_OPTION_MAXAGE,
                    coap_encode_var_safe(buf, sizeof(buf), maxage), buf);
  }

  if (block2_requested) {
 8014e1c:	2f00      	cmp	r7, #0
 8014e1e:	d04e      	beq.n	8014ebe <coap_add_data_blocked_response+0x152>
    int res;

    res = coap_write_block_opt(&block2, COAP_OPTION_BLOCK2, response,
 8014e20:	4622      	mov	r2, r4
 8014e22:	462b      	mov	r3, r5
 8014e24:	2117      	movs	r1, #23
 8014e26:	a806      	add	r0, sp, #24
 8014e28:	f7ff fefc 	bl	8014c24 <coap_write_block_opt>
                               length);

    switch (res) {
 8014e2c:	1c82      	adds	r2, r0, #2
 8014e2e:	d01f      	beq.n	8014e70 <coap_add_data_blocked_response+0x104>
 8014e30:	1c43      	adds	r3, r0, #1
 8014e32:	d03e      	beq.n	8014eb2 <coap_add_data_blocked_response+0x146>
 8014e34:	3003      	adds	r0, #3
 8014e36:	d157      	bne.n	8014ee8 <coap_add_data_blocked_response+0x17c>
        goto error;
    case -1:                        /* should really not happen */
        assert(0);
        /* fall through if assert is a no-op */
    case -3:                        /* cannot handle request */
        response->code = COAP_RESPONSE_CODE(500);
 8014e38:	23a0      	movs	r3, #160	; 0xa0
 8014e3a:	e01a      	b.n	8014e72 <coap_add_data_blocked_response+0x106>
      if (length <= (block2.num << (block2.szx + 4))) {
 8014e3c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8014e40:	9a06      	ldr	r2, [sp, #24]
 8014e42:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8014e46:	3304      	adds	r3, #4
 8014e48:	fa02 f303 	lsl.w	r3, r2, r3
 8014e4c:	42ab      	cmp	r3, r5
 8014e4e:	d32e      	bcc.n	8014eae <coap_add_data_blocked_response+0x142>
        coap_log(LOG_DEBUG, "Illegal block requested (%d > last = %zu)\n",
 8014e50:	f000 f8c8 	bl	8014fe4 <coap_get_log_level>
 8014e54:	2806      	cmp	r0, #6
 8014e56:	d90b      	bls.n	8014e70 <coap_add_data_blocked_response+0x104>
 8014e58:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8014e5c:	9a06      	ldr	r2, [sp, #24]
 8014e5e:	492e      	ldr	r1, [pc, #184]	; (8014f18 <coap_add_data_blocked_response+0x1ac>)
 8014e60:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8014e64:	3304      	adds	r3, #4
 8014e66:	fa25 f303 	lsr.w	r3, r5, r3
 8014e6a:	2007      	movs	r0, #7
 8014e6c:	f000 f924 	bl	80150b8 <coap_log_impl>
        response->code = COAP_RESPONSE_CODE(400);
 8014e70:	2380      	movs	r3, #128	; 0x80
        response->code = COAP_RESPONSE_CODE(500);
 8014e72:	7063      	strb	r3, [r4, #1]
                   block2.num, block2.szx);
  }
  return;

error:
  coap_add_data(response,
 8014e74:	7860      	ldrb	r0, [r4, #1]
 8014e76:	f005 f963 	bl	801a140 <coap_response_phrase>
 8014e7a:	f7eb fa03 	bl	8000284 <strlen>
 8014e7e:	9003      	str	r0, [sp, #12]
                strlen(coap_response_phrase(response->code)),
                (const unsigned char *)coap_response_phrase(response->code));
 8014e80:	7860      	ldrb	r0, [r4, #1]
 8014e82:	f005 f95d 	bl	801a140 <coap_response_phrase>
  coap_add_data(response,
 8014e86:	9903      	ldr	r1, [sp, #12]
                (const unsigned char *)coap_response_phrase(response->code));
 8014e88:	4602      	mov	r2, r0
  coap_add_data(response,
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	f005 f91a 	bl	801a0c4 <coap_add_data>
}
 8014e90:	b008      	add	sp, #32
 8014e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (subscription && subscription->has_block2) {
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d087      	beq.n	8014daa <coap_add_data_blocked_response+0x3e>
 8014e9a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	da83      	bge.n	8014daa <coap_add_data_blocked_response+0x3e>
    block2 = subscription->block2;
 8014ea2:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
 8014ea6:	ab08      	add	r3, sp, #32
 8014ea8:	e903 0003 	stmdb	r3, {r0, r1}
    block2.num = 0;
 8014eac:	9706      	str	r7, [sp, #24]
      block2_requested = 1;
 8014eae:	2701      	movs	r7, #1
 8014eb0:	e77c      	b.n	8014dac <coap_add_data_blocked_response+0x40>
        assert(0);
 8014eb2:	4b1a      	ldr	r3, [pc, #104]	; (8014f1c <coap_add_data_blocked_response+0x1b0>)
 8014eb4:	4a1a      	ldr	r2, [pc, #104]	; (8014f20 <coap_add_data_blocked_response+0x1b4>)
 8014eb6:	481b      	ldr	r0, [pc, #108]	; (8014f24 <coap_add_data_blocked_response+0x1b8>)
 8014eb8:	21e1      	movs	r1, #225	; 0xe1
 8014eba:	f006 fddf 	bl	801ba7c <__assert_func>
  if (!coap_add_data(response, length, data)) {
 8014ebe:	4642      	mov	r2, r8
 8014ec0:	4629      	mov	r1, r5
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f005 f8fe 	bl	801a0c4 <coap_add_data>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d1e1      	bne.n	8014e90 <coap_add_data_blocked_response+0x124>
    block2.szx = 6;
 8014ecc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    block2.num = 0;
 8014ed0:	9706      	str	r7, [sp, #24]
    block2.szx = 6;
 8014ed2:	2206      	movs	r2, #6
 8014ed4:	f362 0343 	bfi	r3, r2, #1, #3
 8014ed8:	f88d 301c 	strb.w	r3, [sp, #28]
    coap_write_block_opt(&block2, COAP_OPTION_BLOCK2, response,
 8014edc:	4622      	mov	r2, r4
 8014ede:	462b      	mov	r3, r5
 8014ee0:	2117      	movs	r1, #23
 8014ee2:	a806      	add	r0, sp, #24
 8014ee4:	f7ff fe9e 	bl	8014c24 <coap_write_block_opt>
    coap_add_option(response,
 8014ee8:	462a      	mov	r2, r5
 8014eea:	2104      	movs	r1, #4
 8014eec:	a805      	add	r0, sp, #20
 8014eee:	f002 fde9 	bl	8017ac4 <coap_encode_var_safe>
 8014ef2:	ab05      	add	r3, sp, #20
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	211c      	movs	r1, #28
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f005 f865 	bl	8019fc8 <coap_add_option>
                   block2.num, block2.szx);
 8014efe:	f89d 301c 	ldrb.w	r3, [sp, #28]
    coap_add_block(response, length, data,
 8014f02:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	4642      	mov	r2, r8
 8014f0a:	9b06      	ldr	r3, [sp, #24]
 8014f0c:	4629      	mov	r1, r5
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f7ff ff16 	bl	8014d40 <coap_add_block>
 8014f14:	e7bc      	b.n	8014e90 <coap_add_data_blocked_response+0x124>
 8014f16:	bf00      	nop
 8014f18:	0802ef36 	.word	0x0802ef36
 8014f1c:	0802b8dd 	.word	0x0802b8dd
 8014f20:	0802a834 	.word	0x0802a834
 8014f24:	0802ee45 	.word	0x0802ee45

08014f28 <print_readable.constprop.0>:
  return n;
}
#endif /* HAVE_STRNLEN */

static size_t
print_readable( const uint8_t *data, size_t len,
 8014f28:	b5f0      	push	{r4, r5, r6, r7, lr}
                unsigned char *result, size_t buflen, int encode_always ) {
  const uint8_t hex[] = "0123456789ABCDEF";
 8014f2a:	4e29      	ldr	r6, [pc, #164]	; (8014fd0 <print_readable.constprop.0+0xa8>)
print_readable( const uint8_t *data, size_t len,
 8014f2c:	b087      	sub	sp, #28
 8014f2e:	4604      	mov	r4, r0
 8014f30:	460d      	mov	r5, r1
  const uint8_t hex[] = "0123456789ABCDEF";
 8014f32:	af01      	add	r7, sp, #4
 8014f34:	f106 0e10 	add.w	lr, r6, #16
 8014f38:	6830      	ldr	r0, [r6, #0]
 8014f3a:	6871      	ldr	r1, [r6, #4]
 8014f3c:	46bc      	mov	ip, r7
 8014f3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014f42:	3608      	adds	r6, #8
 8014f44:	4576      	cmp	r6, lr
 8014f46:	4667      	mov	r7, ip
 8014f48:	d1f6      	bne.n	8014f38 <print_readable.constprop.0+0x10>
 8014f4a:	7831      	ldrb	r1, [r6, #0]
 8014f4c:	f88c 1000 	strb.w	r1, [ip]
  size_t cnt = 0;
  assert(data || len == 0);
 8014f50:	b16c      	cbz	r4, 8014f6e <print_readable.constprop.0+0x46>
  if (buflen == 0) { /* there is nothing we can do here but return */
    return 0;
  }

  while (len) {
    if (!encode_always && isprint(*data)) {
 8014f52:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8014fe0 <print_readable.constprop.0+0xb8>
 8014f56:	1966      	adds	r6, r4, r5
      } else {
        break;
      }
    } else {
      if (cnt+4 < buflen) { /* keep one byte for terminating zero */
        *result++ = '\\';
 8014f58:	275c      	movs	r7, #92	; 0x5c
  assert(data || len == 0);
 8014f5a:	2500      	movs	r5, #0
        *result++ = 'x';
 8014f5c:	f04f 0c78 	mov.w	ip, #120	; 0x78
  while (len) {
 8014f60:	42b4      	cmp	r4, r6
 8014f62:	d10c      	bne.n	8014f7e <print_readable.constprop.0+0x56>
    }

    ++data; --len;
  }

  *result = '\0'; /* add a terminating zero */
 8014f64:	2300      	movs	r3, #0
  return cnt;
}
 8014f66:	4628      	mov	r0, r5
  *result = '\0'; /* add a terminating zero */
 8014f68:	7013      	strb	r3, [r2, #0]
}
 8014f6a:	b007      	add	sp, #28
 8014f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert(data || len == 0);
 8014f6e:	2d00      	cmp	r5, #0
 8014f70:	d0f8      	beq.n	8014f64 <print_readable.constprop.0+0x3c>
 8014f72:	4b18      	ldr	r3, [pc, #96]	; (8014fd4 <print_readable.constprop.0+0xac>)
 8014f74:	4a18      	ldr	r2, [pc, #96]	; (8014fd8 <print_readable.constprop.0+0xb0>)
 8014f76:	4819      	ldr	r0, [pc, #100]	; (8014fdc <print_readable.constprop.0+0xb4>)
 8014f78:	2187      	movs	r1, #135	; 0x87
 8014f7a:	f006 fd7f 	bl	801ba7c <__assert_func>
    if (!encode_always && isprint(*data)) {
 8014f7e:	b973      	cbnz	r3, 8014f9e <print_readable.constprop.0+0x76>
 8014f80:	7821      	ldrb	r1, [r4, #0]
 8014f82:	f811 000e 	ldrb.w	r0, [r1, lr]
 8014f86:	f010 0f97 	tst.w	r0, #151	; 0x97
 8014f8a:	d008      	beq.n	8014f9e <print_readable.constprop.0+0x76>
      if (cnt+1 < buflen) { /* keep one byte for terminating zero */
 8014f8c:	1c68      	adds	r0, r5, #1
 8014f8e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014f92:	d2e7      	bcs.n	8014f64 <print_readable.constprop.0+0x3c>
      *result++ = *data;
 8014f94:	f802 1b01 	strb.w	r1, [r2], #1
    ++data; --len;
 8014f98:	3401      	adds	r4, #1
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	e7e0      	b.n	8014f60 <print_readable.constprop.0+0x38>
      if (cnt+4 < buflen) { /* keep one byte for terminating zero */
 8014f9e:	1d28      	adds	r0, r5, #4
 8014fa0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014fa4:	d2de      	bcs.n	8014f64 <print_readable.constprop.0+0x3c>
        *result++ = '\\';
 8014fa6:	7017      	strb	r7, [r2, #0]
        *result++ = 'x';
 8014fa8:	f882 c001 	strb.w	ip, [r2, #1]
        *result++ = hex[(*data & 0xf0) >> 4];
 8014fac:	7821      	ldrb	r1, [r4, #0]
 8014fae:	ad06      	add	r5, sp, #24
 8014fb0:	eb05 1111 	add.w	r1, r5, r1, lsr #4
        *result++ = hex[*data & 0x0f];
 8014fb4:	3204      	adds	r2, #4
        *result++ = hex[(*data & 0xf0) >> 4];
 8014fb6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8014fba:	f802 1c02 	strb.w	r1, [r2, #-2]
        *result++ = hex[*data & 0x0f];
 8014fbe:	7821      	ldrb	r1, [r4, #0]
 8014fc0:	f001 010f 	and.w	r1, r1, #15
 8014fc4:	4429      	add	r1, r5
 8014fc6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8014fca:	f802 1c01 	strb.w	r1, [r2, #-1]
        cnt += 4;
 8014fce:	e7e3      	b.n	8014f98 <print_readable.constprop.0+0x70>
 8014fd0:	0802efdf 	.word	0x0802efdf
 8014fd4:	0802ef61 	.word	0x0802ef61
 8014fd8:	0802a854 	.word	0x0802a854
 8014fdc:	0802ef72 	.word	0x0802ef72
 8014fe0:	08031a55 	.word	0x08031a55

08014fe4 <coap_get_log_level>:
}
 8014fe4:	4b01      	ldr	r3, [pc, #4]	; (8014fec <coap_get_log_level+0x8>)
 8014fe6:	7918      	ldrb	r0, [r3, #4]
 8014fe8:	4770      	bx	lr
 8014fea:	bf00      	nop
 8014fec:	2000004c 	.word	0x2000004c

08014ff0 <coap_set_log_level>:
  maxlog = level;
 8014ff0:	4b01      	ldr	r3, [pc, #4]	; (8014ff8 <coap_set_log_level+0x8>)
 8014ff2:	7118      	strb	r0, [r3, #4]
}
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop
 8014ff8:	2000004c 	.word	0x2000004c

08014ffc <coap_print_addr>:
#ifndef min
#define min(a,b) ((a) < (b) ? (a) : (b))
#endif

size_t
coap_print_addr(const struct coap_address_t *addr, unsigned char *buf, size_t len) {
 8014ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const void *addrptr = NULL;
  in_port_t port;
  unsigned char *p = buf;
  size_t need_buf;

  switch (addr->addr.sa.sa_family) {
 8015000:	7943      	ldrb	r3, [r0, #5]
 8015002:	2b02      	cmp	r3, #2
coap_print_addr(const struct coap_address_t *addr, unsigned char *buf, size_t len) {
 8015004:	4606      	mov	r6, r0
 8015006:	4688      	mov	r8, r1
 8015008:	4691      	mov	r9, r2
  switch (addr->addr.sa.sa_family) {
 801500a:	d00b      	beq.n	8015024 <coap_print_addr+0x28>
 801500c:	2b0a      	cmp	r3, #10
 801500e:	d01f      	beq.n	8015050 <coap_print_addr+0x54>
    port = ntohs(addr->addr.sin6.sin6_port);
    need_buf = INET6_ADDRSTRLEN;

    break;
  default:
    memcpy(buf, "(unknown address type)", min(22, len));
 8015010:	2a16      	cmp	r2, #22
 8015012:	4614      	mov	r4, r2
 8015014:	bf28      	it	cs
 8015016:	2416      	movcs	r4, #22
 8015018:	4924      	ldr	r1, [pc, #144]	; (80150ac <coap_print_addr+0xb0>)
 801501a:	4622      	mov	r2, r4
 801501c:	4640      	mov	r0, r8
 801501e:	f007 f90f 	bl	801c240 <memcpy>
    return min(22, len);
 8015022:	e018      	b.n	8015056 <coap_print_addr+0x5a>
    addrptr = &addr->addr.sin.sin_addr;
 8015024:	f100 0408 	add.w	r4, r0, #8
    port = ntohs(addr->addr.sin.sin_port);
 8015028:	88c0      	ldrh	r0, [r0, #6]
 801502a:	f7f9 f839 	bl	800e0a0 <lwip_htons>
    break;
 801502e:	4645      	mov	r5, r8
    port = ntohs(addr->addr.sin.sin_port);
 8015030:	4607      	mov	r7, r0
    need_buf = INET_ADDRSTRLEN;
 8015032:	2310      	movs	r3, #16
  }

  /* Cast needed for Windows, since it doesn't have the correct API signature. */
  if (inet_ntop(addr->addr.sa.sa_family, addrptr, (char *)p,
 8015034:	454b      	cmp	r3, r9
 8015036:	4621      	mov	r1, r4
 8015038:	7970      	ldrb	r0, [r6, #5]
 801503a:	bf28      	it	cs
 801503c:	464b      	movcs	r3, r9
 801503e:	462a      	mov	r2, r5
 8015040:	f7f3 fa90 	bl	8008564 <lwip_inet_ntop>
 8015044:	4604      	mov	r4, r0
 8015046:	b9a8      	cbnz	r0, 8015074 <coap_print_addr+0x78>
                min(len, need_buf)) == 0) {
    perror("coap_print_addr");
 8015048:	4819      	ldr	r0, [pc, #100]	; (80150b0 <coap_print_addr+0xb4>)
 801504a:	f007 fd65 	bl	801cb18 <perror>
    return 0;
 801504e:	e002      	b.n	8015056 <coap_print_addr+0x5a>
    if (len < 7) /* do not proceed if buffer is even too short for [::]:0 */
 8015050:	2a06      	cmp	r2, #6
 8015052:	d803      	bhi.n	801505c <coap_print_addr+0x60>
      return 0;
 8015054:	2400      	movs	r4, #0
  /* TODO: output addresses manually */
#   warning "inet_ntop() not available, network addresses will not be included in debug output"
# endif /* WITH_CONTIKI */
  return 0;
#endif
}
 8015056:	4620      	mov	r0, r4
 8015058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *p++ = '[';
 801505c:	460d      	mov	r5, r1
 801505e:	235b      	movs	r3, #91	; 0x5b
 8015060:	f805 3b01 	strb.w	r3, [r5], #1
    addrptr = &addr->addr.sin6.sin6_addr;
 8015064:	f100 040c 	add.w	r4, r0, #12
    port = ntohs(addr->addr.sin6.sin6_port);
 8015068:	88c0      	ldrh	r0, [r0, #6]
 801506a:	f7f9 f819 	bl	800e0a0 <lwip_htons>
    need_buf = INET6_ADDRSTRLEN;
 801506e:	232e      	movs	r3, #46	; 0x2e
    port = ntohs(addr->addr.sin6.sin6_port);
 8015070:	4607      	mov	r7, r0
    break;
 8015072:	e7df      	b.n	8015034 <coap_print_addr+0x38>
  p += strnlen((char *)p, len);
 8015074:	4649      	mov	r1, r9
 8015076:	4628      	mov	r0, r5
 8015078:	f008 fe02 	bl	801dc80 <strnlen>
  if (addr->addr.sa.sa_family == AF_INET6) {
 801507c:	7973      	ldrb	r3, [r6, #5]
 801507e:	2b0a      	cmp	r3, #10
  p += strnlen((char *)p, len);
 8015080:	eb05 0400 	add.w	r4, r5, r0
  if (addr->addr.sa.sa_family == AF_INET6) {
 8015084:	44c8      	add	r8, r9
 8015086:	d104      	bne.n	8015092 <coap_print_addr+0x96>
    if (p < buf + len) {
 8015088:	4544      	cmp	r4, r8
 801508a:	d2e3      	bcs.n	8015054 <coap_print_addr+0x58>
      *p++ = ']';
 801508c:	235d      	movs	r3, #93	; 0x5d
 801508e:	f804 3b01 	strb.w	r3, [r4], #1
  p += snprintf((char *)p, buf + len - p + 1, ":%d", port);
 8015092:	eba8 0104 	sub.w	r1, r8, r4
 8015096:	4620      	mov	r0, r4
 8015098:	4a06      	ldr	r2, [pc, #24]	; (80150b4 <coap_print_addr+0xb8>)
 801509a:	463b      	mov	r3, r7
 801509c:	3101      	adds	r1, #1
 801509e:	f007 fde1 	bl	801cc64 <sniprintf>
 80150a2:	4420      	add	r0, r4
  return buf + len - p;
 80150a4:	eba8 0400 	sub.w	r4, r8, r0
 80150a8:	e7d5      	b.n	8015056 <coap_print_addr+0x5a>
 80150aa:	bf00      	nop
 80150ac:	0802f00d 	.word	0x0802f00d
 80150b0:	0802f024 	.word	0x0802f024
 80150b4:	0802f034 	.word	0x0802f034

080150b8 <coap_log_impl>:
void coap_set_log_handler(coap_log_handler_t handler) {
  log_handler = handler;
}

void
coap_log_impl(coap_log_t level, const char *format, ...) {
 80150b8:	b40e      	push	{r1, r2, r3}
 80150ba:	b570      	push	{r4, r5, r6, lr}

  if (maxlog < level)
 80150bc:	4b29      	ldr	r3, [pc, #164]	; (8015164 <coap_log_impl+0xac>)
 80150be:	791b      	ldrb	r3, [r3, #4]
coap_log_impl(coap_log_t level, const char *format, ...) {
 80150c0:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
  if (maxlog < level)
 80150c4:	4283      	cmp	r3, r0
coap_log_impl(coap_log_t level, const char *format, ...) {
 80150c6:	f8dd 682c 	ldr.w	r6, [sp, #2092]	; 0x82c
 80150ca:	4604      	mov	r4, r0
  if (maxlog < level)
 80150cc:	d30f      	bcc.n	80150ee <coap_log_impl+0x36>
    return;

  if (log_handler) {
 80150ce:	4d26      	ldr	r5, [pc, #152]	; (8015168 <coap_log_impl+0xb0>)
 80150d0:	682b      	ldr	r3, [r5, #0]
 80150d2:	b193      	cbz	r3, 80150fa <coap_log_impl+0x42>
    static char message[COAP_DEBUG_BUF_SIZE];
#else /* ! COAP_CONSTRAINED_STACK */
    char message[COAP_DEBUG_BUF_SIZE];
#endif /* ! COAP_CONSTRAINED_STACK */
    va_list ap;
    va_start(ap, format);
 80150d4:	f50d 6303 	add.w	r3, sp, #2096	; 0x830
#if COAP_CONSTRAINED_STACK
  coap_mutex_lock(&static_log_mutex);
#endif /* COAP_CONSTRAINED_STACK */

    vsnprintf( message, sizeof(message), format, ap);
 80150d8:	f640 0108 	movw	r1, #2056	; 0x808
 80150dc:	4632      	mov	r2, r6
 80150de:	a804      	add	r0, sp, #16
    va_start(ap, format);
 80150e0:	9302      	str	r3, [sp, #8]
    vsnprintf( message, sizeof(message), format, ap);
 80150e2:	f009 f957 	bl	801e394 <vsniprintf>
    va_end(ap);
    log_handler(level, message);
 80150e6:	682b      	ldr	r3, [r5, #0]
 80150e8:	a904      	add	r1, sp, #16
 80150ea:	4620      	mov	r0, r4
 80150ec:	4798      	blx	r3
    va_start(ap, format);
    vfprintf(log_fd, format, ap);
    va_end(ap);
    fflush(log_fd);
  }
}
 80150ee:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 80150f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150f6:	b003      	add	sp, #12
 80150f8:	4770      	bx	lr
    log_fd = level <= LOG_CRIT ? COAP_ERR_FD : COAP_DEBUG_FD;
 80150fa:	4b1c      	ldr	r3, [pc, #112]	; (801516c <coap_log_impl+0xb4>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	e9d3 5302 	ldrd	r5, r3, [r3, #8]
 8015102:	2802      	cmp	r0, #2
 8015104:	bf98      	it	ls
 8015106:	461d      	movls	r5, r3
    coap_ticks(&now);
 8015108:	4668      	mov	r0, sp
 801510a:	f002 fc69 	bl	80179e0 <coap_ticks>
  time_t now = coap_ticks_to_rt(t);
 801510e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015112:	f002 fc9b 	bl	8017a4c <coap_ticks_to_rt>
 8015116:	e9cd 0102 	strd	r0, r1, [sp, #8]
  tmp = localtime(&now);
 801511a:	a802      	add	r0, sp, #8
 801511c:	f006 ff58 	bl	801bfd0 <localtime>
  return strftime(s, len, "%b %d %H:%M:%S", tmp);
 8015120:	4a13      	ldr	r2, [pc, #76]	; (8015170 <coap_log_impl+0xb8>)
  tmp = localtime(&now);
 8015122:	4603      	mov	r3, r0
  return strftime(s, len, "%b %d %H:%M:%S", tmp);
 8015124:	2120      	movs	r1, #32
 8015126:	a804      	add	r0, sp, #16
 8015128:	f008 fd8e 	bl	801dc48 <strftime>
    if (print_timestamp(timebuf,sizeof(timebuf), now))
 801512c:	b120      	cbz	r0, 8015138 <coap_log_impl+0x80>
      fprintf(log_fd, "%s ", timebuf);
 801512e:	4911      	ldr	r1, [pc, #68]	; (8015174 <coap_log_impl+0xbc>)
 8015130:	aa04      	add	r2, sp, #16
 8015132:	4628      	mov	r0, r5
 8015134:	f006 fe88 	bl	801be48 <fiprintf>
    if (level <= LOG_DEBUG)
 8015138:	2c07      	cmp	r4, #7
 801513a:	d807      	bhi.n	801514c <coap_log_impl+0x94>
      fprintf(log_fd, "%s ", loglevels[level]);
 801513c:	480e      	ldr	r0, [pc, #56]	; (8015178 <coap_log_impl+0xc0>)
 801513e:	490d      	ldr	r1, [pc, #52]	; (8015174 <coap_log_impl+0xbc>)
 8015140:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8015144:	4628      	mov	r0, r5
 8015146:	6922      	ldr	r2, [r4, #16]
 8015148:	f006 fe7e 	bl	801be48 <fiprintf>
    va_start(ap, format);
 801514c:	f50d 6303 	add.w	r3, sp, #2096	; 0x830
    vfprintf(log_fd, format, ap);
 8015150:	461a      	mov	r2, r3
 8015152:	4631      	mov	r1, r6
 8015154:	4628      	mov	r0, r5
    va_start(ap, format);
 8015156:	9302      	str	r3, [sp, #8]
    vfprintf(log_fd, format, ap);
 8015158:	f007 faa6 	bl	801c6a8 <vfiprintf>
    fflush(log_fd);
 801515c:	4628      	mov	r0, r5
 801515e:	f006 fd8b 	bl	801bc78 <fflush>
 8015162:	e7c4      	b.n	80150ee <coap_log_impl+0x36>
 8015164:	2000004c 	.word	0x2000004c
 8015168:	20007108 	.word	0x20007108
 801516c:	2000011c 	.word	0x2000011c
 8015170:	0802f153 	.word	0x0802f153
 8015174:	0802f162 	.word	0x0802f162
 8015178:	0802a854 	.word	0x0802a854

0801517c <coap_show_pdu>:
coap_show_pdu(coap_log_t level, const coap_pdu_t *pdu) {
 801517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return maxlog;
 8015180:	4fb8      	ldr	r7, [pc, #736]	; (8015464 <coap_show_pdu+0x2e8>)
  if (level > coap_get_log_level())
 8015182:	793b      	ldrb	r3, [r7, #4]
coap_show_pdu(coap_log_t level, const coap_pdu_t *pdu) {
 8015184:	f6ad 4d44 	subw	sp, sp, #3140	; 0xc44
  if (level > coap_get_log_level())
 8015188:	4283      	cmp	r3, r0
coap_show_pdu(coap_log_t level, const coap_pdu_t *pdu) {
 801518a:	4606      	mov	r6, r0
 801518c:	460d      	mov	r5, r1
 801518e:	9704      	str	r7, [sp, #16]
  if (level > coap_get_log_level())
 8015190:	f0c0 810b 	bcc.w	80153aa <coap_show_pdu+0x22e>
  return types[min(t, sizeof(types)/sizeof(char *) - 1)];
 8015194:	782b      	ldrb	r3, [r5, #0]
 8015196:	49b4      	ldr	r1, [pc, #720]	; (8015468 <coap_show_pdu+0x2ec>)
          msg_code_string(pdu->code), pdu->tid);
 8015198:	786a      	ldrb	r2, [r5, #1]
  return types[min(t, sizeof(types)/sizeof(char *) - 1)];
 801519a:	2b04      	cmp	r3, #4
 801519c:	bf28      	it	cs
 801519e:	2304      	movcs	r3, #4
 80151a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  if (c < sizeof(methods)/sizeof(const char *)) {
 80151a4:	2a07      	cmp	r2, #7
  return types[min(t, sizeof(types)/sizeof(char *) - 1)];
 80151a6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80151a8:	4688      	mov	r8, r1
  snprintf(outbuf, sizeof(outbuf), "v:%d t:%s c:%s i:%04x {",
 80151aa:	4613      	mov	r3, r2
  if (c < sizeof(methods)/sizeof(const char *)) {
 80151ac:	f200 8101 	bhi.w	80153b2 <coap_show_pdu+0x236>
    return methods[c];
 80151b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80151b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
  snprintf(outbuf, sizeof(outbuf), "v:%d t:%s c:%s i:%04x {",
 80151b6:	88ea      	ldrh	r2, [r5, #6]
 80151b8:	9400      	str	r4, [sp, #0]
 80151ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80151be:	f640 0108 	movw	r1, #2056	; 0x808
 80151c2:	4aaa      	ldr	r2, [pc, #680]	; (801546c <coap_show_pdu+0x2f0>)
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 80151c4:	4faa      	ldr	r7, [pc, #680]	; (8015470 <coap_show_pdu+0x2f4>)
  snprintf(outbuf, sizeof(outbuf), "v:%d t:%s c:%s i:%04x {",
 80151c6:	2301      	movs	r3, #1
 80151c8:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80151cc:	f007 fd4a 	bl	801cc64 <sniprintf>
  for (i = 0; i < pdu->token_length; i++) {
 80151d0:	2400      	movs	r4, #0
 80151d2:	f640 0908 	movw	r9, #2056	; 0x808
 80151d6:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80151da:	f7eb f853 	bl	8000284 <strlen>
 80151de:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 80151e2:	4601      	mov	r1, r0
 80151e4:	1818      	adds	r0, r3, r0
 80151e6:	792b      	ldrb	r3, [r5, #4]
 80151e8:	42a3      	cmp	r3, r4
 80151ea:	eba9 0101 	sub.w	r1, r9, r1
 80151ee:	f300 80f4 	bgt.w	80153da <coap_show_pdu+0x25e>
  snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  "}");
 80151f2:	4aa0      	ldr	r2, [pc, #640]	; (8015474 <coap_show_pdu+0x2f8>)
      buf_len = snprintf((char *)buf, sizeof(buf), "%u",
 80151f4:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 80154ac <coap_show_pdu+0x330>
  snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  "}");
 80151f8:	f007 fd34 	bl	801cc64 <sniprintf>
  coap_option_iterator_init(pdu, &opt_iter, COAP_OPT_ALL);
 80151fc:	2200      	movs	r2, #0
 80151fe:	a908      	add	r1, sp, #32
 8015200:	4628      	mov	r0, r5
 8015202:	f004 fc09 	bl	8019a18 <coap_option_iterator_init>
  outbuflen = strlen(outbuf);
 8015206:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 801520a:	f7eb f83b 	bl	8000284 <strlen>
  snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  " [");
 801520e:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8015212:	eba9 0100 	sub.w	r1, r9, r0
 8015216:	4a98      	ldr	r2, [pc, #608]	; (8015478 <coap_show_pdu+0x2fc>)
 8015218:	4418      	add	r0, r3
 801521a:	f007 fd23 	bl	801cc64 <sniprintf>
  int content_format = -1;
 801521e:	f04f 39ff 	mov.w	r9, #4294967295
  int encode = 0, have_options = 0, i;
 8015222:	2400      	movs	r4, #0
  while ((option = coap_option_next(&opt_iter))) {
 8015224:	a808      	add	r0, sp, #32
 8015226:	f004 fd6f 	bl	8019d08 <coap_option_next>
 801522a:	4607      	mov	r7, r0
 801522c:	2800      	cmp	r0, #0
 801522e:	f040 80db 	bne.w	80153e8 <coap_show_pdu+0x26c>
  outbuflen = strlen(outbuf);
 8015232:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8015236:	f7eb f825 	bl	8000284 <strlen>
  snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  " ]");
 801523a:	f640 0808 	movw	r8, #2056	; 0x808
 801523e:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8015242:	eba8 0100 	sub.w	r1, r8, r0
 8015246:	4a8d      	ldr	r2, [pc, #564]	; (801547c <coap_show_pdu+0x300>)
 8015248:	4418      	add	r0, r3
 801524a:	f007 fd0b 	bl	801cc64 <sniprintf>
  if (coap_get_data(pdu, &data_len, &data)) {
 801524e:	aa07      	add	r2, sp, #28
 8015250:	a906      	add	r1, sp, #24
 8015252:	4628      	mov	r0, r5
 8015254:	f004 ff48 	bl	801a0e8 <coap_get_data>
 8015258:	2800      	cmp	r0, #0
 801525a:	f000 808d 	beq.w	8015378 <coap_show_pdu+0x1fc>
    outbuflen = strlen(outbuf);
 801525e:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8015262:	f7eb f80f 	bl	8000284 <strlen>
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  " :: ");
 8015266:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 801526a:	eba8 0100 	sub.w	r1, r8, r0
 801526e:	4a84      	ldr	r2, [pc, #528]	; (8015480 <coap_show_pdu+0x304>)
 8015270:	4418      	add	r0, r3
 8015272:	f007 fcf7 	bl	801cc64 <sniprintf>
  return !(content_format == -1 ||
 8015276:	f109 0301 	add.w	r3, r9, #1
 801527a:	2b01      	cmp	r3, #1
 801527c:	f240 820c 	bls.w	8015698 <coap_show_pdu+0x51c>
           content_format == COAP_MEDIATYPE_TEXT_PLAIN ||
 8015280:	f1a9 0328 	sub.w	r3, r9, #40	; 0x28
 8015284:	2b01      	cmp	r3, #1
 8015286:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801528a:	f240 8205 	bls.w	8015698 <coap_show_pdu+0x51c>
  return !(content_format == -1 ||
 801528e:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 8015292:	f000 8201 	beq.w	8015698 <coap_show_pdu+0x51c>
      outbuflen = strlen(outbuf);
 8015296:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 801529a:	f7ea fff3 	bl	8000284 <strlen>
      snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 801529e:	f50d 6787 	add.w	r7, sp, #1080	; 0x438
 80152a2:	4623      	mov	r3, r4
 80152a4:	eba8 0100 	sub.w	r1, r8, r0
 80152a8:	4a76      	ldr	r2, [pc, #472]	; (8015484 <coap_show_pdu+0x308>)
 80152aa:	4438      	add	r0, r7
 80152ac:	f007 fcda 	bl	801cc64 <sniprintf>
      COAP_DO_SHOW_OUTPUT_LINE;
 80152b0:	9b04      	ldr	r3, [sp, #16]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f000 8207 	beq.w	80156c8 <coap_show_pdu+0x54c>
 80152ba:	4b73      	ldr	r3, [pc, #460]	; (8015488 <coap_show_pdu+0x30c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80152c2:	6899      	ldr	r1, [r3, #8]
 80152c4:	f006 fe38 	bl	801bf38 <fputs>
      outbuf[0] = '\000';
 80152c8:	2300      	movs	r3, #0
      snprintf(outbuf, sizeof(outbuf),  "<<");
 80152ca:	4970      	ldr	r1, [pc, #448]	; (801548c <coap_show_pdu+0x310>)
      outbuf[0] = '\000';
 80152cc:	f88d 3438 	strb.w	r3, [sp, #1080]	; 0x438
      snprintf(outbuf, sizeof(outbuf),  "<<");
 80152d0:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80152d4:	f007 fd6e 	bl	801cdb4 <strcpy>
        snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 80152d8:	4f65      	ldr	r7, [pc, #404]	; (8015470 <coap_show_pdu+0x2f4>)
 80152da:	f640 0808 	movw	r8, #2056	; 0x808
      while (data_len--) {
 80152de:	9b06      	ldr	r3, [sp, #24]
 80152e0:	1e5a      	subs	r2, r3, #1
 80152e2:	9206      	str	r2, [sp, #24]
        outbuflen = strlen(outbuf);
 80152e4:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
      while (data_len--) {
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f040 81f9 	bne.w	80156e0 <coap_show_pdu+0x564>
      outbuflen = strlen(outbuf);
 80152ee:	f7ea ffc9 	bl	8000284 <strlen>
      snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  ">>");
 80152f2:	f640 0808 	movw	r8, #2056	; 0x808
 80152f6:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 80152fa:	eba8 0100 	sub.w	r1, r8, r0
 80152fe:	4a64      	ldr	r2, [pc, #400]	; (8015490 <coap_show_pdu+0x314>)
 8015300:	4418      	add	r0, r3
 8015302:	f007 fcaf 	bl	801cc64 <sniprintf>
      outbuflen = strlen(outbuf);
 8015306:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
      data = keep_data;
 801530a:	e9cd 4506 	strd	r4, r5, [sp, #24]
      outbuflen = strlen(outbuf);
 801530e:	f7ea ffb9 	bl	8000284 <strlen>
      snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  "\n");
 8015312:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8015316:	eba8 0100 	sub.w	r1, r8, r0
 801531a:	4a5e      	ldr	r2, [pc, #376]	; (8015494 <coap_show_pdu+0x318>)
 801531c:	4418      	add	r0, r3
 801531e:	f007 fca1 	bl	801cc64 <sniprintf>
      COAP_DO_SHOW_OUTPUT_LINE;
 8015322:	9b04      	ldr	r3, [sp, #16]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	f000 81e9 	beq.w	80156fe <coap_show_pdu+0x582>
 801532c:	4b56      	ldr	r3, [pc, #344]	; (8015488 <coap_show_pdu+0x30c>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8015334:	6899      	ldr	r1, [r3, #8]
 8015336:	f006 fdff 	bl	801bf38 <fputs>
      outbuf[0] = '\000';
 801533a:	2300      	movs	r3, #0
      snprintf(outbuf, sizeof(outbuf),  "<<");
 801533c:	4953      	ldr	r1, [pc, #332]	; (801548c <coap_show_pdu+0x310>)
      outbuf[0] = '\000';
 801533e:	f88d 3438 	strb.w	r3, [sp, #1080]	; 0x438
      snprintf(outbuf, sizeof(outbuf),  "<<");
 8015342:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8015346:	f007 fd35 	bl	801cdb4 <strcpy>
                 "%c ", isprint (*data) ? *data : '.');
 801534a:	4d53      	ldr	r5, [pc, #332]	; (8015498 <coap_show_pdu+0x31c>)
        snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 801534c:	4f53      	ldr	r7, [pc, #332]	; (801549c <coap_show_pdu+0x320>)
 801534e:	f640 0408 	movw	r4, #2056	; 0x808
      while (data_len--) {
 8015352:	9b06      	ldr	r3, [sp, #24]
 8015354:	1e5a      	subs	r2, r3, #1
 8015356:	9206      	str	r2, [sp, #24]
        outbuflen = strlen(outbuf);
 8015358:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
      while (data_len--) {
 801535c:	2b00      	cmp	r3, #0
 801535e:	f040 81da 	bne.w	8015716 <coap_show_pdu+0x59a>
      outbuflen = strlen(outbuf);
 8015362:	f7ea ff8f 	bl	8000284 <strlen>
      snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  ">>");
 8015366:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 801536a:	f5c0 6100 	rsb	r1, r0, #2048	; 0x800
 801536e:	4a48      	ldr	r2, [pc, #288]	; (8015490 <coap_show_pdu+0x314>)
 8015370:	3108      	adds	r1, #8
 8015372:	4418      	add	r0, r3
 8015374:	f007 fc76 	bl	801cc64 <sniprintf>
  outbuflen = strlen(outbuf);
 8015378:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 801537c:	f7ea ff82 	bl	8000284 <strlen>
  snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  "\n");
 8015380:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8015384:	f5c0 6100 	rsb	r1, r0, #2048	; 0x800
 8015388:	4a42      	ldr	r2, [pc, #264]	; (8015494 <coap_show_pdu+0x318>)
 801538a:	4418      	add	r0, r3
 801538c:	3108      	adds	r1, #8
 801538e:	f007 fc69 	bl	801cc64 <sniprintf>
  COAP_DO_SHOW_OUTPUT_LINE;
 8015392:	9b04      	ldr	r3, [sp, #16]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	f000 81d1 	beq.w	801573e <coap_show_pdu+0x5c2>
 801539c:	4b3a      	ldr	r3, [pc, #232]	; (8015488 <coap_show_pdu+0x30c>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80153a4:	6899      	ldr	r1, [r3, #8]
 80153a6:	f006 fdc7 	bl	801bf38 <fputs>
}
 80153aa:	f60d 4d44 	addw	sp, sp, #3140	; 0xc44
 80153ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (c >= 224 && c - 224 < (int)(sizeof(signals)/sizeof(const char *))) {
 80153b2:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
 80153b6:	2905      	cmp	r1, #5
 80153b8:	d804      	bhi.n	80153c4 <coap_show_pdu+0x248>
    return signals[c-224];
 80153ba:	3ae0      	subs	r2, #224	; 0xe0
 80153bc:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80153c0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80153c2:	e6f8      	b.n	80151b6 <coap_show_pdu+0x3a>
    snprintf(buf, sizeof(buf), "%u.%02u", (c >> 5) & 0x7, c & 0x1f);
 80153c4:	f002 021f 	and.w	r2, r2, #31
 80153c8:	9200      	str	r2, [sp, #0]
 80153ca:	095b      	lsrs	r3, r3, #5
 80153cc:	4a34      	ldr	r2, [pc, #208]	; (80154a0 <coap_show_pdu+0x324>)
 80153ce:	4835      	ldr	r0, [pc, #212]	; (80154a4 <coap_show_pdu+0x328>)
 80153d0:	2105      	movs	r1, #5
 80153d2:	f007 fc47 	bl	801cc64 <sniprintf>
    return buf;
 80153d6:	4b33      	ldr	r3, [pc, #204]	; (80154a4 <coap_show_pdu+0x328>)
 80153d8:	e6ed      	b.n	80151b6 <coap_show_pdu+0x3a>
              "%02x", pdu->token[i]);
 80153da:	69ab      	ldr	r3, [r5, #24]
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 80153dc:	463a      	mov	r2, r7
 80153de:	5d1b      	ldrb	r3, [r3, r4]
 80153e0:	f007 fc40 	bl	801cc64 <sniprintf>
  for (i = 0; i < pdu->token_length; i++) {
 80153e4:	3401      	adds	r4, #1
 80153e6:	e6f6      	b.n	80151d6 <coap_show_pdu+0x5a>
    if (!have_options) {
 80153e8:	b164      	cbz	r4, 8015404 <coap_show_pdu+0x288>
      outbuflen = strlen(outbuf);
 80153ea:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80153ee:	f7ea ff49 	bl	8000284 <strlen>
      snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  ",");
 80153f2:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 80153f6:	f5c0 6100 	rsb	r1, r0, #2048	; 0x800
 80153fa:	4a2b      	ldr	r2, [pc, #172]	; (80154a8 <coap_show_pdu+0x32c>)
 80153fc:	3108      	adds	r1, #8
 80153fe:	4418      	add	r0, r3
 8015400:	f007 fc30 	bl	801cc64 <sniprintf>
    if (pdu->code == COAP_SIGNALING_CSM) switch(opt_iter.type) {
 8015404:	7869      	ldrb	r1, [r5, #1]
 8015406:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801540a:	29e1      	cmp	r1, #225	; 0xe1
 801540c:	d101      	bne.n	8015412 <coap_show_pdu+0x296>
    } else if (pdu->code == COAP_SIGNALING_ABORT) switch(opt_iter.type) {
 801540e:	2a02      	cmp	r2, #2
 8015410:	e00a      	b.n	8015428 <coap_show_pdu+0x2ac>
            || pdu->code == COAP_SIGNALING_PONG) {
 8015412:	f101 001e 	add.w	r0, r1, #30
    } else if (pdu->code == COAP_SIGNALING_PING
 8015416:	b2c0      	uxtb	r0, r0
 8015418:	2801      	cmp	r0, #1
 801541a:	f240 8106 	bls.w	801562a <coap_show_pdu+0x4ae>
    } else if (pdu->code == COAP_SIGNALING_RELEASE) switch(opt_iter.type) {
 801541e:	29e4      	cmp	r1, #228	; 0xe4
 8015420:	d146      	bne.n	80154b0 <coap_show_pdu+0x334>
 8015422:	2a02      	cmp	r2, #2
 8015424:	d010      	beq.n	8015448 <coap_show_pdu+0x2cc>
 8015426:	2a04      	cmp	r2, #4
    } else if (pdu->code == COAP_SIGNALING_ABORT) switch(opt_iter.type) {
 8015428:	f040 80ff 	bne.w	801562a <coap_show_pdu+0x4ae>
      buf_len = snprintf((char *)buf, sizeof(buf), "%u",
 801542c:	4638      	mov	r0, r7
 801542e:	f004 fb71 	bl	8019b14 <coap_opt_value>
 8015432:	4604      	mov	r4, r0
                                               coap_opt_length(option)));
 8015434:	4638      	mov	r0, r7
 8015436:	f004 fb33 	bl	8019aa0 <coap_opt_length>
 801543a:	4601      	mov	r1, r0
      buf_len = snprintf((char *)buf, sizeof(buf), "%u",
 801543c:	4620      	mov	r0, r4
 801543e:	f002 fb35 	bl	8017aac <coap_decode_var_bytes>
 8015442:	4652      	mov	r2, sl
 8015444:	4603      	mov	r3, r0
 8015446:	e05b      	b.n	8015500 <coap_show_pdu+0x384>
      buf_len = print_readable(coap_opt_value(option),
 8015448:	4638      	mov	r0, r7
 801544a:	f004 fb63 	bl	8019b14 <coap_opt_value>
 801544e:	4604      	mov	r4, r0
                               coap_opt_length(option),
 8015450:	4638      	mov	r0, r7
 8015452:	f004 fb25 	bl	8019aa0 <coap_opt_length>
      buf_len = print_readable(coap_opt_value(option),
 8015456:	2300      	movs	r3, #0
                               coap_opt_length(option),
 8015458:	4601      	mov	r1, r0
      buf_len = print_readable(coap_opt_value(option),
 801545a:	aa0e      	add	r2, sp, #56	; 0x38
 801545c:	4620      	mov	r0, r4
 801545e:	f7ff fd63 	bl	8014f28 <print_readable.constprop.0>
 8015462:	e091      	b.n	8015588 <coap_show_pdu+0x40c>
 8015464:	2000004c 	.word	0x2000004c
 8015468:	0802a854 	.word	0x0802a854
 801546c:	0802f185 	.word	0x0802f185
 8015470:	0802f19d 	.word	0x0802f19d
 8015474:	0802f1a2 	.word	0x0802f1a2
 8015478:	0802f1a4 	.word	0x0802f1a4
 801547c:	0802f1bb 	.word	0x0802f1bb
 8015480:	0802f1be 	.word	0x0802f1be
 8015484:	0802f1c3 	.word	0x0802f1c3
 8015488:	2000011c 	.word	0x2000011c
 801548c:	0802f1db 	.word	0x0802f1db
 8015490:	0802f1de 	.word	0x0802f1de
 8015494:	08030be9 	.word	0x08030be9
 8015498:	08031a55 	.word	0x08031a55
 801549c:	0802f1e1 	.word	0x0802f1e1
 80154a0:	0802f17d 	.word	0x0802f17d
 80154a4:	2000710c 	.word	0x2000710c
 80154a8:	0802f1a7 	.word	0x0802f1a7
 80154ac:	0802f1af 	.word	0x0802f1af
    } else if (pdu->code == COAP_SIGNALING_ABORT) switch(opt_iter.type) {
 80154b0:	29e5      	cmp	r1, #229	; 0xe5
 80154b2:	d0ac      	beq.n	801540e <coap_show_pdu+0x292>
    } else switch (opt_iter.type) {
 80154b4:	2a1c      	cmp	r2, #28
 80154b6:	d829      	bhi.n	801550c <coap_show_pdu+0x390>
 80154b8:	2a05      	cmp	r2, #5
 80154ba:	f240 80a1 	bls.w	8015600 <coap_show_pdu+0x484>
 80154be:	4ba8      	ldr	r3, [pc, #672]	; (8015760 <coap_show_pdu+0x5e4>)
 80154c0:	2101      	movs	r1, #1
 80154c2:	4091      	lsls	r1, r2
 80154c4:	4219      	tst	r1, r3
 80154c6:	d1b1      	bne.n	801542c <coap_show_pdu+0x2b0>
 80154c8:	f011 6408 	ands.w	r4, r1, #142606336	; 0x8800000
 80154cc:	d12c      	bne.n	8015528 <coap_show_pdu+0x3ac>
 80154ce:	04c9      	lsls	r1, r1, #19
 80154d0:	f140 8096 	bpl.w	8015600 <coap_show_pdu+0x484>
      content_format = (int)coap_decode_var_bytes(coap_opt_value(option),
 80154d4:	4638      	mov	r0, r7
 80154d6:	f004 fb1d 	bl	8019b14 <coap_opt_value>
 80154da:	4681      	mov	r9, r0
                                                  coap_opt_length(option));
 80154dc:	4638      	mov	r0, r7
 80154de:	f004 fadf 	bl	8019aa0 <coap_opt_length>
 80154e2:	4601      	mov	r1, r0
      content_format = (int)coap_decode_var_bytes(coap_opt_value(option),
 80154e4:	4648      	mov	r0, r9
 80154e6:	f002 fae1 	bl	8017aac <coap_decode_var_bytes>
    if (format_type == formats[i].type) {
 80154ea:	4b9e      	ldr	r3, [pc, #632]	; (8015764 <coap_show_pdu+0x5e8>)
      content_format = (int)coap_decode_var_bytes(coap_opt_value(option),
 80154ec:	4681      	mov	r9, r0
    if (format_type == formats[i].type) {
 80154ee:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80154f2:	4591      	cmp	r9, r2
 80154f4:	d112      	bne.n	801551c <coap_show_pdu+0x3a0>
      return snprintf((char *)result, buflen, "%s", formats[i].name);
 80154f6:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80154fa:	4a9b      	ldr	r2, [pc, #620]	; (8015768 <coap_show_pdu+0x5ec>)
 80154fc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      buf_len = snprintf((char *)buf, sizeof(buf), "%u",
 8015500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015504:	a80e      	add	r0, sp, #56	; 0x38
 8015506:	f007 fbad 	bl	801cc64 <sniprintf>
 801550a:	e03d      	b.n	8015588 <coap_show_pdu+0x40c>
    } else switch (opt_iter.type) {
 801550c:	2a3c      	cmp	r2, #60	; 0x3c
 801550e:	d08d      	beq.n	801542c <coap_show_pdu+0x2b0>
        encode = 0;
 8015510:	f1b2 0b23 	subs.w	fp, r2, #35	; 0x23
 8015514:	bf18      	it	ne
 8015516:	f04f 0b01 	movne.w	fp, #1
 801551a:	e07c      	b.n	8015616 <coap_show_pdu+0x49a>
  for (i = 0; i < sizeof(formats)/sizeof(struct desc_t); i++) {
 801551c:	3401      	adds	r4, #1
 801551e:	2c18      	cmp	r4, #24
 8015520:	d1e5      	bne.n	80154ee <coap_show_pdu+0x372>
  return snprintf((char *)result, buflen, "%d", format_type);
 8015522:	4a92      	ldr	r2, [pc, #584]	; (801576c <coap_show_pdu+0x5f0>)
 8015524:	464b      	mov	r3, r9
 8015526:	e7eb      	b.n	8015500 <coap_show_pdu+0x384>
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 8015528:	4638      	mov	r0, r7
 801552a:	f7ff fafc 	bl	8014b26 <coap_opt_block_num>
 801552e:	4604      	mov	r4, r0
                         COAP_OPT_BLOCK_MORE(option) ? 'M' : '_', /* M bit */
 8015530:	4638      	mov	r0, r7
 8015532:	f004 fab5 	bl	8019aa0 <coap_opt_length>
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 8015536:	2800      	cmp	r0, #0
 8015538:	d14b      	bne.n	80155d2 <coap_show_pdu+0x456>
 801553a:	f04f 0b5f 	mov.w	fp, #95	; 0x5f
                         (1 << (COAP_OPT_BLOCK_SZX(option) + 4))); /* block size */
 801553e:	4638      	mov	r0, r7
 8015540:	f004 faae 	bl	8019aa0 <coap_opt_length>
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 8015544:	2800      	cmp	r0, #0
 8015546:	d059      	beq.n	80155fc <coap_show_pdu+0x480>
                         (1 << (COAP_OPT_BLOCK_SZX(option) + 4))); /* block size */
 8015548:	4638      	mov	r0, r7
 801554a:	f004 faa9 	bl	8019aa0 <coap_opt_length>
 801554e:	2800      	cmp	r0, #0
 8015550:	f000 8104 	beq.w	801575c <coap_show_pdu+0x5e0>
 8015554:	4638      	mov	r0, r7
 8015556:	f004 fadd 	bl	8019b14 <coap_opt_value>
 801555a:	9005      	str	r0, [sp, #20]
 801555c:	4638      	mov	r0, r7
 801555e:	f004 fa9f 	bl	8019aa0 <coap_opt_length>
 8015562:	9a05      	ldr	r2, [sp, #20]
 8015564:	4410      	add	r0, r2
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 8015566:	2201      	movs	r2, #1
                         (1 << (COAP_OPT_BLOCK_SZX(option) + 4))); /* block size */
 8015568:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801556c:	f003 0307 	and.w	r3, r3, #7
 8015570:	3304      	adds	r3, #4
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 8015572:	fa02 f303 	lsl.w	r3, r2, r3
 8015576:	e9cd b300 	strd	fp, r3, [sp]
 801557a:	4a7d      	ldr	r2, [pc, #500]	; (8015770 <coap_show_pdu+0x5f4>)
 801557c:	4623      	mov	r3, r4
 801557e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015582:	a80e      	add	r0, sp, #56	; 0x38
 8015584:	f007 fb6e 	bl	801cc64 <sniprintf>
      buf_len = print_readable(coap_opt_value(option),
 8015588:	4604      	mov	r4, r0
    outbuflen = strlen(outbuf);
 801558a:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 801558e:	f7ea fe79 	bl	8000284 <strlen>
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 8015592:	786a      	ldrb	r2, [r5, #1]
 8015594:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8015598:	f5c0 6700 	rsb	r7, r0, #2048	; 0x800
  if (code == COAP_SIGNALING_CSM) {
 801559c:	2ae1      	cmp	r2, #225	; 0xe1
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 801559e:	eb03 0b00 	add.w	fp, r3, r0
 80155a2:	f107 0708 	add.w	r7, r7, #8
 80155a6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  if (code == COAP_SIGNALING_CSM) {
 80155aa:	d142      	bne.n	8015632 <coap_show_pdu+0x4b6>
      if (option_type == options_csm[i].type) {
 80155ac:	2b02      	cmp	r3, #2
 80155ae:	d03e      	beq.n	801562e <coap_show_pdu+0x4b2>
 80155b0:	2b04      	cmp	r3, #4
 80155b2:	d145      	bne.n	8015640 <coap_show_pdu+0x4c4>
    for (i = 0; i < sizeof(options_csm)/sizeof(struct option_desc_t); i++) {
 80155b4:	2301      	movs	r3, #1
        return options_csm[i].name;
 80155b6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80155ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 80155be:	aa0e      	add	r2, sp, #56	; 0x38
 80155c0:	e9cd 4200 	strd	r4, r2, [sp]
 80155c4:	4639      	mov	r1, r7
 80155c6:	4a6b      	ldr	r2, [pc, #428]	; (8015774 <coap_show_pdu+0x5f8>)
 80155c8:	4658      	mov	r0, fp
 80155ca:	f007 fb4b 	bl	801cc64 <sniprintf>
 80155ce:	2401      	movs	r4, #1
 80155d0:	e628      	b.n	8015224 <coap_show_pdu+0xa8>
                         COAP_OPT_BLOCK_MORE(option) ? 'M' : '_', /* M bit */
 80155d2:	4638      	mov	r0, r7
 80155d4:	f004 fa64 	bl	8019aa0 <coap_opt_length>
 80155d8:	2800      	cmp	r0, #0
 80155da:	f000 80bc 	beq.w	8015756 <coap_show_pdu+0x5da>
 80155de:	4638      	mov	r0, r7
 80155e0:	f004 fa98 	bl	8019b14 <coap_opt_value>
 80155e4:	4683      	mov	fp, r0
 80155e6:	4638      	mov	r0, r7
 80155e8:	f004 fa5a 	bl	8019aa0 <coap_opt_length>
 80155ec:	4458      	add	r0, fp
 80155ee:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80155f2:	0713      	lsls	r3, r2, #28
 80155f4:	d5a1      	bpl.n	801553a <coap_show_pdu+0x3be>
      buf_len = snprintf((char *)buf, sizeof(buf), "%u/%c/%u",
 80155f6:	f04f 0b4d 	mov.w	fp, #77	; 0x4d
 80155fa:	e7a0      	b.n	801553e <coap_show_pdu+0x3c2>
 80155fc:	2310      	movs	r3, #16
 80155fe:	e7ba      	b.n	8015576 <coap_show_pdu+0x3fa>
          opt_iter.type == COAP_OPTION_PROXY_URI ||
 8015600:	2a14      	cmp	r2, #20
 8015602:	bf9f      	itttt	ls
 8015604:	495c      	ldrls	r1, [pc, #368]	; (8015778 <coap_show_pdu+0x5fc>)
 8015606:	fa21 f202 	lsrls.w	r2, r1, r2
 801560a:	43d2      	mvnls	r2, r2
        encode = 0;
 801560c:	f002 0b01 	andls.w	fp, r2, #1
 8015610:	bf88      	it	hi
 8015612:	f04f 0b01 	movhi.w	fp, #1
      buf_len = print_readable(coap_opt_value(option),
 8015616:	4638      	mov	r0, r7
 8015618:	f004 fa7c 	bl	8019b14 <coap_opt_value>
 801561c:	4604      	mov	r4, r0
                               coap_opt_length(option),
 801561e:	4638      	mov	r0, r7
 8015620:	f004 fa3e 	bl	8019aa0 <coap_opt_length>
      buf_len = print_readable(coap_opt_value(option),
 8015624:	465b      	mov	r3, fp
                               coap_opt_length(option),
 8015626:	4601      	mov	r1, r0
 8015628:	e717      	b.n	801545a <coap_show_pdu+0x2de>
      buf_len = 0;
 801562a:	2400      	movs	r4, #0
 801562c:	e7ad      	b.n	801558a <coap_show_pdu+0x40e>
    for (i = 0; i < sizeof(options_csm)/sizeof(struct option_desc_t); i++) {
 801562e:	2300      	movs	r3, #0
 8015630:	e7c1      	b.n	80155b6 <coap_show_pdu+0x43a>
  } else if (code == COAP_SIGNALING_PING || code == COAP_SIGNALING_PONG) {
 8015632:	f102 011e 	add.w	r1, r2, #30
 8015636:	b2c9      	uxtb	r1, r1
 8015638:	2901      	cmp	r1, #1
 801563a:	d808      	bhi.n	801564e <coap_show_pdu+0x4d2>
      if (option_type == options_pingpong[i].type) {
 801563c:	2b02      	cmp	r3, #2
 801563e:	d029      	beq.n	8015694 <coap_show_pdu+0x518>
  snprintf(buf, sizeof(buf), "%u", option_type);
 8015640:	484e      	ldr	r0, [pc, #312]	; (801577c <coap_show_pdu+0x600>)
 8015642:	4652      	mov	r2, sl
 8015644:	2106      	movs	r1, #6
 8015646:	f007 fb0d 	bl	801cc64 <sniprintf>
  return buf;
 801564a:	4b4c      	ldr	r3, [pc, #304]	; (801577c <coap_show_pdu+0x600>)
 801564c:	e7b7      	b.n	80155be <coap_show_pdu+0x442>
  } else if (code == COAP_SIGNALING_RELEASE) {
 801564e:	2ae4      	cmp	r2, #228	; 0xe4
 8015650:	d10b      	bne.n	801566a <coap_show_pdu+0x4ee>
      if (option_type == options_release[i].type) {
 8015652:	2b02      	cmp	r3, #2
 8015654:	d007      	beq.n	8015666 <coap_show_pdu+0x4ea>
 8015656:	2b04      	cmp	r3, #4
 8015658:	d1f2      	bne.n	8015640 <coap_show_pdu+0x4c4>
    for (i = 0; i < sizeof(options_release)/sizeof(struct option_desc_t); i++) {
 801565a:	2301      	movs	r3, #1
        return options_release[i].name;
 801565c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8015660:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8015664:	e7ab      	b.n	80155be <coap_show_pdu+0x442>
    for (i = 0; i < sizeof(options_release)/sizeof(struct option_desc_t); i++) {
 8015666:	2300      	movs	r3, #0
 8015668:	e7f8      	b.n	801565c <coap_show_pdu+0x4e0>
  } else if (code == COAP_SIGNALING_ABORT) {
 801566a:	2ae5      	cmp	r2, #229	; 0xe5
 801566c:	d103      	bne.n	8015676 <coap_show_pdu+0x4fa>
      if (option_type == options_abort[i].type) {
 801566e:	2b02      	cmp	r3, #2
 8015670:	d1e6      	bne.n	8015640 <coap_show_pdu+0x4c4>
        return options_abort[i].name;
 8015672:	4b43      	ldr	r3, [pc, #268]	; (8015780 <coap_show_pdu+0x604>)
 8015674:	e7a3      	b.n	80155be <coap_show_pdu+0x442>
      if (option_type == options[i].type) {
 8015676:	4943      	ldr	r1, [pc, #268]	; (8015784 <coap_show_pdu+0x608>)
    for (i = 0; i < sizeof(options)/sizeof(struct option_desc_t); i++) {
 8015678:	2200      	movs	r2, #0
      if (option_type == options[i].type) {
 801567a:	f831 0032 	ldrh.w	r0, [r1, r2, lsl #3]
 801567e:	4298      	cmp	r0, r3
 8015680:	d104      	bne.n	801568c <coap_show_pdu+0x510>
        return options[i].name;
 8015682:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8015686:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 801568a:	e798      	b.n	80155be <coap_show_pdu+0x442>
    for (i = 0; i < sizeof(options)/sizeof(struct option_desc_t); i++) {
 801568c:	3201      	adds	r2, #1
 801568e:	2a14      	cmp	r2, #20
 8015690:	d1f3      	bne.n	801567a <coap_show_pdu+0x4fe>
 8015692:	e7d5      	b.n	8015640 <coap_show_pdu+0x4c4>
        return options_pingpong[i].name;
 8015694:	4b3c      	ldr	r3, [pc, #240]	; (8015788 <coap_show_pdu+0x60c>)
 8015696:	e792      	b.n	80155be <coap_show_pdu+0x442>
      if (print_readable(data, data_len, buf, sizeof(buf), 0)) {
 8015698:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 801569c:	2300      	movs	r3, #0
 801569e:	aa0e      	add	r2, sp, #56	; 0x38
 80156a0:	f7ff fc42 	bl	8014f28 <print_readable.constprop.0>
 80156a4:	2800      	cmp	r0, #0
 80156a6:	f43f ae67 	beq.w	8015378 <coap_show_pdu+0x1fc>
        outbuflen = strlen(outbuf);
 80156aa:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80156ae:	f7ea fde9 	bl	8000284 <strlen>
        snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,  "'%s'", buf);
 80156b2:	f50d 6487 	add.w	r4, sp, #1080	; 0x438
 80156b6:	f5c0 6100 	rsb	r1, r0, #2048	; 0x800
 80156ba:	4a34      	ldr	r2, [pc, #208]	; (801578c <coap_show_pdu+0x610>)
 80156bc:	ab0e      	add	r3, sp, #56	; 0x38
 80156be:	3108      	adds	r1, #8
 80156c0:	4420      	add	r0, r4
 80156c2:	f007 facf 	bl	801cc64 <sniprintf>
 80156c6:	e657      	b.n	8015378 <coap_show_pdu+0x1fc>
      COAP_DO_SHOW_OUTPUT_LINE;
 80156c8:	9b04      	ldr	r3, [sp, #16]
 80156ca:	791b      	ldrb	r3, [r3, #4]
 80156cc:	42b3      	cmp	r3, r6
 80156ce:	f4ff adfb 	bcc.w	80152c8 <coap_show_pdu+0x14c>
 80156d2:	4925      	ldr	r1, [pc, #148]	; (8015768 <coap_show_pdu+0x5ec>)
 80156d4:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
 80156d8:	4630      	mov	r0, r6
 80156da:	f7ff fced 	bl	80150b8 <coap_log_impl>
 80156de:	e5f3      	b.n	80152c8 <coap_show_pdu+0x14c>
        outbuflen = strlen(outbuf);
 80156e0:	f7ea fdd0 	bl	8000284 <strlen>
                 "%02x", *data++);
 80156e4:	9b07      	ldr	r3, [sp, #28]
 80156e6:	1c5a      	adds	r2, r3, #1
 80156e8:	9207      	str	r2, [sp, #28]
        snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 80156ea:	f50d 6c87 	add.w	ip, sp, #1080	; 0x438
 80156ee:	eba8 0100 	sub.w	r1, r8, r0
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	463a      	mov	r2, r7
 80156f6:	4460      	add	r0, ip
 80156f8:	f007 fab4 	bl	801cc64 <sniprintf>
 80156fc:	e5ef      	b.n	80152de <coap_show_pdu+0x162>
      COAP_DO_SHOW_OUTPUT_LINE;
 80156fe:	9b04      	ldr	r3, [sp, #16]
 8015700:	791b      	ldrb	r3, [r3, #4]
 8015702:	42b3      	cmp	r3, r6
 8015704:	f4ff ae19 	bcc.w	801533a <coap_show_pdu+0x1be>
 8015708:	4917      	ldr	r1, [pc, #92]	; (8015768 <coap_show_pdu+0x5ec>)
 801570a:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
 801570e:	4630      	mov	r0, r6
 8015710:	f7ff fcd2 	bl	80150b8 <coap_log_impl>
 8015714:	e611      	b.n	801533a <coap_show_pdu+0x1be>
        outbuflen = strlen(outbuf);
 8015716:	f7ea fdb5 	bl	8000284 <strlen>
                 "%c ", isprint (*data) ? *data : '.');
 801571a:	9b07      	ldr	r3, [sp, #28]
 801571c:	781b      	ldrb	r3, [r3, #0]
        snprintf(&outbuf[outbuflen], sizeof(outbuf)-outbuflen,
 801571e:	5d5a      	ldrb	r2, [r3, r5]
 8015720:	f50d 6c87 	add.w	ip, sp, #1080	; 0x438
 8015724:	f012 0f97 	tst.w	r2, #151	; 0x97
 8015728:	bf08      	it	eq
 801572a:	232e      	moveq	r3, #46	; 0x2e
 801572c:	1a21      	subs	r1, r4, r0
 801572e:	463a      	mov	r2, r7
 8015730:	4460      	add	r0, ip
 8015732:	f007 fa97 	bl	801cc64 <sniprintf>
        data++;
 8015736:	9b07      	ldr	r3, [sp, #28]
 8015738:	3301      	adds	r3, #1
 801573a:	9307      	str	r3, [sp, #28]
 801573c:	e609      	b.n	8015352 <coap_show_pdu+0x1d6>
  COAP_DO_SHOW_OUTPUT_LINE;
 801573e:	9b04      	ldr	r3, [sp, #16]
 8015740:	791b      	ldrb	r3, [r3, #4]
 8015742:	42b3      	cmp	r3, r6
 8015744:	f4ff ae31 	bcc.w	80153aa <coap_show_pdu+0x22e>
 8015748:	4907      	ldr	r1, [pc, #28]	; (8015768 <coap_show_pdu+0x5ec>)
 801574a:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
 801574e:	4630      	mov	r0, r6
 8015750:	f7ff fcb2 	bl	80150b8 <coap_log_impl>
 8015754:	e629      	b.n	80153aa <coap_show_pdu+0x22e>
                         COAP_OPT_BLOCK_MORE(option) ? 'M' : '_', /* M bit */
 8015756:	2300      	movs	r3, #0
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	deff      	udf	#255	; 0xff
                         (1 << (COAP_OPT_BLOCK_SZX(option) + 4))); /* block size */
 801575c:	7803      	ldrb	r3, [r0, #0]
 801575e:	e7fc      	b.n	801575a <coap_show_pdu+0x5de>
 8015760:	100040c0 	.word	0x100040c0
 8015764:	0802a8d0 	.word	0x0802a8d0
 8015768:	0802f0ef 	.word	0x0802f0ef
 801576c:	080323d4 	.word	0x080323d4
 8015770:	0802f1a9 	.word	0x0802f1a9
 8015774:	0802f1b2 	.word	0x0802f1b2
 8015778:	00108908 	.word	0x00108908
 801577c:	20007111 	.word	0x20007111
 8015780:	0802f16e 	.word	0x0802f16e
 8015784:	0802a9b0 	.word	0x0802a9b0
 8015788:	0802f166 	.word	0x0802f166
 801578c:	0802f1e5 	.word	0x0802f1e5

08015790 <coap_debug_send_packet>:
  }
  send_packet_count = 0;
  return 1;
}

int coap_debug_send_packet(void) {
 8015790:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ++send_packet_count;
 8015792:	4c16      	ldr	r4, [pc, #88]	; (80157ec <coap_debug_send_packet+0x5c>)
 8015794:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if (num_packet_loss_intervals > 0) {
 8015796:	6e60      	ldr	r0, [r4, #100]	; 0x64
  ++send_packet_count;
 8015798:	3201      	adds	r2, #1
  if (num_packet_loss_intervals > 0) {
 801579a:	2800      	cmp	r0, #0
  ++send_packet_count;
 801579c:	66a2      	str	r2, [r4, #104]	; 0x68
  if (num_packet_loss_intervals > 0) {
 801579e:	dd0d      	ble.n	80157bc <coap_debug_send_packet+0x2c>
 80157a0:	f104 0314 	add.w	r3, r4, #20
    int i;
    for (i = 0; i < num_packet_loss_intervals; i++) {
 80157a4:	2100      	movs	r1, #0
      if (send_packet_count >= packet_loss_intervals[i].start
 80157a6:	681d      	ldr	r5, [r3, #0]
 80157a8:	42aa      	cmp	r2, r5
 80157aa:	db02      	blt.n	80157b2 <coap_debug_send_packet+0x22>
        && send_packet_count <= packet_loss_intervals[i].end)
 80157ac:	685d      	ldr	r5, [r3, #4]
 80157ae:	42aa      	cmp	r2, r5
 80157b0:	dd18      	ble.n	80157e4 <coap_debug_send_packet+0x54>
    for (i = 0; i < num_packet_loss_intervals; i++) {
 80157b2:	3101      	adds	r1, #1
 80157b4:	4288      	cmp	r0, r1
 80157b6:	f103 0308 	add.w	r3, r3, #8
 80157ba:	d1f4      	bne.n	80157a6 <coap_debug_send_packet+0x16>
        return 0;
    }
  }
  if ( packet_loss_level > 0 ) {
 80157bc:	6923      	ldr	r3, [r4, #16]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	dd12      	ble.n	80157e8 <coap_debug_send_packet+0x58>
 * platform.
 */
COAP_STATIC_INLINE int
coap_prng_impl( unsigned char *buf, size_t len ) {
        while ( len-- )
                *buf++ = rand() & 0xFF;
 80157c2:	f007 f9f7 	bl	801cbb4 <rand>
 80157c6:	f88d 0006 	strb.w	r0, [sp, #6]
 80157ca:	f007 f9f3 	bl	801cbb4 <rand>
 80157ce:	f88d 0007 	strb.w	r0, [sp, #7]
    uint16_t r = 0;
    prng( (uint8_t*)&r, 2 );
    if ( r < packet_loss_level )
 80157d2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80157d6:	6923      	ldr	r3, [r4, #16]
      return 0;
 80157d8:	4298      	cmp	r0, r3
 80157da:	bfb4      	ite	lt
 80157dc:	2000      	movlt	r0, #0
 80157de:	2001      	movge	r0, #1
  }
  return 1;
}
 80157e0:	b003      	add	sp, #12
 80157e2:	bd30      	pop	{r4, r5, pc}
        return 0;
 80157e4:	2000      	movs	r0, #0
 80157e6:	e7fb      	b.n	80157e0 <coap_debug_send_packet+0x50>
  return 1;
 80157e8:	2001      	movs	r0, #1
 80157ea:	e7f9      	b.n	80157e0 <coap_debug_send_packet+0x50>
 80157ec:	20007108 	.word	0x20007108

080157f0 <coap_hash_impl>:
 */

#include "coap_hashkey.h"

void
coap_hash_impl(const unsigned char *s, unsigned int len, coap_key_t h) {
 80157f0:	b570      	push	{r4, r5, r6, lr}
 80157f2:	4401      	add	r1, r0
  size_t j;

  while (len--) {
 80157f4:	4288      	cmp	r0, r1
 80157f6:	d100      	bne.n	80157fa <coap_hash_impl+0xa>
      --j;
    }

    h[0] = (h[0] << 7) + h[0] + *s++;
  }
}
 80157f8:	bd70      	pop	{r4, r5, r6, pc}
 80157fa:	1cd4      	adds	r4, r2, #3
      h[j] = ((h[j] << 7) | (h[j-1] >> 1)) + h[j];
 80157fc:	7825      	ldrb	r5, [r4, #0]
 80157fe:	f814 3d01 	ldrb.w	r3, [r4, #-1]!
 8015802:	01ee      	lsls	r6, r5, #7
 8015804:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
 8015808:	4435      	add	r5, r6
    while (j) {
 801580a:	42a2      	cmp	r2, r4
      h[j] = ((h[j] << 7) | (h[j-1] >> 1)) + h[j];
 801580c:	7065      	strb	r5, [r4, #1]
    while (j) {
 801580e:	d1f5      	bne.n	80157fc <coap_hash_impl+0xc>
    h[0] = (h[0] << 7) + h[0] + *s++;
 8015810:	f810 4b01 	ldrb.w	r4, [r0], #1
 8015814:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
 8015818:	4423      	add	r3, r4
 801581a:	7013      	strb	r3, [r2, #0]
 801581c:	e7ea      	b.n	80157f4 <coap_hash_impl+0x4>

0801581e <coap_address_copy>:
}

/* Convenience function to copy IPv6 addresses without garbage. */

COAP_STATIC_INLINE void
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 801581e:	b570      	push	{r4, r5, r6, lr}
 8015820:	460d      	mov	r5, r1
#if defined(WITH_LWIP) || defined(WITH_CONTIKI)
  memcpy( dst, src, sizeof( coap_address_t ) );
#else
  memset( dst, 0, sizeof( coap_address_t ) );
 8015822:	2220      	movs	r2, #32
 8015824:	2100      	movs	r1, #0
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 8015826:	4604      	mov	r4, r0
  memset( dst, 0, sizeof( coap_address_t ) );
 8015828:	f006 fd32 	bl	801c290 <memset>
  dst->size = src->size;
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 801582c:	796b      	ldrb	r3, [r5, #5]
  dst->size = src->size;
 801582e:	682a      	ldr	r2, [r5, #0]
 8015830:	6022      	str	r2, [r4, #0]
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 8015832:	2b0a      	cmp	r3, #10
 8015834:	d10c      	bne.n	8015850 <coap_address_copy+0x32>
    dst->addr.sin6.sin6_family = src->addr.sin6.sin6_family;
 8015836:	7163      	strb	r3, [r4, #5]
    dst->addr.sin6.sin6_addr = src->addr.sin6.sin6_addr;
 8015838:	f105 030c 	add.w	r3, r5, #12
 801583c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801583e:	f104 060c 	add.w	r6, r4, #12
 8015842:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    dst->addr.sin6.sin6_port = src->addr.sin6.sin6_port;
 8015846:	88eb      	ldrh	r3, [r5, #6]
 8015848:	80e3      	strh	r3, [r4, #6]
    dst->addr.sin6.sin6_scope_id = src->addr.sin6.sin6_scope_id;
 801584a:	69eb      	ldr	r3, [r5, #28]
 801584c:	61e3      	str	r3, [r4, #28]
    dst->addr.sin = src->addr.sin;
  } else {
    memcpy( &dst->addr, &src->addr, src->size );
  }
#endif
}
 801584e:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( src->addr.sa.sa_family == AF_INET ) {
 8015850:	2b02      	cmp	r3, #2
 8015852:	f104 0404 	add.w	r4, r4, #4
 8015856:	f105 0104 	add.w	r1, r5, #4
 801585a:	d103      	bne.n	8015864 <coap_address_copy+0x46>
    dst->addr.sin = src->addr.sin;
 801585c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801585e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015862:	e7f4      	b.n	801584e <coap_address_copy+0x30>
    memcpy( &dst->addr, &src->addr, src->size );
 8015864:	4620      	mov	r0, r4
}
 8015866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy( &dst->addr, &src->addr, src->size );
 801586a:	f006 bce9 	b.w	801c240 <memcpy>

0801586e <coap_malloc_endpoint>:

static const char *coap_socket_format_errno( int error );

struct coap_endpoint_t *
  coap_malloc_endpoint(void) {
  return (struct coap_endpoint_t *)coap_malloc_type(COAP_ENDPOINT, sizeof(struct coap_endpoint_t));
 801586e:	2138      	movs	r1, #56	; 0x38
 8015870:	2006      	movs	r0, #6
 8015872:	f002 b947 	b.w	8017b04 <coap_malloc_type>

08015876 <coap_mfree_endpoint>:
}

void
coap_mfree_endpoint(struct coap_endpoint_t *ep) {
 8015876:	4601      	mov	r1, r0
  coap_free_type(COAP_ENDPOINT, ep);
 8015878:	2006      	movs	r0, #6
 801587a:	f002 b946 	b.w	8017b0a <coap_free_type>

0801587e <coap_socket_close>:
error:
  coap_socket_close(sock);
  return 0;
}

void coap_socket_close(coap_socket_t *sock) {
 801587e:	b510      	push	{r4, lr}
 8015880:	4604      	mov	r4, r0
  if (sock->fd != COAP_INVALID_SOCKET) {
 8015882:	6800      	ldr	r0, [r0, #0]
 8015884:	1c43      	adds	r3, r0, #1
 8015886:	d004      	beq.n	8015892 <coap_socket_close+0x14>
    coap_closesocket(sock->fd);
 8015888:	f7f2 f88a 	bl	80079a0 <lwip_close>
    sock->fd = COAP_INVALID_SOCKET;
 801588c:	f04f 33ff 	mov.w	r3, #4294967295
 8015890:	6023      	str	r3, [r4, #0]
  }
  sock->flags = COAP_SOCKET_EMPTY;
 8015892:	2300      	movs	r3, #0
 8015894:	80a3      	strh	r3, [r4, #4]
}
 8015896:	bd10      	pop	{r4, pc}

08015898 <coap_packet_get_memmapped>:

#define SIN6(A) ((struct sockaddr_in6 *)(A))

void
coap_packet_get_memmapped(coap_packet_t *packet, unsigned char **address, size_t *length) {
  *address = packet->payload;
 8015898:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801589c:	600b      	str	r3, [r1, #0]
  *length = packet->length;
 801589e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80158a0:	6013      	str	r3, [r2, #0]
}
 80158a2:	4770      	bx	lr

080158a4 <coap_write>:
coap_write(coap_context_t *ctx,
           coap_socket_t *sockets[],
           unsigned int max_sockets,
           unsigned int *num_sockets,
           coap_tick_t now)
{
 80158a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	b09f      	sub	sp, #124	; 0x7c
 80158aa:	4605      	mov	r5, r0
 80158ac:	9312      	str	r3, [sp, #72]	; 0x48
 80158ae:	921a      	str	r2, [sp, #104]	; 0x68
  coap_session_t *s;
  coap_tick_t session_timeout;
  coap_tick_t timeout = 0;
  coap_session_t *tmp;

  *num_sockets = 0;
 80158b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
{
 80158b2:	9113      	str	r1, [sp, #76]	; 0x4c
  *num_sockets = 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	6013      	str	r3, [r2, #0]
{
 80158b8:	e9dd 8928 	ldrd	r8, r9, [sp, #160]	; 0xa0

  /* Check to see if we need to send off any Observe requests */
  coap_check_notify(ctx);
 80158bc:	f005 fe3e 	bl	801b53c <coap_check_notify>

  if (ctx->session_timeout > 0)
 80158c0:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d04c      	beq.n	8015960 <coap_write+0xbc>
    session_timeout = ctx->session_timeout * COAP_TICKS_PER_SECOND;
 80158c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80158ca:	fba3 3402 	umull	r3, r4, r3, r2
  else
    session_timeout = COAP_DEFAULT_SESSION_TIMEOUT * COAP_TICKS_PER_SECOND;
 80158ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
  coap_tick_t timeout = 0;
 80158d2:	2200      	movs	r2, #0
 80158d4:	2300      	movs	r3, #0
 80158d6:	e9cd 2300 	strd	r2, r3, [sp]
          (s->last_rx_tx + session_timeout <= now ||
           s->state == COAP_SESSION_STATE_NONE)) {
        coap_session_free(s);
      } else {
        if (s->type == COAP_SESSION_TYPE_SERVER && s->ref == 0 && s->delayqueue == NULL) {
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80158da:	9b06      	ldr	r3, [sp, #24]
  LL_FOREACH(ctx->endpoint, ep) {
 80158dc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80158de:	ebb3 0108 	subs.w	r1, r3, r8
 80158e2:	9b07      	ldr	r3, [sp, #28]
 80158e4:	eb63 0309 	sbc.w	r3, r3, r9
 80158e8:	931c      	str	r3, [sp, #112]	; 0x70
  LL_FOREACH(ctx->endpoint, ep) {
 80158ea:	2c00      	cmp	r4, #0
 80158ec:	d13b      	bne.n	8015966 <coap_write+0xc2>
            sockets[(*num_sockets)++] = &s->sock;
        }
      }
    }
  }
  LL_FOREACH_SAFE(ctx->sessions, s, tmp) {
 80158ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80158f0:	2c00      	cmp	r4, #0
 80158f2:	f000 8119 	beq.w	8015b28 <coap_write+0x284>
 80158f6:	6823      	ldr	r3, [r4, #0]
 80158f8:	930c      	str	r3, [sp, #48]	; 0x30
    if (
 80158fa:	7963      	ldrb	r3, [r4, #5]
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	f040 80bb 	bne.w	8015a78 <coap_write+0x1d4>
        s->type == COAP_SESSION_TYPE_CLIENT
     && COAP_PROTO_RELIABLE(s->proto)
 8015902:	7923      	ldrb	r3, [r4, #4]
 8015904:	3b03      	subs	r3, #3
 8015906:	2b01      	cmp	r3, #1
 8015908:	f200 80b6 	bhi.w	8015a78 <coap_write+0x1d4>
     && s->state == COAP_SESSION_STATE_ESTABLISHED
 801590c:	79a3      	ldrb	r3, [r4, #6]
 801590e:	2b04      	cmp	r3, #4
 8015910:	f040 80b2 	bne.w	8015a78 <coap_write+0x1d4>
     && ctx->ping_timeout > 0
 8015914:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015916:	2900      	cmp	r1, #0
 8015918:	f000 80ae 	beq.w	8015a78 <coap_write+0x1d4>
    ) {
      coap_tick_t s_timeout;
      if (s->last_rx_tx + ctx->ping_timeout * COAP_TICKS_PER_SECOND <= now) {
 801591c:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 8015920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015924:	fbe0 2301 	umlal	r2, r3, r0, r1
 8015928:	4599      	cmp	r9, r3
 801592a:	bf08      	it	eq
 801592c:	4590      	cmpeq	r8, r2
 801592e:	f0c0 8085 	bcc.w	8015a3c <coap_write+0x198>
        if ((s->last_ping > 0 && s->last_pong < s->last_ping)
 8015932:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
 8015936:	ea50 0301 	orrs.w	r3, r0, r1
 801593a:	d076      	beq.n	8015a2a <coap_write+0x186>
 801593c:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
 8015940:	428b      	cmp	r3, r1
 8015942:	bf08      	it	eq
 8015944:	4282      	cmpeq	r2, r0
 8015946:	d270      	bcs.n	8015a2a <coap_write+0x186>
          || coap_session_send_ping(s) == COAP_INVALID_TID)
        {
          /* Make sure the session object is not deleted in the callback */
          coap_session_reference(s);
 8015948:	4620      	mov	r0, r4
 801594a:	f001 f995 	bl	8016c78 <coap_session_reference>
          coap_session_disconnected(s, COAP_NACK_NOT_DELIVERABLE);
 801594e:	4620      	mov	r0, r4
 8015950:	2101      	movs	r1, #1
 8015952:	f001 fd85 	bl	8017460 <coap_session_disconnected>
          coap_session_release(s);
 8015956:	4620      	mov	r0, r4
 8015958:	f001 faca 	bl	8016ef0 <coap_session_release>
        coap_session_reference(s);
        coap_session_disconnected(s, COAP_NACK_NOT_DELIVERABLE);
        coap_session_release(s);
        continue;
      }
      s_timeout = (s->csm_tx + ctx->csm_timeout * COAP_TICKS_PER_SECOND) - now;
 801595c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801595e:	e7c7      	b.n	80158f0 <coap_write+0x4c>
    session_timeout = COAP_DEFAULT_SESSION_TIMEOUT * COAP_TICKS_PER_SECOND;
 8015960:	4bb8      	ldr	r3, [pc, #736]	; (8015c44 <coap_write+0x3a0>)
 8015962:	2400      	movs	r4, #0
 8015964:	e7b3      	b.n	80158ce <coap_write+0x2a>
    if (ep->sock.flags & (COAP_SOCKET_WANT_READ | COAP_SOCKET_WANT_WRITE | COAP_SOCKET_WANT_ACCEPT)) {
 8015966:	8a23      	ldrh	r3, [r4, #16]
 8015968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801596c:	b163      	cbz	r3, 8015988 <coap_write+0xe4>
      if (*num_sockets < max_sockets)
 801596e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015970:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	4293      	cmp	r3, r2
 8015976:	d207      	bcs.n	8015988 <coap_write+0xe4>
        sockets[(*num_sockets)++] = &ep->sock;
 8015978:	9812      	ldr	r0, [sp, #72]	; 0x48
 801597a:	1c5a      	adds	r2, r3, #1
 801597c:	6002      	str	r2, [r0, #0]
 801597e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015980:	f104 020c 	add.w	r2, r4, #12
 8015984:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    LL_FOREACH_SAFE(ep->sessions, s, tmp) {
 8015988:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801598a:	2800      	cmp	r0, #0
 801598c:	d04b      	beq.n	8015a26 <coap_write+0x182>
 801598e:	6803      	ldr	r3, [r0, #0]
 8015990:	931b      	str	r3, [sp, #108]	; 0x6c
      if (s->type == COAP_SESSION_TYPE_SERVER && s->ref == 0 &&
 8015992:	7943      	ldrb	r3, [r0, #5]
 8015994:	2b02      	cmp	r3, #2
 8015996:	d133      	bne.n	8015a00 <coap_write+0x15c>
 8015998:	6883      	ldr	r3, [r0, #8]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d130      	bne.n	8015a00 <coap_write+0x15c>
 801599e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80159a2:	b9ab      	cbnz	r3, 80159d0 <coap_write+0x12c>
          (s->last_rx_tx + session_timeout <= now ||
 80159a4:	e9d0 622a 	ldrd	r6, r2, [r0, #168]	; 0xa8
 80159a8:	9b06      	ldr	r3, [sp, #24]
 80159aa:	199b      	adds	r3, r3, r6
 80159ac:	9314      	str	r3, [sp, #80]	; 0x50
 80159ae:	9b07      	ldr	r3, [sp, #28]
 80159b0:	4153      	adcs	r3, r2
 80159b2:	9315      	str	r3, [sp, #84]	; 0x54
          s->delayqueue == NULL &&
 80159b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80159b8:	4599      	cmp	r9, r3
 80159ba:	bf08      	it	eq
 80159bc:	4590      	cmpeq	r8, r2
 80159be:	d201      	bcs.n	80159c4 <coap_write+0x120>
          (s->last_rx_tx + session_timeout <= now ||
 80159c0:	7983      	ldrb	r3, [r0, #6]
 80159c2:	b92b      	cbnz	r3, 80159d0 <coap_write+0x12c>
 80159c4:	911d      	str	r1, [sp, #116]	; 0x74
        coap_session_free(s);
 80159c6:	f001 fa45 	bl	8016e54 <coap_session_free>
 80159ca:	991d      	ldr	r1, [sp, #116]	; 0x74
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80159cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80159ce:	e7dc      	b.n	801598a <coap_write+0xe6>
        if (s->type == COAP_SESSION_TYPE_SERVER && s->ref == 0 && s->delayqueue == NULL) {
 80159d0:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80159d4:	b9a3      	cbnz	r3, 8015a00 <coap_write+0x15c>
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80159d6:	e9d0 322a 	ldrd	r3, r2, [r0, #168]	; 0xa8
 80159da:	18cb      	adds	r3, r1, r3
 80159dc:	930c      	str	r3, [sp, #48]	; 0x30
 80159de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80159e0:	4153      	adcs	r3, r2
 80159e2:	930d      	str	r3, [sp, #52]	; 0x34
          if (timeout == 0 || s_timeout < timeout)
 80159e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159e8:	4313      	orrs	r3, r2
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80159ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
          if (timeout == 0 || s_timeout < timeout)
 80159ee:	d005      	beq.n	80159fc <coap_write+0x158>
 80159f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80159f4:	42bb      	cmp	r3, r7
 80159f6:	bf08      	it	eq
 80159f8:	42b2      	cmpeq	r2, r6
 80159fa:	d201      	bcs.n	8015a00 <coap_write+0x15c>
          coap_tick_t s_timeout = (s->last_rx_tx + session_timeout) - now;
 80159fc:	e9cd 2300 	strd	r2, r3, [sp]
        if (s->sock.flags & (COAP_SOCKET_WANT_READ | COAP_SOCKET_WANT_WRITE)) {
 8015a00:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8015a04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d0df      	beq.n	80159cc <coap_write+0x128>
          if (*num_sockets < max_sockets)
 8015a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	4293      	cmp	r3, r2
 8015a14:	d2da      	bcs.n	80159cc <coap_write+0x128>
            sockets[(*num_sockets)++] = &s->sock;
 8015a16:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015a18:	1c5a      	adds	r2, r3, #1
 8015a1a:	6032      	str	r2, [r6, #0]
 8015a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a1e:	3078      	adds	r0, #120	; 0x78
 8015a20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8015a24:	e7d2      	b.n	80159cc <coap_write+0x128>
  LL_FOREACH(ctx->endpoint, ep) {
 8015a26:	6824      	ldr	r4, [r4, #0]
 8015a28:	e75f      	b.n	80158ea <coap_write+0x46>
          || coap_session_send_ping(s) == COAP_INVALID_TID)
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	f001 f99e 	bl	8016d6c <coap_session_send_ping>
 8015a30:	3001      	adds	r0, #1
 8015a32:	d089      	beq.n	8015948 <coap_write+0xa4>
        s->last_rx_tx = now;
 8015a34:	e9c4 892a 	strd	r8, r9, [r4, #168]	; 0xa8
        s->last_ping = now;
 8015a38:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
      s_timeout = (s->last_rx_tx + ctx->ping_timeout * COAP_TICKS_PER_SECOND) - now;
 8015a3c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8015a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015a42:	fba2 2303 	umull	r2, r3, r2, r3
 8015a46:	ebb2 0108 	subs.w	r1, r2, r8
 8015a4a:	eb63 0009 	sbc.w	r0, r3, r9
 8015a4e:	e9d4 322a 	ldrd	r3, r2, [r4, #168]	; 0xa8
 8015a52:	18cb      	adds	r3, r1, r3
 8015a54:	9308      	str	r3, [sp, #32]
 8015a56:	eb40 0302 	adc.w	r3, r0, r2
 8015a5a:	9309      	str	r3, [sp, #36]	; 0x24
      if (timeout == 0 || s_timeout < timeout)
 8015a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a60:	4313      	orrs	r3, r2
      s_timeout = (s->last_rx_tx + ctx->ping_timeout * COAP_TICKS_PER_SECOND) - now;
 8015a62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
      if (timeout == 0 || s_timeout < timeout)
 8015a66:	d005      	beq.n	8015a74 <coap_write+0x1d0>
 8015a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a6c:	428b      	cmp	r3, r1
 8015a6e:	bf08      	it	eq
 8015a70:	4282      	cmpeq	r2, r0
 8015a72:	d201      	bcs.n	8015a78 <coap_write+0x1d4>
      s_timeout = (s->last_rx_tx + ctx->ping_timeout * COAP_TICKS_PER_SECOND) - now;
 8015a74:	e9cd 2300 	strd	r2, r3, [sp]
    if (
 8015a78:	7963      	ldrb	r3, [r4, #5]
 8015a7a:	9306      	str	r3, [sp, #24]
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d12c      	bne.n	8015ada <coap_write+0x236>
     && COAP_PROTO_RELIABLE(s->proto)
 8015a80:	7923      	ldrb	r3, [r4, #4]
 8015a82:	3b03      	subs	r3, #3
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	d828      	bhi.n	8015ada <coap_write+0x236>
     && s->state == COAP_SESSION_STATE_CSM
 8015a88:	79a3      	ldrb	r3, [r4, #6]
 8015a8a:	2b03      	cmp	r3, #3
 8015a8c:	d125      	bne.n	8015ada <coap_write+0x236>
     && ctx->csm_timeout > 0
 8015a8e:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8015a90:	b31a      	cbz	r2, 8015ada <coap_write+0x236>
      if (s->csm_tx == 0) {
 8015a92:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 8015a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015a9a:	ea50 0601 	orrs.w	r6, r0, r1
 8015a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8015aa2:	d12f      	bne.n	8015b04 <coap_write+0x260>
        s->csm_tx = now;
 8015aa4:	e9c4 8932 	strd	r8, r9, [r4, #200]	; 0xc8
      s_timeout = (s->csm_tx + ctx->csm_timeout * COAP_TICKS_PER_SECOND) - now;
 8015aa8:	ebb2 0108 	subs.w	r1, r2, r8
 8015aac:	eb63 0009 	sbc.w	r0, r3, r9
 8015ab0:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 8015ab4:	18cb      	adds	r3, r1, r3
 8015ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ab8:	eb40 0302 	adc.w	r3, r0, r2
 8015abc:	930b      	str	r3, [sp, #44]	; 0x2c
      if (timeout == 0 || s_timeout < timeout)
 8015abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ac2:	4313      	orrs	r3, r2
      s_timeout = (s->csm_tx + ctx->csm_timeout * COAP_TICKS_PER_SECOND) - now;
 8015ac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
      if (timeout == 0 || s_timeout < timeout)
 8015ac8:	d005      	beq.n	8015ad6 <coap_write+0x232>
 8015aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ace:	428b      	cmp	r3, r1
 8015ad0:	bf08      	it	eq
 8015ad2:	4282      	cmpeq	r2, r0
 8015ad4:	d201      	bcs.n	8015ada <coap_write+0x236>
      s_timeout = (s->csm_tx + ctx->csm_timeout * COAP_TICKS_PER_SECOND) - now;
 8015ad6:	e9cd 2300 	strd	r2, r3, [sp]
        timeout = s_timeout;
    }

    if (s->sock.flags & (COAP_SOCKET_WANT_READ | COAP_SOCKET_WANT_WRITE | COAP_SOCKET_WANT_CONNECT)) {
 8015ada:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8015ade:	f003 03b0 	and.w	r3, r3, #176	; 0xb0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f43f af3a 	beq.w	801595c <coap_write+0xb8>
      if (*num_sockets < max_sockets)
 8015ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015aea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	4293      	cmp	r3, r2
 8015af0:	f4bf af34 	bcs.w	801595c <coap_write+0xb8>
        sockets[(*num_sockets)++] = &s->sock;
 8015af4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015af6:	1c5a      	adds	r2, r3, #1
 8015af8:	600a      	str	r2, [r1, #0]
 8015afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015afc:	3478      	adds	r4, #120	; 0x78
 8015afe:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8015b02:	e72b      	b.n	801595c <coap_write+0xb8>
      } else if (s->csm_tx + ctx->csm_timeout * COAP_TICKS_PER_SECOND <= now) {
 8015b04:	1887      	adds	r7, r0, r2
 8015b06:	4159      	adcs	r1, r3
 8015b08:	9716      	str	r7, [sp, #88]	; 0x58
 8015b0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8015b0c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8015b10:	4589      	cmp	r9, r1
 8015b12:	bf08      	it	eq
 8015b14:	4580      	cmpeq	r8, r0
 8015b16:	d3c7      	bcc.n	8015aa8 <coap_write+0x204>
 8015b18:	e716      	b.n	8015948 <coap_write+0xa4>
  }

  nextpdu = coap_peek_next(ctx);

  while (nextpdu && now >= ctx->sendqueue_basetime && nextpdu->t <= now - ctx->sendqueue_basetime) {
    coap_retransmit(ctx, coap_pop_next(ctx));
 8015b1a:	4628      	mov	r0, r5
 8015b1c:	f002 f9af 	bl	8017e7e <coap_pop_next>
 8015b20:	4601      	mov	r1, r0
 8015b22:	4628      	mov	r0, r5
 8015b24:	f003 fcf8 	bl	8019518 <coap_retransmit>
    nextpdu = coap_peek_next(ctx);
 8015b28:	4628      	mov	r0, r5
 8015b2a:	f002 f9a5 	bl	8017e78 <coap_peek_next>
  while (nextpdu && now >= ctx->sendqueue_basetime && nextpdu->t <= now - ctx->sendqueue_basetime) {
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	f000 8085 	beq.w	8015c3e <coap_write+0x39a>
 8015b34:	e9d5 6706 	ldrd	r6, r7, [r5, #24]
 8015b38:	45b9      	cmp	r9, r7
 8015b3a:	bf08      	it	eq
 8015b3c:	45b0      	cmpeq	r8, r6
 8015b3e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8015b42:	d30b      	bcc.n	8015b5c <coap_write+0x2b8>
 8015b44:	ebb8 0306 	subs.w	r3, r8, r6
 8015b48:	9318      	str	r3, [sp, #96]	; 0x60
 8015b4a:	eb69 0307 	sbc.w	r3, r9, r7
 8015b4e:	9319      	str	r3, [sp, #100]	; 0x64
 8015b50:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
 8015b54:	428c      	cmp	r4, r1
 8015b56:	bf08      	it	eq
 8015b58:	4283      	cmpeq	r3, r0
 8015b5a:	d2de      	bcs.n	8015b1a <coap_write+0x276>
  }

  if (nextpdu && (timeout == 0 || nextpdu->t - ( now - ctx->sendqueue_basetime ) < timeout))
 8015b5c:	1832      	adds	r2, r6, r0
 8015b5e:	eb41 0307 	adc.w	r3, r1, r7
 8015b62:	ebb2 0a08 	subs.w	sl, r2, r8
 8015b66:	eb63 0b09 	sbc.w	fp, r3, r9
 8015b6a:	e9dd 3400 	ldrd	r3, r4, [sp]
 8015b6e:	4323      	orrs	r3, r4
 8015b70:	d007      	beq.n	8015b82 <coap_write+0x2de>
 8015b72:	e9dd 3400 	ldrd	r3, r4, [sp]
 8015b76:	455c      	cmp	r4, fp
 8015b78:	bf08      	it	eq
 8015b7a:	4553      	cmpeq	r3, sl
 8015b7c:	d201      	bcs.n	8015b82 <coap_write+0x2de>
 8015b7e:	469a      	mov	sl, r3
 8015b80:	46a3      	mov	fp, r4
    timeout = nextpdu->t - (now - ctx->sendqueue_basetime);

  if (ctx->dtls_context) {
 8015b82:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d043      	beq.n	8015c10 <coap_write+0x36c>
    if (coap_dtls_is_context_timeout()) {
 8015b88:	f000 ffb8 	bl	8016afc <coap_dtls_is_context_timeout>
 8015b8c:	2800      	cmp	r0, #0
 8015b8e:	d05d      	beq.n	8015c4c <coap_write+0x3a8>
      coap_tick_t tls_timeout = coap_dtls_get_context_timeout(ctx->dtls_context);
 8015b90:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8015b92:	f000 ffb5 	bl	8016b00 <coap_dtls_get_context_timeout>
 8015b96:	4602      	mov	r2, r0
 8015b98:	460b      	mov	r3, r1
      if (tls_timeout > 0) {
 8015b9a:	ea52 0103 	orrs.w	r1, r2, r3
 8015b9e:	d037      	beq.n	8015c10 <coap_write+0x36c>
        if (tls_timeout < now + COAP_TICKS_PER_SECOND / 10)
 8015ba0:	f118 0164 	adds.w	r1, r8, #100	; 0x64
 8015ba4:	9104      	str	r1, [sp, #16]
 8015ba6:	f149 0100 	adc.w	r1, r9, #0
 8015baa:	9105      	str	r1, [sp, #20]
 8015bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015bb0:	4299      	cmp	r1, r3
 8015bb2:	bf08      	it	eq
 8015bb4:	4290      	cmpeq	r0, r2
 8015bb6:	bf38      	it	cc
 8015bb8:	e9cd 2304 	strdcc	r2, r3, [sp, #16]
          tls_timeout = now + COAP_TICKS_PER_SECOND / 10;
        coap_log(LOG_DEBUG, "** DTLS global timeout set to %dms\n",
 8015bbc:	f7ff fa12 	bl	8014fe4 <coap_get_log_level>
 8015bc0:	9b04      	ldr	r3, [sp, #16]
 8015bc2:	ebb3 0308 	subs.w	r3, r3, r8
 8015bc6:	9302      	str	r3, [sp, #8]
 8015bc8:	9b05      	ldr	r3, [sp, #20]
 8015bca:	eb63 0309 	sbc.w	r3, r3, r9
 8015bce:	2806      	cmp	r0, #6
 8015bd0:	9303      	str	r3, [sp, #12]
 8015bd2:	d911      	bls.n	8015bf8 <coap_write+0x354>
 8015bd4:	9a02      	ldr	r2, [sp, #8]
 8015bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015bda:	fba2 0103 	umull	r0, r1, r2, r3
 8015bde:	9a03      	ldr	r2, [sp, #12]
 8015be0:	fb03 1102 	mla	r1, r3, r2, r1
 8015be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015be8:	2300      	movs	r3, #0
 8015bea:	f7ea fe89 	bl	8000900 <__aeabi_uldivmod>
 8015bee:	4916      	ldr	r1, [pc, #88]	; (8015c48 <coap_write+0x3a4>)
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	2007      	movs	r0, #7
 8015bf4:	f7ff fa60 	bl	80150b8 <coap_log_impl>
                 (int)((tls_timeout - now) * 1000 / COAP_TICKS_PER_SECOND));
        if (timeout == 0 || tls_timeout - now < timeout)
 8015bf8:	ea5a 030b 	orrs.w	r3, sl, fp
 8015bfc:	f000 80b8 	beq.w	8015d70 <coap_write+0x4cc>
 8015c00:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8015c04:	455c      	cmp	r4, fp
 8015c06:	bf08      	it	eq
 8015c08:	4553      	cmpeq	r3, sl
 8015c0a:	d201      	bcs.n	8015c10 <coap_write+0x36c>
 8015c0c:	469a      	mov	sl, r3
 8015c0e:	46a3      	mov	fp, r4
        }
      }
    }
  }

  return (unsigned int)((timeout * 1000 + COAP_TICKS_PER_SECOND - 1) / COAP_TICKS_PER_SECOND);
 8015c10:	f11a 0401 	adds.w	r4, sl, #1
 8015c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015c18:	f14b 0200 	adc.w	r2, fp, #0
 8015c1c:	fba4 4503 	umull	r4, r5, r4, r3
 8015c20:	fb03 5502 	mla	r5, r3, r2, r5
 8015c24:	f114 30ff 	adds.w	r0, r4, #4294967295
 8015c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015c2c:	f04f 0300 	mov.w	r3, #0
 8015c30:	f145 31ff 	adc.w	r1, r5, #4294967295
 8015c34:	f7ea fe64 	bl	8000900 <__aeabi_uldivmod>
}
 8015c38:	b01f      	add	sp, #124	; 0x7c
 8015c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c3e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8015c42:	e79e      	b.n	8015b82 <coap_write+0x2de>
 8015c44:	000493e0 	.word	0x000493e0
 8015c48:	0802f5ed 	.word	0x0802f5ed
      LL_FOREACH(ctx->endpoint, ep) {
 8015c4c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
                coap_log(LOG_DEBUG, "** %s: DTLS retransmit timeout\n",
 8015c4e:	4f4a      	ldr	r7, [pc, #296]	; (8015d78 <coap_write+0x4d4>)
      LL_FOREACH(ctx->endpoint, ep) {
 8015c50:	bb56      	cbnz	r6, 8015ca8 <coap_write+0x404>
      LL_FOREACH(ctx->sessions, s) {
 8015c52:	6aac      	ldr	r4, [r5, #40]	; 0x28
            coap_log(LOG_DEBUG, "** %s: DTLS retransmit timeout\n", coap_session_str(s));
 8015c54:	4d48      	ldr	r5, [pc, #288]	; (8015d78 <coap_write+0x4d4>)
      LL_FOREACH(ctx->sessions, s) {
 8015c56:	2c00      	cmp	r4, #0
 8015c58:	d0da      	beq.n	8015c10 <coap_write+0x36c>
        if (s->proto == COAP_PROTO_DTLS && s->tls) {
 8015c5a:	7923      	ldrb	r3, [r4, #4]
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	d121      	bne.n	8015ca4 <coap_write+0x400>
 8015c60:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8015c64:	b1f3      	cbz	r3, 8015ca4 <coap_write+0x400>
              tls_timeout = coap_dtls_get_timeout(s, now);
 8015c66:	4642      	mov	r2, r8
 8015c68:	464b      	mov	r3, r9
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f000 ff4b 	bl	8016b06 <coap_dtls_get_timeout>
 8015c70:	4602      	mov	r2, r0
 8015c72:	460b      	mov	r3, r1
          while (tls_timeout > 0 && tls_timeout <= now) {
 8015c74:	ea52 0103 	orrs.w	r1, r2, r3
 8015c78:	d014      	beq.n	8015ca4 <coap_write+0x400>
 8015c7a:	4599      	cmp	r9, r3
 8015c7c:	bf08      	it	eq
 8015c7e:	4590      	cmpeq	r8, r2
 8015c80:	d25b      	bcs.n	8015d3a <coap_write+0x496>
          if (tls_timeout > 0 && (timeout == 0 || tls_timeout - now < timeout))
 8015c82:	ebb2 0108 	subs.w	r1, r2, r8
 8015c86:	eb63 0309 	sbc.w	r3, r3, r9
 8015c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8015c8c:	ea5a 030b 	orrs.w	r3, sl, fp
 8015c90:	9110      	str	r1, [sp, #64]	; 0x40
 8015c92:	d06a      	beq.n	8015d6a <coap_write+0x4c6>
 8015c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015c98:	455b      	cmp	r3, fp
 8015c9a:	bf08      	it	eq
 8015c9c:	4552      	cmpeq	r2, sl
 8015c9e:	d201      	bcs.n	8015ca4 <coap_write+0x400>
 8015ca0:	4692      	mov	sl, r2
 8015ca2:	469b      	mov	fp, r3
      LL_FOREACH(ctx->sessions, s) {
 8015ca4:	6824      	ldr	r4, [r4, #0]
 8015ca6:	e7d6      	b.n	8015c56 <coap_write+0x3b2>
        if (ep->proto == COAP_PROTO_DTLS) {
 8015ca8:	7a33      	ldrb	r3, [r6, #8]
 8015caa:	2b02      	cmp	r3, #2
 8015cac:	d101      	bne.n	8015cb2 <coap_write+0x40e>
          LL_FOREACH(ep->sessions, s) {
 8015cae:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8015cb0:	b90c      	cbnz	r4, 8015cb6 <coap_write+0x412>
      LL_FOREACH(ctx->endpoint, ep) {
 8015cb2:	6836      	ldr	r6, [r6, #0]
 8015cb4:	e7cc      	b.n	8015c50 <coap_write+0x3ac>
            if (s->proto == COAP_PROTO_DTLS && s->tls) {
 8015cb6:	7923      	ldrb	r3, [r4, #4]
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	d121      	bne.n	8015d00 <coap_write+0x45c>
 8015cbc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8015cc0:	b1f3      	cbz	r3, 8015d00 <coap_write+0x45c>
                  tls_timeout = coap_dtls_get_timeout(s, now);
 8015cc2:	4642      	mov	r2, r8
 8015cc4:	464b      	mov	r3, r9
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	f000 ff1d 	bl	8016b06 <coap_dtls_get_timeout>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	460b      	mov	r3, r1
              while (tls_timeout > 0 && tls_timeout <= now) {
 8015cd0:	ea52 0103 	orrs.w	r1, r2, r3
 8015cd4:	d014      	beq.n	8015d00 <coap_write+0x45c>
 8015cd6:	4599      	cmp	r9, r3
 8015cd8:	bf08      	it	eq
 8015cda:	4590      	cmpeq	r8, r2
 8015cdc:	d212      	bcs.n	8015d04 <coap_write+0x460>
              if (tls_timeout > 0 && (timeout == 0 || tls_timeout - now < timeout))
 8015cde:	ebb2 0108 	subs.w	r1, r2, r8
 8015ce2:	eb63 0309 	sbc.w	r3, r3, r9
 8015ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ce8:	ea5a 030b 	orrs.w	r3, sl, fp
 8015cec:	910e      	str	r1, [sp, #56]	; 0x38
 8015cee:	d021      	beq.n	8015d34 <coap_write+0x490>
 8015cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015cf4:	455b      	cmp	r3, fp
 8015cf6:	bf08      	it	eq
 8015cf8:	4552      	cmpeq	r2, sl
 8015cfa:	d201      	bcs.n	8015d00 <coap_write+0x45c>
 8015cfc:	4692      	mov	sl, r2
 8015cfe:	469b      	mov	fp, r3
          LL_FOREACH(ep->sessions, s) {
 8015d00:	6824      	ldr	r4, [r4, #0]
 8015d02:	e7d5      	b.n	8015cb0 <coap_write+0x40c>
                coap_log(LOG_DEBUG, "** %s: DTLS retransmit timeout\n",
 8015d04:	f7ff f96e 	bl	8014fe4 <coap_get_log_level>
 8015d08:	2806      	cmp	r0, #6
 8015d0a:	d907      	bls.n	8015d1c <coap_write+0x478>
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f001 f845 	bl	8016d9c <coap_session_str>
 8015d12:	4639      	mov	r1, r7
 8015d14:	4602      	mov	r2, r0
 8015d16:	2007      	movs	r0, #7
 8015d18:	f7ff f9ce 	bl	80150b8 <coap_log_impl>
                coap_dtls_handle_timeout(s);
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	f000 fef5 	bl	8016b0c <coap_dtls_handle_timeout>
                if (s->tls)
 8015d22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1cb      	bne.n	8015cc2 <coap_write+0x41e>
                  timeout = 1;
 8015d2a:	f04f 0a01 	mov.w	sl, #1
 8015d2e:	f04f 0b00 	mov.w	fp, #0
 8015d32:	e7e5      	b.n	8015d00 <coap_write+0x45c>
 8015d34:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8015d38:	e7e2      	b.n	8015d00 <coap_write+0x45c>
            coap_log(LOG_DEBUG, "** %s: DTLS retransmit timeout\n", coap_session_str(s));
 8015d3a:	f7ff f953 	bl	8014fe4 <coap_get_log_level>
 8015d3e:	2806      	cmp	r0, #6
 8015d40:	d907      	bls.n	8015d52 <coap_write+0x4ae>
 8015d42:	4620      	mov	r0, r4
 8015d44:	f001 f82a 	bl	8016d9c <coap_session_str>
 8015d48:	4629      	mov	r1, r5
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	2007      	movs	r0, #7
 8015d4e:	f7ff f9b3 	bl	80150b8 <coap_log_impl>
            coap_dtls_handle_timeout(s);
 8015d52:	4620      	mov	r0, r4
 8015d54:	f000 feda 	bl	8016b0c <coap_dtls_handle_timeout>
            if (s->tls)
 8015d58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d182      	bne.n	8015c66 <coap_write+0x3c2>
              timeout = 1;
 8015d60:	f04f 0a01 	mov.w	sl, #1
 8015d64:	f04f 0b00 	mov.w	fp, #0
 8015d68:	e79c      	b.n	8015ca4 <coap_write+0x400>
 8015d6a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8015d6e:	e799      	b.n	8015ca4 <coap_write+0x400>
 8015d70:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8015d74:	e74c      	b.n	8015c10 <coap_write+0x36c>
 8015d76:	bf00      	nop
 8015d78:	0802f611 	.word	0x0802f611

08015d7c <coap_socket_strerror>:
static const char *coap_socket_format_errno(int error) {
  return strerror(error);
}
#endif /* WITH_CONTIKI */

const char *coap_socket_strerror(void) {
 8015d7c:	b508      	push	{r3, lr}
  return strerror(errno);
 8015d7e:	f005 fe9f 	bl	801bac0 <__errno>
}
 8015d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return strerror(errno);
 8015d86:	6800      	ldr	r0, [r0, #0]
 8015d88:	f007 ba02 	b.w	801d190 <strerror>

08015d8c <coap_socket_bind_udp>:
  coap_address_t *bound_addr) {
 8015d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d8e:	460d      	mov	r5, r1
  int on = 1, off = 0;
 8015d90:	2301      	movs	r3, #1
  coap_address_t *bound_addr) {
 8015d92:	b085      	sub	sp, #20
 8015d94:	4604      	mov	r4, r0
 8015d96:	4616      	mov	r6, r2
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_DGRAM, 0);
 8015d98:	7968      	ldrb	r0, [r5, #5]
  int on = 1, off = 0;
 8015d9a:	2200      	movs	r2, #0
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_DGRAM, 0);
 8015d9c:	2102      	movs	r1, #2
  int on = 1, off = 0;
 8015d9e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_DGRAM, 0);
 8015da2:	f7f2 f9bf 	bl	8008124 <lwip_socket>
 8015da6:	4603      	mov	r3, r0
  if (sock->fd == COAP_INVALID_SOCKET) {
 8015da8:	3301      	adds	r3, #1
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_DGRAM, 0);
 8015daa:	6020      	str	r0, [r4, #0]
  if (sock->fd == COAP_INVALID_SOCKET) {
 8015dac:	d110      	bne.n	8015dd0 <coap_socket_bind_udp+0x44>
    coap_log(LOG_WARNING,
 8015dae:	f7ff f919 	bl	8014fe4 <coap_get_log_level>
 8015db2:	2803      	cmp	r0, #3
 8015db4:	d906      	bls.n	8015dc4 <coap_socket_bind_udp+0x38>
 8015db6:	f7ff ffe1 	bl	8015d7c <coap_socket_strerror>
 8015dba:	4955      	ldr	r1, [pc, #340]	; (8015f10 <coap_socket_bind_udp+0x184>)
 8015dbc:	4602      	mov	r2, r0
    coap_log(LOG_WARNING,
 8015dbe:	2004      	movs	r0, #4
 8015dc0:	f7ff f97a 	bl	80150b8 <coap_log_impl>
  coap_socket_close(sock);
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	f7ff fd5a 	bl	801587e <coap_socket_close>
  return 0;
 8015dca:	2000      	movs	r0, #0
}
 8015dcc:	b005      	add	sp, #20
 8015dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ioctl(sock->fd, FIONBIO, &on) == COAP_SOCKET_ERROR) {
 8015dd0:	4950      	ldr	r1, [pc, #320]	; (8015f14 <coap_socket_bind_udp+0x188>)
 8015dd2:	aa02      	add	r2, sp, #8
 8015dd4:	f7f2 fba6 	bl	8008524 <lwip_ioctl>
 8015dd8:	3001      	adds	r0, #1
 8015dda:	d10a      	bne.n	8015df2 <coap_socket_bind_udp+0x66>
    coap_log(LOG_WARNING,
 8015ddc:	f7ff f902 	bl	8014fe4 <coap_get_log_level>
 8015de0:	2803      	cmp	r0, #3
 8015de2:	d906      	bls.n	8015df2 <coap_socket_bind_udp+0x66>
 8015de4:	f7ff ffca 	bl	8015d7c <coap_socket_strerror>
 8015de8:	494b      	ldr	r1, [pc, #300]	; (8015f18 <coap_socket_bind_udp+0x18c>)
 8015dea:	4602      	mov	r2, r0
 8015dec:	2004      	movs	r0, #4
 8015dee:	f7ff f963 	bl	80150b8 <coap_log_impl>
  if (setsockopt(sock->fd, SOL_SOCKET, SO_REUSEADDR, OPTVAL_T(&on), sizeof(on)) == COAP_SOCKET_ERROR)
 8015df2:	2704      	movs	r7, #4
 8015df4:	6820      	ldr	r0, [r4, #0]
 8015df6:	9700      	str	r7, [sp, #0]
 8015df8:	ab02      	add	r3, sp, #8
 8015dfa:	463a      	mov	r2, r7
 8015dfc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8015e00:	f7f2 fb5c 	bl	80084bc <lwip_setsockopt>
 8015e04:	3001      	adds	r0, #1
 8015e06:	d10a      	bne.n	8015e1e <coap_socket_bind_udp+0x92>
    coap_log(LOG_WARNING,
 8015e08:	f7ff f8ec 	bl	8014fe4 <coap_get_log_level>
 8015e0c:	2803      	cmp	r0, #3
 8015e0e:	d906      	bls.n	8015e1e <coap_socket_bind_udp+0x92>
 8015e10:	f7ff ffb4 	bl	8015d7c <coap_socket_strerror>
 8015e14:	4941      	ldr	r1, [pc, #260]	; (8015f1c <coap_socket_bind_udp+0x190>)
 8015e16:	4602      	mov	r2, r0
 8015e18:	4638      	mov	r0, r7
 8015e1a:	f7ff f94d 	bl	80150b8 <coap_log_impl>
  switch (listen_addr->addr.sa.sa_family) {
 8015e1e:	796b      	ldrb	r3, [r5, #5]
 8015e20:	2b02      	cmp	r3, #2
 8015e22:	d009      	beq.n	8015e38 <coap_socket_bind_udp+0xac>
 8015e24:	2b0a      	cmp	r3, #10
 8015e26:	d02c      	beq.n	8015e82 <coap_socket_bind_udp+0xf6>
    coap_log(LOG_ALERT, "coap_socket_bind_udp: unsupported sa_family\n");
 8015e28:	f7ff f8dc 	bl	8014fe4 <coap_get_log_level>
 8015e2c:	b1c0      	cbz	r0, 8015e60 <coap_socket_bind_udp+0xd4>
 8015e2e:	493c      	ldr	r1, [pc, #240]	; (8015f20 <coap_socket_bind_udp+0x194>)
 8015e30:	2001      	movs	r0, #1
 8015e32:	f7ff f941 	bl	80150b8 <coap_log_impl>
 8015e36:	e013      	b.n	8015e60 <coap_socket_bind_udp+0xd4>
    if (setsockopt(sock->fd, IPPROTO_IP, GEN_IP_PKTINFO, OPTVAL_T(&on), sizeof(on)) == COAP_SOCKET_ERROR)
 8015e38:	2304      	movs	r3, #4
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	6820      	ldr	r0, [r4, #0]
 8015e3e:	ab02      	add	r3, sp, #8
 8015e40:	2208      	movs	r2, #8
 8015e42:	2100      	movs	r1, #0
 8015e44:	f7f2 fb3a 	bl	80084bc <lwip_setsockopt>
 8015e48:	3001      	adds	r0, #1
 8015e4a:	d109      	bne.n	8015e60 <coap_socket_bind_udp+0xd4>
      coap_log(LOG_ALERT,
 8015e4c:	f7ff f8ca 	bl	8014fe4 <coap_get_log_level>
 8015e50:	b130      	cbz	r0, 8015e60 <coap_socket_bind_udp+0xd4>
 8015e52:	f7ff ff93 	bl	8015d7c <coap_socket_strerror>
 8015e56:	4933      	ldr	r1, [pc, #204]	; (8015f24 <coap_socket_bind_udp+0x198>)
 8015e58:	4602      	mov	r2, r0
 8015e5a:	2001      	movs	r0, #1
 8015e5c:	f7ff f92c 	bl	80150b8 <coap_log_impl>
  if (bind(sock->fd, &listen_addr->addr.sa, listen_addr->size) == COAP_SOCKET_ERROR) {
 8015e60:	4629      	mov	r1, r5
 8015e62:	6820      	ldr	r0, [r4, #0]
 8015e64:	f851 2b04 	ldr.w	r2, [r1], #4
 8015e68:	f7f1 fd40 	bl	80078ec <lwip_bind>
 8015e6c:	3001      	adds	r0, #1
 8015e6e:	d139      	bne.n	8015ee4 <coap_socket_bind_udp+0x158>
    coap_log(LOG_WARNING, "coap_socket_bind_udp: bind: %s\n",
 8015e70:	f7ff f8b8 	bl	8014fe4 <coap_get_log_level>
 8015e74:	2803      	cmp	r0, #3
 8015e76:	d9a5      	bls.n	8015dc4 <coap_socket_bind_udp+0x38>
 8015e78:	f7ff ff80 	bl	8015d7c <coap_socket_strerror>
 8015e7c:	492a      	ldr	r1, [pc, #168]	; (8015f28 <coap_socket_bind_udp+0x19c>)
 8015e7e:	4602      	mov	r2, r0
 8015e80:	e79d      	b.n	8015dbe <coap_socket_bind_udp+0x32>
    if (setsockopt(sock->fd, IPPROTO_IPV6, IPV6_V6ONLY, OPTVAL_T(&off), sizeof(off)) == COAP_SOCKET_ERROR)
 8015e82:	2304      	movs	r3, #4
 8015e84:	9300      	str	r3, [sp, #0]
 8015e86:	6820      	ldr	r0, [r4, #0]
 8015e88:	ab03      	add	r3, sp, #12
 8015e8a:	221b      	movs	r2, #27
 8015e8c:	2129      	movs	r1, #41	; 0x29
 8015e8e:	f7f2 fb15 	bl	80084bc <lwip_setsockopt>
 8015e92:	3001      	adds	r0, #1
 8015e94:	d109      	bne.n	8015eaa <coap_socket_bind_udp+0x11e>
      coap_log(LOG_ALERT,
 8015e96:	f7ff f8a5 	bl	8014fe4 <coap_get_log_level>
 8015e9a:	b130      	cbz	r0, 8015eaa <coap_socket_bind_udp+0x11e>
 8015e9c:	f7ff ff6e 	bl	8015d7c <coap_socket_strerror>
 8015ea0:	4922      	ldr	r1, [pc, #136]	; (8015f2c <coap_socket_bind_udp+0x1a0>)
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	2001      	movs	r0, #1
 8015ea6:	f7ff f907 	bl	80150b8 <coap_log_impl>
    if (setsockopt(sock->fd, IPPROTO_IPV6, GEN_IPV6_PKTINFO, OPTVAL_T(&on), sizeof(on)) == COAP_SOCKET_ERROR)
 8015eaa:	2304      	movs	r3, #4
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	6820      	ldr	r0, [r4, #0]
 8015eb0:	ab02      	add	r3, sp, #8
 8015eb2:	2207      	movs	r2, #7
 8015eb4:	2129      	movs	r1, #41	; 0x29
 8015eb6:	f7f2 fb01 	bl	80084bc <lwip_setsockopt>
 8015eba:	3001      	adds	r0, #1
 8015ebc:	d109      	bne.n	8015ed2 <coap_socket_bind_udp+0x146>
      coap_log(LOG_ALERT,
 8015ebe:	f7ff f891 	bl	8014fe4 <coap_get_log_level>
 8015ec2:	b130      	cbz	r0, 8015ed2 <coap_socket_bind_udp+0x146>
 8015ec4:	f7ff ff5a 	bl	8015d7c <coap_socket_strerror>
 8015ec8:	4919      	ldr	r1, [pc, #100]	; (8015f30 <coap_socket_bind_udp+0x1a4>)
 8015eca:	4602      	mov	r2, r0
 8015ecc:	2001      	movs	r0, #1
 8015ece:	f7ff f8f3 	bl	80150b8 <coap_log_impl>
    setsockopt(sock->fd, IPPROTO_IP, GEN_IP_PKTINFO, OPTVAL_T(&on), sizeof(on)); /* ignore error, because the likely cause is that IPv4 is disabled at the os level */
 8015ed2:	2304      	movs	r3, #4
 8015ed4:	9300      	str	r3, [sp, #0]
 8015ed6:	6820      	ldr	r0, [r4, #0]
 8015ed8:	ab02      	add	r3, sp, #8
 8015eda:	2208      	movs	r2, #8
 8015edc:	2100      	movs	r1, #0
 8015ede:	f7f2 faed 	bl	80084bc <lwip_setsockopt>
    break;
 8015ee2:	e7bd      	b.n	8015e60 <coap_socket_bind_udp+0xd4>
  bound_addr->size = (socklen_t)sizeof(*bound_addr);
 8015ee4:	4631      	mov	r1, r6
 8015ee6:	2320      	movs	r3, #32
 8015ee8:	f841 3b04 	str.w	r3, [r1], #4
  if (getsockname(sock->fd, &bound_addr->addr.sa, &bound_addr->size) < 0) {
 8015eec:	6820      	ldr	r0, [r4, #0]
 8015eee:	4632      	mov	r2, r6
 8015ef0:	f7f2 faa9 	bl	8008446 <lwip_getsockname>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	da09      	bge.n	8015f0c <coap_socket_bind_udp+0x180>
    coap_log(LOG_WARNING,
 8015ef8:	f7ff f874 	bl	8014fe4 <coap_get_log_level>
 8015efc:	2803      	cmp	r0, #3
 8015efe:	f67f af61 	bls.w	8015dc4 <coap_socket_bind_udp+0x38>
 8015f02:	f7ff ff3b 	bl	8015d7c <coap_socket_strerror>
 8015f06:	490b      	ldr	r1, [pc, #44]	; (8015f34 <coap_socket_bind_udp+0x1a8>)
 8015f08:	4602      	mov	r2, r0
 8015f0a:	e758      	b.n	8015dbe <coap_socket_bind_udp+0x32>
  return 1;
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	e75d      	b.n	8015dcc <coap_socket_bind_udp+0x40>
 8015f10:	0802f631 	.word	0x0802f631
 8015f14:	8004667e 	.word	0x8004667e
 8015f18:	0802f653 	.word	0x0802f653
 8015f1c:	0802f67c 	.word	0x0802f67c
 8015f20:	0802f745 	.word	0x0802f745
 8015f24:	0802f6af 	.word	0x0802f6af
 8015f28:	0802f772 	.word	0x0802f772
 8015f2c:	0802f6e0 	.word	0x0802f6e0
 8015f30:	0802f712 	.word	0x0802f712
 8015f34:	0802f792 	.word	0x0802f792

08015f38 <coap_socket_connect_tcp1>:
                         coap_address_t *remote_addr) {
 8015f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	b08c      	sub	sp, #48	; 0x30
  int on = 1, off = 0;
 8015f40:	f04f 0901 	mov.w	r9, #1
 8015f44:	f04f 0a00 	mov.w	sl, #0
  coap_address_copy( &connect_addr, server );
 8015f48:	a804      	add	r0, sp, #16
                         coap_address_t *remote_addr) {
 8015f4a:	460d      	mov	r5, r1
  coap_address_copy( &connect_addr, server );
 8015f4c:	4611      	mov	r1, r2
                         coap_address_t *remote_addr) {
 8015f4e:	4616      	mov	r6, r2
 8015f50:	461f      	mov	r7, r3
  int on = 1, off = 0;
 8015f52:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                         coap_address_t *remote_addr) {
 8015f56:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  coap_address_copy( &connect_addr, server );
 8015f5a:	f7ff fc60 	bl	801581e <coap_address_copy>
  sock->flags &= ~COAP_SOCKET_CONNECTED;
 8015f5e:	88a3      	ldrh	r3, [r4, #4]
  sock->fd = socket(server->addr.sa.sa_family, SOCK_STREAM, 0);
 8015f60:	7970      	ldrb	r0, [r6, #5]
  sock->flags &= ~COAP_SOCKET_CONNECTED;
 8015f62:	f023 0304 	bic.w	r3, r3, #4
 8015f66:	80a3      	strh	r3, [r4, #4]
  sock->fd = socket(server->addr.sa.sa_family, SOCK_STREAM, 0);
 8015f68:	4652      	mov	r2, sl
 8015f6a:	4649      	mov	r1, r9
 8015f6c:	f7f2 f8da 	bl	8008124 <lwip_socket>
 8015f70:	4603      	mov	r3, r0
  if (sock->fd == COAP_INVALID_SOCKET) {
 8015f72:	3301      	adds	r3, #1
  sock->fd = socket(server->addr.sa.sa_family, SOCK_STREAM, 0);
 8015f74:	6020      	str	r0, [r4, #0]
  if (sock->fd == COAP_INVALID_SOCKET) {
 8015f76:	d10f      	bne.n	8015f98 <coap_socket_connect_tcp1+0x60>
    coap_log(LOG_WARNING,
 8015f78:	f7ff f834 	bl	8014fe4 <coap_get_log_level>
 8015f7c:	2803      	cmp	r0, #3
 8015f7e:	d906      	bls.n	8015f8e <coap_socket_connect_tcp1+0x56>
 8015f80:	f7ff fefc 	bl	8015d7c <coap_socket_strerror>
 8015f84:	4963      	ldr	r1, [pc, #396]	; (8016114 <coap_socket_connect_tcp1+0x1dc>)
 8015f86:	4602      	mov	r2, r0
      coap_log(LOG_WARNING, "coap_socket_connect_tcp1: bind: %s\n",
 8015f88:	2004      	movs	r0, #4
 8015f8a:	f7ff f895 	bl	80150b8 <coap_log_impl>
  coap_socket_close(sock);
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f7ff fc75 	bl	801587e <coap_socket_close>
  return 0;
 8015f94:	2000      	movs	r0, #0
 8015f96:	e087      	b.n	80160a8 <coap_socket_connect_tcp1+0x170>
  if (ioctl(sock->fd, FIONBIO, &on) == COAP_SOCKET_ERROR) {
 8015f98:	495f      	ldr	r1, [pc, #380]	; (8016118 <coap_socket_connect_tcp1+0x1e0>)
 8015f9a:	aa02      	add	r2, sp, #8
 8015f9c:	f7f2 fac2 	bl	8008524 <lwip_ioctl>
 8015fa0:	3001      	adds	r0, #1
 8015fa2:	d10a      	bne.n	8015fba <coap_socket_connect_tcp1+0x82>
    coap_log(LOG_WARNING,
 8015fa4:	f7ff f81e 	bl	8014fe4 <coap_get_log_level>
 8015fa8:	2803      	cmp	r0, #3
 8015faa:	d906      	bls.n	8015fba <coap_socket_connect_tcp1+0x82>
 8015fac:	f7ff fee6 	bl	8015d7c <coap_socket_strerror>
 8015fb0:	495a      	ldr	r1, [pc, #360]	; (801611c <coap_socket_connect_tcp1+0x1e4>)
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	2004      	movs	r0, #4
 8015fb6:	f7ff f87f 	bl	80150b8 <coap_log_impl>
  switch (server->addr.sa.sa_family) {
 8015fba:	7973      	ldrb	r3, [r6, #5]
 8015fbc:	2b02      	cmp	r3, #2
 8015fbe:	d009      	beq.n	8015fd4 <coap_socket_connect_tcp1+0x9c>
 8015fc0:	2b0a      	cmp	r3, #10
 8015fc2:	d03f      	beq.n	8016044 <coap_socket_connect_tcp1+0x10c>
    coap_log(LOG_ALERT, "coap_socket_connect_tcp1: unsupported sa_family\n");
 8015fc4:	f7ff f80e 	bl	8014fe4 <coap_get_log_level>
 8015fc8:	b160      	cbz	r0, 8015fe4 <coap_socket_connect_tcp1+0xac>
 8015fca:	4955      	ldr	r1, [pc, #340]	; (8016120 <coap_socket_connect_tcp1+0x1e8>)
 8015fcc:	2001      	movs	r0, #1
 8015fce:	f7ff f873 	bl	80150b8 <coap_log_impl>
 8015fd2:	e007      	b.n	8015fe4 <coap_socket_connect_tcp1+0xac>
    if (connect_addr.addr.sin.sin_port == 0)
 8015fd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015fd8:	b923      	cbnz	r3, 8015fe4 <coap_socket_connect_tcp1+0xac>
      connect_addr.addr.sin.sin_port = htons(default_port);
 8015fda:	b2b8      	uxth	r0, r7
 8015fdc:	f7f8 f860 	bl	800e0a0 <lwip_htons>
 8015fe0:	f8ad 0016 	strh.w	r0, [sp, #22]
  if (local_if && local_if->addr.sa.sa_family) {
 8015fe4:	2d00      	cmp	r5, #0
 8015fe6:	d04b      	beq.n	8016080 <coap_socket_connect_tcp1+0x148>
 8015fe8:	796b      	ldrb	r3, [r5, #5]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d048      	beq.n	8016080 <coap_socket_connect_tcp1+0x148>
    coap_address_copy(local_addr, local_if);
 8015fee:	4629      	mov	r1, r5
 8015ff0:	4640      	mov	r0, r8
    if (setsockopt(sock->fd, SOL_SOCKET, SO_REUSEADDR, OPTVAL_T(&on), sizeof(on)) == COAP_SOCKET_ERROR)
 8015ff2:	2604      	movs	r6, #4
    coap_address_copy(local_addr, local_if);
 8015ff4:	f7ff fc13 	bl	801581e <coap_address_copy>
    if (setsockopt(sock->fd, SOL_SOCKET, SO_REUSEADDR, OPTVAL_T(&on), sizeof(on)) == COAP_SOCKET_ERROR)
 8015ff8:	6820      	ldr	r0, [r4, #0]
 8015ffa:	9600      	str	r6, [sp, #0]
 8015ffc:	ab02      	add	r3, sp, #8
 8015ffe:	4632      	mov	r2, r6
 8016000:	f640 71ff 	movw	r1, #4095	; 0xfff
 8016004:	f7f2 fa5a 	bl	80084bc <lwip_setsockopt>
 8016008:	3001      	adds	r0, #1
 801600a:	d10a      	bne.n	8016022 <coap_socket_connect_tcp1+0xea>
      coap_log(LOG_WARNING,
 801600c:	f7fe ffea 	bl	8014fe4 <coap_get_log_level>
 8016010:	2803      	cmp	r0, #3
 8016012:	d906      	bls.n	8016022 <coap_socket_connect_tcp1+0xea>
 8016014:	f7ff feb2 	bl	8015d7c <coap_socket_strerror>
 8016018:	4942      	ldr	r1, [pc, #264]	; (8016124 <coap_socket_connect_tcp1+0x1ec>)
 801601a:	4602      	mov	r2, r0
 801601c:	4630      	mov	r0, r6
 801601e:	f7ff f84b 	bl	80150b8 <coap_log_impl>
    if (bind(sock->fd, &local_if->addr.sa, local_if->size) == COAP_SOCKET_ERROR) {
 8016022:	4629      	mov	r1, r5
 8016024:	6820      	ldr	r0, [r4, #0]
 8016026:	f851 2b04 	ldr.w	r2, [r1], #4
 801602a:	f7f1 fc5f 	bl	80078ec <lwip_bind>
 801602e:	3001      	adds	r0, #1
 8016030:	d129      	bne.n	8016086 <coap_socket_connect_tcp1+0x14e>
      coap_log(LOG_WARNING, "coap_socket_connect_tcp1: bind: %s\n",
 8016032:	f7fe ffd7 	bl	8014fe4 <coap_get_log_level>
 8016036:	2803      	cmp	r0, #3
 8016038:	d9a9      	bls.n	8015f8e <coap_socket_connect_tcp1+0x56>
 801603a:	f7ff fe9f 	bl	8015d7c <coap_socket_strerror>
 801603e:	493a      	ldr	r1, [pc, #232]	; (8016128 <coap_socket_connect_tcp1+0x1f0>)
 8016040:	4602      	mov	r2, r0
 8016042:	e7a1      	b.n	8015f88 <coap_socket_connect_tcp1+0x50>
    if (connect_addr.addr.sin6.sin6_port == 0)
 8016044:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016048:	b923      	cbnz	r3, 8016054 <coap_socket_connect_tcp1+0x11c>
      connect_addr.addr.sin6.sin6_port = htons(default_port);
 801604a:	b2b8      	uxth	r0, r7
 801604c:	f7f8 f828 	bl	800e0a0 <lwip_htons>
 8016050:	f8ad 0016 	strh.w	r0, [sp, #22]
    if (setsockopt(sock->fd, IPPROTO_IPV6, IPV6_V6ONLY, OPTVAL_T(&off), sizeof(off)) == COAP_SOCKET_ERROR)
 8016054:	2704      	movs	r7, #4
 8016056:	6820      	ldr	r0, [r4, #0]
 8016058:	9700      	str	r7, [sp, #0]
 801605a:	ab03      	add	r3, sp, #12
 801605c:	221b      	movs	r2, #27
 801605e:	2129      	movs	r1, #41	; 0x29
 8016060:	f7f2 fa2c 	bl	80084bc <lwip_setsockopt>
 8016064:	3001      	adds	r0, #1
 8016066:	d1bd      	bne.n	8015fe4 <coap_socket_connect_tcp1+0xac>
      coap_log(LOG_WARNING,
 8016068:	f7fe ffbc 	bl	8014fe4 <coap_get_log_level>
 801606c:	2803      	cmp	r0, #3
 801606e:	d9b9      	bls.n	8015fe4 <coap_socket_connect_tcp1+0xac>
 8016070:	f7ff fe84 	bl	8015d7c <coap_socket_strerror>
 8016074:	492d      	ldr	r1, [pc, #180]	; (801612c <coap_socket_connect_tcp1+0x1f4>)
 8016076:	4602      	mov	r2, r0
 8016078:	4638      	mov	r0, r7
 801607a:	f7ff f81d 	bl	80150b8 <coap_log_impl>
 801607e:	e7b1      	b.n	8015fe4 <coap_socket_connect_tcp1+0xac>
    local_addr->addr.sa.sa_family = server->addr.sa.sa_family;
 8016080:	7973      	ldrb	r3, [r6, #5]
 8016082:	f888 3005 	strb.w	r3, [r8, #5]
  if (connect(sock->fd, &connect_addr.addr.sa, connect_addr.size) == COAP_SOCKET_ERROR) {
 8016086:	9a04      	ldr	r2, [sp, #16]
 8016088:	6820      	ldr	r0, [r4, #0]
 801608a:	a905      	add	r1, sp, #20
 801608c:	f7f1 fcf8 	bl	8007a80 <lwip_connect>
 8016090:	3001      	adds	r0, #1
 8016092:	d116      	bne.n	80160c2 <coap_socket_connect_tcp1+0x18a>
    if (errno == EINPROGRESS) {
 8016094:	f005 fd14 	bl	801bac0 <__errno>
 8016098:	6803      	ldr	r3, [r0, #0]
 801609a:	2b77      	cmp	r3, #119	; 0x77
 801609c:	d107      	bne.n	80160ae <coap_socket_connect_tcp1+0x176>
      sock->flags |= COAP_SOCKET_WANT_CONNECT | COAP_SOCKET_CONNECTED;
 801609e:	88a3      	ldrh	r3, [r4, #4]
 80160a0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
  sock->flags |= COAP_SOCKET_CONNECTED;
 80160a4:	80a3      	strh	r3, [r4, #4]
  return 1;
 80160a6:	2001      	movs	r0, #1
}
 80160a8:	b00c      	add	sp, #48	; 0x30
 80160aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    coap_log(LOG_WARNING, "coap_socket_connect_tcp1: connect: %s\n",
 80160ae:	f7fe ff99 	bl	8014fe4 <coap_get_log_level>
 80160b2:	2803      	cmp	r0, #3
 80160b4:	f67f af6b 	bls.w	8015f8e <coap_socket_connect_tcp1+0x56>
 80160b8:	f7ff fe60 	bl	8015d7c <coap_socket_strerror>
 80160bc:	491c      	ldr	r1, [pc, #112]	; (8016130 <coap_socket_connect_tcp1+0x1f8>)
 80160be:	4602      	mov	r2, r0
 80160c0:	e762      	b.n	8015f88 <coap_socket_connect_tcp1+0x50>
  if (getsockname(sock->fd, &local_addr->addr.sa, &local_addr->size) == COAP_SOCKET_ERROR) {
 80160c2:	4642      	mov	r2, r8
 80160c4:	6820      	ldr	r0, [r4, #0]
 80160c6:	1d11      	adds	r1, r2, #4
 80160c8:	f7f2 f9bd 	bl	8008446 <lwip_getsockname>
 80160cc:	3001      	adds	r0, #1
 80160ce:	d10a      	bne.n	80160e6 <coap_socket_connect_tcp1+0x1ae>
    coap_log(LOG_WARNING, "coap_socket_connect_tcp1: getsockname: %s\n",
 80160d0:	f7fe ff88 	bl	8014fe4 <coap_get_log_level>
 80160d4:	2803      	cmp	r0, #3
 80160d6:	d906      	bls.n	80160e6 <coap_socket_connect_tcp1+0x1ae>
 80160d8:	f7ff fe50 	bl	8015d7c <coap_socket_strerror>
 80160dc:	4915      	ldr	r1, [pc, #84]	; (8016134 <coap_socket_connect_tcp1+0x1fc>)
 80160de:	4602      	mov	r2, r0
 80160e0:	2004      	movs	r0, #4
 80160e2:	f7fe ffe9 	bl	80150b8 <coap_log_impl>
  if (getpeername(sock->fd, &remote_addr->addr.sa, &remote_addr->size) == COAP_SOCKET_ERROR) {
 80160e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160e8:	6820      	ldr	r0, [r4, #0]
 80160ea:	1d11      	adds	r1, r2, #4
 80160ec:	f7f2 f9a8 	bl	8008440 <lwip_getpeername>
 80160f0:	3001      	adds	r0, #1
 80160f2:	d10a      	bne.n	801610a <coap_socket_connect_tcp1+0x1d2>
    coap_log(LOG_WARNING, "coap_socket_connect_tcp1: getpeername: %s\n",
 80160f4:	f7fe ff76 	bl	8014fe4 <coap_get_log_level>
 80160f8:	2803      	cmp	r0, #3
 80160fa:	d906      	bls.n	801610a <coap_socket_connect_tcp1+0x1d2>
 80160fc:	f7ff fe3e 	bl	8015d7c <coap_socket_strerror>
 8016100:	490d      	ldr	r1, [pc, #52]	; (8016138 <coap_socket_connect_tcp1+0x200>)
 8016102:	4602      	mov	r2, r0
 8016104:	2004      	movs	r0, #4
 8016106:	f7fe ffd7 	bl	80150b8 <coap_log_impl>
  sock->flags |= COAP_SOCKET_CONNECTED;
 801610a:	88a3      	ldrh	r3, [r4, #4]
 801610c:	f043 0304 	orr.w	r3, r3, #4
 8016110:	e7c8      	b.n	80160a4 <coap_socket_connect_tcp1+0x16c>
 8016112:	bf00      	nop
 8016114:	0802f7b9 	.word	0x0802f7b9
 8016118:	8004667e 	.word	0x8004667e
 801611c:	0802f7df 	.word	0x0802f7df
 8016120:	0802f842 	.word	0x0802f842
 8016124:	0802f873 	.word	0x0802f873
 8016128:	0802f8aa 	.word	0x0802f8aa
 801612c:	0802f80c 	.word	0x0802f80c
 8016130:	0802f8ce 	.word	0x0802f8ce
 8016134:	0802f8f5 	.word	0x0802f8f5
 8016138:	0802f920 	.word	0x0802f920

0801613c <coap_socket_connect_tcp2>:
                         coap_address_t *remote_addr) {
 801613c:	b5f0      	push	{r4, r5, r6, r7, lr}
  socklen_t optlen = (socklen_t)sizeof( error );
 801613e:	2300      	movs	r3, #0
                         coap_address_t *remote_addr) {
 8016140:	b085      	sub	sp, #20
  socklen_t optlen = (socklen_t)sizeof( error );
 8016142:	2704      	movs	r7, #4
 8016144:	e9cd 3702 	strd	r3, r7, [sp, #8]
  sock->flags &= ~(COAP_SOCKET_WANT_CONNECT | COAP_SOCKET_CAN_CONNECT);
 8016148:	8883      	ldrh	r3, [r0, #4]
 801614a:	f423 6308 	bic.w	r3, r3, #2176	; 0x880
 801614e:	8083      	strh	r3, [r0, #4]
  if (getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, OPTVAL_GT(&error),
 8016150:	ab03      	add	r3, sp, #12
 8016152:	9300      	str	r3, [sp, #0]
                         coap_address_t *remote_addr) {
 8016154:	4604      	mov	r4, r0
 8016156:	460e      	mov	r6, r1
  if (getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, OPTVAL_GT(&error),
 8016158:	6800      	ldr	r0, [r0, #0]
                         coap_address_t *remote_addr) {
 801615a:	4615      	mov	r5, r2
  if (getsockopt(sock->fd, SOL_SOCKET, SO_ERROR, OPTVAL_GT(&error),
 801615c:	ab02      	add	r3, sp, #8
 801615e:	f241 0207 	movw	r2, #4103	; 0x1007
 8016162:	f640 71ff 	movw	r1, #4095	; 0xfff
 8016166:	f7f2 f971 	bl	800844c <lwip_getsockopt>
 801616a:	3001      	adds	r0, #1
 801616c:	d10a      	bne.n	8016184 <coap_socket_connect_tcp2+0x48>
    coap_log(LOG_WARNING, "coap_socket_finish_connect_tcp: getsockopt: %s\n",
 801616e:	f7fe ff39 	bl	8014fe4 <coap_get_log_level>
 8016172:	2803      	cmp	r0, #3
 8016174:	d906      	bls.n	8016184 <coap_socket_connect_tcp2+0x48>
 8016176:	f7ff fe01 	bl	8015d7c <coap_socket_strerror>
 801617a:	4920      	ldr	r1, [pc, #128]	; (80161fc <coap_socket_connect_tcp2+0xc0>)
 801617c:	4602      	mov	r2, r0
 801617e:	4638      	mov	r0, r7
 8016180:	f7fe ff9a 	bl	80150b8 <coap_log_impl>
  if (error) {
 8016184:	9b02      	ldr	r3, [sp, #8]
 8016186:	b18b      	cbz	r3, 80161ac <coap_socket_connect_tcp2+0x70>
    coap_log(LOG_WARNING,
 8016188:	f7fe ff2c 	bl	8014fe4 <coap_get_log_level>
 801618c:	2803      	cmp	r0, #3
 801618e:	d907      	bls.n	80161a0 <coap_socket_connect_tcp2+0x64>
  return strerror(error);
 8016190:	9802      	ldr	r0, [sp, #8]
 8016192:	f006 fffd 	bl	801d190 <strerror>
    coap_log(LOG_WARNING,
 8016196:	491a      	ldr	r1, [pc, #104]	; (8016200 <coap_socket_connect_tcp2+0xc4>)
  return strerror(error);
 8016198:	4602      	mov	r2, r0
    coap_log(LOG_WARNING,
 801619a:	2004      	movs	r0, #4
 801619c:	f7fe ff8c 	bl	80150b8 <coap_log_impl>
    coap_socket_close(sock);
 80161a0:	4620      	mov	r0, r4
 80161a2:	f7ff fb6c 	bl	801587e <coap_socket_close>
    return 0;
 80161a6:	2000      	movs	r0, #0
}
 80161a8:	b005      	add	sp, #20
 80161aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (getsockname(sock->fd, &local_addr->addr.sa, &local_addr->size) == COAP_SOCKET_ERROR) {
 80161ac:	6820      	ldr	r0, [r4, #0]
 80161ae:	4632      	mov	r2, r6
 80161b0:	1d31      	adds	r1, r6, #4
 80161b2:	f7f2 f948 	bl	8008446 <lwip_getsockname>
 80161b6:	3001      	adds	r0, #1
 80161b8:	d10a      	bne.n	80161d0 <coap_socket_connect_tcp2+0x94>
    coap_log(LOG_WARNING, "coap_socket_connect_tcp: getsockname: %s\n",
 80161ba:	f7fe ff13 	bl	8014fe4 <coap_get_log_level>
 80161be:	2803      	cmp	r0, #3
 80161c0:	d906      	bls.n	80161d0 <coap_socket_connect_tcp2+0x94>
 80161c2:	f7ff fddb 	bl	8015d7c <coap_socket_strerror>
 80161c6:	490f      	ldr	r1, [pc, #60]	; (8016204 <coap_socket_connect_tcp2+0xc8>)
 80161c8:	4602      	mov	r2, r0
 80161ca:	2004      	movs	r0, #4
 80161cc:	f7fe ff74 	bl	80150b8 <coap_log_impl>
  if (getpeername(sock->fd, &remote_addr->addr.sa, &remote_addr->size) == COAP_SOCKET_ERROR) {
 80161d0:	6820      	ldr	r0, [r4, #0]
 80161d2:	462a      	mov	r2, r5
 80161d4:	1d29      	adds	r1, r5, #4
 80161d6:	f7f2 f933 	bl	8008440 <lwip_getpeername>
 80161da:	3001      	adds	r0, #1
 80161dc:	d001      	beq.n	80161e2 <coap_socket_connect_tcp2+0xa6>
  return 1;
 80161de:	2001      	movs	r0, #1
 80161e0:	e7e2      	b.n	80161a8 <coap_socket_connect_tcp2+0x6c>
    coap_log(LOG_WARNING, "coap_socket_connect_tcp: getpeername: %s\n",
 80161e2:	f7fe feff 	bl	8014fe4 <coap_get_log_level>
 80161e6:	2803      	cmp	r0, #3
 80161e8:	d9f9      	bls.n	80161de <coap_socket_connect_tcp2+0xa2>
 80161ea:	f7ff fdc7 	bl	8015d7c <coap_socket_strerror>
 80161ee:	4906      	ldr	r1, [pc, #24]	; (8016208 <coap_socket_connect_tcp2+0xcc>)
 80161f0:	4602      	mov	r2, r0
 80161f2:	2004      	movs	r0, #4
 80161f4:	f7fe ff60 	bl	80150b8 <coap_log_impl>
 80161f8:	e7f1      	b.n	80161de <coap_socket_connect_tcp2+0xa2>
 80161fa:	bf00      	nop
 80161fc:	0802f94b 	.word	0x0802f94b
 8016200:	0802f97b 	.word	0x0802f97b
 8016204:	0802f9af 	.word	0x0802f9af
 8016208:	0802f9d9 	.word	0x0802f9d9

0801620c <coap_socket_bind_tcp>:
                     coap_address_t *bound_addr) {
 801620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801620e:	460d      	mov	r5, r1
 8016210:	b085      	sub	sp, #20
 8016212:	4604      	mov	r4, r0
  int on = 1, off = 0;
 8016214:	2101      	movs	r1, #1
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_STREAM, 0);
 8016216:	7968      	ldrb	r0, [r5, #5]
                     coap_address_t *bound_addr) {
 8016218:	4616      	mov	r6, r2
  int on = 1, off = 0;
 801621a:	2200      	movs	r2, #0
 801621c:	e9cd 1202 	strd	r1, r2, [sp, #8]
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_STREAM, 0);
 8016220:	f7f1 ff80 	bl	8008124 <lwip_socket>
 8016224:	4603      	mov	r3, r0
  if (sock->fd == COAP_INVALID_SOCKET) {
 8016226:	3301      	adds	r3, #1
  sock->fd = socket(listen_addr->addr.sa.sa_family, SOCK_STREAM, 0);
 8016228:	6020      	str	r0, [r4, #0]
  if (sock->fd == COAP_INVALID_SOCKET) {
 801622a:	d110      	bne.n	801624e <coap_socket_bind_tcp+0x42>
    coap_log(LOG_WARNING, "coap_socket_bind_tcp: socket: %s\n",
 801622c:	f7fe feda 	bl	8014fe4 <coap_get_log_level>
 8016230:	2803      	cmp	r0, #3
 8016232:	d906      	bls.n	8016242 <coap_socket_bind_tcp+0x36>
 8016234:	f7ff fda2 	bl	8015d7c <coap_socket_strerror>
 8016238:	4950      	ldr	r1, [pc, #320]	; (801637c <coap_socket_bind_tcp+0x170>)
 801623a:	4602      	mov	r2, r0
    coap_log(LOG_WARNING, "coap_socket_bind_tcp: getsockname: %s\n",
 801623c:	2004      	movs	r0, #4
    coap_log(LOG_ALERT, "coap_socket_bind_tcp: listen: %s\n",
 801623e:	f7fe ff3b 	bl	80150b8 <coap_log_impl>
  coap_socket_close(sock);
 8016242:	4620      	mov	r0, r4
 8016244:	f7ff fb1b 	bl	801587e <coap_socket_close>
  return 0;
 8016248:	2000      	movs	r0, #0
}
 801624a:	b005      	add	sp, #20
 801624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ioctl(sock->fd, FIONBIO, &on) == COAP_SOCKET_ERROR) {
 801624e:	494c      	ldr	r1, [pc, #304]	; (8016380 <coap_socket_bind_tcp+0x174>)
 8016250:	aa02      	add	r2, sp, #8
 8016252:	f7f2 f967 	bl	8008524 <lwip_ioctl>
 8016256:	3001      	adds	r0, #1
 8016258:	d10a      	bne.n	8016270 <coap_socket_bind_tcp+0x64>
    coap_log(LOG_WARNING, "coap_socket_bind_tcp: ioctl FIONBIO: %s\n",
 801625a:	f7fe fec3 	bl	8014fe4 <coap_get_log_level>
 801625e:	2803      	cmp	r0, #3
 8016260:	d906      	bls.n	8016270 <coap_socket_bind_tcp+0x64>
 8016262:	f7ff fd8b 	bl	8015d7c <coap_socket_strerror>
 8016266:	4947      	ldr	r1, [pc, #284]	; (8016384 <coap_socket_bind_tcp+0x178>)
 8016268:	4602      	mov	r2, r0
 801626a:	2004      	movs	r0, #4
 801626c:	f7fe ff24 	bl	80150b8 <coap_log_impl>
  if (setsockopt (sock->fd, SOL_SOCKET, SO_KEEPALIVE, OPTVAL_T(&on),
 8016270:	2704      	movs	r7, #4
 8016272:	6820      	ldr	r0, [r4, #0]
 8016274:	9700      	str	r7, [sp, #0]
 8016276:	ab02      	add	r3, sp, #8
 8016278:	2208      	movs	r2, #8
 801627a:	f640 71ff 	movw	r1, #4095	; 0xfff
 801627e:	f7f2 f91d 	bl	80084bc <lwip_setsockopt>
 8016282:	3001      	adds	r0, #1
 8016284:	d10a      	bne.n	801629c <coap_socket_bind_tcp+0x90>
    coap_log(LOG_WARNING,
 8016286:	f7fe fead 	bl	8014fe4 <coap_get_log_level>
 801628a:	2803      	cmp	r0, #3
 801628c:	d906      	bls.n	801629c <coap_socket_bind_tcp+0x90>
 801628e:	f7ff fd75 	bl	8015d7c <coap_socket_strerror>
 8016292:	493d      	ldr	r1, [pc, #244]	; (8016388 <coap_socket_bind_tcp+0x17c>)
 8016294:	4602      	mov	r2, r0
 8016296:	4638      	mov	r0, r7
 8016298:	f7fe ff0e 	bl	80150b8 <coap_log_impl>
  if (setsockopt(sock->fd, SOL_SOCKET, SO_REUSEADDR, OPTVAL_T(&on),
 801629c:	2704      	movs	r7, #4
 801629e:	6820      	ldr	r0, [r4, #0]
 80162a0:	9700      	str	r7, [sp, #0]
 80162a2:	ab02      	add	r3, sp, #8
 80162a4:	463a      	mov	r2, r7
 80162a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80162aa:	f7f2 f907 	bl	80084bc <lwip_setsockopt>
 80162ae:	3001      	adds	r0, #1
 80162b0:	d10a      	bne.n	80162c8 <coap_socket_bind_tcp+0xbc>
    coap_log(LOG_WARNING,
 80162b2:	f7fe fe97 	bl	8014fe4 <coap_get_log_level>
 80162b6:	2803      	cmp	r0, #3
 80162b8:	d906      	bls.n	80162c8 <coap_socket_bind_tcp+0xbc>
 80162ba:	f7ff fd5f 	bl	8015d7c <coap_socket_strerror>
 80162be:	4933      	ldr	r1, [pc, #204]	; (801638c <coap_socket_bind_tcp+0x180>)
 80162c0:	4602      	mov	r2, r0
 80162c2:	4638      	mov	r0, r7
 80162c4:	f7fe fef8 	bl	80150b8 <coap_log_impl>
  switch (listen_addr->addr.sa.sa_family) {
 80162c8:	796b      	ldrb	r3, [r5, #5]
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d015      	beq.n	80162fa <coap_socket_bind_tcp+0xee>
 80162ce:	2b0a      	cmp	r3, #10
 80162d0:	d125      	bne.n	801631e <coap_socket_bind_tcp+0x112>
    if (setsockopt(sock->fd, IPPROTO_IPV6, IPV6_V6ONLY, OPTVAL_T(&off), sizeof(off)) == COAP_SOCKET_ERROR)
 80162d2:	2304      	movs	r3, #4
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	6820      	ldr	r0, [r4, #0]
 80162d8:	ab03      	add	r3, sp, #12
 80162da:	221b      	movs	r2, #27
 80162dc:	2129      	movs	r1, #41	; 0x29
 80162de:	f7f2 f8ed 	bl	80084bc <lwip_setsockopt>
 80162e2:	3001      	adds	r0, #1
 80162e4:	d109      	bne.n	80162fa <coap_socket_bind_tcp+0xee>
      coap_log(LOG_ALERT,
 80162e6:	f7fe fe7d 	bl	8014fe4 <coap_get_log_level>
 80162ea:	b130      	cbz	r0, 80162fa <coap_socket_bind_tcp+0xee>
 80162ec:	f7ff fd46 	bl	8015d7c <coap_socket_strerror>
 80162f0:	4927      	ldr	r1, [pc, #156]	; (8016390 <coap_socket_bind_tcp+0x184>)
 80162f2:	4602      	mov	r2, r0
 80162f4:	2001      	movs	r0, #1
 80162f6:	f7fe fedf 	bl	80150b8 <coap_log_impl>
  if (bind(sock->fd, &listen_addr->addr.sa, listen_addr->size) == COAP_SOCKET_ERROR) {
 80162fa:	4629      	mov	r1, r5
 80162fc:	6820      	ldr	r0, [r4, #0]
 80162fe:	f851 2b04 	ldr.w	r2, [r1], #4
 8016302:	f7f1 faf3 	bl	80078ec <lwip_bind>
 8016306:	3001      	adds	r0, #1
 8016308:	d112      	bne.n	8016330 <coap_socket_bind_tcp+0x124>
    coap_log(LOG_ALERT, "coap_socket_bind_tcp: bind: %s\n",
 801630a:	f7fe fe6b 	bl	8014fe4 <coap_get_log_level>
 801630e:	2800      	cmp	r0, #0
 8016310:	d097      	beq.n	8016242 <coap_socket_bind_tcp+0x36>
 8016312:	f7ff fd33 	bl	8015d7c <coap_socket_strerror>
 8016316:	491f      	ldr	r1, [pc, #124]	; (8016394 <coap_socket_bind_tcp+0x188>)
 8016318:	4602      	mov	r2, r0
    coap_log(LOG_ALERT, "coap_socket_bind_tcp: listen: %s\n",
 801631a:	2001      	movs	r0, #1
 801631c:	e78f      	b.n	801623e <coap_socket_bind_tcp+0x32>
    coap_log(LOG_ALERT, "coap_socket_bind_tcp: unsupported sa_family\n");
 801631e:	f7fe fe61 	bl	8014fe4 <coap_get_log_level>
 8016322:	2800      	cmp	r0, #0
 8016324:	d0e9      	beq.n	80162fa <coap_socket_bind_tcp+0xee>
 8016326:	491c      	ldr	r1, [pc, #112]	; (8016398 <coap_socket_bind_tcp+0x18c>)
 8016328:	2001      	movs	r0, #1
 801632a:	f7fe fec5 	bl	80150b8 <coap_log_impl>
 801632e:	e7e4      	b.n	80162fa <coap_socket_bind_tcp+0xee>
  bound_addr->size = (socklen_t)sizeof(*bound_addr);
 8016330:	4631      	mov	r1, r6
 8016332:	2320      	movs	r3, #32
 8016334:	f841 3b04 	str.w	r3, [r1], #4
  if (getsockname(sock->fd, &bound_addr->addr.sa, &bound_addr->size) < 0) {
 8016338:	6820      	ldr	r0, [r4, #0]
 801633a:	4632      	mov	r2, r6
 801633c:	f7f2 f883 	bl	8008446 <lwip_getsockname>
 8016340:	2800      	cmp	r0, #0
 8016342:	da09      	bge.n	8016358 <coap_socket_bind_tcp+0x14c>
    coap_log(LOG_WARNING, "coap_socket_bind_tcp: getsockname: %s\n",
 8016344:	f7fe fe4e 	bl	8014fe4 <coap_get_log_level>
 8016348:	2803      	cmp	r0, #3
 801634a:	f67f af7a 	bls.w	8016242 <coap_socket_bind_tcp+0x36>
 801634e:	f7ff fd15 	bl	8015d7c <coap_socket_strerror>
 8016352:	4912      	ldr	r1, [pc, #72]	; (801639c <coap_socket_bind_tcp+0x190>)
 8016354:	4602      	mov	r2, r0
 8016356:	e771      	b.n	801623c <coap_socket_bind_tcp+0x30>
  if (listen(sock->fd, 5) == COAP_SOCKET_ERROR) {
 8016358:	6820      	ldr	r0, [r4, #0]
 801635a:	2105      	movs	r1, #5
 801635c:	f7f1 fbf2 	bl	8007b44 <lwip_listen>
 8016360:	3001      	adds	r0, #1
 8016362:	d109      	bne.n	8016378 <coap_socket_bind_tcp+0x16c>
    coap_log(LOG_ALERT, "coap_socket_bind_tcp: listen: %s\n",
 8016364:	f7fe fe3e 	bl	8014fe4 <coap_get_log_level>
 8016368:	2800      	cmp	r0, #0
 801636a:	f43f af6a 	beq.w	8016242 <coap_socket_bind_tcp+0x36>
 801636e:	f7ff fd05 	bl	8015d7c <coap_socket_strerror>
 8016372:	490b      	ldr	r1, [pc, #44]	; (80163a0 <coap_socket_bind_tcp+0x194>)
 8016374:	4602      	mov	r2, r0
 8016376:	e7d0      	b.n	801631a <coap_socket_bind_tcp+0x10e>
  return 1;
 8016378:	2001      	movs	r0, #1
 801637a:	e766      	b.n	801624a <coap_socket_bind_tcp+0x3e>
 801637c:	0802fa03 	.word	0x0802fa03
 8016380:	8004667e 	.word	0x8004667e
 8016384:	0802fa25 	.word	0x0802fa25
 8016388:	0802fa4e 	.word	0x0802fa4e
 801638c:	0802fa81 	.word	0x0802fa81
 8016390:	0802fab4 	.word	0x0802fab4
 8016394:	0802fb13 	.word	0x0802fb13
 8016398:	0802fae6 	.word	0x0802fae6
 801639c:	0802fb33 	.word	0x0802fb33
 80163a0:	0802fb5a 	.word	0x0802fb5a

080163a4 <coap_socket_accept_tcp>:
                       coap_address_t *remote_addr) {
 80163a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163a6:	4615      	mov	r5, r2
 80163a8:	461a      	mov	r2, r3
  int on = 1;
 80163aa:	2301      	movs	r3, #1
 80163ac:	9301      	str	r3, [sp, #4]
  server->flags &= ~COAP_SOCKET_CAN_ACCEPT;
 80163ae:	8883      	ldrh	r3, [r0, #4]
 80163b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80163b4:	8083      	strh	r3, [r0, #4]
                       coap_address_t *remote_addr) {
 80163b6:	460c      	mov	r4, r1
  new_client->fd = accept(server->fd, &remote_addr->addr.sa,
 80163b8:	6800      	ldr	r0, [r0, #0]
 80163ba:	1d11      	adds	r1, r2, #4
 80163bc:	f7f1 f9dc 	bl	8007778 <lwip_accept>
 80163c0:	4603      	mov	r3, r0
  if (new_client->fd == COAP_INVALID_SOCKET) {
 80163c2:	3301      	adds	r3, #1
  new_client->fd = accept(server->fd, &remote_addr->addr.sa,
 80163c4:	6020      	str	r0, [r4, #0]
  if (new_client->fd == COAP_INVALID_SOCKET) {
 80163c6:	d10c      	bne.n	80163e2 <coap_socket_accept_tcp+0x3e>
    coap_log(LOG_WARNING, "coap_socket_accept_tcp: accept: %s\n",
 80163c8:	f7fe fe0c 	bl	8014fe4 <coap_get_log_level>
 80163cc:	2803      	cmp	r0, #3
 80163ce:	d906      	bls.n	80163de <coap_socket_accept_tcp+0x3a>
 80163d0:	f7ff fcd4 	bl	8015d7c <coap_socket_strerror>
 80163d4:	4916      	ldr	r1, [pc, #88]	; (8016430 <coap_socket_accept_tcp+0x8c>)
 80163d6:	4602      	mov	r2, r0
 80163d8:	2004      	movs	r0, #4
 80163da:	f7fe fe6d 	bl	80150b8 <coap_log_impl>
    return 0;
 80163de:	2000      	movs	r0, #0
 80163e0:	e018      	b.n	8016414 <coap_socket_accept_tcp+0x70>
  if (getsockname( new_client->fd, &local_addr->addr.sa, &local_addr->size) < 0)
 80163e2:	462a      	mov	r2, r5
 80163e4:	1d29      	adds	r1, r5, #4
 80163e6:	f7f2 f82e 	bl	8008446 <lwip_getsockname>
 80163ea:	2800      	cmp	r0, #0
 80163ec:	da0a      	bge.n	8016404 <coap_socket_accept_tcp+0x60>
    coap_log(LOG_WARNING, "coap_socket_accept_tcp: getsockname: %s\n",
 80163ee:	f7fe fdf9 	bl	8014fe4 <coap_get_log_level>
 80163f2:	2803      	cmp	r0, #3
 80163f4:	d906      	bls.n	8016404 <coap_socket_accept_tcp+0x60>
 80163f6:	f7ff fcc1 	bl	8015d7c <coap_socket_strerror>
 80163fa:	490e      	ldr	r1, [pc, #56]	; (8016434 <coap_socket_accept_tcp+0x90>)
 80163fc:	4602      	mov	r2, r0
 80163fe:	2004      	movs	r0, #4
 8016400:	f7fe fe5a 	bl	80150b8 <coap_log_impl>
  if (ioctl(new_client->fd, FIONBIO, &on) == COAP_SOCKET_ERROR) {
 8016404:	490c      	ldr	r1, [pc, #48]	; (8016438 <coap_socket_accept_tcp+0x94>)
 8016406:	6820      	ldr	r0, [r4, #0]
 8016408:	aa01      	add	r2, sp, #4
 801640a:	f7f2 f88b 	bl	8008524 <lwip_ioctl>
 801640e:	3001      	adds	r0, #1
 8016410:	d002      	beq.n	8016418 <coap_socket_accept_tcp+0x74>
  return 1;
 8016412:	2001      	movs	r0, #1
}
 8016414:	b003      	add	sp, #12
 8016416:	bd30      	pop	{r4, r5, pc}
    coap_log(LOG_WARNING, "coap_socket_accept_tcp: ioctl FIONBIO: %s\n",
 8016418:	f7fe fde4 	bl	8014fe4 <coap_get_log_level>
 801641c:	2803      	cmp	r0, #3
 801641e:	d9f8      	bls.n	8016412 <coap_socket_accept_tcp+0x6e>
 8016420:	f7ff fcac 	bl	8015d7c <coap_socket_strerror>
 8016424:	4905      	ldr	r1, [pc, #20]	; (801643c <coap_socket_accept_tcp+0x98>)
 8016426:	4602      	mov	r2, r0
 8016428:	2004      	movs	r0, #4
 801642a:	f7fe fe45 	bl	80150b8 <coap_log_impl>
 801642e:	e7f0      	b.n	8016412 <coap_socket_accept_tcp+0x6e>
 8016430:	0802fb7c 	.word	0x0802fb7c
 8016434:	0802fba0 	.word	0x0802fba0
 8016438:	8004667e 	.word	0x8004667e
 801643c:	0802fbc9 	.word	0x0802fbc9

08016440 <coap_socket_write>:
  sock->flags &= ~(COAP_SOCKET_WANT_WRITE | COAP_SOCKET_CAN_WRITE);
 8016440:	8883      	ldrh	r3, [r0, #4]
 8016442:	f423 7308 	bic.w	r3, r3, #544	; 0x220
coap_socket_write(coap_socket_t *sock, const uint8_t *data, size_t data_len) {
 8016446:	b570      	push	{r4, r5, r6, lr}
  sock->flags &= ~(COAP_SOCKET_WANT_WRITE | COAP_SOCKET_CAN_WRITE);
 8016448:	8083      	strh	r3, [r0, #4]
coap_socket_write(coap_socket_t *sock, const uint8_t *data, size_t data_len) {
 801644a:	4604      	mov	r4, r0
  r = send(sock->fd, data, data_len, 0);
 801644c:	2300      	movs	r3, #0
 801644e:	6800      	ldr	r0, [r0, #0]
coap_socket_write(coap_socket_t *sock, const uint8_t *data, size_t data_len) {
 8016450:	4616      	mov	r6, r2
  r = send(sock->fd, data, data_len, 0);
 8016452:	f7f1 fe2f 	bl	80080b4 <lwip_send>
  if (r == COAP_SOCKET_ERROR) {
 8016456:	1c43      	adds	r3, r0, #1
  r = send(sock->fd, data, data_len, 0);
 8016458:	4605      	mov	r5, r0
  if (r == COAP_SOCKET_ERROR) {
 801645a:	d11c      	bne.n	8016496 <coap_socket_write+0x56>
    if (errno==EAGAIN || errno == EINTR) {
 801645c:	f005 fb30 	bl	801bac0 <__errno>
 8016460:	6803      	ldr	r3, [r0, #0]
 8016462:	2b0b      	cmp	r3, #11
 8016464:	d106      	bne.n	8016474 <coap_socket_write+0x34>
      sock->flags |= COAP_SOCKET_WANT_WRITE;
 8016466:	88a3      	ldrh	r3, [r4, #4]
 8016468:	f043 0320 	orr.w	r3, r3, #32
 801646c:	80a3      	strh	r3, [r4, #4]
      return 0;
 801646e:	2500      	movs	r5, #0
}
 8016470:	4628      	mov	r0, r5
 8016472:	bd70      	pop	{r4, r5, r6, pc}
    if (errno==EAGAIN || errno == EINTR) {
 8016474:	f005 fb24 	bl	801bac0 <__errno>
 8016478:	6803      	ldr	r3, [r0, #0]
 801647a:	2b04      	cmp	r3, #4
 801647c:	d0f3      	beq.n	8016466 <coap_socket_write+0x26>
    coap_log(LOG_WARNING, "coap_socket_write: send: %s\n",
 801647e:	f7fe fdb1 	bl	8014fe4 <coap_get_log_level>
 8016482:	2803      	cmp	r0, #3
 8016484:	d9f4      	bls.n	8016470 <coap_socket_write+0x30>
 8016486:	f7ff fc79 	bl	8015d7c <coap_socket_strerror>
 801648a:	4906      	ldr	r1, [pc, #24]	; (80164a4 <coap_socket_write+0x64>)
 801648c:	4602      	mov	r2, r0
 801648e:	2004      	movs	r0, #4
 8016490:	f7fe fe12 	bl	80150b8 <coap_log_impl>
 8016494:	e7ec      	b.n	8016470 <coap_socket_write+0x30>
  if (r < (ssize_t)data_len)
 8016496:	4286      	cmp	r6, r0
    sock->flags |= COAP_SOCKET_WANT_WRITE;
 8016498:	bfc2      	ittt	gt
 801649a:	88a3      	ldrhgt	r3, [r4, #4]
 801649c:	f043 0320 	orrgt.w	r3, r3, #32
 80164a0:	80a3      	strhgt	r3, [r4, #4]
 80164a2:	e7e5      	b.n	8016470 <coap_socket_write+0x30>
 80164a4:	0802fdbc 	.word	0x0802fdbc

080164a8 <coap_socket_read>:
coap_socket_read(coap_socket_t *sock, uint8_t *data, size_t data_len) {
 80164a8:	b570      	push	{r4, r5, r6, lr}
  r = recv(sock->fd, data, data_len, 0);
 80164aa:	2300      	movs	r3, #0
coap_socket_read(coap_socket_t *sock, uint8_t *data, size_t data_len) {
 80164ac:	4604      	mov	r4, r0
  r = recv(sock->fd, data, data_len, 0);
 80164ae:	6800      	ldr	r0, [r0, #0]
coap_socket_read(coap_socket_t *sock, uint8_t *data, size_t data_len) {
 80164b0:	4616      	mov	r6, r2
  r = recv(sock->fd, data, data_len, 0);
 80164b2:	f7f1 fbd2 	bl	8007c5a <lwip_recv>
  if (r == 0) {
 80164b6:	4605      	mov	r5, r0
 80164b8:	b938      	cbnz	r0, 80164ca <coap_socket_read+0x22>
    sock->flags &= ~COAP_SOCKET_CAN_READ;
 80164ba:	88a3      	ldrh	r3, [r4, #4]
 80164bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164c0:	80a3      	strh	r3, [r4, #4]
    return -1;
 80164c2:	f04f 35ff 	mov.w	r5, #4294967295
}
 80164c6:	4628      	mov	r0, r5
 80164c8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (r == COAP_SOCKET_ERROR) {
 80164ca:	1c43      	adds	r3, r0, #1
 80164cc:	d120      	bne.n	8016510 <coap_socket_read+0x68>
    sock->flags &= ~COAP_SOCKET_CAN_READ;
 80164ce:	88a3      	ldrh	r3, [r4, #4]
 80164d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164d4:	80a3      	strh	r3, [r4, #4]
    if (errno==EAGAIN || errno == EINTR) {
 80164d6:	f005 faf3 	bl	801bac0 <__errno>
 80164da:	6803      	ldr	r3, [r0, #0]
 80164dc:	2b0b      	cmp	r3, #11
 80164de:	d101      	bne.n	80164e4 <coap_socket_read+0x3c>
      return 0;
 80164e0:	2500      	movs	r5, #0
 80164e2:	e7f0      	b.n	80164c6 <coap_socket_read+0x1e>
    if (errno==EAGAIN || errno == EINTR) {
 80164e4:	f005 faec 	bl	801bac0 <__errno>
 80164e8:	6803      	ldr	r3, [r0, #0]
 80164ea:	2b04      	cmp	r3, #4
 80164ec:	d0f8      	beq.n	80164e0 <coap_socket_read+0x38>
    if (errno != ECONNRESET)
 80164ee:	f005 fae7 	bl	801bac0 <__errno>
 80164f2:	6803      	ldr	r3, [r0, #0]
 80164f4:	2b68      	cmp	r3, #104	; 0x68
 80164f6:	d0e6      	beq.n	80164c6 <coap_socket_read+0x1e>
      coap_log(LOG_WARNING, "coap_socket_read: recv: %s\n",
 80164f8:	f7fe fd74 	bl	8014fe4 <coap_get_log_level>
 80164fc:	2803      	cmp	r0, #3
 80164fe:	d9e2      	bls.n	80164c6 <coap_socket_read+0x1e>
 8016500:	f7ff fc3c 	bl	8015d7c <coap_socket_strerror>
 8016504:	4906      	ldr	r1, [pc, #24]	; (8016520 <coap_socket_read+0x78>)
 8016506:	4602      	mov	r2, r0
 8016508:	2004      	movs	r0, #4
 801650a:	f7fe fdd5 	bl	80150b8 <coap_log_impl>
 801650e:	e7da      	b.n	80164c6 <coap_socket_read+0x1e>
  if (r < (ssize_t)data_len)
 8016510:	4286      	cmp	r6, r0
    sock->flags &= ~COAP_SOCKET_CAN_READ;
 8016512:	bfc2      	ittt	gt
 8016514:	88a3      	ldrhgt	r3, [r4, #4]
 8016516:	f423 7380 	bicgt.w	r3, r3, #256	; 0x100
 801651a:	80a3      	strhgt	r3, [r4, #4]
 801651c:	e7d3      	b.n	80164c6 <coap_socket_read+0x1e>
 801651e:	bf00      	nop
 8016520:	0802fdd9 	.word	0x0802fdd9

08016524 <coap_network_send>:
coap_network_send(coap_socket_t *sock, const coap_session_t *session, const uint8_t *data, size_t datalen) {
 8016524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016528:	b093      	sub	sp, #76	; 0x4c
 801652a:	4606      	mov	r6, r0
 801652c:	460c      	mov	r4, r1
 801652e:	4690      	mov	r8, r2
 8016530:	461d      	mov	r5, r3
  if (!coap_debug_send_packet()) {
 8016532:	f7ff f92d 	bl	8015790 <coap_debug_send_packet>
 8016536:	b150      	cbz	r0, 801654e <coap_network_send+0x2a>
  } else if (sock->flags & COAP_SOCKET_CONNECTED) {
 8016538:	88b7      	ldrh	r7, [r6, #4]
 801653a:	f017 0704 	ands.w	r7, r7, #4
 801653e:	d017      	beq.n	8016570 <coap_network_send+0x4c>
    bytes_written = send(sock->fd, data, datalen, 0);
 8016540:	6830      	ldr	r0, [r6, #0]
 8016542:	2300      	movs	r3, #0
 8016544:	462a      	mov	r2, r5
 8016546:	4641      	mov	r1, r8
 8016548:	f7f1 fdb4 	bl	80080b4 <lwip_send>
    bytes_written = sendmsg(sock->fd, &mhdr, 0);
 801654c:	4605      	mov	r5, r0
  if (bytes_written < 0)
 801654e:	2d00      	cmp	r5, #0
 8016550:	da0a      	bge.n	8016568 <coap_network_send+0x44>
    coap_log(LOG_CRIT, "coap_network_send: %s\n", coap_socket_strerror());
 8016552:	f7fe fd47 	bl	8014fe4 <coap_get_log_level>
 8016556:	2801      	cmp	r0, #1
 8016558:	d906      	bls.n	8016568 <coap_network_send+0x44>
 801655a:	f7ff fc0f 	bl	8015d7c <coap_socket_strerror>
 801655e:	4947      	ldr	r1, [pc, #284]	; (801667c <coap_network_send+0x158>)
 8016560:	4602      	mov	r2, r0
 8016562:	2002      	movs	r0, #2
 8016564:	f7fe fda8 	bl	80150b8 <coap_log_impl>
}
 8016568:	4628      	mov	r0, r5
 801656a:	b013      	add	sp, #76	; 0x4c
 801656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    const void *addr = &session->remote_addr.addr;
 8016570:	f104 0938 	add.w	r9, r4, #56	; 0x38
    assert(session);
 8016574:	b934      	cbnz	r4, 8016584 <coap_network_send+0x60>
 8016576:	4b42      	ldr	r3, [pc, #264]	; (8016680 <coap_network_send+0x15c>)
 8016578:	4a42      	ldr	r2, [pc, #264]	; (8016684 <coap_network_send+0x160>)
 801657a:	4843      	ldr	r0, [pc, #268]	; (8016688 <coap_network_send+0x164>)
 801657c:	f44f 7144 	mov.w	r1, #784	; 0x310
 8016580:	f005 fa7c 	bl	801ba7c <__assert_func>
    iov[0].iov_len = (iov_len_t)datalen;
 8016584:	e9cd 8501 	strd	r8, r5, [sp, #4]
    memset(buf, 0, sizeof (buf));
 8016588:	ad0a      	add	r5, sp, #40	; 0x28
 801658a:	2220      	movs	r2, #32
 801658c:	4639      	mov	r1, r7
 801658e:	4628      	mov	r0, r5
 8016590:	f005 fe7e 	bl	801c290 <memset>
    mhdr.msg_namelen = session->remote_addr.size;
 8016594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016596:	9304      	str	r3, [sp, #16]
    mhdr.msg_iov = iov;
 8016598:	ab01      	add	r3, sp, #4
 801659a:	9305      	str	r3, [sp, #20]
    mhdr.msg_iovlen = 1;
 801659c:	2301      	movs	r3, #1
 801659e:	9306      	str	r3, [sp, #24]
  switch (a->addr.sa.sa_family) {
 80165a0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    memset(&mhdr, 0, sizeof(struct msghdr));
 80165a4:	9709      	str	r7, [sp, #36]	; 0x24
 80165a6:	2b02      	cmp	r3, #2
 80165a8:	e9cd 7707 	strd	r7, r7, [sp, #28]
    memcpy (&mhdr.msg_name, &addr, sizeof (mhdr.msg_name));
 80165ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80165b0:	d024      	beq.n	80165fc <coap_network_send+0xd8>
 80165b2:	2b0a      	cmp	r3, #10
 80165b4:	d02e      	beq.n	8016614 <coap_network_send+0xf0>
    if (!coap_address_isany(&session->local_addr) && !coap_is_mcast(&session->local_addr)) switch (session->local_addr.addr.sa.sa_family) {
 80165b6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80165ba:	f7fe fa9f 	bl	8014afc <coap_is_mcast>
 80165be:	bb18      	cbnz	r0, 8016608 <coap_network_send+0xe4>
 80165c0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80165c4:	2b02      	cmp	r3, #2
 80165c6:	d045      	beq.n	8016654 <coap_network_send+0x130>
 80165c8:	2b0a      	cmp	r3, #10
 80165ca:	d14e      	bne.n	801666a <coap_network_send+0x146>
      if (IN6_IS_ADDR_V4MAPPED(&session->local_addr.addr.sin6.sin6_addr)) {
 80165cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80165ce:	bb53      	cbnz	r3, 8016626 <coap_network_send+0x102>
 80165d0:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80165d2:	bb47      	cbnz	r7, 8016626 <coap_network_send+0x102>
 80165d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80165d8:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80165dc:	f7f7 fd63 	bl	800e0a6 <lwip_htonl>
 80165e0:	4580      	cmp	r8, r0
 80165e2:	d120      	bne.n	8016626 <coap_network_send+0x102>
        mhdr.msg_controllen = CMSG_SPACE(sizeof(struct in_pktinfo));
 80165e4:	2314      	movs	r3, #20
 80165e6:	9308      	str	r3, [sp, #32]
        cmsg->cmsg_len = CMSG_LEN(sizeof(struct in_pktinfo));
 80165e8:	930a      	str	r3, [sp, #40]	; 0x28
        pktinfo->ipi_ifindex = session->ifindex;
 80165ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80165ec:	930d      	str	r3, [sp, #52]	; 0x34
        cmsg->cmsg_type = IP_PKTINFO;
 80165ee:	2208      	movs	r2, #8
        memcpy(&pktinfo->ipi_spec_dst, session->local_addr.addr.sin6.sin6_addr.s6_addr + 12, sizeof(pktinfo->ipi_spec_dst));
 80165f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        mhdr.msg_control = buf;
 80165f2:	9507      	str	r5, [sp, #28]
        cmsg->cmsg_level = SOL_IP;
 80165f4:	970b      	str	r7, [sp, #44]	; 0x2c
        cmsg->cmsg_type = IP_PKTINFO;
 80165f6:	920c      	str	r2, [sp, #48]	; 0x30
      memcpy(&pktinfo->ipi_spec_dst, &session->local_addr.addr.sin.sin_addr, sizeof(pktinfo->ipi_spec_dst));
 80165f8:	930e      	str	r3, [sp, #56]	; 0x38
      break;
 80165fa:	e005      	b.n	8016608 <coap_network_send+0xe4>
    return a->addr.sin.sin_addr.s_addr == INADDR_ANY;
 80165fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80165fe:	fab3 f383 	clz	r3, r3
                  sizeof(in6addr_any)) == 0;
 8016602:	095b      	lsrs	r3, r3, #5
    if (!coap_address_isany(&session->local_addr) && !coap_is_mcast(&session->local_addr)) switch (session->local_addr.addr.sa.sa_family) {
 8016604:	2b00      	cmp	r3, #0
 8016606:	d0d6      	beq.n	80165b6 <coap_network_send+0x92>
    bytes_written = sendmsg(sock->fd, &mhdr, 0);
 8016608:	6830      	ldr	r0, [r6, #0]
 801660a:	2200      	movs	r2, #0
 801660c:	a903      	add	r1, sp, #12
 801660e:	f7f1 fbc3 	bl	8007d98 <lwip_sendmsg>
 8016612:	e79b      	b.n	801654c <coap_network_send+0x28>
    return memcmp(&in6addr_any,
 8016614:	481d      	ldr	r0, [pc, #116]	; (801668c <coap_network_send+0x168>)
 8016616:	2210      	movs	r2, #16
 8016618:	f104 0160 	add.w	r1, r4, #96	; 0x60
 801661c:	f005 fe02 	bl	801c224 <memcmp>
                  sizeof(in6addr_any)) == 0;
 8016620:	fab0 f380 	clz	r3, r0
 8016624:	e7ed      	b.n	8016602 <coap_network_send+0xde>
        cmsg->cmsg_type = IPV6_PKTINFO;
 8016626:	2129      	movs	r1, #41	; 0x29
 8016628:	2207      	movs	r2, #7
        mhdr.msg_controllen = CMSG_SPACE(sizeof(struct in6_pktinfo));
 801662a:	2320      	movs	r3, #32
        cmsg->cmsg_type = IPV6_PKTINFO;
 801662c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
        mhdr.msg_controllen = CMSG_SPACE(sizeof(struct in6_pktinfo));
 8016630:	9308      	str	r3, [sp, #32]
        cmsg->cmsg_len = CMSG_LEN(sizeof(struct in6_pktinfo));
 8016632:	930a      	str	r3, [sp, #40]	; 0x28
        pktinfo->ipi6_ifindex = session->ifindex;
 8016634:	6f63      	ldr	r3, [r4, #116]	; 0x74
        mhdr.msg_control = buf;
 8016636:	9507      	str	r5, [sp, #28]
        pktinfo->ipi6_ifindex = session->ifindex;
 8016638:	9311      	str	r3, [sp, #68]	; 0x44
        memcpy(&pktinfo->ipi6_addr, &session->local_addr.addr.sin6.sin6_addr, sizeof(pktinfo->ipi6_addr));
 801663a:	ad0d      	add	r5, sp, #52	; 0x34
 801663c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8016640:	3470      	adds	r4, #112	; 0x70
 8016642:	6818      	ldr	r0, [r3, #0]
 8016644:	6859      	ldr	r1, [r3, #4]
 8016646:	462a      	mov	r2, r5
 8016648:	c203      	stmia	r2!, {r0, r1}
 801664a:	3308      	adds	r3, #8
 801664c:	42a3      	cmp	r3, r4
 801664e:	4615      	mov	r5, r2
 8016650:	d1f7      	bne.n	8016642 <coap_network_send+0x11e>
 8016652:	e7d9      	b.n	8016608 <coap_network_send+0xe4>
      mhdr.msg_controllen = CMSG_SPACE(sizeof(struct in_pktinfo));
 8016654:	2314      	movs	r3, #20
 8016656:	9308      	str	r3, [sp, #32]
      cmsg->cmsg_type = IP_PKTINFO;
 8016658:	2208      	movs	r2, #8
      cmsg->cmsg_len = CMSG_LEN(sizeof(struct in_pktinfo));
 801665a:	930a      	str	r3, [sp, #40]	; 0x28
      pktinfo->ipi_ifindex = session->ifindex;
 801665c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801665e:	930d      	str	r3, [sp, #52]	; 0x34
      mhdr.msg_control = buf;
 8016660:	9507      	str	r5, [sp, #28]
      memcpy(&pktinfo->ipi_spec_dst, &session->local_addr.addr.sin.sin_addr, sizeof(pktinfo->ipi_spec_dst));
 8016662:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      cmsg->cmsg_level = SOL_IP;
 8016664:	900b      	str	r0, [sp, #44]	; 0x2c
      cmsg->cmsg_type = IP_PKTINFO;
 8016666:	920c      	str	r2, [sp, #48]	; 0x30
      memcpy(&pktinfo->ipi_spec_dst, &session->local_addr.addr.sin.sin_addr, sizeof(pktinfo->ipi_spec_dst));
 8016668:	e7c6      	b.n	80165f8 <coap_network_send+0xd4>
      coap_log(LOG_WARNING, "protocol not supported\n");
 801666a:	f7fe fcbb 	bl	8014fe4 <coap_get_log_level>
 801666e:	2803      	cmp	r0, #3
 8016670:	d9ca      	bls.n	8016608 <coap_network_send+0xe4>
 8016672:	4907      	ldr	r1, [pc, #28]	; (8016690 <coap_network_send+0x16c>)
 8016674:	2004      	movs	r0, #4
 8016676:	f7fe fd1f 	bl	80150b8 <coap_log_impl>
 801667a:	e7c5      	b.n	8016608 <coap_network_send+0xe4>
 801667c:	0802fe67 	.word	0x0802fe67
 8016680:	0802fdf5 	.word	0x0802fdf5
 8016684:	0802aa50 	.word	0x0802aa50
 8016688:	0802fdfd 	.word	0x0802fdfd
 801668c:	0801fc44 	.word	0x0801fc44
 8016690:	08030190 	.word	0x08030190

08016694 <coap_network_read>:
coap_network_read(coap_socket_t *sock, coap_packet_t *packet) {
 8016694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016698:	460c      	mov	r4, r1
 801669a:	b092      	sub	sp, #72	; 0x48
  assert(sock);
 801669c:	4607      	mov	r7, r0
 801669e:	b930      	cbnz	r0, 80166ae <coap_network_read+0x1a>
 80166a0:	4b66      	ldr	r3, [pc, #408]	; (801683c <coap_network_read+0x1a8>)
 80166a2:	4a67      	ldr	r2, [pc, #412]	; (8016840 <coap_network_read+0x1ac>)
 80166a4:	f240 319f 	movw	r1, #927	; 0x39f
  assert(packet);
 80166a8:	4866      	ldr	r0, [pc, #408]	; (8016844 <coap_network_read+0x1b0>)
 80166aa:	f005 f9e7 	bl	801ba7c <__assert_func>
 80166ae:	b921      	cbnz	r1, 80166ba <coap_network_read+0x26>
 80166b0:	4b65      	ldr	r3, [pc, #404]	; (8016848 <coap_network_read+0x1b4>)
 80166b2:	4a63      	ldr	r2, [pc, #396]	; (8016840 <coap_network_read+0x1ac>)
 80166b4:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80166b8:	e7f6      	b.n	80166a8 <coap_network_read+0x14>
  if ((sock->flags & COAP_SOCKET_CAN_READ) == 0) {
 80166ba:	8882      	ldrh	r2, [r0, #4]
 80166bc:	05d0      	lsls	r0, r2, #23
 80166be:	d405      	bmi.n	80166cc <coap_network_read+0x38>
  return -1;
 80166c0:	f04f 36ff 	mov.w	r6, #4294967295
}
 80166c4:	4630      	mov	r0, r6
 80166c6:	b012      	add	sp, #72	; 0x48
 80166c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sock->flags &= ~COAP_SOCKET_CAN_READ;
 80166cc:	f422 7380 	bic.w	r3, r2, #256	; 0x100
  if (sock->flags & COAP_SOCKET_CONNECTED) {
 80166d0:	f012 0504 	ands.w	r5, r2, #4
    sock->flags &= ~COAP_SOCKET_CAN_READ;
 80166d4:	80bb      	strh	r3, [r7, #4]
  if (sock->flags & COAP_SOCKET_CONNECTED) {
 80166d6:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80166da:	d026      	beq.n	801672a <coap_network_read+0x96>
    len = recv(sock->fd, packet->payload, COAP_RXBUFFER_SIZE, 0);
 80166dc:	6838      	ldr	r0, [r7, #0]
 80166de:	2300      	movs	r3, #0
 80166e0:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80166e4:	f7f1 fab9 	bl	8007c5a <lwip_recv>
    if (len < 0) {
 80166e8:	1e06      	subs	r6, r0, #0
 80166ea:	da1b      	bge.n	8016724 <coap_network_read+0x90>
      if (errno == ECONNREFUSED) {
 80166ec:	f005 f9e8 	bl	801bac0 <__errno>
 80166f0:	6803      	ldr	r3, [r0, #0]
 80166f2:	2b6f      	cmp	r3, #111	; 0x6f
 80166f4:	d10a      	bne.n	801670c <coap_network_read+0x78>
        coap_log(LOG_WARNING, "coap_network_read: unreachable\n");
 80166f6:	f7fe fc75 	bl	8014fe4 <coap_get_log_level>
 80166fa:	2803      	cmp	r0, #3
 80166fc:	d903      	bls.n	8016706 <coap_network_read+0x72>
 80166fe:	4953      	ldr	r1, [pc, #332]	; (801684c <coap_network_read+0x1b8>)
 8016700:	2004      	movs	r0, #4
 8016702:	f7fe fcd9 	bl	80150b8 <coap_log_impl>
        return -2;
 8016706:	f06f 0601 	mvn.w	r6, #1
 801670a:	e7db      	b.n	80166c4 <coap_network_read+0x30>
      coap_log(LOG_WARNING, "coap_network_read: %s\n", coap_socket_strerror());
 801670c:	f7fe fc6a 	bl	8014fe4 <coap_get_log_level>
 8016710:	2803      	cmp	r0, #3
 8016712:	d9d5      	bls.n	80166c0 <coap_network_read+0x2c>
 8016714:	f7ff fb32 	bl	8015d7c <coap_socket_strerror>
 8016718:	494d      	ldr	r1, [pc, #308]	; (8016850 <coap_network_read+0x1bc>)
 801671a:	4602      	mov	r2, r0
 801671c:	2004      	movs	r0, #4
 801671e:	f7fe fccb 	bl	80150b8 <coap_log_impl>
 8016722:	e7cd      	b.n	80166c0 <coap_network_read+0x2c>
    } else if (len > 0) {
 8016724:	d0ce      	beq.n	80166c4 <coap_network_read+0x30>
      packet->length = (size_t)len;
 8016726:	6466      	str	r6, [r4, #68]	; 0x44
 8016728:	e7cc      	b.n	80166c4 <coap_network_read+0x30>
    iov[0].iov_len = (iov_len_t)COAP_RXBUFFER_SIZE;
 801672a:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 801672e:	9302      	str	r3, [sp, #8]
    mhdr.msg_name = (struct sockaddr*)&packet->src.addr;
 8016730:	1d23      	adds	r3, r4, #4
 8016732:	9303      	str	r3, [sp, #12]
    mhdr.msg_namelen = sizeof(packet->src.addr);
 8016734:	231c      	movs	r3, #28
 8016736:	9304      	str	r3, [sp, #16]
    mhdr.msg_iov = iov;
 8016738:	ab01      	add	r3, sp, #4
 801673a:	9305      	str	r3, [sp, #20]
    mhdr.msg_iovlen = 1;
 801673c:	2301      	movs	r3, #1
 801673e:	9306      	str	r3, [sp, #24]
    mhdr.msg_control = buf;
 8016740:	ab0a      	add	r3, sp, #40	; 0x28
 8016742:	9307      	str	r3, [sp, #28]
    mhdr.msg_controllen = sizeof(buf);
 8016744:	2320      	movs	r3, #32
    iov[0].iov_base = packet->payload;
 8016746:	9101      	str	r1, [sp, #4]
    mhdr.msg_controllen = sizeof(buf);
 8016748:	9308      	str	r3, [sp, #32]
    cmsg->cmsg_level = -1;
 801674a:	212c      	movs	r1, #44	; 0x2c
 801674c:	f04f 33ff 	mov.w	r3, #4294967295
 8016750:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    len = recvmsg(sock->fd, &mhdr, 0);
 8016754:	6838      	ldr	r0, [r7, #0]
    memset(&mhdr, 0, sizeof(struct msghdr));
 8016756:	9509      	str	r5, [sp, #36]	; 0x24
    len = recvmsg(sock->fd, &mhdr, 0);
 8016758:	462a      	mov	r2, r5
 801675a:	a903      	add	r1, sp, #12
    cmsg->cmsg_type = -1;
 801675c:	930c      	str	r3, [sp, #48]	; 0x30
    len = recvmsg(sock->fd, &mhdr, 0);
 801675e:	f7f1 fa85 	bl	8007c6c <lwip_recvmsg>
    if (len < 0) {
 8016762:	1e06      	subs	r6, r0, #0
 8016764:	da06      	bge.n	8016774 <coap_network_read+0xe0>
      if (errno == ECONNREFUSED) {
 8016766:	f005 f9ab 	bl	801bac0 <__errno>
 801676a:	6803      	ldr	r3, [r0, #0]
 801676c:	2b6f      	cmp	r3, #111	; 0x6f
 801676e:	d1cd      	bne.n	801670c <coap_network_read+0x78>
        return 0;
 8016770:	462e      	mov	r6, r5
 8016772:	e7a7      	b.n	80166c4 <coap_network_read+0x30>
      packet->src.size = mhdr.msg_namelen;
 8016774:	9b04      	ldr	r3, [sp, #16]
 8016776:	6023      	str	r3, [r4, #0]
      for (cmsg = CMSG_FIRSTHDR(&mhdr); cmsg; cmsg = CMSG_NXTHDR(&mhdr, cmsg)) {
 8016778:	9b08      	ldr	r3, [sp, #32]
      packet->length = (size_t)len;
 801677a:	6466      	str	r6, [r4, #68]	; 0x44
      for (cmsg = CMSG_FIRSTHDR(&mhdr); cmsg; cmsg = CMSG_NXTHDR(&mhdr, cmsg)) {
 801677c:	2b0b      	cmp	r3, #11
 801677e:	d812      	bhi.n	80167a6 <coap_network_read+0x112>
        packet->ifindex = sock->fd;
 8016780:	6838      	ldr	r0, [r7, #0]
 8016782:	6420      	str	r0, [r4, #64]	; 0x40
        if (getsockname(sock->fd, &packet->dst.addr.sa, &packet->dst.size) < 0) {
 8016784:	f104 0220 	add.w	r2, r4, #32
 8016788:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801678c:	f7f1 fe5b 	bl	8008446 <lwip_getsockname>
 8016790:	2800      	cmp	r0, #0
 8016792:	da97      	bge.n	80166c4 <coap_network_read+0x30>
          coap_log(LOG_DEBUG, "Cannot determine local port\n");
 8016794:	f7fe fc26 	bl	8014fe4 <coap_get_log_level>
 8016798:	2806      	cmp	r0, #6
 801679a:	d993      	bls.n	80166c4 <coap_network_read+0x30>
 801679c:	492d      	ldr	r1, [pc, #180]	; (8016854 <coap_network_read+0x1c0>)
 801679e:	2007      	movs	r0, #7
 80167a0:	f7fe fc8a 	bl	80150b8 <coap_log_impl>
 80167a4:	e78e      	b.n	80166c4 <coap_network_read+0x30>
      for (cmsg = CMSG_FIRSTHDR(&mhdr); cmsg; cmsg = CMSG_NXTHDR(&mhdr, cmsg)) {
 80167a6:	9d07      	ldr	r5, [sp, #28]
            coap_log(LOG_DEBUG,
 80167a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8016858 <coap_network_read+0x1c4>
      for (cmsg = CMSG_FIRSTHDR(&mhdr); cmsg; cmsg = CMSG_NXTHDR(&mhdr, cmsg)) {
 80167ac:	2d00      	cmp	r5, #0
 80167ae:	d0e7      	beq.n	8016780 <coap_network_read+0xec>
        if (cmsg->cmsg_level == IPPROTO_IPV6 && cmsg->cmsg_type == IPV6_PKTINFO) {
 80167b0:	686b      	ldr	r3, [r5, #4]
 80167b2:	2b29      	cmp	r3, #41	; 0x29
 80167b4:	d10f      	bne.n	80167d6 <coap_network_read+0x142>
 80167b6:	68ab      	ldr	r3, [r5, #8]
 80167b8:	2b07      	cmp	r3, #7
 80167ba:	d124      	bne.n	8016806 <coap_network_read+0x172>
          packet->ifindex = (int)(u.p->ipi6_ifindex);
 80167bc:	69eb      	ldr	r3, [r5, #28]
 80167be:	6423      	str	r3, [r4, #64]	; 0x40
          memcpy(&packet->dst.addr.sin6.sin6_addr, &u.p->ipi6_addr, sizeof(struct in6_addr));
 80167c0:	f105 030c 	add.w	r3, r5, #12
 80167c4:	342c      	adds	r4, #44	; 0x2c
 80167c6:	351c      	adds	r5, #28
 80167c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80167cc:	f844 2b04 	str.w	r2, [r4], #4
 80167d0:	42ab      	cmp	r3, r5
 80167d2:	d1f9      	bne.n	80167c8 <coap_network_read+0x134>
 80167d4:	e776      	b.n	80166c4 <coap_network_read+0x30>
        if (cmsg->cmsg_level == SOL_IP && cmsg->cmsg_type == IP_PKTINFO) {
 80167d6:	b9a3      	cbnz	r3, 8016802 <coap_network_read+0x16e>
 80167d8:	68aa      	ldr	r2, [r5, #8]
 80167da:	2a08      	cmp	r2, #8
 80167dc:	d113      	bne.n	8016806 <coap_network_read+0x172>
          packet->ifindex = u.p->ipi_ifindex;
 80167de:	68ea      	ldr	r2, [r5, #12]
 80167e0:	6422      	str	r2, [r4, #64]	; 0x40
          if (packet->dst.addr.sa.sa_family == AF_INET6) {
 80167e2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80167e6:	2a0a      	cmp	r2, #10
 80167e8:	d108      	bne.n	80167fc <coap_network_read+0x168>
            memset(packet->dst.addr.sin6.sin6_addr.s6_addr, 0, 10);
 80167ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80167ec:	6323      	str	r3, [r4, #48]	; 0x30
 80167ee:	86a3      	strh	r3, [r4, #52]	; 0x34
            packet->dst.addr.sin6.sin6_addr.s6_addr[10] = 0xff;
 80167f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167f4:	86e3      	strh	r3, [r4, #54]	; 0x36
            memcpy(packet->dst.addr.sin6.sin6_addr.s6_addr + 12, &u.p->ipi_addr, sizeof(struct in_addr));
 80167f6:	692b      	ldr	r3, [r5, #16]
 80167f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80167fa:	e763      	b.n	80166c4 <coap_network_read+0x30>
            memcpy(&packet->dst.addr.sin.sin_addr, &u.p->ipi_addr, sizeof(struct in_addr));
 80167fc:	692b      	ldr	r3, [r5, #16]
 80167fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8016800:	e760      	b.n	80166c4 <coap_network_read+0x30>
          if (cmsg->cmsg_level != -1 && cmsg->cmsg_type != -1) {
 8016802:	3301      	adds	r3, #1
 8016804:	d00c      	beq.n	8016820 <coap_network_read+0x18c>
 8016806:	68ab      	ldr	r3, [r5, #8]
 8016808:	3301      	adds	r3, #1
 801680a:	d009      	beq.n	8016820 <coap_network_read+0x18c>
            coap_log(LOG_DEBUG,
 801680c:	f7fe fbea 	bl	8014fe4 <coap_get_log_level>
 8016810:	2806      	cmp	r0, #6
 8016812:	d905      	bls.n	8016820 <coap_network_read+0x18c>
 8016814:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8016818:	4641      	mov	r1, r8
 801681a:	2007      	movs	r0, #7
 801681c:	f7fe fc4c 	bl	80150b8 <coap_log_impl>
      for (cmsg = CMSG_FIRSTHDR(&mhdr); cmsg; cmsg = CMSG_NXTHDR(&mhdr, cmsg)) {
 8016820:	682b      	ldr	r3, [r5, #0]
 8016822:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8016826:	3303      	adds	r3, #3
 8016828:	f023 0303 	bic.w	r3, r3, #3
 801682c:	f103 000c 	add.w	r0, r3, #12
 8016830:	4428      	add	r0, r5
 8016832:	440a      	add	r2, r1
 8016834:	4290      	cmp	r0, r2
 8016836:	d8a3      	bhi.n	8016780 <coap_network_read+0xec>
 8016838:	441d      	add	r5, r3
 801683a:	e7b7      	b.n	80167ac <coap_network_read+0x118>
 801683c:	0802fe7e 	.word	0x0802fe7e
 8016840:	0802aa62 	.word	0x0802aa62
 8016844:	0802fdfd 	.word	0x0802fdfd
 8016848:	0802fe83 	.word	0x0802fe83
 801684c:	0802fe8a 	.word	0x0802fe8a
 8016850:	0802feaa 	.word	0x0802feaa
 8016854:	0802fef9 	.word	0x0802fef9
 8016858:	0802fec1 	.word	0x0802fec1

0801685c <coap_run_once>:
coap_run_once(coap_context_t *ctx, unsigned timeout_ms) {
 801685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016860:	ed2d 8b02 	vpush	{d8}
 8016864:	b0d3      	sub	sp, #332	; 0x14c
  unsigned int num_sockets = 0, i, timeout;
 8016866:	2300      	movs	r3, #0
coap_run_once(coap_context_t *ctx, unsigned timeout_ms) {
 8016868:	ee08 0a10 	vmov	s16, r0
  coap_ticks(&before);
 801686c:	a804      	add	r0, sp, #16
coap_run_once(coap_context_t *ctx, unsigned timeout_ms) {
 801686e:	460c      	mov	r4, r1
  unsigned int num_sockets = 0, i, timeout;
 8016870:	9303      	str	r3, [sp, #12]
  coap_ticks(&before);
 8016872:	f001 f8b5 	bl	80179e0 <coap_ticks>
  timeout = coap_write(ctx, sockets, (unsigned int)(sizeof(sockets) / sizeof(sockets[0])), &num_sockets, before);
 8016876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801687a:	af12      	add	r7, sp, #72	; 0x48
 801687c:	e9cd 2300 	strd	r2, r3, [sp]
 8016880:	ee18 0a10 	vmov	r0, s16
 8016884:	ab03      	add	r3, sp, #12
 8016886:	2240      	movs	r2, #64	; 0x40
 8016888:	4639      	mov	r1, r7
 801688a:	f7ff f80b 	bl	80158a4 <coap_write>
  if (timeout == 0 || timeout_ms < timeout)
 801688e:	b110      	cbz	r0, 8016896 <coap_run_once+0x3a>
 8016890:	4284      	cmp	r4, r0
 8016892:	bf28      	it	cs
 8016894:	4604      	movcs	r4, r0
  FD_ZERO(&readfds);
 8016896:	aa08      	add	r2, sp, #32
 8016898:	2300      	movs	r3, #0
 801689a:	4615      	mov	r5, r2
 801689c:	4619      	mov	r1, r3
 801689e:	3301      	adds	r3, #1
 80168a0:	2b08      	cmp	r3, #8
 80168a2:	f802 1b01 	strb.w	r1, [r2], #1
 80168a6:	d1fa      	bne.n	801689e <coap_run_once+0x42>
  FD_ZERO(&writefds);
 80168a8:	2300      	movs	r3, #0
 80168aa:	aa0a      	add	r2, sp, #40	; 0x28
 80168ac:	4619      	mov	r1, r3
 80168ae:	3301      	adds	r3, #1
 80168b0:	2b08      	cmp	r3, #8
 80168b2:	f802 1b01 	strb.w	r1, [r2], #1
 80168b6:	d1fa      	bne.n	80168ae <coap_run_once+0x52>
  FD_ZERO(&exceptfds);
 80168b8:	2300      	movs	r3, #0
 80168ba:	aa0c      	add	r2, sp, #48	; 0x30
 80168bc:	4619      	mov	r1, r3
 80168be:	3301      	adds	r3, #1
 80168c0:	2b08      	cmp	r3, #8
 80168c2:	f802 1b01 	strb.w	r1, [r2], #1
 80168c6:	d1fa      	bne.n	80168be <coap_run_once+0x62>
  for (i = 0; i < num_sockets; i++) {
 80168c8:	2300      	movs	r3, #0
 80168ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
  coap_fd_t nfds = 0;
 80168ce:	4618      	mov	r0, r3
      FD_SET(sockets[i]->fd, &readfds);
 80168d0:	2201      	movs	r2, #1
      FD_SET(sockets[i]->fd, &writefds);
 80168d2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
      FD_SET(sockets[i]->fd, &exceptfds);
 80168d6:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
  for (i = 0; i < num_sockets; i++) {
 80168da:	459b      	cmp	fp, r3
 80168dc:	d13d      	bne.n	801695a <coap_run_once+0xfe>
  if ( timeout > 0 ) {
 80168de:	b15c      	cbz	r4, 80168f8 <coap_run_once+0x9c>
    tv.tv_usec = (timeout % 1000) * 1000;
 80168e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80168e4:	fbb4 f2f3 	udiv	r2, r4, r3
 80168e8:	fb03 4412 	mls	r4, r3, r2, r4
 80168ec:	4363      	muls	r3, r4
 80168ee:	9310      	str	r3, [sp, #64]	; 0x40
    tv.tv_sec = (long)(timeout / 1000);
 80168f0:	2300      	movs	r3, #0
 80168f2:	920e      	str	r2, [sp, #56]	; 0x38
 80168f4:	930f      	str	r3, [sp, #60]	; 0x3c
  result = select(nfds, &readfds, &writefds, &exceptfds, timeout > 0 ? &tv : NULL);
 80168f6:	ac0e      	add	r4, sp, #56	; 0x38
 80168f8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80168fc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8016900:	9400      	str	r4, [sp, #0]
 8016902:	464b      	mov	r3, r9
 8016904:	4642      	mov	r2, r8
 8016906:	4629      	mov	r1, r5
 8016908:	f7f1 fc56 	bl	80081b8 <lwip_select>
  if (result < 0) {   /* error */
 801690c:	2800      	cmp	r0, #0
 801690e:	da7f      	bge.n	8016a10 <coap_run_once+0x1b4>
    if (errno != EINTR) {
 8016910:	f005 f8d6 	bl	801bac0 <__errno>
 8016914:	6803      	ldr	r3, [r0, #0]
 8016916:	2b04      	cmp	r3, #4
 8016918:	d16c      	bne.n	80169f4 <coap_run_once+0x198>
  coap_ticks(&now);
 801691a:	a806      	add	r0, sp, #24
 801691c:	f001 f860 	bl	80179e0 <coap_ticks>
  coap_read(ctx, now);
 8016920:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016924:	ee18 0a10 	vmov	r0, s16
 8016928:	f002 fe88 	bl	801963c <coap_read>
  return (int)(((now - before) * 1000) / COAP_TICKS_PER_SECOND);
 801692c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016930:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8016934:	1a80      	subs	r0, r0, r2
 8016936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801693a:	eb63 0301 	sbc.w	r3, r3, r1
 801693e:	fba0 0102 	umull	r0, r1, r0, r2
 8016942:	fb02 1103 	mla	r1, r2, r3, r1
 8016946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801694a:	2300      	movs	r3, #0
 801694c:	f7e9 ffd8 	bl	8000900 <__aeabi_uldivmod>
}
 8016950:	b053      	add	sp, #332	; 0x14c
 8016952:	ecbd 8b02 	vpop	{d8}
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sockets[i]->fd + 1 > nfds)
 801695a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
 801695e:	f8d8 1000 	ldr.w	r1, [r8]
    if (sockets[i]->flags & COAP_SOCKET_WANT_READ)
 8016962:	f8b8 8004 	ldrh.w	r8, [r8, #4]
    if (sockets[i]->fd + 1 > nfds)
 8016966:	4281      	cmp	r1, r0
      nfds = sockets[i]->fd + 1;
 8016968:	bfa8      	it	ge
 801696a:	1c48      	addge	r0, r1, #1
    if (sockets[i]->flags & COAP_SOCKET_WANT_READ)
 801696c:	f018 0f10 	tst.w	r8, #16
 8016970:	d00b      	beq.n	801698a <coap_run_once+0x12e>
      FD_SET(sockets[i]->fd, &readfds);
 8016972:	ea4f 1a51 	mov.w	sl, r1, lsr #5
 8016976:	f001 091f 	and.w	r9, r1, #31
 801697a:	f855 602a 	ldr.w	r6, [r5, sl, lsl #2]
 801697e:	fa02 f909 	lsl.w	r9, r2, r9
 8016982:	ea49 0906 	orr.w	r9, r9, r6
 8016986:	f845 902a 	str.w	r9, [r5, sl, lsl #2]
    if (sockets[i]->flags & COAP_SOCKET_WANT_WRITE)
 801698a:	f018 0f20 	tst.w	r8, #32
 801698e:	d00b      	beq.n	80169a8 <coap_run_once+0x14c>
      FD_SET(sockets[i]->fd, &writefds);
 8016990:	ea4f 1a51 	mov.w	sl, r1, lsr #5
 8016994:	f001 091f 	and.w	r9, r1, #31
 8016998:	f85c 602a 	ldr.w	r6, [ip, sl, lsl #2]
 801699c:	fa02 f909 	lsl.w	r9, r2, r9
 80169a0:	ea49 0906 	orr.w	r9, r9, r6
 80169a4:	f84c 902a 	str.w	r9, [ip, sl, lsl #2]
    if (sockets[i]->flags & COAP_SOCKET_WANT_ACCEPT)
 80169a8:	f018 0f40 	tst.w	r8, #64	; 0x40
 80169ac:	d00b      	beq.n	80169c6 <coap_run_once+0x16a>
      FD_SET(sockets[i]->fd, &readfds);
 80169ae:	ea4f 1a51 	mov.w	sl, r1, lsr #5
 80169b2:	f001 091f 	and.w	r9, r1, #31
 80169b6:	f855 602a 	ldr.w	r6, [r5, sl, lsl #2]
 80169ba:	fa02 f909 	lsl.w	r9, r2, r9
 80169be:	ea49 0906 	orr.w	r9, r9, r6
 80169c2:	f845 902a 	str.w	r9, [r5, sl, lsl #2]
    if (sockets[i]->flags & COAP_SOCKET_WANT_CONNECT) {
 80169c6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80169ca:	d011      	beq.n	80169f0 <coap_run_once+0x194>
      FD_SET(sockets[i]->fd, &writefds);
 80169cc:	ea4f 1851 	mov.w	r8, r1, lsr #5
 80169d0:	f001 011f 	and.w	r1, r1, #31
 80169d4:	fa02 f901 	lsl.w	r9, r2, r1
 80169d8:	f85c 1028 	ldr.w	r1, [ip, r8, lsl #2]
 80169dc:	ea41 0109 	orr.w	r1, r1, r9
 80169e0:	f84c 1028 	str.w	r1, [ip, r8, lsl #2]
      FD_SET(sockets[i]->fd, &exceptfds);
 80169e4:	f85e 1028 	ldr.w	r1, [lr, r8, lsl #2]
 80169e8:	ea41 0109 	orr.w	r1, r1, r9
 80169ec:	f84e 1028 	str.w	r1, [lr, r8, lsl #2]
  for (i = 0; i < num_sockets; i++) {
 80169f0:	3301      	adds	r3, #1
 80169f2:	e772      	b.n	80168da <coap_run_once+0x7e>
      coap_log(LOG_DEBUG, "%s", coap_socket_strerror());
 80169f4:	f7fe faf6 	bl	8014fe4 <coap_get_log_level>
 80169f8:	2806      	cmp	r0, #6
 80169fa:	d906      	bls.n	8016a0a <coap_run_once+0x1ae>
 80169fc:	f7ff f9be 	bl	8015d7c <coap_socket_strerror>
 8016a00:	4930      	ldr	r1, [pc, #192]	; (8016ac4 <coap_run_once+0x268>)
 8016a02:	4602      	mov	r2, r0
 8016a04:	2007      	movs	r0, #7
 8016a06:	f7fe fb57 	bl	80150b8 <coap_log_impl>
      return -1;
 8016a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0e:	e79f      	b.n	8016950 <coap_run_once+0xf4>
  if (result > 0) {
 8016a10:	d083      	beq.n	801691a <coap_run_once+0xbe>
    for (i = 0; i < num_sockets; i++) {
 8016a12:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016a16:	2200      	movs	r2, #0
      if ((sockets[i]->flags & COAP_SOCKET_WANT_READ) && FD_ISSET(sockets[i]->fd, &readfds))
 8016a18:	2401      	movs	r4, #1
    for (i = 0; i < num_sockets; i++) {
 8016a1a:	4592      	cmp	sl, r2
 8016a1c:	f43f af7d 	beq.w	801691a <coap_run_once+0xbe>
      if ((sockets[i]->flags & COAP_SOCKET_WANT_READ) && FD_ISSET(sockets[i]->fd, &readfds))
 8016a20:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 8016a24:	8888      	ldrh	r0, [r1, #4]
 8016a26:	06c3      	lsls	r3, r0, #27
 8016a28:	d50e      	bpl.n	8016a48 <coap_run_once+0x1ec>
 8016a2a:	680b      	ldr	r3, [r1, #0]
 8016a2c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8016a30:	f003 031f 	and.w	r3, r3, #31
 8016a34:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8016a38:	fa04 f303 	lsl.w	r3, r4, r3
 8016a3c:	ea13 0f0c 	tst.w	r3, ip
        sockets[i]->flags |= COAP_SOCKET_CAN_READ;
 8016a40:	bf1c      	itt	ne
 8016a42:	f440 7080 	orrne.w	r0, r0, #256	; 0x100
 8016a46:	8088      	strhne	r0, [r1, #4]
      if ((sockets[i]->flags & COAP_SOCKET_WANT_ACCEPT) && FD_ISSET(sockets[i]->fd, &readfds))
 8016a48:	8888      	ldrh	r0, [r1, #4]
 8016a4a:	0646      	lsls	r6, r0, #25
 8016a4c:	d50e      	bpl.n	8016a6c <coap_run_once+0x210>
 8016a4e:	680b      	ldr	r3, [r1, #0]
 8016a50:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8016a54:	f003 031f 	and.w	r3, r3, #31
 8016a58:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8016a5c:	fa04 f303 	lsl.w	r3, r4, r3
 8016a60:	ea13 0f0c 	tst.w	r3, ip
        sockets[i]->flags |= COAP_SOCKET_CAN_ACCEPT;
 8016a64:	bf1c      	itt	ne
 8016a66:	f440 6080 	orrne.w	r0, r0, #1024	; 0x400
 8016a6a:	8088      	strhne	r0, [r1, #4]
      if ((sockets[i]->flags & COAP_SOCKET_WANT_WRITE) && FD_ISSET(sockets[i]->fd, &writefds))
 8016a6c:	8888      	ldrh	r0, [r1, #4]
 8016a6e:	0683      	lsls	r3, r0, #26
 8016a70:	d50e      	bpl.n	8016a90 <coap_run_once+0x234>
 8016a72:	680b      	ldr	r3, [r1, #0]
 8016a74:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8016a78:	f003 031f 	and.w	r3, r3, #31
 8016a7c:	f858 c02c 	ldr.w	ip, [r8, ip, lsl #2]
 8016a80:	fa04 f303 	lsl.w	r3, r4, r3
 8016a84:	ea13 0f0c 	tst.w	r3, ip
        sockets[i]->flags |= COAP_SOCKET_CAN_WRITE;
 8016a88:	bf1c      	itt	ne
 8016a8a:	f440 7000 	orrne.w	r0, r0, #512	; 0x200
 8016a8e:	8088      	strhne	r0, [r1, #4]
      if ((sockets[i]->flags & COAP_SOCKET_WANT_CONNECT) && (FD_ISSET(sockets[i]->fd, &writefds) || FD_ISSET(sockets[i]->fd, &exceptfds)))
 8016a90:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8016a94:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8016a98:	d012      	beq.n	8016ac0 <coap_run_once+0x264>
 8016a9a:	6808      	ldr	r0, [r1, #0]
 8016a9c:	ea4f 1e50 	mov.w	lr, r0, lsr #5
 8016aa0:	f000 001f 	and.w	r0, r0, #31
 8016aa4:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
 8016aa8:	fa04 f000 	lsl.w	r0, r4, r0
 8016aac:	4218      	tst	r0, r3
 8016aae:	d103      	bne.n	8016ab8 <coap_run_once+0x25c>
 8016ab0:	f859 302e 	ldr.w	r3, [r9, lr, lsl #2]
 8016ab4:	4218      	tst	r0, r3
 8016ab6:	d003      	beq.n	8016ac0 <coap_run_once+0x264>
        sockets[i]->flags |= COAP_SOCKET_CAN_CONNECT;
 8016ab8:	f44c 6c00 	orr.w	ip, ip, #2048	; 0x800
 8016abc:	f8a1 c004 	strh.w	ip, [r1, #4]
    for (i = 0; i < num_sockets; i++) {
 8016ac0:	3201      	adds	r2, #1
 8016ac2:	e7aa      	b.n	8016a1a <coap_run_once+0x1be>
 8016ac4:	0802f0ef 	.word	0x0802f0ef

08016ac8 <coap_socket_send>:
#endif

ssize_t
coap_socket_send(coap_socket_t *sock, coap_session_t *session,
  const uint8_t *data, size_t data_len) {
 8016ac8:	b410      	push	{r4}
  return session->context->network_send(sock, session, data, data_len);
 8016aca:	f8d1 4084 	ldr.w	r4, [r1, #132]	; 0x84
 8016ace:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8016ad0:	46a4      	mov	ip, r4
}
 8016ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return session->context->network_send(sock, session, data, data_len);
 8016ad6:	4760      	bx	ip

08016ad8 <coap_dtls_is_supported>:
#endif /* __GNUC__ */

int
coap_dtls_is_supported(void) {
  return 0;
}
 8016ad8:	2000      	movs	r0, #0
 8016ada:	4770      	bx	lr

08016adc <coap_tls_is_supported>:
 8016adc:	2000      	movs	r0, #0
 8016ade:	4770      	bx	lr

08016ae0 <coap_dtls_context_check_keys_enabled>:

int
coap_dtls_context_check_keys_enabled(coap_context_t *ctx UNUSED)
{
  return 0;
}
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	4770      	bx	lr

08016ae4 <coap_dtls_startup>:

static int dtls_log_level = 0;

void coap_dtls_startup(void) {
}
 8016ae4:	4770      	bx	lr

08016ae6 <coap_dtls_new_context>:
}

void *
coap_dtls_new_context(struct coap_context_t *coap_context UNUSED) {
  return NULL;
}
 8016ae6:	2000      	movs	r0, #0
 8016ae8:	4770      	bx	lr

08016aea <coap_dtls_free_context>:

void
coap_dtls_free_context(void *handle UNUSED) {
}
 8016aea:	4770      	bx	lr

08016aec <coap_dtls_new_server_session>:
 8016aec:	2000      	movs	r0, #0
 8016aee:	4770      	bx	lr

08016af0 <coap_dtls_new_client_session>:
 8016af0:	2000      	movs	r0, #0
 8016af2:	4770      	bx	lr

08016af4 <coap_dtls_free_session>:
 8016af4:	4770      	bx	lr

08016af6 <coap_dtls_send>:
coap_dtls_send(coap_session_t *session UNUSED,
  const uint8_t *data UNUSED,
  size_t data_len UNUSED
) {
  return -1;
}
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295
 8016afa:	4770      	bx	lr

08016afc <coap_dtls_is_context_timeout>:

int coap_dtls_is_context_timeout(void) {
  return 1;
}
 8016afc:	2001      	movs	r0, #1
 8016afe:	4770      	bx	lr

08016b00 <coap_dtls_get_context_timeout>:

coap_tick_t coap_dtls_get_context_timeout(void *dtls_context UNUSED) {
  return 0;
}
 8016b00:	2000      	movs	r0, #0
 8016b02:	2100      	movs	r1, #0
 8016b04:	4770      	bx	lr

08016b06 <coap_dtls_get_timeout>:

coap_tick_t
coap_dtls_get_timeout(coap_session_t *session UNUSED, coap_tick_t now UNUSED) {
  return 0;
}
 8016b06:	2000      	movs	r0, #0
 8016b08:	2100      	movs	r1, #0
 8016b0a:	4770      	bx	lr

08016b0c <coap_dtls_handle_timeout>:
 8016b0c:	4770      	bx	lr

08016b0e <coap_dtls_receive>:
 8016b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8016b12:	4770      	bx	lr

08016b14 <coap_dtls_hello>:
coap_dtls_hello(coap_session_t *session UNUSED,
  const uint8_t *data UNUSED,
  size_t data_len UNUSED
) {
  return 0;
}
 8016b14:	2000      	movs	r0, #0
 8016b16:	4770      	bx	lr

08016b18 <coap_dtls_get_overhead>:

unsigned int coap_dtls_get_overhead(coap_session_t *session UNUSED) {
  return 0;
}
 8016b18:	2000      	movs	r0, #0
 8016b1a:	4770      	bx	lr

08016b1c <coap_tls_new_client_session>:

void *coap_tls_new_client_session(coap_session_t *session UNUSED, int *connected UNUSED) {
  return NULL;
}
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	4770      	bx	lr

08016b20 <coap_tls_new_server_session>:
 8016b20:	2000      	movs	r0, #0
 8016b22:	4770      	bx	lr

08016b24 <coap_tls_free_session>:
 8016b24:	4770      	bx	lr

08016b26 <coap_tls_write>:
 8016b26:	f04f 30ff 	mov.w	r0, #4294967295
 8016b2a:	4770      	bx	lr

08016b2c <coap_tls_read>:
 8016b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b30:	4770      	bx	lr

08016b32 <coap_address_init>:
coap_address_init(coap_address_t *addr) {
 8016b32:	b538      	push	{r3, r4, r5, lr}
 8016b34:	4604      	mov	r4, r0
  memset(addr, 0, sizeof(coap_address_t));
 8016b36:	251c      	movs	r5, #28
 8016b38:	462a      	mov	r2, r5
 8016b3a:	2100      	movs	r1, #0
 8016b3c:	3004      	adds	r0, #4
 8016b3e:	f005 fba7 	bl	801c290 <memset>
  addr->size = sizeof(addr->addr);
 8016b42:	6025      	str	r5, [r4, #0]
}
 8016b44:	bd38      	pop	{r3, r4, r5, pc}

08016b46 <coap_address_copy>:
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 8016b46:	b570      	push	{r4, r5, r6, lr}
 8016b48:	460d      	mov	r5, r1
  memset( dst, 0, sizeof( coap_address_t ) );
 8016b4a:	2220      	movs	r2, #32
 8016b4c:	2100      	movs	r1, #0
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 8016b4e:	4604      	mov	r4, r0
  memset( dst, 0, sizeof( coap_address_t ) );
 8016b50:	f005 fb9e 	bl	801c290 <memset>
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 8016b54:	796b      	ldrb	r3, [r5, #5]
  dst->size = src->size;
 8016b56:	682a      	ldr	r2, [r5, #0]
 8016b58:	6022      	str	r2, [r4, #0]
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 8016b5a:	2b0a      	cmp	r3, #10
 8016b5c:	d10c      	bne.n	8016b78 <coap_address_copy+0x32>
    dst->addr.sin6.sin6_family = src->addr.sin6.sin6_family;
 8016b5e:	7163      	strb	r3, [r4, #5]
    dst->addr.sin6.sin6_addr = src->addr.sin6.sin6_addr;
 8016b60:	f105 030c 	add.w	r3, r5, #12
 8016b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b66:	f104 060c 	add.w	r6, r4, #12
 8016b6a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    dst->addr.sin6.sin6_port = src->addr.sin6.sin6_port;
 8016b6e:	88eb      	ldrh	r3, [r5, #6]
 8016b70:	80e3      	strh	r3, [r4, #6]
    dst->addr.sin6.sin6_scope_id = src->addr.sin6.sin6_scope_id;
 8016b72:	69eb      	ldr	r3, [r5, #28]
 8016b74:	61e3      	str	r3, [r4, #28]
}
 8016b76:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( src->addr.sa.sa_family == AF_INET ) {
 8016b78:	2b02      	cmp	r3, #2
 8016b7a:	f104 0404 	add.w	r4, r4, #4
 8016b7e:	f105 0104 	add.w	r1, r5, #4
 8016b82:	d103      	bne.n	8016b8c <coap_address_copy+0x46>
    dst->addr.sin = src->addr.sin;
 8016b84:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8016b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016b8a:	e7f4      	b.n	8016b76 <coap_address_copy+0x30>
    memcpy( &dst->addr, &src->addr, src->size );
 8016b8c:	4620      	mov	r0, r4
}
 8016b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy( &dst->addr, &src->addr, src->size );
 8016b92:	f005 bb55 	b.w	801c240 <memcpy>
	...

08016b98 <coap_make_session>:

static coap_session_t *
coap_make_session(coap_proto_t proto, coap_session_type_t type,
  const coap_address_t *local_if, const coap_address_t *local_addr,
  const coap_address_t *remote_addr, int ifindex, coap_context_t *context,
  coap_endpoint_t *endpoint) {
 8016b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b9c:	4605      	mov	r5, r0
 8016b9e:	4689      	mov	r9, r1
  coap_session_t *session = (coap_session_t*)coap_malloc_type(COAP_SESSION, sizeof(coap_session_t));
 8016ba0:	200b      	movs	r0, #11
 8016ba2:	21f8      	movs	r1, #248	; 0xf8
  coap_endpoint_t *endpoint) {
 8016ba4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016ba8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8016bac:	4617      	mov	r7, r2
 8016bae:	461e      	mov	r6, r3
  coap_session_t *session = (coap_session_t*)coap_malloc_type(COAP_SESSION, sizeof(coap_session_t));
 8016bb0:	f000 ffa8 	bl	8017b04 <coap_malloc_type>
  if (!session)
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d040      	beq.n	8016c3c <coap_make_session+0xa4>
    return NULL;
  memset(session, 0, sizeof(*session));
 8016bba:	22f8      	movs	r2, #248	; 0xf8
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	f005 fb67 	bl	801c290 <memset>
  session->proto = proto;
 8016bc2:	7125      	strb	r5, [r4, #4]
  session->type = type;
 8016bc4:	f884 9005 	strb.w	r9, [r4, #5]
  if (local_if)
 8016bc8:	f104 0014 	add.w	r0, r4, #20
 8016bcc:	2f00      	cmp	r7, #0
 8016bce:	d038      	beq.n	8016c42 <coap_make_session+0xaa>
    coap_address_copy(&session->local_if, local_if);
 8016bd0:	4639      	mov	r1, r7
 8016bd2:	f7ff ffb8 	bl	8016b46 <coap_address_copy>
  else
    coap_address_init(&session->local_if);
  if (local_addr)
 8016bd6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016bda:	b3ae      	cbz	r6, 8016c48 <coap_make_session+0xb0>
    coap_address_copy(&session->local_addr, local_addr);
 8016bdc:	4631      	mov	r1, r6
 8016bde:	f7ff ffb2 	bl	8016b46 <coap_address_copy>
  else
    coap_address_init(&session->local_addr);
  if (remote_addr)
 8016be2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016be6:	f1ba 0f00 	cmp.w	sl, #0
 8016bea:	d030      	beq.n	8016c4e <coap_make_session+0xb6>
    coap_address_copy(&session->remote_addr, remote_addr);
 8016bec:	4651      	mov	r1, sl
 8016bee:	f7ff ffaa 	bl	8016b46 <coap_address_copy>
  else
    coap_address_init(&session->remote_addr);
  session->ifindex = ifindex;
 8016bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bf4:	6763      	str	r3, [r4, #116]	; 0x74
  session->context = context;
 8016bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  session->endpoint = endpoint;
 8016bf8:	e9c4 8320 	strd	r8, r3, [r4, #128]	; 0x80
  if (endpoint)
 8016bfc:	f1b8 0f00 	cmp.w	r8, #0
 8016c00:	d028      	beq.n	8016c54 <coap_make_session+0xbc>
    session->mtu = endpoint->default_mtu;
 8016c02:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8016c06:	6123      	str	r3, [r4, #16]
  else
    session->mtu = COAP_DEFAULT_MTU;
  if (proto == COAP_PROTO_DTLS) {
 8016c08:	2d02      	cmp	r5, #2
 8016c0a:	d103      	bne.n	8016c14 <coap_make_session+0x7c>
    session->tls_overhead = 29;
    if (session->tls_overhead >= session->mtu) {
 8016c0c:	2b1d      	cmp	r3, #29
 8016c0e:	d924      	bls.n	8016c5a <coap_make_session+0xc2>
    session->tls_overhead = 29;
 8016c10:	231d      	movs	r3, #29
 8016c12:	60e3      	str	r3, [r4, #12]
      session->tls_overhead = session->mtu;
      coap_log(LOG_ERR, "DTLS overhead exceeds MTU\n");
    }
  }
  session->max_retransmit = COAP_DEFAULT_MAX_RETRANSMIT;
  session->ack_timeout = COAP_DEFAULT_ACK_TIMEOUT;
 8016c14:	2204      	movs	r2, #4
 8016c16:	2302      	movs	r3, #2
 8016c18:	e9c4 2339 	strd	r2, r3, [r4, #228]	; 0xe4
  session->ack_random_factor = COAP_DEFAULT_ACK_RANDOM_FACTOR;
 8016c1c:	4b14      	ldr	r3, [pc, #80]	; (8016c70 <coap_make_session+0xd8>)
 8016c1e:	6818      	ldr	r0, [r3, #0]
 8016c20:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
  session->dtls_event = -1;
 8016c24:	f04f 33ff 	mov.w	r3, #4294967295
 8016c28:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8016c2c:	f005 ffc2 	bl	801cbb4 <rand>
 8016c30:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
 8016c34:	f005 ffbe 	bl	801cbb4 <rand>
 8016c38:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d

  /* initialize message id */
  prng((unsigned char *)&session->tx_mid, sizeof(session->tx_mid));

  return session;
}
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    coap_address_init(&session->local_if);
 8016c42:	f7ff ff76 	bl	8016b32 <coap_address_init>
 8016c46:	e7c6      	b.n	8016bd6 <coap_make_session+0x3e>
    coap_address_init(&session->local_addr);
 8016c48:	f7ff ff73 	bl	8016b32 <coap_address_init>
 8016c4c:	e7c9      	b.n	8016be2 <coap_make_session+0x4a>
    coap_address_init(&session->remote_addr);
 8016c4e:	f7ff ff70 	bl	8016b32 <coap_address_init>
 8016c52:	e7ce      	b.n	8016bf2 <coap_make_session+0x5a>
    session->mtu = COAP_DEFAULT_MTU;
 8016c54:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8016c58:	e7d5      	b.n	8016c06 <coap_make_session+0x6e>
      session->tls_overhead = session->mtu;
 8016c5a:	60e3      	str	r3, [r4, #12]
      coap_log(LOG_ERR, "DTLS overhead exceeds MTU\n");
 8016c5c:	f7fe f9c2 	bl	8014fe4 <coap_get_log_level>
 8016c60:	2802      	cmp	r0, #2
 8016c62:	d9d7      	bls.n	8016c14 <coap_make_session+0x7c>
 8016c64:	4903      	ldr	r1, [pc, #12]	; (8016c74 <coap_make_session+0xdc>)
 8016c66:	2003      	movs	r0, #3
 8016c68:	f7fe fa26 	bl	80150b8 <coap_log_impl>
 8016c6c:	e7d2      	b.n	8016c14 <coap_make_session+0x7c>
 8016c6e:	bf00      	nop
 8016c70:	0802aa74 	.word	0x0802aa74
 8016c74:	0802ff16 	.word	0x0802ff16

08016c78 <coap_session_reference>:
  ++session->ref;
 8016c78:	6882      	ldr	r2, [r0, #8]
 8016c7a:	3201      	adds	r2, #1
 8016c7c:	6082      	str	r2, [r0, #8]
}
 8016c7e:	4770      	bx	lr

08016c80 <coap_session_mfree>:

void coap_session_mfree(coap_session_t *session) {
 8016c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c82:	4604      	mov	r4, r0
  coap_queue_t *q, *tmp;

  if (session->partial_pdu)
 8016c84:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8016c88:	b108      	cbz	r0, 8016c8e <coap_session_mfree+0xe>
    coap_delete_pdu(session->partial_pdu);
 8016c8a:	f003 f900 	bl	8019e8e <coap_delete_pdu>
  if (session->proto == COAP_PROTO_DTLS)
 8016c8e:	7923      	ldrb	r3, [r4, #4]
 8016c90:	2b02      	cmp	r3, #2
 8016c92:	d12f      	bne.n	8016cf4 <coap_session_mfree+0x74>
    coap_dtls_free_session(session);
 8016c94:	4620      	mov	r0, r4
 8016c96:	f7ff ff2d 	bl	8016af4 <coap_dtls_free_session>
  else if (session->proto == COAP_PROTO_TLS)
    coap_tls_free_session(session);
  if (session->sock.flags != COAP_SOCKET_EMPTY)
 8016c9a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8016c9e:	b11b      	cbz	r3, 8016ca8 <coap_session_mfree+0x28>
    coap_socket_close(&session->sock);
 8016ca0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016ca4:	f7fe fdeb 	bl	801587e <coap_socket_close>
  if (session->psk_identity)
 8016ca8:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8016cac:	b111      	cbz	r1, 8016cb4 <coap_session_mfree+0x34>

/**
 * Wrapper function to coap_free_type() for backwards compatibility.
 */
COAP_STATIC_INLINE void coap_free(void *object) {
  coap_free_type(COAP_STRING, object);
 8016cae:	2000      	movs	r0, #0
 8016cb0:	f000 ff2b 	bl	8017b0a <coap_free_type>
    coap_free(session->psk_identity);
  if (session->psk_key)
 8016cb4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8016cb8:	b111      	cbz	r1, 8016cc0 <coap_session_mfree+0x40>
 8016cba:	2000      	movs	r0, #0
 8016cbc:	f000 ff25 	bl	8017b0a <coap_free_type>
    coap_free(session->psk_key);

  LL_FOREACH_SAFE(session->delayqueue, q, tmp) {
 8016cc0:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8016cc4:	b1e5      	cbz	r5, 8016d00 <coap_session_mfree+0x80>
    if (q->pdu->type==COAP_MESSAGE_CON && session->context && session->context->nack_handler)
 8016cc6:	6a2a      	ldr	r2, [r5, #32]
  LL_FOREACH_SAFE(session->delayqueue, q, tmp) {
 8016cc8:	682f      	ldr	r7, [r5, #0]
    if (q->pdu->type==COAP_MESSAGE_CON && session->context && session->context->nack_handler)
 8016cca:	7813      	ldrb	r3, [r2, #0]
 8016ccc:	b96b      	cbnz	r3, 8016cea <coap_session_mfree+0x6a>
 8016cce:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8016cd2:	b150      	cbz	r0, 8016cea <coap_session_mfree+0x6a>
 8016cd4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016cd6:	b146      	cbz	r6, 8016cea <coap_session_mfree+0x6a>
      session->context->nack_handler(session->context, session, q->pdu, session->proto == COAP_PROTO_DTLS ? COAP_NACK_TLS_FAILED : COAP_NACK_NOT_DELIVERABLE, q->id);
 8016cd8:	7923      	ldrb	r3, [r4, #4]
 8016cda:	2b02      	cmp	r3, #2
 8016cdc:	69eb      	ldr	r3, [r5, #28]
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	4621      	mov	r1, r4
 8016ce2:	bf0c      	ite	eq
 8016ce4:	2303      	moveq	r3, #3
 8016ce6:	2301      	movne	r3, #1
 8016ce8:	47b0      	blx	r6
    coap_delete_node(q);
 8016cea:	4628      	mov	r0, r5
 8016cec:	f001 f811 	bl	8017d12 <coap_delete_node>
  LL_FOREACH_SAFE(session->delayqueue, q, tmp) {
 8016cf0:	463d      	mov	r5, r7
 8016cf2:	e7e7      	b.n	8016cc4 <coap_session_mfree+0x44>
  else if (session->proto == COAP_PROTO_TLS)
 8016cf4:	2b04      	cmp	r3, #4
 8016cf6:	d1d0      	bne.n	8016c9a <coap_session_mfree+0x1a>
    coap_tls_free_session(session);
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	f7ff ff13 	bl	8016b24 <coap_tls_free_session>
 8016cfe:	e7cc      	b.n	8016c9a <coap_session_mfree+0x1a>
  }
}
 8016d00:	b003      	add	sp, #12
 8016d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d04 <coap_session_max_pdu_size>:

  coap_free_type(COAP_SESSION, session);
}

size_t coap_session_max_pdu_size(const coap_session_t *session) {
  size_t max_with_header = (size_t)(session->mtu - session->tls_overhead);
 8016d04:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016d08:	1a9b      	subs	r3, r3, r2
  if (COAP_PROTO_NOT_RELIABLE(session->proto))
 8016d0a:	7902      	ldrb	r2, [r0, #4]
 8016d0c:	3a01      	subs	r2, #1
 8016d0e:	2a01      	cmp	r2, #1
 8016d10:	d804      	bhi.n	8016d1c <coap_session_max_pdu_size+0x18>
    return max_with_header > 4 ? max_with_header - 4 : 0;
 8016d12:	2b04      	cmp	r3, #4
 8016d14:	bf38      	it	cc
 8016d16:	2304      	movcc	r3, #4
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP0 + 2)
    return max_with_header - 2;
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP8 + 3)
    return max_with_header - 3;
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP16 + 4)
    return max_with_header - 4;
 8016d18:	1f18      	subs	r0, r3, #4
 8016d1a:	4770      	bx	lr
  if (max_with_header <= 2)
 8016d1c:	2b02      	cmp	r3, #2
 8016d1e:	d90d      	bls.n	8016d3c <coap_session_max_pdu_size+0x38>
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP0 + 2)
 8016d20:	2b0e      	cmp	r3, #14
 8016d22:	d801      	bhi.n	8016d28 <coap_session_max_pdu_size+0x24>
    return max_with_header - 2;
 8016d24:	1e98      	subs	r0, r3, #2
 8016d26:	4770      	bx	lr
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP8 + 3)
 8016d28:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8016d2c:	d201      	bcs.n	8016d32 <coap_session_max_pdu_size+0x2e>
    return max_with_header - 3;
 8016d2e:	1ed8      	subs	r0, r3, #3
 8016d30:	4770      	bx	lr
  else if (max_with_header <= COAP_MAX_MESSAGE_SIZE_TCP16 + 4)
 8016d32:	4a03      	ldr	r2, [pc, #12]	; (8016d40 <coap_session_max_pdu_size+0x3c>)
 8016d34:	4293      	cmp	r3, r2
 8016d36:	d9ef      	bls.n	8016d18 <coap_session_max_pdu_size+0x14>
  else
    return max_with_header - 6;
 8016d38:	1f98      	subs	r0, r3, #6
 8016d3a:	4770      	bx	lr
    return 0;
 8016d3c:	2000      	movs	r0, #0
}
 8016d3e:	4770      	bx	lr
 8016d40:	00010110 	.word	0x00010110

08016d44 <coap_session_set_mtu>:

void coap_session_set_mtu(coap_session_t *session, unsigned mtu) {
 8016d44:	b508      	push	{r3, lr}
#if defined(WITH_CONTIKI) || defined(WITH_LWIP)
  if (mtu > COAP_MAX_MESSAGE_SIZE_TCP16 + 4)
    mtu = COAP_MAX_MESSAGE_SIZE_TCP16 + 4;
#endif
  session->mtu = mtu;
  if (session->tls_overhead >= session->mtu) {
 8016d46:	68c3      	ldr	r3, [r0, #12]
  session->mtu = mtu;
 8016d48:	6101      	str	r1, [r0, #16]
  if (session->tls_overhead >= session->mtu) {
 8016d4a:	428b      	cmp	r3, r1
 8016d4c:	d30a      	bcc.n	8016d64 <coap_session_set_mtu+0x20>
    session->tls_overhead = session->mtu;
 8016d4e:	60c1      	str	r1, [r0, #12]
    coap_log(LOG_ERR, "DTLS overhead exceeds MTU\n");
 8016d50:	f7fe f948 	bl	8014fe4 <coap_get_log_level>
 8016d54:	2802      	cmp	r0, #2
 8016d56:	d905      	bls.n	8016d64 <coap_session_set_mtu+0x20>
  }
}
 8016d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    coap_log(LOG_ERR, "DTLS overhead exceeds MTU\n");
 8016d5c:	4902      	ldr	r1, [pc, #8]	; (8016d68 <coap_session_set_mtu+0x24>)
 8016d5e:	2003      	movs	r0, #3
 8016d60:	f7fe b9aa 	b.w	80150b8 <coap_log_impl>
}
 8016d64:	bd08      	pop	{r3, pc}
 8016d66:	bf00      	nop
 8016d68:	0802ff16 	.word	0x0802ff16

08016d6c <coap_session_send_ping>:
  }
  if (pdu)
    coap_delete_pdu(pdu);
}

coap_tid_t coap_session_send_ping(coap_session_t *session) {
 8016d6c:	b510      	push	{r4, lr}
  coap_pdu_t *ping;
  if (session->state != COAP_SESSION_STATE_ESTABLISHED)
 8016d6e:	7983      	ldrb	r3, [r0, #6]
 8016d70:	2b04      	cmp	r3, #4
coap_tid_t coap_session_send_ping(coap_session_t *session) {
 8016d72:	4604      	mov	r4, r0
  if (session->state != COAP_SESSION_STATE_ESTABLISHED)
 8016d74:	d10c      	bne.n	8016d90 <coap_session_send_ping+0x24>
    return 0;
  ping = coap_pdu_init(COAP_MESSAGE_CON, COAP_SIGNALING_PING, 0, 1);
 8016d76:	2200      	movs	r2, #0
 8016d78:	21e2      	movs	r1, #226	; 0xe2
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	4610      	mov	r0, r2
 8016d7e:	f003 f855 	bl	8019e2c <coap_pdu_init>
  if (!ping)
 8016d82:	4601      	mov	r1, r0
 8016d84:	b130      	cbz	r0, 8016d94 <coap_session_send_ping+0x28>
    return COAP_INVALID_TID;
  return coap_send(session, ping);
 8016d86:	4620      	mov	r0, r4
}
 8016d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return coap_send(session, ping);
 8016d8c:	f001 bd92 	b.w	80188b4 <coap_send>
    return 0;
 8016d90:	2000      	movs	r0, #0
}
 8016d92:	bd10      	pop	{r4, pc}
    return COAP_INVALID_TID;
 8016d94:	f04f 30ff 	mov.w	r0, #4294967295
 8016d98:	e7fb      	b.n	8016d92 <coap_session_send_ping+0x26>
	...

08016d9c <coap_session_str>:
    }
  }
  return NULL;
}

const char *coap_session_str(const coap_session_t *session) {
 8016d9c:	b570      	push	{r4, r5, r6, lr}
  static char szSession[256];
  char *p = szSession, *end = szSession + sizeof(szSession);
  if (coap_print_addr(&session->local_addr, (unsigned char*)p, end - p) > 0)
 8016d9e:	4c25      	ldr	r4, [pc, #148]	; (8016e34 <coap_session_str+0x98>)
const char *coap_session_str(const coap_session_t *session) {
 8016da0:	4605      	mov	r5, r0
  if (coap_print_addr(&session->local_addr, (unsigned char*)p, end - p) > 0)
 8016da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016da6:	4621      	mov	r1, r4
 8016da8:	3054      	adds	r0, #84	; 0x54
 8016daa:	f7fe f927 	bl	8014ffc <coap_print_addr>
 8016dae:	f504 7680 	add.w	r6, r4, #256	; 0x100
 8016db2:	b130      	cbz	r0, 8016dc2 <coap_session_str+0x26>
    p += strlen(p);
 8016db4:	4620      	mov	r0, r4
 8016db6:	f7e9 fa65 	bl	8000284 <strlen>
 8016dba:	4404      	add	r4, r0
  if (p + 6 < end) {
 8016dbc:	1da3      	adds	r3, r4, #6
 8016dbe:	42b3      	cmp	r3, r6
 8016dc0:	d204      	bcs.n	8016dcc <coap_session_str+0x30>
    strcpy(p, " <-> ");
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	491c      	ldr	r1, [pc, #112]	; (8016e38 <coap_session_str+0x9c>)
 8016dc6:	f005 fff5 	bl	801cdb4 <strcpy>
    p += 5;
 8016dca:	3405      	adds	r4, #5
  }
  if (p + 1 < end) {
 8016dcc:	1c63      	adds	r3, r4, #1
 8016dce:	42b3      	cmp	r3, r6
 8016dd0:	d20a      	bcs.n	8016de8 <coap_session_str+0x4c>
    if (coap_print_addr(&session->remote_addr, (unsigned char*)p, end - p) > 0)
 8016dd2:	1b32      	subs	r2, r6, r4
 8016dd4:	4621      	mov	r1, r4
 8016dd6:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8016dda:	f7fe f90f 	bl	8014ffc <coap_print_addr>
 8016dde:	b118      	cbz	r0, 8016de8 <coap_session_str+0x4c>
      p += strlen(p);
 8016de0:	4620      	mov	r0, r4
 8016de2:	f7e9 fa4f 	bl	8000284 <strlen>
 8016de6:	4404      	add	r4, r0
  }
  if (session->ifindex > 0 && p + 1 < end)
 8016de8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	dd08      	ble.n	8016e00 <coap_session_str+0x64>
 8016dee:	1c62      	adds	r2, r4, #1
 8016df0:	42b2      	cmp	r2, r6
 8016df2:	d205      	bcs.n	8016e00 <coap_session_str+0x64>
    p += snprintf(p, end - p, " (if%d)", session->ifindex);
 8016df4:	1b31      	subs	r1, r6, r4
 8016df6:	4620      	mov	r0, r4
 8016df8:	4a10      	ldr	r2, [pc, #64]	; (8016e3c <coap_session_str+0xa0>)
 8016dfa:	f005 ff33 	bl	801cc64 <sniprintf>
 8016dfe:	4404      	add	r4, r0
  if (p + 6 < end) {
 8016e00:	1da3      	adds	r3, r4, #6
 8016e02:	42b3      	cmp	r3, r6
 8016e04:	d206      	bcs.n	8016e14 <coap_session_str+0x78>
    if (session->proto == COAP_PROTO_UDP) {
 8016e06:	792b      	ldrb	r3, [r5, #4]
 8016e08:	2b01      	cmp	r3, #1
 8016e0a:	d105      	bne.n	8016e18 <coap_session_str+0x7c>
      strcpy(p, " UDP ");
 8016e0c:	490c      	ldr	r1, [pc, #48]	; (8016e40 <coap_session_str+0xa4>)
      p += 4;
    } else if (session->proto == COAP_PROTO_TLS) {
      strcpy(p, " TLS ");
      p += 4;
    } else {
      strcpy(p, " NONE");
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f005 ffd0 	bl	801cdb4 <strcpy>
      p += 5;
    }
  }

  return szSession;
}
 8016e14:	4807      	ldr	r0, [pc, #28]	; (8016e34 <coap_session_str+0x98>)
 8016e16:	bd70      	pop	{r4, r5, r6, pc}
    } else if (session->proto == COAP_PROTO_DTLS) {
 8016e18:	2b02      	cmp	r3, #2
 8016e1a:	d101      	bne.n	8016e20 <coap_session_str+0x84>
      strcpy(p, " DTLS");
 8016e1c:	4909      	ldr	r1, [pc, #36]	; (8016e44 <coap_session_str+0xa8>)
 8016e1e:	e7f6      	b.n	8016e0e <coap_session_str+0x72>
    } else if (session->proto == COAP_PROTO_TCP) {
 8016e20:	2b03      	cmp	r3, #3
 8016e22:	d101      	bne.n	8016e28 <coap_session_str+0x8c>
      strcpy(p, " TCP ");
 8016e24:	4908      	ldr	r1, [pc, #32]	; (8016e48 <coap_session_str+0xac>)
 8016e26:	e7f2      	b.n	8016e0e <coap_session_str+0x72>
    } else if (session->proto == COAP_PROTO_TLS) {
 8016e28:	2b04      	cmp	r3, #4
      strcpy(p, " TLS ");
 8016e2a:	bf0c      	ite	eq
 8016e2c:	4907      	ldreq	r1, [pc, #28]	; (8016e4c <coap_session_str+0xb0>)
      strcpy(p, " NONE");
 8016e2e:	4908      	ldrne	r1, [pc, #32]	; (8016e50 <coap_session_str+0xb4>)
 8016e30:	e7ed      	b.n	8016e0e <coap_session_str+0x72>
 8016e32:	bf00      	nop
 8016e34:	20007174 	.word	0x20007174
 8016e38:	0802ffa0 	.word	0x0802ffa0
 8016e3c:	0802ffa6 	.word	0x0802ffa6
 8016e40:	0802ffae 	.word	0x0802ffae
 8016e44:	0802ffb4 	.word	0x0802ffb4
 8016e48:	0802ffba 	.word	0x0802ffba
 8016e4c:	0802ffc0 	.word	0x0802ffc0
 8016e50:	0802ffc6 	.word	0x0802ffc6

08016e54 <coap_session_free>:
void coap_session_free(coap_session_t *session) {
 8016e54:	b510      	push	{r4, lr}
  if (!session)
 8016e56:	4604      	mov	r4, r0
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d040      	beq.n	8016ede <coap_session_free+0x8a>
  assert(session->ref == 0);
 8016e5c:	6883      	ldr	r3, [r0, #8]
 8016e5e:	b12b      	cbz	r3, 8016e6c <coap_session_free+0x18>
 8016e60:	4b1f      	ldr	r3, [pc, #124]	; (8016ee0 <coap_session_free+0x8c>)
 8016e62:	4a20      	ldr	r2, [pc, #128]	; (8016ee4 <coap_session_free+0x90>)
 8016e64:	4820      	ldr	r0, [pc, #128]	; (8016ee8 <coap_session_free+0x94>)
 8016e66:	21ad      	movs	r1, #173	; 0xad
 8016e68:	f004 fe08 	bl	801ba7c <__assert_func>
  coap_session_mfree(session);
 8016e6c:	f7ff ff08 	bl	8016c80 <coap_session_mfree>
  if (session->endpoint) {
 8016e70:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8016e74:	b302      	cbz	r2, 8016eb8 <coap_session_free+0x64>
    if (session->endpoint->sessions)
 8016e76:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016e78:	b11b      	cbz	r3, 8016e82 <coap_session_free+0x2e>
      LL_DELETE(session->endpoint->sessions, session);
 8016e7a:	42a3      	cmp	r3, r4
 8016e7c:	d113      	bne.n	8016ea6 <coap_session_free+0x52>
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	6353      	str	r3, [r2, #52]	; 0x34
  coap_log(LOG_DEBUG, "***%s: session closed\n", coap_session_str(session));
 8016e82:	f7fe f8af 	bl	8014fe4 <coap_get_log_level>
 8016e86:	2806      	cmp	r0, #6
 8016e88:	d907      	bls.n	8016e9a <coap_session_free+0x46>
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f7ff ff86 	bl	8016d9c <coap_session_str>
 8016e90:	4916      	ldr	r1, [pc, #88]	; (8016eec <coap_session_free+0x98>)
 8016e92:	4602      	mov	r2, r0
 8016e94:	2007      	movs	r0, #7
 8016e96:	f7fe f90f 	bl	80150b8 <coap_log_impl>
  coap_free_type(COAP_SESSION, session);
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	200b      	movs	r0, #11
}
 8016e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coap_free_type(COAP_SESSION, session);
 8016ea2:	f000 be32 	b.w	8017b0a <coap_free_type>
      LL_DELETE(session->endpoint->sessions, session);
 8016ea6:	461a      	mov	r2, r3
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d0e9      	beq.n	8016e82 <coap_session_free+0x2e>
 8016eae:	42a3      	cmp	r3, r4
 8016eb0:	d1f9      	bne.n	8016ea6 <coap_session_free+0x52>
      LL_DELETE(session->context->sessions, session);
 8016eb2:	6823      	ldr	r3, [r4, #0]
 8016eb4:	6013      	str	r3, [r2, #0]
 8016eb6:	e7e4      	b.n	8016e82 <coap_session_free+0x2e>
  } else if (session->context) {
 8016eb8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8016ebc:	2a00      	cmp	r2, #0
 8016ebe:	d0e0      	beq.n	8016e82 <coap_session_free+0x2e>
    if (session->context->sessions)
 8016ec0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d0dd      	beq.n	8016e82 <coap_session_free+0x2e>
      LL_DELETE(session->context->sessions, session);
 8016ec6:	42a3      	cmp	r3, r4
 8016ec8:	d102      	bne.n	8016ed0 <coap_session_free+0x7c>
 8016eca:	6823      	ldr	r3, [r4, #0]
 8016ecc:	6293      	str	r3, [r2, #40]	; 0x28
 8016ece:	e7d8      	b.n	8016e82 <coap_session_free+0x2e>
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d0d4      	beq.n	8016e82 <coap_session_free+0x2e>
 8016ed8:	42a3      	cmp	r3, r4
 8016eda:	d1f9      	bne.n	8016ed0 <coap_session_free+0x7c>
 8016edc:	e7e9      	b.n	8016eb2 <coap_session_free+0x5e>
}
 8016ede:	bd10      	pop	{r4, pc}
 8016ee0:	08030051 	.word	0x08030051
 8016ee4:	0802aaac 	.word	0x0802aaac
 8016ee8:	0802ff31 	.word	0x0802ff31
 8016eec:	08030063 	.word	0x08030063

08016ef0 <coap_session_release>:
coap_session_release(coap_session_t *session) {
 8016ef0:	b508      	push	{r3, lr}
  if (session) {
 8016ef2:	b188      	cbz	r0, 8016f18 <coap_session_release+0x28>
    assert(session->ref > 0);
 8016ef4:	6882      	ldr	r2, [r0, #8]
 8016ef6:	b92a      	cbnz	r2, 8016f04 <coap_session_release+0x14>
 8016ef8:	4b08      	ldr	r3, [pc, #32]	; (8016f1c <coap_session_release+0x2c>)
 8016efa:	4a09      	ldr	r2, [pc, #36]	; (8016f20 <coap_session_release+0x30>)
 8016efc:	4809      	ldr	r0, [pc, #36]	; (8016f24 <coap_session_release+0x34>)
 8016efe:	214f      	movs	r1, #79	; 0x4f
 8016f00:	f004 fdbc 	bl	801ba7c <__assert_func>
      --session->ref;
 8016f04:	3a01      	subs	r2, #1
 8016f06:	6082      	str	r2, [r0, #8]
    if (session->ref == 0 && session->type == COAP_SESSION_TYPE_CLIENT)
 8016f08:	b932      	cbnz	r2, 8016f18 <coap_session_release+0x28>
 8016f0a:	7943      	ldrb	r3, [r0, #5]
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d103      	bne.n	8016f18 <coap_session_release+0x28>
}
 8016f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      coap_session_free(session);
 8016f14:	f7ff bf9e 	b.w	8016e54 <coap_session_free>
}
 8016f18:	bd08      	pop	{r3, pc}
 8016f1a:	bf00      	nop
 8016f1c:	0803007a 	.word	0x0803007a
 8016f20:	0802aabe 	.word	0x0802aabe
 8016f24:	0802ff31 	.word	0x0802ff31

08016f28 <coap_session_new_dtls_session>:
  coap_tick_t now) {
 8016f28:	b570      	push	{r4, r5, r6, lr}
  if (session) {
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	b150      	cbz	r0, 8016f44 <coap_session_new_dtls_session+0x1c>
    session->type = COAP_SESSION_TYPE_SERVER;
 8016f2e:	2602      	movs	r6, #2
    session->last_rx_tx = now;
 8016f30:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
    session->type = COAP_SESSION_TYPE_SERVER;
 8016f34:	7146      	strb	r6, [r0, #5]
    session->tls = coap_dtls_new_server_session(session);
 8016f36:	f7ff fdd9 	bl	8016aec <coap_dtls_new_server_session>
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (session->tls) {
 8016f40:	b110      	cbz	r0, 8016f48 <coap_session_new_dtls_session+0x20>
      session->state = COAP_SESSION_STATE_HANDSHAKE;
 8016f42:	71a6      	strb	r6, [r4, #6]
}
 8016f44:	4620      	mov	r0, r4
 8016f46:	bd70      	pop	{r4, r5, r6, pc}
      coap_session_free(session);
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f7ff ff83 	bl	8016e54 <coap_session_free>
      session = NULL;
 8016f4e:	462c      	mov	r4, r5
 8016f50:	e7f8      	b.n	8016f44 <coap_session_new_dtls_session+0x1c>
	...

08016f54 <coap_free_endpoint>:
coap_free_endpoint(coap_endpoint_t *ep) {
 8016f54:	b538      	push	{r3, r4, r5, lr}
  if (ep) {
 8016f56:	4604      	mov	r4, r0
 8016f58:	b348      	cbz	r0, 8016fae <coap_free_endpoint+0x5a>
    if (ep->sock.flags != COAP_SOCKET_EMPTY)
 8016f5a:	8a03      	ldrh	r3, [r0, #16]
 8016f5c:	b113      	cbz	r3, 8016f64 <coap_free_endpoint+0x10>
      coap_socket_close(&ep->sock);
 8016f5e:	300c      	adds	r0, #12
 8016f60:	f7fe fc8d 	bl	801587e <coap_socket_close>
    LL_FOREACH_SAFE(ep->sessions, session, tmp) {
 8016f64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016f66:	b168      	cbz	r0, 8016f84 <coap_free_endpoint+0x30>
      assert(session->ref == 0);
 8016f68:	6883      	ldr	r3, [r0, #8]
    LL_FOREACH_SAFE(ep->sessions, session, tmp) {
 8016f6a:	6805      	ldr	r5, [r0, #0]
      assert(session->ref == 0);
 8016f6c:	b133      	cbz	r3, 8016f7c <coap_free_endpoint+0x28>
 8016f6e:	4b10      	ldr	r3, [pc, #64]	; (8016fb0 <coap_free_endpoint+0x5c>)
 8016f70:	4a10      	ldr	r2, [pc, #64]	; (8016fb4 <coap_free_endpoint+0x60>)
 8016f72:	4811      	ldr	r0, [pc, #68]	; (8016fb8 <coap_free_endpoint+0x64>)
 8016f74:	f240 31b2 	movw	r1, #946	; 0x3b2
 8016f78:	f004 fd80 	bl	801ba7c <__assert_func>
        coap_session_free(session);
 8016f7c:	f7ff ff6a 	bl	8016e54 <coap_session_free>
    LL_FOREACH_SAFE(ep->sessions, session, tmp) {
 8016f80:	4628      	mov	r0, r5
 8016f82:	e7f0      	b.n	8016f66 <coap_free_endpoint+0x12>
    if (ep->context) {
 8016f84:	6862      	ldr	r2, [r4, #4]
 8016f86:	b122      	cbz	r2, 8016f92 <coap_free_endpoint+0x3e>
      LL_DELETE(ep->context->endpoint, ep);
 8016f88:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8016f8a:	42a3      	cmp	r3, r4
 8016f8c:	d106      	bne.n	8016f9c <coap_free_endpoint+0x48>
 8016f8e:	6823      	ldr	r3, [r4, #0]
 8016f90:	6253      	str	r3, [r2, #36]	; 0x24
    coap_mfree_endpoint(ep);
 8016f92:	4620      	mov	r0, r4
}
 8016f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    coap_mfree_endpoint(ep);
 8016f98:	f7fe bc6d 	b.w	8015876 <coap_mfree_endpoint>
      LL_DELETE(ep->context->endpoint, ep);
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d0f6      	beq.n	8016f92 <coap_free_endpoint+0x3e>
 8016fa4:	42a3      	cmp	r3, r4
 8016fa6:	d1f9      	bne.n	8016f9c <coap_free_endpoint+0x48>
 8016fa8:	6823      	ldr	r3, [r4, #0]
 8016faa:	6013      	str	r3, [r2, #0]
 8016fac:	e7f1      	b.n	8016f92 <coap_free_endpoint+0x3e>
}
 8016fae:	bd38      	pop	{r3, r4, r5, pc}
 8016fb0:	08030051 	.word	0x08030051
 8016fb4:	0802aaee 	.word	0x0802aaee
 8016fb8:	0802ff31 	.word	0x0802ff31

08016fbc <coap_new_endpoint>:
coap_new_endpoint(coap_context_t *context, const coap_address_t *listen_addr, coap_proto_t proto) {
 8016fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fbe:	460e      	mov	r6, r1
 8016fc0:	b08f      	sub	sp, #60	; 0x3c
 8016fc2:	4617      	mov	r7, r2
  assert(context);
 8016fc4:	4605      	mov	r5, r0
 8016fc6:	b930      	cbnz	r0, 8016fd6 <coap_new_endpoint+0x1a>
 8016fc8:	4b53      	ldr	r3, [pc, #332]	; (8017118 <coap_new_endpoint+0x15c>)
 8016fca:	4a54      	ldr	r2, [pc, #336]	; (801711c <coap_new_endpoint+0x160>)
 8016fcc:	f240 315a 	movw	r1, #858	; 0x35a
  assert(listen_addr);
 8016fd0:	4853      	ldr	r0, [pc, #332]	; (8017120 <coap_new_endpoint+0x164>)
 8016fd2:	f004 fd53 	bl	801ba7c <__assert_func>
 8016fd6:	b921      	cbnz	r1, 8016fe2 <coap_new_endpoint+0x26>
 8016fd8:	4b52      	ldr	r3, [pc, #328]	; (8017124 <coap_new_endpoint+0x168>)
 8016fda:	4a50      	ldr	r2, [pc, #320]	; (801711c <coap_new_endpoint+0x160>)
 8016fdc:	f240 315b 	movw	r1, #859	; 0x35b
 8016fe0:	e7f6      	b.n	8016fd0 <coap_new_endpoint+0x14>
  assert(proto != COAP_PROTO_NONE);
 8016fe2:	b922      	cbnz	r2, 8016fee <coap_new_endpoint+0x32>
 8016fe4:	4b50      	ldr	r3, [pc, #320]	; (8017128 <coap_new_endpoint+0x16c>)
 8016fe6:	4a4d      	ldr	r2, [pc, #308]	; (801711c <coap_new_endpoint+0x160>)
 8016fe8:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8016fec:	e7f0      	b.n	8016fd0 <coap_new_endpoint+0x14>
  if (proto == COAP_PROTO_DTLS && !coap_dtls_is_supported()) {
 8016fee:	2a02      	cmp	r2, #2
 8016ff0:	d111      	bne.n	8017016 <coap_new_endpoint+0x5a>
 8016ff2:	f7ff fd71 	bl	8016ad8 <coap_dtls_is_supported>
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	b9c8      	cbnz	r0, 801702e <coap_new_endpoint+0x72>
    coap_log(LOG_CRIT, "coap_new_endpoint: DTLS not supported\n");
 8016ffa:	f7fd fff3 	bl	8014fe4 <coap_get_log_level>
 8016ffe:	2801      	cmp	r0, #1
 8017000:	f240 8087 	bls.w	8017112 <coap_new_endpoint+0x156>
 8017004:	4949      	ldr	r1, [pc, #292]	; (801712c <coap_new_endpoint+0x170>)
    coap_log(LOG_CRIT, "coap_new_endpoint: TLS not supported\n");
 8017006:	2002      	movs	r0, #2
 8017008:	f7fe f856 	bl	80150b8 <coap_log_impl>
  coap_free_endpoint(ep);
 801700c:	4620      	mov	r0, r4
 801700e:	f7ff ffa1 	bl	8016f54 <coap_free_endpoint>
  return NULL;
 8017012:	2400      	movs	r4, #0
 8017014:	e060      	b.n	80170d8 <coap_new_endpoint+0x11c>
  if (proto == COAP_PROTO_TLS && !coap_tls_is_supported()) {
 8017016:	2a04      	cmp	r2, #4
 8017018:	d115      	bne.n	8017046 <coap_new_endpoint+0x8a>
 801701a:	f7ff fd5f 	bl	8016adc <coap_tls_is_supported>
 801701e:	4604      	mov	r4, r0
 8017020:	b928      	cbnz	r0, 801702e <coap_new_endpoint+0x72>
    coap_log(LOG_CRIT, "coap_new_endpoint: TLS not supported\n");
 8017022:	f7fd ffdf 	bl	8014fe4 <coap_get_log_level>
 8017026:	2801      	cmp	r0, #1
 8017028:	d973      	bls.n	8017112 <coap_new_endpoint+0x156>
 801702a:	4941      	ldr	r1, [pc, #260]	; (8017130 <coap_new_endpoint+0x174>)
 801702c:	e7eb      	b.n	8017006 <coap_new_endpoint+0x4a>
    if (!coap_dtls_context_check_keys_enabled(context)) {
 801702e:	4628      	mov	r0, r5
 8017030:	f7ff fd56 	bl	8016ae0 <coap_dtls_context_check_keys_enabled>
 8017034:	4604      	mov	r4, r0
 8017036:	b930      	cbnz	r0, 8017046 <coap_new_endpoint+0x8a>
      coap_log(LOG_INFO,
 8017038:	f7fd ffd4 	bl	8014fe4 <coap_get_log_level>
 801703c:	2805      	cmp	r0, #5
 801703e:	d968      	bls.n	8017112 <coap_new_endpoint+0x156>
 8017040:	493c      	ldr	r1, [pc, #240]	; (8017134 <coap_new_endpoint+0x178>)
 8017042:	2006      	movs	r0, #6
 8017044:	e7e0      	b.n	8017008 <coap_new_endpoint+0x4c>
  ep = coap_malloc_endpoint();
 8017046:	f7fe fc12 	bl	801586e <coap_malloc_endpoint>
  if (!ep) {
 801704a:	4604      	mov	r4, r0
 801704c:	b930      	cbnz	r0, 801705c <coap_new_endpoint+0xa0>
    coap_log(LOG_WARNING, "coap_new_endpoint: malloc");
 801704e:	f7fd ffc9 	bl	8014fe4 <coap_get_log_level>
 8017052:	2803      	cmp	r0, #3
 8017054:	d95d      	bls.n	8017112 <coap_new_endpoint+0x156>
 8017056:	4938      	ldr	r1, [pc, #224]	; (8017138 <coap_new_endpoint+0x17c>)
 8017058:	2004      	movs	r0, #4
 801705a:	e7d5      	b.n	8017008 <coap_new_endpoint+0x4c>
  memset(ep, 0, sizeof(struct coap_endpoint_t));
 801705c:	2238      	movs	r2, #56	; 0x38
 801705e:	2100      	movs	r1, #0
 8017060:	f005 f916 	bl	801c290 <memset>
  if (proto==COAP_PROTO_TCP || proto==COAP_PROTO_TLS) {
 8017064:	1efb      	subs	r3, r7, #3
 8017066:	2b01      	cmp	r3, #1
  ep->context = context;
 8017068:	6065      	str	r5, [r4, #4]
  ep->proto = proto;
 801706a:	7227      	strb	r7, [r4, #8]
  if (proto==COAP_PROTO_TCP || proto==COAP_PROTO_TLS) {
 801706c:	d837      	bhi.n	80170de <coap_new_endpoint+0x122>
    if (!coap_socket_bind_tcp(&ep->sock, listen_addr, &ep->bind_addr))
 801706e:	f104 0214 	add.w	r2, r4, #20
 8017072:	4631      	mov	r1, r6
 8017074:	f104 000c 	add.w	r0, r4, #12
 8017078:	f7ff f8c8 	bl	801620c <coap_socket_bind_tcp>
 801707c:	2800      	cmp	r0, #0
 801707e:	d0c5      	beq.n	801700c <coap_new_endpoint+0x50>
    ep->sock.flags |= COAP_SOCKET_WANT_ACCEPT;
 8017080:	8a23      	ldrh	r3, [r4, #16]
 8017082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ep->sock.flags |= COAP_SOCKET_WANT_READ;
 8017086:	8223      	strh	r3, [r4, #16]
  if (LOG_DEBUG <= coap_get_log_level()) {
 8017088:	f7fd ffac 	bl	8014fe4 <coap_get_log_level>
 801708c:	2806      	cmp	r0, #6
 801708e:	d919      	bls.n	80170c4 <coap_new_endpoint+0x108>
    if (coap_print_addr(&ep->bind_addr, addr_str, INET6_ADDRSTRLEN + 8)) {
 8017090:	2236      	movs	r2, #54	; 0x36
 8017092:	4669      	mov	r1, sp
 8017094:	f104 0014 	add.w	r0, r4, #20
 8017098:	f7fd ffb0 	bl	8014ffc <coap_print_addr>
 801709c:	b190      	cbz	r0, 80170c4 <coap_new_endpoint+0x108>
      coap_log(LOG_DEBUG, "created %s endpoint %s\n",
 801709e:	f7fd ffa1 	bl	8014fe4 <coap_get_log_level>
 80170a2:	2806      	cmp	r0, #6
 80170a4:	d90e      	bls.n	80170c4 <coap_new_endpoint+0x108>
 80170a6:	7a23      	ldrb	r3, [r4, #8]
 80170a8:	2b04      	cmp	r3, #4
 80170aa:	d02e      	beq.n	801710a <coap_new_endpoint+0x14e>
 80170ac:	2b03      	cmp	r3, #3
 80170ae:	d02e      	beq.n	801710e <coap_new_endpoint+0x152>
 80170b0:	4a22      	ldr	r2, [pc, #136]	; (801713c <coap_new_endpoint+0x180>)
 80170b2:	4923      	ldr	r1, [pc, #140]	; (8017140 <coap_new_endpoint+0x184>)
 80170b4:	2b02      	cmp	r3, #2
 80170b6:	bf18      	it	ne
 80170b8:	460a      	movne	r2, r1
 80170ba:	4922      	ldr	r1, [pc, #136]	; (8017144 <coap_new_endpoint+0x188>)
 80170bc:	466b      	mov	r3, sp
 80170be:	2007      	movs	r0, #7
 80170c0:	f7fd fffa 	bl	80150b8 <coap_log_impl>
  ep->sock.flags |= COAP_SOCKET_NOT_EMPTY | COAP_SOCKET_BOUND;
 80170c4:	8a23      	ldrh	r3, [r4, #16]
 80170c6:	f043 0303 	orr.w	r3, r3, #3
 80170ca:	8223      	strh	r3, [r4, #16]
  ep->default_mtu = COAP_DEFAULT_MTU;
 80170cc:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80170d0:	8163      	strh	r3, [r4, #10]
  LL_PREPEND(context->endpoint, ep);
 80170d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	626c      	str	r4, [r5, #36]	; 0x24
}
 80170d8:	4620      	mov	r0, r4
 80170da:	b00f      	add	sp, #60	; 0x3c
 80170dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (proto==COAP_PROTO_UDP || proto==COAP_PROTO_DTLS) {
 80170de:	1e7a      	subs	r2, r7, #1
 80170e0:	2a01      	cmp	r2, #1
 80170e2:	d80c      	bhi.n	80170fe <coap_new_endpoint+0x142>
    if (!coap_socket_bind_udp(&ep->sock, listen_addr, &ep->bind_addr))
 80170e4:	f104 0214 	add.w	r2, r4, #20
 80170e8:	4631      	mov	r1, r6
 80170ea:	f104 000c 	add.w	r0, r4, #12
 80170ee:	f7fe fe4d 	bl	8015d8c <coap_socket_bind_udp>
 80170f2:	2800      	cmp	r0, #0
 80170f4:	d08a      	beq.n	801700c <coap_new_endpoint+0x50>
    ep->sock.flags |= COAP_SOCKET_WANT_READ;
 80170f6:	8a23      	ldrh	r3, [r4, #16]
 80170f8:	f043 0310 	orr.w	r3, r3, #16
 80170fc:	e7c3      	b.n	8017086 <coap_new_endpoint+0xca>
    coap_log(LOG_CRIT, "coap_new_endpoint: protocol not supported\n");
 80170fe:	f7fd ff71 	bl	8014fe4 <coap_get_log_level>
 8017102:	2801      	cmp	r0, #1
 8017104:	d982      	bls.n	801700c <coap_new_endpoint+0x50>
 8017106:	4910      	ldr	r1, [pc, #64]	; (8017148 <coap_new_endpoint+0x18c>)
 8017108:	e77d      	b.n	8017006 <coap_new_endpoint+0x4a>
      coap_log(LOG_DEBUG, "created %s endpoint %s\n",
 801710a:	4a10      	ldr	r2, [pc, #64]	; (801714c <coap_new_endpoint+0x190>)
 801710c:	e7d5      	b.n	80170ba <coap_new_endpoint+0xfe>
 801710e:	4a10      	ldr	r2, [pc, #64]	; (8017150 <coap_new_endpoint+0x194>)
 8017110:	e7d3      	b.n	80170ba <coap_new_endpoint+0xfe>
  struct coap_endpoint_t *ep = NULL;
 8017112:	2400      	movs	r4, #0
 8017114:	e77a      	b.n	801700c <coap_new_endpoint+0x50>
 8017116:	bf00      	nop
 8017118:	080300ab 	.word	0x080300ab
 801711c:	0802ab01 	.word	0x0802ab01
 8017120:	0802ff31 	.word	0x0802ff31
 8017124:	080300b3 	.word	0x080300b3
 8017128:	08030092 	.word	0x08030092
 801712c:	080300bf 	.word	0x080300bf
 8017130:	080300e6 	.word	0x080300e6
 8017134:	0803010c 	.word	0x0803010c
 8017138:	08030163 	.word	0x08030163
 801713c:	0802ffb5 	.word	0x0802ffb5
 8017140:	0802ffaf 	.word	0x0802ffaf
 8017144:	080301a8 	.word	0x080301a8
 8017148:	0803017d 	.word	0x0803017d
 801714c:	0802ffc1 	.word	0x0802ffc1
 8017150:	0802ffbb 	.word	0x0802ffbb

08017154 <coap_session_send>:
  if (sock->flags == COAP_SOCKET_EMPTY) {
 8017154:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
ssize_t coap_session_send(coap_session_t *session, const uint8_t *data, size_t datalen) {
 8017158:	b570      	push	{r4, r5, r6, lr}
 801715a:	4604      	mov	r4, r0
 801715c:	4616      	mov	r6, r2
  if (sock->flags == COAP_SOCKET_EMPTY) {
 801715e:	b1db      	cbz	r3, 8017198 <coap_session_send+0x44>
  coap_socket_t *sock = &session->sock;
 8017160:	3078      	adds	r0, #120	; 0x78
  bytes_written = coap_socket_send(sock, session, data, datalen);
 8017162:	460a      	mov	r2, r1
 8017164:	4633      	mov	r3, r6
 8017166:	4621      	mov	r1, r4
 8017168:	f7ff fcae 	bl	8016ac8 <coap_socket_send>
  if (bytes_written == (ssize_t)datalen) {
 801716c:	4286      	cmp	r6, r0
  bytes_written = coap_socket_send(sock, session, data, datalen);
 801716e:	4605      	mov	r5, r0
  if (bytes_written == (ssize_t)datalen) {
 8017170:	d11d      	bne.n	80171ae <coap_session_send+0x5a>
    coap_ticks(&session->last_rx_tx);
 8017172:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8017176:	f000 fc33 	bl	80179e0 <coap_ticks>
    coap_log(LOG_DEBUG, "*  %s: sent %zd bytes\n",
 801717a:	f7fd ff33 	bl	8014fe4 <coap_get_log_level>
 801717e:	2806      	cmp	r0, #6
 8017180:	d908      	bls.n	8017194 <coap_session_send+0x40>
 8017182:	4620      	mov	r0, r4
 8017184:	f7ff fe0a 	bl	8016d9c <coap_session_str>
 8017188:	490e      	ldr	r1, [pc, #56]	; (80171c4 <coap_session_send+0x70>)
 801718a:	4602      	mov	r2, r0
 801718c:	462b      	mov	r3, r5
    coap_log(LOG_DEBUG, "*  %s: failed to send %zd bytes\n",
 801718e:	2007      	movs	r0, #7
 8017190:	f7fd ff92 	bl	80150b8 <coap_log_impl>
}
 8017194:	4628      	mov	r0, r5
 8017196:	bd70      	pop	{r4, r5, r6, pc}
    assert(session->endpoint != NULL);
 8017198:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801719c:	b928      	cbnz	r0, 80171aa <coap_session_send+0x56>
 801719e:	4b0a      	ldr	r3, [pc, #40]	; (80171c8 <coap_session_send+0x74>)
 80171a0:	4a0a      	ldr	r2, [pc, #40]	; (80171cc <coap_session_send+0x78>)
 80171a2:	480b      	ldr	r0, [pc, #44]	; (80171d0 <coap_session_send+0x7c>)
 80171a4:	21df      	movs	r1, #223	; 0xdf
 80171a6:	f004 fc69 	bl	801ba7c <__assert_func>
    sock = &session->endpoint->sock;
 80171aa:	300c      	adds	r0, #12
 80171ac:	e7d9      	b.n	8017162 <coap_session_send+0xe>
    coap_log(LOG_DEBUG, "*  %s: failed to send %zd bytes\n",
 80171ae:	f7fd ff19 	bl	8014fe4 <coap_get_log_level>
 80171b2:	2806      	cmp	r0, #6
 80171b4:	d9ee      	bls.n	8017194 <coap_session_send+0x40>
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7ff fdf0 	bl	8016d9c <coap_session_str>
 80171bc:	4905      	ldr	r1, [pc, #20]	; (80171d4 <coap_session_send+0x80>)
 80171be:	4602      	mov	r2, r0
 80171c0:	4633      	mov	r3, r6
 80171c2:	e7e4      	b.n	801718e <coap_session_send+0x3a>
 80171c4:	080301da 	.word	0x080301da
 80171c8:	080301c0 	.word	0x080301c0
 80171cc:	0802ab13 	.word	0x0802ab13
 80171d0:	0802ff31 	.word	0x0802ff31
 80171d4:	080301f1 	.word	0x080301f1

080171d8 <coap_session_write>:
ssize_t coap_session_write(coap_session_t *session, const uint8_t *data, size_t datalen) {
 80171d8:	b570      	push	{r4, r5, r6, lr}
 80171da:	4604      	mov	r4, r0
  ssize_t bytes_written = coap_socket_write(&session->sock, data, datalen);
 80171dc:	3078      	adds	r0, #120	; 0x78
ssize_t coap_session_write(coap_session_t *session, const uint8_t *data, size_t datalen) {
 80171de:	4616      	mov	r6, r2
  ssize_t bytes_written = coap_socket_write(&session->sock, data, datalen);
 80171e0:	f7ff f92e 	bl	8016440 <coap_socket_write>
  if (bytes_written > 0) {
 80171e4:	1e05      	subs	r5, r0, #0
 80171e6:	dd12      	ble.n	801720e <coap_session_write+0x36>
    coap_ticks(&session->last_rx_tx);
 80171e8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80171ec:	f000 fbf8 	bl	80179e0 <coap_ticks>
    coap_log(LOG_DEBUG, "*  %s: sent %zd bytes\n",
 80171f0:	f7fd fef8 	bl	8014fe4 <coap_get_log_level>
 80171f4:	2806      	cmp	r0, #6
 80171f6:	d908      	bls.n	801720a <coap_session_write+0x32>
 80171f8:	4620      	mov	r0, r4
 80171fa:	f7ff fdcf 	bl	8016d9c <coap_session_str>
 80171fe:	490a      	ldr	r1, [pc, #40]	; (8017228 <coap_session_write+0x50>)
 8017200:	4602      	mov	r2, r0
 8017202:	4633      	mov	r3, r6
    coap_log(LOG_DEBUG,  "*   %s: failed to send %zd bytes\n",
 8017204:	2007      	movs	r0, #7
 8017206:	f7fd ff57 	bl	80150b8 <coap_log_impl>
}
 801720a:	4628      	mov	r0, r5
 801720c:	bd70      	pop	{r4, r5, r6, pc}
  } else if (bytes_written < 0) {
 801720e:	d0fc      	beq.n	801720a <coap_session_write+0x32>
    coap_log(LOG_DEBUG,  "*   %s: failed to send %zd bytes\n",
 8017210:	f7fd fee8 	bl	8014fe4 <coap_get_log_level>
 8017214:	2806      	cmp	r0, #6
 8017216:	d9f8      	bls.n	801720a <coap_session_write+0x32>
 8017218:	4620      	mov	r0, r4
 801721a:	f7ff fdbf 	bl	8016d9c <coap_session_str>
 801721e:	4903      	ldr	r1, [pc, #12]	; (801722c <coap_session_write+0x54>)
 8017220:	4602      	mov	r2, r0
 8017222:	4633      	mov	r3, r6
 8017224:	e7ee      	b.n	8017204 <coap_session_write+0x2c>
 8017226:	bf00      	nop
 8017228:	080301da 	.word	0x080301da
 801722c:	08030212 	.word	0x08030212

08017230 <coap_session_delay_pdu>:
{
 8017230:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017232:	4605      	mov	r5, r0
 8017234:	460e      	mov	r6, r1
  if ( node ) {
 8017236:	4614      	mov	r4, r2
 8017238:	2a00      	cmp	r2, #0
 801723a:	d036      	beq.n	80172aa <coap_session_delay_pdu+0x7a>
    coap_remove_from_queue(&session->context->sendqueue, session, node->id, &removed);
 801723c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8017240:	69d2      	ldr	r2, [r2, #28]
 8017242:	ab01      	add	r3, sp, #4
    coap_queue_t *removed = NULL;
 8017244:	2600      	movs	r6, #0
    coap_remove_from_queue(&session->context->sendqueue, session, node->id, &removed);
 8017246:	4629      	mov	r1, r5
 8017248:	3020      	adds	r0, #32
    coap_queue_t *removed = NULL;
 801724a:	9601      	str	r6, [sp, #4]
    coap_remove_from_queue(&session->context->sendqueue, session, node->id, &removed);
 801724c:	f000 ff7a 	bl	8018144 <coap_remove_from_queue>
    assert(removed == node);
 8017250:	9b01      	ldr	r3, [sp, #4]
 8017252:	42a3      	cmp	r3, r4
 8017254:	d006      	beq.n	8017264 <coap_session_delay_pdu+0x34>
 8017256:	4b2f      	ldr	r3, [pc, #188]	; (8017314 <coap_session_delay_pdu+0xe4>)
 8017258:	4a2f      	ldr	r2, [pc, #188]	; (8017318 <coap_session_delay_pdu+0xe8>)
 801725a:	4830      	ldr	r0, [pc, #192]	; (801731c <coap_session_delay_pdu+0xec>)
 801725c:	f240 1103 	movw	r1, #259	; 0x103
 8017260:	f004 fc0c 	bl	801ba7c <__assert_func>
    coap_session_release(node->session);
 8017264:	69a0      	ldr	r0, [r4, #24]
 8017266:	f7ff fe43 	bl	8016ef0 <coap_session_release>
    node->t = 0;
 801726a:	2200      	movs	r2, #0
 801726c:	2300      	movs	r3, #0
 801726e:	e9c4 2302 	strd	r2, r3, [r4, #8]
    node->session = NULL;
 8017272:	61a6      	str	r6, [r4, #24]
  LL_APPEND(session->delayqueue, node);
 8017274:	2300      	movs	r3, #0
 8017276:	6023      	str	r3, [r4, #0]
 8017278:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801727c:	2b00      	cmp	r3, #0
 801727e:	d045      	beq.n	801730c <coap_session_delay_pdu+0xdc>
 8017280:	461a      	mov	r2, r3
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1fb      	bne.n	8017280 <coap_session_delay_pdu+0x50>
 8017288:	6014      	str	r4, [r2, #0]
  coap_log(LOG_DEBUG, "** %s: tid=%d: delayed\n",
 801728a:	f7fd feab 	bl	8014fe4 <coap_get_log_level>
 801728e:	2806      	cmp	r0, #6
 8017290:	d908      	bls.n	80172a4 <coap_session_delay_pdu+0x74>
 8017292:	4628      	mov	r0, r5
 8017294:	f7ff fd82 	bl	8016d9c <coap_session_str>
 8017298:	69e3      	ldr	r3, [r4, #28]
 801729a:	4921      	ldr	r1, [pc, #132]	; (8017320 <coap_session_delay_pdu+0xf0>)
 801729c:	4602      	mov	r2, r0
 801729e:	2007      	movs	r0, #7
 80172a0:	f7fd ff0a 	bl	80150b8 <coap_log_impl>
  return COAP_PDU_DELAYED;
 80172a4:	f06f 0002 	mvn.w	r0, #2
 80172a8:	e022      	b.n	80172f0 <coap_session_delay_pdu+0xc0>
    LL_FOREACH(session->delayqueue, q) {
 80172aa:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80172ae:	b9ab      	cbnz	r3, 80172dc <coap_session_delay_pdu+0xac>
    node = coap_new_node();
 80172b0:	f000 fdca 	bl	8017e48 <coap_new_node>
    if (node == NULL)
 80172b4:	4604      	mov	r4, r0
 80172b6:	b1c8      	cbz	r0, 80172ec <coap_session_delay_pdu+0xbc>
    node->id = pdu->tid;
 80172b8:	88f3      	ldrh	r3, [r6, #6]
    node->pdu = pdu;
 80172ba:	e9c0 3607 	strd	r3, r6, [r0, #28]
    if (pdu->type == COAP_MESSAGE_CON && COAP_PROTO_NOT_RELIABLE(session->proto)) {
 80172be:	7833      	ldrb	r3, [r6, #0]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d1d7      	bne.n	8017274 <coap_session_delay_pdu+0x44>
 80172c4:	792b      	ldrb	r3, [r5, #4]
 80172c6:	3b01      	subs	r3, #1
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d8d3      	bhi.n	8017274 <coap_session_delay_pdu+0x44>
 80172cc:	f005 fc72 	bl	801cbb4 <rand>
      node->timeout = coap_calc_timeout(session, r);
 80172d0:	b2c1      	uxtb	r1, r0
 80172d2:	4628      	mov	r0, r5
 80172d4:	f000 fec2 	bl	801805c <coap_calc_timeout>
 80172d8:	6160      	str	r0, [r4, #20]
 80172da:	e7cb      	b.n	8017274 <coap_session_delay_pdu+0x44>
      if (q->id == pdu->tid) {
 80172dc:	88f2      	ldrh	r2, [r6, #6]
 80172de:	69d9      	ldr	r1, [r3, #28]
 80172e0:	4291      	cmp	r1, r2
 80172e2:	d111      	bne.n	8017308 <coap_session_delay_pdu+0xd8>
        coap_log(LOG_ERR, "**  %s: tid=%d: already in-use - dropped\n", coap_session_str(session), pdu->tid);
 80172e4:	f7fd fe7e 	bl	8014fe4 <coap_get_log_level>
 80172e8:	2802      	cmp	r0, #2
 80172ea:	d803      	bhi.n	80172f4 <coap_session_delay_pdu+0xc4>
        return COAP_INVALID_TID;
 80172ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80172f0:	b002      	add	sp, #8
 80172f2:	bd70      	pop	{r4, r5, r6, pc}
        coap_log(LOG_ERR, "**  %s: tid=%d: already in-use - dropped\n", coap_session_str(session), pdu->tid);
 80172f4:	4628      	mov	r0, r5
 80172f6:	f7ff fd51 	bl	8016d9c <coap_session_str>
 80172fa:	88f3      	ldrh	r3, [r6, #6]
 80172fc:	4909      	ldr	r1, [pc, #36]	; (8017324 <coap_session_delay_pdu+0xf4>)
 80172fe:	4602      	mov	r2, r0
 8017300:	2003      	movs	r0, #3
 8017302:	f7fd fed9 	bl	80150b8 <coap_log_impl>
 8017306:	e7f1      	b.n	80172ec <coap_session_delay_pdu+0xbc>
    LL_FOREACH(session->delayqueue, q) {
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	e7d0      	b.n	80172ae <coap_session_delay_pdu+0x7e>
  LL_APPEND(session->delayqueue, node);
 801730c:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
 8017310:	e7bb      	b.n	801728a <coap_session_delay_pdu+0x5a>
 8017312:	bf00      	nop
 8017314:	08030234 	.word	0x08030234
 8017318:	0802ab25 	.word	0x0802ab25
 801731c:	0802ff31 	.word	0x0802ff31
 8017320:	0803026e 	.word	0x0803026e
 8017324:	08030244 	.word	0x08030244

08017328 <coap_session_connected>:
void coap_session_connected(coap_session_t *session) {
 8017328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (session->state != COAP_SESSION_STATE_ESTABLISHED) {
 801732c:	7983      	ldrb	r3, [r0, #6]
 801732e:	2b04      	cmp	r3, #4
void coap_session_connected(coap_session_t *session) {
 8017330:	4604      	mov	r4, r0
  if (session->state != COAP_SESSION_STATE_ESTABLISHED) {
 8017332:	d015      	beq.n	8017360 <coap_session_connected+0x38>
    coap_log(LOG_DEBUG, "***%s: session connected\n",
 8017334:	f7fd fe56 	bl	8014fe4 <coap_get_log_level>
 8017338:	2806      	cmp	r0, #6
 801733a:	d907      	bls.n	801734c <coap_session_connected+0x24>
 801733c:	4620      	mov	r0, r4
 801733e:	f7ff fd2d 	bl	8016d9c <coap_session_str>
 8017342:	4944      	ldr	r1, [pc, #272]	; (8017454 <coap_session_connected+0x12c>)
 8017344:	4602      	mov	r2, r0
 8017346:	2007      	movs	r0, #7
 8017348:	f7fd feb6 	bl	80150b8 <coap_log_impl>
    if (session->state == COAP_SESSION_STATE_CSM)
 801734c:	79a3      	ldrb	r3, [r4, #6]
 801734e:	2b03      	cmp	r3, #3
 8017350:	d106      	bne.n	8017360 <coap_session_connected+0x38>
      coap_handle_event(session->context, COAP_EVENT_SESSION_CONNECTED, session);
 8017352:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017356:	4622      	mov	r2, r4
 8017358:	f242 0101 	movw	r1, #8193	; 0x2001
 801735c:	f001 f9e0 	bl	8018720 <coap_handle_event>
  session->state = COAP_SESSION_STATE_ESTABLISHED;
 8017360:	2304      	movs	r3, #4
 8017362:	71a3      	strb	r3, [r4, #6]
  session->partial_write = 0;
 8017364:	2300      	movs	r3, #0
 8017366:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if ( session->proto==COAP_PROTO_DTLS) {
 801736a:	7923      	ldrb	r3, [r4, #4]
 801736c:	2b02      	cmp	r3, #2
 801736e:	d10f      	bne.n	8017390 <coap_session_connected+0x68>
    session->tls_overhead = coap_dtls_get_overhead(session);
 8017370:	4620      	mov	r0, r4
 8017372:	f7ff fbd1 	bl	8016b18 <coap_dtls_get_overhead>
    if (session->tls_overhead >= session->mtu) {
 8017376:	6923      	ldr	r3, [r4, #16]
    session->tls_overhead = coap_dtls_get_overhead(session);
 8017378:	60e0      	str	r0, [r4, #12]
    if (session->tls_overhead >= session->mtu) {
 801737a:	4298      	cmp	r0, r3
 801737c:	d308      	bcc.n	8017390 <coap_session_connected+0x68>
      session->tls_overhead = session->mtu;
 801737e:	60e3      	str	r3, [r4, #12]
      coap_log(LOG_ERR, "DTLS overhead exceeds MTU\n");
 8017380:	f7fd fe30 	bl	8014fe4 <coap_get_log_level>
 8017384:	2802      	cmp	r0, #2
 8017386:	d903      	bls.n	8017390 <coap_session_connected+0x68>
 8017388:	4933      	ldr	r1, [pc, #204]	; (8017458 <coap_session_connected+0x130>)
 801738a:	2003      	movs	r0, #3
 801738c:	f7fd fe94 	bl	80150b8 <coap_log_impl>
    coap_log(LOG_DEBUG, "** %s: tid=%d: transmitted after delay\n",
 8017390:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 801745c <coap_session_connected+0x134>
      session->con_active++;
 8017394:	2701      	movs	r7, #1
    q->next = NULL;
 8017396:	f04f 0800 	mov.w	r8, #0
  while (session->delayqueue && session->state == COAP_SESSION_STATE_ESTABLISHED) {
 801739a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 801739e:	2d00      	cmp	r5, #0
 80173a0:	d040      	beq.n	8017424 <coap_session_connected+0xfc>
 80173a2:	79a3      	ldrb	r3, [r4, #6]
 80173a4:	2b04      	cmp	r3, #4
 80173a6:	d13d      	bne.n	8017424 <coap_session_connected+0xfc>
    if (q->pdu->type == COAP_MESSAGE_CON && COAP_PROTO_NOT_RELIABLE(session->proto)) {
 80173a8:	6a2b      	ldr	r3, [r5, #32]
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	b943      	cbnz	r3, 80173c0 <coap_session_connected+0x98>
 80173ae:	7923      	ldrb	r3, [r4, #4]
 80173b0:	3b01      	subs	r3, #1
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	d804      	bhi.n	80173c0 <coap_session_connected+0x98>
      if (session->con_active >= COAP_DEFAULT_NSTART)
 80173b6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80173ba:	bb9b      	cbnz	r3, 8017424 <coap_session_connected+0xfc>
      session->con_active++;
 80173bc:	f884 708e 	strb.w	r7, [r4, #142]	; 0x8e
    session->delayqueue = q->next;
 80173c0:	682b      	ldr	r3, [r5, #0]
 80173c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    q->next = NULL;
 80173c6:	f8c5 8000 	str.w	r8, [r5]
    coap_log(LOG_DEBUG, "** %s: tid=%d: transmitted after delay\n",
 80173ca:	f7fd fe0b 	bl	8014fe4 <coap_get_log_level>
 80173ce:	2806      	cmp	r0, #6
 80173d0:	d909      	bls.n	80173e6 <coap_session_connected+0xbe>
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ff fce2 	bl	8016d9c <coap_session_str>
 80173d8:	6a2b      	ldr	r3, [r5, #32]
 80173da:	4602      	mov	r2, r0
 80173dc:	88db      	ldrh	r3, [r3, #6]
 80173de:	4649      	mov	r1, r9
 80173e0:	2007      	movs	r0, #7
 80173e2:	f7fd fe69 	bl	80150b8 <coap_log_impl>
    bytes_written = coap_session_send_pdu(session, q->pdu);
 80173e6:	6a29      	ldr	r1, [r5, #32]
 80173e8:	4620      	mov	r0, r4
 80173ea:	f000 fdf9 	bl	8017fe0 <coap_session_send_pdu>
    if (q->pdu->type == COAP_MESSAGE_CON && COAP_PROTO_NOT_RELIABLE(session->proto)) {
 80173ee:	6a2b      	ldr	r3, [r5, #32]
 80173f0:	781b      	ldrb	r3, [r3, #0]
    bytes_written = coap_session_send_pdu(session, q->pdu);
 80173f2:	4606      	mov	r6, r0
    if (q->pdu->type == COAP_MESSAGE_CON && COAP_PROTO_NOT_RELIABLE(session->proto)) {
 80173f4:	b963      	cbnz	r3, 8017410 <coap_session_connected+0xe8>
 80173f6:	7923      	ldrb	r3, [r4, #4]
 80173f8:	3b01      	subs	r3, #1
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d808      	bhi.n	8017410 <coap_session_connected+0xe8>
      if (coap_wait_ack(session->context, session, q) >= 0)
 80173fe:	462a      	mov	r2, r5
 8017400:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017404:	4621      	mov	r1, r4
 8017406:	f000 fe57 	bl	80180b8 <coap_wait_ack>
        q = NULL;
 801740a:	2800      	cmp	r0, #0
 801740c:	bfa8      	it	ge
 801740e:	2500      	movge	r5, #0
    if (COAP_PROTO_NOT_RELIABLE(session->proto)) {
 8017410:	7923      	ldrb	r3, [r4, #4]
 8017412:	3b01      	subs	r3, #1
 8017414:	2b01      	cmp	r3, #1
 8017416:	d807      	bhi.n	8017428 <coap_session_connected+0x100>
      if (q)
 8017418:	b115      	cbz	r5, 8017420 <coap_session_connected+0xf8>
        coap_delete_node(q);
 801741a:	4628      	mov	r0, r5
 801741c:	f000 fc79 	bl	8017d12 <coap_delete_node>
      if (bytes_written < 0)
 8017420:	2e00      	cmp	r6, #0
 8017422:	daba      	bge.n	801739a <coap_session_connected+0x72>
}
 8017424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (bytes_written <= 0 || (size_t)bytes_written < q->pdu->used_size + q->pdu->hdr_size) {
 8017428:	2e00      	cmp	r6, #0
 801742a:	dc09      	bgt.n	8017440 <coap_session_connected+0x118>
        q->next = session->delayqueue;
 801742c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8017430:	602b      	str	r3, [r5, #0]
        if (bytes_written > 0)
 8017432:	2e00      	cmp	r6, #0
        session->delayqueue = q;
 8017434:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
        if (bytes_written > 0)
 8017438:	ddf4      	ble.n	8017424 <coap_session_connected+0xfc>
          session->partial_write = (size_t)bytes_written;
 801743a:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 801743e:	e7f1      	b.n	8017424 <coap_session_connected+0xfc>
      if (bytes_written <= 0 || (size_t)bytes_written < q->pdu->used_size + q->pdu->hdr_size) {
 8017440:	6a2a      	ldr	r2, [r5, #32]
 8017442:	78d3      	ldrb	r3, [r2, #3]
 8017444:	6912      	ldr	r2, [r2, #16]
 8017446:	4413      	add	r3, r2
 8017448:	42b3      	cmp	r3, r6
 801744a:	d8ef      	bhi.n	801742c <coap_session_connected+0x104>
        coap_delete_node(q);
 801744c:	4628      	mov	r0, r5
 801744e:	f000 fc60 	bl	8017d12 <coap_delete_node>
 8017452:	e7a2      	b.n	801739a <coap_session_connected+0x72>
 8017454:	08030286 	.word	0x08030286
 8017458:	0802ff16 	.word	0x0802ff16
 801745c:	080302a0 	.word	0x080302a0

08017460 <coap_session_disconnected>:
void coap_session_disconnected(coap_session_t *session, coap_nack_reason_t reason) {
 8017460:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017464:	4604      	mov	r4, r0
  coap_session_state_t state = session->state;
 8017466:	7987      	ldrb	r7, [r0, #6]
void coap_session_disconnected(coap_session_t *session, coap_nack_reason_t reason) {
 8017468:	460e      	mov	r6, r1
  coap_log(LOG_DEBUG, "***%s: session disconnected (reason %d)\n",
 801746a:	f7fd fdbb 	bl	8014fe4 <coap_get_log_level>
 801746e:	2806      	cmp	r0, #6
 8017470:	d908      	bls.n	8017484 <coap_session_disconnected+0x24>
 8017472:	4620      	mov	r0, r4
 8017474:	f7ff fc92 	bl	8016d9c <coap_session_str>
 8017478:	494a      	ldr	r1, [pc, #296]	; (80175a4 <coap_session_disconnected+0x144>)
 801747a:	4602      	mov	r2, r0
 801747c:	4633      	mov	r3, r6
 801747e:	2007      	movs	r0, #7
 8017480:	f7fd fe1a 	bl	80150b8 <coap_log_impl>
  coap_delete_observers( session->context, session );
 8017484:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017488:	4621      	mov	r1, r4
 801748a:	f003 fff3 	bl	801b474 <coap_delete_observers>
  if ( session->tls) {
 801748e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8017492:	b143      	cbz	r3, 80174a6 <coap_session_disconnected+0x46>
    if (session->proto == COAP_PROTO_DTLS)
 8017494:	7923      	ldrb	r3, [r4, #4]
 8017496:	2b02      	cmp	r3, #2
 8017498:	d145      	bne.n	8017526 <coap_session_disconnected+0xc6>
      coap_dtls_free_session(session);
 801749a:	4620      	mov	r0, r4
 801749c:	f7ff fb2a 	bl	8016af4 <coap_dtls_free_session>
    session->tls = NULL;
 80174a0:	2300      	movs	r3, #0
 80174a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  if (session->partial_pdu) {
 80174a6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
  session->state = COAP_SESSION_STATE_NONE;
 80174aa:	2500      	movs	r5, #0
 80174ac:	71a5      	strb	r5, [r4, #6]
  if (session->partial_pdu) {
 80174ae:	b118      	cbz	r0, 80174b8 <coap_session_disconnected+0x58>
    coap_delete_pdu(session->partial_pdu);
 80174b0:	f002 fced 	bl	8019e8e <coap_delete_pdu>
    session->partial_pdu = NULL;
 80174b4:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    coap_log(LOG_DEBUG, "** %s: tid=%d: not transmitted after delay\n",
 80174b8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80175a8 <coap_session_disconnected+0x148>
  session->partial_read = 0;
 80174bc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    q->next = NULL;
 80174c0:	f04f 0800 	mov.w	r8, #0
  while (session->delayqueue) {
 80174c4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80174c8:	bb9d      	cbnz	r5, 8017532 <coap_session_disconnected+0xd2>
  coap_cancel_session_messages(session->context, session, reason);
 80174ca:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80174ce:	4632      	mov	r2, r6
 80174d0:	4621      	mov	r1, r4
 80174d2:	f000 fe81 	bl	80181d8 <coap_cancel_session_messages>
  if ( COAP_PROTO_RELIABLE(session->proto) ) {
 80174d6:	7923      	ldrb	r3, [r4, #4]
 80174d8:	3b03      	subs	r3, #3
 80174da:	2b01      	cmp	r3, #1
 80174dc:	d85f      	bhi.n	801759e <coap_session_disconnected+0x13e>
    if (session->sock.flags != COAP_SOCKET_EMPTY) {
 80174de:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80174e2:	b17b      	cbz	r3, 8017504 <coap_session_disconnected+0xa4>
      coap_socket_close(&session->sock);
 80174e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80174e8:	f7fe f9c9 	bl	801587e <coap_socket_close>
      coap_handle_event(session->context,
 80174ec:	f241 0103 	movw	r1, #4099	; 0x1003
 80174f0:	f241 0302 	movw	r3, #4098	; 0x1002
 80174f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80174f8:	4622      	mov	r2, r4
 80174fa:	2f01      	cmp	r7, #1
 80174fc:	bf18      	it	ne
 80174fe:	4619      	movne	r1, r3
 8017500:	f001 f90e 	bl	8018720 <coap_handle_event>
    if (state != COAP_SESSION_STATE_NONE) {
 8017504:	2f00      	cmp	r7, #0
 8017506:	d04a      	beq.n	801759e <coap_session_disconnected+0x13e>
      coap_handle_event(session->context,
 8017508:	f242 0303 	movw	r3, #8195	; 0x2003
 801750c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017510:	f242 0102 	movw	r1, #8194	; 0x2002
 8017514:	4622      	mov	r2, r4
 8017516:	2f04      	cmp	r7, #4
 8017518:	bf18      	it	ne
 801751a:	4619      	movne	r1, r3
}
 801751c:	b002      	add	sp, #8
 801751e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      coap_handle_event(session->context,
 8017522:	f001 b8fd 	b.w	8018720 <coap_handle_event>
    else if (session->proto == COAP_PROTO_TLS)
 8017526:	2b04      	cmp	r3, #4
 8017528:	d1ba      	bne.n	80174a0 <coap_session_disconnected+0x40>
      coap_tls_free_session(session);
 801752a:	4620      	mov	r0, r4
 801752c:	f7ff fafa 	bl	8016b24 <coap_tls_free_session>
 8017530:	e7b6      	b.n	80174a0 <coap_session_disconnected+0x40>
    session->delayqueue = q->next;
 8017532:	682b      	ldr	r3, [r5, #0]
 8017534:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    q->next = NULL;
 8017538:	f8c5 8000 	str.w	r8, [r5]
    coap_log(LOG_DEBUG, "** %s: tid=%d: not transmitted after delay\n",
 801753c:	f7fd fd52 	bl	8014fe4 <coap_get_log_level>
 8017540:	2806      	cmp	r0, #6
 8017542:	d908      	bls.n	8017556 <coap_session_disconnected+0xf6>
 8017544:	4620      	mov	r0, r4
 8017546:	f7ff fc29 	bl	8016d9c <coap_session_str>
 801754a:	69eb      	ldr	r3, [r5, #28]
 801754c:	4602      	mov	r2, r0
 801754e:	4649      	mov	r1, r9
 8017550:	2007      	movs	r0, #7
 8017552:	f7fd fdb1 	bl	80150b8 <coap_log_impl>
    if (q->pdu->type==COAP_MESSAGE_CON
 8017556:	6a2b      	ldr	r3, [r5, #32]
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	b96b      	cbnz	r3, 8017578 <coap_session_disconnected+0x118>
      && COAP_PROTO_NOT_RELIABLE(session->proto)
 801755c:	7923      	ldrb	r3, [r4, #4]
 801755e:	3b01      	subs	r3, #1
 8017560:	2b01      	cmp	r3, #1
 8017562:	d809      	bhi.n	8017578 <coap_session_disconnected+0x118>
      && reason != COAP_NACK_RST)
 8017564:	2e02      	cmp	r6, #2
 8017566:	d007      	beq.n	8017578 <coap_session_disconnected+0x118>
      if (coap_wait_ack(session->context, session, q) >= 0)
 8017568:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 801756c:	462a      	mov	r2, r5
 801756e:	4621      	mov	r1, r4
 8017570:	f000 fda2 	bl	80180b8 <coap_wait_ack>
 8017574:	2800      	cmp	r0, #0
 8017576:	daa5      	bge.n	80174c4 <coap_session_disconnected+0x64>
    if (q && q->pdu->type == COAP_MESSAGE_CON
 8017578:	6a2a      	ldr	r2, [r5, #32]
 801757a:	7813      	ldrb	r3, [r2, #0]
 801757c:	b95b      	cbnz	r3, 8017596 <coap_session_disconnected+0x136>
      && session->context->nack_handler)
 801757e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017582:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8017586:	f1ba 0f00 	cmp.w	sl, #0
 801758a:	d004      	beq.n	8017596 <coap_session_disconnected+0x136>
      session->context->nack_handler(session->context, session, q->pdu,
 801758c:	69eb      	ldr	r3, [r5, #28]
 801758e:	9300      	str	r3, [sp, #0]
 8017590:	4621      	mov	r1, r4
 8017592:	4633      	mov	r3, r6
 8017594:	47d0      	blx	sl
      coap_delete_node(q);
 8017596:	4628      	mov	r0, r5
 8017598:	f000 fbbb 	bl	8017d12 <coap_delete_node>
 801759c:	e792      	b.n	80174c4 <coap_session_disconnected+0x64>
}
 801759e:	b002      	add	sp, #8
 80175a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a4:	080302c8 	.word	0x080302c8
 80175a8:	080302f1 	.word	0x080302f1

080175ac <coap_session_send_csm>:
void coap_session_send_csm(coap_session_t *session) {
 80175ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  assert(COAP_PROTO_RELIABLE(session->proto));
 80175ae:	7903      	ldrb	r3, [r0, #4]
 80175b0:	3b03      	subs	r3, #3
 80175b2:	2b01      	cmp	r3, #1
void coap_session_send_csm(coap_session_t *session) {
 80175b4:	4604      	mov	r4, r0
  assert(COAP_PROTO_RELIABLE(session->proto));
 80175b6:	d906      	bls.n	80175c6 <coap_session_send_csm+0x1a>
 80175b8:	4b28      	ldr	r3, [pc, #160]	; (801765c <coap_session_send_csm+0xb0>)
 80175ba:	4a29      	ldr	r2, [pc, #164]	; (8017660 <coap_session_send_csm+0xb4>)
 80175bc:	4829      	ldr	r0, [pc, #164]	; (8017664 <coap_session_send_csm+0xb8>)
 80175be:	f240 1125 	movw	r1, #293	; 0x125
 80175c2:	f004 fa5b 	bl	801ba7c <__assert_func>
  coap_log(LOG_DEBUG, "***%s: sending CSM\n", coap_session_str(session));
 80175c6:	f7fd fd0d 	bl	8014fe4 <coap_get_log_level>
 80175ca:	2806      	cmp	r0, #6
 80175cc:	d907      	bls.n	80175de <coap_session_send_csm+0x32>
 80175ce:	4620      	mov	r0, r4
 80175d0:	f7ff fbe4 	bl	8016d9c <coap_session_str>
 80175d4:	4924      	ldr	r1, [pc, #144]	; (8017668 <coap_session_send_csm+0xbc>)
 80175d6:	4602      	mov	r2, r0
 80175d8:	2007      	movs	r0, #7
 80175da:	f7fd fd6d 	bl	80150b8 <coap_log_impl>
  session->state = COAP_SESSION_STATE_CSM;
 80175de:	2303      	movs	r3, #3
 80175e0:	71a3      	strb	r3, [r4, #6]
  session->partial_write = 0;
 80175e2:	2300      	movs	r3, #0
 80175e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (session->mtu == 0)
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	b913      	cbnz	r3, 80175f2 <coap_session_send_csm+0x46>
    session->mtu = COAP_DEFAULT_MTU;  /* base value */
 80175ec:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80175f0:	6123      	str	r3, [r4, #16]
  pdu = coap_pdu_init(COAP_MESSAGE_CON, COAP_SIGNALING_CSM, 0, 16);
 80175f2:	2200      	movs	r2, #0
 80175f4:	2310      	movs	r3, #16
 80175f6:	21e1      	movs	r1, #225	; 0xe1
 80175f8:	4610      	mov	r0, r2
 80175fa:	f002 fc17 	bl	8019e2c <coap_pdu_init>
  if ( pdu == NULL
 80175fe:	4605      	mov	r5, r0
 8017600:	b948      	cbnz	r0, 8017616 <coap_session_send_csm+0x6a>
    coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 8017602:	2101      	movs	r1, #1
 8017604:	4620      	mov	r0, r4
 8017606:	f7ff ff2b 	bl	8017460 <coap_session_disconnected>
  if (pdu)
 801760a:	b115      	cbz	r5, 8017612 <coap_session_send_csm+0x66>
    coap_delete_pdu(pdu);
 801760c:	4628      	mov	r0, r5
 801760e:	f002 fc3e 	bl	8019e8e <coap_delete_pdu>
}
 8017612:	b003      	add	sp, #12
 8017614:	bd30      	pop	{r4, r5, pc}
    || coap_add_option(pdu, COAP_SIGNALING_OPTION_MAX_MESSAGE_SIZE,
 8017616:	2104      	movs	r1, #4
 8017618:	4a14      	ldr	r2, [pc, #80]	; (801766c <coap_session_send_csm+0xc0>)
 801761a:	eb0d 0001 	add.w	r0, sp, r1
 801761e:	f000 fa51 	bl	8017ac4 <coap_encode_var_safe>
 8017622:	ab01      	add	r3, sp, #4
 8017624:	4602      	mov	r2, r0
 8017626:	2102      	movs	r1, #2
 8017628:	4628      	mov	r0, r5
 801762a:	f002 fccd 	bl	8019fc8 <coap_add_option>
 801762e:	2800      	cmp	r0, #0
 8017630:	d0e7      	beq.n	8017602 <coap_session_send_csm+0x56>
    || coap_pdu_encode_header(pdu, session->proto) == 0
 8017632:	7921      	ldrb	r1, [r4, #4]
 8017634:	4628      	mov	r0, r5
 8017636:	f002 ff0f 	bl	801a458 <coap_pdu_encode_header>
 801763a:	2800      	cmp	r0, #0
 801763c:	d0e1      	beq.n	8017602 <coap_session_send_csm+0x56>
    ssize_t bytes_written = coap_session_send_pdu(session, pdu);
 801763e:	4629      	mov	r1, r5
 8017640:	4620      	mov	r0, r4
 8017642:	f000 fccd 	bl	8017fe0 <coap_session_send_pdu>
    if (bytes_written != (ssize_t)pdu->used_size + pdu->hdr_size)
 8017646:	78eb      	ldrb	r3, [r5, #3]
 8017648:	692a      	ldr	r2, [r5, #16]
 801764a:	4413      	add	r3, r2
 801764c:	4283      	cmp	r3, r0
 801764e:	d0dd      	beq.n	801760c <coap_session_send_csm+0x60>
      coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 8017650:	2101      	movs	r1, #1
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff ff04 	bl	8017460 <coap_session_disconnected>
 8017658:	e7d8      	b.n	801760c <coap_session_send_csm+0x60>
 801765a:	bf00      	nop
 801765c:	0803031d 	.word	0x0803031d
 8017660:	0802ab3c 	.word	0x0802ab3c
 8017664:	0802ff31 	.word	0x0802ff31
 8017668:	08030341 	.word	0x08030341
 801766c:	00800100 	.word	0x00800100

08017670 <coap_endpoint_get_session>:
  const coap_packet_t *packet, coap_tick_t now) {
 8017670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017674:	ed2d 8b02 	vpush	{d8}
 8017678:	b08d      	sub	sp, #52	; 0x34
 801767a:	e9cd 2304 	strd	r2, r3, [sp, #16]
      coap_address_equals(&session->local_addr, &packet->dst) &&
 801767e:	f101 0320 	add.w	r3, r1, #32
  coap_session_t *oldest_hs = NULL;
 8017682:	2500      	movs	r5, #0
  LL_FOREACH(endpoint->sessions, session) {
 8017684:	6b44      	ldr	r4, [r0, #52]	; 0x34
      coap_address_equals(&session->local_addr, &packet->dst) &&
 8017686:	ee08 3a10 	vmov	s16, r3
  const coap_packet_t *packet, coap_tick_t now) {
 801768a:	4606      	mov	r6, r0
 801768c:	460f      	mov	r7, r1
  coap_session_t *oldest = NULL;
 801768e:	46aa      	mov	sl, r5
  unsigned int num_hs = 0;
 8017690:	46ab      	mov	fp, r5
  unsigned int num_idle = 0;
 8017692:	46a8      	mov	r8, r5
        if ((session->last_rx_tx + COAP_PARTIAL_SESSION_TIMEOUT_TICKS) < now) {
 8017694:	f247 5930 	movw	r9, #30000	; 0x7530
  LL_FOREACH(endpoint->sessions, session) {
 8017698:	b9dc      	cbnz	r4, 80176d2 <coap_endpoint_get_session+0x62>
  if (endpoint->context->max_idle_sessions > 0 &&
 801769a:	6873      	ldr	r3, [r6, #4]
 801769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801769e:	2b00      	cmp	r3, #0
 80176a0:	f000 8084 	beq.w	80177ac <coap_endpoint_get_session+0x13c>
 80176a4:	4543      	cmp	r3, r8
 80176a6:	f200 8081 	bhi.w	80177ac <coap_endpoint_get_session+0x13c>
    coap_session_free(oldest);
 80176aa:	4650      	mov	r0, sl
    coap_session_free(oldest_hs);
 80176ac:	f7ff fbd2 	bl	8016e54 <coap_session_free>
  if (num_hs > (endpoint->context->max_handshake_sessions ?
 80176b0:	6872      	ldr	r2, [r6, #4]
 80176b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
              endpoint->context->max_handshake_sessions :
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	bf08      	it	eq
 80176b8:	2364      	moveq	r3, #100	; 0x64
  if (num_hs > (endpoint->context->max_handshake_sessions ?
 80176ba:	459b      	cmp	fp, r3
 80176bc:	f240 8087 	bls.w	80177ce <coap_endpoint_get_session+0x15e>
    coap_log(LOG_DEBUG,
 80176c0:	f7fd fc90 	bl	8014fe4 <coap_get_log_level>
 80176c4:	2806      	cmp	r0, #6
 80176c6:	d919      	bls.n	80176fc <coap_endpoint_get_session+0x8c>
 80176c8:	496d      	ldr	r1, [pc, #436]	; (8017880 <coap_endpoint_get_session+0x210>)
 80176ca:	2007      	movs	r0, #7
 80176cc:	f7fd fcf4 	bl	80150b8 <coap_log_impl>
 80176d0:	e014      	b.n	80176fc <coap_endpoint_get_session+0x8c>
    if (session->ifindex == packet->ifindex &&
 80176d2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80176d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d116      	bne.n	8017708 <coap_endpoint_get_session+0x98>
      coap_address_equals(&session->local_addr, &packet->dst) &&
 80176da:	ee18 1a10 	vmov	r1, s16
 80176de:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80176e2:	f7fd f9d5 	bl	8014a90 <coap_address_equals>
    if (session->ifindex == packet->ifindex &&
 80176e6:	b178      	cbz	r0, 8017708 <coap_endpoint_get_session+0x98>
      coap_address_equals(&session->remote_addr, &packet->src))
 80176e8:	4639      	mov	r1, r7
 80176ea:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80176ee:	f7fd f9cf 	bl	8014a90 <coap_address_equals>
      coap_address_equals(&session->local_addr, &packet->dst) &&
 80176f2:	b148      	cbz	r0, 8017708 <coap_endpoint_get_session+0x98>
      session->last_rx_tx = now;
 80176f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80176f8:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
}
 80176fc:	4620      	mov	r0, r4
 80176fe:	b00d      	add	sp, #52	; 0x34
 8017700:	ecbd 8b02 	vpop	{d8}
 8017704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (session->ref == 0 && session->delayqueue == NULL) {
 8017708:	68a3      	ldr	r3, [r4, #8]
 801770a:	bbb3      	cbnz	r3, 801777a <coap_endpoint_get_session+0x10a>
 801770c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8017710:	bb9b      	cbnz	r3, 801777a <coap_endpoint_get_session+0x10a>
      if (session->type == COAP_SESSION_TYPE_SERVER) {
 8017712:	7963      	ldrb	r3, [r4, #5]
 8017714:	2b02      	cmp	r3, #2
 8017716:	d134      	bne.n	8017782 <coap_endpoint_get_session+0x112>
        ++num_idle;
 8017718:	f108 0801 	add.w	r8, r8, #1
        if (oldest==NULL || session->last_rx_tx < oldest->last_rx_tx)
 801771c:	f1ba 0f00 	cmp.w	sl, #0
 8017720:	d02d      	beq.n	801777e <coap_endpoint_get_session+0x10e>
 8017722:	e9da 232a 	ldrd	r2, r3, [sl, #168]	; 0xa8
 8017726:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
 801772a:	4299      	cmp	r1, r3
 801772c:	bf08      	it	eq
 801772e:	4290      	cmpeq	r0, r2
 8017730:	bf38      	it	cc
 8017732:	46a2      	movcc	sl, r4
        if (session->state == COAP_SESSION_STATE_HANDSHAKE) {
 8017734:	79a3      	ldrb	r3, [r4, #6]
 8017736:	2b02      	cmp	r3, #2
 8017738:	d11f      	bne.n	801777a <coap_endpoint_get_session+0x10a>
          if ((session->last_rx_tx + COAP_PARTIAL_SESSION_TIMEOUT_TICKS) < now) {
 801773a:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 801773e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017742:	9b06      	ldr	r3, [sp, #24]
 8017744:	eb13 0309 	adds.w	r3, r3, r9
 8017748:	9308      	str	r3, [sp, #32]
 801774a:	9b07      	ldr	r3, [sp, #28]
 801774c:	f143 0300 	adc.w	r3, r3, #0
 8017750:	9309      	str	r3, [sp, #36]	; 0x24
 8017752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
          ++num_hs;
 8017756:	f10b 0b01 	add.w	fp, fp, #1
        if ((session->last_rx_tx + COAP_PARTIAL_SESSION_TIMEOUT_TICKS) < now) {
 801775a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801775e:	428b      	cmp	r3, r1
 8017760:	bf08      	it	eq
 8017762:	4282      	cmpeq	r2, r0
 8017764:	d209      	bcs.n	801777a <coap_endpoint_get_session+0x10a>
          if (oldest_hs == NULL ||
 8017766:	b1fd      	cbz	r5, 80177a8 <coap_endpoint_get_session+0x138>
 8017768:	e9d5 232a 	ldrd	r2, r3, [r5, #168]	; 0xa8
 801776c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017770:	4299      	cmp	r1, r3
 8017772:	bf08      	it	eq
 8017774:	4290      	cmpeq	r0, r2
 8017776:	bf38      	it	cc
 8017778:	4625      	movcc	r5, r4
  LL_FOREACH(endpoint->sessions, session) {
 801777a:	6824      	ldr	r4, [r4, #0]
 801777c:	e78c      	b.n	8017698 <coap_endpoint_get_session+0x28>
 801777e:	46a2      	mov	sl, r4
 8017780:	e7d8      	b.n	8017734 <coap_endpoint_get_session+0xc4>
      else if (session->type == COAP_SESSION_TYPE_HELLO) {
 8017782:	2b03      	cmp	r3, #3
 8017784:	d1f9      	bne.n	801777a <coap_endpoint_get_session+0x10a>
        if ((session->last_rx_tx + COAP_PARTIAL_SESSION_TIMEOUT_TICKS) < now) {
 8017786:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 801778a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801778e:	9b06      	ldr	r3, [sp, #24]
 8017790:	eb13 0309 	adds.w	r3, r3, r9
 8017794:	930a      	str	r3, [sp, #40]	; 0x28
 8017796:	9b07      	ldr	r3, [sp, #28]
 8017798:	f143 0300 	adc.w	r3, r3, #0
 801779c:	930b      	str	r3, [sp, #44]	; 0x2c
 801779e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
        ++num_hs;
 80177a2:	f10b 0b01 	add.w	fp, fp, #1
        if ((session->last_rx_tx + COAP_PARTIAL_SESSION_TIMEOUT_TICKS) < now) {
 80177a6:	e7d8      	b.n	801775a <coap_endpoint_get_session+0xea>
 80177a8:	4625      	mov	r5, r4
 80177aa:	e7e6      	b.n	801777a <coap_endpoint_get_session+0x10a>
  else if (oldest_hs) {
 80177ac:	2d00      	cmp	r5, #0
 80177ae:	f43f af7f 	beq.w	80176b0 <coap_endpoint_get_session+0x40>
    coap_log(LOG_WARNING, "***%s: Incomplete session timed out\n",
 80177b2:	f7fd fc17 	bl	8014fe4 <coap_get_log_level>
 80177b6:	2803      	cmp	r0, #3
 80177b8:	d907      	bls.n	80177ca <coap_endpoint_get_session+0x15a>
 80177ba:	4628      	mov	r0, r5
 80177bc:	f7ff faee 	bl	8016d9c <coap_session_str>
 80177c0:	4930      	ldr	r1, [pc, #192]	; (8017884 <coap_endpoint_get_session+0x214>)
 80177c2:	4602      	mov	r2, r0
 80177c4:	2004      	movs	r0, #4
 80177c6:	f7fd fc77 	bl	80150b8 <coap_log_impl>
    coap_session_free(oldest_hs);
 80177ca:	4628      	mov	r0, r5
 80177cc:	e76e      	b.n	80176ac <coap_endpoint_get_session+0x3c>
  if (endpoint->proto == COAP_PROTO_DTLS) {
 80177ce:	7a30      	ldrb	r0, [r6, #8]
 80177d0:	2802      	cmp	r0, #2
 80177d2:	d126      	bne.n	8017822 <coap_endpoint_get_session+0x1b2>
    size_t length = packet->length;
 80177d4:	6c7d      	ldr	r5, [r7, #68]	; 0x44
    if (length < (OFF_HANDSHAKE_TYPE + 1)) {
 80177d6:	2d0d      	cmp	r5, #13
 80177d8:	d80d      	bhi.n	80177f6 <coap_endpoint_get_session+0x186>
      coap_log(LOG_DEBUG,
 80177da:	f7fd fc03 	bl	8014fe4 <coap_get_log_level>
 80177de:	2806      	cmp	r0, #6
 80177e0:	d98c      	bls.n	80176fc <coap_endpoint_get_session+0x8c>
 80177e2:	230e      	movs	r3, #14
 80177e4:	9300      	str	r3, [sp, #0]
 80177e6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80177ea:	4927      	ldr	r1, [pc, #156]	; (8017888 <coap_endpoint_get_session+0x218>)
 80177ec:	462b      	mov	r3, r5
 80177ee:	2007      	movs	r0, #7
 80177f0:	f7fd fc62 	bl	80150b8 <coap_log_impl>
 80177f4:	e782      	b.n	80176fc <coap_endpoint_get_session+0x8c>
    if (payload[OFF_CONTENT_TYPE] != DTLS_CT_HANDSHAKE ||
 80177f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80177fa:	2b16      	cmp	r3, #22
 80177fc:	d103      	bne.n	8017806 <coap_endpoint_get_session+0x196>
 80177fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017802:	2b01      	cmp	r3, #1
 8017804:	d00d      	beq.n	8017822 <coap_endpoint_get_session+0x1b2>
      coap_log(LOG_DEBUG,
 8017806:	f7fd fbed 	bl	8014fe4 <coap_get_log_level>
 801780a:	2806      	cmp	r0, #6
 801780c:	f67f af76 	bls.w	80176fc <coap_endpoint_get_session+0x8c>
 8017810:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017814:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8017818:	491c      	ldr	r1, [pc, #112]	; (801788c <coap_endpoint_get_session+0x21c>)
 801781a:	2007      	movs	r0, #7
 801781c:	f7fd fc4c 	bl	80150b8 <coap_log_impl>
 8017820:	e76c      	b.n	80176fc <coap_endpoint_get_session+0x8c>
  session = coap_make_session(endpoint->proto, COAP_SESSION_TYPE_SERVER,
 8017822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017824:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8017828:	e9cd 7300 	strd	r7, r3, [sp]
 801782c:	2200      	movs	r2, #0
 801782e:	f107 0320 	add.w	r3, r7, #32
 8017832:	2102      	movs	r1, #2
 8017834:	f7ff f9b0 	bl	8016b98 <coap_make_session>
  if (session) {
 8017838:	4605      	mov	r5, r0
 801783a:	2800      	cmp	r0, #0
 801783c:	f43f af5e 	beq.w	80176fc <coap_endpoint_get_session+0x8c>
    session->last_rx_tx = now;
 8017840:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017844:	e9c0 342a 	strd	r3, r4, [r0, #168]	; 0xa8
    if (endpoint->proto == COAP_PROTO_UDP)
 8017848:	7a33      	ldrb	r3, [r6, #8]
 801784a:	2b01      	cmp	r3, #1
 801784c:	d112      	bne.n	8017874 <coap_endpoint_get_session+0x204>
      session->state = COAP_SESSION_STATE_ESTABLISHED;
 801784e:	2304      	movs	r3, #4
 8017850:	7183      	strb	r3, [r0, #6]
    LL_PREPEND(endpoint->sessions, session);
 8017852:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8017854:	602b      	str	r3, [r5, #0]
 8017856:	6375      	str	r5, [r6, #52]	; 0x34
    coap_log(LOG_DEBUG, "***%s: new incoming session\n",
 8017858:	f7fd fbc4 	bl	8014fe4 <coap_get_log_level>
 801785c:	2806      	cmp	r0, #6
 801785e:	d907      	bls.n	8017870 <coap_endpoint_get_session+0x200>
 8017860:	4628      	mov	r0, r5
 8017862:	f7ff fa9b 	bl	8016d9c <coap_session_str>
 8017866:	490a      	ldr	r1, [pc, #40]	; (8017890 <coap_endpoint_get_session+0x220>)
 8017868:	4602      	mov	r2, r0
 801786a:	2007      	movs	r0, #7
 801786c:	f7fd fc24 	bl	80150b8 <coap_log_impl>
 8017870:	462c      	mov	r4, r5
 8017872:	e743      	b.n	80176fc <coap_endpoint_get_session+0x8c>
    else if (endpoint->proto == COAP_PROTO_DTLS) {
 8017874:	2b02      	cmp	r3, #2
      session->type = COAP_SESSION_TYPE_HELLO;
 8017876:	bf04      	itt	eq
 8017878:	2303      	moveq	r3, #3
 801787a:	7143      	strbeq	r3, [r0, #5]
 801787c:	e7e9      	b.n	8017852 <coap_endpoint_get_session+0x1e2>
 801787e:	bf00      	nop
 8017880:	0803037a 	.word	0x0803037a
 8017884:	08030355 	.word	0x08030355
 8017888:	080303cf 	.word	0x080303cf
 801788c:	08030410 	.word	0x08030410
 8017890:	08030446 	.word	0x08030446

08017894 <coap_new_server_session>:
) {
 8017894:	b530      	push	{r4, r5, lr}
 8017896:	460d      	mov	r5, r1
 8017898:	b087      	sub	sp, #28
  session = coap_make_session( ep->proto, COAP_SESSION_TYPE_SERVER,
 801789a:	2300      	movs	r3, #0
 801789c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178a0:	f101 0214 	add.w	r2, r1, #20
 80178a4:	e9cd 3300 	strd	r3, r3, [sp]
 80178a8:	7a28      	ldrb	r0, [r5, #8]
 80178aa:	2102      	movs	r1, #2
 80178ac:	f7ff f974 	bl	8016b98 <coap_make_session>
  if (!session)
 80178b0:	4604      	mov	r4, r0
 80178b2:	2800      	cmp	r0, #0
 80178b4:	d054      	beq.n	8017960 <coap_new_server_session+0xcc>
  if (!coap_socket_accept_tcp(&ep->sock, &session->sock,
 80178b6:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80178ba:	f100 0254 	add.w	r2, r0, #84	; 0x54
 80178be:	f100 0178 	add.w	r1, r0, #120	; 0x78
 80178c2:	f105 000c 	add.w	r0, r5, #12
 80178c6:	f7fe fd6d 	bl	80163a4 <coap_socket_accept_tcp>
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d048      	beq.n	8017960 <coap_new_server_session+0xcc>
  session->sock.flags |= COAP_SOCKET_NOT_EMPTY | COAP_SOCKET_CONNECTED
 80178ce:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80178d2:	f043 0315 	orr.w	r3, r3, #21
 80178d6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
  LL_PREPEND(ep->sessions, session);
 80178da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	636c      	str	r4, [r5, #52]	; 0x34
    coap_log(LOG_DEBUG, "***%s: new incoming session\n",
 80178e0:	f7fd fb80 	bl	8014fe4 <coap_get_log_level>
 80178e4:	2806      	cmp	r0, #6
 80178e6:	d907      	bls.n	80178f8 <coap_new_server_session+0x64>
 80178e8:	4620      	mov	r0, r4
 80178ea:	f7ff fa57 	bl	8016d9c <coap_session_str>
 80178ee:	491e      	ldr	r1, [pc, #120]	; (8017968 <coap_new_server_session+0xd4>)
 80178f0:	4602      	mov	r2, r0
 80178f2:	2007      	movs	r0, #7
 80178f4:	f7fd fbe0 	bl	80150b8 <coap_log_impl>
  if (session->proto == COAP_PROTO_TCP || session->proto == COAP_PROTO_TLS)
 80178f8:	7923      	ldrb	r3, [r4, #4]
 80178fa:	3b03      	subs	r3, #3
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d806      	bhi.n	801790e <coap_new_server_session+0x7a>
    coap_handle_event(session->context, COAP_EVENT_TCP_CONNECTED, session);
 8017900:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017904:	4622      	mov	r2, r4
 8017906:	f241 0101 	movw	r1, #4097	; 0x1001
 801790a:	f000 ff09 	bl	8018720 <coap_handle_event>
  if (session->proto == COAP_PROTO_TCP) {
 801790e:	7923      	ldrb	r3, [r4, #4]
 8017910:	2b03      	cmp	r3, #3
 8017912:	d105      	bne.n	8017920 <coap_new_server_session+0x8c>
        coap_session_send_csm(session);
 8017914:	4620      	mov	r0, r4
 8017916:	f7ff fe49 	bl	80175ac <coap_session_send_csm>
}
 801791a:	4620      	mov	r0, r4
 801791c:	b007      	add	sp, #28
 801791e:	bd30      	pop	{r4, r5, pc}
  } else if (session->proto == COAP_PROTO_TLS) {
 8017920:	2b04      	cmp	r3, #4
 8017922:	d1fa      	bne.n	801791a <coap_new_server_session+0x86>
    int connected = 0;
 8017924:	2300      	movs	r3, #0
    session->tls = coap_tls_new_server_session(session, &connected);
 8017926:	a905      	add	r1, sp, #20
 8017928:	4620      	mov	r0, r4
    int connected = 0;
 801792a:	9305      	str	r3, [sp, #20]
    session->tls = coap_tls_new_server_session(session, &connected);
 801792c:	f7ff f8f8 	bl	8016b20 <coap_tls_new_server_session>
 8017930:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (session->tls) {
 8017934:	b160      	cbz	r0, 8017950 <coap_new_server_session+0xbc>
      session->state = COAP_SESSION_STATE_HANDSHAKE;
 8017936:	2302      	movs	r3, #2
 8017938:	71a3      	strb	r3, [r4, #6]
      if (connected) {
 801793a:	9b05      	ldr	r3, [sp, #20]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d0ec      	beq.n	801791a <coap_new_server_session+0x86>
        coap_handle_event(session->context, COAP_EVENT_DTLS_CONNECTED, session);
 8017940:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8017944:	4622      	mov	r2, r4
 8017946:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801794a:	f000 fee9 	bl	8018720 <coap_handle_event>
 801794e:	e7e1      	b.n	8017914 <coap_new_server_session+0x80>
  ++session->ref;
 8017950:	68a3      	ldr	r3, [r4, #8]
 8017952:	3301      	adds	r3, #1
 8017954:	60a3      	str	r3, [r4, #8]
      coap_session_release(session);
 8017956:	4620      	mov	r0, r4
 8017958:	f7ff faca 	bl	8016ef0 <coap_session_release>
  return NULL;
 801795c:	2400      	movs	r4, #0
 801795e:	e7dc      	b.n	801791a <coap_new_server_session+0x86>
  coap_session_free(session);
 8017960:	4620      	mov	r0, r4
 8017962:	f7ff fa77 	bl	8016e54 <coap_session_free>
 8017966:	e7f9      	b.n	801795c <coap_new_server_session+0xc8>
 8017968:	08030446 	.word	0x08030446

0801796c <coap_endpoint_str>:

const char *coap_endpoint_str(const coap_endpoint_t *endpoint) {
 801796c:	b538      	push	{r3, r4, r5, lr}
  static char szEndpoint[128];
  char *p = szEndpoint, *end = szEndpoint + sizeof(szEndpoint);
  if (coap_print_addr(&endpoint->bind_addr, (unsigned char*)p, end - p) > 0)
 801796e:	4c0f      	ldr	r4, [pc, #60]	; (80179ac <coap_endpoint_str+0x40>)
const char *coap_endpoint_str(const coap_endpoint_t *endpoint) {
 8017970:	4605      	mov	r5, r0
  if (coap_print_addr(&endpoint->bind_addr, (unsigned char*)p, end - p) > 0)
 8017972:	2280      	movs	r2, #128	; 0x80
 8017974:	4621      	mov	r1, r4
 8017976:	3014      	adds	r0, #20
 8017978:	f7fd fb40 	bl	8014ffc <coap_print_addr>
 801797c:	b178      	cbz	r0, 801799e <coap_endpoint_str+0x32>
    p += strlen(p);
 801797e:	4620      	mov	r0, r4
 8017980:	f7e8 fc80 	bl	8000284 <strlen>
 8017984:	4420      	add	r0, r4
  if (p + 6 < end) {
 8017986:	1d83      	adds	r3, r0, #6
 8017988:	3480      	adds	r4, #128	; 0x80
 801798a:	42a3      	cmp	r3, r4
 801798c:	d205      	bcs.n	801799a <coap_endpoint_str+0x2e>
    if (endpoint->proto == COAP_PROTO_UDP) {
 801798e:	7a2b      	ldrb	r3, [r5, #8]
 8017990:	2b01      	cmp	r3, #1
 8017992:	d106      	bne.n	80179a2 <coap_endpoint_str+0x36>
      strcpy(p, " UDP");
 8017994:	4906      	ldr	r1, [pc, #24]	; (80179b0 <coap_endpoint_str+0x44>)
      p += 4;
    } else if (endpoint->proto == COAP_PROTO_DTLS) {
      strcpy(p, " DTLS");
      p += 5;
    } else {
      strcpy(p, " NONE");
 8017996:	f005 fa0d 	bl	801cdb4 <strcpy>
      p += 5;
    }
  }

  return szEndpoint;
}
 801799a:	4804      	ldr	r0, [pc, #16]	; (80179ac <coap_endpoint_str+0x40>)
 801799c:	bd38      	pop	{r3, r4, r5, pc}
  char *p = szEndpoint, *end = szEndpoint + sizeof(szEndpoint);
 801799e:	4620      	mov	r0, r4
 80179a0:	e7f5      	b.n	801798e <coap_endpoint_str+0x22>
    } else if (endpoint->proto == COAP_PROTO_DTLS) {
 80179a2:	2b02      	cmp	r3, #2
      strcpy(p, " DTLS");
 80179a4:	bf0c      	ite	eq
 80179a6:	4903      	ldreq	r1, [pc, #12]	; (80179b4 <coap_endpoint_str+0x48>)
      strcpy(p, " NONE");
 80179a8:	4903      	ldrne	r1, [pc, #12]	; (80179b8 <coap_endpoint_str+0x4c>)
 80179aa:	e7f4      	b.n	8017996 <coap_endpoint_str+0x2a>
 80179ac:	20007274 	.word	0x20007274
 80179b0:	0803052a 	.word	0x0803052a
 80179b4:	0802ffb4 	.word	0x0802ffb4
 80179b8:	0802ffc6 	.word	0x0802ffc6

080179bc <coap_clock_init>:
  return 0;
}
#endif

void
coap_clock_init(void) {
 80179bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef COAP_CLOCK
  struct timespec tv;
  clock_gettime(COAP_CLOCK, &tv);
 80179be:	2001      	movs	r0, #1
 80179c0:	4669      	mov	r1, sp
 80179c2:	f7e9 fe83 	bl	80016cc <clock_gettime>
#else /* _POSIX_TIMERS */
  struct timeval tv;
  gettimeofday(&tv, NULL);
#endif /* not _POSIX_TIMERS */

  coap_clock_offset = tv.tv_sec;
 80179c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ca:	4b03      	ldr	r3, [pc, #12]	; (80179d8 <coap_clock_init+0x1c>)
 80179cc:	e9c3 0100 	strd	r0, r1, [r3]
}
 80179d0:	b005      	add	sp, #20
 80179d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80179d6:	bf00      	nop
 80179d8:	200072f8 	.word	0x200072f8
 80179dc:	00000000 	.word	0x00000000

080179e0 <coap_ticks>:

/* rounds val up and right shifts by frac positions */
#define SHR_FP(val,frac) (((coap_tick_t)((val) + (1 << ((frac) - 1)))) >> (frac))

void
coap_ticks(coap_tick_t *t) {
 80179e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80179e2:	4606      	mov	r6, r0
  coap_tick_t tmp;

#ifdef COAP_CLOCK
  struct timespec tv;
  clock_gettime(COAP_CLOCK, &tv);
 80179e4:	4669      	mov	r1, sp
 80179e6:	2001      	movs	r0, #1
 80179e8:	f7e9 fe70 	bl	80016cc <clock_gettime>
  tmp = SHR_FP(tv.tv_usec * Q(FRAC, (COAP_TICKS_PER_SECOND/1000000.0)), FRAC);
#endif /* not _POSIX_TIMERS */

  /* Finally, convert temporary FP representation to multiple of
   * COAP_TICKS_PER_SECOND */
  *t = tmp + (tv.tv_sec - coap_clock_offset) * COAP_TICKS_PER_SECOND;
 80179ec:	4b16      	ldr	r3, [pc, #88]	; (8017a48 <coap_ticks+0x68>)
 80179ee:	9c00      	ldr	r4, [sp, #0]
  tmp = SHR_FP(tv.tv_nsec * Q(FRAC, (COAP_TICKS_PER_SECOND/1000000000.0)), FRAC);
 80179f0:	9802      	ldr	r0, [sp, #8]
  *t = tmp + (tv.tv_sec - coap_clock_offset) * COAP_TICKS_PER_SECOND;
 80179f2:	e9d3 2100 	ldrd	r2, r1, [r3]
 80179f6:	9b01      	ldr	r3, [sp, #4]
 80179f8:	1aa4      	subs	r4, r4, r2
 80179fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80179fe:	eb63 0301 	sbc.w	r3, r3, r1
 8017a02:	fba4 4502 	umull	r4, r5, r4, r2
 8017a06:	fb02 5503 	mla	r5, r2, r3, r5
  tmp = SHR_FP(tv.tv_nsec * Q(FRAC, (COAP_TICKS_PER_SECOND/1000000000.0)), FRAC);
 8017a0a:	f7e8 febf 	bl	800078c <__aeabi_i2d>
 8017a0e:	a30c      	add	r3, pc, #48	; (adr r3, 8017a40 <coap_ticks+0x60>)
 8017a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a14:	f7e8 fc3e 	bl	8000294 <__aeabi_dmul>
 8017a18:	2200      	movs	r2, #0
 8017a1a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8017a1e:	f7e8 fd69 	bl	80004f4 <__adddf3>
 8017a22:	f7e8 ff85 	bl	8000930 <__aeabi_d2ulz>
 8017a26:	0a83      	lsrs	r3, r0, #10
 8017a28:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
  *t = tmp + (tv.tv_sec - coap_clock_offset) * COAP_TICKS_PER_SECOND;
 8017a2c:	18e3      	adds	r3, r4, r3
  tmp = SHR_FP(tv.tv_nsec * Q(FRAC, (COAP_TICKS_PER_SECOND/1000000000.0)), FRAC);
 8017a2e:	ea4f 2291 	mov.w	r2, r1, lsr #10
  *t = tmp + (tv.tv_sec - coap_clock_offset) * COAP_TICKS_PER_SECOND;
 8017a32:	eb45 0202 	adc.w	r2, r5, r2
 8017a36:	e9c6 3200 	strd	r3, r2, [r6]
}
 8017a3a:	b004      	add	sp, #16
 8017a3c:	bd70      	pop	{r4, r5, r6, pc}
 8017a3e:	bf00      	nop
 8017a40:	a0b5ed8d 	.word	0xa0b5ed8d
 8017a44:	3f50c6f7 	.word	0x3f50c6f7
 8017a48:	200072f8 	.word	0x200072f8

08017a4c <coap_ticks_to_rt>:

coap_time_t
coap_ticks_to_rt(coap_tick_t t) {
 8017a4c:	b510      	push	{r4, lr}
  return coap_clock_offset + (t / COAP_TICKS_PER_SECOND);
 8017a4e:	4c06      	ldr	r4, [pc, #24]	; (8017a68 <coap_ticks_to_rt+0x1c>)
 8017a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017a54:	2300      	movs	r3, #0
 8017a56:	f7e8 ff53 	bl	8000900 <__aeabi_uldivmod>
 8017a5a:	e9d4 3200 	ldrd	r3, r2, [r4]
}
 8017a5e:	18c0      	adds	r0, r0, r3
 8017a60:	eb42 0101 	adc.w	r1, r2, r1
 8017a64:	bd10      	pop	{r4, pc}
 8017a66:	bf00      	nop
 8017a68:	200072f8 	.word	0x200072f8

08017a6c <coap_fls>:
#include "mem.h"
#include "encode.h"

/* Carsten suggested this when fls() is not available: */
#ifndef HAVE_FLS
int coap_fls(unsigned int i) {
 8017a6c:	b510      	push	{r4, lr}
  return coap_flsll(i);
 8017a6e:	4602      	mov	r2, r0
 8017a70:	2300      	movs	r3, #0

#ifndef HAVE_FLSLL
int coap_flsll(long long i)
{
  int n;
  for (n = 0; i; n++)
 8017a72:	2000      	movs	r0, #0
 8017a74:	ea52 0103 	orrs.w	r1, r2, r3
 8017a78:	d100      	bne.n	8017a7c <coap_fls+0x10>
}
 8017a7a:	bd10      	pop	{r4, pc}
    i >>= 1;
 8017a7c:	0851      	lsrs	r1, r2, #1
 8017a7e:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8017a82:	105c      	asrs	r4, r3, #1
 8017a84:	460a      	mov	r2, r1
 8017a86:	4623      	mov	r3, r4
  for (n = 0; i; n++)
 8017a88:	3001      	adds	r0, #1
 8017a8a:	e7f3      	b.n	8017a74 <coap_fls+0x8>

08017a8c <coap_flsll>:
{
 8017a8c:	b510      	push	{r4, lr}
 8017a8e:	4602      	mov	r2, r0
 8017a90:	460b      	mov	r3, r1
  for (n = 0; i; n++)
 8017a92:	2000      	movs	r0, #0
 8017a94:	ea52 0103 	orrs.w	r1, r2, r3
 8017a98:	d100      	bne.n	8017a9c <coap_flsll+0x10>
  return n;
}
 8017a9a:	bd10      	pop	{r4, pc}
    i >>= 1;
 8017a9c:	0851      	lsrs	r1, r2, #1
 8017a9e:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8017aa2:	105c      	asrs	r4, r3, #1
 8017aa4:	460a      	mov	r2, r1
 8017aa6:	4623      	mov	r3, r4
  for (n = 0; i; n++)
 8017aa8:	3001      	adds	r0, #1
 8017aaa:	e7f3      	b.n	8017a94 <coap_flsll+0x8>

08017aac <coap_decode_var_bytes>:
#endif

unsigned int
coap_decode_var_bytes(const uint8_t *buf,unsigned int len) {
  unsigned int i, n = 0;
  for (i = 0; i < len; ++i)
 8017aac:	4401      	add	r1, r0
  unsigned int i, n = 0;
 8017aae:	2300      	movs	r3, #0
  for (i = 0; i < len; ++i)
 8017ab0:	4288      	cmp	r0, r1
 8017ab2:	d101      	bne.n	8017ab8 <coap_decode_var_bytes+0xc>
    n = (n << 8) + buf[i];

  return n;
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	4770      	bx	lr
    n = (n << 8) + buf[i];
 8017ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017abc:	eb02 2303 	add.w	r3, r2, r3, lsl #8
  for (i = 0; i < len; ++i)
 8017ac0:	e7f6      	b.n	8017ab0 <coap_decode_var_bytes+0x4>
	...

08017ac4 <coap_encode_var_safe>:

unsigned int
coap_encode_var_safe(uint8_t *buf, size_t length, unsigned int val) {
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	4603      	mov	r3, r0
  unsigned int n, i;

  for (n = 0, i = val; i && n < sizeof(val); ++n)
 8017ac8:	4614      	mov	r4, r2
 8017aca:	2000      	movs	r0, #0
 8017acc:	b10c      	cbz	r4, 8017ad2 <coap_encode_var_safe+0xe>
 8017ace:	2804      	cmp	r0, #4
 8017ad0:	d105      	bne.n	8017ade <coap_encode_var_safe+0x1a>
    i >>= 8;

  if (n > length) {
 8017ad2:	4281      	cmp	r1, r0
 8017ad4:	d306      	bcc.n	8017ae4 <coap_encode_var_safe+0x20>
 8017ad6:	1819      	adds	r1, r3, r0
    assert (n <= length);
    return 0;
  }
  i = n;
  while (i--) {
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	d109      	bne.n	8017af0 <coap_encode_var_safe+0x2c>
    buf[i] = val & 0xff;
    val >>= 8;
  }

  return n;
}
 8017adc:	bd10      	pop	{r4, pc}
    i >>= 8;
 8017ade:	0a24      	lsrs	r4, r4, #8
  for (n = 0, i = val; i && n < sizeof(val); ++n)
 8017ae0:	3001      	adds	r0, #1
 8017ae2:	e7f3      	b.n	8017acc <coap_encode_var_safe+0x8>
    assert (n <= length);
 8017ae4:	4b04      	ldr	r3, [pc, #16]	; (8017af8 <coap_encode_var_safe+0x34>)
 8017ae6:	4a05      	ldr	r2, [pc, #20]	; (8017afc <coap_encode_var_safe+0x38>)
 8017ae8:	4805      	ldr	r0, [pc, #20]	; (8017b00 <coap_encode_var_safe+0x3c>)
 8017aea:	2134      	movs	r1, #52	; 0x34
 8017aec:	f003 ffc6 	bl	801ba7c <__assert_func>
    buf[i] = val & 0xff;
 8017af0:	f801 2d01 	strb.w	r2, [r1, #-1]!
    val >>= 8;
 8017af4:	0a12      	lsrs	r2, r2, #8
 8017af6:	e7ef      	b.n	8017ad8 <coap_encode_var_safe+0x14>
 8017af8:	0803052f 	.word	0x0803052f
 8017afc:	0802ab52 	.word	0x0802ab52
 8017b00:	0803053b 	.word	0x0803053b

08017b04 <coap_malloc_type>:
#endif /* __GNUC__ */

void *
coap_malloc_type(coap_memory_tag_t type, size_t size) {
  (void)type;
  return malloc(size);
 8017b04:	4608      	mov	r0, r1
 8017b06:	f004 bb7d 	b.w	801c204 <malloc>

08017b0a <coap_free_type>:
}

void
coap_free_type(coap_memory_tag_t type, void *p) {
  (void)type;
  free(p);
 8017b0a:	4608      	mov	r0, r1
 8017b0c:	f004 bb82 	b.w	801c214 <free>

08017b10 <coap_get_context_server_hint>:

static size_t
coap_get_context_server_hint(
  const coap_session_t *session,
  uint8_t *hint, size_t max_hint_len
) {
 8017b10:	b510      	push	{r4, lr}
 8017b12:	4604      	mov	r4, r0
 8017b14:	4613      	mov	r3, r2
  const coap_context_t *ctx = session->context;
 8017b16:	f8d4 4084 	ldr.w	r4, [r4, #132]	; 0x84
) {
 8017b1a:	4608      	mov	r0, r1
  if (ctx && ctx->psk_hint && ctx->psk_hint_len > 0 && ctx->psk_hint_len <= max_hint_len) {
 8017b1c:	b154      	cbz	r4, 8017b34 <coap_get_context_server_hint+0x24>
 8017b1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017b20:	b141      	cbz	r1, 8017b34 <coap_get_context_server_hint+0x24>
 8017b22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017b24:	b122      	cbz	r2, 8017b30 <coap_get_context_server_hint+0x20>
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d804      	bhi.n	8017b34 <coap_get_context_server_hint+0x24>
    memcpy(hint, ctx->psk_hint, ctx->psk_hint_len);
 8017b2a:	f004 fb89 	bl	801c240 <memcpy>
    return ctx->psk_hint_len;
 8017b2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  }
  return 0;
}
 8017b30:	4610      	mov	r0, r2
 8017b32:	bd10      	pop	{r4, pc}
  return 0;
 8017b34:	2200      	movs	r2, #0
 8017b36:	e7fb      	b.n	8017b30 <coap_get_context_server_hint+0x20>

08017b38 <coap_get_context_server_psk>:
) {
 8017b38:	b510      	push	{r4, lr}
  const coap_context_t *ctx = session->context;
 8017b3a:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  if (ctx && ctx->psk_key && ctx->psk_key_len > 0 && ctx->psk_key_len <= max_psk_len) {
 8017b3e:	b164      	cbz	r4, 8017b5a <coap_get_context_server_psk+0x22>
 8017b40:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8017b42:	b151      	cbz	r1, 8017b5a <coap_get_context_server_psk+0x22>
 8017b44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b46:	b132      	cbz	r2, 8017b56 <coap_get_context_server_psk+0x1e>
 8017b48:	9802      	ldr	r0, [sp, #8]
 8017b4a:	4282      	cmp	r2, r0
 8017b4c:	d805      	bhi.n	8017b5a <coap_get_context_server_psk+0x22>
    memcpy(psk, ctx->psk_key, ctx->psk_key_len);
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f004 fb76 	bl	801c240 <memcpy>
    return ctx->psk_key_len;
 8017b54:	6e62      	ldr	r2, [r4, #100]	; 0x64
}
 8017b56:	4610      	mov	r0, r2
 8017b58:	bd10      	pop	{r4, pc}
  return 0;
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	e7fb      	b.n	8017b56 <coap_get_context_server_psk+0x1e>

08017b5e <coap_get_session_client_psk>:
) {
 8017b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (session->psk_identity && session->psk_identity_len > 0 && session->psk_key && session->psk_key_len > 0) {
 8017b60:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
) {
 8017b64:	9d06      	ldr	r5, [sp, #24]
 8017b66:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	469c      	mov	ip, r3
  if (session->psk_identity && session->psk_identity_len > 0 && session->psk_key && session->psk_key_len > 0) {
 8017b6e:	b1d9      	cbz	r1, 8017ba8 <coap_get_session_client_psk+0x4a>
 8017b70:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 8017b74:	b1c2      	cbz	r2, 8017ba8 <coap_get_session_client_psk+0x4a>
 8017b76:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8017b7a:	b1ab      	cbz	r3, 8017ba8 <coap_get_session_client_psk+0x4a>
 8017b7c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8017b80:	b193      	cbz	r3, 8017ba8 <coap_get_session_client_psk+0x4a>
    if (session->psk_identity_len <= max_identity_len && session->psk_key_len <= max_psk_len) {
 8017b82:	9807      	ldr	r0, [sp, #28]
 8017b84:	4282      	cmp	r2, r0
 8017b86:	d822      	bhi.n	8017bce <coap_get_session_client_psk+0x70>
 8017b88:	42bb      	cmp	r3, r7
 8017b8a:	d820      	bhi.n	8017bce <coap_get_session_client_psk+0x70>
      memcpy(identity, session->psk_identity, session->psk_identity_len);
 8017b8c:	4660      	mov	r0, ip
 8017b8e:	f004 fb57 	bl	801c240 <memcpy>
      memcpy(psk, session->psk_key, session->psk_key_len);
 8017b92:	e9d4 1236 	ldrd	r1, r2, [r4, #216]	; 0xd8
 8017b96:	4630      	mov	r0, r6
 8017b98:	f004 fb52 	bl	801c240 <memcpy>
      *identity_len = session->psk_identity_len;
 8017b9c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8017ba0:	602b      	str	r3, [r5, #0]
      return session->psk_key_len;
 8017ba2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
}
 8017ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (session->context && session->context->psk_key && session->context->psk_key_len > 0) {
 8017ba8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017bac:	b17b      	cbz	r3, 8017bce <coap_get_session_client_psk+0x70>
 8017bae:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8017bb0:	b169      	cbz	r1, 8017bce <coap_get_session_client_psk+0x70>
 8017bb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017bb4:	b15a      	cbz	r2, 8017bce <coap_get_session_client_psk+0x70>
    if (session->context->psk_key_len <= max_psk_len) {
 8017bb6:	42ba      	cmp	r2, r7
 8017bb8:	d809      	bhi.n	8017bce <coap_get_session_client_psk+0x70>
      *identity_len = 0;
 8017bba:	2200      	movs	r2, #0
 8017bbc:	602a      	str	r2, [r5, #0]
      memcpy(psk, session->context->psk_key, session->context->psk_key_len);
 8017bbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f004 fb3d 	bl	801c240 <memcpy>
      return session->context->psk_key_len;
 8017bc6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017bca:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8017bcc:	e7eb      	b.n	8017ba6 <coap_get_session_client_psk+0x48>
  *identity_len = 0;
 8017bce:	2000      	movs	r0, #0
 8017bd0:	6028      	str	r0, [r5, #0]
  return 0;
 8017bd2:	e7e8      	b.n	8017ba6 <coap_get_session_client_psk+0x48>

08017bd4 <coap_address_copy>:
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 8017bd4:	b570      	push	{r4, r5, r6, lr}
 8017bd6:	460d      	mov	r5, r1
  memset( dst, 0, sizeof( coap_address_t ) );
 8017bd8:	2220      	movs	r2, #32
 8017bda:	2100      	movs	r1, #0
coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
 8017bdc:	4604      	mov	r4, r0
  memset( dst, 0, sizeof( coap_address_t ) );
 8017bde:	f004 fb57 	bl	801c290 <memset>
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 8017be2:	796b      	ldrb	r3, [r5, #5]
  dst->size = src->size;
 8017be4:	682a      	ldr	r2, [r5, #0]
 8017be6:	6022      	str	r2, [r4, #0]
  if ( src->addr.sa.sa_family == AF_INET6 ) {
 8017be8:	2b0a      	cmp	r3, #10
 8017bea:	d10c      	bne.n	8017c06 <coap_address_copy+0x32>
    dst->addr.sin6.sin6_family = src->addr.sin6.sin6_family;
 8017bec:	7163      	strb	r3, [r4, #5]
    dst->addr.sin6.sin6_addr = src->addr.sin6.sin6_addr;
 8017bee:	f105 030c 	add.w	r3, r5, #12
 8017bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017bf4:	f104 060c 	add.w	r6, r4, #12
 8017bf8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    dst->addr.sin6.sin6_port = src->addr.sin6.sin6_port;
 8017bfc:	88eb      	ldrh	r3, [r5, #6]
 8017bfe:	80e3      	strh	r3, [r4, #6]
    dst->addr.sin6.sin6_scope_id = src->addr.sin6.sin6_scope_id;
 8017c00:	69eb      	ldr	r3, [r5, #28]
 8017c02:	61e3      	str	r3, [r4, #28]
}
 8017c04:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( src->addr.sa.sa_family == AF_INET ) {
 8017c06:	2b02      	cmp	r3, #2
 8017c08:	f104 0404 	add.w	r4, r4, #4
 8017c0c:	f105 0104 	add.w	r1, r5, #4
 8017c10:	d103      	bne.n	8017c1a <coap_address_copy+0x46>
    dst->addr.sin = src->addr.sin;
 8017c12:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8017c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017c18:	e7f4      	b.n	8017c04 <coap_address_copy+0x30>
    memcpy( &dst->addr, &src->addr, src->size );
 8017c1a:	4620      	mov	r0, r4
}
 8017c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy( &dst->addr, &src->addr, src->size );
 8017c20:	f004 bb0e 	b.w	801c240 <memcpy>

08017c24 <no_response>:
 * @return RESPONSE_DEFAULT when no special treatment is requested,
 *         RESPONSE_DROP    when the response must be discarded, or
 *         RESPONSE_SEND    when the response must be sent.
 */
static enum respond_t
no_response(coap_pdu_t *request, coap_pdu_t *response) {
 8017c24:	b570      	push	{r4, r5, r6, lr}
 8017c26:	460d      	mov	r5, r1
 8017c28:	b086      	sub	sp, #24
  coap_opt_t *nores;
  coap_opt_iterator_t opt_iter;
  unsigned int val = 0;

  assert(request);
 8017c2a:	b930      	cbnz	r0, 8017c3a <no_response+0x16>
 8017c2c:	4b16      	ldr	r3, [pc, #88]	; (8017c88 <no_response+0x64>)
 8017c2e:	4a17      	ldr	r2, [pc, #92]	; (8017c8c <no_response+0x68>)
 8017c30:	f240 713e 	movw	r1, #1854	; 0x73e
  assert(response);
 8017c34:	4816      	ldr	r0, [pc, #88]	; (8017c90 <no_response+0x6c>)
 8017c36:	f003 ff21 	bl	801ba7c <__assert_func>
 8017c3a:	b921      	cbnz	r1, 8017c46 <no_response+0x22>
 8017c3c:	4b15      	ldr	r3, [pc, #84]	; (8017c94 <no_response+0x70>)
 8017c3e:	4a13      	ldr	r2, [pc, #76]	; (8017c8c <no_response+0x68>)
 8017c40:	f240 713f 	movw	r1, #1855	; 0x73f
 8017c44:	e7f6      	b.n	8017c34 <no_response+0x10>

  if (COAP_RESPONSE_CLASS(response->code) > 0) {
 8017c46:	784c      	ldrb	r4, [r1, #1]
 8017c48:	0964      	lsrs	r4, r4, #5
 8017c4a:	d01a      	beq.n	8017c82 <no_response+0x5e>
    nores = coap_check_option(request, COAP_OPTION_NORESPONSE, &opt_iter);
 8017c4c:	466a      	mov	r2, sp
 8017c4e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8017c52:	f002 f8a7 	bl	8019da4 <coap_check_option>

    if (nores) {
 8017c56:	4604      	mov	r4, r0
 8017c58:	b198      	cbz	r0, 8017c82 <no_response+0x5e>
      val = coap_decode_var_bytes(coap_opt_value(nores), coap_opt_length(nores));
 8017c5a:	f001 ff5b 	bl	8019b14 <coap_opt_value>
 8017c5e:	4606      	mov	r6, r0
 8017c60:	4620      	mov	r0, r4
 8017c62:	f001 ff1d 	bl	8019aa0 <coap_opt_length>
 8017c66:	4601      	mov	r1, r0
 8017c68:	4630      	mov	r0, r6
 8017c6a:	f7ff ff1f 	bl	8017aac <coap_decode_var_bytes>
      /* The response should be dropped when the bit corresponding to
       * the response class is set (cf. table in function
       * documentation). When a No-Response option is present and the
       * bit is not set, the sender explicitly indicates interest in
       * this response. */
      if (((1 << (COAP_RESPONSE_CLASS(response->code) - 1)) & val) > 0) {
 8017c6e:	786b      	ldrb	r3, [r5, #1]
 8017c70:	095b      	lsrs	r3, r3, #5
 8017c72:	2201      	movs	r2, #1
 8017c74:	3b01      	subs	r3, #1
 8017c76:	fa02 f303 	lsl.w	r3, r2, r3
        return RESPONSE_DROP;
      } else {
        return RESPONSE_SEND;
 8017c7a:	4203      	tst	r3, r0
 8017c7c:	bf14      	ite	ne
 8017c7e:	4614      	movne	r4, r2
 8017c80:	2402      	moveq	r4, #2

  /* Default behavior applies when we are not dealing with a response
   * (class == 0) or the request did not contain a No-Response option.
   */
  return RESPONSE_DEFAULT;
}
 8017c82:	4620      	mov	r0, r4
 8017c84:	b006      	add	sp, #24
 8017c86:	bd70      	pop	{r4, r5, r6, pc}
 8017c88:	080305a4 	.word	0x080305a4
 8017c8c:	0802ab67 	.word	0x0802ab67
 8017c90:	080305ac 	.word	0x080305ac
 8017c94:	0802cc9f 	.word	0x0802cc9f

08017c98 <coap_insert_node>:
coap_insert_node(coap_queue_t **queue, coap_queue_t *node) {
 8017c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!queue || !node)
 8017c9c:	b120      	cbz	r0, 8017ca8 <coap_insert_node+0x10>
 8017c9e:	b3b1      	cbz	r1, 8017d0e <coap_insert_node+0x76>
  if (!*queue) {
 8017ca0:	6803      	ldr	r3, [r0, #0]
 8017ca2:	b91b      	cbnz	r3, 8017cac <coap_insert_node+0x14>
    *queue = node;
 8017ca4:	6001      	str	r1, [r0, #0]
  return 1;
 8017ca6:	2001      	movs	r0, #1
}
 8017ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (node->t < q->t) {
 8017cac:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 8017cb0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8017cb4:	454d      	cmp	r5, r9
 8017cb6:	bf08      	it	eq
 8017cb8:	4544      	cmpeq	r4, r8
 8017cba:	d208      	bcs.n	8017cce <coap_insert_node+0x36>
    node->next = q;
 8017cbc:	600b      	str	r3, [r1, #0]
    *queue = node;
 8017cbe:	6001      	str	r1, [r0, #0]
    q->t -= node->t;                /* make q->t relative to node->t */
 8017cc0:	ebb8 0104 	subs.w	r1, r8, r4
 8017cc4:	eb69 0205 	sbc.w	r2, r9, r5
 8017cc8:	e9c3 1202 	strd	r1, r2, [r3, #8]
    return 1;
 8017ccc:	e7eb      	b.n	8017ca6 <coap_insert_node+0xe>
    node->t -= q->t;                /* make node-> relative to q->t */
 8017cce:	e9d3 2002 	ldrd	r2, r0, [r3, #8]
 8017cd2:	e9d1 c802 	ldrd	ip, r8, [r1, #8]
 8017cd6:	469e      	mov	lr, r3
 8017cd8:	ebbc 0602 	subs.w	r6, ip, r2
    q = q->next;
 8017cdc:	681b      	ldr	r3, [r3, #0]
    node->t -= q->t;                /* make node-> relative to q->t */
 8017cde:	eb68 0700 	sbc.w	r7, r8, r0
 8017ce2:	e9c1 6702 	strd	r6, r7, [r1, #8]
  } while (q && q->t <= node->t);
 8017ce6:	b173      	cbz	r3, 8017d06 <coap_insert_node+0x6e>
 8017ce8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8017cec:	42af      	cmp	r7, r5
 8017cee:	bf08      	it	eq
 8017cf0:	42a6      	cmpeq	r6, r4
 8017cf2:	d2ec      	bcs.n	8017cce <coap_insert_node+0x36>
    q->t -= node->t;                /* make q->t relative to node->t */
 8017cf4:	1912      	adds	r2, r2, r4
 8017cf6:	eb45 0000 	adc.w	r0, r5, r0
 8017cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8017cfe:	eb60 0008 	sbc.w	r0, r0, r8
 8017d02:	e9c3 2002 	strd	r2, r0, [r3, #8]
  node->next = q;
 8017d06:	600b      	str	r3, [r1, #0]
  p->next = node;
 8017d08:	f8ce 1000 	str.w	r1, [lr]
 8017d0c:	e7cb      	b.n	8017ca6 <coap_insert_node+0xe>
    return 0;
 8017d0e:	4608      	mov	r0, r1
 8017d10:	e7ca      	b.n	8017ca8 <coap_insert_node+0x10>

08017d12 <coap_delete_node>:
coap_delete_node(coap_queue_t *node) {
 8017d12:	b510      	push	{r4, lr}
  if (!node)
 8017d14:	4604      	mov	r4, r0
 8017d16:	b198      	cbz	r0, 8017d40 <coap_delete_node+0x2e>
  coap_delete_pdu(node->pdu);
 8017d18:	6a00      	ldr	r0, [r0, #32]
 8017d1a:	f002 f8b8 	bl	8019e8e <coap_delete_pdu>
  if ( node->session ) {
 8017d1e:	69a0      	ldr	r0, [r4, #24]
 8017d20:	b148      	cbz	r0, 8017d36 <coap_delete_node+0x24>
    if (node->session->context->sendqueue) {
 8017d22:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8017d26:	6a13      	ldr	r3, [r2, #32]
 8017d28:	b11b      	cbz	r3, 8017d32 <coap_delete_node+0x20>
      LL_DELETE(node->session->context->sendqueue, node);
 8017d2a:	429c      	cmp	r4, r3
 8017d2c:	d109      	bne.n	8017d42 <coap_delete_node+0x30>
 8017d2e:	6823      	ldr	r3, [r4, #0]
 8017d30:	6213      	str	r3, [r2, #32]
    coap_session_release(node->session);
 8017d32:	f7ff f8dd 	bl	8016ef0 <coap_session_release>
  coap_free_type(COAP_NODE, node);
 8017d36:	2004      	movs	r0, #4
 8017d38:	4621      	mov	r1, r4
 8017d3a:	f7ff fee6 	bl	8017b0a <coap_free_type>
 8017d3e:	2001      	movs	r0, #1
}
 8017d40:	bd10      	pop	{r4, pc}
      LL_DELETE(node->session->context->sendqueue, node);
 8017d42:	461a      	mov	r2, r3
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d0f3      	beq.n	8017d32 <coap_delete_node+0x20>
 8017d4a:	429c      	cmp	r4, r3
 8017d4c:	d1f9      	bne.n	8017d42 <coap_delete_node+0x30>
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	6013      	str	r3, [r2, #0]
 8017d52:	e7ee      	b.n	8017d32 <coap_delete_node+0x20>

08017d54 <coap_write_session.isra.0>:
coap_write_session(coap_context_t *ctx, coap_session_t *session, coap_tick_t now) {
 8017d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d58:	461f      	mov	r7, r3
  assert(session->sock.flags & COAP_SOCKET_CONNECTED);
 8017d5a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8017d5e:	075b      	lsls	r3, r3, #29
coap_write_session(coap_context_t *ctx, coap_session_t *session, coap_tick_t now) {
 8017d60:	4604      	mov	r4, r0
 8017d62:	4616      	mov	r6, r2
  assert(session->sock.flags & COAP_SOCKET_CONNECTED);
 8017d64:	d521      	bpl.n	8017daa <coap_write_session.isra.0+0x56>
    coap_log(LOG_DEBUG, "** %s: tid=%d: transmitted after delay\n",
 8017d66:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8017e2c <coap_write_session.isra.0+0xd8>
    session->partial_write = 0;
 8017d6a:	f04f 0900 	mov.w	r9, #0
  while (session->delayqueue) {
 8017d6e:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8017d72:	b34d      	cbz	r5, 8017dc8 <coap_write_session.isra.0+0x74>
    coap_log(LOG_DEBUG, "** %s: tid=%d: transmitted after delay\n",
 8017d74:	f7fd f936 	bl	8014fe4 <coap_get_log_level>
 8017d78:	2806      	cmp	r0, #6
 8017d7a:	d909      	bls.n	8017d90 <coap_write_session.isra.0+0x3c>
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	f7ff f80d 	bl	8016d9c <coap_session_str>
 8017d82:	6a2b      	ldr	r3, [r5, #32]
 8017d84:	4602      	mov	r2, r0
 8017d86:	88db      	ldrh	r3, [r3, #6]
 8017d88:	4641      	mov	r1, r8
 8017d8a:	2007      	movs	r0, #7
 8017d8c:	f7fd f994 	bl	80150b8 <coap_log_impl>
    assert(session->partial_write < q->pdu->used_size + q->pdu->hdr_size);
 8017d90:	6a28      	ldr	r0, [r5, #32]
 8017d92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8017d96:	78c1      	ldrb	r1, [r0, #3]
 8017d98:	6902      	ldr	r2, [r0, #16]
 8017d9a:	440a      	add	r2, r1
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d30b      	bcc.n	8017db8 <coap_write_session.isra.0+0x64>
 8017da0:	4b1e      	ldr	r3, [pc, #120]	; (8017e1c <coap_write_session.isra.0+0xc8>)
 8017da2:	4a1f      	ldr	r2, [pc, #124]	; (8017e20 <coap_write_session.isra.0+0xcc>)
 8017da4:	f240 413b 	movw	r1, #1083	; 0x43b
 8017da8:	e003      	b.n	8017db2 <coap_write_session.isra.0+0x5e>
  assert(session->sock.flags & COAP_SOCKET_CONNECTED);
 8017daa:	4b1e      	ldr	r3, [pc, #120]	; (8017e24 <coap_write_session.isra.0+0xd0>)
 8017dac:	4a1c      	ldr	r2, [pc, #112]	; (8017e20 <coap_write_session.isra.0+0xcc>)
 8017dae:	f240 4134 	movw	r1, #1076	; 0x434
    assert(session->partial_write < q->pdu->used_size + q->pdu->hdr_size);
 8017db2:	481d      	ldr	r0, [pc, #116]	; (8017e28 <coap_write_session.isra.0+0xd4>)
 8017db4:	f003 fe62 	bl	801ba7c <__assert_func>
    switch (session->proto) {
 8017db8:	f894 c004 	ldrb.w	ip, [r4, #4]
 8017dbc:	f1bc 0f03 	cmp.w	ip, #3
 8017dc0:	d004      	beq.n	8017dcc <coap_write_session.isra.0+0x78>
 8017dc2:	f1bc 0f04 	cmp.w	ip, #4
 8017dc6:	d01c      	beq.n	8017e02 <coap_write_session.isra.0+0xae>
}
 8017dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          q->pdu->token - q->pdu->hdr_size - session->partial_write,
 8017dcc:	6980      	ldr	r0, [r0, #24]
 8017dce:	4419      	add	r1, r3
        bytes_written = coap_session_write(
 8017dd0:	1a41      	subs	r1, r0, r1
 8017dd2:	1ad2      	subs	r2, r2, r3
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7ff f9ff 	bl	80171d8 <coap_session_write>
    if (bytes_written > 0)
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	ddf4      	ble.n	8017dc8 <coap_write_session.isra.0+0x74>
    if (bytes_written <= 0 || (size_t)bytes_written < q->pdu->used_size + q->pdu->hdr_size - session->partial_write) {
 8017dde:	6a29      	ldr	r1, [r5, #32]
 8017de0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8017de4:	690b      	ldr	r3, [r1, #16]
      session->last_rx_tx = now;
 8017de6:	e9c4 672a 	strd	r6, r7, [r4, #168]	; 0xa8
    if (bytes_written <= 0 || (size_t)bytes_written < q->pdu->used_size + q->pdu->hdr_size - session->partial_write) {
 8017dea:	78c9      	ldrb	r1, [r1, #3]
 8017dec:	1a9b      	subs	r3, r3, r2
 8017dee:	440b      	add	r3, r1
 8017df0:	4283      	cmp	r3, r0
 8017df2:	d80e      	bhi.n	8017e12 <coap_write_session.isra.0+0xbe>
    session->delayqueue = q->next;
 8017df4:	682b      	ldr	r3, [r5, #0]
    coap_delete_node(q);
 8017df6:	4628      	mov	r0, r5
    session->partial_write = 0;
 8017df8:	e9c4 3924 	strd	r3, r9, [r4, #144]	; 0x90
    coap_delete_node(q);
 8017dfc:	f7ff ff89 	bl	8017d12 <coap_delete_node>
 8017e00:	e7b5      	b.n	8017d6e <coap_write_session.isra.0+0x1a>
          q->pdu->token - q->pdu->hdr_size - session->partial_write,
 8017e02:	6980      	ldr	r0, [r0, #24]
 8017e04:	4419      	add	r1, r3
        bytes_written = coap_tls_write(
 8017e06:	1a41      	subs	r1, r0, r1
 8017e08:	1ad2      	subs	r2, r2, r3
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7fe fe8b 	bl	8016b26 <coap_tls_write>
        break;
 8017e10:	e7e3      	b.n	8017dda <coap_write_session.isra.0+0x86>
        session->partial_write += (size_t)bytes_written;
 8017e12:	4410      	add	r0, r2
 8017e14:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8017e18:	e7d6      	b.n	8017dc8 <coap_write_session.isra.0+0x74>
 8017e1a:	bf00      	nop
 8017e1c:	0803063e 	.word	0x0803063e
 8017e20:	0802ab73 	.word	0x0802ab73
 8017e24:	08030612 	.word	0x08030612
 8017e28:	080305ac 	.word	0x080305ac
 8017e2c:	080302a0 	.word	0x080302a0

08017e30 <coap_delete_all>:
coap_delete_all(coap_queue_t *queue) {
 8017e30:	b510      	push	{r4, lr}
  if (!queue)
 8017e32:	4604      	mov	r4, r0
 8017e34:	b138      	cbz	r0, 8017e46 <coap_delete_all+0x16>
  coap_delete_all(queue->next);
 8017e36:	6800      	ldr	r0, [r0, #0]
 8017e38:	f7ff fffa 	bl	8017e30 <coap_delete_all>
  coap_delete_node(queue);
 8017e3c:	4620      	mov	r0, r4
}
 8017e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coap_delete_node(queue);
 8017e42:	f7ff bf66 	b.w	8017d12 <coap_delete_node>
}
 8017e46:	bd10      	pop	{r4, pc}

08017e48 <coap_new_node>:
coap_new_node(void) {
 8017e48:	b510      	push	{r4, lr}
  return (coap_queue_t *)coap_malloc_type(COAP_NODE, sizeof(coap_queue_t));
 8017e4a:	2128      	movs	r1, #40	; 0x28
 8017e4c:	2004      	movs	r0, #4
 8017e4e:	f7ff fe59 	bl	8017b04 <coap_malloc_type>
  if (!node) {
 8017e52:	4604      	mov	r4, r0
 8017e54:	b948      	cbnz	r0, 8017e6a <coap_new_node+0x22>
    coap_log(LOG_WARNING, "coap_new_node: malloc\n");
 8017e56:	f7fd f8c5 	bl	8014fe4 <coap_get_log_level>
 8017e5a:	2803      	cmp	r0, #3
 8017e5c:	d903      	bls.n	8017e66 <coap_new_node+0x1e>
 8017e5e:	4905      	ldr	r1, [pc, #20]	; (8017e74 <coap_new_node+0x2c>)
 8017e60:	2004      	movs	r0, #4
 8017e62:	f7fd f929 	bl	80150b8 <coap_log_impl>
}
 8017e66:	4620      	mov	r0, r4
 8017e68:	bd10      	pop	{r4, pc}
  memset(node, 0, sizeof(*node));
 8017e6a:	2228      	movs	r2, #40	; 0x28
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	f004 fa0f 	bl	801c290 <memset>
  return node;
 8017e72:	e7f8      	b.n	8017e66 <coap_new_node+0x1e>
 8017e74:	0803067c 	.word	0x0803067c

08017e78 <coap_peek_next>:
  if (!context || !context->sendqueue)
 8017e78:	b100      	cbz	r0, 8017e7c <coap_peek_next+0x4>
 8017e7a:	6a00      	ldr	r0, [r0, #32]
}
 8017e7c:	4770      	bx	lr

08017e7e <coap_pop_next>:
coap_pop_next(coap_context_t *context) {
 8017e7e:	b530      	push	{r4, r5, lr}
  if (!context || !context->sendqueue)
 8017e80:	4603      	mov	r3, r0
 8017e82:	b178      	cbz	r0, 8017ea4 <coap_pop_next+0x26>
 8017e84:	6a00      	ldr	r0, [r0, #32]
 8017e86:	b168      	cbz	r0, 8017ea4 <coap_pop_next+0x26>
  context->sendqueue = context->sendqueue->next;
 8017e88:	6802      	ldr	r2, [r0, #0]
 8017e8a:	621a      	str	r2, [r3, #32]
  if (context->sendqueue) {
 8017e8c:	b142      	cbz	r2, 8017ea0 <coap_pop_next+0x22>
    context->sendqueue->t += next->t;
 8017e8e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8017e92:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 8017e96:	191b      	adds	r3, r3, r4
 8017e98:	eb45 0101 	adc.w	r1, r5, r1
 8017e9c:	e9c2 3102 	strd	r3, r1, [r2, #8]
  next->next = NULL;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	6003      	str	r3, [r0, #0]
}
 8017ea4:	bd30      	pop	{r4, r5, pc}

08017ea6 <coap_free_context>:
coap_free_context(coap_context_t *context) {
 8017ea6:	b538      	push	{r3, r4, r5, lr}
  if (!context)
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	b338      	cbz	r0, 8017efc <coap_free_context+0x56>
  coap_delete_all(context->sendqueue);
 8017eac:	6a00      	ldr	r0, [r0, #32]
 8017eae:	f7ff ffbf 	bl	8017e30 <coap_delete_all>
  coap_delete_all_resources(context);
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f002 fcb9 	bl	801a82a <coap_delete_all_resources>
  LL_FOREACH_SAFE(context->endpoint, ep, tmp) {
 8017eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017eba:	b120      	cbz	r0, 8017ec6 <coap_free_context+0x20>
 8017ebc:	6805      	ldr	r5, [r0, #0]
    coap_free_endpoint(ep);
 8017ebe:	f7ff f849 	bl	8016f54 <coap_free_endpoint>
  LL_FOREACH_SAFE(context->endpoint, ep, tmp) {
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	e7f9      	b.n	8017eba <coap_free_context+0x14>
  LL_FOREACH_SAFE(context->sessions, sp, stmp) {
 8017ec6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017ec8:	b120      	cbz	r0, 8017ed4 <coap_free_context+0x2e>
 8017eca:	6805      	ldr	r5, [r0, #0]
    coap_session_release(sp);
 8017ecc:	f7ff f810 	bl	8016ef0 <coap_session_release>
  LL_FOREACH_SAFE(context->sessions, sp, stmp) {
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	e7f9      	b.n	8017ec8 <coap_free_context+0x22>
  if (context->dtls_context)
 8017ed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017ed6:	b108      	cbz	r0, 8017edc <coap_free_context+0x36>
    coap_dtls_free_context(context->dtls_context);
 8017ed8:	f7fe fe07 	bl	8016aea <coap_dtls_free_context>
  if (context->psk_hint)
 8017edc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017ede:	b111      	cbz	r1, 8017ee6 <coap_free_context+0x40>
 8017ee0:	2000      	movs	r0, #0
 8017ee2:	f7ff fe12 	bl	8017b0a <coap_free_type>
  if (context->psk_key)
 8017ee6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8017ee8:	b111      	cbz	r1, 8017ef0 <coap_free_context+0x4a>
 8017eea:	2000      	movs	r0, #0
 8017eec:	f7ff fe0d 	bl	8017b0a <coap_free_type>
  coap_free_type(COAP_CONTEXT, context);
 8017ef0:	4621      	mov	r1, r4
 8017ef2:	2005      	movs	r0, #5
}
 8017ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  coap_free_type(COAP_CONTEXT, context);
 8017ef8:	f7ff be07 	b.w	8017b0a <coap_free_type>
}
 8017efc:	bd38      	pop	{r3, r4, r5, pc}
	...

08017f00 <coap_option_check_critical>:
  coap_opt_filter_t unknown) {
 8017f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f02:	b087      	sub	sp, #28
 8017f04:	4604      	mov	r4, r0
 8017f06:	4615      	mov	r5, r2
 8017f08:	4608      	mov	r0, r1
  coap_option_iterator_init(pdu, &opt_iter, COAP_OPT_ALL);
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	4669      	mov	r1, sp
 8017f0e:	f001 fd83 	bl	8019a18 <coap_option_iterator_init>
          coap_log(LOG_DEBUG, "unknown critical option %d\n", opt_iter.type);
 8017f12:	4f32      	ldr	r7, [pc, #200]	; (8017fdc <coap_option_check_critical+0xdc>)
  int ok = 1;
 8017f14:	2601      	movs	r6, #1
  while (coap_option_next(&opt_iter)) {
 8017f16:	4668      	mov	r0, sp
 8017f18:	f001 fef6 	bl	8019d08 <coap_option_next>
 8017f1c:	b910      	cbnz	r0, 8017f24 <coap_option_check_critical+0x24>
}
 8017f1e:	4630      	mov	r0, r6
 8017f20:	b007      	add	sp, #28
 8017f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (opt_iter.type & 0x01) {
 8017f24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017f28:	07cb      	lsls	r3, r1, #31
 8017f2a:	d5f4      	bpl.n	8017f16 <coap_option_check_critical+0x16>
      switch (opt_iter.type) {
 8017f2c:	291b      	cmp	r1, #27
 8017f2e:	d83b      	bhi.n	8017fa8 <coap_option_check_critical+0xa8>
 8017f30:	1e4b      	subs	r3, r1, #1
 8017f32:	2b1a      	cmp	r3, #26
 8017f34:	d83c      	bhi.n	8017fb0 <coap_option_check_critical+0xb0>
 8017f36:	a201      	add	r2, pc, #4	; (adr r2, 8017f3c <coap_option_check_critical+0x3c>)
 8017f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f3c:	08017f17 	.word	0x08017f17
 8017f40:	08017fb1 	.word	0x08017fb1
 8017f44:	08017f17 	.word	0x08017f17
 8017f48:	08017fb1 	.word	0x08017fb1
 8017f4c:	08017f17 	.word	0x08017f17
 8017f50:	08017fb1 	.word	0x08017fb1
 8017f54:	08017f17 	.word	0x08017f17
 8017f58:	08017fb1 	.word	0x08017fb1
 8017f5c:	08017fb1 	.word	0x08017fb1
 8017f60:	08017fb1 	.word	0x08017fb1
 8017f64:	08017f17 	.word	0x08017f17
 8017f68:	08017fb1 	.word	0x08017fb1
 8017f6c:	08017fb1 	.word	0x08017fb1
 8017f70:	08017fb1 	.word	0x08017fb1
 8017f74:	08017f17 	.word	0x08017f17
 8017f78:	08017fb1 	.word	0x08017fb1
 8017f7c:	08017f17 	.word	0x08017f17
 8017f80:	08017fb1 	.word	0x08017fb1
 8017f84:	08017fb1 	.word	0x08017fb1
 8017f88:	08017fb1 	.word	0x08017fb1
 8017f8c:	08017fb1 	.word	0x08017fb1
 8017f90:	08017fb1 	.word	0x08017fb1
 8017f94:	08017f17 	.word	0x08017f17
 8017f98:	08017fb1 	.word	0x08017fb1
 8017f9c:	08017fb1 	.word	0x08017fb1
 8017fa0:	08017fb1 	.word	0x08017fb1
 8017fa4:	08017f17 	.word	0x08017f17
 8017fa8:	f021 0304 	bic.w	r3, r1, #4
 8017fac:	2b23      	cmp	r3, #35	; 0x23
 8017fae:	d0b2      	beq.n	8017f16 <coap_option_check_critical+0x16>
        if (coap_option_filter_get(ctx->known_options, opt_iter.type) <= 0) {
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f001 fea5 	bl	8019d00 <coap_option_filter_get>
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	dcad      	bgt.n	8017f16 <coap_option_check_critical+0x16>
          coap_log(LOG_DEBUG, "unknown critical option %d\n", opt_iter.type);
 8017fba:	f7fd f813 	bl	8014fe4 <coap_get_log_level>
 8017fbe:	2806      	cmp	r0, #6
 8017fc0:	d905      	bls.n	8017fce <coap_option_check_critical+0xce>
 8017fc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017fc6:	4639      	mov	r1, r7
 8017fc8:	2007      	movs	r0, #7
 8017fca:	f7fd f875 	bl	80150b8 <coap_log_impl>
          if (coap_option_filter_set(unknown, opt_iter.type) == -1) {
 8017fce:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	f001 fe8e 	bl	8019cf4 <coap_option_filter_set>
          ok = 0;
 8017fd8:	2600      	movs	r6, #0
 8017fda:	e79c      	b.n	8017f16 <coap_option_check_critical+0x16>
 8017fdc:	08030703 	.word	0x08030703

08017fe0 <coap_session_send_pdu>:
coap_session_send_pdu(coap_session_t *session, coap_pdu_t *pdu) {
 8017fe0:	b538      	push	{r3, r4, r5, lr}
  assert(pdu->hdr_size > 0);
 8017fe2:	78cb      	ldrb	r3, [r1, #3]
coap_session_send_pdu(coap_session_t *session, coap_pdu_t *pdu) {
 8017fe4:	460d      	mov	r5, r1
  assert(pdu->hdr_size > 0);
 8017fe6:	b933      	cbnz	r3, 8017ff6 <coap_session_send_pdu+0x16>
 8017fe8:	4b19      	ldr	r3, [pc, #100]	; (8018050 <coap_session_send_pdu+0x70>)
 8017fea:	4a1a      	ldr	r2, [pc, #104]	; (8018054 <coap_session_send_pdu+0x74>)
 8017fec:	481a      	ldr	r0, [pc, #104]	; (8018058 <coap_session_send_pdu+0x78>)
 8017fee:	f44f 711e 	mov.w	r1, #632	; 0x278
 8017ff2:	f003 fd43 	bl	801ba7c <__assert_func>
  switch(session->proto) {
 8017ff6:	7902      	ldrb	r2, [r0, #4]
 8017ff8:	3a01      	subs	r2, #1
 8017ffa:	2a03      	cmp	r2, #3
 8017ffc:	d825      	bhi.n	801804a <coap_session_send_pdu+0x6a>
 8017ffe:	e8df f002 	tbb	[pc, r2]
 8018002:	0f02      	.short	0x0f02
 8018004:	1d16      	.short	0x1d16
      bytes_written = coap_session_send(session, pdu->token - pdu->hdr_size,
 8018006:	692a      	ldr	r2, [r5, #16]
 8018008:	69a9      	ldr	r1, [r5, #24]
 801800a:	441a      	add	r2, r3
 801800c:	1ac9      	subs	r1, r1, r3
 801800e:	f7ff f8a1 	bl	8017154 <coap_session_send>
      bytes_written = coap_tls_write(session, pdu->token - pdu->hdr_size,
 8018012:	4604      	mov	r4, r0
  coap_show_pdu(LOG_DEBUG, pdu);
 8018014:	4629      	mov	r1, r5
 8018016:	2007      	movs	r0, #7
 8018018:	f7fd f8b0 	bl	801517c <coap_show_pdu>
}
 801801c:	4620      	mov	r0, r4
 801801e:	bd38      	pop	{r3, r4, r5, pc}
      bytes_written = coap_dtls_send(session, pdu->token - pdu->hdr_size,
 8018020:	692a      	ldr	r2, [r5, #16]
 8018022:	69a9      	ldr	r1, [r5, #24]
 8018024:	441a      	add	r2, r3
 8018026:	1ac9      	subs	r1, r1, r3
 8018028:	f7fe fd65 	bl	8016af6 <coap_dtls_send>
 801802c:	e7f1      	b.n	8018012 <coap_session_send_pdu+0x32>
      bytes_written = coap_session_write(session, pdu->token - pdu->hdr_size,
 801802e:	692a      	ldr	r2, [r5, #16]
 8018030:	69a9      	ldr	r1, [r5, #24]
 8018032:	441a      	add	r2, r3
 8018034:	1ac9      	subs	r1, r1, r3
 8018036:	f7ff f8cf 	bl	80171d8 <coap_session_write>
 801803a:	e7ea      	b.n	8018012 <coap_session_send_pdu+0x32>
      bytes_written = coap_tls_write(session, pdu->token - pdu->hdr_size,
 801803c:	692a      	ldr	r2, [r5, #16]
 801803e:	69a9      	ldr	r1, [r5, #24]
 8018040:	441a      	add	r2, r3
 8018042:	1ac9      	subs	r1, r1, r3
 8018044:	f7fe fd6f 	bl	8016b26 <coap_tls_write>
 8018048:	e7e3      	b.n	8018012 <coap_session_send_pdu+0x32>
  switch(session->proto) {
 801804a:	f04f 34ff 	mov.w	r4, #4294967295
 801804e:	e7e1      	b.n	8018014 <coap_session_send_pdu+0x34>
 8018050:	0803071f 	.word	0x0803071f
 8018054:	0802abaa 	.word	0x0802abaa
 8018058:	080305ac 	.word	0x080305ac

0801805c <coap_calc_timeout>:
coap_calc_timeout(coap_session_t *session, unsigned char r) {
 801805c:	b530      	push	{r4, r5, lr}
  result = SHR_FP((ACK_RANDOM_FACTOR - FP1) * r, MAX_BITS);
 801805e:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 8018062:	f8b0 20ec 	ldrh.w	r2, [r0, #236]	; 0xec
 8018066:	01a4      	lsls	r4, r4, #6
 8018068:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801806c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8018070:	fbb4 f4f5 	udiv	r4, r4, r5
 8018074:	eb04 1482 	add.w	r4, r4, r2, lsl #6
 8018078:	b2a4      	uxth	r4, r4
 801807a:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
 801807e:	434a      	muls	r2, r1
 8018080:	3280      	adds	r2, #128	; 0x80
 8018082:	1213      	asrs	r3, r2, #8
  result = SHR_FP(((result + FP1) * ACK_TIMEOUT), FRAC_BITS);
 8018084:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8018088:	f8b0 30ea 	ldrh.w	r3, [r0, #234]	; 0xea
 801808c:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
 8018090:	019b      	lsls	r3, r3, #6
 8018092:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8018096:	fbb3 f3f5 	udiv	r3, r3, r5
 801809a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801809e:	b29b      	uxth	r3, r3
 80180a0:	4353      	muls	r3, r2
 80180a2:	3320      	adds	r3, #32
 80180a4:	099b      	lsrs	r3, r3, #6
  return SHR_FP((COAP_TICKS_PER_SECOND * result), FRAC_BITS);
 80180a6:	2020      	movs	r0, #32
 80180a8:	2100      	movs	r1, #0
 80180aa:	fbe5 0103 	umlal	r0, r1, r5, r3
 80180ae:	0980      	lsrs	r0, r0, #6
}
 80180b0:	ea40 6081 	orr.w	r0, r0, r1, lsl #26
 80180b4:	bd30      	pop	{r4, r5, pc}
	...

080180b8 <coap_wait_ack>:
              coap_queue_t *node) {
 80180b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ba:	4605      	mov	r5, r0
 80180bc:	b085      	sub	sp, #20
  node->session = coap_session_reference(session);
 80180be:	4608      	mov	r0, r1
              coap_queue_t *node) {
 80180c0:	4614      	mov	r4, r2
  node->session = coap_session_reference(session);
 80180c2:	f7fe fdd9 	bl	8016c78 <coap_session_reference>
 80180c6:	61a0      	str	r0, [r4, #24]
  coap_ticks(&now);
 80180c8:	a802      	add	r0, sp, #8
 80180ca:	f7ff fc89 	bl	80179e0 <coap_ticks>
  if (context->sendqueue == NULL) {
 80180ce:	6a29      	ldr	r1, [r5, #32]
 80180d0:	6962      	ldr	r2, [r4, #20]
 80180d2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80180d6:	bb39      	cbnz	r1, 8018128 <coap_wait_ack+0x70>
    node->t = node->timeout;
 80180d8:	e9c4 2102 	strd	r2, r1, [r4, #8]
    context->sendqueue_basetime = now;
 80180dc:	e9c5 3006 	strd	r3, r0, [r5, #24]
  coap_insert_node(&context->sendqueue, node);
 80180e0:	4621      	mov	r1, r4
 80180e2:	f105 0020 	add.w	r0, r5, #32
 80180e6:	f7ff fdd7 	bl	8017c98 <coap_insert_node>
  coap_log(LOG_DEBUG, "** %s: tid=%d added to retransmit queue (%ums)\n",
 80180ea:	f7fc ff7b 	bl	8014fe4 <coap_get_log_level>
 80180ee:	2806      	cmp	r0, #6
 80180f0:	d917      	bls.n	8018122 <coap_wait_ack+0x6a>
 80180f2:	69a0      	ldr	r0, [r4, #24]
 80180f4:	f7fe fe52 	bl	8016d9c <coap_session_str>
 80180f8:	68a3      	ldr	r3, [r4, #8]
 80180fa:	68e6      	ldr	r6, [r4, #12]
 80180fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018100:	4605      	mov	r5, r0
 8018102:	fba3 0102 	umull	r0, r1, r3, r2
 8018106:	fb02 1106 	mla	r1, r2, r6, r1
 801810a:	2300      	movs	r3, #0
 801810c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018110:	f7e8 fbf6 	bl	8000900 <__aeabi_uldivmod>
 8018114:	69e3      	ldr	r3, [r4, #28]
 8018116:	9000      	str	r0, [sp, #0]
 8018118:	4909      	ldr	r1, [pc, #36]	; (8018140 <coap_wait_ack+0x88>)
 801811a:	462a      	mov	r2, r5
 801811c:	2007      	movs	r0, #7
 801811e:	f7fc ffcb 	bl	80150b8 <coap_log_impl>
}
 8018122:	69e0      	ldr	r0, [r4, #28]
 8018124:	b005      	add	sp, #20
 8018126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    node->t = (now - context->sendqueue_basetime) + node->timeout;
 8018128:	69a9      	ldr	r1, [r5, #24]
 801812a:	1a5e      	subs	r6, r3, r1
 801812c:	69eb      	ldr	r3, [r5, #28]
 801812e:	eb60 0703 	sbc.w	r7, r0, r3
 8018132:	18b6      	adds	r6, r6, r2
 8018134:	f147 0700 	adc.w	r7, r7, #0
 8018138:	e9c4 6702 	strd	r6, r7, [r4, #8]
 801813c:	e7d0      	b.n	80180e0 <coap_wait_ack+0x28>
 801813e:	bf00      	nop
 8018140:	08030731 	.word	0x08030731

08018144 <coap_remove_from_queue>:
coap_remove_from_queue(coap_queue_t **queue, coap_session_t *session, coap_tid_t id, coap_queue_t **node) {
 8018144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018146:	460d      	mov	r5, r1
 8018148:	4616      	mov	r6, r2
  if (!queue || !*queue)
 801814a:	b330      	cbz	r0, 801819a <coap_remove_from_queue+0x56>
 801814c:	6804      	ldr	r4, [r0, #0]
 801814e:	2c00      	cmp	r4, #0
 8018150:	d03e      	beq.n	80181d0 <coap_remove_from_queue+0x8c>
  if (session == (*queue)->session && id == (*queue)->id) { /* found transaction */
 8018152:	69a2      	ldr	r2, [r4, #24]
 8018154:	428a      	cmp	r2, r1
 8018156:	d122      	bne.n	801819e <coap_remove_from_queue+0x5a>
 8018158:	69e2      	ldr	r2, [r4, #28]
 801815a:	42b2      	cmp	r2, r6
 801815c:	d11f      	bne.n	801819e <coap_remove_from_queue+0x5a>
    *node = *queue;
 801815e:	601c      	str	r4, [r3, #0]
    *queue = (*queue)->next;
 8018160:	6822      	ldr	r2, [r4, #0]
 8018162:	6002      	str	r2, [r0, #0]
    if (*queue) {          /* adjust relative time of new queue head */
 8018164:	6819      	ldr	r1, [r3, #0]
 8018166:	b142      	cbz	r2, 801817a <coap_remove_from_queue+0x36>
      (*queue)->t += (*node)->t;
 8018168:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 801816c:	e9d1 7402 	ldrd	r7, r4, [r1, #8]
 8018170:	19db      	adds	r3, r3, r7
 8018172:	eb44 0000 	adc.w	r0, r4, r0
 8018176:	e9c2 3002 	strd	r3, r0, [r2, #8]
    (*node)->next = NULL;
 801817a:	2300      	movs	r3, #0
 801817c:	600b      	str	r3, [r1, #0]
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 801817e:	f7fc ff31 	bl	8014fe4 <coap_get_log_level>
 8018182:	2806      	cmp	r0, #6
 8018184:	d908      	bls.n	8018198 <coap_remove_from_queue+0x54>
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 8018186:	4628      	mov	r0, r5
 8018188:	f7fe fe08 	bl	8016d9c <coap_session_str>
 801818c:	4911      	ldr	r1, [pc, #68]	; (80181d4 <coap_remove_from_queue+0x90>)
 801818e:	4602      	mov	r2, r0
 8018190:	4633      	mov	r3, r6
 8018192:	2007      	movs	r0, #7
 8018194:	f7fc ff90 	bl	80150b8 <coap_log_impl>
    return 1;
 8018198:	2001      	movs	r0, #1
}
 801819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
coap_remove_from_queue(coap_queue_t **queue, coap_session_t *session, coap_tid_t id, coap_queue_t **node) {
 801819c:	4604      	mov	r4, r0
    q = q->next;
 801819e:	6820      	ldr	r0, [r4, #0]
  } while (q && (session != q->session || id != q->id));
 80181a0:	2800      	cmp	r0, #0
 80181a2:	d0fa      	beq.n	801819a <coap_remove_from_queue+0x56>
 80181a4:	6982      	ldr	r2, [r0, #24]
 80181a6:	42aa      	cmp	r2, r5
 80181a8:	d1f8      	bne.n	801819c <coap_remove_from_queue+0x58>
 80181aa:	69c2      	ldr	r2, [r0, #28]
 80181ac:	42b2      	cmp	r2, r6
 80181ae:	d1f5      	bne.n	801819c <coap_remove_from_queue+0x58>
    p->next = q->next;
 80181b0:	6802      	ldr	r2, [r0, #0]
 80181b2:	6022      	str	r2, [r4, #0]
    if (p->next) {                /* must update relative time of p->next */
 80181b4:	b142      	cbz	r2, 80181c8 <coap_remove_from_queue+0x84>
      p->next->t += q->t;
 80181b6:	e9d2 1402 	ldrd	r1, r4, [r2, #8]
 80181ba:	6887      	ldr	r7, [r0, #8]
 80181bc:	19c9      	adds	r1, r1, r7
 80181be:	68c7      	ldr	r7, [r0, #12]
 80181c0:	eb47 0404 	adc.w	r4, r7, r4
 80181c4:	e9c2 1402 	strd	r1, r4, [r2, #8]
    q->next = NULL;
 80181c8:	2200      	movs	r2, #0
 80181ca:	6002      	str	r2, [r0, #0]
    *node = q;
 80181cc:	6018      	str	r0, [r3, #0]
 80181ce:	e7d6      	b.n	801817e <coap_remove_from_queue+0x3a>
    return 0;
 80181d0:	4620      	mov	r0, r4
 80181d2:	e7e2      	b.n	801819a <coap_remove_from_queue+0x56>
 80181d4:	08030761 	.word	0x08030761

080181d8 <coap_cancel_session_messages>:
  coap_nack_reason_t reason) {
 80181d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 80181dc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8018288 <coap_cancel_session_messages+0xb0>
  coap_nack_reason_t reason) {
 80181e0:	4606      	mov	r6, r0
 80181e2:	460f      	mov	r7, r1
 80181e4:	4690      	mov	r8, r2
  while (context->sendqueue && context->sendqueue->session == session) {
 80181e6:	6a35      	ldr	r5, [r6, #32]
 80181e8:	b135      	cbz	r5, 80181f8 <coap_cancel_session_messages+0x20>
 80181ea:	69ab      	ldr	r3, [r5, #24]
 80181ec:	682c      	ldr	r4, [r5, #0]
 80181ee:	42bb      	cmp	r3, r7
 80181f0:	d005      	beq.n	80181fe <coap_cancel_session_messages+0x26>
      coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 80181f2:	f8df a094 	ldr.w	sl, [pc, #148]	; 8018288 <coap_cancel_session_messages+0xb0>
  while (q) {
 80181f6:	b9fc      	cbnz	r4, 8018238 <coap_cancel_session_messages+0x60>
}
 80181f8:	b002      	add	sp, #8
 80181fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    context->sendqueue = q->next;
 80181fe:	6234      	str	r4, [r6, #32]
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 8018200:	f7fc fef0 	bl	8014fe4 <coap_get_log_level>
 8018204:	2806      	cmp	r0, #6
 8018206:	d908      	bls.n	801821a <coap_cancel_session_messages+0x42>
 8018208:	4638      	mov	r0, r7
 801820a:	f7fe fdc7 	bl	8016d9c <coap_session_str>
 801820e:	69eb      	ldr	r3, [r5, #28]
 8018210:	4602      	mov	r2, r0
 8018212:	4649      	mov	r1, r9
 8018214:	2007      	movs	r0, #7
 8018216:	f7fc ff4f 	bl	80150b8 <coap_log_impl>
    if (q->pdu->type == COAP_MESSAGE_CON && context->nack_handler)
 801821a:	6a2a      	ldr	r2, [r5, #32]
 801821c:	7813      	ldrb	r3, [r2, #0]
 801821e:	b93b      	cbnz	r3, 8018230 <coap_cancel_session_messages+0x58>
 8018220:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8018222:	b12c      	cbz	r4, 8018230 <coap_cancel_session_messages+0x58>
      context->nack_handler(context, session, q->pdu, reason, q->id);
 8018224:	69eb      	ldr	r3, [r5, #28]
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	4639      	mov	r1, r7
 801822a:	4643      	mov	r3, r8
 801822c:	4630      	mov	r0, r6
 801822e:	47a0      	blx	r4
    coap_delete_node(q);
 8018230:	4628      	mov	r0, r5
 8018232:	f7ff fd6e 	bl	8017d12 <coap_delete_node>
 8018236:	e7d6      	b.n	80181e6 <coap_cancel_session_messages+0xe>
    if (q->session == session) {
 8018238:	69a2      	ldr	r2, [r4, #24]
 801823a:	6823      	ldr	r3, [r4, #0]
 801823c:	42ba      	cmp	r2, r7
 801823e:	d120      	bne.n	8018282 <coap_cancel_session_messages+0xaa>
      p->next = q->next;
 8018240:	602b      	str	r3, [r5, #0]
      coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 8018242:	f7fc fecf 	bl	8014fe4 <coap_get_log_level>
 8018246:	2806      	cmp	r0, #6
 8018248:	d908      	bls.n	801825c <coap_cancel_session_messages+0x84>
 801824a:	4638      	mov	r0, r7
 801824c:	f7fe fda6 	bl	8016d9c <coap_session_str>
 8018250:	69e3      	ldr	r3, [r4, #28]
 8018252:	4602      	mov	r2, r0
 8018254:	4651      	mov	r1, sl
 8018256:	2007      	movs	r0, #7
 8018258:	f7fc ff2e 	bl	80150b8 <coap_log_impl>
      if (q->pdu->type == COAP_MESSAGE_CON && context->nack_handler)
 801825c:	6a22      	ldr	r2, [r4, #32]
 801825e:	7813      	ldrb	r3, [r2, #0]
 8018260:	b953      	cbnz	r3, 8018278 <coap_cancel_session_messages+0xa0>
 8018262:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 8018266:	f1b9 0f00 	cmp.w	r9, #0
 801826a:	d005      	beq.n	8018278 <coap_cancel_session_messages+0xa0>
        context->nack_handler(context, session, q->pdu, reason, q->id);
 801826c:	69e3      	ldr	r3, [r4, #28]
 801826e:	9300      	str	r3, [sp, #0]
 8018270:	4639      	mov	r1, r7
 8018272:	4643      	mov	r3, r8
 8018274:	4630      	mov	r0, r6
 8018276:	47c8      	blx	r9
      coap_delete_node(q);
 8018278:	4620      	mov	r0, r4
 801827a:	f7ff fd4a 	bl	8017d12 <coap_delete_node>
      q = p->next;
 801827e:	682b      	ldr	r3, [r5, #0]
 8018280:	462c      	mov	r4, r5
 8018282:	4625      	mov	r5, r4
 8018284:	461c      	mov	r4, r3
 8018286:	e7b6      	b.n	80181f6 <coap_cancel_session_messages+0x1e>
 8018288:	08030761 	.word	0x08030761

0801828c <coap_cancel_all_messages>:
  const uint8_t *token, size_t token_length) {
 801828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 8018290:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801833c <coap_cancel_all_messages+0xb0>
  const uint8_t *token, size_t token_length) {
 8018294:	4605      	mov	r5, r0
 8018296:	4688      	mov	r8, r1
 8018298:	4691      	mov	r9, r2
 801829a:	461f      	mov	r7, r3
  while (context->sendqueue && context->sendqueue->session == session &&
 801829c:	6a2e      	ldr	r6, [r5, #32]
 801829e:	2e00      	cmp	r6, #0
 80182a0:	d046      	beq.n	8018330 <coap_cancel_all_messages+0xa4>
 80182a2:	69b3      	ldr	r3, [r6, #24]
 80182a4:	6834      	ldr	r4, [r6, #0]
 80182a6:	4543      	cmp	r3, r8
 80182a8:	d10a      	bne.n	80182c0 <coap_cancel_all_messages+0x34>
      context->sendqueue->pdu->token,
 80182aa:	6a33      	ldr	r3, [r6, #32]
    token_match(token, token_length,
 80182ac:	791a      	ldrb	r2, [r3, #4]
  return alen == blen && (alen == 0 || memcmp(a, b, alen) == 0);
 80182ae:	42ba      	cmp	r2, r7
 80182b0:	d106      	bne.n	80182c0 <coap_cancel_all_messages+0x34>
 80182b2:	b147      	cbz	r7, 80182c6 <coap_cancel_all_messages+0x3a>
 80182b4:	6999      	ldr	r1, [r3, #24]
 80182b6:	463a      	mov	r2, r7
 80182b8:	4648      	mov	r0, r9
 80182ba:	f003 ffb3 	bl	801c224 <memcmp>
 80182be:	b110      	cbz	r0, 80182c6 <coap_cancel_all_messages+0x3a>
      coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 80182c0:	f8df a078 	ldr.w	sl, [pc, #120]	; 801833c <coap_cancel_all_messages+0xb0>
  while (q) {
 80182c4:	e032      	b.n	801832c <coap_cancel_all_messages+0xa0>
    context->sendqueue = q->next;
 80182c6:	622c      	str	r4, [r5, #32]
    coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 80182c8:	f7fc fe8c 	bl	8014fe4 <coap_get_log_level>
 80182cc:	2806      	cmp	r0, #6
 80182ce:	d908      	bls.n	80182e2 <coap_cancel_all_messages+0x56>
 80182d0:	4640      	mov	r0, r8
 80182d2:	f7fe fd63 	bl	8016d9c <coap_session_str>
 80182d6:	69f3      	ldr	r3, [r6, #28]
 80182d8:	4602      	mov	r2, r0
 80182da:	4651      	mov	r1, sl
 80182dc:	2007      	movs	r0, #7
 80182de:	f7fc feeb 	bl	80150b8 <coap_log_impl>
    coap_delete_node(q);
 80182e2:	4630      	mov	r0, r6
 80182e4:	f7ff fd15 	bl	8017d12 <coap_delete_node>
 80182e8:	e7d8      	b.n	801829c <coap_cancel_all_messages+0x10>
    if (q->session == session &&
 80182ea:	69a3      	ldr	r3, [r4, #24]
 80182ec:	6825      	ldr	r5, [r4, #0]
 80182ee:	4543      	cmp	r3, r8
 80182f0:	d120      	bne.n	8018334 <coap_cancel_all_messages+0xa8>
        q->pdu->token, q->pdu->token_length)) {
 80182f2:	6a23      	ldr	r3, [r4, #32]
      token_match(token, token_length,
 80182f4:	791a      	ldrb	r2, [r3, #4]
  return alen == blen && (alen == 0 || memcmp(a, b, alen) == 0);
 80182f6:	42ba      	cmp	r2, r7
 80182f8:	d11c      	bne.n	8018334 <coap_cancel_all_messages+0xa8>
 80182fa:	b12f      	cbz	r7, 8018308 <coap_cancel_all_messages+0x7c>
 80182fc:	6999      	ldr	r1, [r3, #24]
 80182fe:	463a      	mov	r2, r7
 8018300:	4648      	mov	r0, r9
 8018302:	f003 ff8f 	bl	801c224 <memcmp>
 8018306:	b9a8      	cbnz	r0, 8018334 <coap_cancel_all_messages+0xa8>
      p->next = q->next;
 8018308:	6035      	str	r5, [r6, #0]
      coap_log(LOG_DEBUG, "** %s: tid=%d: removed\n",
 801830a:	f7fc fe6b 	bl	8014fe4 <coap_get_log_level>
 801830e:	2806      	cmp	r0, #6
 8018310:	d908      	bls.n	8018324 <coap_cancel_all_messages+0x98>
 8018312:	4640      	mov	r0, r8
 8018314:	f7fe fd42 	bl	8016d9c <coap_session_str>
 8018318:	69e3      	ldr	r3, [r4, #28]
 801831a:	4602      	mov	r2, r0
 801831c:	4651      	mov	r1, sl
 801831e:	2007      	movs	r0, #7
 8018320:	f7fc feca 	bl	80150b8 <coap_log_impl>
      coap_delete_node(q);
 8018324:	4620      	mov	r0, r4
 8018326:	f7ff fcf4 	bl	8017d12 <coap_delete_node>
      q = p->next;
 801832a:	6834      	ldr	r4, [r6, #0]
  while (q) {
 801832c:	2c00      	cmp	r4, #0
 801832e:	d1dc      	bne.n	80182ea <coap_cancel_all_messages+0x5e>
}
 8018330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      q = q->next;
 8018334:	4626      	mov	r6, r4
 8018336:	462c      	mov	r4, r5
 8018338:	e7f8      	b.n	801832c <coap_cancel_all_messages+0xa0>
 801833a:	bf00      	nop
 801833c:	08030761 	.word	0x08030761

08018340 <coap_new_error_response>:
  coap_opt_filter_t opts) {
 8018340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018344:	4605      	mov	r5, r0
  size_t size = request->token_length;
 8018346:	7904      	ldrb	r4, [r0, #4]
  coap_opt_filter_t opts) {
 8018348:	b089      	sub	sp, #36	; 0x24
  const char *phrase = coap_response_phrase(code);
 801834a:	4608      	mov	r0, r1
  coap_opt_filter_t opts) {
 801834c:	4688      	mov	r8, r1
 801834e:	4617      	mov	r7, r2
  const char *phrase = coap_response_phrase(code);
 8018350:	f001 fef6 	bl	801a140 <coap_response_phrase>
  if (phrase)
 8018354:	4606      	mov	r6, r0
 8018356:	b118      	cbz	r0, 8018360 <coap_new_error_response+0x20>
    size += strlen(phrase) + 1;
 8018358:	f7e7 ff94 	bl	8000284 <strlen>
 801835c:	3401      	adds	r4, #1
 801835e:	4404      	add	r4, r0
  type = request->type == COAP_MESSAGE_CON
 8018360:	782b      	ldrb	r3, [r5, #0]
 *
 * @return       @c 1 if bit was set, @c -1 otherwise.
 */
COAP_STATIC_INLINE int
coap_option_clrb(coap_opt_filter_t filter, uint16_t type) {
  return coap_option_filter_unset(filter, type) ? 1 : -1;
 8018362:	210c      	movs	r1, #12
 8018364:	2b00      	cmp	r3, #0
 8018366:	4638      	mov	r0, r7
 8018368:	bf0c      	ite	eq
 801836a:	f04f 0902 	moveq.w	r9, #2
 801836e:	f04f 0901 	movne.w	r9, #1
 8018372:	f001 fcc2 	bl	8019cfa <coap_option_filter_unset>
  coap_option_iterator_init(request, &opt_iter, opts);
 8018376:	463a      	mov	r2, r7
 8018378:	a902      	add	r1, sp, #8
 801837a:	4628      	mov	r0, r5
 801837c:	f001 fb4c 	bl	8019a18 <coap_option_iterator_init>
  uint16_t opt_type = 0;        /* used for calculating delta-storage */
 8018380:	f04f 0b00 	mov.w	fp, #0
  while ((option = coap_option_next(&opt_iter))) {
 8018384:	a802      	add	r0, sp, #8
 8018386:	f001 fcbf 	bl	8019d08 <coap_option_next>
 801838a:	4682      	mov	sl, r0
 801838c:	b9e0      	cbnz	r0, 80183c8 <coap_new_error_response+0x88>
  response = coap_pdu_init(type, code, request->tid, size);
 801838e:	4623      	mov	r3, r4
 8018390:	88ea      	ldrh	r2, [r5, #6]
 8018392:	4641      	mov	r1, r8
 8018394:	4648      	mov	r0, r9
 8018396:	f001 fd49 	bl	8019e2c <coap_pdu_init>
  if (response) {
 801839a:	4604      	mov	r4, r0
 801839c:	b180      	cbz	r0, 80183c0 <coap_new_error_response+0x80>
    if (!coap_add_token(response, request->token_length,
 801839e:	69aa      	ldr	r2, [r5, #24]
 80183a0:	7929      	ldrb	r1, [r5, #4]
 80183a2:	f001 fde9 	bl	8019f78 <coap_add_token>
 80183a6:	bb70      	cbnz	r0, 8018406 <coap_new_error_response+0xc6>
      coap_log(LOG_DEBUG, "cannot add token to error response\n");
 80183a8:	f7fc fe1c 	bl	8014fe4 <coap_get_log_level>
 80183ac:	2806      	cmp	r0, #6
 80183ae:	d903      	bls.n	80183b8 <coap_new_error_response+0x78>
 80183b0:	4927      	ldr	r1, [pc, #156]	; (8018450 <coap_new_error_response+0x110>)
 80183b2:	2007      	movs	r0, #7
 80183b4:	f7fc fe80 	bl	80150b8 <coap_log_impl>
      coap_delete_pdu(response);
 80183b8:	4620      	mov	r0, r4
 80183ba:	f001 fd68 	bl	8019e8e <coap_delete_pdu>
      return NULL;
 80183be:	2400      	movs	r4, #0
}
 80183c0:	4620      	mov	r0, r4
 80183c2:	b009      	add	sp, #36	; 0x24
 80183c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint16_t delta = opt_iter.type - opt_type;
 80183c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80183cc:	eba3 030b 	sub.w	r3, r3, fp
 80183d0:	b29b      	uxth	r3, r3
    if (delta < 13) {
 80183d2:	2b0c      	cmp	r3, #12
 80183d4:	d811      	bhi.n	80183fa <coap_new_error_response+0xba>
      size++;
 80183d6:	3401      	adds	r4, #1
    size += coap_opt_length(option);
 80183d8:	4650      	mov	r0, sl
 80183da:	f001 fb61 	bl	8019aa0 <coap_opt_length>
 80183de:	f89a 3000 	ldrb.w	r3, [sl]
 80183e2:	f003 030f 	and.w	r3, r3, #15
    switch (*option & 0x0f) {
 80183e6:	2b0d      	cmp	r3, #13
    size += coap_opt_length(option);
 80183e8:	4404      	add	r4, r0
    switch (*option & 0x0f) {
 80183ea:	d002      	beq.n	80183f2 <coap_new_error_response+0xb2>
 80183ec:	2b0e      	cmp	r3, #14
 80183ee:	d101      	bne.n	80183f4 <coap_new_error_response+0xb4>
      size++;
 80183f0:	3401      	adds	r4, #1
      size++;
 80183f2:	3401      	adds	r4, #1
    opt_type = opt_iter.type;
 80183f4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80183f8:	e7c4      	b.n	8018384 <coap_new_error_response+0x44>
    } else if (delta < 269) {
 80183fa:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
      size += 2;
 80183fe:	bf94      	ite	ls
 8018400:	3402      	addls	r4, #2
      size += 3;
 8018402:	3403      	addhi	r4, #3
 8018404:	e7e8      	b.n	80183d8 <coap_new_error_response+0x98>
    coap_option_iterator_init(request, &opt_iter, opts);
 8018406:	463a      	mov	r2, r7
 8018408:	a902      	add	r1, sp, #8
 801840a:	4628      	mov	r0, r5
 801840c:	f001 fb04 	bl	8019a18 <coap_option_iterator_init>
    while ((option = coap_option_next(&opt_iter))) {
 8018410:	a802      	add	r0, sp, #8
 8018412:	f001 fc79 	bl	8019d08 <coap_option_next>
 8018416:	4605      	mov	r5, r0
 8018418:	b950      	cbnz	r0, 8018430 <coap_new_error_response+0xf0>
    if (phrase)
 801841a:	2e00      	cmp	r6, #0
 801841c:	d0d0      	beq.n	80183c0 <coap_new_error_response+0x80>
      coap_add_data(response, (size_t)strlen(phrase), (const uint8_t *)phrase);
 801841e:	4630      	mov	r0, r6
 8018420:	f7e7 ff30 	bl	8000284 <strlen>
 8018424:	4632      	mov	r2, r6
 8018426:	4601      	mov	r1, r0
 8018428:	4620      	mov	r0, r4
 801842a:	f001 fe4b 	bl	801a0c4 <coap_add_data>
 801842e:	e7c7      	b.n	80183c0 <coap_new_error_response+0x80>
      coap_add_option(response, opt_iter.type,
 8018430:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018434:	9101      	str	r1, [sp, #4]
        coap_opt_length(option),
 8018436:	f001 fb33 	bl	8019aa0 <coap_opt_length>
 801843a:	9000      	str	r0, [sp, #0]
      coap_add_option(response, opt_iter.type,
 801843c:	4628      	mov	r0, r5
 801843e:	f001 fb69 	bl	8019b14 <coap_opt_value>
 8018442:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018446:	4603      	mov	r3, r0
 8018448:	4620      	mov	r0, r4
 801844a:	f001 fdbd 	bl	8019fc8 <coap_add_option>
 801844e:	e7df      	b.n	8018410 <coap_new_error_response+0xd0>
 8018450:	08030779 	.word	0x08030779

08018454 <coap_wellknown_response>:
  coap_pdu_t *request) {
 8018454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  resp = coap_pdu_init(request->type == COAP_MESSAGE_CON
 8018458:	7813      	ldrb	r3, [r2, #0]
  coap_pdu_t *request) {
 801845a:	b08f      	sub	sp, #60	; 0x3c
  resp = coap_pdu_init(request->type == COAP_MESSAGE_CON
 801845c:	2b00      	cmp	r3, #0
  coap_pdu_t *request) {
 801845e:	4680      	mov	r8, r0
 8018460:	4616      	mov	r6, r2
  resp = coap_pdu_init(request->type == COAP_MESSAGE_CON
 8018462:	4608      	mov	r0, r1
 8018464:	88d2      	ldrh	r2, [r2, #6]
 8018466:	9203      	str	r2, [sp, #12]
 8018468:	bf0c      	ite	eq
 801846a:	2402      	moveq	r4, #2
 801846c:	2401      	movne	r4, #1
 801846e:	f7fe fc49 	bl	8016d04 <coap_session_max_pdu_size>
 8018472:	9a03      	ldr	r2, [sp, #12]
 8018474:	4603      	mov	r3, r0
 8018476:	2145      	movs	r1, #69	; 0x45
 8018478:	4620      	mov	r0, r4
 801847a:	f001 fcd7 	bl	8019e2c <coap_pdu_init>
  if (!resp) {
 801847e:	4604      	mov	r4, r0
 8018480:	b958      	cbnz	r0, 801849a <coap_wellknown_response+0x46>
    coap_log(LOG_DEBUG, "coap_wellknown_response: cannot create PDU\n");
 8018482:	f7fc fdaf 	bl	8014fe4 <coap_get_log_level>
 8018486:	2806      	cmp	r0, #6
 8018488:	d903      	bls.n	8018492 <coap_wellknown_response+0x3e>
 801848a:	4996      	ldr	r1, [pc, #600]	; (80186e4 <coap_wellknown_response+0x290>)
 801848c:	2007      	movs	r0, #7
 801848e:	f7fc fe13 	bl	80150b8 <coap_log_impl>
}
 8018492:	4620      	mov	r0, r4
 8018494:	b00f      	add	sp, #60	; 0x3c
 8018496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!coap_add_token(resp, request->token_length, request->token)) {
 801849a:	69b2      	ldr	r2, [r6, #24]
 801849c:	7931      	ldrb	r1, [r6, #4]
 801849e:	f001 fd6b 	bl	8019f78 <coap_add_token>
 80184a2:	b948      	cbnz	r0, 80184b8 <coap_wellknown_response+0x64>
    coap_log(LOG_DEBUG, "coap_wellknown_response: cannot add token\n");
 80184a4:	f7fc fd9e 	bl	8014fe4 <coap_get_log_level>
 80184a8:	2806      	cmp	r0, #6
 80184aa:	d903      	bls.n	80184b4 <coap_wellknown_response+0x60>
 80184ac:	498e      	ldr	r1, [pc, #568]	; (80186e8 <coap_wellknown_response+0x294>)
    coap_log(LOG_DEBUG, "coap_print_wellknown failed\n");
 80184ae:	2007      	movs	r0, #7
 80184b0:	f7fc fe02 	bl	80150b8 <coap_log_impl>
  resp->code = COAP_RESPONSE_CODE(503);
 80184b4:	23a3      	movs	r3, #163	; 0xa3
 80184b6:	e022      	b.n	80184fe <coap_wellknown_response+0xaa>
  query_filter = coap_check_option(request, COAP_OPTION_URI_QUERY, &opt_iter);
 80184b8:	aa08      	add	r2, sp, #32
 80184ba:	210f      	movs	r1, #15
 80184bc:	4630      	mov	r0, r6
 80184be:	f001 fc71 	bl	8019da4 <coap_check_option>
  size_t len = 0;
 80184c2:	2300      	movs	r3, #0
 80184c4:	9306      	str	r3, [sp, #24]
  if (coap_print_wellknown(context, buf, &len, UINT_MAX, query_filter)
 80184c6:	9000      	str	r0, [sp, #0]
  query_filter = coap_check_option(request, COAP_OPTION_URI_QUERY, &opt_iter);
 80184c8:	4607      	mov	r7, r0
  if (coap_print_wellknown(context, buf, &len, UINT_MAX, query_filter)
 80184ca:	f04f 33ff 	mov.w	r3, #4294967295
 80184ce:	aa06      	add	r2, sp, #24
 80184d0:	a905      	add	r1, sp, #20
 80184d2:	4640      	mov	r0, r8
 80184d4:	f002 fd88 	bl	801afe8 <coap_print_wellknown>
 80184d8:	2800      	cmp	r0, #0
 80184da:	da14      	bge.n	8018506 <coap_wellknown_response+0xb2>
    coap_log(LOG_WARNING, "cannot determine length of /.well-known/core\n");
 80184dc:	f7fc fd82 	bl	8014fe4 <coap_get_log_level>
 80184e0:	2803      	cmp	r0, #3
 80184e2:	d903      	bls.n	80184ec <coap_wellknown_response+0x98>
 80184e4:	4981      	ldr	r1, [pc, #516]	; (80186ec <coap_wellknown_response+0x298>)
 80184e6:	2004      	movs	r0, #4
 80184e8:	f7fc fde6 	bl	80150b8 <coap_log_impl>
    coap_log(LOG_DEBUG, "coap_wellknown_response: undefined resource\n");
 80184ec:	f7fc fd7a 	bl	8014fe4 <coap_get_log_level>
 80184f0:	2806      	cmp	r0, #6
 80184f2:	d903      	bls.n	80184fc <coap_wellknown_response+0xa8>
 80184f4:	497e      	ldr	r1, [pc, #504]	; (80186f0 <coap_wellknown_response+0x29c>)
 80184f6:	2007      	movs	r0, #7
 80184f8:	f7fc fdde 	bl	80150b8 <coap_log_impl>
    resp->code = COAP_RESPONSE_CODE(400);
 80184fc:	2380      	movs	r3, #128	; 0x80
  resp->code = COAP_RESPONSE_CODE(503);
 80184fe:	7063      	strb	r3, [r4, #1]
  resp->used_size = resp->token_length;
 8018500:	7923      	ldrb	r3, [r4, #4]
 8018502:	6123      	str	r3, [r4, #16]
  return resp;
 8018504:	e7c5      	b.n	8018492 <coap_wellknown_response+0x3e>
  coap_log(LOG_DEBUG, "get_wkc_len: coap_print_wellknown() returned %zu\n", len);
 8018506:	f7fc fd6d 	bl	8014fe4 <coap_get_log_level>
 801850a:	2806      	cmp	r0, #6
 801850c:	d904      	bls.n	8018518 <coap_wellknown_response+0xc4>
 801850e:	9a06      	ldr	r2, [sp, #24]
 8018510:	4978      	ldr	r1, [pc, #480]	; (80186f4 <coap_wellknown_response+0x2a0>)
 8018512:	2007      	movs	r0, #7
 8018514:	f7fc fdd0 	bl	80150b8 <coap_log_impl>
  return len;
 8018518:	9d06      	ldr	r5, [sp, #24]
  if (wkc_len == 0) {
 801851a:	2d00      	cmp	r5, #0
 801851c:	d0e6      	beq.n	80184ec <coap_wellknown_response+0x98>
  if (coap_get_block(request, COAP_OPTION_BLOCK2, &block)) {
 801851e:	4630      	mov	r0, r6
 8018520:	aa06      	add	r2, sp, #24
 8018522:	2117      	movs	r1, #23
 8018524:	f7fc fb28 	bl	8014b78 <coap_get_block>
 8018528:	4606      	mov	r6, r0
 801852a:	b1b8      	cbz	r0, 801855c <coap_wellknown_response+0x108>
    coap_log(LOG_DEBUG, "create block\n");
 801852c:	f7fc fd5a 	bl	8014fe4 <coap_get_log_level>
 8018530:	2806      	cmp	r0, #6
 8018532:	d903      	bls.n	801853c <coap_wellknown_response+0xe8>
 8018534:	4970      	ldr	r1, [pc, #448]	; (80186f8 <coap_wellknown_response+0x2a4>)
 8018536:	2007      	movs	r0, #7
 8018538:	f7fc fdbe 	bl	80150b8 <coap_log_impl>
    offset = block.num << (block.szx + 4);
 801853c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018540:	9a06      	ldr	r2, [sp, #24]
 8018542:	f3c3 0942 	ubfx	r9, r3, #1, #3
    if (block.szx > 6) {  /* invalid, MUST lead to 4.00 Bad Request */
 8018546:	f003 030e 	and.w	r3, r3, #14
    offset = block.num << (block.szx + 4);
 801854a:	f109 0904 	add.w	r9, r9, #4
    if (block.szx > 6) {  /* invalid, MUST lead to 4.00 Bad Request */
 801854e:	2b0e      	cmp	r3, #14
    offset = block.num << (block.szx + 4);
 8018550:	fa02 f909 	lsl.w	r9, r2, r9
    if (block.szx > 6) {  /* invalid, MUST lead to 4.00 Bad Request */
 8018554:	d113      	bne.n	801857e <coap_wellknown_response+0x12a>
      resp->code = COAP_RESPONSE_CODE(400);
 8018556:	2380      	movs	r3, #128	; 0x80
 8018558:	7063      	strb	r3, [r4, #1]
      return resp;
 801855a:	e79a      	b.n	8018492 <coap_wellknown_response+0x3e>
  size_t offset = 0;
 801855c:	4681      	mov	r9, r0
  if (resp->max_size && resp->max_size <= resp->used_size + 8) {
 801855e:	6963      	ldr	r3, [r4, #20]
 8018560:	2b00      	cmp	r3, #0
 8018562:	f000 80a9 	beq.w	80186b8 <coap_wellknown_response+0x264>
 8018566:	6922      	ldr	r2, [r4, #16]
 8018568:	f102 0108 	add.w	r1, r2, #8
 801856c:	428b      	cmp	r3, r1
 801856e:	f200 80a7 	bhi.w	80186c0 <coap_wellknown_response+0x26c>
    coap_log(LOG_DEBUG, "coap_wellknown_response: insufficient storage space\n");
 8018572:	f7fc fd37 	bl	8014fe4 <coap_get_log_level>
 8018576:	2806      	cmp	r0, #6
 8018578:	d99c      	bls.n	80184b4 <coap_wellknown_response+0x60>
 801857a:	4960      	ldr	r1, [pc, #384]	; (80186fc <coap_wellknown_response+0x2a8>)
 801857c:	e797      	b.n	80184ae <coap_wellknown_response+0x5a>
    need_block2 = 1;
 801857e:	2601      	movs	r6, #1
 8018580:	e7ed      	b.n	801855e <coap_wellknown_response+0x10a>
    block.m = 0;      /* the M bit is set by coap_write_block_opt() */
 8018582:	f89d 301c 	ldrb.w	r3, [sp, #28]
    block.num = 0;
 8018586:	9606      	str	r6, [sp, #24]
    block.m = 0;      /* the M bit is set by coap_write_block_opt() */
 8018588:	f023 030f 	bic.w	r3, r3, #15
 801858c:	f043 030c 	orr.w	r3, r3, #12
 8018590:	f88d 301c 	strb.w	r3, [sp, #28]
    while (payloadlen < SZX_TO_BYTES(block.szx) + 6) {
 8018594:	2601      	movs	r6, #1
 8018596:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801859a:	f3c3 0042 	ubfx	r0, r3, #1, #3
 801859e:	1d02      	adds	r2, r0, #4
 80185a0:	fa06 f202 	lsl.w	r2, r6, r2
 80185a4:	3206      	adds	r2, #6
 80185a6:	4291      	cmp	r1, r2
 80185a8:	d317      	bcc.n	80185da <coap_wellknown_response+0x186>
    coap_add_option(resp,
 80185aa:	462a      	mov	r2, r5
 80185ac:	2104      	movs	r1, #4
 80185ae:	a805      	add	r0, sp, #20
 80185b0:	f7ff fa88 	bl	8017ac4 <coap_encode_var_safe>
 80185b4:	ab05      	add	r3, sp, #20
 80185b6:	4602      	mov	r2, r0
 80185b8:	2104      	movs	r1, #4
 80185ba:	4620      	mov	r0, r4
 80185bc:	f001 fd04 	bl	8019fc8 <coap_add_option>
 80185c0:	2601      	movs	r6, #1
  assert(coap_encode_var_safe(buf, sizeof(buf),
 80185c2:	2228      	movs	r2, #40	; 0x28
 80185c4:	2104      	movs	r1, #4
 80185c6:	a805      	add	r0, sp, #20
 80185c8:	f7ff fa7c 	bl	8017ac4 <coap_encode_var_safe>
 80185cc:	2801      	cmp	r0, #1
 80185ce:	d014      	beq.n	80185fa <coap_wellknown_response+0x1a6>
 80185d0:	4b4b      	ldr	r3, [pc, #300]	; (8018700 <coap_wellknown_response+0x2ac>)
 80185d2:	4a4c      	ldr	r2, [pc, #304]	; (8018704 <coap_wellknown_response+0x2b0>)
 80185d4:	f240 61c5 	movw	r1, #1733	; 0x6c5
 80185d8:	e081      	b.n	80186de <coap_wellknown_response+0x28a>
      if (block.szx == 0) {
 80185da:	f013 0f0e 	tst.w	r3, #14
 80185de:	d106      	bne.n	80185ee <coap_wellknown_response+0x19a>
        coap_log(LOG_DEBUG,
 80185e0:	f7fc fd00 	bl	8014fe4 <coap_get_log_level>
 80185e4:	2806      	cmp	r0, #6
 80185e6:	f67f af65 	bls.w	80184b4 <coap_wellknown_response+0x60>
 80185ea:	4947      	ldr	r1, [pc, #284]	; (8018708 <coap_wellknown_response+0x2b4>)
 80185ec:	e75f      	b.n	80184ae <coap_wellknown_response+0x5a>
        block.szx--;
 80185ee:	3007      	adds	r0, #7
 80185f0:	f360 0343 	bfi	r3, r0, #1, #3
 80185f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80185f8:	e7cd      	b.n	8018596 <coap_wellknown_response+0x142>
  coap_add_option(resp, COAP_OPTION_CONTENT_FORMAT,
 80185fa:	2228      	movs	r2, #40	; 0x28
 80185fc:	2104      	movs	r1, #4
 80185fe:	a805      	add	r0, sp, #20
 8018600:	f7ff fa60 	bl	8017ac4 <coap_encode_var_safe>
 8018604:	ab05      	add	r3, sp, #20
 8018606:	4602      	mov	r2, r0
 8018608:	210c      	movs	r1, #12
 801860a:	4620      	mov	r0, r4
 801860c:	f001 fcdc 	bl	8019fc8 <coap_add_option>
  if (need_block2) {
 8018610:	b176      	cbz	r6, 8018630 <coap_wellknown_response+0x1dc>
    if (coap_write_block_opt(&block, COAP_OPTION_BLOCK2, resp, wkc_len) < 0) {
 8018612:	462b      	mov	r3, r5
 8018614:	4622      	mov	r2, r4
 8018616:	2117      	movs	r1, #23
 8018618:	a806      	add	r0, sp, #24
 801861a:	f7fc fb03 	bl	8014c24 <coap_write_block_opt>
 801861e:	2800      	cmp	r0, #0
 8018620:	da06      	bge.n	8018630 <coap_wellknown_response+0x1dc>
      coap_log(LOG_DEBUG,
 8018622:	f7fc fcdf 	bl	8014fe4 <coap_get_log_level>
 8018626:	2806      	cmp	r0, #6
 8018628:	f67f af44 	bls.w	80184b4 <coap_wellknown_response+0x60>
 801862c:	4937      	ldr	r1, [pc, #220]	; (801870c <coap_wellknown_response+0x2b8>)
 801862e:	e73e      	b.n	80184ae <coap_wellknown_response+0x5a>
  coap_add_option(resp,
 8018630:	462a      	mov	r2, r5
 8018632:	2104      	movs	r1, #4
 8018634:	a805      	add	r0, sp, #20
 8018636:	f7ff fa45 	bl	8017ac4 <coap_encode_var_safe>
 801863a:	ab05      	add	r3, sp, #20
 801863c:	4602      	mov	r2, r0
 801863e:	211c      	movs	r1, #28
 8018640:	4620      	mov	r0, r4
 8018642:	f001 fcc1 	bl	8019fc8 <coap_add_option>
        min(SZX_TO_BYTES(block.szx), wkc_len - (block.num << (block.szx + 4))) :
 8018646:	b1de      	cbz	r6, 8018680 <coap_wellknown_response+0x22c>
 8018648:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801864c:	9a06      	ldr	r2, [sp, #24]
 801864e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8018652:	3304      	adds	r3, #4
 8018654:	409a      	lsls	r2, r3
 8018656:	1aad      	subs	r5, r5, r2
 8018658:	2201      	movs	r2, #1
 801865a:	fa02 f303 	lsl.w	r3, r2, r3
 801865e:	429d      	cmp	r5, r3
 8018660:	bf28      	it	cs
 8018662:	461d      	movcs	r5, r3
  data = coap_add_data_after(resp, len);
 8018664:	4629      	mov	r1, r5
 8018666:	4620      	mov	r0, r4
  len = need_block2 ?
 8018668:	9504      	str	r5, [sp, #16]
  data = coap_add_data_after(resp, len);
 801866a:	f001 fcfb 	bl	801a064 <coap_add_data_after>
  if (!data) {
 801866e:	4601      	mov	r1, r0
 8018670:	b990      	cbnz	r0, 8018698 <coap_wellknown_response+0x244>
    coap_log(LOG_DEBUG, "coap_wellknown_response: coap_add_data failed\n" );
 8018672:	f7fc fcb7 	bl	8014fe4 <coap_get_log_level>
 8018676:	2806      	cmp	r0, #6
 8018678:	f67f af1c 	bls.w	80184b4 <coap_wellknown_response+0x60>
 801867c:	4924      	ldr	r1, [pc, #144]	; (8018710 <coap_wellknown_response+0x2bc>)
 801867e:	e716      	b.n	80184ae <coap_wellknown_response+0x5a>
        resp->max_size && resp->used_size + wkc_len + 1 > resp->max_size ?
 8018680:	6963      	ldr	r3, [r4, #20]
        resp->max_size - resp->used_size - 1 : wkc_len;
 8018682:	2b00      	cmp	r3, #0
 8018684:	d0ee      	beq.n	8018664 <coap_wellknown_response+0x210>
        resp->max_size && resp->used_size + wkc_len + 1 > resp->max_size ?
 8018686:	6921      	ldr	r1, [r4, #16]
 8018688:	1c6a      	adds	r2, r5, #1
 801868a:	440a      	add	r2, r1
 801868c:	4293      	cmp	r3, r2
        resp->max_size - resp->used_size - 1 : wkc_len;
 801868e:	bf3c      	itt	cc
 8018690:	f103 35ff 	addcc.w	r5, r3, #4294967295
 8018694:	1a6d      	subcc	r5, r5, r1
 8018696:	e7e5      	b.n	8018664 <coap_wellknown_response+0x210>
  result = coap_print_wellknown(context, data, &len, offset, query_filter);
 8018698:	9700      	str	r7, [sp, #0]
 801869a:	464b      	mov	r3, r9
 801869c:	aa04      	add	r2, sp, #16
 801869e:	4640      	mov	r0, r8
 80186a0:	f002 fca2 	bl	801afe8 <coap_print_wellknown>
  if ((result & COAP_PRINT_STATUS_ERROR) != 0) {
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f6bf aef4 	bge.w	8018492 <coap_wellknown_response+0x3e>
    coap_log(LOG_DEBUG, "coap_print_wellknown failed\n");
 80186aa:	f7fc fc9b 	bl	8014fe4 <coap_get_log_level>
 80186ae:	2806      	cmp	r0, #6
 80186b0:	f67f af00 	bls.w	80184b4 <coap_wellknown_response+0x60>
 80186b4:	4917      	ldr	r1, [pc, #92]	; (8018714 <coap_wellknown_response+0x2c0>)
 80186b6:	e6fa      	b.n	80184ae <coap_wellknown_response+0x5a>
  if (!need_block2 && resp->max_size && resp->max_size - resp->used_size < wkc_len + 1) {
 80186b8:	2e00      	cmp	r6, #0
 80186ba:	f47f af76 	bne.w	80185aa <coap_wellknown_response+0x156>
 80186be:	e780      	b.n	80185c2 <coap_wellknown_response+0x16e>
 80186c0:	2e00      	cmp	r6, #0
 80186c2:	f47f af72 	bne.w	80185aa <coap_wellknown_response+0x156>
 80186c6:	1a99      	subs	r1, r3, r2
 80186c8:	1c68      	adds	r0, r5, #1
 80186ca:	4281      	cmp	r1, r0
 80186cc:	f4bf af79 	bcs.w	80185c2 <coap_wellknown_response+0x16e>
    assert(resp->used_size <= resp->max_size);
 80186d0:	4293      	cmp	r3, r2
 80186d2:	f4bf af56 	bcs.w	8018582 <coap_wellknown_response+0x12e>
 80186d6:	4b10      	ldr	r3, [pc, #64]	; (8018718 <coap_wellknown_response+0x2c4>)
 80186d8:	4a0a      	ldr	r2, [pc, #40]	; (8018704 <coap_wellknown_response+0x2b0>)
 80186da:	f240 61a7 	movw	r1, #1703	; 0x6a7
  assert(coap_encode_var_safe(buf, sizeof(buf),
 80186de:	480f      	ldr	r0, [pc, #60]	; (801871c <coap_wellknown_response+0x2c8>)
 80186e0:	f003 f9cc 	bl	801ba7c <__assert_func>
 80186e4:	0803079d 	.word	0x0803079d
 80186e8:	080307c9 	.word	0x080307c9
 80186ec:	080307f4 	.word	0x080307f4
 80186f0:	08030854 	.word	0x08030854
 80186f4:	08030822 	.word	0x08030822
 80186f8:	08030881 	.word	0x08030881
 80186fc:	0803088f 	.word	0x0803088f
 8018700:	08030923 	.word	0x08030923
 8018704:	0802abc0 	.word	0x0802abc0
 8018708:	080308e6 	.word	0x080308e6
 801870c:	08030977 	.word	0x08030977
 8018710:	080309aa 	.word	0x080309aa
 8018714:	080309d9 	.word	0x080309d9
 8018718:	080308c4 	.word	0x080308c4
 801871c:	080305ac 	.word	0x080305ac

08018720 <coap_handle_event>:
cleanup:
  coap_delete_node(sent);
}

int
coap_handle_event(coap_context_t *context, coap_event_t event, coap_session_t *session) {
 8018720:	b570      	push	{r4, r5, r6, lr}
 8018722:	4604      	mov	r4, r0
 8018724:	460d      	mov	r5, r1
 8018726:	4616      	mov	r6, r2
  coap_log(LOG_DEBUG, "***EVENT: 0x%04x\n", event);
 8018728:	f7fc fc5c 	bl	8014fe4 <coap_get_log_level>
 801872c:	2806      	cmp	r0, #6
 801872e:	d904      	bls.n	801873a <coap_handle_event+0x1a>
 8018730:	4907      	ldr	r1, [pc, #28]	; (8018750 <coap_handle_event+0x30>)
 8018732:	462a      	mov	r2, r5
 8018734:	2007      	movs	r0, #7
 8018736:	f7fc fcbf 	bl	80150b8 <coap_log_impl>

  if (context->handle_event) {
 801873a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801873c:	b12b      	cbz	r3, 801874a <coap_handle_event+0x2a>
    return context->handle_event(context, event, session);
 801873e:	4632      	mov	r2, r6
 8018740:	4629      	mov	r1, r5
 8018742:	4620      	mov	r0, r4
  } else {
    return 0;
  }
}
 8018744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return context->handle_event(context, event, session);
 8018748:	4718      	bx	r3
}
 801874a:	4618      	mov	r0, r3
 801874c:	bd70      	pop	{r4, r5, r6, pc}
 801874e:	bf00      	nop
 8018750:	080309f6 	.word	0x080309f6

08018754 <coap_send_pdu>:
coap_send_pdu(coap_session_t *session, coap_pdu_t *pdu, coap_queue_t *node) {
 8018754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (coap_is_mcast(&session->local_addr) &&
 8018758:	f100 0854 	add.w	r8, r0, #84	; 0x54
coap_send_pdu(coap_session_t *session, coap_pdu_t *pdu, coap_queue_t *node) {
 801875c:	4604      	mov	r4, r0
  if (coap_is_mcast(&session->local_addr) &&
 801875e:	4640      	mov	r0, r8
coap_send_pdu(coap_session_t *session, coap_pdu_t *pdu, coap_queue_t *node) {
 8018760:	460d      	mov	r5, r1
 8018762:	4616      	mov	r6, r2
  if (coap_is_mcast(&session->local_addr) &&
 8018764:	f7fc f9ca 	bl	8014afc <coap_is_mcast>
 8018768:	b118      	cbz	r0, 8018772 <coap_send_pdu+0x1e>
    COAP_RESPONSE_CLASS(pdu->code) > 2) {
 801876a:	786b      	ldrb	r3, [r5, #1]
  if (coap_is_mcast(&session->local_addr) &&
 801876c:	2b5f      	cmp	r3, #95	; 0x5f
 801876e:	f200 809e 	bhi.w	80188ae <coap_send_pdu+0x15a>
  if (session->state == COAP_SESSION_STATE_NONE) {
 8018772:	79a3      	ldrb	r3, [r4, #6]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d17c      	bne.n	8018872 <coap_send_pdu+0x11e>
    if (session->proto == COAP_PROTO_DTLS && !session->tls) {
 8018778:	7927      	ldrb	r7, [r4, #4]
 801877a:	2f02      	cmp	r7, #2
 801877c:	d11b      	bne.n	80187b6 <coap_send_pdu+0x62>
 801877e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8018782:	b9ab      	cbnz	r3, 80187b0 <coap_send_pdu+0x5c>
      session->tls = coap_dtls_new_client_session(session);
 8018784:	4620      	mov	r0, r4
 8018786:	f7fe f9b3 	bl	8016af0 <coap_dtls_new_client_session>
 801878a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      if (session->tls) {
 801878e:	b140      	cbz	r0, 80187a2 <coap_send_pdu+0x4e>
        session->state = COAP_SESSION_STATE_HANDSHAKE;
 8018790:	71a7      	strb	r7, [r4, #6]
        return coap_session_delay_pdu(session, pdu, node);
 8018792:	4632      	mov	r2, r6
 8018794:	4629      	mov	r1, r5
 8018796:	4620      	mov	r0, r4
 8018798:	f7fe fd4a 	bl	8017230 <coap_session_delay_pdu>
}
 801879c:	b004      	add	sp, #16
 801879e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      coap_handle_event(session->context, COAP_EVENT_DTLS_ERROR, session);
 80187a2:	4622      	mov	r2, r4
 80187a4:	f44f 7100 	mov.w	r1, #512	; 0x200
        coap_handle_event(session->context, COAP_EVENT_TCP_FAILED, session);
 80187a8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80187ac:	f7ff ffb8 	bl	8018720 <coap_handle_event>
      return -1;
 80187b0:	f04f 30ff 	mov.w	r0, #4294967295
 80187b4:	e7f2      	b.n	801879c <coap_send_pdu+0x48>
    } else if(COAP_PROTO_RELIABLE(session->proto)) {
 80187b6:	1efb      	subs	r3, r7, #3
 80187b8:	2b01      	cmp	r3, #1
 80187ba:	d8f9      	bhi.n	80187b0 <coap_send_pdu+0x5c>
      if (!coap_socket_connect_tcp1(
 80187bc:	f241 6134 	movw	r1, #5684	; 0x1634
        &session->sock, &session->local_if, &session->remote_addr,
 80187c0:	f104 0234 	add.w	r2, r4, #52	; 0x34
      if (!coap_socket_connect_tcp1(
 80187c4:	f241 6333 	movw	r3, #5683	; 0x1633
 80187c8:	2f04      	cmp	r7, #4
 80187ca:	bf08      	it	eq
 80187cc:	460b      	moveq	r3, r1
 80187ce:	e9cd 8200 	strd	r8, r2, [sp]
 80187d2:	f104 0114 	add.w	r1, r4, #20
 80187d6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80187da:	f7fd fbad 	bl	8015f38 <coap_socket_connect_tcp1>
 80187de:	b918      	cbnz	r0, 80187e8 <coap_send_pdu+0x94>
        coap_handle_event(session->context, COAP_EVENT_TCP_FAILED, session);
 80187e0:	4622      	mov	r2, r4
 80187e2:	f241 0103 	movw	r1, #4099	; 0x1003
 80187e6:	e7df      	b.n	80187a8 <coap_send_pdu+0x54>
      session->last_ping = 0;
 80187e8:	2300      	movs	r3, #0
 80187ea:	2200      	movs	r2, #0
 80187ec:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
      session->last_pong = 0;
 80187f0:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
      session->csm_tx = 0;
 80187f4:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
      coap_ticks( &session->last_rx_tx );
 80187f8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80187fc:	f7ff f8f0 	bl	80179e0 <coap_ticks>
      if ((session->sock.flags & COAP_SOCKET_WANT_CONNECT) != 0) {
 8018800:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8018804:	f013 0780 	ands.w	r7, r3, #128	; 0x80
 8018808:	d002      	beq.n	8018810 <coap_send_pdu+0xbc>
        session->state = COAP_SESSION_STATE_CONNECTING;
 801880a:	2301      	movs	r3, #1
 801880c:	71a3      	strb	r3, [r4, #6]
 801880e:	e7c0      	b.n	8018792 <coap_send_pdu+0x3e>
      coap_handle_event(session->context, COAP_EVENT_TCP_CONNECTED, session);
 8018810:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8018814:	4622      	mov	r2, r4
 8018816:	f241 0101 	movw	r1, #4097	; 0x1001
 801881a:	f7ff ff81 	bl	8018720 <coap_handle_event>
      if (session->proto == COAP_PROTO_TLS) {
 801881e:	7923      	ldrb	r3, [r4, #4]
 8018820:	2b04      	cmp	r3, #4
 8018822:	d123      	bne.n	801886c <coap_send_pdu+0x118>
        session->state = COAP_SESSION_STATE_HANDSHAKE;
 8018824:	2302      	movs	r3, #2
 8018826:	71a3      	strb	r3, [r4, #6]
        session->tls = coap_tls_new_client_session(session, &connected);
 8018828:	a903      	add	r1, sp, #12
 801882a:	4620      	mov	r0, r4
        int connected = 0;
 801882c:	9703      	str	r7, [sp, #12]
        session->tls = coap_tls_new_client_session(session, &connected);
 801882e:	f7fe f975 	bl	8016b1c <coap_tls_new_client_session>
 8018832:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (session->tls) {
 8018836:	b168      	cbz	r0, 8018854 <coap_send_pdu+0x100>
          if (connected) {
 8018838:	9b03      	ldr	r3, [sp, #12]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d0a9      	beq.n	8018792 <coap_send_pdu+0x3e>
            coap_handle_event(session->context, COAP_EVENT_DTLS_CONNECTED, session);
 801883e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8018842:	4622      	mov	r2, r4
 8018844:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018848:	f7ff ff6a 	bl	8018720 <coap_handle_event>
            coap_session_send_csm(session);
 801884c:	4620      	mov	r0, r4
 801884e:	f7fe fead 	bl	80175ac <coap_session_send_csm>
          return coap_session_delay_pdu(session, pdu, node);
 8018852:	e79e      	b.n	8018792 <coap_send_pdu+0x3e>
        coap_handle_event(session->context, COAP_EVENT_DTLS_ERROR, session);
 8018854:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8018858:	4622      	mov	r2, r4
 801885a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801885e:	f7ff ff5f 	bl	8018720 <coap_handle_event>
        coap_session_disconnected(session, COAP_NACK_TLS_FAILED);
 8018862:	2103      	movs	r1, #3
 8018864:	4620      	mov	r0, r4
 8018866:	f7fe fdfb 	bl	8017460 <coap_session_disconnected>
        return -1;
 801886a:	e7a1      	b.n	80187b0 <coap_send_pdu+0x5c>
        coap_session_send_csm(session);
 801886c:	4620      	mov	r0, r4
 801886e:	f7fe fe9d 	bl	80175ac <coap_session_send_csm>
  if (session->state != COAP_SESSION_STATE_ESTABLISHED ||
 8018872:	79a3      	ldrb	r3, [r4, #6]
 8018874:	2b04      	cmp	r3, #4
 8018876:	d18c      	bne.n	8018792 <coap_send_pdu+0x3e>
      (pdu->type == COAP_MESSAGE_CON && session->con_active >= COAP_DEFAULT_NSTART)) {
 8018878:	782a      	ldrb	r2, [r5, #0]
  if (session->state != COAP_SESSION_STATE_ESTABLISHED ||
 801887a:	b91a      	cbnz	r2, 8018884 <coap_send_pdu+0x130>
      (pdu->type == COAP_MESSAGE_CON && session->con_active >= COAP_DEFAULT_NSTART)) {
 801887c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018880:	2b00      	cmp	r3, #0
 8018882:	d186      	bne.n	8018792 <coap_send_pdu+0x3e>
  if ((session->sock.flags & COAP_SOCKET_NOT_EMPTY) &&
 8018884:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8018888:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801888c:	2b21      	cmp	r3, #33	; 0x21
 801888e:	d080      	beq.n	8018792 <coap_send_pdu+0x3e>
  if (pdu->type == COAP_MESSAGE_CON && COAP_PROTO_NOT_RELIABLE(session->proto))
 8018890:	b942      	cbnz	r2, 80188a4 <coap_send_pdu+0x150>
 8018892:	7923      	ldrb	r3, [r4, #4]
 8018894:	3b01      	subs	r3, #1
 8018896:	2b01      	cmp	r3, #1
    session->con_active++;
 8018898:	bf9e      	ittt	ls
 801889a:	f894 308e 	ldrbls.w	r3, [r4, #142]	; 0x8e
 801889e:	3301      	addls	r3, #1
 80188a0:	f884 308e 	strbls.w	r3, [r4, #142]	; 0x8e
  bytes_written = coap_session_send_pdu(session, pdu);
 80188a4:	4629      	mov	r1, r5
 80188a6:	4620      	mov	r0, r4
 80188a8:	f7ff fb9a 	bl	8017fe0 <coap_session_send_pdu>
  return bytes_written;
 80188ac:	e776      	b.n	801879c <coap_send_pdu+0x48>
    return COAP_DROPPED_RESPONSE;
 80188ae:	f06f 0001 	mvn.w	r0, #1
 80188b2:	e773      	b.n	801879c <coap_send_pdu+0x48>

080188b4 <coap_send>:
coap_send(coap_session_t *session, coap_pdu_t *pdu) {
 80188b4:	b570      	push	{r4, r5, r6, lr}
 80188b6:	460c      	mov	r4, r1
 80188b8:	4606      	mov	r6, r0
  if (!coap_pdu_encode_header(pdu, session->proto)) {
 80188ba:	7901      	ldrb	r1, [r0, #4]
 80188bc:	4620      	mov	r0, r4
 80188be:	f001 fdcb 	bl	801a458 <coap_pdu_encode_header>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	d036      	beq.n	8018934 <coap_send+0x80>
  bytes_written = coap_send_pdu( session, pdu, NULL );
 80188c6:	2200      	movs	r2, #0
 80188c8:	4621      	mov	r1, r4
 80188ca:	4630      	mov	r0, r6
 80188cc:	f7ff ff42 	bl	8018754 <coap_send_pdu>
  if (bytes_written == COAP_PDU_DELAYED) {
 80188d0:	1cc3      	adds	r3, r0, #3
  bytes_written = coap_send_pdu( session, pdu, NULL );
 80188d2:	4605      	mov	r5, r0
  if (bytes_written == COAP_PDU_DELAYED) {
 80188d4:	d102      	bne.n	80188dc <coap_send+0x28>
      return pdu->tid;
 80188d6:	88e5      	ldrh	r5, [r4, #6]
}
 80188d8:	4628      	mov	r0, r5
 80188da:	bd70      	pop	{r4, r5, r6, pc}
  if (bytes_written < 0) {
 80188dc:	2800      	cmp	r0, #0
 80188de:	da03      	bge.n	80188e8 <coap_send+0x34>
    coap_delete_pdu(pdu);
 80188e0:	4620      	mov	r0, r4
 80188e2:	f001 fad4 	bl	8019e8e <coap_delete_pdu>
    return id;
 80188e6:	e7f7      	b.n	80188d8 <coap_send+0x24>
  if (COAP_PROTO_RELIABLE(session->proto) &&
 80188e8:	7933      	ldrb	r3, [r6, #4]
 80188ea:	3b03      	subs	r3, #3
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b01      	cmp	r3, #1
 80188f0:	d80e      	bhi.n	8018910 <coap_send+0x5c>
    (size_t)bytes_written < pdu->used_size + pdu->hdr_size) {
 80188f2:	78e2      	ldrb	r2, [r4, #3]
 80188f4:	6921      	ldr	r1, [r4, #16]
 80188f6:	440a      	add	r2, r1
  if (COAP_PROTO_RELIABLE(session->proto) &&
 80188f8:	4282      	cmp	r2, r0
 80188fa:	d909      	bls.n	8018910 <coap_send+0x5c>
    if (coap_session_delay_pdu(session, pdu, NULL) == COAP_PDU_DELAYED) {
 80188fc:	2200      	movs	r2, #0
 80188fe:	4621      	mov	r1, r4
 8018900:	4630      	mov	r0, r6
 8018902:	f7fe fc95 	bl	8017230 <coap_session_delay_pdu>
 8018906:	3003      	adds	r0, #3
 8018908:	d114      	bne.n	8018934 <coap_send+0x80>
      session->partial_write = (size_t)bytes_written;
 801890a:	f8c6 5094 	str.w	r5, [r6, #148]	; 0x94
 801890e:	e7e2      	b.n	80188d6 <coap_send+0x22>
  if (pdu->type != COAP_MESSAGE_CON || COAP_PROTO_RELIABLE(session->proto)) {
 8018910:	7822      	ldrb	r2, [r4, #0]
 8018912:	b90a      	cbnz	r2, 8018918 <coap_send+0x64>
 8018914:	2b01      	cmp	r3, #1
 8018916:	d801      	bhi.n	801891c <coap_send+0x68>
    coap_tid_t id = pdu->tid;
 8018918:	88e5      	ldrh	r5, [r4, #6]
 801891a:	e7e1      	b.n	80188e0 <coap_send+0x2c>
  coap_queue_t *node = coap_new_node();
 801891c:	f7ff fa94 	bl	8017e48 <coap_new_node>
  if (!node) {
 8018920:	4605      	mov	r5, r0
 8018922:	b968      	cbnz	r0, 8018940 <coap_send+0x8c>
    coap_log(LOG_DEBUG, "coap_wait_ack: insufficient memory\n");
 8018924:	f7fc fb5e 	bl	8014fe4 <coap_get_log_level>
 8018928:	2806      	cmp	r0, #6
 801892a:	d903      	bls.n	8018934 <coap_send+0x80>
 801892c:	490d      	ldr	r1, [pc, #52]	; (8018964 <coap_send+0xb0>)
 801892e:	2007      	movs	r0, #7
 8018930:	f7fc fbc2 	bl	80150b8 <coap_log_impl>
  coap_delete_pdu(pdu);
 8018934:	4620      	mov	r0, r4
 8018936:	f001 faaa 	bl	8019e8e <coap_delete_pdu>
  return COAP_INVALID_TID;
 801893a:	f04f 35ff 	mov.w	r5, #4294967295
 801893e:	e7cb      	b.n	80188d8 <coap_send+0x24>
  node->id = pdu->tid;
 8018940:	88e3      	ldrh	r3, [r4, #6]
  node->pdu = pdu;
 8018942:	e9c0 3407 	strd	r3, r4, [r0, #28]
 8018946:	f004 f935 	bl	801cbb4 <rand>
  node->timeout = coap_calc_timeout(session, r);
 801894a:	b2c1      	uxtb	r1, r0
 801894c:	4630      	mov	r0, r6
 801894e:	f7ff fb85 	bl	801805c <coap_calc_timeout>
  return coap_wait_ack(session->context, session, node);
 8018952:	462a      	mov	r2, r5
  node->timeout = coap_calc_timeout(session, r);
 8018954:	6168      	str	r0, [r5, #20]
  return coap_wait_ack(session->context, session, node);
 8018956:	4631      	mov	r1, r6
 8018958:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
}
 801895c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return coap_wait_ack(session->context, session, node);
 8018960:	f7ff bbaa 	b.w	80180b8 <coap_wait_ack>
 8018964:	08030a08 	.word	0x08030a08

08018968 <coap_send_ack>:
coap_send_ack(coap_session_t *session, coap_pdu_t *request) {
 8018968:	b510      	push	{r4, lr}
 801896a:	4604      	mov	r4, r0
  if (request && request->type == COAP_MESSAGE_CON &&
 801896c:	b189      	cbz	r1, 8018992 <coap_send_ack+0x2a>
 801896e:	780b      	ldrb	r3, [r1, #0]
 8018970:	b97b      	cbnz	r3, 8018992 <coap_send_ack+0x2a>
    COAP_PROTO_NOT_RELIABLE(session->proto)) {
 8018972:	7902      	ldrb	r2, [r0, #4]
  if (request && request->type == COAP_MESSAGE_CON &&
 8018974:	3a01      	subs	r2, #1
 8018976:	2a01      	cmp	r2, #1
 8018978:	d80b      	bhi.n	8018992 <coap_send_ack+0x2a>
    response = coap_pdu_init(COAP_MESSAGE_ACK, 0, request->tid, 0);
 801897a:	88ca      	ldrh	r2, [r1, #6]
 801897c:	2002      	movs	r0, #2
 801897e:	4619      	mov	r1, r3
 8018980:	f001 fa54 	bl	8019e2c <coap_pdu_init>
    if (response)
 8018984:	4601      	mov	r1, r0
 8018986:	b120      	cbz	r0, 8018992 <coap_send_ack+0x2a>
      result = coap_send(session, response);
 8018988:	4620      	mov	r0, r4
}
 801898a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      result = coap_send(session, response);
 801898e:	f7ff bf91 	b.w	80188b4 <coap_send>
}
 8018992:	f04f 30ff 	mov.w	r0, #4294967295
 8018996:	bd10      	pop	{r4, pc}

08018998 <coap_send_message_type>:
coap_send_message_type(coap_session_t *session, coap_pdu_t *request, unsigned char type) {
 8018998:	b510      	push	{r4, lr}
 801899a:	4604      	mov	r4, r0
 801899c:	4610      	mov	r0, r2
  if (request) {
 801899e:	b159      	cbz	r1, 80189b8 <coap_send_message_type+0x20>
    response = coap_pdu_init(type, 0, request->tid, 0);
 80189a0:	2300      	movs	r3, #0
 80189a2:	88ca      	ldrh	r2, [r1, #6]
 80189a4:	4619      	mov	r1, r3
 80189a6:	f001 fa41 	bl	8019e2c <coap_pdu_init>
    if (response)
 80189aa:	4601      	mov	r1, r0
 80189ac:	b120      	cbz	r0, 80189b8 <coap_send_message_type+0x20>
      result = coap_send(session, response);
 80189ae:	4620      	mov	r0, r4
}
 80189b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      result = coap_send(session, response);
 80189b4:	f7ff bf7e 	b.w	80188b4 <coap_send>
}
 80189b8:	f04f 30ff 	mov.w	r0, #4294967295
 80189bc:	bd10      	pop	{r4, pc}
	...

080189c0 <coap_dispatch>:
  coap_pdu_t *pdu) {
 80189c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c4:	b09d      	sub	sp, #116	; 0x74
  coap_queue_t *sent = NULL;
 80189c6:	2300      	movs	r3, #0
  coap_pdu_t *pdu) {
 80189c8:	4606      	mov	r6, r0
 80189ca:	460d      	mov	r5, r1
 80189cc:	4614      	mov	r4, r2
  coap_queue_t *sent = NULL;
 80189ce:	9309      	str	r3, [sp, #36]	; 0x24
  if (LOG_DEBUG <= coap_get_log_level()) {
 80189d0:	f7fc fb08 	bl	8014fe4 <coap_get_log_level>
 80189d4:	2806      	cmp	r0, #6
 80189d6:	d903      	bls.n	80189e0 <coap_dispatch+0x20>
    coap_show_pdu(LOG_DEBUG, pdu);
 80189d8:	4621      	mov	r1, r4
 80189da:	2007      	movs	r0, #7
 80189dc:	f7fc fbce 	bl	801517c <coap_show_pdu>
  memset(opt_filter, 0, sizeof(coap_opt_filter_t));
 80189e0:	2300      	movs	r3, #0
 80189e2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80189e6:	9312      	str	r3, [sp, #72]	; 0x48
  switch (pdu->type) {
 80189e8:	7823      	ldrb	r3, [r4, #0]
 80189ea:	2b03      	cmp	r3, #3
 80189ec:	d829      	bhi.n	8018a42 <coap_dispatch+0x82>
 80189ee:	e8df f003 	tbb	[pc, r3]
 80189f2:	a9b2      	.short	0xa9b2
 80189f4:	4302      	.short	0x4302
      coap_remove_from_queue(&context->sendqueue, session, pdu->tid, &sent);
 80189f6:	ab09      	add	r3, sp, #36	; 0x24
 80189f8:	88e2      	ldrh	r2, [r4, #6]
 80189fa:	4629      	mov	r1, r5
 80189fc:	f106 0020 	add.w	r0, r6, #32
 8018a00:	f7ff fba0 	bl	8018144 <coap_remove_from_queue>
      if (session->con_active) {
 8018a04:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
 8018a08:	b143      	cbz	r3, 8018a1c <coap_dispatch+0x5c>
        session->con_active--;
 8018a0a:	3b01      	subs	r3, #1
 8018a0c:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
        if (session->state == COAP_SESSION_STATE_ESTABLISHED)
 8018a10:	79ab      	ldrb	r3, [r5, #6]
 8018a12:	2b04      	cmp	r3, #4
 8018a14:	d102      	bne.n	8018a1c <coap_dispatch+0x5c>
          coap_session_connected(session);
 8018a16:	4628      	mov	r0, r5
 8018a18:	f7fe fc86 	bl	8017328 <coap_session_connected>
      if (pdu->code == 0)
 8018a1c:	7863      	ldrb	r3, [r4, #1]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d053      	beq.n	8018aca <coap_dispatch+0x10a>
 8018a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
      if (sent && COAP_RESPONSE_CLASS(sent->pdu->code) == 2) {
 8018a24:	b16b      	cbz	r3, 8018a42 <coap_dispatch+0x82>
 8018a26:	6a1a      	ldr	r2, [r3, #32]
 8018a28:	7851      	ldrb	r1, [r2, #1]
 8018a2a:	0949      	lsrs	r1, r1, #5
 8018a2c:	2902      	cmp	r1, #2
 8018a2e:	d108      	bne.n	8018a42 <coap_dispatch+0x82>
        { sent->pdu->token_length, sent->pdu->token };
 8018a30:	7911      	ldrb	r1, [r2, #4]
        const coap_binary_t token =
 8018a32:	6992      	ldr	r2, [r2, #24]
        { sent->pdu->token_length, sent->pdu->token };
 8018a34:	9116      	str	r1, [sp, #88]	; 0x58
        const coap_binary_t token =
 8018a36:	9217      	str	r2, [sp, #92]	; 0x5c
        coap_touch_observer(context, sent->session, &token);
 8018a38:	6999      	ldr	r1, [r3, #24]
 8018a3a:	aa16      	add	r2, sp, #88	; 0x58
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f002 fc27 	bl	801b290 <coap_touch_observer>
  if (COAP_PDU_IS_SIGNALING(pdu))
 8018a42:	7863      	ldrb	r3, [r4, #1]
 8018a44:	2bdf      	cmp	r3, #223	; 0xdf
 8018a46:	f240 80f8 	bls.w	8018c3a <coap_dispatch+0x27a>
  coap_option_iterator_init(pdu, &opt_iter, COAP_OPT_ALL);
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	a916      	add	r1, sp, #88	; 0x58
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f000 ffe2 	bl	8019a18 <coap_option_iterator_init>
  if (pdu->code == COAP_SIGNALING_CSM) {
 8018a54:	7863      	ldrb	r3, [r4, #1]
 8018a56:	2be1      	cmp	r3, #225	; 0xe1
 8018a58:	f040 80b4 	bne.w	8018bc4 <coap_dispatch+0x204>
    while ((option = coap_option_next(&opt_iter))) {
 8018a5c:	a816      	add	r0, sp, #88	; 0x58
 8018a5e:	f001 f953 	bl	8019d08 <coap_option_next>
 8018a62:	4604      	mov	r4, r0
 8018a64:	2800      	cmp	r0, #0
 8018a66:	f040 8099 	bne.w	8018b9c <coap_dispatch+0x1dc>
    if (session->state == COAP_SESSION_STATE_CSM)
 8018a6a:	79ab      	ldrb	r3, [r5, #6]
 8018a6c:	2b03      	cmp	r3, #3
 8018a6e:	d12c      	bne.n	8018aca <coap_dispatch+0x10a>
      coap_session_connected(session);
 8018a70:	4628      	mov	r0, r5
 8018a72:	f7fe fc59 	bl	8017328 <coap_session_connected>
 8018a76:	e028      	b.n	8018aca <coap_dispatch+0x10a>
      coap_log(LOG_ALERT, "got RST for message %d\n", pdu->tid);
 8018a78:	f7fc fab4 	bl	8014fe4 <coap_get_log_level>
 8018a7c:	b120      	cbz	r0, 8018a88 <coap_dispatch+0xc8>
 8018a7e:	88e2      	ldrh	r2, [r4, #6]
 8018a80:	49b1      	ldr	r1, [pc, #708]	; (8018d48 <coap_dispatch+0x388>)
 8018a82:	2001      	movs	r0, #1
 8018a84:	f7fc fb18 	bl	80150b8 <coap_log_impl>
      if (session->con_active) {
 8018a88:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
 8018a8c:	b143      	cbz	r3, 8018aa0 <coap_dispatch+0xe0>
        session->con_active--;
 8018a8e:	3b01      	subs	r3, #1
 8018a90:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
        if (session->state == COAP_SESSION_STATE_ESTABLISHED)
 8018a94:	79ab      	ldrb	r3, [r5, #6]
 8018a96:	2b04      	cmp	r3, #4
 8018a98:	d102      	bne.n	8018aa0 <coap_dispatch+0xe0>
          coap_session_connected(session);
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f7fe fc44 	bl	8017328 <coap_session_connected>
      coap_remove_from_queue(&context->sendqueue, session, pdu->tid, &sent);
 8018aa0:	88e2      	ldrh	r2, [r4, #6]
 8018aa2:	ab09      	add	r3, sp, #36	; 0x24
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	f106 0020 	add.w	r0, r6, #32
 8018aaa:	f7ff fb4b 	bl	8018144 <coap_remove_from_queue>
      if (sent) {
 8018aae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018ab0:	68f0      	ldr	r0, [r6, #12]
 8018ab2:	2f00      	cmp	r7, #0
 8018ab4:	d029      	beq.n	8018b0a <coap_dispatch+0x14a>
  COAP_SET_STR(&token, sent->pdu->token_length, sent->pdu->token);
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	791a      	ldrb	r2, [r3, #4]
 8018aba:	699b      	ldr	r3, [r3, #24]
 8018abc:	9216      	str	r2, [sp, #88]	; 0x58
 8018abe:	9317      	str	r3, [sp, #92]	; 0x5c
  RESOURCES_ITER(context->resources, r) {
 8018ac0:	b948      	cbnz	r0, 8018ad6 <coap_dispatch+0x116>
        if(sent->pdu->type==COAP_MESSAGE_CON && context->nack_handler)
 8018ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018ac4:	6a0a      	ldr	r2, [r1, #32]
 8018ac6:	7813      	ldrb	r3, [r2, #0]
 8018ac8:	b1ab      	cbz	r3, 8018af6 <coap_dispatch+0x136>
  coap_delete_node(sent);
 8018aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018acc:	f7ff f921 	bl	8017d12 <coap_delete_node>
}
 8018ad0:	b01d      	add	sp, #116	; 0x74
 8018ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RESOURCES_ITER(context->resources, r) {
 8018ad6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    num_cancelled += coap_delete_observer(r, sent->session, &token);
 8018ad8:	69b9      	ldr	r1, [r7, #24]
 8018ada:	aa16      	add	r2, sp, #88	; 0x58
 8018adc:	f002 fbec 	bl	801b2b8 <coap_delete_observer>
    coap_cancel_all_messages(context, sent->session, token.s, token.length);
 8018ae0:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	; 0x58
 8018ae4:	69b9      	ldr	r1, [r7, #24]
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	f7ff fbd0 	bl	801828c <coap_cancel_all_messages>
  RESOURCES_ITER(context->resources, r) {
 8018aec:	2c00      	cmp	r4, #0
 8018aee:	d0e8      	beq.n	8018ac2 <coap_dispatch+0x102>
 8018af0:	4620      	mov	r0, r4
 8018af2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8018af4:	e7f0      	b.n	8018ad8 <coap_dispatch+0x118>
        if(sent->pdu->type==COAP_MESSAGE_CON && context->nack_handler)
 8018af6:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8018af8:	2c00      	cmp	r4, #0
 8018afa:	d0e6      	beq.n	8018aca <coap_dispatch+0x10a>
          context->nack_handler(context, sent->session, sent->pdu, COAP_NACK_RST, sent->id);
 8018afc:	69cb      	ldr	r3, [r1, #28]
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	6989      	ldr	r1, [r1, #24]
 8018b02:	2302      	movs	r3, #2
 8018b04:	4630      	mov	r0, r6
 8018b06:	47a0      	blx	r4
 8018b08:	e7df      	b.n	8018aca <coap_dispatch+0x10a>
        RESOURCES_ITER(context->resources, r) {
 8018b0a:	2800      	cmp	r0, #0
 8018b0c:	d0dd      	beq.n	8018aca <coap_dispatch+0x10a>
 8018b0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
          LL_FOREACH_SAFE(r->subscribers, obs, tmp) {
 8018b10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018b12:	b193      	cbz	r3, 8018b3a <coap_dispatch+0x17a>
            if (obs->tid == pdu->tid && obs->session == session) {
 8018b14:	895f      	ldrh	r7, [r3, #10]
 8018b16:	88e6      	ldrh	r6, [r4, #6]
          LL_FOREACH_SAFE(r->subscribers, obs, tmp) {
 8018b18:	6819      	ldr	r1, [r3, #0]
            if (obs->tid == pdu->tid && obs->session == session) {
 8018b1a:	42b7      	cmp	r7, r6
 8018b1c:	d10b      	bne.n	8018b36 <coap_dispatch+0x176>
 8018b1e:	685e      	ldr	r6, [r3, #4]
 8018b20:	42ae      	cmp	r6, r5
 8018b22:	d108      	bne.n	8018b36 <coap_dispatch+0x176>
              COAP_SET_STR(&token, obs->token_length, obs->token);
 8018b24:	695a      	ldr	r2, [r3, #20]
 8018b26:	9216      	str	r2, [sp, #88]	; 0x58
 8018b28:	3318      	adds	r3, #24
              coap_delete_observer(r, session, &token);
 8018b2a:	aa16      	add	r2, sp, #88	; 0x58
 8018b2c:	4629      	mov	r1, r5
              COAP_SET_STR(&token, obs->token_length, obs->token);
 8018b2e:	9317      	str	r3, [sp, #92]	; 0x5c
              coap_delete_observer(r, session, &token);
 8018b30:	f002 fbc2 	bl	801b2b8 <coap_delete_observer>
              goto cleanup;
 8018b34:	e7c9      	b.n	8018aca <coap_dispatch+0x10a>
        RESOURCES_ITER(context->resources, r) {
 8018b36:	460b      	mov	r3, r1
 8018b38:	e7eb      	b.n	8018b12 <coap_dispatch+0x152>
 8018b3a:	2a00      	cmp	r2, #0
 8018b3c:	d0c5      	beq.n	8018aca <coap_dispatch+0x10a>
 8018b3e:	4610      	mov	r0, r2
 8018b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018b42:	e7e5      	b.n	8018b10 <coap_dispatch+0x150>
      if (coap_option_check_critical(context, pdu, opt_filter) == 0)
 8018b44:	aa10      	add	r2, sp, #64	; 0x40
 8018b46:	4621      	mov	r1, r4
 8018b48:	4630      	mov	r0, r6
 8018b4a:	f7ff f9d9 	bl	8017f00 <coap_option_check_critical>
 8018b4e:	2800      	cmp	r0, #0
 8018b50:	f47f af77 	bne.w	8018a42 <coap_dispatch+0x82>
 8018b54:	e7b9      	b.n	8018aca <coap_dispatch+0x10a>
      if (coap_option_check_critical(context, pdu, opt_filter) == 0) {
 8018b56:	aa10      	add	r2, sp, #64	; 0x40
 8018b58:	4621      	mov	r1, r4
 8018b5a:	4630      	mov	r0, r6
 8018b5c:	f7ff f9d0 	bl	8017f00 <coap_option_check_critical>
 8018b60:	2800      	cmp	r0, #0
 8018b62:	f47f af6e 	bne.w	8018a42 <coap_dispatch+0x82>
          coap_new_error_response(pdu, COAP_RESPONSE_CODE(402), opt_filter);
 8018b66:	2182      	movs	r1, #130	; 0x82
 8018b68:	aa10      	add	r2, sp, #64	; 0x40
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	f7ff fbe8 	bl	8018340 <coap_new_error_response>
        if (!response) {
 8018b70:	4601      	mov	r1, r0
 8018b72:	b940      	cbnz	r0, 8018b86 <coap_dispatch+0x1c6>
          coap_log(LOG_WARNING,
 8018b74:	f7fc fa36 	bl	8014fe4 <coap_get_log_level>
 8018b78:	2803      	cmp	r0, #3
 8018b7a:	d9a6      	bls.n	8018aca <coap_dispatch+0x10a>
 8018b7c:	4973      	ldr	r1, [pc, #460]	; (8018d4c <coap_dispatch+0x38c>)
            coap_log(LOG_WARNING, "coap_dispatch: error sending response\n");
 8018b7e:	2004      	movs	r0, #4
 8018b80:	f7fc fa9a 	bl	80150b8 <coap_log_impl>
 8018b84:	e7a1      	b.n	8018aca <coap_dispatch+0x10a>
          if (coap_send(session, response) == COAP_INVALID_TID)
 8018b86:	4628      	mov	r0, r5
 8018b88:	f7ff fe94 	bl	80188b4 <coap_send>
 8018b8c:	3001      	adds	r0, #1
 8018b8e:	d19c      	bne.n	8018aca <coap_dispatch+0x10a>
            coap_log(LOG_WARNING, "coap_dispatch: error sending response\n");
 8018b90:	f7fc fa28 	bl	8014fe4 <coap_get_log_level>
 8018b94:	2803      	cmp	r0, #3
 8018b96:	d998      	bls.n	8018aca <coap_dispatch+0x10a>
 8018b98:	496d      	ldr	r1, [pc, #436]	; (8018d50 <coap_dispatch+0x390>)
 8018b9a:	e7f0      	b.n	8018b7e <coap_dispatch+0x1be>
      if (opt_iter.type == COAP_SIGNALING_OPTION_MAX_MESSAGE_SIZE) {
 8018b9c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8018ba0:	2b02      	cmp	r3, #2
 8018ba2:	f47f af5b 	bne.w	8018a5c <coap_dispatch+0x9c>
        coap_session_set_mtu(session, coap_decode_var_bytes(coap_opt_value(option),
 8018ba6:	f000 ffb5 	bl	8019b14 <coap_opt_value>
 8018baa:	4606      	mov	r6, r0
          coap_opt_length(option)));
 8018bac:	4620      	mov	r0, r4
 8018bae:	f000 ff77 	bl	8019aa0 <coap_opt_length>
 8018bb2:	4601      	mov	r1, r0
        coap_session_set_mtu(session, coap_decode_var_bytes(coap_opt_value(option),
 8018bb4:	4630      	mov	r0, r6
 8018bb6:	f7fe ff79 	bl	8017aac <coap_decode_var_bytes>
 8018bba:	4601      	mov	r1, r0
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	f7fe f8c1 	bl	8016d44 <coap_session_set_mtu>
 8018bc2:	e74b      	b.n	8018a5c <coap_dispatch+0x9c>
  } else if (pdu->code == COAP_SIGNALING_PING) {
 8018bc4:	2be2      	cmp	r3, #226	; 0xe2
 8018bc6:	d11e      	bne.n	8018c06 <coap_dispatch+0x246>
    coap_pdu_t *pong = coap_pdu_init(COAP_MESSAGE_CON, COAP_SIGNALING_PONG, 0, 1);
 8018bc8:	2200      	movs	r2, #0
 8018bca:	2301      	movs	r3, #1
 8018bcc:	21e3      	movs	r1, #227	; 0xe3
 8018bce:	4610      	mov	r0, r2
 8018bd0:	f001 f92c 	bl	8019e2c <coap_pdu_init>
    if (context->ping_handler) {
 8018bd4:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
    coap_pdu_t *pong = coap_pdu_init(COAP_MESSAGE_CON, COAP_SIGNALING_PONG, 0, 1);
 8018bd8:	4607      	mov	r7, r0
    if (context->ping_handler) {
 8018bda:	f1b8 0f00 	cmp.w	r8, #0
 8018bde:	d004      	beq.n	8018bea <coap_dispatch+0x22a>
      context->ping_handler(context, session, pdu, pdu->tid);
 8018be0:	88e3      	ldrh	r3, [r4, #6]
 8018be2:	4622      	mov	r2, r4
 8018be4:	4629      	mov	r1, r5
 8018be6:	4630      	mov	r0, r6
 8018be8:	47c0      	blx	r8
    if (pong) {
 8018bea:	2f00      	cmp	r7, #0
 8018bec:	f43f af6d 	beq.w	8018aca <coap_dispatch+0x10a>
      coap_add_option(pong, COAP_SIGNALING_OPTION_CUSTODY, 0, NULL);
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	461a      	mov	r2, r3
 8018bf4:	2102      	movs	r1, #2
 8018bf6:	4638      	mov	r0, r7
 8018bf8:	f001 f9e6 	bl	8019fc8 <coap_add_option>
      coap_send(session, pong);
 8018bfc:	4639      	mov	r1, r7
 8018bfe:	4628      	mov	r0, r5
 8018c00:	f7ff fe58 	bl	80188b4 <coap_send>
 8018c04:	e761      	b.n	8018aca <coap_dispatch+0x10a>
  } else if (pdu->code == COAP_SIGNALING_PONG) {
 8018c06:	2be3      	cmp	r3, #227	; 0xe3
 8018c08:	d10d      	bne.n	8018c26 <coap_dispatch+0x266>
    session->last_pong = session->last_rx_tx;
 8018c0a:	e9d5 232a 	ldrd	r2, r3, [r5, #168]	; 0xa8
    if (context->pong_handler) {
 8018c0e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    session->last_pong = session->last_rx_tx;
 8018c10:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
    if (context->pong_handler) {
 8018c14:	2f00      	cmp	r7, #0
 8018c16:	f43f af58 	beq.w	8018aca <coap_dispatch+0x10a>
      context->pong_handler(context, session, pdu, pdu->tid);
 8018c1a:	88e3      	ldrh	r3, [r4, #6]
 8018c1c:	4622      	mov	r2, r4
 8018c1e:	4629      	mov	r1, r5
 8018c20:	4630      	mov	r0, r6
 8018c22:	47b8      	blx	r7
 8018c24:	e751      	b.n	8018aca <coap_dispatch+0x10a>
          || pdu->code == COAP_SIGNALING_ABORT) {
 8018c26:	331c      	adds	r3, #28
  } else if (pdu->code == COAP_SIGNALING_RELEASE
 8018c28:	b2db      	uxtb	r3, r3
 8018c2a:	2b01      	cmp	r3, #1
 8018c2c:	f63f af4d 	bhi.w	8018aca <coap_dispatch+0x10a>
    coap_session_disconnected(session, COAP_NACK_RST);
 8018c30:	2102      	movs	r1, #2
 8018c32:	4628      	mov	r0, r5
 8018c34:	f7fe fc14 	bl	8017460 <coap_session_disconnected>
}
 8018c38:	e747      	b.n	8018aca <coap_dispatch+0x10a>
  else if (COAP_PDU_IS_REQUEST(pdu))
 8018c3a:	1e5a      	subs	r2, r3, #1
 8018c3c:	2a1e      	cmp	r2, #30
 8018c3e:	f200 81c5 	bhi.w	8018fcc <coap_dispatch+0x60c>
  memset(f, 0, sizeof(coap_opt_filter_t));
 8018c42:	2300      	movs	r3, #0
  coap_string_t *uri_path = coap_get_uri_path(pdu);
 8018c44:	4620      	mov	r0, r4
 8018c46:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8018c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8018c4c:	f002 fe9e 	bl	801b98c <coap_get_uri_path>
  if (!uri_path)
 8018c50:	4607      	mov	r7, r0
 8018c52:	2800      	cmp	r0, #0
 8018c54:	f43f af39 	beq.w	8018aca <coap_dispatch+0x10a>
  coap_str_const_t uri_path_c = { uri_path->length, uri_path->s };
 8018c58:	6803      	ldr	r3, [r0, #0]
 8018c5a:	930a      	str	r3, [sp, #40]	; 0x28
  resource = coap_get_resource_from_uri_path(context, &uri_path_c);
 8018c5c:	a90a      	add	r1, sp, #40	; 0x28
  coap_str_const_t uri_path_c = { uri_path->length, uri_path->s };
 8018c5e:	6843      	ldr	r3, [r0, #4]
 8018c60:	930b      	str	r3, [sp, #44]	; 0x2c
  resource = coap_get_resource_from_uri_path(context, &uri_path_c);
 8018c62:	4630      	mov	r0, r6
 8018c64:	f001 fe42 	bl	801a8ec <coap_get_resource_from_uri_path>
  if ((resource == NULL) || (resource->is_unknown == 1)) {
 8018c68:	4681      	mov	r9, r0
 8018c6a:	b118      	cbz	r0, 8018c74 <coap_dispatch+0x2b4>
 8018c6c:	7803      	ldrb	r3, [r0, #0]
 8018c6e:	06d8      	lsls	r0, r3, #27
 8018c70:	f140 808c 	bpl.w	8018d8c <coap_dispatch+0x3cc>
    if (coap_string_equal(uri_path, &coap_default_uri_wellknown)) {
 8018c74:	683a      	ldr	r2, [r7, #0]
 8018c76:	f894 8001 	ldrb.w	r8, [r4, #1]
 8018c7a:	2a10      	cmp	r2, #16
 8018c7c:	d145      	bne.n	8018d0a <coap_dispatch+0x34a>
 8018c7e:	4935      	ldr	r1, [pc, #212]	; (8018d54 <coap_dispatch+0x394>)
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f003 facf 	bl	801c224 <memcmp>
 8018c86:	2800      	cmp	r0, #0
 8018c88:	d13f      	bne.n	8018d0a <coap_dispatch+0x34a>
      if (pdu->code == COAP_REQUEST_GET) { /* GET */
 8018c8a:	f1b8 0f01 	cmp.w	r8, #1
 8018c8e:	d12e      	bne.n	8018cee <coap_dispatch+0x32e>
        coap_log(LOG_INFO, "create default response for %s\n",
 8018c90:	f7fc f9a8 	bl	8014fe4 <coap_get_log_level>
 8018c94:	2805      	cmp	r0, #5
 8018c96:	d904      	bls.n	8018ca2 <coap_dispatch+0x2e2>
 8018c98:	4a2e      	ldr	r2, [pc, #184]	; (8018d54 <coap_dispatch+0x394>)
 8018c9a:	492f      	ldr	r1, [pc, #188]	; (8018d58 <coap_dispatch+0x398>)
 8018c9c:	2006      	movs	r0, #6
 8018c9e:	f7fc fa0b 	bl	80150b8 <coap_log_impl>
        response = coap_wellknown_response(context, session, pdu);
 8018ca2:	4622      	mov	r2, r4
 8018ca4:	4629      	mov	r1, r5
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	f7ff fbd4 	bl	8018454 <coap_wellknown_response>
        coap_new_error_response(pdu, COAP_RESPONSE_CODE(404),
 8018cac:	4680      	mov	r8, r0
    if (!resource) {
 8018cae:	f1b9 0f00 	cmp.w	r9, #0
 8018cb2:	d168      	bne.n	8018d86 <coap_dispatch+0x3c6>
      if (response && (no_response(pdu, response) != RESPONSE_DROP)) {
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	f000 8133 	beq.w	8018f20 <coap_dispatch+0x560>
 8018cba:	4601      	mov	r1, r0
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	f7fe ffb1 	bl	8017c24 <no_response>
 8018cc2:	2801      	cmp	r0, #1
 8018cc4:	f000 812c 	beq.w	8018f20 <coap_dispatch+0x560>
        if (coap_send(session, response) == COAP_INVALID_TID)
 8018cc8:	4641      	mov	r1, r8
 8018cca:	4628      	mov	r0, r5
 8018ccc:	f7ff fdf2 	bl	80188b4 <coap_send>
 8018cd0:	3001      	adds	r0, #1
 8018cd2:	d108      	bne.n	8018ce6 <coap_dispatch+0x326>
          coap_log(LOG_WARNING, "cannot send response for transaction %u\n",
 8018cd4:	f7fc f986 	bl	8014fe4 <coap_get_log_level>
 8018cd8:	2803      	cmp	r0, #3
 8018cda:	d904      	bls.n	8018ce6 <coap_dispatch+0x326>
 8018cdc:	88e2      	ldrh	r2, [r4, #6]
 8018cde:	491f      	ldr	r1, [pc, #124]	; (8018d5c <coap_dispatch+0x39c>)
 8018ce0:	2004      	movs	r0, #4
        coap_log(LOG_DEBUG, "cannot send response for transaction %d\n",
 8018ce2:	f7fc f9e9 	bl	80150b8 <coap_log_impl>
  coap_delete_string(uri_path);
 8018ce6:	4638      	mov	r0, r7
 8018ce8:	f002 fd80 	bl	801b7ec <coap_delete_string>
 8018cec:	e6ed      	b.n	8018aca <coap_dispatch+0x10a>
        coap_log(LOG_DEBUG, "method not allowed for .well-known/core\n");
 8018cee:	f7fc f979 	bl	8014fe4 <coap_get_log_level>
 8018cf2:	2806      	cmp	r0, #6
 8018cf4:	d903      	bls.n	8018cfe <coap_dispatch+0x33e>
 8018cf6:	491a      	ldr	r1, [pc, #104]	; (8018d60 <coap_dispatch+0x3a0>)
 8018cf8:	2007      	movs	r0, #7
 8018cfa:	f7fc f9dd 	bl	80150b8 <coap_log_impl>
        response = coap_new_error_response(pdu, COAP_RESPONSE_CODE(405),
 8018cfe:	aa13      	add	r2, sp, #76	; 0x4c
 8018d00:	2185      	movs	r1, #133	; 0x85
        coap_new_error_response(pdu, COAP_RESPONSE_CODE(404),
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7ff fb1c 	bl	8018340 <coap_new_error_response>
 8018d08:	e7d0      	b.n	8018cac <coap_dispatch+0x2ec>
    } else if ((context->unknown_resource != NULL) &&
 8018d0a:	6932      	ldr	r2, [r6, #16]
 8018d0c:	b14a      	cbz	r2, 8018d22 <coap_dispatch+0x362>
               ((size_t)pdu->code - 1 <
 8018d0e:	f108 33ff 	add.w	r3, r8, #4294967295
    } else if ((context->unknown_resource != NULL) &&
 8018d12:	2b06      	cmp	r3, #6
 8018d14:	d805      	bhi.n	8018d22 <coap_dispatch+0x362>
               (context->unknown_resource->handler[pdu->code - 1])) {
 8018d16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                (sizeof(resource->handler) / sizeof(coap_method_handler_t))) &&
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	f040 80c2 	bne.w	8018ea6 <coap_dispatch+0x4e6>
    } else if (pdu->code == COAP_REQUEST_DELETE) {
 8018d22:	f1b8 0f04 	cmp.w	r8, #4
 8018d26:	d11f      	bne.n	8018d68 <coap_dispatch+0x3a8>
      coap_log(LOG_DEBUG, "request for unknown resource '%*.*s',"
 8018d28:	f7fc f95c 	bl	8014fe4 <coap_get_log_level>
 8018d2c:	2806      	cmp	r0, #6
 8018d2e:	d907      	bls.n	8018d40 <coap_dispatch+0x380>
 8018d30:	e9d7 3200 	ldrd	r3, r2, [r7]
 8018d34:	490b      	ldr	r1, [pc, #44]	; (8018d64 <coap_dispatch+0x3a4>)
 8018d36:	9200      	str	r2, [sp, #0]
 8018d38:	2007      	movs	r0, #7
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	f7fc f9bc 	bl	80150b8 <coap_log_impl>
        coap_new_error_response(pdu, COAP_RESPONSE_CODE(202),
 8018d40:	aa13      	add	r2, sp, #76	; 0x4c
 8018d42:	2142      	movs	r1, #66	; 0x42
 8018d44:	e7dd      	b.n	8018d02 <coap_dispatch+0x342>
 8018d46:	bf00      	nop
 8018d48:	08030a2c 	.word	0x08030a2c
 8018d4c:	08030a44 	.word	0x08030a44
 8018d50:	08030a71 	.word	0x08030a71
 8018d54:	08030a98 	.word	0x08030a98
 8018d58:	08030aa9 	.word	0x08030aa9
 8018d5c:	08030b58 	.word	0x08030b58
 8018d60:	08030ac9 	.word	0x08030ac9
 8018d64:	08030af2 	.word	0x08030af2
      coap_log(LOG_DEBUG, "request for unknown resource '%*.*s', return 4.04\n",
 8018d68:	f7fc f93c 	bl	8014fe4 <coap_get_log_level>
 8018d6c:	2806      	cmp	r0, #6
 8018d6e:	d907      	bls.n	8018d80 <coap_dispatch+0x3c0>
 8018d70:	e9d7 3200 	ldrd	r3, r2, [r7]
 8018d74:	49a5      	ldr	r1, [pc, #660]	; (801900c <coap_dispatch+0x64c>)
 8018d76:	9200      	str	r2, [sp, #0]
 8018d78:	2007      	movs	r0, #7
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	f7fc f99c 	bl	80150b8 <coap_log_impl>
        coap_new_error_response(pdu, COAP_RESPONSE_CODE(404),
 8018d80:	aa13      	add	r2, sp, #76	; 0x4c
 8018d82:	2184      	movs	r1, #132	; 0x84
 8018d84:	e7bd      	b.n	8018d02 <coap_dispatch+0x342>
      if (response) {
 8018d86:	b108      	cbz	r0, 8018d8c <coap_dispatch+0x3cc>
        coap_delete_pdu(response);
 8018d88:	f001 f881 	bl	8019e8e <coap_delete_pdu>
  if ((size_t)pdu->code - 1 <
 8018d8c:	7863      	ldrb	r3, [r4, #1]
 8018d8e:	3b01      	subs	r3, #1
 8018d90:	2b06      	cmp	r3, #6
 8018d92:	f200 80dc 	bhi.w	8018f4e <coap_dispatch+0x58e>
    h = resource->handler[pdu->code - 1];
 8018d96:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018d9a:	685b      	ldr	r3, [r3, #4]
 8018d9c:	9306      	str	r3, [sp, #24]
  if (h) {
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	f000 80d5 	beq.w	8018f4e <coap_dispatch+0x58e>
    coap_string_t *query = coap_get_query(pdu);
 8018da4:	4620      	mov	r0, r4
 8018da6:	f002 fd6d 	bl	801b884 <coap_get_query>
 8018daa:	4682      	mov	sl, r0
     coap_log(LOG_DEBUG, "call custom handler for resource '%*.*s'\n",
 8018dac:	f7fc f91a 	bl	8014fe4 <coap_get_log_level>
 8018db0:	2806      	cmp	r0, #6
 8018db2:	d909      	bls.n	8018dc8 <coap_dispatch+0x408>
 8018db4:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
 8018db8:	4995      	ldr	r1, [pc, #596]	; (8019010 <coap_dispatch+0x650>)
 8018dba:	e9d2 3200 	ldrd	r3, r2, [r2]
 8018dbe:	2007      	movs	r0, #7
 8018dc0:	9200      	str	r2, [sp, #0]
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	f7fc f978 	bl	80150b8 <coap_log_impl>
    response = coap_pdu_init(pdu->type == COAP_MESSAGE_CON
 8018dc8:	7823      	ldrb	r3, [r4, #0]
 8018dca:	88e2      	ldrh	r2, [r4, #6]
 8018dcc:	9205      	str	r2, [sp, #20]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	bf0c      	ite	eq
 8018dd4:	f04f 0802 	moveq.w	r8, #2
 8018dd8:	f04f 0801 	movne.w	r8, #1
 8018ddc:	f7fd ff92 	bl	8016d04 <coap_session_max_pdu_size>
 8018de0:	9a05      	ldr	r2, [sp, #20]
 8018de2:	4603      	mov	r3, r0
 8018de4:	2100      	movs	r1, #0
 8018de6:	4640      	mov	r0, r8
 8018de8:	f001 f820 	bl	8019e2c <coap_pdu_init>
    if (coap_add_token(response, pdu->token_length, pdu->token)) {
 8018dec:	69a2      	ldr	r2, [r4, #24]
 8018dee:	7921      	ldrb	r1, [r4, #4]
    response = coap_pdu_init(pdu->type == COAP_MESSAGE_CON
 8018df0:	4680      	mov	r8, r0
    if (coap_add_token(response, pdu->token_length, pdu->token)) {
 8018df2:	f001 f8c1 	bl	8019f78 <coap_add_token>
 8018df6:	2800      	cmp	r0, #0
 8018df8:	f000 8096 	beq.w	8018f28 <coap_dispatch+0x568>
      coap_binary_t token = { pdu->token_length, pdu->token };
 8018dfc:	7923      	ldrb	r3, [r4, #4]
 8018dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8018e00:	69a3      	ldr	r3, [r4, #24]
 8018e02:	930d      	str	r3, [sp, #52]	; 0x34
      if (resource->observable) {
 8018e04:	f899 3000 	ldrb.w	r3, [r9]
 8018e08:	0759      	lsls	r1, r3, #29
 8018e0a:	d44e      	bmi.n	8018eaa <coap_dispatch+0x4ea>
      coap_opt_t *observe = NULL;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	9305      	str	r3, [sp, #20]
    int owns_query = 1;
 8018e10:	2301      	movs	r3, #1
 8018e12:	9307      	str	r3, [sp, #28]
      h(context, resource, session, pdu, &token, query, response);
 8018e14:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8018e18:	4630      	mov	r0, r6
 8018e1a:	e9cd a801 	strd	sl, r8, [sp, #4]
 8018e1e:	9e06      	ldr	r6, [sp, #24]
 8018e20:	f8cd b000 	str.w	fp, [sp]
 8018e24:	4623      	mov	r3, r4
 8018e26:	462a      	mov	r2, r5
 8018e28:	4649      	mov	r1, r9
 8018e2a:	47b0      	blx	r6
      if (query && owns_query)
 8018e2c:	f1ba 0f00 	cmp.w	sl, #0
 8018e30:	d004      	beq.n	8018e3c <coap_dispatch+0x47c>
 8018e32:	9b07      	ldr	r3, [sp, #28]
 8018e34:	b113      	cbz	r3, 8018e3c <coap_dispatch+0x47c>
        coap_delete_string(query);
 8018e36:	4650      	mov	r0, sl
 8018e38:	f002 fcd8 	bl	801b7ec <coap_delete_string>
      respond = no_response(pdu, response);
 8018e3c:	4641      	mov	r1, r8
 8018e3e:	4620      	mov	r0, r4
 8018e40:	f7fe fef0 	bl	8017c24 <no_response>
      if (respond != RESPONSE_DROP) {
 8018e44:	2801      	cmp	r0, #1
      respond = no_response(pdu, response);
 8018e46:	4606      	mov	r6, r0
      if (respond != RESPONSE_DROP) {
 8018e48:	d06a      	beq.n	8018f20 <coap_dispatch+0x560>
        if (observe && (COAP_RESPONSE_CLASS(response->code) > 2)) {
 8018e4a:	9b05      	ldr	r3, [sp, #20]
 8018e4c:	b143      	cbz	r3, 8018e60 <coap_dispatch+0x4a0>
 8018e4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018e52:	2b5f      	cmp	r3, #95	; 0x5f
 8018e54:	d904      	bls.n	8018e60 <coap_dispatch+0x4a0>
          coap_delete_observer(resource, session, &token);
 8018e56:	465a      	mov	r2, fp
 8018e58:	4629      	mov	r1, r5
 8018e5a:	4648      	mov	r0, r9
 8018e5c:	f002 fa2c 	bl	801b2b8 <coap_delete_observer>
        if ((response->type == COAP_MESSAGE_ACK)
 8018e60:	f8b8 3000 	ldrh.w	r3, [r8]
 8018e64:	2b02      	cmp	r3, #2
          response->token_length = 0;
 8018e66:	bf02      	ittt	eq
 8018e68:	2300      	moveq	r3, #0
 8018e6a:	f888 3004 	strbeq.w	r3, [r8, #4]
          response->used_size = 0;
 8018e6e:	f8c8 3010 	streq.w	r3, [r8, #16]
        if ((respond == RESPONSE_SEND)
 8018e72:	2e02      	cmp	r6, #2
 8018e74:	d007      	beq.n	8018e86 <coap_dispatch+0x4c6>
          || /* RESPOND_DEFAULT */
 8018e76:	f898 3000 	ldrb.w	r3, [r8]
 8018e7a:	2b01      	cmp	r3, #1
 8018e7c:	d103      	bne.n	8018e86 <coap_dispatch+0x4c6>
          (response->type != COAP_MESSAGE_NON ||
 8018e7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018e82:	2b3f      	cmp	r3, #63	; 0x3f
 8018e84:	d94c      	bls.n	8018f20 <coap_dispatch+0x560>
          if (coap_send(session, response) == COAP_INVALID_TID)
 8018e86:	4641      	mov	r1, r8
 8018e88:	4628      	mov	r0, r5
 8018e8a:	f7ff fd13 	bl	80188b4 <coap_send>
 8018e8e:	3001      	adds	r0, #1
 8018e90:	f47f af29 	bne.w	8018ce6 <coap_dispatch+0x326>
            coap_log(LOG_DEBUG, "cannot send response for message %d\n",
 8018e94:	f7fc f8a6 	bl	8014fe4 <coap_get_log_level>
 8018e98:	2806      	cmp	r0, #6
 8018e9a:	f67f af24 	bls.w	8018ce6 <coap_dispatch+0x326>
 8018e9e:	88e2      	ldrh	r2, [r4, #6]
 8018ea0:	495c      	ldr	r1, [pc, #368]	; (8019014 <coap_dispatch+0x654>)
        coap_log(LOG_DEBUG, "cannot send response for transaction %d\n",
 8018ea2:	2007      	movs	r0, #7
 8018ea4:	e71d      	b.n	8018ce2 <coap_dispatch+0x322>
 8018ea6:	4691      	mov	r9, r2
 8018ea8:	e770      	b.n	8018d8c <coap_dispatch+0x3cc>
        observe = coap_check_option(pdu, COAP_OPTION_OBSERVE, &opt_iter);
 8018eaa:	aa16      	add	r2, sp, #88	; 0x58
 8018eac:	2106      	movs	r1, #6
 8018eae:	4620      	mov	r0, r4
 8018eb0:	f000 ff78 	bl	8019da4 <coap_check_option>
        if (observe) {
 8018eb4:	9005      	str	r0, [sp, #20]
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	d0a8      	beq.n	8018e0c <coap_dispatch+0x44c>
            coap_decode_var_bytes(coap_opt_value(observe),
 8018eba:	f000 fe2b 	bl	8019b14 <coap_opt_value>
 8018ebe:	4683      	mov	fp, r0
              coap_opt_length(observe));
 8018ec0:	9805      	ldr	r0, [sp, #20]
 8018ec2:	f000 fded 	bl	8019aa0 <coap_opt_length>
 8018ec6:	4601      	mov	r1, r0
            coap_decode_var_bytes(coap_opt_value(observe),
 8018ec8:	4658      	mov	r0, fp
 8018eca:	f7fe fdef 	bl	8017aac <coap_decode_var_bytes>
          if ((observe_action & COAP_OBSERVE_CANCEL) == 0) {
 8018ece:	f010 0301 	ands.w	r3, r0, #1
 8018ed2:	9307      	str	r3, [sp, #28]
 8018ed4:	d11e      	bne.n	8018f14 <coap_dispatch+0x554>
            if (coap_get_block(pdu, COAP_OPTION_BLOCK2, &block2)) {
 8018ed6:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8018eda:	465a      	mov	r2, fp
 8018edc:	2117      	movs	r1, #23
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f7fb fe4a 	bl	8014b78 <coap_get_block>
 8018ee4:	4603      	mov	r3, r0
            subscription = coap_add_observer(resource, session, &token, query, has_block2, block2);
 8018ee6:	e89b 0003 	ldmia.w	fp, {r0, r1}
            if (coap_get_block(pdu, COAP_OPTION_BLOCK2, &block2)) {
 8018eea:	3b00      	subs	r3, #0
 8018eec:	bf18      	it	ne
 8018eee:	2301      	movne	r3, #1
            subscription = coap_add_observer(resource, session, &token, query, has_block2, block2);
 8018ef0:	aa01      	add	r2, sp, #4
 8018ef2:	e882 0003 	stmia.w	r2, {r0, r1}
 8018ef6:	9300      	str	r3, [sp, #0]
 8018ef8:	aa0c      	add	r2, sp, #48	; 0x30
 8018efa:	4653      	mov	r3, sl
 8018efc:	4629      	mov	r1, r5
 8018efe:	4648      	mov	r0, r9
 8018f00:	f002 fa2e 	bl	801b360 <coap_add_observer>
            if (subscription) {
 8018f04:	2800      	cmp	r0, #0
 8018f06:	d085      	beq.n	8018e14 <coap_dispatch+0x454>
              coap_touch_observer(context, session, &token);
 8018f08:	aa0c      	add	r2, sp, #48	; 0x30
 8018f0a:	4629      	mov	r1, r5
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	f002 f9bf 	bl	801b290 <coap_touch_observer>
 8018f12:	e77f      	b.n	8018e14 <coap_dispatch+0x454>
            coap_delete_observer(resource, session, &token);
 8018f14:	aa0c      	add	r2, sp, #48	; 0x30
 8018f16:	4629      	mov	r1, r5
 8018f18:	4648      	mov	r0, r9
 8018f1a:	f002 f9cd 	bl	801b2b8 <coap_delete_observer>
 8018f1e:	e779      	b.n	8018e14 <coap_dispatch+0x454>
        coap_delete_pdu(response);
 8018f20:	4640      	mov	r0, r8
      coap_delete_pdu(response);
 8018f22:	f000 ffb4 	bl	8019e8e <coap_delete_pdu>
 8018f26:	e6de      	b.n	8018ce6 <coap_dispatch+0x326>
      coap_log(LOG_WARNING, "cannot generate response\r\n");
 8018f28:	f7fc f85c 	bl	8014fe4 <coap_get_log_level>
 8018f2c:	2803      	cmp	r0, #3
 8018f2e:	d903      	bls.n	8018f38 <coap_dispatch+0x578>
 8018f30:	4939      	ldr	r1, [pc, #228]	; (8019018 <coap_dispatch+0x658>)
 8018f32:	2004      	movs	r0, #4
 8018f34:	f7fc f8c0 	bl	80150b8 <coap_log_impl>
  assert(response == NULL);
 8018f38:	f1b8 0f00 	cmp.w	r8, #0
 8018f3c:	f43f aed3 	beq.w	8018ce6 <coap_dispatch+0x326>
 8018f40:	4b36      	ldr	r3, [pc, #216]	; (801901c <coap_dispatch+0x65c>)
 8018f42:	4a37      	ldr	r2, [pc, #220]	; (8019020 <coap_dispatch+0x660>)
 8018f44:	4837      	ldr	r0, [pc, #220]	; (8019024 <coap_dispatch+0x664>)
 8018f46:	f640 013e 	movw	r1, #2110	; 0x83e
 8018f4a:	f002 fd97 	bl	801ba7c <__assert_func>
    if (coap_string_equal(uri_path, &coap_default_uri_wellknown)) {
 8018f4e:	683a      	ldr	r2, [r7, #0]
 8018f50:	2a10      	cmp	r2, #16
 8018f52:	d132      	bne.n	8018fba <coap_dispatch+0x5fa>
 8018f54:	4934      	ldr	r1, [pc, #208]	; (8019028 <coap_dispatch+0x668>)
 8018f56:	6878      	ldr	r0, [r7, #4]
 8018f58:	f003 f964 	bl	801c224 <memcmp>
 8018f5c:	bb68      	cbnz	r0, 8018fba <coap_dispatch+0x5fa>
      coap_log(LOG_DEBUG, "create default response for %s\n",
 8018f5e:	f7fc f841 	bl	8014fe4 <coap_get_log_level>
 8018f62:	2806      	cmp	r0, #6
 8018f64:	d904      	bls.n	8018f70 <coap_dispatch+0x5b0>
 8018f66:	4a30      	ldr	r2, [pc, #192]	; (8019028 <coap_dispatch+0x668>)
 8018f68:	4930      	ldr	r1, [pc, #192]	; (801902c <coap_dispatch+0x66c>)
 8018f6a:	2007      	movs	r0, #7
 8018f6c:	f7fc f8a4 	bl	80150b8 <coap_log_impl>
      response = coap_wellknown_response(context, session, pdu);
 8018f70:	4622      	mov	r2, r4
 8018f72:	4629      	mov	r1, r5
 8018f74:	4630      	mov	r0, r6
 8018f76:	f7ff fa6d 	bl	8018454 <coap_wellknown_response>
 8018f7a:	4606      	mov	r6, r0
      coap_log(LOG_DEBUG, "have wellknown response %p\n", (void *)response);
 8018f7c:	f7fc f832 	bl	8014fe4 <coap_get_log_level>
 8018f80:	2806      	cmp	r0, #6
 8018f82:	d904      	bls.n	8018f8e <coap_dispatch+0x5ce>
 8018f84:	492a      	ldr	r1, [pc, #168]	; (8019030 <coap_dispatch+0x670>)
 8018f86:	4632      	mov	r2, r6
 8018f88:	2007      	movs	r0, #7
 8018f8a:	f7fc f895 	bl	80150b8 <coap_log_impl>
    if (response && (no_response(pdu, response) != RESPONSE_DROP)) {
 8018f8e:	b1de      	cbz	r6, 8018fc8 <coap_dispatch+0x608>
 8018f90:	4631      	mov	r1, r6
 8018f92:	4620      	mov	r0, r4
 8018f94:	f7fe fe46 	bl	8017c24 <no_response>
 8018f98:	2801      	cmp	r0, #1
 8018f9a:	d015      	beq.n	8018fc8 <coap_dispatch+0x608>
      if (coap_send(session, response) == COAP_INVALID_TID)
 8018f9c:	4631      	mov	r1, r6
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	f7ff fc88 	bl	80188b4 <coap_send>
 8018fa4:	3001      	adds	r0, #1
 8018fa6:	f47f ae9e 	bne.w	8018ce6 <coap_dispatch+0x326>
        coap_log(LOG_DEBUG, "cannot send response for transaction %d\n",
 8018faa:	f7fc f81b 	bl	8014fe4 <coap_get_log_level>
 8018fae:	2806      	cmp	r0, #6
 8018fb0:	f67f ae99 	bls.w	8018ce6 <coap_dispatch+0x326>
 8018fb4:	88e2      	ldrh	r2, [r4, #6]
 8018fb6:	491f      	ldr	r1, [pc, #124]	; (8019034 <coap_dispatch+0x674>)
 8018fb8:	e773      	b.n	8018ea2 <coap_dispatch+0x4e2>
      response = coap_new_error_response(pdu, COAP_RESPONSE_CODE(405),
 8018fba:	aa13      	add	r2, sp, #76	; 0x4c
 8018fbc:	2185      	movs	r1, #133	; 0x85
 8018fbe:	4620      	mov	r0, r4
 8018fc0:	f7ff f9be 	bl	8018340 <coap_new_error_response>
 8018fc4:	4606      	mov	r6, r0
 8018fc6:	e7e2      	b.n	8018f8e <coap_dispatch+0x5ce>
      coap_delete_pdu(response);
 8018fc8:	4630      	mov	r0, r6
 8018fca:	e7aa      	b.n	8018f22 <coap_dispatch+0x562>
  else if (COAP_PDU_IS_RESPONSE(pdu))
 8018fcc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8018fd0:	b2d2      	uxtb	r2, r2
 8018fd2:	2a9f      	cmp	r2, #159	; 0x9f
 8018fd4:	d830      	bhi.n	8019038 <coap_dispatch+0x678>
    handle_response(context, session, sent ? sent->pdu : NULL, pdu);
 8018fd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018fd8:	b107      	cbz	r7, 8018fdc <coap_dispatch+0x61c>
 8018fda:	6a3f      	ldr	r7, [r7, #32]
  coap_send_ack(session, rcvd);
 8018fdc:	4621      	mov	r1, r4
 8018fde:	4628      	mov	r0, r5
 8018fe0:	f7ff fcc2 	bl	8018968 <coap_send_ack>
  coap_cancel_all_messages(context, session, rcvd->token, rcvd->token_length);
 8018fe4:	7923      	ldrb	r3, [r4, #4]
 8018fe6:	69a2      	ldr	r2, [r4, #24]
 8018fe8:	4629      	mov	r1, r5
 8018fea:	4630      	mov	r0, r6
 8018fec:	f7ff f94e 	bl	801828c <coap_cancel_all_messages>
  if (context->response_handler) {
 8018ff0:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
 8018ff4:	f1b8 0f00 	cmp.w	r8, #0
 8018ff8:	f43f ad67 	beq.w	8018aca <coap_dispatch+0x10a>
    context->response_handler(context, session, sent, rcvd, rcvd->tid);
 8018ffc:	88e3      	ldrh	r3, [r4, #6]
 8018ffe:	9300      	str	r3, [sp, #0]
 8019000:	463a      	mov	r2, r7
 8019002:	4623      	mov	r3, r4
 8019004:	4629      	mov	r1, r5
 8019006:	4630      	mov	r0, r6
 8019008:	47c0      	blx	r8
 801900a:	e55e      	b.n	8018aca <coap_dispatch+0x10a>
 801900c:	08030b25 	.word	0x08030b25
 8019010:	08030b81 	.word	0x08030b81
 8019014:	08030bab 	.word	0x08030bab
 8019018:	08030bd0 	.word	0x08030bd0
 801901c:	08030c30 	.word	0x08030c30
 8019020:	0802abe8 	.word	0x0802abe8
 8019024:	080305ac 	.word	0x080305ac
 8019028:	08030a98 	.word	0x08030a98
 801902c:	08030aa9 	.word	0x08030aa9
 8019030:	08030beb 	.word	0x08030beb
 8019034:	08030c07 	.word	0x08030c07
    if (COAP_PDU_IS_EMPTY(pdu)) {
 8019038:	b933      	cbnz	r3, 8019048 <coap_dispatch+0x688>
      if (context->ping_handler) {
 801903a:	6b77      	ldr	r7, [r6, #52]	; 0x34
 801903c:	b127      	cbz	r7, 8019048 <coap_dispatch+0x688>
        context->ping_handler(context, session,
 801903e:	88e3      	ldrh	r3, [r4, #6]
 8019040:	4622      	mov	r2, r4
 8019042:	4629      	mov	r1, r5
 8019044:	4630      	mov	r0, r6
 8019046:	47b8      	blx	r7
    coap_log(LOG_DEBUG, "dropped message with invalid code (%d.%02d)\n",
 8019048:	f7fb ffcc 	bl	8014fe4 <coap_get_log_level>
 801904c:	2806      	cmp	r0, #6
 801904e:	d907      	bls.n	8019060 <coap_dispatch+0x6a0>
 8019050:	7862      	ldrb	r2, [r4, #1]
 8019052:	491a      	ldr	r1, [pc, #104]	; (80190bc <coap_dispatch+0x6fc>)
 8019054:	f002 031f 	and.w	r3, r2, #31
 8019058:	2007      	movs	r0, #7
 801905a:	0952      	lsrs	r2, r2, #5
 801905c:	f7fc f82c 	bl	80150b8 <coap_log_impl>
    if (!coap_is_mcast(&session->local_addr)) {
 8019060:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8019064:	f7fb fd4a 	bl	8014afc <coap_is_mcast>
 8019068:	2800      	cmp	r0, #0
 801906a:	f47f ad2e 	bne.w	8018aca <coap_dispatch+0x10a>
      if (COAP_PDU_IS_EMPTY(pdu)) {
 801906e:	7863      	ldrb	r3, [r4, #1]
 8019070:	b9f3      	cbnz	r3, 80190b0 <coap_dispatch+0x6f0>
        if (session->proto != COAP_PROTO_TCP && session->proto != COAP_PROTO_TLS) {
 8019072:	792b      	ldrb	r3, [r5, #4]
 8019074:	3b03      	subs	r3, #3
 8019076:	2b01      	cmp	r3, #1
 8019078:	f67f ad27 	bls.w	8018aca <coap_dispatch+0x10a>
          coap_ticks(&now);
 801907c:	a816      	add	r0, sp, #88	; 0x58
 801907e:	f7fe fcaf 	bl	80179e0 <coap_ticks>
          if (session->last_tx_rst + COAP_TICKS_PER_SECOND/4 < now) {
 8019082:	e9d5 322c 	ldrd	r3, r2, [r5, #176]	; 0xb0
 8019086:	f113 08fa 	adds.w	r8, r3, #250	; 0xfa
 801908a:	f142 0900 	adc.w	r9, r2, #0
 801908e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8019092:	4599      	cmp	r9, r3
 8019094:	bf08      	it	eq
 8019096:	4590      	cmpeq	r8, r2
 8019098:	f4bf ad17 	bcs.w	8018aca <coap_dispatch+0x10a>
            coap_send_message_type(session, pdu, COAP_MESSAGE_RST);
 801909c:	2203      	movs	r2, #3
 801909e:	4621      	mov	r1, r4
 80190a0:	4628      	mov	r0, r5
 80190a2:	f7ff fc79 	bl	8018998 <coap_send_message_type>
            session->last_tx_rst = now;
 80190a6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80190aa:	e9c5 232c 	strd	r2, r3, [r5, #176]	; 0xb0
 80190ae:	e50c      	b.n	8018aca <coap_dispatch+0x10a>
        coap_send_message_type(session, pdu, COAP_MESSAGE_RST);
 80190b0:	2203      	movs	r2, #3
 80190b2:	4621      	mov	r1, r4
 80190b4:	4628      	mov	r0, r5
 80190b6:	f7ff fc6f 	bl	8018998 <coap_send_message_type>
 80190ba:	e506      	b.n	8018aca <coap_dispatch+0x10a>
 80190bc:	08030c41 	.word	0x08030c41

080190c0 <coap_handle_dgram>:
  uint8_t *msg, size_t msg_len) {
 80190c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c4:	461e      	mov	r6, r3
  assert(COAP_PROTO_NOT_RELIABLE(session->proto));
 80190c6:	790b      	ldrb	r3, [r1, #4]
 80190c8:	3b01      	subs	r3, #1
 80190ca:	2b01      	cmp	r3, #1
  uint8_t *msg, size_t msg_len) {
 80190cc:	4607      	mov	r7, r0
 80190ce:	460d      	mov	r5, r1
 80190d0:	4690      	mov	r8, r2
  assert(COAP_PROTO_NOT_RELIABLE(session->proto));
 80190d2:	d906      	bls.n	80190e2 <coap_handle_dgram+0x22>
 80190d4:	4b17      	ldr	r3, [pc, #92]	; (8019134 <coap_handle_dgram+0x74>)
 80190d6:	4a18      	ldr	r2, [pc, #96]	; (8019138 <coap_handle_dgram+0x78>)
 80190d8:	4818      	ldr	r0, [pc, #96]	; (801913c <coap_handle_dgram+0x7c>)
 80190da:	f240 5152 	movw	r1, #1362	; 0x552
 80190de:	f002 fccd 	bl	801ba7c <__assert_func>
  pdu = coap_pdu_init(0, 0, 0, msg_len - 4);
 80190e2:	2200      	movs	r2, #0
 80190e4:	1f33      	subs	r3, r6, #4
 80190e6:	4611      	mov	r1, r2
 80190e8:	4610      	mov	r0, r2
 80190ea:	f000 fe9f 	bl	8019e2c <coap_pdu_init>
  if (!pdu)
 80190ee:	4604      	mov	r4, r0
 80190f0:	b170      	cbz	r0, 8019110 <coap_handle_dgram+0x50>
  if (!coap_pdu_parse(session->proto, msg, msg_len, pdu)) {
 80190f2:	4603      	mov	r3, r0
 80190f4:	4632      	mov	r2, r6
 80190f6:	7928      	ldrb	r0, [r5, #4]
 80190f8:	4641      	mov	r1, r8
 80190fa:	f001 f97b 	bl	801a3f4 <coap_pdu_parse>
 80190fe:	b968      	cbnz	r0, 801911c <coap_handle_dgram+0x5c>
    coap_log(LOG_WARNING, "discard malformed PDU\n");
 8019100:	f7fb ff70 	bl	8014fe4 <coap_get_log_level>
 8019104:	2803      	cmp	r0, #3
 8019106:	d903      	bls.n	8019110 <coap_handle_dgram+0x50>
 8019108:	490d      	ldr	r1, [pc, #52]	; (8019140 <coap_handle_dgram+0x80>)
 801910a:	2004      	movs	r0, #4
 801910c:	f7fb ffd4 	bl	80150b8 <coap_log_impl>
  coap_delete_pdu(pdu);
 8019110:	4620      	mov	r0, r4
 8019112:	f000 febc 	bl	8019e8e <coap_delete_pdu>
  return -1;
 8019116:	f04f 30ff 	mov.w	r0, #4294967295
 801911a:	e008      	b.n	801912e <coap_handle_dgram+0x6e>
  coap_dispatch(ctx, session, pdu);
 801911c:	4622      	mov	r2, r4
 801911e:	4629      	mov	r1, r5
 8019120:	4638      	mov	r0, r7
 8019122:	f7ff fc4d 	bl	80189c0 <coap_dispatch>
  coap_delete_pdu(pdu);
 8019126:	4620      	mov	r0, r4
 8019128:	f000 feb1 	bl	8019e8e <coap_delete_pdu>
  return 0;
 801912c:	2000      	movs	r0, #0
}
 801912e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019132:	bf00      	nop
 8019134:	08030c6e 	.word	0x08030c6e
 8019138:	0802abf7 	.word	0x0802abf7
 801913c:	080305ac 	.word	0x080305ac
 8019140:	08030c96 	.word	0x08030c96

08019144 <coap_handle_dgram_for_proto>:
coap_handle_dgram_for_proto(coap_context_t *ctx, coap_session_t *session, coap_packet_t *packet) {
 8019144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019146:	460c      	mov	r4, r1
 8019148:	4605      	mov	r5, r0
  coap_packet_get_memmapped(packet, &data, &data_len);
 801914a:	4669      	mov	r1, sp
coap_handle_dgram_for_proto(coap_context_t *ctx, coap_session_t *session, coap_packet_t *packet) {
 801914c:	4610      	mov	r0, r2
  coap_packet_get_memmapped(packet, &data, &data_len);
 801914e:	aa01      	add	r2, sp, #4
 8019150:	f7fc fba2 	bl	8015898 <coap_packet_get_memmapped>
  if (session->proto == COAP_PROTO_DTLS) {
 8019154:	7923      	ldrb	r3, [r4, #4]
 8019156:	2b02      	cmp	r3, #2
 8019158:	d112      	bne.n	8019180 <coap_handle_dgram_for_proto+0x3c>
    if (session->type == COAP_SESSION_TYPE_HELLO)
 801915a:	7963      	ldrb	r3, [r4, #5]
 801915c:	2b03      	cmp	r3, #3
 801915e:	d106      	bne.n	801916e <coap_handle_dgram_for_proto+0x2a>
      result = coap_dtls_hello(session, data, data_len);
 8019160:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019164:	4620      	mov	r0, r4
 8019166:	f7fd fcd5 	bl	8016b14 <coap_dtls_hello>
}
 801916a:	b003      	add	sp, #12
 801916c:	bd30      	pop	{r4, r5, pc}
    else if (session->tls)
 801916e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8019172:	b173      	cbz	r3, 8019192 <coap_handle_dgram_for_proto+0x4e>
      result = coap_dtls_receive(session, data, data_len);
 8019174:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019178:	4620      	mov	r0, r4
 801917a:	f7fd fcc8 	bl	8016b0e <coap_dtls_receive>
 801917e:	e7f4      	b.n	801916a <coap_handle_dgram_for_proto+0x26>
  } else if (session->proto == COAP_PROTO_UDP) {
 8019180:	2b01      	cmp	r3, #1
 8019182:	d106      	bne.n	8019192 <coap_handle_dgram_for_proto+0x4e>
    result = coap_handle_dgram(ctx, session, data, data_len);
 8019184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019188:	4621      	mov	r1, r4
 801918a:	4628      	mov	r0, r5
 801918c:	f7ff ff98 	bl	80190c0 <coap_handle_dgram>
 8019190:	e7eb      	b.n	801916a <coap_handle_dgram_for_proto+0x26>
  int result = -1;
 8019192:	f04f 30ff 	mov.w	r0, #4294967295
  return result;
 8019196:	e7e8      	b.n	801916a <coap_handle_dgram_for_proto+0x26>

08019198 <coap_read_endpoint>:
coap_read_endpoint(coap_context_t *ctx, coap_endpoint_t *endpoint, coap_tick_t now) {
 8019198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801919c:	461f      	mov	r7, r3
  assert(COAP_PROTO_NOT_RELIABLE(endpoint->proto));
 801919e:	7a0b      	ldrb	r3, [r1, #8]
 80191a0:	3b01      	subs	r3, #1
 80191a2:	2b01      	cmp	r3, #1
coap_read_endpoint(coap_context_t *ctx, coap_endpoint_t *endpoint, coap_tick_t now) {
 80191a4:	f2ad 6d0c 	subw	sp, sp, #1548	; 0x60c
 80191a8:	4606      	mov	r6, r0
 80191aa:	460c      	mov	r4, r1
 80191ac:	4690      	mov	r8, r2
  assert(COAP_PROTO_NOT_RELIABLE(endpoint->proto));
 80191ae:	d906      	bls.n	80191be <coap_read_endpoint+0x26>
 80191b0:	4b30      	ldr	r3, [pc, #192]	; (8019274 <coap_read_endpoint+0xdc>)
 80191b2:	4a31      	ldr	r2, [pc, #196]	; (8019278 <coap_read_endpoint+0xe0>)
 80191b4:	f240 41ec 	movw	r1, #1260	; 0x4ec
  assert(endpoint->sock.flags & COAP_SOCKET_BOUND);
 80191b8:	4830      	ldr	r0, [pc, #192]	; (801927c <coap_read_endpoint+0xe4>)
 80191ba:	f002 fc5f 	bl	801ba7c <__assert_func>
 80191be:	8a0b      	ldrh	r3, [r1, #16]
 80191c0:	079b      	lsls	r3, r3, #30
 80191c2:	d404      	bmi.n	80191ce <coap_read_endpoint+0x36>
 80191c4:	4b2e      	ldr	r3, [pc, #184]	; (8019280 <coap_read_endpoint+0xe8>)
 80191c6:	4a2c      	ldr	r2, [pc, #176]	; (8019278 <coap_read_endpoint+0xe0>)
 80191c8:	f240 41ed 	movw	r1, #1261	; 0x4ed
 80191cc:	e7f4      	b.n	80191b8 <coap_read_endpoint+0x20>
  memset(addr, 0, sizeof(coap_address_t));
 80191ce:	251c      	movs	r5, #28
 80191d0:	462a      	mov	r2, r5
 80191d2:	2100      	movs	r1, #0
 80191d4:	a801      	add	r0, sp, #4
 80191d6:	f003 f85b 	bl	801c290 <memset>
  coap_address_copy(&packet->dst, &endpoint->bind_addr);
 80191da:	f104 0114 	add.w	r1, r4, #20
 80191de:	a808      	add	r0, sp, #32
  addr->size = sizeof(addr->addr);
 80191e0:	9500      	str	r5, [sp, #0]
 80191e2:	f7fe fcf7 	bl	8017bd4 <coap_address_copy>
  bytes_read = ctx->network_read(&endpoint->sock, packet);
 80191e6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80191e8:	4669      	mov	r1, sp
 80191ea:	f104 000c 	add.w	r0, r4, #12
 80191ee:	4798      	blx	r3
  if (bytes_read < 0) {
 80191f0:	f1b0 0900 	subs.w	r9, r0, #0
 80191f4:	da13      	bge.n	801921e <coap_read_endpoint+0x86>
    coap_log(LOG_WARNING, "*  %s: read failed\n", coap_endpoint_str(endpoint));
 80191f6:	f7fb fef5 	bl	8014fe4 <coap_get_log_level>
 80191fa:	2803      	cmp	r0, #3
 80191fc:	d806      	bhi.n	801920c <coap_read_endpoint+0x74>
  int result = -1;                /* the value to be returned */
 80191fe:	f04f 36ff 	mov.w	r6, #4294967295
}
 8019202:	4630      	mov	r0, r6
 8019204:	f20d 6d0c 	addw	sp, sp, #1548	; 0x60c
 8019208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    coap_log(LOG_WARNING, "*  %s: read failed\n", coap_endpoint_str(endpoint));
 801920c:	4620      	mov	r0, r4
 801920e:	f7fe fbad 	bl	801796c <coap_endpoint_str>
 8019212:	491c      	ldr	r1, [pc, #112]	; (8019284 <coap_read_endpoint+0xec>)
 8019214:	4602      	mov	r2, r0
 8019216:	2004      	movs	r0, #4
 8019218:	f7fb ff4e 	bl	80150b8 <coap_log_impl>
 801921c:	e7ef      	b.n	80191fe <coap_read_endpoint+0x66>
  } else if (bytes_read > 0) {
 801921e:	d0ee      	beq.n	80191fe <coap_read_endpoint+0x66>
    coap_session_t *session = coap_endpoint_get_session(endpoint, packet, now);
 8019220:	4642      	mov	r2, r8
 8019222:	463b      	mov	r3, r7
 8019224:	4669      	mov	r1, sp
 8019226:	4620      	mov	r0, r4
 8019228:	f7fe fa22 	bl	8017670 <coap_endpoint_get_session>
    if (session) {
 801922c:	4605      	mov	r5, r0
 801922e:	2800      	cmp	r0, #0
 8019230:	d0e5      	beq.n	80191fe <coap_read_endpoint+0x66>
      coap_log(LOG_DEBUG, "*  %s: received %zd bytes\n",
 8019232:	f7fb fed7 	bl	8014fe4 <coap_get_log_level>
 8019236:	2806      	cmp	r0, #6
 8019238:	d908      	bls.n	801924c <coap_read_endpoint+0xb4>
 801923a:	4628      	mov	r0, r5
 801923c:	f7fd fdae 	bl	8016d9c <coap_session_str>
 8019240:	4911      	ldr	r1, [pc, #68]	; (8019288 <coap_read_endpoint+0xf0>)
 8019242:	4602      	mov	r2, r0
 8019244:	464b      	mov	r3, r9
 8019246:	2007      	movs	r0, #7
 8019248:	f7fb ff36 	bl	80150b8 <coap_log_impl>
      result = coap_handle_dgram_for_proto(ctx, session, packet);
 801924c:	4630      	mov	r0, r6
 801924e:	466a      	mov	r2, sp
 8019250:	4629      	mov	r1, r5
 8019252:	f7ff ff77 	bl	8019144 <coap_handle_dgram_for_proto>
      if (endpoint->proto == COAP_PROTO_DTLS && session->type == COAP_SESSION_TYPE_HELLO && result == 1)
 8019256:	7a23      	ldrb	r3, [r4, #8]
 8019258:	2b02      	cmp	r3, #2
      result = coap_handle_dgram_for_proto(ctx, session, packet);
 801925a:	4606      	mov	r6, r0
      if (endpoint->proto == COAP_PROTO_DTLS && session->type == COAP_SESSION_TYPE_HELLO && result == 1)
 801925c:	d1d1      	bne.n	8019202 <coap_read_endpoint+0x6a>
 801925e:	796b      	ldrb	r3, [r5, #5]
 8019260:	2b03      	cmp	r3, #3
 8019262:	d1ce      	bne.n	8019202 <coap_read_endpoint+0x6a>
 8019264:	2801      	cmp	r0, #1
 8019266:	d1cc      	bne.n	8019202 <coap_read_endpoint+0x6a>
        coap_session_new_dtls_session(session, now);
 8019268:	4642      	mov	r2, r8
 801926a:	463b      	mov	r3, r7
 801926c:	4628      	mov	r0, r5
 801926e:	f7fd fe5b 	bl	8016f28 <coap_session_new_dtls_session>
  return result;
 8019272:	e7c6      	b.n	8019202 <coap_read_endpoint+0x6a>
 8019274:	08030cad 	.word	0x08030cad
 8019278:	0802ac09 	.word	0x0802ac09
 801927c:	080305ac 	.word	0x080305ac
 8019280:	08030cd6 	.word	0x08030cd6
 8019284:	08030cff 	.word	0x08030cff
 8019288:	08030d13 	.word	0x08030d13

0801928c <coap_read_session>:
coap_read_session(coap_context_t *ctx, coap_session_t *session, coap_tick_t now) {
 801928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019290:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 8019294:	e9cd 2302 	strd	r2, r3, [sp, #8]
  assert(session->sock.flags & (COAP_SOCKET_CONNECTED | COAP_SOCKET_MULTICAST));
 8019298:	f8b1 307c 	ldrh.w	r3, [r1, #124]	; 0x7c
 801929c:	f241 0204 	movw	r2, #4100	; 0x1004
 80192a0:	421a      	tst	r2, r3
coap_read_session(coap_context_t *ctx, coap_session_t *session, coap_tick_t now) {
 80192a2:	4680      	mov	r8, r0
 80192a4:	460c      	mov	r4, r1
  assert(session->sock.flags & (COAP_SOCKET_CONNECTED | COAP_SOCKET_MULTICAST));
 80192a6:	d106      	bne.n	80192b6 <coap_read_session+0x2a>
 80192a8:	4b96      	ldr	r3, [pc, #600]	; (8019504 <coap_read_session+0x278>)
 80192aa:	4a97      	ldr	r2, [pc, #604]	; (8019508 <coap_read_session+0x27c>)
 80192ac:	4897      	ldr	r0, [pc, #604]	; (801950c <coap_read_session+0x280>)
 80192ae:	f240 416a 	movw	r1, #1130	; 0x46a
 80192b2:	f002 fbe3 	bl	801ba7c <__assert_func>
  if (COAP_PROTO_NOT_RELIABLE(session->proto)) {
 80192b6:	790b      	ldrb	r3, [r1, #4]
 80192b8:	3b01      	subs	r3, #1
 80192ba:	2b01      	cmp	r3, #1
 80192bc:	d960      	bls.n	8019380 <coap_read_session+0xf4>
 80192be:	f101 0998 	add.w	r9, r1, #152	; 0x98
      if (session->proto == COAP_PROTO_TCP)
 80192c2:	7923      	ldrb	r3, [r4, #4]
 80192c4:	2b03      	cmp	r3, #3
 80192c6:	f040 80a8 	bne.w	801941a <coap_read_session+0x18e>
        bytes_read = coap_socket_read(&session->sock, buf, buf_len);
 80192ca:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80192ce:	a918      	add	r1, sp, #96	; 0x60
 80192d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80192d4:	f7fd f8e8 	bl	80164a8 <coap_socket_read>
      if (bytes_read > 0) {
 80192d8:	2800      	cmp	r0, #0
        bytes_read = coap_tls_read(session, buf, buf_len);
 80192da:	4682      	mov	sl, r0
      if (bytes_read > 0) {
 80192dc:	f340 8110 	ble.w	8019500 <coap_read_session+0x274>
        coap_log(LOG_DEBUG, "*  %s: received %zd bytes\n",
 80192e0:	f7fb fe80 	bl	8014fe4 <coap_get_log_level>
 80192e4:	2806      	cmp	r0, #6
 80192e6:	d908      	bls.n	80192fa <coap_read_session+0x6e>
 80192e8:	4620      	mov	r0, r4
 80192ea:	f7fd fd57 	bl	8016d9c <coap_session_str>
 80192ee:	4988      	ldr	r1, [pc, #544]	; (8019510 <coap_read_session+0x284>)
 80192f0:	4602      	mov	r2, r0
 80192f2:	4653      	mov	r3, sl
 80192f4:	2007      	movs	r0, #7
 80192f6:	f7fb fedf 	bl	80150b8 <coap_log_impl>
        session->last_rx_tx = now;
 80192fa:	9b02      	ldr	r3, [sp, #8]
 80192fc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8019300:	9b03      	ldr	r3, [sp, #12]
 8019302:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8019306:	4655      	mov	r5, sl
 8019308:	ae18      	add	r6, sp, #96	; 0x60
        if (session->partial_pdu) {
 801930a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801930e:	9301      	str	r3, [sp, #4]
 8019310:	9a01      	ldr	r2, [sp, #4]
 8019312:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8019316:	2a00      	cmp	r2, #0
 8019318:	f000 8097 	beq.w	801944a <coap_read_session+0x1be>
          size_t len = session->partial_pdu->used_size
 801931c:	6917      	ldr	r7, [r2, #16]
                     + session->partial_pdu->hdr_size
 801931e:	78d0      	ldrb	r0, [r2, #3]
          size_t len = session->partial_pdu->used_size
 8019320:	1aff      	subs	r7, r7, r3
 8019322:	4407      	add	r7, r0
                 + session->partial_read, p, n);
 8019324:	1a18      	subs	r0, r3, r0
 8019326:	9b01      	ldr	r3, [sp, #4]
 8019328:	699b      	ldr	r3, [r3, #24]
          size_t n = min(len, (size_t)bytes_read);
 801932a:	42bd      	cmp	r5, r7
 801932c:	462a      	mov	r2, r5
          memcpy(session->partial_pdu->token - session->partial_pdu->hdr_size
 801932e:	4631      	mov	r1, r6
          size_t n = min(len, (size_t)bytes_read);
 8019330:	bf28      	it	cs
 8019332:	463a      	movcs	r2, r7
          memcpy(session->partial_pdu->token - session->partial_pdu->hdr_size
 8019334:	4418      	add	r0, r3
          size_t n = min(len, (size_t)bytes_read);
 8019336:	46ab      	mov	fp, r5
          memcpy(session->partial_pdu->token - session->partial_pdu->hdr_size
 8019338:	9201      	str	r2, [sp, #4]
 801933a:	f002 ff81 	bl	801c240 <memcpy>
          p += n;
 801933e:	9a01      	ldr	r2, [sp, #4]
          if (n == len) {
 8019340:	45bb      	cmp	fp, r7
          p += n;
 8019342:	4416      	add	r6, r2
          bytes_read -= n;
 8019344:	eba5 0502 	sub.w	r5, r5, r2
          if (n == len) {
 8019348:	d370      	bcc.n	801942c <coap_read_session+0x1a0>
            if (coap_pdu_parse_header(session->partial_pdu, session->proto)
 801934a:	7921      	ldrb	r1, [r4, #4]
 801934c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8019350:	f000 ff86 	bl	801a260 <coap_pdu_parse_header>
 8019354:	b150      	cbz	r0, 801936c <coap_read_session+0xe0>
              && coap_pdu_parse_opt(session->partial_pdu)) {
 8019356:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 801935a:	f000 ffeb 	bl	801a334 <coap_pdu_parse_opt>
              if (coap_pdu_parse_header(session->partial_pdu, session->proto)) {
 801935e:	b128      	cbz	r0, 801936c <coap_read_session+0xe0>
                coap_dispatch(ctx, session, session->partial_pdu);
 8019360:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8019364:	4621      	mov	r1, r4
 8019366:	4640      	mov	r0, r8
 8019368:	f7ff fb2a 	bl	80189c0 <coap_dispatch>
              coap_delete_pdu(session->partial_pdu);
 801936c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8019370:	f000 fd8d 	bl	8019e8e <coap_delete_pdu>
              session->partial_pdu = NULL;
 8019374:	2300      	movs	r3, #0
 8019376:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
          session->partial_read = 1;
 801937a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 801937e:	e05a      	b.n	8019436 <coap_read_session+0x1aa>
    coap_address_copy(&packet->src, &session->remote_addr);
 8019380:	f101 0734 	add.w	r7, r1, #52	; 0x34
 8019384:	4639      	mov	r1, r7
 8019386:	a806      	add	r0, sp, #24
    coap_address_copy(&packet->dst, &session->local_addr);
 8019388:	f104 0654 	add.w	r6, r4, #84	; 0x54
    coap_address_copy(&packet->src, &session->remote_addr);
 801938c:	f7fe fc22 	bl	8017bd4 <coap_address_copy>
    coap_address_copy(&packet->dst, &session->local_addr);
 8019390:	4631      	mov	r1, r6
 8019392:	a80e      	add	r0, sp, #56	; 0x38
 8019394:	f7fe fc1e 	bl	8017bd4 <coap_address_copy>
    bytes_read = ctx->network_read(&session->sock, packet);
 8019398:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 801939c:	a906      	add	r1, sp, #24
 801939e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80193a2:	4798      	blx	r3
    if (bytes_read < 0) {
 80193a4:	1e05      	subs	r5, r0, #0
 80193a6:	da16      	bge.n	80193d6 <coap_read_session+0x14a>
      if (bytes_read == -2)
 80193a8:	3502      	adds	r5, #2
 80193aa:	d104      	bne.n	80193b6 <coap_read_session+0x12a>
        coap_session_disconnected(session, COAP_NACK_RST);
 80193ac:	2102      	movs	r1, #2
      coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 80193ae:	4620      	mov	r0, r4
 80193b0:	f7fe f856 	bl	8017460 <coap_session_disconnected>
}
 80193b4:	e00b      	b.n	80193ce <coap_read_session+0x142>
        coap_log(LOG_WARNING, "*  %s: read error\n",
 80193b6:	f7fb fe15 	bl	8014fe4 <coap_get_log_level>
 80193ba:	2803      	cmp	r0, #3
 80193bc:	d907      	bls.n	80193ce <coap_read_session+0x142>
 80193be:	4620      	mov	r0, r4
 80193c0:	f7fd fcec 	bl	8016d9c <coap_session_str>
 80193c4:	4953      	ldr	r1, [pc, #332]	; (8019514 <coap_read_session+0x288>)
 80193c6:	4602      	mov	r2, r0
 80193c8:	2004      	movs	r0, #4
 80193ca:	f7fb fe75 	bl	80150b8 <coap_log_impl>
}
 80193ce:	f20d 6d24 	addw	sp, sp, #1572	; 0x624
 80193d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (bytes_read > 0) {
 80193d6:	d0fa      	beq.n	80193ce <coap_read_session+0x142>
      coap_log(LOG_DEBUG, "*  %s: received %zd bytes\n",
 80193d8:	f7fb fe04 	bl	8014fe4 <coap_get_log_level>
 80193dc:	2806      	cmp	r0, #6
 80193de:	d908      	bls.n	80193f2 <coap_read_session+0x166>
 80193e0:	4620      	mov	r0, r4
 80193e2:	f7fd fcdb 	bl	8016d9c <coap_session_str>
 80193e6:	494a      	ldr	r1, [pc, #296]	; (8019510 <coap_read_session+0x284>)
 80193e8:	4602      	mov	r2, r0
 80193ea:	462b      	mov	r3, r5
 80193ec:	2007      	movs	r0, #7
 80193ee:	f7fb fe63 	bl	80150b8 <coap_log_impl>
      session->last_rx_tx = now;
 80193f2:	9b02      	ldr	r3, [sp, #8]
 80193f4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80193f8:	9b03      	ldr	r3, [sp, #12]
 80193fa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
      coap_address_copy(&session->remote_addr, &packet->src);
 80193fe:	a906      	add	r1, sp, #24
 8019400:	4638      	mov	r0, r7
 8019402:	f7fe fbe7 	bl	8017bd4 <coap_address_copy>
      coap_address_copy(&session->local_addr, &packet->dst);
 8019406:	a90e      	add	r1, sp, #56	; 0x38
 8019408:	4630      	mov	r0, r6
 801940a:	f7fe fbe3 	bl	8017bd4 <coap_address_copy>
      coap_handle_dgram_for_proto(ctx, session, packet);
 801940e:	aa06      	add	r2, sp, #24
 8019410:	4621      	mov	r1, r4
 8019412:	4640      	mov	r0, r8
 8019414:	f7ff fe96 	bl	8019144 <coap_handle_dgram_for_proto>
 8019418:	e7d9      	b.n	80193ce <coap_read_session+0x142>
      else if (session->proto == COAP_PROTO_TLS)
 801941a:	2b04      	cmp	r3, #4
 801941c:	d1d7      	bne.n	80193ce <coap_read_session+0x142>
        bytes_read = coap_tls_read(session, buf, buf_len);
 801941e:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8019422:	a918      	add	r1, sp, #96	; 0x60
 8019424:	4620      	mov	r0, r4
 8019426:	f7fd fb81 	bl	8016b2c <coap_tls_read>
 801942a:	e755      	b.n	80192d8 <coap_read_session+0x4c>
            session->partial_read += n;
 801942c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8019430:	441a      	add	r2, r3
 8019432:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
      while (bytes_read > 0) {
 8019436:	2d00      	cmp	r5, #0
 8019438:	f73f af67 	bgt.w	801930a <coap_read_session+0x7e>
    } while (bytes_read == 0 && retry);
 801943c:	2d00      	cmp	r5, #0
 801943e:	d14d      	bne.n	80194dc <coap_read_session+0x250>
 8019440:	f5ba 6fb8 	cmp.w	sl, #1472	; 0x5c0
 8019444:	f43f af3d 	beq.w	80192c2 <coap_read_session+0x36>
 8019448:	e7c1      	b.n	80193ce <coap_read_session+0x142>
        } else if (session->partial_read > 0) {
 801944a:	7920      	ldrb	r0, [r4, #4]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d04b      	beq.n	80194e8 <coap_read_session+0x25c>
          size_t hdr_size = coap_pdu_parse_header_size(session->proto,
 8019450:	4649      	mov	r1, r9
 8019452:	f000 fe87 	bl	801a164 <coap_pdu_parse_header_size>
 8019456:	4607      	mov	r7, r0
          size_t len = hdr_size - session->partial_read;
 8019458:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
          size_t n = min(len, (size_t)bytes_read);
 801945c:	9505      	str	r5, [sp, #20]
          size_t len = hdr_size - session->partial_read;
 801945e:	eba7 0b00 	sub.w	fp, r7, r0
          size_t n = min(len, (size_t)bytes_read);
 8019462:	455d      	cmp	r5, fp
 8019464:	462a      	mov	r2, r5
          memcpy(session->read_header + session->partial_read, p, n);
 8019466:	4631      	mov	r1, r6
          size_t n = min(len, (size_t)bytes_read);
 8019468:	bf28      	it	cs
 801946a:	465a      	movcs	r2, fp
          memcpy(session->read_header + session->partial_read, p, n);
 801946c:	4448      	add	r0, r9
 801946e:	9204      	str	r2, [sp, #16]
 8019470:	f002 fee6 	bl	801c240 <memcpy>
          if (n == len) {
 8019474:	9b05      	ldr	r3, [sp, #20]
          p += n;
 8019476:	9a04      	ldr	r2, [sp, #16]
          if (n == len) {
 8019478:	455b      	cmp	r3, fp
          p += n;
 801947a:	4416      	add	r6, r2
          bytes_read -= n;
 801947c:	eba5 0502 	sub.w	r5, r5, r2
          if (n == len) {
 8019480:	d32e      	bcc.n	80194e0 <coap_read_session+0x254>
            size_t size = coap_pdu_parse_size(session->proto, session->read_header,
 8019482:	463a      	mov	r2, r7
 8019484:	4649      	mov	r1, r9
 8019486:	7920      	ldrb	r0, [r4, #4]
 8019488:	f000 fe94 	bl	801a1b4 <coap_pdu_parse_size>
            session->partial_pdu = coap_pdu_init(0, 0, 0, size);
 801948c:	9a01      	ldr	r2, [sp, #4]
 801948e:	4603      	mov	r3, r0
            size_t size = coap_pdu_parse_size(session->proto, session->read_header,
 8019490:	4683      	mov	fp, r0
            session->partial_pdu = coap_pdu_init(0, 0, 0, size);
 8019492:	4611      	mov	r1, r2
 8019494:	4610      	mov	r0, r2
 8019496:	f000 fcc9 	bl	8019e2c <coap_pdu_init>
 801949a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
            if (session->partial_pdu == NULL) {
 801949e:	b1e8      	cbz	r0, 80194dc <coap_read_session+0x250>
            if (session->partial_pdu->alloc_size < size && !coap_pdu_resize(session->partial_pdu, size)) {
 80194a0:	68c3      	ldr	r3, [r0, #12]
 80194a2:	455b      	cmp	r3, fp
 80194a4:	d315      	bcc.n	80194d2 <coap_read_session+0x246>
            session->partial_pdu->hdr_size = (uint8_t)hdr_size;
 80194a6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
            memcpy(session->partial_pdu->token - hdr_size, session->read_header, hdr_size);
 80194aa:	6998      	ldr	r0, [r3, #24]
            session->partial_pdu->hdr_size = (uint8_t)hdr_size;
 80194ac:	70df      	strb	r7, [r3, #3]
            session->partial_pdu->used_size = size;
 80194ae:	f8c3 b010 	str.w	fp, [r3, #16]
            memcpy(session->partial_pdu->token - hdr_size, session->read_header, hdr_size);
 80194b2:	463a      	mov	r2, r7
 80194b4:	4649      	mov	r1, r9
 80194b6:	1bc0      	subs	r0, r0, r7
 80194b8:	f002 fec2 	bl	801c240 <memcpy>
            session->partial_read = hdr_size;
 80194bc:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
            if (size == 0) {
 80194c0:	f1bb 0f00 	cmp.w	fp, #0
 80194c4:	d1b7      	bne.n	8019436 <coap_read_session+0x1aa>
              if (coap_pdu_parse_header(session->partial_pdu, session->proto)) {
 80194c6:	7921      	ldrb	r1, [r4, #4]
 80194c8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80194cc:	f000 fec8 	bl	801a260 <coap_pdu_parse_header>
 80194d0:	e745      	b.n	801935e <coap_read_session+0xd2>
            if (session->partial_pdu->alloc_size < size && !coap_pdu_resize(session->partial_pdu, size)) {
 80194d2:	4659      	mov	r1, fp
 80194d4:	f000 fcec 	bl	8019eb0 <coap_pdu_resize>
 80194d8:	2800      	cmp	r0, #0
 80194da:	d1e4      	bne.n	80194a6 <coap_read_session+0x21a>
      coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 80194dc:	2101      	movs	r1, #1
 80194de:	e766      	b.n	80193ae <coap_read_session+0x122>
            session->partial_read += bytes_read;
 80194e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80194e4:	442b      	add	r3, r5
 80194e6:	e748      	b.n	801937a <coap_read_session+0xee>
          session->read_header[0] = *p++;
 80194e8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80194ec:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (!coap_pdu_parse_header_size(session->proto,
 80194f0:	4649      	mov	r1, r9
          bytes_read -= 1;
 80194f2:	3d01      	subs	r5, #1
          if (!coap_pdu_parse_header_size(session->proto,
 80194f4:	f000 fe36 	bl	801a164 <coap_pdu_parse_header_size>
 80194f8:	2800      	cmp	r0, #0
 80194fa:	d0ef      	beq.n	80194dc <coap_read_session+0x250>
          session->partial_read = 1;
 80194fc:	2301      	movs	r3, #1
 80194fe:	e73c      	b.n	801937a <coap_read_session+0xee>
 8019500:	4605      	mov	r5, r0
 8019502:	e79b      	b.n	801943c <coap_read_session+0x1b0>
 8019504:	08030d2e 	.word	0x08030d2e
 8019508:	0802ac1c 	.word	0x0802ac1c
 801950c:	080305ac 	.word	0x080305ac
 8019510:	08030d13 	.word	0x08030d13
 8019514:	08030d74 	.word	0x08030d74

08019518 <coap_retransmit>:
coap_retransmit(coap_context_t *context, coap_queue_t *node) {
 8019518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801951a:	460c      	mov	r4, r1
 801951c:	b085      	sub	sp, #20
  if (!context || !node)
 801951e:	4605      	mov	r5, r0
 8019520:	2800      	cmp	r0, #0
 8019522:	f000 8084 	beq.w	801962e <coap_retransmit+0x116>
 8019526:	2900      	cmp	r1, #0
 8019528:	f000 8081 	beq.w	801962e <coap_retransmit+0x116>
  if (node->retransmit_cnt < node->session->max_retransmit) {
 801952c:	698a      	ldr	r2, [r1, #24]
 801952e:	7c0b      	ldrb	r3, [r1, #16]
 8019530:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8019534:	4293      	cmp	r3, r2
 8019536:	d245      	bcs.n	80195c4 <coap_retransmit+0xac>
    node->retransmit_cnt++;
 8019538:	3301      	adds	r3, #1
 801953a:	740b      	strb	r3, [r1, #16]
    coap_ticks(&now);
 801953c:	a802      	add	r0, sp, #8
 801953e:	f7fe fa4f 	bl	80179e0 <coap_ticks>
    if (context->sendqueue == NULL) {
 8019542:	6a29      	ldr	r1, [r5, #32]
 8019544:	f894 c010 	ldrb.w	ip, [r4, #16]
 8019548:	6963      	ldr	r3, [r4, #20]
 801954a:	e9dd 2002 	ldrd	r2, r0, [sp, #8]
 801954e:	bb49      	cbnz	r1, 80195a4 <coap_retransmit+0x8c>
      node->t = node->timeout << node->retransmit_cnt;
 8019550:	fa03 f30c 	lsl.w	r3, r3, ip
 8019554:	e9c4 3102 	strd	r3, r1, [r4, #8]
      context->sendqueue_basetime = now;
 8019558:	e9c5 2006 	strd	r2, r0, [r5, #24]
    coap_insert_node(&context->sendqueue, node);
 801955c:	4621      	mov	r1, r4
 801955e:	f105 0020 	add.w	r0, r5, #32
 8019562:	f7fe fb99 	bl	8017c98 <coap_insert_node>
    coap_log(LOG_DEBUG, "** %s: tid=%d: retransmission #%d\n",
 8019566:	f7fb fd3d 	bl	8014fe4 <coap_get_log_level>
 801956a:	2806      	cmp	r0, #6
 801956c:	d90a      	bls.n	8019584 <coap_retransmit+0x6c>
 801956e:	69a0      	ldr	r0, [r4, #24]
 8019570:	f7fd fc14 	bl	8016d9c <coap_session_str>
 8019574:	7c23      	ldrb	r3, [r4, #16]
 8019576:	9300      	str	r3, [sp, #0]
 8019578:	4602      	mov	r2, r0
 801957a:	69e3      	ldr	r3, [r4, #28]
 801957c:	492d      	ldr	r1, [pc, #180]	; (8019634 <coap_retransmit+0x11c>)
 801957e:	2007      	movs	r0, #7
 8019580:	f7fb fd9a 	bl	80150b8 <coap_log_impl>
    if (node->session->con_active)
 8019584:	69a0      	ldr	r0, [r4, #24]
 8019586:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
 801958a:	b113      	cbz	r3, 8019592 <coap_retransmit+0x7a>
      node->session->con_active--;
 801958c:	3b01      	subs	r3, #1
 801958e:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    bytes_written = coap_send_pdu(node->session, node->pdu, node);
 8019592:	6a21      	ldr	r1, [r4, #32]
 8019594:	4622      	mov	r2, r4
 8019596:	f7ff f8dd 	bl	8018754 <coap_send_pdu>
    if (bytes_written == COAP_PDU_DELAYED) {
 801959a:	1cc3      	adds	r3, r0, #3
 801959c:	d10f      	bne.n	80195be <coap_retransmit+0xa6>
      return node->id;
 801959e:	69e0      	ldr	r0, [r4, #28]
}
 80195a0:	b005      	add	sp, #20
 80195a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      node->t = (now - context->sendqueue_basetime) + (node->timeout << node->retransmit_cnt);
 80195a4:	69a9      	ldr	r1, [r5, #24]
 80195a6:	1a56      	subs	r6, r2, r1
 80195a8:	69ea      	ldr	r2, [r5, #28]
 80195aa:	fa03 f30c 	lsl.w	r3, r3, ip
 80195ae:	eb60 0702 	sbc.w	r7, r0, r2
 80195b2:	18f6      	adds	r6, r6, r3
 80195b4:	f147 0700 	adc.w	r7, r7, #0
 80195b8:	e9c4 6702 	strd	r6, r7, [r4, #8]
 80195bc:	e7ce      	b.n	801955c <coap_retransmit+0x44>
    if (bytes_written < 0)
 80195be:	2800      	cmp	r0, #0
 80195c0:	daed      	bge.n	801959e <coap_retransmit+0x86>
 80195c2:	e7ed      	b.n	80195a0 <coap_retransmit+0x88>
  coap_log(LOG_DEBUG, "** %s: tid=%d: give up after %d attempts\n",
 80195c4:	f7fb fd0e 	bl	8014fe4 <coap_get_log_level>
 80195c8:	2806      	cmp	r0, #6
 80195ca:	d90a      	bls.n	80195e2 <coap_retransmit+0xca>
 80195cc:	69a0      	ldr	r0, [r4, #24]
 80195ce:	f7fd fbe5 	bl	8016d9c <coap_session_str>
 80195d2:	7c23      	ldrb	r3, [r4, #16]
 80195d4:	9300      	str	r3, [sp, #0]
 80195d6:	4602      	mov	r2, r0
 80195d8:	69e3      	ldr	r3, [r4, #28]
 80195da:	4917      	ldr	r1, [pc, #92]	; (8019638 <coap_retransmit+0x120>)
 80195dc:	2007      	movs	r0, #7
 80195de:	f7fb fd6b 	bl	80150b8 <coap_log_impl>
  if (node->pdu->code >= 64) {
 80195e2:	6a23      	ldr	r3, [r4, #32]
 80195e4:	785a      	ldrb	r2, [r3, #1]
 80195e6:	2a3f      	cmp	r2, #63	; 0x3f
 80195e8:	d908      	bls.n	80195fc <coap_retransmit+0xe4>
    token.length = node->pdu->token_length;
 80195ea:	791a      	ldrb	r2, [r3, #4]
 80195ec:	9202      	str	r2, [sp, #8]
    token.s = node->pdu->token;
 80195ee:	699b      	ldr	r3, [r3, #24]
    coap_handle_failed_notify(context, node->session, &token);
 80195f0:	69a1      	ldr	r1, [r4, #24]
    token.s = node->pdu->token;
 80195f2:	9303      	str	r3, [sp, #12]
    coap_handle_failed_notify(context, node->session, &token);
 80195f4:	aa02      	add	r2, sp, #8
 80195f6:	4628      	mov	r0, r5
 80195f8:	f002 f86c 	bl	801b6d4 <coap_handle_failed_notify>
  if (node->session->con_active) {
 80195fc:	69a0      	ldr	r0, [r4, #24]
 80195fe:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
 8019602:	b13b      	cbz	r3, 8019614 <coap_retransmit+0xfc>
    node->session->con_active--;
 8019604:	3b01      	subs	r3, #1
 8019606:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    if (node->session->state == COAP_SESSION_STATE_ESTABLISHED) {
 801960a:	7983      	ldrb	r3, [r0, #6]
 801960c:	2b04      	cmp	r3, #4
 801960e:	d101      	bne.n	8019614 <coap_retransmit+0xfc>
      coap_session_connected(node->session);
 8019610:	f7fd fe8a 	bl	8017328 <coap_session_connected>
  if (node->pdu->type == COAP_MESSAGE_CON && context->nack_handler)
 8019614:	6a22      	ldr	r2, [r4, #32]
 8019616:	7813      	ldrb	r3, [r2, #0]
 8019618:	b933      	cbnz	r3, 8019628 <coap_retransmit+0x110>
 801961a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 801961c:	b126      	cbz	r6, 8019628 <coap_retransmit+0x110>
    context->nack_handler(context, node->session, node->pdu, COAP_NACK_TOO_MANY_RETRIES, node->id);
 801961e:	69e1      	ldr	r1, [r4, #28]
 8019620:	9100      	str	r1, [sp, #0]
 8019622:	4628      	mov	r0, r5
 8019624:	69a1      	ldr	r1, [r4, #24]
 8019626:	47b0      	blx	r6
  coap_delete_node(node);
 8019628:	4620      	mov	r0, r4
 801962a:	f7fe fb72 	bl	8017d12 <coap_delete_node>
    return COAP_INVALID_TID;
 801962e:	f04f 30ff 	mov.w	r0, #4294967295
 8019632:	e7b5      	b.n	80195a0 <coap_retransmit+0x88>
 8019634:	08030d87 	.word	0x08030d87
 8019638:	08030daa 	.word	0x08030daa

0801963c <coap_read>:
coap_read(coap_context_t *ctx, coap_tick_t now) {
 801963c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LL_FOREACH_SAFE(ctx->endpoint, ep, tmp) {
 8019640:	6a44      	ldr	r4, [r0, #36]	; 0x24
coap_read(coap_context_t *ctx, coap_tick_t now) {
 8019642:	4607      	mov	r7, r0
 8019644:	4615      	mov	r5, r2
 8019646:	461e      	mov	r6, r3
  LL_FOREACH_SAFE(ctx->endpoint, ep, tmp) {
 8019648:	2c00      	cmp	r4, #0
 801964a:	d03b      	beq.n	80196c4 <coap_read+0x88>
    if ((ep->sock.flags & COAP_SOCKET_CAN_READ) != 0)
 801964c:	8a23      	ldrh	r3, [r4, #16]
  LL_FOREACH_SAFE(ctx->endpoint, ep, tmp) {
 801964e:	f8d4 8000 	ldr.w	r8, [r4]
    if ((ep->sock.flags & COAP_SOCKET_CAN_READ) != 0)
 8019652:	05d8      	lsls	r0, r3, #23
 8019654:	d505      	bpl.n	8019662 <coap_read+0x26>
      coap_read_endpoint(ctx, ep, now);
 8019656:	462a      	mov	r2, r5
 8019658:	4633      	mov	r3, r6
 801965a:	4621      	mov	r1, r4
 801965c:	4638      	mov	r0, r7
 801965e:	f7ff fd9b 	bl	8019198 <coap_read_endpoint>
    if ((ep->sock.flags & COAP_SOCKET_CAN_ACCEPT) != 0)
 8019662:	8a23      	ldrh	r3, [r4, #16]
 8019664:	0559      	lsls	r1, r3, #21
 8019666:	d506      	bpl.n	8019676 <coap_read+0x3a>
  coap_session_t *session = coap_new_server_session(ctx, endpoint);
 8019668:	4621      	mov	r1, r4
 801966a:	4638      	mov	r0, r7
 801966c:	f7fe f912 	bl	8017894 <coap_new_server_session>
  if (session)
 8019670:	b108      	cbz	r0, 8019676 <coap_read+0x3a>
    session->last_rx_tx = now;
 8019672:	e9c0 562a 	strd	r5, r6, [r0, #168]	; 0xa8
    LL_FOREACH_SAFE(ep->sessions, s, tmp_s) {
 8019676:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8019678:	b314      	cbz	r4, 80196c0 <coap_read+0x84>
      if ((s->sock.flags & COAP_SOCKET_CAN_READ) != 0) {
 801967a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    LL_FOREACH_SAFE(ep->sessions, s, tmp_s) {
 801967e:	f8d4 9000 	ldr.w	r9, [r4]
      if ((s->sock.flags & COAP_SOCKET_CAN_READ) != 0) {
 8019682:	05db      	lsls	r3, r3, #23
 8019684:	d50b      	bpl.n	801969e <coap_read+0x62>
        coap_session_reference(s);
 8019686:	4620      	mov	r0, r4
 8019688:	f7fd faf6 	bl	8016c78 <coap_session_reference>
        coap_read_session(ctx, s, now);
 801968c:	4638      	mov	r0, r7
 801968e:	462a      	mov	r2, r5
 8019690:	4633      	mov	r3, r6
 8019692:	4621      	mov	r1, r4
 8019694:	f7ff fdfa 	bl	801928c <coap_read_session>
        coap_session_release(s);
 8019698:	4620      	mov	r0, r4
 801969a:	f7fd fc29 	bl	8016ef0 <coap_session_release>
      if ((s->sock.flags & COAP_SOCKET_CAN_WRITE) != 0) {
 801969e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80196a2:	059a      	lsls	r2, r3, #22
 80196a4:	d50a      	bpl.n	80196bc <coap_read+0x80>
        coap_session_reference(s);
 80196a6:	4620      	mov	r0, r4
 80196a8:	f7fd fae6 	bl	8016c78 <coap_session_reference>
        coap_write_session(ctx, s, now);
 80196ac:	4620      	mov	r0, r4
 80196ae:	462a      	mov	r2, r5
 80196b0:	4633      	mov	r3, r6
 80196b2:	f7fe fb4f 	bl	8017d54 <coap_write_session.isra.0>
        coap_session_release(s);
 80196b6:	4620      	mov	r0, r4
 80196b8:	f7fd fc1a 	bl	8016ef0 <coap_session_release>
coap_read(coap_context_t *ctx, coap_tick_t now) {
 80196bc:	464c      	mov	r4, r9
 80196be:	e7db      	b.n	8019678 <coap_read+0x3c>
  LL_FOREACH_SAFE(ctx->endpoint, ep, tmp) {
 80196c0:	4644      	mov	r4, r8
 80196c2:	e7c1      	b.n	8019648 <coap_read+0xc>
  LL_FOREACH_SAFE(ctx->sessions, s, tmp_s) {
 80196c4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80196c6:	2c00      	cmp	r4, #0
 80196c8:	d072      	beq.n	80197b0 <coap_read+0x174>
    if ((s->sock.flags & COAP_SOCKET_CAN_CONNECT) != 0) {
 80196ca:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
  LL_FOREACH_SAFE(ctx->sessions, s, tmp_s) {
 80196ce:	f8d4 8000 	ldr.w	r8, [r4]
    if ((s->sock.flags & COAP_SOCKET_CAN_CONNECT) != 0) {
 80196d2:	051b      	lsls	r3, r3, #20
 80196d4:	d51e      	bpl.n	8019714 <coap_read+0xd8>
      coap_session_reference(s);
 80196d6:	4620      	mov	r0, r4
 80196d8:	f7fd face 	bl	8016c78 <coap_session_reference>
  if (coap_socket_connect_tcp2(&session->sock, &session->local_addr, &session->remote_addr)) {
 80196dc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80196e0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80196e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80196e8:	f7fc fd28 	bl	801613c <coap_socket_connect_tcp2>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d056      	beq.n	801979e <coap_read+0x162>
    session->last_rx_tx = now;
 80196f0:	e9c4 562a 	strd	r5, r6, [r4, #168]	; 0xa8
    coap_handle_event(session->context, COAP_EVENT_TCP_CONNECTED, session);
 80196f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80196f8:	4622      	mov	r2, r4
 80196fa:	f241 0101 	movw	r1, #4097	; 0x1001
 80196fe:	f7ff f80f 	bl	8018720 <coap_handle_event>
    if (session->proto == COAP_PROTO_TCP) {
 8019702:	7923      	ldrb	r3, [r4, #4]
 8019704:	2b03      	cmp	r3, #3
 8019706:	d126      	bne.n	8019756 <coap_read+0x11a>
          coap_session_send_csm(session);
 8019708:	4620      	mov	r0, r4
 801970a:	f7fd ff4f 	bl	80175ac <coap_session_send_csm>
      coap_session_release( s );
 801970e:	4620      	mov	r0, r4
 8019710:	f7fd fbee 	bl	8016ef0 <coap_session_release>
    if ((s->sock.flags & COAP_SOCKET_CAN_READ) != 0) {
 8019714:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8019718:	05d9      	lsls	r1, r3, #23
 801971a:	d50b      	bpl.n	8019734 <coap_read+0xf8>
      coap_session_reference(s);
 801971c:	4620      	mov	r0, r4
 801971e:	f7fd faab 	bl	8016c78 <coap_session_reference>
      coap_read_session(ctx, s, now);
 8019722:	4638      	mov	r0, r7
 8019724:	462a      	mov	r2, r5
 8019726:	4633      	mov	r3, r6
 8019728:	4621      	mov	r1, r4
 801972a:	f7ff fdaf 	bl	801928c <coap_read_session>
      coap_session_release(s);
 801972e:	4620      	mov	r0, r4
 8019730:	f7fd fbde 	bl	8016ef0 <coap_session_release>
    if ((s->sock.flags & COAP_SOCKET_CAN_WRITE) != 0) {
 8019734:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8019738:	059a      	lsls	r2, r3, #22
 801973a:	d50a      	bpl.n	8019752 <coap_read+0x116>
      coap_session_reference(s);
 801973c:	4620      	mov	r0, r4
 801973e:	f7fd fa9b 	bl	8016c78 <coap_session_reference>
      coap_write_session(ctx, s, now);
 8019742:	4620      	mov	r0, r4
 8019744:	462a      	mov	r2, r5
 8019746:	4633      	mov	r3, r6
 8019748:	f7fe fb04 	bl	8017d54 <coap_write_session.isra.0>
      coap_session_release( s );
 801974c:	4620      	mov	r0, r4
 801974e:	f7fd fbcf 	bl	8016ef0 <coap_session_release>
  LL_FOREACH_SAFE(ctx->endpoint, ep, tmp) {
 8019752:	4644      	mov	r4, r8
 8019754:	e7b7      	b.n	80196c6 <coap_read+0x8a>
    } else if (session->proto == COAP_PROTO_TLS) {
 8019756:	2b04      	cmp	r3, #4
 8019758:	d1d9      	bne.n	801970e <coap_read+0xd2>
      int connected = 0;
 801975a:	2300      	movs	r3, #0
 801975c:	9301      	str	r3, [sp, #4]
      session->state = COAP_SESSION_STATE_HANDSHAKE;
 801975e:	2302      	movs	r3, #2
 8019760:	71a3      	strb	r3, [r4, #6]
      session->tls = coap_tls_new_client_session(session, &connected);
 8019762:	a901      	add	r1, sp, #4
 8019764:	4620      	mov	r0, r4
 8019766:	f7fd f9d9 	bl	8016b1c <coap_tls_new_client_session>
 801976a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      if (session->tls) {
 801976e:	b150      	cbz	r0, 8019786 <coap_read+0x14a>
        if (connected) {
 8019770:	9b01      	ldr	r3, [sp, #4]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d0cb      	beq.n	801970e <coap_read+0xd2>
          coap_handle_event(session->context, COAP_EVENT_DTLS_CONNECTED, session);
 8019776:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 801977a:	4622      	mov	r2, r4
 801977c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019780:	f7fe ffce 	bl	8018720 <coap_handle_event>
 8019784:	e7c0      	b.n	8019708 <coap_read+0xcc>
        coap_handle_event(session->context, COAP_EVENT_DTLS_ERROR, session);
 8019786:	f44f 7100 	mov.w	r1, #512	; 0x200
 801978a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 801978e:	4622      	mov	r2, r4
 8019790:	f7fe ffc6 	bl	8018720 <coap_handle_event>
        coap_session_disconnected(session, COAP_NACK_TLS_FAILED);
 8019794:	2103      	movs	r1, #3
    coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 8019796:	4620      	mov	r0, r4
 8019798:	f7fd fe62 	bl	8017460 <coap_session_disconnected>
 801979c:	e7b7      	b.n	801970e <coap_read+0xd2>
    coap_handle_event(session->context, COAP_EVENT_TCP_FAILED, session);
 801979e:	f241 0103 	movw	r1, #4099	; 0x1003
 80197a2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80197a6:	4622      	mov	r2, r4
 80197a8:	f7fe ffba 	bl	8018720 <coap_handle_event>
    coap_session_disconnected(session, COAP_NACK_NOT_DELIVERABLE);
 80197ac:	2101      	movs	r1, #1
 80197ae:	e7f2      	b.n	8019796 <coap_read+0x15a>
}
 80197b0:	b003      	add	sp, #12
 80197b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080197b8 <coap_startup>:
}

static int coap_started = 0;

void coap_startup(void) {
  if (coap_started)
 80197b8:	4b07      	ldr	r3, [pc, #28]	; (80197d8 <coap_startup+0x20>)
void coap_startup(void) {
 80197ba:	b510      	push	{r4, lr}
  if (coap_started)
 80197bc:	681c      	ldr	r4, [r3, #0]
 80197be:	b954      	cbnz	r4, 80197d6 <coap_startup+0x1e>
    return;
  coap_started = 1;
 80197c0:	2201      	movs	r2, #1
 80197c2:	601a      	str	r2, [r3, #0]
#if defined(HAVE_WINSOCK2_H)
  WORD wVersionRequested = MAKEWORD(2, 2);
  WSADATA wsaData;
  WSAStartup(wVersionRequested, &wsaData);
#endif
  coap_clock_init();
 80197c4:	f7fe f8fa 	bl	80179bc <coap_clock_init>
#if defined(WITH_LWIP)
  prng_init(LWIP_RAND());
#elif defined(WITH_CONTIKI)
  prng_init(0);
#elif !defined(_WIN32)
  prng_init(0);
 80197c8:	4620      	mov	r0, r4
 80197ca:	f003 f9c5 	bl	801cb58 <srand>
#endif
  coap_dtls_startup();
}
 80197ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coap_dtls_startup();
 80197d2:	f7fd b987 	b.w	8016ae4 <coap_dtls_startup>
}
 80197d6:	bd10      	pop	{r4, pc}
 80197d8:	20007300 	.word	0x20007300

080197dc <coap_new_context>:
  const coap_address_t *listen_addr) {
 80197dc:	b570      	push	{r4, r5, r6, lr}
 80197de:	4606      	mov	r6, r0
  coap_startup();
 80197e0:	f7ff ffea 	bl	80197b8 <coap_startup>
  c = coap_malloc_type(COAP_CONTEXT, sizeof(coap_context_t));
 80197e4:	2180      	movs	r1, #128	; 0x80
 80197e6:	2005      	movs	r0, #5
 80197e8:	f7fe f98c 	bl	8017b04 <coap_malloc_type>
  if (!c) {
 80197ec:	4604      	mov	r4, r0
 80197ee:	b938      	cbnz	r0, 8019800 <coap_new_context+0x24>
    coap_log(LOG_EMERG, "coap_init: malloc:\n");
 80197f0:	f7fb fbf8 	bl	8014fe4 <coap_get_log_level>
 80197f4:	491b      	ldr	r1, [pc, #108]	; (8019864 <coap_new_context+0x88>)
 80197f6:	4620      	mov	r0, r4
 80197f8:	f7fb fc5e 	bl	80150b8 <coap_log_impl>
}
 80197fc:	4620      	mov	r0, r4
 80197fe:	bd70      	pop	{r4, r5, r6, pc}
  memset(c, 0, sizeof(coap_context_t));
 8019800:	2280      	movs	r2, #128	; 0x80
 8019802:	2100      	movs	r1, #0
 8019804:	f002 fd44 	bl	801c290 <memset>
  if (coap_dtls_is_supported()) {
 8019808:	f7fd f966 	bl	8016ad8 <coap_dtls_is_supported>
 801980c:	b180      	cbz	r0, 8019830 <coap_new_context+0x54>
    c->dtls_context = coap_dtls_new_context(c);
 801980e:	4620      	mov	r0, r4
 8019810:	f7fd f969 	bl	8016ae6 <coap_dtls_new_context>
 8019814:	4605      	mov	r5, r0
 8019816:	6560      	str	r0, [r4, #84]	; 0x54
    if (!c->dtls_context) {
 8019818:	b950      	cbnz	r0, 8019830 <coap_new_context+0x54>
      coap_log(LOG_EMERG, "coap_init: no DTLS context available\n");
 801981a:	f7fb fbe3 	bl	8014fe4 <coap_get_log_level>
 801981e:	4628      	mov	r0, r5
 8019820:	4911      	ldr	r1, [pc, #68]	; (8019868 <coap_new_context+0x8c>)
 8019822:	f7fb fc49 	bl	80150b8 <coap_log_impl>
      coap_free_context(c);
 8019826:	4620      	mov	r0, r4
 8019828:	f7fe fb3d 	bl	8017ea6 <coap_free_context>
  return NULL;
 801982c:	462c      	mov	r4, r5
 801982e:	e7e5      	b.n	80197fc <coap_new_context+0x20>
  c->csm_timeout = 30;
 8019830:	231e      	movs	r3, #30
 8019832:	67a3      	str	r3, [r4, #120]	; 0x78
  if (listen_addr) {
 8019834:	b15e      	cbz	r6, 801984e <coap_new_context+0x72>
    coap_endpoint_t *endpoint = coap_new_endpoint(c, listen_addr, COAP_PROTO_UDP);
 8019836:	2201      	movs	r2, #1
 8019838:	4631      	mov	r1, r6
 801983a:	4620      	mov	r0, r4
 801983c:	f7fd fbbe 	bl	8016fbc <coap_new_endpoint>
    if (endpoint == NULL) {
 8019840:	4605      	mov	r5, r0
 8019842:	b920      	cbnz	r0, 801984e <coap_new_context+0x72>
  coap_free_type(COAP_CONTEXT, c);
 8019844:	4621      	mov	r1, r4
 8019846:	2005      	movs	r0, #5
 8019848:	f7fe f95f 	bl	8017b0a <coap_free_type>
 801984c:	e7ee      	b.n	801982c <coap_new_context+0x50>
  c->network_send = coap_network_send;
 801984e:	4b07      	ldr	r3, [pc, #28]	; (801986c <coap_new_context+0x90>)
 8019850:	6423      	str	r3, [r4, #64]	; 0x40
  c->network_read = coap_network_read;
 8019852:	4b07      	ldr	r3, [pc, #28]	; (8019870 <coap_new_context+0x94>)
 8019854:	6463      	str	r3, [r4, #68]	; 0x44
  c->get_client_psk = coap_get_session_client_psk;
 8019856:	4b07      	ldr	r3, [pc, #28]	; (8019874 <coap_new_context+0x98>)
 8019858:	64a3      	str	r3, [r4, #72]	; 0x48
  c->get_server_psk = coap_get_context_server_psk;
 801985a:	4b07      	ldr	r3, [pc, #28]	; (8019878 <coap_new_context+0x9c>)
 801985c:	64e3      	str	r3, [r4, #76]	; 0x4c
  c->get_server_hint = coap_get_context_server_hint;
 801985e:	4b07      	ldr	r3, [pc, #28]	; (801987c <coap_new_context+0xa0>)
 8019860:	6523      	str	r3, [r4, #80]	; 0x50
  return c;
 8019862:	e7cb      	b.n	80197fc <coap_new_context+0x20>
 8019864:	08030dd4 	.word	0x08030dd4
 8019868:	08030de8 	.word	0x08030de8
 801986c:	08016525 	.word	0x08016525
 8019870:	08016695 	.word	0x08016695
 8019874:	08017b5f 	.word	0x08017b5f
 8019878:	08017b39 	.word	0x08017b39
 801987c:	08017b11 	.word	0x08017b11

08019880 <coap_cleanup>:

void coap_cleanup(void) {
#if defined(HAVE_WINSOCK2_H)
  WSACleanup();
#endif
}
 8019880:	4770      	bx	lr

08019882 <coap_option_filter_op>:
                      enum filter_op_t op) {
  size_t lindex = 0;
  opt_filter *of = (opt_filter *)filter;
  uint16_t nr, mask = 0;

  if (is_long_option(type)) {
 8019882:	29ff      	cmp	r1, #255	; 0xff
                      enum filter_op_t op) {
 8019884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019886:	8803      	ldrh	r3, [r0, #0]
 8019888:	4604      	mov	r4, r0
 801988a:	460d      	mov	r5, r1
  if (is_long_option(type)) {
 801988c:	d911      	bls.n	80198b2 <coap_option_filter_op+0x30>
    mask = LONG_MASK;

    for (nr = 1; lindex < COAP_OPT_FILTER_LONG; nr <<= 1, lindex++) {

      if (((of->mask & nr) > 0) && (of->long_opts[lindex] == type)) {
 801988e:	f013 0001 	ands.w	r0, r3, #1
 8019892:	d002      	beq.n	801989a <coap_option_filter_op+0x18>
 8019894:	8861      	ldrh	r1, [r4, #2]
 8019896:	42a9      	cmp	r1, r5
 8019898:	d005      	beq.n	80198a6 <coap_option_filter_op+0x24>
 801989a:	0799      	lsls	r1, r3, #30
 801989c:	d51e      	bpl.n	80198dc <coap_option_filter_op+0x5a>
 801989e:	88a1      	ldrh	r1, [r4, #4]
 80198a0:	42a9      	cmp	r1, r5
 80198a2:	d11b      	bne.n	80198dc <coap_option_filter_op+0x5a>
    for (nr = 1; lindex < COAP_OPT_FILTER_LONG; nr <<= 1, lindex++) {
 80198a4:	2002      	movs	r0, #2

    for (nr = 1 << COAP_OPT_FILTER_LONG; lindex < COAP_OPT_FILTER_SHORT;
         nr <<= 1, lindex++) {

      if (((of->mask & nr) > 0) && (of->short_opts[lindex] == (type & 0xff))) {
        if (op == FILTER_CLEAR) {
 80198a6:	2a01      	cmp	r2, #1
 80198a8:	d130      	bne.n	801990c <coap_option_filter_op+0x8a>
          of->mask &= ~nr;
 80198aa:	ea23 0300 	bic.w	r3, r3, r0
    of->long_opts[lindex - 1] = type;
  } else {
    of->short_opts[lindex - COAP_OPT_FILTER_LONG - 1] = (uint8_t)type;
  }

  of->mask |= 1 << (lindex - 1);
 80198ae:	8023      	strh	r3, [r4, #0]

  return 1;
 80198b0:	e012      	b.n	80198d8 <coap_option_filter_op+0x56>
 80198b2:	1d81      	adds	r1, r0, #6
 80198b4:	f100 060c 	add.w	r6, r0, #12
    for (nr = 1 << COAP_OPT_FILTER_LONG; lindex < COAP_OPT_FILTER_SHORT;
 80198b8:	2004      	movs	r0, #4
      if (((of->mask & nr) > 0) && (of->short_opts[lindex] == (type & 0xff))) {
 80198ba:	4203      	tst	r3, r0
 80198bc:	d002      	beq.n	80198c4 <coap_option_filter_op+0x42>
 80198be:	780f      	ldrb	r7, [r1, #0]
 80198c0:	42af      	cmp	r7, r5
 80198c2:	d0f0      	beq.n	80198a6 <coap_option_filter_op+0x24>
         nr <<= 1, lindex++) {
 80198c4:	3101      	adds	r1, #1
 80198c6:	0040      	lsls	r0, r0, #1
    for (nr = 1 << COAP_OPT_FILTER_LONG; lindex < COAP_OPT_FILTER_SHORT;
 80198c8:	42b1      	cmp	r1, r6
         nr <<= 1, lindex++) {
 80198ca:	b280      	uxth	r0, r0
    for (nr = 1 << COAP_OPT_FILTER_LONG; lindex < COAP_OPT_FILTER_SHORT;
 80198cc:	d1f5      	bne.n	80198ba <coap_option_filter_op+0x38>
    mask = SHORT_MASK;
 80198ce:	20fc      	movs	r0, #252	; 0xfc
  if ((op == FILTER_CLEAR) || (op == FILTER_GET)) {
 80198d0:	3a01      	subs	r2, #1
 80198d2:	2a01      	cmp	r2, #1
 80198d4:	d804      	bhi.n	80198e0 <coap_option_filter_op+0x5e>
    return 0;
 80198d6:	2200      	movs	r2, #0
}
 80198d8:	4610      	mov	r0, r2
 80198da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    mask = LONG_MASK;
 80198dc:	2003      	movs	r0, #3
 80198de:	e7f7      	b.n	80198d0 <coap_option_filter_op+0x4e>
  lindex = coap_fls(~of->mask & mask);
 80198e0:	ea20 0003 	bic.w	r0, r0, r3
 80198e4:	f7fe f8c2 	bl	8017a6c <coap_fls>
  if (!lindex) {
 80198e8:	2800      	cmp	r0, #0
 80198ea:	d0f4      	beq.n	80198d6 <coap_option_filter_op+0x54>
  if (is_long_option(type)) {
 80198ec:	2dff      	cmp	r5, #255	; 0xff
    of->long_opts[lindex - 1] = type;
 80198ee:	f100 33ff 	add.w	r3, r0, #4294967295
    of->short_opts[lindex - COAP_OPT_FILTER_LONG - 1] = (uint8_t)type;
 80198f2:	bf96      	itet	ls
 80198f4:	1900      	addls	r0, r0, r4
    of->long_opts[lindex - 1] = type;
 80198f6:	eb04 0243 	addhi.w	r2, r4, r3, lsl #1
    of->short_opts[lindex - COAP_OPT_FILTER_LONG - 1] = (uint8_t)type;
 80198fa:	70c5      	strbls	r5, [r0, #3]
  of->mask |= 1 << (lindex - 1);
 80198fc:	8821      	ldrh	r1, [r4, #0]
    of->long_opts[lindex - 1] = type;
 80198fe:	bf88      	it	hi
 8019900:	8055      	strhhi	r5, [r2, #2]
  of->mask |= 1 << (lindex - 1);
 8019902:	2201      	movs	r2, #1
 8019904:	fa02 f303 	lsl.w	r3, r2, r3
 8019908:	430b      	orrs	r3, r1
 801990a:	e7d0      	b.n	80198ae <coap_option_filter_op+0x2c>
        return 1;
 801990c:	2201      	movs	r2, #1
 801990e:	e7e3      	b.n	80198d8 <coap_option_filter_op+0x56>

08019910 <coap_opt_parse>:
coap_opt_parse(const coap_opt_t *opt, size_t length, coap_option_t *result) {
 8019910:	b570      	push	{r4, r5, r6, lr}
  assert(opt); assert(result);
 8019912:	b928      	cbnz	r0, 8019920 <coap_opt_parse+0x10>
 8019914:	4b38      	ldr	r3, [pc, #224]	; (80199f8 <coap_opt_parse+0xe8>)
 8019916:	4a39      	ldr	r2, [pc, #228]	; (80199fc <coap_opt_parse+0xec>)
 8019918:	4839      	ldr	r0, [pc, #228]	; (8019a00 <coap_opt_parse+0xf0>)
 801991a:	2132      	movs	r1, #50	; 0x32
 801991c:	f002 f8ae 	bl	801ba7c <__assert_func>
 8019920:	b90a      	cbnz	r2, 8019926 <coap_opt_parse+0x16>
 8019922:	4b38      	ldr	r3, [pc, #224]	; (8019a04 <coap_opt_parse+0xf4>)
 8019924:	e7f7      	b.n	8019916 <coap_opt_parse+0x6>
  if (length < 1)
 8019926:	b909      	cbnz	r1, 801992c <coap_opt_parse+0x1c>
    return 0;
 8019928:	2000      	movs	r0, #0
}
 801992a:	bd70      	pop	{r4, r5, r6, pc}
  result->delta = (*opt & 0xf0) >> 4;
 801992c:	7803      	ldrb	r3, [r0, #0]
 801992e:	091b      	lsrs	r3, r3, #4
 8019930:	8013      	strh	r3, [r2, #0]
  result->length = *opt & 0x0f;
 8019932:	7804      	ldrb	r4, [r0, #0]
  switch(result->delta) {
 8019934:	2b0e      	cmp	r3, #14
 8019936:	f004 040f 	and.w	r4, r4, #15
  result->length = *opt & 0x0f;
 801993a:	6054      	str	r4, [r2, #4]
  switch(result->delta) {
 801993c:	d011      	beq.n	8019962 <coap_opt_parse+0x52>
 801993e:	2b0f      	cmp	r3, #15
 8019940:	d003      	beq.n	801994a <coap_opt_parse+0x3a>
 8019942:	2b0d      	cmp	r3, #13
 8019944:	d13e      	bne.n	80199c4 <coap_opt_parse+0xb4>
 8019946:	4605      	mov	r5, r0
 8019948:	e017      	b.n	801997a <coap_opt_parse+0x6a>
    if (*opt != COAP_PAYLOAD_START) {
 801994a:	7803      	ldrb	r3, [r0, #0]
 801994c:	2bff      	cmp	r3, #255	; 0xff
 801994e:	d0eb      	beq.n	8019928 <coap_opt_parse+0x18>
      coap_log(LOG_DEBUG, "ignored reserved option delta 15\n");
 8019950:	f7fb fb48 	bl	8014fe4 <coap_get_log_level>
 8019954:	2806      	cmp	r0, #6
 8019956:	d9e7      	bls.n	8019928 <coap_opt_parse+0x18>
 8019958:	492b      	ldr	r1, [pc, #172]	; (8019a08 <coap_opt_parse+0xf8>)
    coap_log(LOG_DEBUG, "invalid option length\n");
 801995a:	2007      	movs	r0, #7
 801995c:	f7fb fbac 	bl	80150b8 <coap_log_impl>
 8019960:	e7e2      	b.n	8019928 <coap_opt_parse+0x18>
    ADVANCE_OPT_CHECK(opt,length,1);
 8019962:	3901      	subs	r1, #1
 8019964:	d0e0      	beq.n	8019928 <coap_opt_parse+0x18>
    result->delta = ((*opt & 0xff) << 8) + 269;
 8019966:	7843      	ldrb	r3, [r0, #1]
 8019968:	021b      	lsls	r3, r3, #8
 801996a:	f203 130d 	addw	r3, r3, #269	; 0x10d
 801996e:	b29b      	uxth	r3, r3
    if (result->delta < 269) {
 8019970:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
    result->delta = ((*opt & 0xff) << 8) + 269;
 8019974:	8013      	strh	r3, [r2, #0]
    if (result->delta < 269) {
 8019976:	d919      	bls.n	80199ac <coap_opt_parse+0x9c>
    ADVANCE_OPT_CHECK(opt,length,1);
 8019978:	1c45      	adds	r5, r0, #1
    ADVANCE_OPT_CHECK(opt,length,1);
 801997a:	3901      	subs	r1, #1
 801997c:	d0d4      	beq.n	8019928 <coap_opt_parse+0x18>
    result->delta += *opt & 0xff;
 801997e:	8816      	ldrh	r6, [r2, #0]
    ADVANCE_OPT_CHECK(opt,length,1);
 8019980:	1c6b      	adds	r3, r5, #1
    result->delta += *opt & 0xff;
 8019982:	786d      	ldrb	r5, [r5, #1]
  switch(result->length) {
 8019984:	2c0e      	cmp	r4, #14
    result->delta += *opt & 0xff;
 8019986:	4435      	add	r5, r6
 8019988:	8015      	strh	r5, [r2, #0]
  switch(result->length) {
 801998a:	d022      	beq.n	80199d2 <coap_opt_parse+0xc2>
 801998c:	2c0f      	cmp	r4, #15
 801998e:	d013      	beq.n	80199b8 <coap_opt_parse+0xa8>
 8019990:	2c0d      	cmp	r4, #13
 8019992:	d026      	beq.n	80199e2 <coap_opt_parse+0xd2>
  ADVANCE_OPT(opt,length,1);
 8019994:	3301      	adds	r3, #1
  result->value = opt;
 8019996:	6093      	str	r3, [r2, #8]
  if (length < result->length) {
 8019998:	6852      	ldr	r2, [r2, #4]
  ADVANCE_OPT(opt,length,1);
 801999a:	3901      	subs	r1, #1
  if (length < result->length) {
 801999c:	4291      	cmp	r1, r2
 801999e:	d228      	bcs.n	80199f2 <coap_opt_parse+0xe2>
    coap_log(LOG_DEBUG, "invalid option length\n");
 80199a0:	f7fb fb20 	bl	8014fe4 <coap_get_log_level>
 80199a4:	2806      	cmp	r0, #6
 80199a6:	d9bf      	bls.n	8019928 <coap_opt_parse+0x18>
 80199a8:	4918      	ldr	r1, [pc, #96]	; (8019a0c <coap_opt_parse+0xfc>)
 80199aa:	e7d6      	b.n	801995a <coap_opt_parse+0x4a>
      coap_log(LOG_DEBUG, "delta too large\n");
 80199ac:	f7fb fb1a 	bl	8014fe4 <coap_get_log_level>
 80199b0:	2806      	cmp	r0, #6
 80199b2:	d9b9      	bls.n	8019928 <coap_opt_parse+0x18>
 80199b4:	4916      	ldr	r1, [pc, #88]	; (8019a10 <coap_opt_parse+0x100>)
 80199b6:	e7d0      	b.n	801995a <coap_opt_parse+0x4a>
    coap_log(LOG_DEBUG, "found reserved option length 15\n");
 80199b8:	f7fb fb14 	bl	8014fe4 <coap_get_log_level>
 80199bc:	2806      	cmp	r0, #6
 80199be:	d9b3      	bls.n	8019928 <coap_opt_parse+0x18>
 80199c0:	4914      	ldr	r1, [pc, #80]	; (8019a14 <coap_opt_parse+0x104>)
 80199c2:	e7ca      	b.n	801995a <coap_opt_parse+0x4a>
  switch(result->length) {
 80199c4:	2c0e      	cmp	r4, #14
 80199c6:	d003      	beq.n	80199d0 <coap_opt_parse+0xc0>
 80199c8:	2c0f      	cmp	r4, #15
 80199ca:	d0f5      	beq.n	80199b8 <coap_opt_parse+0xa8>
 80199cc:	4603      	mov	r3, r0
 80199ce:	e7df      	b.n	8019990 <coap_opt_parse+0x80>
 80199d0:	4603      	mov	r3, r0
    ADVANCE_OPT_CHECK(opt,length,1);
 80199d2:	3901      	subs	r1, #1
 80199d4:	d0a8      	beq.n	8019928 <coap_opt_parse+0x18>
    result->length = ((*opt & 0xff) << 8) + 269;
 80199d6:	785c      	ldrb	r4, [r3, #1]
 80199d8:	0224      	lsls	r4, r4, #8
 80199da:	f204 140d 	addw	r4, r4, #269	; 0x10d
 80199de:	6054      	str	r4, [r2, #4]
    ADVANCE_OPT_CHECK(opt,length,1);
 80199e0:	3301      	adds	r3, #1
    ADVANCE_OPT_CHECK(opt,length,1);
 80199e2:	3901      	subs	r1, #1
 80199e4:	d0a0      	beq.n	8019928 <coap_opt_parse+0x18>
    result->length += *opt & 0xff;
 80199e6:	785d      	ldrb	r5, [r3, #1]
 80199e8:	6854      	ldr	r4, [r2, #4]
 80199ea:	442c      	add	r4, r5
 80199ec:	6054      	str	r4, [r2, #4]
    ADVANCE_OPT_CHECK(opt,length,1);
 80199ee:	3301      	adds	r3, #1
 80199f0:	e7d0      	b.n	8019994 <coap_opt_parse+0x84>
  return (opt + result->length) - opt_start;
 80199f2:	4413      	add	r3, r2
 80199f4:	1a18      	subs	r0, r3, r0
 80199f6:	e798      	b.n	801992a <coap_opt_parse+0x1a>
 80199f8:	08030ed8 	.word	0x08030ed8
 80199fc:	0802ac2e 	.word	0x0802ac2e
 8019a00:	08030edc 	.word	0x08030edc
 8019a04:	0802d75d 	.word	0x0802d75d
 8019a08:	08030f45 	.word	0x08030f45
 8019a0c:	08030f99 	.word	0x08030f99
 8019a10:	08030f67 	.word	0x08030f67
 8019a14:	08030f78 	.word	0x08030f78

08019a18 <coap_option_iterator_init>:
                          const coap_opt_filter_t filter) {
 8019a18:	b570      	push	{r4, r5, r6, lr}
 8019a1a:	460b      	mov	r3, r1
 8019a1c:	4615      	mov	r5, r2
  assert(pdu);
 8019a1e:	4604      	mov	r4, r0
 8019a20:	b928      	cbnz	r0, 8019a2e <coap_option_iterator_init+0x16>
 8019a22:	4b1a      	ldr	r3, [pc, #104]	; (8019a8c <coap_option_iterator_init+0x74>)
 8019a24:	4a1a      	ldr	r2, [pc, #104]	; (8019a90 <coap_option_iterator_init+0x78>)
 8019a26:	217b      	movs	r1, #123	; 0x7b
  assert(pdu->token);
 8019a28:	481a      	ldr	r0, [pc, #104]	; (8019a94 <coap_option_iterator_init+0x7c>)
 8019a2a:	f002 f827 	bl	801ba7c <__assert_func>
 8019a2e:	6982      	ldr	r2, [r0, #24]
 8019a30:	b91a      	cbnz	r2, 8019a3a <coap_option_iterator_init+0x22>
 8019a32:	4b19      	ldr	r3, [pc, #100]	; (8019a98 <coap_option_iterator_init+0x80>)
 8019a34:	4a16      	ldr	r2, [pc, #88]	; (8019a90 <coap_option_iterator_init+0x78>)
 8019a36:	217c      	movs	r1, #124	; 0x7c
 8019a38:	e7f6      	b.n	8019a28 <coap_option_iterator_init+0x10>
  assert(oi);
 8019a3a:	b919      	cbnz	r1, 8019a44 <coap_option_iterator_init+0x2c>
 8019a3c:	4b17      	ldr	r3, [pc, #92]	; (8019a9c <coap_option_iterator_init+0x84>)
 8019a3e:	4a14      	ldr	r2, [pc, #80]	; (8019a90 <coap_option_iterator_init+0x78>)
 8019a40:	217d      	movs	r1, #125	; 0x7d
 8019a42:	e7f1      	b.n	8019a28 <coap_option_iterator_init+0x10>
  memset(oi, 0, sizeof(coap_opt_iterator_t));
 8019a44:	2218      	movs	r2, #24
 8019a46:	2100      	movs	r1, #0
 8019a48:	4618      	mov	r0, r3
 8019a4a:	f002 fc21 	bl	801c290 <memset>
  oi->next_option = pdu->token + pdu->token_length;
 8019a4e:	69a1      	ldr	r1, [r4, #24]
  if (pdu->token + pdu->used_size <= oi->next_option) {
 8019a50:	6922      	ldr	r2, [r4, #16]
  memset(oi, 0, sizeof(coap_opt_iterator_t));
 8019a52:	4603      	mov	r3, r0
  oi->next_option = pdu->token + pdu->token_length;
 8019a54:	7920      	ldrb	r0, [r4, #4]
 8019a56:	180e      	adds	r6, r1, r0
  if (pdu->token + pdu->used_size <= oi->next_option) {
 8019a58:	4411      	add	r1, r2
 8019a5a:	428e      	cmp	r6, r1
  oi->next_option = pdu->token + pdu->token_length;
 8019a5c:	609e      	str	r6, [r3, #8]
  if (pdu->token + pdu->used_size <= oi->next_option) {
 8019a5e:	d306      	bcc.n	8019a6e <coap_option_iterator_init+0x56>
    oi->bad = 1;
 8019a60:	799a      	ldrb	r2, [r3, #6]
 8019a62:	f042 0201 	orr.w	r2, r2, #1
 8019a66:	719a      	strb	r2, [r3, #6]
    return NULL;
 8019a68:	2300      	movs	r3, #0
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	bd70      	pop	{r4, r5, r6, pc}
  oi->length = pdu->used_size - pdu->token_length;
 8019a6e:	1a12      	subs	r2, r2, r0
 8019a70:	601a      	str	r2, [r3, #0]
  if (filter) {
 8019a72:	2d00      	cmp	r5, #0
 8019a74:	d0f9      	beq.n	8019a6a <coap_option_iterator_init+0x52>
    memcpy(oi->filter, filter, sizeof(coap_opt_filter_t));
 8019a76:	682a      	ldr	r2, [r5, #0]
 8019a78:	60da      	str	r2, [r3, #12]
 8019a7a:	686a      	ldr	r2, [r5, #4]
 8019a7c:	611a      	str	r2, [r3, #16]
 8019a7e:	68aa      	ldr	r2, [r5, #8]
 8019a80:	615a      	str	r2, [r3, #20]
    oi->filtered = 1;
 8019a82:	799a      	ldrb	r2, [r3, #6]
 8019a84:	f042 0202 	orr.w	r2, r2, #2
 8019a88:	719a      	strb	r2, [r3, #6]
 8019a8a:	e7ee      	b.n	8019a6a <coap_option_iterator_init+0x52>
 8019a8c:	0802eead 	.word	0x0802eead
 8019a90:	0802ac3d 	.word	0x0802ac3d
 8019a94:	08030edc 	.word	0x08030edc
 8019a98:	080311f5 	.word	0x080311f5
 8019a9c:	08030fb0 	.word	0x08030fb0

08019aa0 <coap_opt_length>:
coap_opt_length(const coap_opt_t *opt) {
 8019aa0:	b508      	push	{r3, lr}
  length = *opt & 0x0f;
 8019aa2:	7802      	ldrb	r2, [r0, #0]
 8019aa4:	f002 030f 	and.w	r3, r2, #15
  switch (*opt & 0xf0) {
 8019aa8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8019aac:	2ae0      	cmp	r2, #224	; 0xe0
 8019aae:	d01b      	beq.n	8019ae8 <coap_opt_length+0x48>
 8019ab0:	2af0      	cmp	r2, #240	; 0xf0
 8019ab2:	d00e      	beq.n	8019ad2 <coap_opt_length+0x32>
 8019ab4:	2ad0      	cmp	r2, #208	; 0xd0
 8019ab6:	d100      	bne.n	8019aba <coap_opt_length+0x1a>
    ++opt;
 8019ab8:	3001      	adds	r0, #1
  switch (length) {
 8019aba:	2b0e      	cmp	r3, #14
 8019abc:	d01e      	beq.n	8019afc <coap_opt_length+0x5c>
 8019abe:	2b0f      	cmp	r3, #15
 8019ac0:	d016      	beq.n	8019af0 <coap_opt_length+0x50>
 8019ac2:	2b0d      	cmp	r3, #13
 8019ac4:	d112      	bne.n	8019aec <coap_opt_length+0x4c>
    ++opt;
 8019ac6:	1c42      	adds	r2, r0, #1
 8019ac8:	4618      	mov	r0, r3
    length += *opt++;
 8019aca:	7813      	ldrb	r3, [r2, #0]
 8019acc:	4418      	add	r0, r3
 8019ace:	b280      	uxth	r0, r0
    break;
 8019ad0:	e004      	b.n	8019adc <coap_opt_length+0x3c>
    coap_log(LOG_DEBUG, "illegal option delta\n");
 8019ad2:	f7fb fa87 	bl	8014fe4 <coap_get_log_level>
 8019ad6:	2806      	cmp	r0, #6
 8019ad8:	d801      	bhi.n	8019ade <coap_opt_length+0x3e>
    return 0;
 8019ada:	2000      	movs	r0, #0
}
 8019adc:	bd08      	pop	{r3, pc}
    coap_log(LOG_DEBUG, "illegal option delta\n");
 8019ade:	490b      	ldr	r1, [pc, #44]	; (8019b0c <coap_opt_length+0x6c>)
 8019ae0:	2007      	movs	r0, #7
 8019ae2:	f7fb fae9 	bl	80150b8 <coap_log_impl>
 8019ae6:	e7f8      	b.n	8019ada <coap_opt_length+0x3a>
    ++opt;
 8019ae8:	3001      	adds	r0, #1
 8019aea:	e7e5      	b.n	8019ab8 <coap_opt_length+0x18>
  length = *opt & 0x0f;
 8019aec:	b298      	uxth	r0, r3
 8019aee:	e7f5      	b.n	8019adc <coap_opt_length+0x3c>
    coap_log(LOG_DEBUG, "illegal option length\n");
 8019af0:	f7fb fa78 	bl	8014fe4 <coap_get_log_level>
 8019af4:	2806      	cmp	r0, #6
 8019af6:	d9f0      	bls.n	8019ada <coap_opt_length+0x3a>
 8019af8:	4905      	ldr	r1, [pc, #20]	; (8019b10 <coap_opt_length+0x70>)
 8019afa:	e7f1      	b.n	8019ae0 <coap_opt_length+0x40>
    length = (*opt++ << 8) + 269;
 8019afc:	1c82      	adds	r2, r0, #2
 8019afe:	7840      	ldrb	r0, [r0, #1]
 8019b00:	0200      	lsls	r0, r0, #8
 8019b02:	f200 100d 	addw	r0, r0, #269	; 0x10d
 8019b06:	b280      	uxth	r0, r0
 8019b08:	e7df      	b.n	8019aca <coap_opt_length+0x2a>
 8019b0a:	bf00      	nop
 8019b0c:	08030fc3 	.word	0x08030fc3
 8019b10:	08030fd9 	.word	0x08030fd9

08019b14 <coap_opt_value>:
coap_opt_value(const coap_opt_t *opt) {
 8019b14:	b508      	push	{r3, lr}
  switch (*opt & 0xf0) {
 8019b16:	7802      	ldrb	r2, [r0, #0]
 8019b18:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
 8019b1c:	2be0      	cmp	r3, #224	; 0xe0
 8019b1e:	d01b      	beq.n	8019b58 <coap_opt_value+0x44>
 8019b20:	2bf0      	cmp	r3, #240	; 0xf0
 8019b22:	d00e      	beq.n	8019b42 <coap_opt_value+0x2e>
 8019b24:	2bd0      	cmp	r3, #208	; 0xd0
 8019b26:	f04f 0301 	mov.w	r3, #1
 8019b2a:	d016      	beq.n	8019b5a <coap_opt_value+0x46>
  switch (*opt & 0x0f) {
 8019b2c:	f002 020f 	and.w	r2, r2, #15
 8019b30:	2a0e      	cmp	r2, #14
 8019b32:	d01a      	beq.n	8019b6a <coap_opt_value+0x56>
 8019b34:	2a0f      	cmp	r2, #15
 8019b36:	d012      	beq.n	8019b5e <coap_opt_value+0x4a>
 8019b38:	2a0d      	cmp	r2, #13
 8019b3a:	d100      	bne.n	8019b3e <coap_opt_value+0x2a>
    ++ofs;
 8019b3c:	3301      	adds	r3, #1
  return (const uint8_t *)opt + ofs;
 8019b3e:	4418      	add	r0, r3
 8019b40:	e004      	b.n	8019b4c <coap_opt_value+0x38>
    coap_log(LOG_DEBUG, "illegal option delta\n");
 8019b42:	f7fb fa4f 	bl	8014fe4 <coap_get_log_level>
 8019b46:	2806      	cmp	r0, #6
 8019b48:	d801      	bhi.n	8019b4e <coap_opt_value+0x3a>
    return 0;
 8019b4a:	2000      	movs	r0, #0
}
 8019b4c:	bd08      	pop	{r3, pc}
    coap_log(LOG_DEBUG, "illegal option delta\n");
 8019b4e:	4908      	ldr	r1, [pc, #32]	; (8019b70 <coap_opt_value+0x5c>)
    coap_log(LOG_DEBUG, "illegal option length\n");
 8019b50:	2007      	movs	r0, #7
 8019b52:	f7fb fab1 	bl	80150b8 <coap_log_impl>
 8019b56:	e7f8      	b.n	8019b4a <coap_opt_value+0x36>
    ++ofs;
 8019b58:	2302      	movs	r3, #2
    ++ofs;
 8019b5a:	3301      	adds	r3, #1
    break;
 8019b5c:	e7e6      	b.n	8019b2c <coap_opt_value+0x18>
    coap_log(LOG_DEBUG, "illegal option length\n");
 8019b5e:	f7fb fa41 	bl	8014fe4 <coap_get_log_level>
 8019b62:	2806      	cmp	r0, #6
 8019b64:	d9f1      	bls.n	8019b4a <coap_opt_value+0x36>
 8019b66:	4903      	ldr	r1, [pc, #12]	; (8019b74 <coap_opt_value+0x60>)
 8019b68:	e7f2      	b.n	8019b50 <coap_opt_value+0x3c>
    ++ofs;
 8019b6a:	3301      	adds	r3, #1
 8019b6c:	e7e6      	b.n	8019b3c <coap_opt_value+0x28>
 8019b6e:	bf00      	nop
 8019b70:	08030fc3 	.word	0x08030fc3
 8019b74:	08030fd9 	.word	0x08030fd9

08019b78 <coap_opt_setheader>:
                   uint16_t delta, size_t length) {
 8019b78:	b570      	push	{r4, r5, r6, lr}
 8019b7a:	4616      	mov	r6, r2
 8019b7c:	461d      	mov	r5, r3
  assert(opt);
 8019b7e:	b930      	cbnz	r0, 8019b8e <coap_opt_setheader+0x16>
 8019b80:	4b2e      	ldr	r3, [pc, #184]	; (8019c3c <coap_opt_setheader+0xc4>)
 8019b82:	4a2f      	ldr	r2, [pc, #188]	; (8019c40 <coap_opt_setheader+0xc8>)
 8019b84:	482f      	ldr	r0, [pc, #188]	; (8019c44 <coap_opt_setheader+0xcc>)
 8019b86:	f240 114d 	movw	r1, #333	; 0x14d
 8019b8a:	f001 ff77 	bl	801ba7c <__assert_func>
  if (maxlen == 0)                /* need at least one byte */
 8019b8e:	b909      	cbnz	r1, 8019b94 <coap_opt_setheader+0x1c>
      return 0;
 8019b90:	2000      	movs	r0, #0
}
 8019b92:	bd70      	pop	{r4, r5, r6, pc}
  if (delta < 13) {
 8019b94:	2a0c      	cmp	r2, #12
 8019b96:	d809      	bhi.n	8019bac <coap_opt_setheader+0x34>
    opt[0] = (coap_opt_t)(delta << 4);
 8019b98:	0113      	lsls	r3, r2, #4
 8019b9a:	7003      	strb	r3, [r0, #0]
  size_t skip = 0;
 8019b9c:	2400      	movs	r4, #0
  if (length < 13) {
 8019b9e:	2d0c      	cmp	r5, #12
 8019ba0:	d828      	bhi.n	8019bf4 <coap_opt_setheader+0x7c>
    opt[0] |= length & 0x0f;
 8019ba2:	7803      	ldrb	r3, [r0, #0]
 8019ba4:	432b      	orrs	r3, r5
 8019ba6:	7003      	strb	r3, [r0, #0]
  return skip + 1;
 8019ba8:	1c60      	adds	r0, r4, #1
 8019baa:	e7f2      	b.n	8019b92 <coap_opt_setheader+0x1a>
  } else if (delta < 269) {
 8019bac:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
 8019bb0:	d812      	bhi.n	8019bd8 <coap_opt_setheader+0x60>
    if (maxlen < 2) {
 8019bb2:	2901      	cmp	r1, #1
 8019bb4:	d809      	bhi.n	8019bca <coap_opt_setheader+0x52>
      coap_log(LOG_DEBUG, "insufficient space to encode option delta %d\n",
 8019bb6:	f7fb fa15 	bl	8014fe4 <coap_get_log_level>
 8019bba:	2806      	cmp	r0, #6
 8019bbc:	d9e8      	bls.n	8019b90 <coap_opt_setheader+0x18>
 8019bbe:	4922      	ldr	r1, [pc, #136]	; (8019c48 <coap_opt_setheader+0xd0>)
 8019bc0:	4632      	mov	r2, r6
      coap_log(LOG_DEBUG, "insufficient space to encode option length %zu\n",
 8019bc2:	2007      	movs	r0, #7
 8019bc4:	f7fb fa78 	bl	80150b8 <coap_log_impl>
 8019bc8:	e7e2      	b.n	8019b90 <coap_opt_setheader+0x18>
    opt[0] = 0xd0;
 8019bca:	23d0      	movs	r3, #208	; 0xd0
 8019bcc:	7003      	strb	r3, [r0, #0]
    opt[++skip] = (coap_opt_t)(delta - 13);
 8019bce:	f1a2 030d 	sub.w	r3, r2, #13
 8019bd2:	7043      	strb	r3, [r0, #1]
 8019bd4:	2401      	movs	r4, #1
 8019bd6:	e7e2      	b.n	8019b9e <coap_opt_setheader+0x26>
    if (maxlen < 3) {
 8019bd8:	2902      	cmp	r1, #2
 8019bda:	d9ec      	bls.n	8019bb6 <coap_opt_setheader+0x3e>
    opt[0] = 0xe0;
 8019bdc:	23e0      	movs	r3, #224	; 0xe0
    opt[++skip] = ((delta - 269) >> 8) & 0xff;
 8019bde:	f46f 7286 	mvn.w	r2, #268	; 0x10c
    opt[0] = 0xe0;
 8019be2:	7003      	strb	r3, [r0, #0]
    opt[++skip] = ((delta - 269) >> 8) & 0xff;
 8019be4:	18b3      	adds	r3, r6, r2
 8019be6:	121b      	asrs	r3, r3, #8
 8019be8:	7043      	strb	r3, [r0, #1]
    opt[++skip] = (delta - 269) & 0xff;
 8019bea:	f1a6 030d 	sub.w	r3, r6, #13
 8019bee:	7083      	strb	r3, [r0, #2]
 8019bf0:	2402      	movs	r4, #2
 8019bf2:	e7d4      	b.n	8019b9e <coap_opt_setheader+0x26>
  } else if (length < 269) {
 8019bf4:	f5b5 7f86 	cmp.w	r5, #268	; 0x10c
 8019bf8:	d811      	bhi.n	8019c1e <coap_opt_setheader+0xa6>
    if (maxlen < skip + 2) {
 8019bfa:	1ca3      	adds	r3, r4, #2
 8019bfc:	4299      	cmp	r1, r3
 8019bfe:	d206      	bcs.n	8019c0e <coap_opt_setheader+0x96>
      coap_log(LOG_DEBUG, "insufficient space to encode option length %zu\n",
 8019c00:	f7fb f9f0 	bl	8014fe4 <coap_get_log_level>
 8019c04:	2806      	cmp	r0, #6
 8019c06:	d9c3      	bls.n	8019b90 <coap_opt_setheader+0x18>
 8019c08:	4910      	ldr	r1, [pc, #64]	; (8019c4c <coap_opt_setheader+0xd4>)
 8019c0a:	462a      	mov	r2, r5
 8019c0c:	e7d9      	b.n	8019bc2 <coap_opt_setheader+0x4a>
    opt[0] |= 0x0d;
 8019c0e:	7803      	ldrb	r3, [r0, #0]
 8019c10:	f043 030d 	orr.w	r3, r3, #13
 8019c14:	7003      	strb	r3, [r0, #0]
    opt[++skip] = (coap_opt_t)(length - 13);
 8019c16:	3401      	adds	r4, #1
    opt[++skip] = (length - 269) & 0xff;
 8019c18:	3d0d      	subs	r5, #13
 8019c1a:	5505      	strb	r5, [r0, r4]
 8019c1c:	e7c4      	b.n	8019ba8 <coap_opt_setheader+0x30>
    if (maxlen < skip + 3) {
 8019c1e:	1ce3      	adds	r3, r4, #3
 8019c20:	4299      	cmp	r1, r3
 8019c22:	d3c8      	bcc.n	8019bb6 <coap_opt_setheader+0x3e>
    opt[0] |= 0x0e;
 8019c24:	7803      	ldrb	r3, [r0, #0]
 8019c26:	f043 030e 	orr.w	r3, r3, #14
 8019c2a:	7003      	strb	r3, [r0, #0]
    opt[++skip] = ((length - 269) >> 8) & 0xff;
 8019c2c:	f46f 7386 	mvn.w	r3, #268	; 0x10c
 8019c30:	1902      	adds	r2, r0, r4
 8019c32:	18eb      	adds	r3, r5, r3
 8019c34:	0a1b      	lsrs	r3, r3, #8
 8019c36:	7053      	strb	r3, [r2, #1]
    opt[++skip] = (length - 269) & 0xff;
 8019c38:	3402      	adds	r4, #2
 8019c3a:	e7ed      	b.n	8019c18 <coap_opt_setheader+0xa0>
 8019c3c:	08030ed8 	.word	0x08030ed8
 8019c40:	0802ac57 	.word	0x0802ac57
 8019c44:	08030edc 	.word	0x08030edc
 8019c48:	08030ff0 	.word	0x08030ff0
 8019c4c:	0803101e 	.word	0x0803101e

08019c50 <coap_opt_encode_size>:
  if (delta >= 13) {
 8019c50:	280c      	cmp	r0, #12
 8019c52:	d90d      	bls.n	8019c70 <coap_opt_encode_size+0x20>
    if (delta < 269)
 8019c54:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
      n += 2;
 8019c58:	bf94      	ite	ls
 8019c5a:	2002      	movls	r0, #2
 8019c5c:	2003      	movhi	r0, #3
  if (length >= 13) {
 8019c5e:	290c      	cmp	r1, #12
 8019c60:	d904      	bls.n	8019c6c <coap_opt_encode_size+0x1c>
    if (length < 269)
 8019c62:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
      n += 1;
 8019c66:	bf94      	ite	ls
 8019c68:	3001      	addls	r0, #1
      n += 2;
 8019c6a:	3002      	addhi	r0, #2
}
 8019c6c:	4408      	add	r0, r1
 8019c6e:	4770      	bx	lr
  size_t n = 1;
 8019c70:	2001      	movs	r0, #1
 8019c72:	e7f4      	b.n	8019c5e <coap_opt_encode_size+0xe>

08019c74 <coap_opt_encode>:
                const uint8_t *val, size_t length) {
 8019c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c78:	9e06      	ldr	r6, [sp, #24]
 8019c7a:	461f      	mov	r7, r3
  l = coap_opt_setheader(opt, maxlen, delta, length);
 8019c7c:	4633      	mov	r3, r6
                const uint8_t *val, size_t length) {
 8019c7e:	460d      	mov	r5, r1
 8019c80:	4680      	mov	r8, r0
  l = coap_opt_setheader(opt, maxlen, delta, length);
 8019c82:	f7ff ff79 	bl	8019b78 <coap_opt_setheader>
  assert(l <= maxlen);
 8019c86:	4285      	cmp	r5, r0
  l = coap_opt_setheader(opt, maxlen, delta, length);
 8019c88:	4604      	mov	r4, r0
  assert(l <= maxlen);
 8019c8a:	d206      	bcs.n	8019c9a <coap_opt_encode+0x26>
 8019c8c:	4b14      	ldr	r3, [pc, #80]	; (8019ce0 <coap_opt_encode+0x6c>)
 8019c8e:	4a15      	ldr	r2, [pc, #84]	; (8019ce4 <coap_opt_encode+0x70>)
 8019c90:	4815      	ldr	r0, [pc, #84]	; (8019ce8 <coap_opt_encode+0x74>)
 8019c92:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8019c96:	f001 fef1 	bl	801ba7c <__assert_func>
  if (!l) {
 8019c9a:	b960      	cbnz	r0, 8019cb6 <coap_opt_encode+0x42>
    coap_log(LOG_DEBUG, "coap_opt_encode: cannot set option header\n");
 8019c9c:	f7fb f9a2 	bl	8014fe4 <coap_get_log_level>
 8019ca0:	2806      	cmp	r0, #6
 8019ca2:	d801      	bhi.n	8019ca8 <coap_opt_encode+0x34>
    return 0;
 8019ca4:	2400      	movs	r4, #0
 8019ca6:	e003      	b.n	8019cb0 <coap_opt_encode+0x3c>
    coap_log(LOG_DEBUG, "coap_opt_encode: cannot set option header\n");
 8019ca8:	4910      	ldr	r1, [pc, #64]	; (8019cec <coap_opt_encode+0x78>)
 8019caa:	2007      	movs	r0, #7
 8019cac:	f7fb fa04 	bl	80150b8 <coap_log_impl>
}
 8019cb0:	4620      	mov	r0, r4
 8019cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  maxlen -= l;
 8019cb6:	1a2d      	subs	r5, r5, r0
  if (maxlen < length) {
 8019cb8:	42ae      	cmp	r6, r5
 8019cba:	d908      	bls.n	8019cce <coap_opt_encode+0x5a>
    coap_log(LOG_DEBUG, "coap_opt_encode: option too large for buffer\n");
 8019cbc:	f7fb f992 	bl	8014fe4 <coap_get_log_level>
 8019cc0:	2806      	cmp	r0, #6
 8019cc2:	d9ef      	bls.n	8019ca4 <coap_opt_encode+0x30>
 8019cc4:	490a      	ldr	r1, [pc, #40]	; (8019cf0 <coap_opt_encode+0x7c>)
 8019cc6:	2007      	movs	r0, #7
 8019cc8:	f7fb f9f6 	bl	80150b8 <coap_log_impl>
 8019ccc:	e7ea      	b.n	8019ca4 <coap_opt_encode+0x30>
  if (val)                        /* better be safe here */
 8019cce:	b127      	cbz	r7, 8019cda <coap_opt_encode+0x66>
    memcpy(opt, val, length);
 8019cd0:	4632      	mov	r2, r6
 8019cd2:	4639      	mov	r1, r7
 8019cd4:	4440      	add	r0, r8
 8019cd6:	f002 fab3 	bl	801c240 <memcpy>
  return l + length;
 8019cda:	4434      	add	r4, r6
 8019cdc:	e7e8      	b.n	8019cb0 <coap_opt_encode+0x3c>
 8019cde:	bf00      	nop
 8019ce0:	0803104e 	.word	0x0803104e
 8019ce4:	0802ac6a 	.word	0x0802ac6a
 8019ce8:	08030edc 	.word	0x08030edc
 8019cec:	0803105a 	.word	0x0803105a
 8019cf0:	08031085 	.word	0x08031085

08019cf4 <coap_option_filter_set>:

int
coap_option_filter_set(coap_opt_filter_t filter, uint16_t type) {
  return coap_option_filter_op(filter, type, FILTER_SET);
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	f7ff bdc4 	b.w	8019882 <coap_option_filter_op>

08019cfa <coap_option_filter_unset>:
}

int
coap_option_filter_unset(coap_opt_filter_t filter, uint16_t type) {
  return coap_option_filter_op(filter, type, FILTER_CLEAR);
 8019cfa:	2201      	movs	r2, #1
 8019cfc:	f7ff bdc1 	b.w	8019882 <coap_option_filter_op>

08019d00 <coap_option_filter_get>:

int
coap_option_filter_get(coap_opt_filter_t filter, uint16_t type) {
  /* Ugly cast to make the const go away (FILTER_GET wont change filter
   * but as _set and _unset do, the function does not take a const). */
  return coap_option_filter_op((uint16_t *)filter, type, FILTER_GET);
 8019d00:	2202      	movs	r2, #2
 8019d02:	f7ff bdbe 	b.w	8019882 <coap_option_filter_op>
	...

08019d08 <coap_option_next>:
coap_option_next(coap_opt_iterator_t *oi) {
 8019d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert(oi);
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	b928      	cbnz	r0, 8019d1a <coap_option_next+0x12>
 8019d0e:	4b21      	ldr	r3, [pc, #132]	; (8019d94 <coap_option_next+0x8c>)
 8019d10:	4a21      	ldr	r2, [pc, #132]	; (8019d98 <coap_option_next+0x90>)
 8019d12:	21a3      	movs	r1, #163	; 0xa3
      assert(optsize <= oi->length);
 8019d14:	4821      	ldr	r0, [pc, #132]	; (8019d9c <coap_option_next+0x94>)
 8019d16:	f001 feb1 	bl	801ba7c <__assert_func>
  if (oi->bad || oi->length == 0 ||
 8019d1a:	7983      	ldrb	r3, [r0, #6]
 8019d1c:	f013 0501 	ands.w	r5, r3, #1
 8019d20:	d106      	bne.n	8019d30 <coap_option_next+0x28>
 8019d22:	6802      	ldr	r2, [r0, #0]
 8019d24:	b122      	cbz	r2, 8019d30 <coap_option_next+0x28>
      !oi->next_option || *oi->next_option == COAP_PAYLOAD_START) {
 8019d26:	6882      	ldr	r2, [r0, #8]
  if (oi->bad || oi->length == 0 ||
 8019d28:	b112      	cbz	r2, 8019d30 <coap_option_next+0x28>
      !oi->next_option || *oi->next_option == COAP_PAYLOAD_START) {
 8019d2a:	7812      	ldrb	r2, [r2, #0]
 8019d2c:	2aff      	cmp	r2, #255	; 0xff
 8019d2e:	d105      	bne.n	8019d3c <coap_option_next+0x34>
      oi->bad = 1;
 8019d30:	79a3      	ldrb	r3, [r4, #6]
 8019d32:	f043 0301 	orr.w	r3, r3, #1
 8019d36:	71a3      	strb	r3, [r4, #6]
      return NULL;
 8019d38:	2500      	movs	r5, #0
 8019d3a:	e020      	b.n	8019d7e <coap_option_next+0x76>
  if (opt_finished(oi))
 8019d3c:	07da      	lsls	r2, r3, #31
 8019d3e:	d41e      	bmi.n	8019d7e <coap_option_next+0x76>
        (b = coap_option_getb(oi->filter, oi->type)) > 0)
 8019d40:	f100 060c 	add.w	r6, r0, #12
    current_opt = oi->next_option;
 8019d44:	68a5      	ldr	r5, [r4, #8]
    optsize = coap_opt_parse(oi->next_option, oi->length, &option);
 8019d46:	6821      	ldr	r1, [r4, #0]
 8019d48:	aa01      	add	r2, sp, #4
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	f7ff fde0 	bl	8019910 <coap_opt_parse>
    if (optsize) {
 8019d50:	2800      	cmp	r0, #0
 8019d52:	d0ed      	beq.n	8019d30 <coap_option_next+0x28>
      assert(optsize <= oi->length);
 8019d54:	6823      	ldr	r3, [r4, #0]
 8019d56:	4298      	cmp	r0, r3
 8019d58:	d903      	bls.n	8019d62 <coap_option_next+0x5a>
 8019d5a:	4b11      	ldr	r3, [pc, #68]	; (8019da0 <coap_option_next+0x98>)
 8019d5c:	4a0e      	ldr	r2, [pc, #56]	; (8019d98 <coap_option_next+0x90>)
 8019d5e:	21b2      	movs	r1, #178	; 0xb2
 8019d60:	e7d8      	b.n	8019d14 <coap_option_next+0xc>
      oi->next_option += optsize;
 8019d62:	68a2      	ldr	r2, [r4, #8]
      oi->type += option.delta;
 8019d64:	88a1      	ldrh	r1, [r4, #4]
      oi->next_option += optsize;
 8019d66:	4402      	add	r2, r0
      oi->length -= optsize;
 8019d68:	1a18      	subs	r0, r3, r0
      oi->type += option.delta;
 8019d6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
      oi->next_option += optsize;
 8019d6e:	60a2      	str	r2, [r4, #8]
      oi->type += option.delta;
 8019d70:	4419      	add	r1, r3
    if (!oi->filtered ||
 8019d72:	79a3      	ldrb	r3, [r4, #6]
      oi->length -= optsize;
 8019d74:	6020      	str	r0, [r4, #0]
      oi->type += option.delta;
 8019d76:	b289      	uxth	r1, r1
    if (!oi->filtered ||
 8019d78:	079b      	lsls	r3, r3, #30
      oi->type += option.delta;
 8019d7a:	80a1      	strh	r1, [r4, #4]
    if (!oi->filtered ||
 8019d7c:	d402      	bmi.n	8019d84 <coap_option_next+0x7c>
}
 8019d7e:	4628      	mov	r0, r5
 8019d80:	b004      	add	sp, #16
 8019d82:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @return       @c 1 if bit was set, @c 0 if not, @c -1 on error.
 */
COAP_STATIC_INLINE int
coap_option_getb(coap_opt_filter_t filter, uint16_t type) {
  return coap_option_filter_get(filter, type);
 8019d84:	4630      	mov	r0, r6
 8019d86:	f7ff ffbb 	bl	8019d00 <coap_option_filter_get>
    if (!oi->filtered ||
 8019d8a:	2800      	cmp	r0, #0
 8019d8c:	dcf7      	bgt.n	8019d7e <coap_option_next+0x76>
    else if (b < 0) {                /* filter too small, cannot proceed */
 8019d8e:	d0d9      	beq.n	8019d44 <coap_option_next+0x3c>
 8019d90:	e7ce      	b.n	8019d30 <coap_option_next+0x28>
 8019d92:	bf00      	nop
 8019d94:	08030fb0 	.word	0x08030fb0
 8019d98:	0802ac7a 	.word	0x0802ac7a
 8019d9c:	08030edc 	.word	0x08030edc
 8019da0:	080310b3 	.word	0x080310b3

08019da4 <coap_check_option>:
                  coap_opt_iterator_t *oi) {
 8019da4:	b530      	push	{r4, r5, lr}
 8019da6:	b085      	sub	sp, #20
  memset(f, 0, sizeof(coap_opt_filter_t));
 8019da8:	2300      	movs	r3, #0
 8019daa:	4614      	mov	r4, r2
 8019dac:	4605      	mov	r5, r0
  return coap_option_filter_set(filter, type) ? 1 : -1;
 8019dae:	a801      	add	r0, sp, #4
  memset(f, 0, sizeof(coap_opt_filter_t));
 8019db0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019db4:	9303      	str	r3, [sp, #12]
  return coap_option_filter_set(filter, type) ? 1 : -1;
 8019db6:	f7ff ff9d 	bl	8019cf4 <coap_option_filter_set>
  coap_option_iterator_init(pdu, oi, f);
 8019dba:	aa01      	add	r2, sp, #4
 8019dbc:	4621      	mov	r1, r4
 8019dbe:	4628      	mov	r0, r5
 8019dc0:	f7ff fe2a 	bl	8019a18 <coap_option_iterator_init>
  return coap_option_next(oi);
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f7ff ff9f 	bl	8019d08 <coap_option_next>
}
 8019dca:	b005      	add	sp, #20
 8019dcc:	bd30      	pop	{r4, r5, pc}
	...

08019dd0 <coap_pdu_clear>:
#ifndef max
#define max(a,b) ((a) > (b) ? (a) : (b))
#endif

void
coap_pdu_clear(coap_pdu_t *pdu, size_t size) {
 8019dd0:	b508      	push	{r3, lr}
  assert(pdu);
 8019dd2:	b928      	cbnz	r0, 8019de0 <coap_pdu_clear+0x10>
 8019dd4:	4b10      	ldr	r3, [pc, #64]	; (8019e18 <coap_pdu_clear+0x48>)
 8019dd6:	4a11      	ldr	r2, [pc, #68]	; (8019e1c <coap_pdu_clear+0x4c>)
 8019dd8:	212f      	movs	r1, #47	; 0x2f
  assert(pdu->token);
 8019dda:	4811      	ldr	r0, [pc, #68]	; (8019e20 <coap_pdu_clear+0x50>)
 8019ddc:	f001 fe4e 	bl	801ba7c <__assert_func>
 8019de0:	6983      	ldr	r3, [r0, #24]
 8019de2:	b91b      	cbnz	r3, 8019dec <coap_pdu_clear+0x1c>
 8019de4:	4b0f      	ldr	r3, [pc, #60]	; (8019e24 <coap_pdu_clear+0x54>)
 8019de6:	4a0d      	ldr	r2, [pc, #52]	; (8019e1c <coap_pdu_clear+0x4c>)
 8019de8:	2130      	movs	r1, #48	; 0x30
 8019dea:	e7f6      	b.n	8019dda <coap_pdu_clear+0xa>
  assert(pdu->max_hdr_size >= COAP_PDU_MAX_UDP_HEADER_SIZE);
 8019dec:	7883      	ldrb	r3, [r0, #2]
 8019dee:	2b03      	cmp	r3, #3
 8019df0:	d803      	bhi.n	8019dfa <coap_pdu_clear+0x2a>
 8019df2:	4b0d      	ldr	r3, [pc, #52]	; (8019e28 <coap_pdu_clear+0x58>)
 8019df4:	4a09      	ldr	r2, [pc, #36]	; (8019e1c <coap_pdu_clear+0x4c>)
 8019df6:	2131      	movs	r1, #49	; 0x31
 8019df8:	e7ef      	b.n	8019dda <coap_pdu_clear+0xa>
  if (pdu->alloc_size > size)
 8019dfa:	68c3      	ldr	r3, [r0, #12]
 8019dfc:	428b      	cmp	r3, r1
    pdu->alloc_size = size;
  pdu->type = 0;
 8019dfe:	f04f 0300 	mov.w	r3, #0
 8019e02:	8003      	strh	r3, [r0, #0]
  pdu->code = 0;
  pdu->hdr_size = 0;
 8019e04:	70c3      	strb	r3, [r0, #3]
  pdu->token_length = 0;
 8019e06:	7103      	strb	r3, [r0, #4]
  pdu->tid = 0;
  pdu->max_delta = 0;
  pdu->max_size = size;
  pdu->used_size = 0;
 8019e08:	e9c0 3104 	strd	r3, r1, [r0, #16]
    pdu->alloc_size = size;
 8019e0c:	bf88      	it	hi
 8019e0e:	60c1      	strhi	r1, [r0, #12]
  pdu->tid = 0;
 8019e10:	80c3      	strh	r3, [r0, #6]
  pdu->max_delta = 0;
 8019e12:	8103      	strh	r3, [r0, #8]
  pdu->data = NULL;
 8019e14:	61c3      	str	r3, [r0, #28]
}
 8019e16:	bd08      	pop	{r3, pc}
 8019e18:	0802eead 	.word	0x0802eead
 8019e1c:	0802ac8b 	.word	0x0802ac8b
 8019e20:	08031101 	.word	0x08031101
 8019e24:	080311f5 	.word	0x080311f5
 8019e28:	08031167 	.word	0x08031167

08019e2c <coap_pdu_init>:
  return pdu;
}
#endif

coap_pdu_t *
coap_pdu_init(uint8_t type, uint8_t code, uint16_t tid, size_t size) {
 8019e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e30:	4680      	mov	r8, r0
 8019e32:	460f      	mov	r7, r1
  coap_pdu_t *pdu;

  pdu = coap_malloc_type(COAP_PDU, sizeof(coap_pdu_t));
 8019e34:	2007      	movs	r0, #7
 8019e36:	2120      	movs	r1, #32
coap_pdu_init(uint8_t type, uint8_t code, uint16_t tid, size_t size) {
 8019e38:	4691      	mov	r9, r2
 8019e3a:	461e      	mov	r6, r3
  pdu = coap_malloc_type(COAP_PDU, sizeof(coap_pdu_t));
 8019e3c:	f7fd fe62 	bl	8017b04 <coap_malloc_type>
  if (!pdu) return NULL;
 8019e40:	4604      	mov	r4, r0
 8019e42:	b1a0      	cbz	r0, 8019e6e <coap_pdu_init+0x42>
    return NULL;
  }
  pdu->token = (uint8_t *)pdu->pbuf->payload + pdu->max_hdr_size;
#else /* WITH_LWIP */
  uint8_t *buf;
  pdu->alloc_size = min(size, 256);
 8019e44:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  pdu->max_hdr_size = COAP_PDU_MAX_TCP_HEADER_SIZE;
 8019e48:	f04f 0306 	mov.w	r3, #6
  pdu->alloc_size = min(size, 256);
 8019e4c:	4631      	mov	r1, r6
 8019e4e:	bf28      	it	cs
 8019e50:	f44f 7180 	movcs.w	r1, #256	; 0x100
 8019e54:	60c1      	str	r1, [r0, #12]
  pdu->max_hdr_size = COAP_PDU_MAX_TCP_HEADER_SIZE;
 8019e56:	7083      	strb	r3, [r0, #2]
  buf = coap_malloc_type(COAP_PDU_BUF, pdu->alloc_size + pdu->max_hdr_size);
 8019e58:	4419      	add	r1, r3
 8019e5a:	2008      	movs	r0, #8
 8019e5c:	f7fd fe52 	bl	8017b04 <coap_malloc_type>
  if (buf == NULL) {
 8019e60:	4605      	mov	r5, r0
 8019e62:	b938      	cbnz	r0, 8019e74 <coap_pdu_init+0x48>
    coap_free_type(COAP_PDU, pdu);
 8019e64:	4621      	mov	r1, r4
 8019e66:	2007      	movs	r0, #7
 8019e68:	f7fd fe4f 	bl	8017b0a <coap_free_type>
    return NULL;
 8019e6c:	462c      	mov	r4, r5
  coap_pdu_clear(pdu, size);
  pdu->tid = tid;
  pdu->type = type;
  pdu->code = code;
  return pdu;
}
 8019e6e:	4620      	mov	r0, r4
 8019e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  pdu->token = buf + pdu->max_hdr_size;
 8019e74:	78a0      	ldrb	r0, [r4, #2]
 8019e76:	4405      	add	r5, r0
 8019e78:	61a5      	str	r5, [r4, #24]
  coap_pdu_clear(pdu, size);
 8019e7a:	4631      	mov	r1, r6
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f7ff ffa7 	bl	8019dd0 <coap_pdu_clear>
  pdu->tid = tid;
 8019e82:	f8a4 9006 	strh.w	r9, [r4, #6]
  pdu->type = type;
 8019e86:	f884 8000 	strb.w	r8, [r4]
  pdu->code = code;
 8019e8a:	7067      	strb	r7, [r4, #1]
  return pdu;
 8019e8c:	e7ef      	b.n	8019e6e <coap_pdu_init+0x42>

08019e8e <coap_delete_pdu>:
#endif
  return pdu;
}

void
coap_delete_pdu(coap_pdu_t *pdu) {
 8019e8e:	b510      	push	{r4, lr}
  if (pdu != NULL) {
 8019e90:	4604      	mov	r4, r0
 8019e92:	b160      	cbz	r0, 8019eae <coap_delete_pdu+0x20>
#ifdef WITH_LWIP
    pbuf_free(pdu->pbuf);
#else
    if (pdu->token != NULL)
 8019e94:	6983      	ldr	r3, [r0, #24]
 8019e96:	b123      	cbz	r3, 8019ea2 <coap_delete_pdu+0x14>
      coap_free_type(COAP_PDU_BUF, pdu->token - pdu->max_hdr_size);
 8019e98:	7881      	ldrb	r1, [r0, #2]
 8019e9a:	2008      	movs	r0, #8
 8019e9c:	1a59      	subs	r1, r3, r1
 8019e9e:	f7fd fe34 	bl	8017b0a <coap_free_type>
#endif
    coap_free_type(COAP_PDU, pdu);
 8019ea2:	4621      	mov	r1, r4
 8019ea4:	2007      	movs	r0, #7
  }
}
 8019ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    coap_free_type(COAP_PDU, pdu);
 8019eaa:	f7fd be2e 	b.w	8017b0a <coap_free_type>
}
 8019eae:	bd10      	pop	{r4, pc}

08019eb0 <coap_pdu_resize>:

int
coap_pdu_resize(coap_pdu_t *pdu, size_t new_size) {
 8019eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (new_size > pdu->alloc_size) {
 8019eb2:	68c3      	ldr	r3, [r0, #12]
 8019eb4:	428b      	cmp	r3, r1
coap_pdu_resize(coap_pdu_t *pdu, size_t new_size) {
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	460f      	mov	r7, r1
  if (new_size > pdu->alloc_size) {
 8019eba:	d22d      	bcs.n	8019f18 <coap_pdu_resize+0x68>
#if !defined(WITH_LWIP) && !defined(WITH_CONTIKI)
    uint8_t *new_hdr;
    size_t offset;
#endif
    if (pdu->max_size && new_size > pdu->max_size) {
 8019ebc:	6943      	ldr	r3, [r0, #20]
 8019ebe:	b163      	cbz	r3, 8019eda <coap_pdu_resize+0x2a>
 8019ec0:	428b      	cmp	r3, r1
 8019ec2:	d20a      	bcs.n	8019eda <coap_pdu_resize+0x2a>
      coap_log(LOG_WARNING, "coap_pdu_resize: pdu too big\n");
 8019ec4:	f7fb f88e 	bl	8014fe4 <coap_get_log_level>
 8019ec8:	2803      	cmp	r0, #3
 8019eca:	d801      	bhi.n	8019ed0 <coap_pdu_resize+0x20>
      return 0;
 8019ecc:	2000      	movs	r0, #0
      pdu->data = NULL;
#endif
  }
  pdu->alloc_size = new_size;
  return 1;
}
 8019ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      coap_log(LOG_WARNING, "coap_pdu_resize: pdu too big\n");
 8019ed0:	4914      	ldr	r1, [pc, #80]	; (8019f24 <coap_pdu_resize+0x74>)
 8019ed2:	2004      	movs	r0, #4
 8019ed4:	f7fb f8f0 	bl	80150b8 <coap_log_impl>
 8019ed8:	e7f8      	b.n	8019ecc <coap_pdu_resize+0x1c>
    if (pdu->data != NULL) {
 8019eda:	e9d5 3606 	ldrd	r3, r6, [r5, #24]
 8019ede:	b146      	cbz	r6, 8019ef2 <coap_pdu_resize+0x42>
      assert(pdu->data > pdu->token);
 8019ee0:	429e      	cmp	r6, r3
 8019ee2:	d805      	bhi.n	8019ef0 <coap_pdu_resize+0x40>
 8019ee4:	4b10      	ldr	r3, [pc, #64]	; (8019f28 <coap_pdu_resize+0x78>)
 8019ee6:	4a11      	ldr	r2, [pc, #68]	; (8019f2c <coap_pdu_resize+0x7c>)
 8019ee8:	4811      	ldr	r0, [pc, #68]	; (8019f30 <coap_pdu_resize+0x80>)
 8019eea:	21a6      	movs	r1, #166	; 0xa6
 8019eec:	f001 fdc6 	bl	801ba7c <__assert_func>
      offset = pdu->data - pdu->token;
 8019ef0:	1af6      	subs	r6, r6, r3
    new_hdr = (uint8_t*)realloc(pdu->token - pdu->max_hdr_size, new_size + pdu->max_hdr_size);
 8019ef2:	78a8      	ldrb	r0, [r5, #2]
 8019ef4:	19c1      	adds	r1, r0, r7
 8019ef6:	1a18      	subs	r0, r3, r0
 8019ef8:	f002 fe9c 	bl	801cc34 <realloc>
    if (new_hdr == NULL) {
 8019efc:	4604      	mov	r4, r0
 8019efe:	b928      	cbnz	r0, 8019f0c <coap_pdu_resize+0x5c>
      coap_log(LOG_WARNING, "coap_pdu_resize: realloc failed\n");
 8019f00:	f7fb f870 	bl	8014fe4 <coap_get_log_level>
 8019f04:	2803      	cmp	r0, #3
 8019f06:	d9e1      	bls.n	8019ecc <coap_pdu_resize+0x1c>
 8019f08:	490a      	ldr	r1, [pc, #40]	; (8019f34 <coap_pdu_resize+0x84>)
 8019f0a:	e7e2      	b.n	8019ed2 <coap_pdu_resize+0x22>
    pdu->token = new_hdr + pdu->max_hdr_size;
 8019f0c:	78a8      	ldrb	r0, [r5, #2]
 8019f0e:	4404      	add	r4, r0
 8019f10:	61ac      	str	r4, [r5, #24]
    if (offset > 0)
 8019f12:	b126      	cbz	r6, 8019f1e <coap_pdu_resize+0x6e>
      pdu->data = pdu->token + offset;
 8019f14:	4434      	add	r4, r6
 8019f16:	61ec      	str	r4, [r5, #28]
  pdu->alloc_size = new_size;
 8019f18:	60ef      	str	r7, [r5, #12]
  return 1;
 8019f1a:	2001      	movs	r0, #1
 8019f1c:	e7d7      	b.n	8019ece <coap_pdu_resize+0x1e>
      pdu->data = NULL;
 8019f1e:	61ee      	str	r6, [r5, #28]
 8019f20:	e7fa      	b.n	8019f18 <coap_pdu_resize+0x68>
 8019f22:	bf00      	nop
 8019f24:	080311cb 	.word	0x080311cb
 8019f28:	080311e9 	.word	0x080311e9
 8019f2c:	0802ac9a 	.word	0x0802ac9a
 8019f30:	08031101 	.word	0x08031101
 8019f34:	08031200 	.word	0x08031200

08019f38 <coap_pdu_check_resize>:

static int
coap_pdu_check_resize(coap_pdu_t *pdu, size_t size) {
 8019f38:	460a      	mov	r2, r1
  if (size > pdu->alloc_size) {
 8019f3a:	68c1      	ldr	r1, [r0, #12]
 8019f3c:	4291      	cmp	r1, r2
coap_pdu_check_resize(coap_pdu_t *pdu, size_t size) {
 8019f3e:	b508      	push	{r3, lr}
  if (size > pdu->alloc_size) {
 8019f40:	d216      	bcs.n	8019f70 <coap_pdu_check_resize+0x38>
    size_t new_size = max(256, pdu->alloc_size * 2);
 8019f42:	0049      	lsls	r1, r1, #1
 8019f44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8019f48:	bf38      	it	cc
 8019f4a:	f44f 7180 	movcc.w	r1, #256	; 0x100
    while (size > new_size)
 8019f4e:	4291      	cmp	r1, r2
 8019f50:	d30c      	bcc.n	8019f6c <coap_pdu_check_resize+0x34>
      new_size *= 2;
    if (pdu->max_size && new_size > pdu->max_size) {
 8019f52:	6943      	ldr	r3, [r0, #20]
 8019f54:	b123      	cbz	r3, 8019f60 <coap_pdu_check_resize+0x28>
 8019f56:	428b      	cmp	r3, r1
 8019f58:	d202      	bcs.n	8019f60 <coap_pdu_check_resize+0x28>
      new_size = pdu->max_size;
      if (new_size < size)
 8019f5a:	4293      	cmp	r3, r2
 8019f5c:	d30a      	bcc.n	8019f74 <coap_pdu_check_resize+0x3c>
 8019f5e:	4619      	mov	r1, r3
        return 0;
    }
    if (!coap_pdu_resize(pdu, new_size))
 8019f60:	f7ff ffa6 	bl	8019eb0 <coap_pdu_resize>
 8019f64:	3800      	subs	r0, #0
 8019f66:	bf18      	it	ne
 8019f68:	2001      	movne	r0, #1
      return 0;
  }
  return 1;
}
 8019f6a:	bd08      	pop	{r3, pc}
      new_size *= 2;
 8019f6c:	0049      	lsls	r1, r1, #1
 8019f6e:	e7ee      	b.n	8019f4e <coap_pdu_check_resize+0x16>
  return 1;
 8019f70:	2001      	movs	r0, #1
 8019f72:	e7fa      	b.n	8019f6a <coap_pdu_check_resize+0x32>
        return 0;
 8019f74:	2000      	movs	r0, #0
 8019f76:	e7f8      	b.n	8019f6a <coap_pdu_check_resize+0x32>

08019f78 <coap_add_token>:

int
coap_add_token(coap_pdu_t *pdu, size_t len, const uint8_t *data) {
 8019f78:	b570      	push	{r4, r5, r6, lr}
 8019f7a:	460d      	mov	r5, r1
 8019f7c:	4616      	mov	r6, r2
  /* must allow for pdu == NULL as callers may rely on this */
  if (!pdu || len > 8)
 8019f7e:	4604      	mov	r4, r0
 8019f80:	b908      	cbnz	r0, 8019f86 <coap_add_token+0xe>
    return 0;

  if (pdu->used_size) {
    coap_log(LOG_WARNING,
             "coap_add_token: The token must defined first. Token ignored\n");
    return 0;
 8019f82:	2000      	movs	r0, #0
  pdu->max_delta = 0;
  pdu->used_size = len;
  pdu->data = NULL;

  return 1;
}
 8019f84:	bd70      	pop	{r4, r5, r6, pc}
  if (!pdu || len > 8)
 8019f86:	2908      	cmp	r1, #8
 8019f88:	d8fb      	bhi.n	8019f82 <coap_add_token+0xa>
  if (pdu->used_size) {
 8019f8a:	6903      	ldr	r3, [r0, #16]
 8019f8c:	b143      	cbz	r3, 8019fa0 <coap_add_token+0x28>
    coap_log(LOG_WARNING,
 8019f8e:	f7fb f829 	bl	8014fe4 <coap_get_log_level>
 8019f92:	2803      	cmp	r0, #3
 8019f94:	d9f5      	bls.n	8019f82 <coap_add_token+0xa>
 8019f96:	490b      	ldr	r1, [pc, #44]	; (8019fc4 <coap_add_token+0x4c>)
 8019f98:	2004      	movs	r0, #4
 8019f9a:	f7fb f88d 	bl	80150b8 <coap_log_impl>
 8019f9e:	e7f0      	b.n	8019f82 <coap_add_token+0xa>
  if (!coap_pdu_check_resize(pdu, len))
 8019fa0:	f7ff ffca 	bl	8019f38 <coap_pdu_check_resize>
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	d0ec      	beq.n	8019f82 <coap_add_token+0xa>
  pdu->token_length = (uint8_t)len;
 8019fa8:	7125      	strb	r5, [r4, #4]
  if (len)
 8019faa:	b125      	cbz	r5, 8019fb6 <coap_add_token+0x3e>
    memcpy(pdu->token, data, len);
 8019fac:	69a0      	ldr	r0, [r4, #24]
 8019fae:	462a      	mov	r2, r5
 8019fb0:	4631      	mov	r1, r6
 8019fb2:	f002 f945 	bl	801c240 <memcpy>
  pdu->max_delta = 0;
 8019fb6:	2300      	movs	r3, #0
 8019fb8:	8123      	strh	r3, [r4, #8]
  pdu->used_size = len;
 8019fba:	6125      	str	r5, [r4, #16]
  pdu->data = NULL;
 8019fbc:	61e3      	str	r3, [r4, #28]
  return 1;
 8019fbe:	2001      	movs	r0, #1
 8019fc0:	e7e0      	b.n	8019f84 <coap_add_token+0xc>
 8019fc2:	bf00      	nop
 8019fc4:	08031221 	.word	0x08031221

08019fc8 <coap_add_option>:

/* FIXME: de-duplicate code with coap_add_option_later */
size_t
coap_add_option(coap_pdu_t *pdu, uint16_t type, size_t len, const uint8_t *data) {
 8019fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fca:	460e      	mov	r6, r1
 8019fcc:	b085      	sub	sp, #20
 8019fce:	4617      	mov	r7, r2
  size_t optsize;
  coap_opt_t *opt;

  assert(pdu);
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	b928      	cbnz	r0, 8019fe0 <coap_add_option+0x18>
 8019fd4:	4b1e      	ldr	r3, [pc, #120]	; (801a050 <coap_add_option+0x88>)
 8019fd6:	4a1f      	ldr	r2, [pc, #124]	; (801a054 <coap_add_option+0x8c>)
 8019fd8:	481f      	ldr	r0, [pc, #124]	; (801a058 <coap_add_option+0x90>)
 8019fda:	21e9      	movs	r1, #233	; 0xe9
 8019fdc:	f001 fd4e 	bl	801ba7c <__assert_func>
  pdu->data = NULL;
 8019fe0:	2500      	movs	r5, #0
 8019fe2:	61c5      	str	r5, [r0, #28]

  if (type < pdu->max_delta) {
 8019fe4:	8900      	ldrh	r0, [r0, #8]
 8019fe6:	4288      	cmp	r0, r1
 8019fe8:	d90c      	bls.n	801a004 <coap_add_option+0x3c>
    coap_log(LOG_WARNING,
 8019fea:	f7fa fffb 	bl	8014fe4 <coap_get_log_level>
 8019fee:	2803      	cmp	r0, #3
 8019ff0:	d803      	bhi.n	8019ffa <coap_add_option+0x32>
             "coap_add_option: options are not in correct order\n");
    return 0;
 8019ff2:	2500      	movs	r5, #0
    pdu->max_delta = type;
    pdu->used_size += optsize;
  }

  return optsize;
}
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	b005      	add	sp, #20
 8019ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    coap_log(LOG_WARNING,
 8019ffa:	4918      	ldr	r1, [pc, #96]	; (801a05c <coap_add_option+0x94>)
    coap_log(LOG_WARNING, "coap_add_option: cannot add option\n");
 8019ffc:	2004      	movs	r0, #4
 8019ffe:	f7fb f85b 	bl	80150b8 <coap_log_impl>
 801a002:	e7f7      	b.n	8019ff4 <coap_add_option+0x2c>
      pdu->used_size + coap_opt_encode_size(type - pdu->max_delta, len)))
 801a004:	1a08      	subs	r0, r1, r0
 801a006:	b280      	uxth	r0, r0
 801a008:	4611      	mov	r1, r2
 801a00a:	6925      	ldr	r5, [r4, #16]
 801a00c:	9303      	str	r3, [sp, #12]
 801a00e:	f7ff fe1f 	bl	8019c50 <coap_opt_encode_size>
  if (!coap_pdu_check_resize(pdu,
 801a012:	1829      	adds	r1, r5, r0
 801a014:	4620      	mov	r0, r4
 801a016:	f7ff ff8f 	bl	8019f38 <coap_pdu_check_resize>
 801a01a:	2800      	cmp	r0, #0
 801a01c:	d0e9      	beq.n	8019ff2 <coap_add_option+0x2a>
  optsize = coap_opt_encode(opt, pdu->alloc_size - pdu->used_size,
 801a01e:	8922      	ldrh	r2, [r4, #8]
  opt = pdu->token + pdu->used_size;
 801a020:	6925      	ldr	r5, [r4, #16]
  optsize = coap_opt_encode(opt, pdu->alloc_size - pdu->used_size,
 801a022:	68e1      	ldr	r1, [r4, #12]
  opt = pdu->token + pdu->used_size;
 801a024:	69a0      	ldr	r0, [r4, #24]
  optsize = coap_opt_encode(opt, pdu->alloc_size - pdu->used_size,
 801a026:	9b03      	ldr	r3, [sp, #12]
 801a028:	9700      	str	r7, [sp, #0]
 801a02a:	1ab2      	subs	r2, r6, r2
 801a02c:	1b49      	subs	r1, r1, r5
 801a02e:	4428      	add	r0, r5
 801a030:	b292      	uxth	r2, r2
 801a032:	f7ff fe1f 	bl	8019c74 <coap_opt_encode>
  if (!optsize) {
 801a036:	4605      	mov	r5, r0
 801a038:	b928      	cbnz	r0, 801a046 <coap_add_option+0x7e>
    coap_log(LOG_WARNING, "coap_add_option: cannot add option\n");
 801a03a:	f7fa ffd3 	bl	8014fe4 <coap_get_log_level>
 801a03e:	2803      	cmp	r0, #3
 801a040:	d9d7      	bls.n	8019ff2 <coap_add_option+0x2a>
 801a042:	4907      	ldr	r1, [pc, #28]	; (801a060 <coap_add_option+0x98>)
 801a044:	e7da      	b.n	8019ffc <coap_add_option+0x34>
    pdu->used_size += optsize;
 801a046:	6923      	ldr	r3, [r4, #16]
    pdu->max_delta = type;
 801a048:	8126      	strh	r6, [r4, #8]
    pdu->used_size += optsize;
 801a04a:	4403      	add	r3, r0
 801a04c:	6123      	str	r3, [r4, #16]
  return optsize;
 801a04e:	e7d1      	b.n	8019ff4 <coap_add_option+0x2c>
 801a050:	0802eead 	.word	0x0802eead
 801a054:	0802acaa 	.word	0x0802acaa
 801a058:	08031101 	.word	0x08031101
 801a05c:	0803125e 	.word	0x0803125e
 801a060:	08031291 	.word	0x08031291

0801a064 <coap_add_data_after>:
    return payload != NULL;
  }
}

uint8_t *
coap_add_data_after(coap_pdu_t *pdu, size_t len) {
 801a064:	b570      	push	{r4, r5, r6, lr}
 801a066:	460e      	mov	r6, r1
  assert(pdu);
 801a068:	4604      	mov	r4, r0
 801a06a:	b930      	cbnz	r0, 801a07a <coap_add_data_after+0x16>
 801a06c:	4b11      	ldr	r3, [pc, #68]	; (801a0b4 <coap_add_data_after+0x50>)
 801a06e:	4a12      	ldr	r2, [pc, #72]	; (801a0b8 <coap_add_data_after+0x54>)
 801a070:	f240 113b 	movw	r1, #315	; 0x13b
  assert(pdu->data == NULL);
 801a074:	4811      	ldr	r0, [pc, #68]	; (801a0bc <coap_add_data_after+0x58>)
 801a076:	f001 fd01 	bl	801ba7c <__assert_func>
 801a07a:	69c5      	ldr	r5, [r0, #28]
 801a07c:	b125      	cbz	r5, 801a088 <coap_add_data_after+0x24>
 801a07e:	4b10      	ldr	r3, [pc, #64]	; (801a0c0 <coap_add_data_after+0x5c>)
 801a080:	4a0d      	ldr	r2, [pc, #52]	; (801a0b8 <coap_add_data_after+0x54>)
 801a082:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801a086:	e7f5      	b.n	801a074 <coap_add_data_after+0x10>

  pdu->data = NULL;

  if (len == 0)
 801a088:	b189      	cbz	r1, 801a0ae <coap_add_data_after+0x4a>
    return NULL;

  if (!coap_pdu_resize(pdu, pdu->used_size + len + 1))
 801a08a:	6903      	ldr	r3, [r0, #16]
 801a08c:	3101      	adds	r1, #1
 801a08e:	4419      	add	r1, r3
 801a090:	f7ff ff0e 	bl	8019eb0 <coap_pdu_resize>
 801a094:	b158      	cbz	r0, 801a0ae <coap_add_data_after+0x4a>
    return 0;
  pdu->token[pdu->used_size++] = COAP_PAYLOAD_START;
 801a096:	6923      	ldr	r3, [r4, #16]
 801a098:	69a2      	ldr	r2, [r4, #24]
 801a09a:	1c59      	adds	r1, r3, #1
 801a09c:	6121      	str	r1, [r4, #16]
 801a09e:	21ff      	movs	r1, #255	; 0xff
 801a0a0:	54d1      	strb	r1, [r2, r3]
  pdu->data = pdu->token + pdu->used_size;
 801a0a2:	6921      	ldr	r1, [r4, #16]
 801a0a4:	69a5      	ldr	r5, [r4, #24]
 801a0a6:	440d      	add	r5, r1
  pdu->used_size += len;
 801a0a8:	4431      	add	r1, r6
  pdu->data = pdu->token + pdu->used_size;
 801a0aa:	61e5      	str	r5, [r4, #28]
  pdu->used_size += len;
 801a0ac:	6121      	str	r1, [r4, #16]
  return pdu->data;
}
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	bd70      	pop	{r4, r5, r6, pc}
 801a0b2:	bf00      	nop
 801a0b4:	0802eead 	.word	0x0802eead
 801a0b8:	0802acd0 	.word	0x0802acd0
 801a0bc:	08031101 	.word	0x08031101
 801a0c0:	080312b5 	.word	0x080312b5

0801a0c4 <coap_add_data>:
coap_add_data(coap_pdu_t *pdu, size_t len, const uint8_t *data) {
 801a0c4:	b570      	push	{r4, r5, r6, lr}
 801a0c6:	4616      	mov	r6, r2
  if (len == 0) {
 801a0c8:	460d      	mov	r5, r1
 801a0ca:	b159      	cbz	r1, 801a0e4 <coap_add_data+0x20>
    uint8_t *payload = coap_add_data_after(pdu, len);
 801a0cc:	f7ff ffca 	bl	801a064 <coap_add_data_after>
    if (payload != NULL)
 801a0d0:	4604      	mov	r4, r0
 801a0d2:	b118      	cbz	r0, 801a0dc <coap_add_data+0x18>
      memcpy(payload, data, len);
 801a0d4:	462a      	mov	r2, r5
 801a0d6:	4631      	mov	r1, r6
 801a0d8:	f002 f8b2 	bl	801c240 <memcpy>
    return payload != NULL;
 801a0dc:	1e20      	subs	r0, r4, #0
 801a0de:	bf18      	it	ne
 801a0e0:	2001      	movne	r0, #1
}
 801a0e2:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 801a0e4:	2001      	movs	r0, #1
 801a0e6:	e7fc      	b.n	801a0e2 <coap_add_data+0x1e>

0801a0e8 <coap_get_data>:

int
coap_get_data(const coap_pdu_t *pdu, size_t *len, uint8_t **data) {
 801a0e8:	b508      	push	{r3, lr}
  assert(pdu);
 801a0ea:	b930      	cbnz	r0, 801a0fa <coap_get_data+0x12>
 801a0ec:	4b0f      	ldr	r3, [pc, #60]	; (801a12c <coap_get_data+0x44>)
 801a0ee:	4a10      	ldr	r2, [pc, #64]	; (801a130 <coap_get_data+0x48>)
 801a0f0:	f240 114d 	movw	r1, #333	; 0x14d
  assert(len);
 801a0f4:	480f      	ldr	r0, [pc, #60]	; (801a134 <coap_get_data+0x4c>)
 801a0f6:	f001 fcc1 	bl	801ba7c <__assert_func>
 801a0fa:	b921      	cbnz	r1, 801a106 <coap_get_data+0x1e>
 801a0fc:	4b0e      	ldr	r3, [pc, #56]	; (801a138 <coap_get_data+0x50>)
 801a0fe:	4a0c      	ldr	r2, [pc, #48]	; (801a130 <coap_get_data+0x48>)
 801a100:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 801a104:	e7f6      	b.n	801a0f4 <coap_get_data+0xc>
  assert(data);
 801a106:	b922      	cbnz	r2, 801a112 <coap_get_data+0x2a>
 801a108:	4b0c      	ldr	r3, [pc, #48]	; (801a13c <coap_get_data+0x54>)
 801a10a:	4a09      	ldr	r2, [pc, #36]	; (801a130 <coap_get_data+0x48>)
 801a10c:	f240 114f 	movw	r1, #335	; 0x14f
 801a110:	e7f0      	b.n	801a0f4 <coap_get_data+0xc>

  *data = pdu->data;
 801a112:	69c3      	ldr	r3, [r0, #28]
 801a114:	6013      	str	r3, [r2, #0]
  if(pdu->data == NULL) {
 801a116:	b133      	cbz	r3, 801a126 <coap_get_data+0x3e>
     *len = 0;
     return 0;
  }

  *len = pdu->used_size - (pdu->data - pdu->token);
 801a118:	6982      	ldr	r2, [r0, #24]
 801a11a:	1a9b      	subs	r3, r3, r2
 801a11c:	6902      	ldr	r2, [r0, #16]

  return 1;
 801a11e:	2001      	movs	r0, #1
  *len = pdu->used_size - (pdu->data - pdu->token);
 801a120:	1ad3      	subs	r3, r2, r3
  return 1;
 801a122:	600b      	str	r3, [r1, #0]
}
 801a124:	bd08      	pop	{r3, pc}
     return 0;
 801a126:	4618      	mov	r0, r3
 801a128:	e7fb      	b.n	801a122 <coap_get_data+0x3a>
 801a12a:	bf00      	nop
 801a12c:	0802eead 	.word	0x0802eead
 801a130:	0802ace4 	.word	0x0802ace4
 801a134:	08031101 	.word	0x08031101
 801a138:	0802e4b1 	.word	0x0802e4b1
 801a13c:	0802d748 	.word	0x0802d748

0801a140 <coap_response_phrase>:
};

const char *
coap_response_phrase(unsigned char code) {
  int i;
  for (i = 0; coap_error[i].code; ++i) {
 801a140:	4a07      	ldr	r2, [pc, #28]	; (801a160 <coap_response_phrase+0x20>)
 801a142:	2100      	movs	r1, #0
 801a144:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 801a148:	b90b      	cbnz	r3, 801a14e <coap_response_phrase+0xe>
    if (coap_error[i].code == code)
      return coap_error[i].phrase;
  }
  return NULL;
 801a14a:	4618      	mov	r0, r3
}
 801a14c:	4770      	bx	lr
    if (coap_error[i].code == code)
 801a14e:	4283      	cmp	r3, r0
 801a150:	d103      	bne.n	801a15a <coap_response_phrase+0x1a>
      return coap_error[i].phrase;
 801a152:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a156:	6850      	ldr	r0, [r2, #4]
 801a158:	4770      	bx	lr
  for (i = 0; coap_error[i].code; ++i) {
 801a15a:	3101      	adds	r1, #1
 801a15c:	e7f2      	b.n	801a144 <coap_response_phrase+0x4>
 801a15e:	bf00      	nop
 801a160:	20000054 	.word	0x20000054

0801a164 <coap_pdu_parse_header_size>:
  return optsize;
}

size_t
coap_pdu_parse_header_size(coap_proto_t proto,
                           const uint8_t *data) {
 801a164:	b508      	push	{r3, lr}
  assert(data);
 801a166:	b931      	cbnz	r1, 801a176 <coap_pdu_parse_header_size+0x12>
 801a168:	4b0f      	ldr	r3, [pc, #60]	; (801a1a8 <coap_pdu_parse_header_size+0x44>)
 801a16a:	4a10      	ldr	r2, [pc, #64]	; (801a1ac <coap_pdu_parse_header_size+0x48>)
 801a16c:	4810      	ldr	r0, [pc, #64]	; (801a1b0 <coap_pdu_parse_header_size+0x4c>)
 801a16e:	f240 11a5 	movw	r1, #421	; 0x1a5
 801a172:	f001 fc83 	bl	801ba7c <__assert_func>
  size_t header_size = 0;

  if (proto == COAP_PROTO_TCP || proto==COAP_PROTO_TLS) {
 801a176:	1ec3      	subs	r3, r0, #3
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d80b      	bhi.n	801a194 <coap_pdu_parse_header_size+0x30>
    uint8_t len = *data >> 4;
 801a17c:	780a      	ldrb	r2, [r1, #0]
    if (len < 13)
 801a17e:	2acf      	cmp	r2, #207	; 0xcf
    uint8_t len = *data >> 4;
 801a180:	ea4f 1312 	mov.w	r3, r2, lsr #4
    if (len < 13)
 801a184:	d90c      	bls.n	801a1a0 <coap_pdu_parse_header_size+0x3c>
      header_size = 2;
    else if (len==13)
 801a186:	2b0d      	cmp	r3, #13
 801a188:	d00c      	beq.n	801a1a4 <coap_pdu_parse_header_size+0x40>
      header_size = 3;
    else if (len==14)
 801a18a:	2b0e      	cmp	r3, #14
      header_size = 4;
    else
      header_size = 6;
 801a18c:	bf0c      	ite	eq
 801a18e:	2004      	moveq	r0, #4
 801a190:	2006      	movne	r0, #6
  } else if (proto == COAP_PROTO_UDP || proto==COAP_PROTO_DTLS) {
    header_size = 4;
  }

  return header_size;
}
 801a192:	bd08      	pop	{r3, pc}
  } else if (proto == COAP_PROTO_UDP || proto==COAP_PROTO_DTLS) {
 801a194:	3801      	subs	r0, #1
  size_t header_size = 0;
 801a196:	2801      	cmp	r0, #1
 801a198:	bf94      	ite	ls
 801a19a:	2004      	movls	r0, #4
 801a19c:	2000      	movhi	r0, #0
 801a19e:	e7f8      	b.n	801a192 <coap_pdu_parse_header_size+0x2e>
      header_size = 2;
 801a1a0:	2002      	movs	r0, #2
 801a1a2:	e7f6      	b.n	801a192 <coap_pdu_parse_header_size+0x2e>
      header_size = 3;
 801a1a4:	2003      	movs	r0, #3
 801a1a6:	e7f4      	b.n	801a192 <coap_pdu_parse_header_size+0x2e>
 801a1a8:	0802d748 	.word	0x0802d748
 801a1ac:	0802acf2 	.word	0x0802acf2
 801a1b0:	08031101 	.word	0x08031101

0801a1b4 <coap_pdu_parse_size>:

size_t
coap_pdu_parse_size(coap_proto_t proto,
                    const uint8_t *data,
                    size_t length) {
 801a1b4:	b538      	push	{r3, r4, r5, lr}
 801a1b6:	4615      	mov	r5, r2
  assert(data);
 801a1b8:	460c      	mov	r4, r1
 801a1ba:	b931      	cbnz	r1, 801a1ca <coap_pdu_parse_size+0x16>
 801a1bc:	4b23      	ldr	r3, [pc, #140]	; (801a24c <coap_pdu_parse_size+0x98>)
 801a1be:	4a24      	ldr	r2, [pc, #144]	; (801a250 <coap_pdu_parse_size+0x9c>)
 801a1c0:	f240 11bd 	movw	r1, #445	; 0x1bd
  assert(proto == COAP_PROTO_TCP || proto == COAP_PROTO_TLS);
 801a1c4:	4823      	ldr	r0, [pc, #140]	; (801a254 <coap_pdu_parse_size+0xa0>)
 801a1c6:	f001 fc59 	bl	801ba7c <__assert_func>
 801a1ca:	1ec3      	subs	r3, r0, #3
 801a1cc:	2b01      	cmp	r3, #1
 801a1ce:	d904      	bls.n	801a1da <coap_pdu_parse_size+0x26>
 801a1d0:	4b21      	ldr	r3, [pc, #132]	; (801a258 <coap_pdu_parse_size+0xa4>)
 801a1d2:	4a1f      	ldr	r2, [pc, #124]	; (801a250 <coap_pdu_parse_size+0x9c>)
 801a1d4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 801a1d8:	e7f4      	b.n	801a1c4 <coap_pdu_parse_size+0x10>
  assert(coap_pdu_parse_header_size(proto, data) <= length );
 801a1da:	f7ff ffc3 	bl	801a164 <coap_pdu_parse_header_size>
 801a1de:	42a8      	cmp	r0, r5
 801a1e0:	d904      	bls.n	801a1ec <coap_pdu_parse_size+0x38>
 801a1e2:	4b1e      	ldr	r3, [pc, #120]	; (801a25c <coap_pdu_parse_size+0xa8>)
 801a1e4:	4a1a      	ldr	r2, [pc, #104]	; (801a250 <coap_pdu_parse_size+0x9c>)
 801a1e6:	f240 11bf 	movw	r1, #447	; 0x1bf
 801a1ea:	e7eb      	b.n	801a1c4 <coap_pdu_parse_size+0x10>

  size_t size = 0;

  if ((proto == COAP_PROTO_TCP || proto==COAP_PROTO_TLS) && length >= 1) {
 801a1ec:	b145      	cbz	r5, 801a200 <coap_pdu_parse_size+0x4c>
    uint8_t len = *data >> 4;
 801a1ee:	7821      	ldrb	r1, [r4, #0]
    if (len < 13) {
 801a1f0:	29cf      	cmp	r1, #207	; 0xcf
    uint8_t len = *data >> 4;
 801a1f2:	ea4f 1311 	mov.w	r3, r1, lsr #4
    if (len < 13) {
 801a1f6:	d805      	bhi.n	801a204 <coap_pdu_parse_size+0x50>
      size = len;
 801a1f8:	461a      	mov	r2, r3
          size = ((size_t)data[1] << 24) + ((size_t)data[2] << 16)
               + ((size_t)data[3] << 8) + data[4] + COAP_MESSAGE_SIZE_OFFSET_TCP32;
        }
      }
    }
    size += data[0] & 0x0f;
 801a1fa:	f001 050f 	and.w	r5, r1, #15
 801a1fe:	4415      	add	r5, r2
  }

  return size;
}
 801a200:	4628      	mov	r0, r5
 801a202:	bd38      	pop	{r3, r4, r5, pc}
    } else if (length >= 2) {
 801a204:	2d01      	cmp	r5, #1
 801a206:	d91e      	bls.n	801a246 <coap_pdu_parse_size+0x92>
      if (len==13) {
 801a208:	2b0d      	cmp	r3, #13
 801a20a:	d102      	bne.n	801a212 <coap_pdu_parse_size+0x5e>
        size = (size_t)data[1] + COAP_MESSAGE_SIZE_OFFSET_TCP8;
 801a20c:	7862      	ldrb	r2, [r4, #1]
 801a20e:	320d      	adds	r2, #13
 801a210:	e7f3      	b.n	801a1fa <coap_pdu_parse_size+0x46>
      } else if (length >= 3) {
 801a212:	2d02      	cmp	r5, #2
 801a214:	d017      	beq.n	801a246 <coap_pdu_parse_size+0x92>
        if (len==14) {
 801a216:	2b0e      	cmp	r3, #14
 801a218:	d106      	bne.n	801a228 <coap_pdu_parse_size+0x74>
          size = ((size_t)data[1] << 8) + data[2] + COAP_MESSAGE_SIZE_OFFSET_TCP16;
 801a21a:	78a2      	ldrb	r2, [r4, #2]
 801a21c:	7863      	ldrb	r3, [r4, #1]
 801a21e:	f202 120d 	addw	r2, r2, #269	; 0x10d
          size = ((size_t)data[1] << 24) + ((size_t)data[2] << 16)
 801a222:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 801a226:	e7e8      	b.n	801a1fa <coap_pdu_parse_size+0x46>
        } else if (length >= 5) {
 801a228:	2d04      	cmp	r5, #4
 801a22a:	d90c      	bls.n	801a246 <coap_pdu_parse_size+0x92>
               + ((size_t)data[3] << 8) + data[4] + COAP_MESSAGE_SIZE_OFFSET_TCP32;
 801a22c:	7923      	ldrb	r3, [r4, #4]
          size = ((size_t)data[1] << 24) + ((size_t)data[2] << 16)
 801a22e:	7862      	ldrb	r2, [r4, #1]
 801a230:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a234:	f203 130d 	addw	r3, r3, #269	; 0x10d
 801a238:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 801a23c:	78a3      	ldrb	r3, [r4, #2]
 801a23e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
               + ((size_t)data[3] << 8) + data[4] + COAP_MESSAGE_SIZE_OFFSET_TCP32;
 801a242:	78e3      	ldrb	r3, [r4, #3]
 801a244:	e7ed      	b.n	801a222 <coap_pdu_parse_size+0x6e>
  size_t size = 0;
 801a246:	2200      	movs	r2, #0
 801a248:	e7d7      	b.n	801a1fa <coap_pdu_parse_size+0x46>
 801a24a:	bf00      	nop
 801a24c:	0802d748 	.word	0x0802d748
 801a250:	0802ad0d 	.word	0x0802ad0d
 801a254:	08031101 	.word	0x08031101
 801a258:	080312c7 	.word	0x080312c7
 801a25c:	080312fa 	.word	0x080312fa

0801a260 <coap_pdu_parse_header>:

int
coap_pdu_parse_header(coap_pdu_t *pdu, coap_proto_t proto) {
 801a260:	b538      	push	{r3, r4, r5, lr}
 801a262:	4604      	mov	r4, r0
  uint8_t *hdr = pdu->token - pdu->hdr_size;
  if (proto == COAP_PROTO_UDP || proto == COAP_PROTO_DTLS) {
 801a264:	1e4d      	subs	r5, r1, #1
  uint8_t *hdr = pdu->token - pdu->hdr_size;
 801a266:	6980      	ldr	r0, [r0, #24]
 801a268:	78e2      	ldrb	r2, [r4, #3]
  if (proto == COAP_PROTO_UDP || proto == COAP_PROTO_DTLS) {
 801a26a:	2d01      	cmp	r5, #1
  uint8_t *hdr = pdu->token - pdu->hdr_size;
 801a26c:	eba0 0302 	sub.w	r3, r0, r2
  if (proto == COAP_PROTO_UDP || proto == COAP_PROTO_DTLS) {
 801a270:	d834      	bhi.n	801a2dc <coap_pdu_parse_header+0x7c>
    assert(pdu->hdr_size == 4);
 801a272:	2a04      	cmp	r2, #4
 801a274:	d006      	beq.n	801a284 <coap_pdu_parse_header+0x24>
 801a276:	4b28      	ldr	r3, [pc, #160]	; (801a318 <coap_pdu_parse_header+0xb8>)
 801a278:	4a28      	ldr	r2, [pc, #160]	; (801a31c <coap_pdu_parse_header+0xbc>)
 801a27a:	f240 11dd 	movw	r1, #477	; 0x1dd
    pdu->type = (hdr[0] >> 4) & 0x03;
    pdu->token_length = hdr[0] & 0x0f;
    pdu->code = hdr[1];
    pdu->tid = (uint16_t)hdr[2] << 8 | hdr[3];
  } else if (proto == COAP_PROTO_TCP || proto == COAP_PROTO_TLS) {
    assert(pdu->hdr_size >= 2 && pdu->hdr_size <= 6);
 801a27e:	4828      	ldr	r0, [pc, #160]	; (801a320 <coap_pdu_parse_header+0xc0>)
 801a280:	f001 fbfc 	bl	801ba7c <__assert_func>
    if ((hdr[0] >> 6) != COAP_DEFAULT_VERSION) {
 801a284:	781a      	ldrb	r2, [r3, #0]
 801a286:	0991      	lsrs	r1, r2, #6
 801a288:	2901      	cmp	r1, #1
 801a28a:	d00a      	beq.n	801a2a2 <coap_pdu_parse_header+0x42>
      coap_log(LOG_DEBUG, "coap_pdu_parse: UDP version not supported\n");
 801a28c:	f7fa feaa 	bl	8014fe4 <coap_get_log_level>
 801a290:	2806      	cmp	r0, #6
 801a292:	d801      	bhi.n	801a298 <coap_pdu_parse_header+0x38>
  }
  if (pdu->token_length > pdu->alloc_size) {
    /* Invalid PDU provided - not wise to assert here though */
    coap_log(LOG_DEBUG, "coap_pdu_parse: PDU header token size broken\n");
    pdu->token_length = (uint8_t)pdu->alloc_size;
    return 0;
 801a294:	2000      	movs	r0, #0
  }
  return 1;
}
 801a296:	bd38      	pop	{r3, r4, r5, pc}
      coap_log(LOG_DEBUG, "coap_pdu_parse: UDP version not supported\n");
 801a298:	4922      	ldr	r1, [pc, #136]	; (801a324 <coap_pdu_parse_header+0xc4>)
    coap_log(LOG_DEBUG, "coap_pdu_parse: unsupported protocol\n");
 801a29a:	2007      	movs	r0, #7
 801a29c:	f7fa ff0c 	bl	80150b8 <coap_log_impl>
 801a2a0:	e7f8      	b.n	801a294 <coap_pdu_parse_header+0x34>
    pdu->type = (hdr[0] >> 4) & 0x03;
 801a2a2:	f3c2 1201 	ubfx	r2, r2, #4, #2
 801a2a6:	7022      	strb	r2, [r4, #0]
    pdu->token_length = hdr[0] & 0x0f;
 801a2a8:	781a      	ldrb	r2, [r3, #0]
 801a2aa:	f002 020f 	and.w	r2, r2, #15
 801a2ae:	7122      	strb	r2, [r4, #4]
    pdu->code = hdr[1];
 801a2b0:	785a      	ldrb	r2, [r3, #1]
 801a2b2:	7062      	strb	r2, [r4, #1]
    pdu->tid = (uint16_t)hdr[2] << 8 | hdr[3];
 801a2b4:	789a      	ldrb	r2, [r3, #2]
 801a2b6:	78db      	ldrb	r3, [r3, #3]
 801a2b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a2bc:	80e3      	strh	r3, [r4, #6]
  if (pdu->token_length > pdu->alloc_size) {
 801a2be:	7922      	ldrb	r2, [r4, #4]
 801a2c0:	68e3      	ldr	r3, [r4, #12]
 801a2c2:	429a      	cmp	r2, r3
 801a2c4:	d926      	bls.n	801a314 <coap_pdu_parse_header+0xb4>
    coap_log(LOG_DEBUG, "coap_pdu_parse: PDU header token size broken\n");
 801a2c6:	f7fa fe8d 	bl	8014fe4 <coap_get_log_level>
 801a2ca:	2806      	cmp	r0, #6
 801a2cc:	d903      	bls.n	801a2d6 <coap_pdu_parse_header+0x76>
 801a2ce:	4916      	ldr	r1, [pc, #88]	; (801a328 <coap_pdu_parse_header+0xc8>)
 801a2d0:	2007      	movs	r0, #7
 801a2d2:	f7fa fef1 	bl	80150b8 <coap_log_impl>
    pdu->token_length = (uint8_t)pdu->alloc_size;
 801a2d6:	68e3      	ldr	r3, [r4, #12]
 801a2d8:	7123      	strb	r3, [r4, #4]
 801a2da:	e7db      	b.n	801a294 <coap_pdu_parse_header+0x34>
  } else if (proto == COAP_PROTO_TCP || proto == COAP_PROTO_TLS) {
 801a2dc:	3903      	subs	r1, #3
 801a2de:	2901      	cmp	r1, #1
 801a2e0:	d812      	bhi.n	801a308 <coap_pdu_parse_header+0xa8>
    assert(pdu->hdr_size >= 2 && pdu->hdr_size <= 6);
 801a2e2:	3a02      	subs	r2, #2
 801a2e4:	2a04      	cmp	r2, #4
 801a2e6:	d904      	bls.n	801a2f2 <coap_pdu_parse_header+0x92>
 801a2e8:	4b10      	ldr	r3, [pc, #64]	; (801a32c <coap_pdu_parse_header+0xcc>)
 801a2ea:	4a0c      	ldr	r2, [pc, #48]	; (801a31c <coap_pdu_parse_header+0xbc>)
 801a2ec:	f240 11e7 	movw	r1, #487	; 0x1e7
 801a2f0:	e7c5      	b.n	801a27e <coap_pdu_parse_header+0x1e>
    pdu->type = COAP_MESSAGE_CON;
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	7022      	strb	r2, [r4, #0]
    pdu->token_length = hdr[0] & 0x0f;
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	f003 030f 	and.w	r3, r3, #15
 801a2fc:	7123      	strb	r3, [r4, #4]
    pdu->code = hdr[pdu->hdr_size-1];
 801a2fe:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801a302:	7063      	strb	r3, [r4, #1]
    pdu->tid = 0;
 801a304:	80e2      	strh	r2, [r4, #6]
 801a306:	e7da      	b.n	801a2be <coap_pdu_parse_header+0x5e>
    coap_log(LOG_DEBUG, "coap_pdu_parse: unsupported protocol\n");
 801a308:	f7fa fe6c 	bl	8014fe4 <coap_get_log_level>
 801a30c:	2806      	cmp	r0, #6
 801a30e:	d9c1      	bls.n	801a294 <coap_pdu_parse_header+0x34>
 801a310:	4907      	ldr	r1, [pc, #28]	; (801a330 <coap_pdu_parse_header+0xd0>)
 801a312:	e7c2      	b.n	801a29a <coap_pdu_parse_header+0x3a>
  return 1;
 801a314:	2001      	movs	r0, #1
 801a316:	e7be      	b.n	801a296 <coap_pdu_parse_header+0x36>
 801a318:	0803132c 	.word	0x0803132c
 801a31c:	0802ad21 	.word	0x0802ad21
 801a320:	08031101 	.word	0x08031101
 801a324:	0803133f 	.word	0x0803133f
 801a328:	080313b9 	.word	0x080313b9
 801a32c:	0803136a 	.word	0x0803136a
 801a330:	08031393 	.word	0x08031393

0801a334 <coap_pdu_parse_opt>:

int
coap_pdu_parse_opt(coap_pdu_t *pdu) {
 801a334:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* sanity checks */
  if (pdu->code == 0) {
 801a336:	7843      	ldrb	r3, [r0, #1]
 801a338:	6906      	ldr	r6, [r0, #16]
coap_pdu_parse_opt(coap_pdu_t *pdu) {
 801a33a:	b085      	sub	sp, #20
 801a33c:	4605      	mov	r5, r0
  if (pdu->code == 0) {
 801a33e:	b973      	cbnz	r3, 801a35e <coap_pdu_parse_opt+0x2a>
    if (pdu->used_size != 0 || pdu->token_length) {
 801a340:	b90e      	cbnz	r6, 801a346 <coap_pdu_parse_opt+0x12>
 801a342:	7902      	ldrb	r2, [r0, #4]
 801a344:	b15a      	cbz	r2, 801a35e <coap_pdu_parse_opt+0x2a>
      coap_log(LOG_DEBUG, "coap_pdu_parse: empty message is not empty\n");
 801a346:	f7fa fe4d 	bl	8014fe4 <coap_get_log_level>
 801a34a:	2806      	cmp	r0, #6
 801a34c:	d802      	bhi.n	801a354 <coap_pdu_parse_opt+0x20>
    if (length > 0) {
      assert(*opt == COAP_PAYLOAD_START);
      opt++; length--;

      if (length == 0) {
        coap_log(LOG_DEBUG,
 801a34e:	2000      	movs	r0, #0
    else
      pdu->data = NULL;
  }

  return 1;
}
 801a350:	b005      	add	sp, #20
 801a352:	bdf0      	pop	{r4, r5, r6, r7, pc}
      coap_log(LOG_DEBUG, "coap_pdu_parse: empty message is not empty\n");
 801a354:	4920      	ldr	r1, [pc, #128]	; (801a3d8 <coap_pdu_parse_opt+0xa4>)
        coap_log(LOG_DEBUG,
 801a356:	2007      	movs	r0, #7
 801a358:	f7fa feae 	bl	80150b8 <coap_log_impl>
 801a35c:	e7f7      	b.n	801a34e <coap_pdu_parse_opt+0x1a>
  if (pdu->token_length > pdu->used_size || pdu->token_length > 8) {
 801a35e:	7929      	ldrb	r1, [r5, #4]
 801a360:	42b1      	cmp	r1, r6
 801a362:	d801      	bhi.n	801a368 <coap_pdu_parse_opt+0x34>
 801a364:	2908      	cmp	r1, #8
 801a366:	d905      	bls.n	801a374 <coap_pdu_parse_opt+0x40>
    coap_log(LOG_DEBUG, "coap_pdu_parse: invalid Token\n");
 801a368:	f7fa fe3c 	bl	8014fe4 <coap_get_log_level>
 801a36c:	2806      	cmp	r0, #6
 801a36e:	d9ee      	bls.n	801a34e <coap_pdu_parse_opt+0x1a>
 801a370:	491a      	ldr	r1, [pc, #104]	; (801a3dc <coap_pdu_parse_opt+0xa8>)
 801a372:	e7f0      	b.n	801a356 <coap_pdu_parse_opt+0x22>
  if (pdu->code == 0) {
 801a374:	b91b      	cbnz	r3, 801a37e <coap_pdu_parse_opt+0x4a>
    pdu->used_size = 0;
 801a376:	612b      	str	r3, [r5, #16]
    pdu->data = NULL;
 801a378:	61eb      	str	r3, [r5, #28]
  return 1;
 801a37a:	2001      	movs	r0, #1
 801a37c:	e7e8      	b.n	801a350 <coap_pdu_parse_opt+0x1c>
    coap_opt_t *opt = pdu->token + pdu->token_length;
 801a37e:	69af      	ldr	r7, [r5, #24]
    size_t length = pdu->used_size - pdu->token_length;
 801a380:	1a76      	subs	r6, r6, r1
    coap_opt_t *opt = pdu->token + pdu->token_length;
 801a382:	440f      	add	r7, r1
    while (length > 0 && *opt != COAP_PAYLOAD_START) {
 801a384:	b336      	cbz	r6, 801a3d4 <coap_pdu_parse_opt+0xa0>
 801a386:	783b      	ldrb	r3, [r7, #0]
 801a388:	2bff      	cmp	r3, #255	; 0xff
 801a38a:	d109      	bne.n	801a3a0 <coap_pdu_parse_opt+0x6c>
      if (length == 0) {
 801a38c:	2e01      	cmp	r6, #1
      opt++; length--;
 801a38e:	f107 0701 	add.w	r7, r7, #1
      if (length == 0) {
 801a392:	d11d      	bne.n	801a3d0 <coap_pdu_parse_opt+0x9c>
        coap_log(LOG_DEBUG,
 801a394:	f7fa fe26 	bl	8014fe4 <coap_get_log_level>
 801a398:	2806      	cmp	r0, #6
 801a39a:	d9d8      	bls.n	801a34e <coap_pdu_parse_opt+0x1a>
 801a39c:	4910      	ldr	r1, [pc, #64]	; (801a3e0 <coap_pdu_parse_opt+0xac>)
 801a39e:	e7da      	b.n	801a356 <coap_pdu_parse_opt+0x22>
  optsize = coap_opt_parse(*optp, *length, &option);
 801a3a0:	aa01      	add	r2, sp, #4
 801a3a2:	4631      	mov	r1, r6
 801a3a4:	4638      	mov	r0, r7
 801a3a6:	f7ff fab3 	bl	8019910 <coap_opt_parse>
  if (optsize) {
 801a3aa:	b158      	cbz	r0, 801a3c4 <coap_pdu_parse_opt+0x90>
    assert(optsize <= *length);
 801a3ac:	42b0      	cmp	r0, r6
 801a3ae:	d906      	bls.n	801a3be <coap_pdu_parse_opt+0x8a>
 801a3b0:	4b0c      	ldr	r3, [pc, #48]	; (801a3e4 <coap_pdu_parse_opt+0xb0>)
 801a3b2:	4a0d      	ldr	r2, [pc, #52]	; (801a3e8 <coap_pdu_parse_opt+0xb4>)
 801a3b4:	480d      	ldr	r0, [pc, #52]	; (801a3ec <coap_pdu_parse_opt+0xb8>)
 801a3b6:	f240 1199 	movw	r1, #409	; 0x199
 801a3ba:	f001 fb5f 	bl	801ba7c <__assert_func>
    *optp += optsize;
 801a3be:	4407      	add	r7, r0
    *length -= optsize;
 801a3c0:	1a36      	subs	r6, r6, r0
  return optsize;
 801a3c2:	e7df      	b.n	801a384 <coap_pdu_parse_opt+0x50>
        coap_log(LOG_DEBUG, "coap_pdu_parse: missing payload start code\n");
 801a3c4:	f7fa fe0e 	bl	8014fe4 <coap_get_log_level>
 801a3c8:	2806      	cmp	r0, #6
 801a3ca:	d9c0      	bls.n	801a34e <coap_pdu_parse_opt+0x1a>
 801a3cc:	4908      	ldr	r1, [pc, #32]	; (801a3f0 <coap_pdu_parse_opt+0xbc>)
 801a3ce:	e7c2      	b.n	801a356 <coap_pdu_parse_opt+0x22>
                pdu->data = (uint8_t*)opt;
 801a3d0:	61ef      	str	r7, [r5, #28]
 801a3d2:	e7d2      	b.n	801a37a <coap_pdu_parse_opt+0x46>
      pdu->data = NULL;
 801a3d4:	61ee      	str	r6, [r5, #28]
 801a3d6:	e7d0      	b.n	801a37a <coap_pdu_parse_opt+0x46>
 801a3d8:	080313e7 	.word	0x080313e7
 801a3dc:	08031413 	.word	0x08031413
 801a3e0:	08031471 	.word	0x08031471
 801a3e4:	08031432 	.word	0x08031432
 801a3e8:	0802ad37 	.word	0x0802ad37
 801a3ec:	08031101 	.word	0x08031101
 801a3f0:	08031445 	.word	0x08031445

0801a3f4 <coap_pdu_parse>:
int
coap_pdu_parse(coap_proto_t proto,
               const uint8_t *data,
               size_t length,
               coap_pdu_t *pdu)
{
 801a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3f8:	4607      	mov	r7, r0
 801a3fa:	4688      	mov	r8, r1
 801a3fc:	461c      	mov	r4, r3
  size_t hdr_size;

  if (length == 0)
 801a3fe:	4616      	mov	r6, r2
 801a400:	b912      	cbnz	r2, 801a408 <coap_pdu_parse+0x14>
    return 0;
 801a402:	2000      	movs	r0, #0
  memcpy(pdu->token - hdr_size, data, length);
#endif
  pdu->hdr_size = (uint8_t)hdr_size;
  pdu->used_size = length - hdr_size;
  return coap_pdu_parse_header(pdu, proto) && coap_pdu_parse_opt(pdu);
}
 801a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdr_size = coap_pdu_parse_header_size(proto, data);
 801a408:	f7ff feac 	bl	801a164 <coap_pdu_parse_header_size>
  if (!hdr_size || hdr_size > length)
 801a40c:	4605      	mov	r5, r0
 801a40e:	2800      	cmp	r0, #0
 801a410:	d0f7      	beq.n	801a402 <coap_pdu_parse+0xe>
 801a412:	4286      	cmp	r6, r0
 801a414:	d3f5      	bcc.n	801a402 <coap_pdu_parse+0xe>
  if (hdr_size > pdu->max_hdr_size)
 801a416:	78a3      	ldrb	r3, [r4, #2]
 801a418:	4283      	cmp	r3, r0
 801a41a:	d3f2      	bcc.n	801a402 <coap_pdu_parse+0xe>
  if (!coap_pdu_resize(pdu, length - hdr_size))
 801a41c:	eba6 0900 	sub.w	r9, r6, r0
 801a420:	4649      	mov	r1, r9
 801a422:	4620      	mov	r0, r4
 801a424:	f7ff fd44 	bl	8019eb0 <coap_pdu_resize>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d0ea      	beq.n	801a402 <coap_pdu_parse+0xe>
  memcpy(pdu->token - hdr_size, data, length);
 801a42c:	69a0      	ldr	r0, [r4, #24]
 801a42e:	4641      	mov	r1, r8
 801a430:	4632      	mov	r2, r6
 801a432:	1b40      	subs	r0, r0, r5
 801a434:	f001 ff04 	bl	801c240 <memcpy>
  pdu->hdr_size = (uint8_t)hdr_size;
 801a438:	70e5      	strb	r5, [r4, #3]
  pdu->used_size = length - hdr_size;
 801a43a:	f8c4 9010 	str.w	r9, [r4, #16]
  return coap_pdu_parse_header(pdu, proto) && coap_pdu_parse_opt(pdu);
 801a43e:	4639      	mov	r1, r7
 801a440:	4620      	mov	r0, r4
 801a442:	f7ff ff0d 	bl	801a260 <coap_pdu_parse_header>
 801a446:	2800      	cmp	r0, #0
 801a448:	d0db      	beq.n	801a402 <coap_pdu_parse+0xe>
 801a44a:	4620      	mov	r0, r4
 801a44c:	f7ff ff72 	bl	801a334 <coap_pdu_parse_opt>
 801a450:	3800      	subs	r0, #0
 801a452:	bf18      	it	ne
 801a454:	2001      	movne	r0, #1
 801a456:	e7d5      	b.n	801a404 <coap_pdu_parse+0x10>

0801a458 <coap_pdu_encode_header>:

size_t
coap_pdu_encode_header(coap_pdu_t *pdu, coap_proto_t proto) {
 801a458:	b538      	push	{r3, r4, r5, lr}
  if (proto == COAP_PROTO_UDP || proto == COAP_PROTO_DTLS) {
 801a45a:	1e4b      	subs	r3, r1, #1
 801a45c:	2b01      	cmp	r3, #1
coap_pdu_encode_header(coap_pdu_t *pdu, coap_proto_t proto) {
 801a45e:	4604      	mov	r4, r0
  if (proto == COAP_PROTO_UDP || proto == COAP_PROTO_DTLS) {
 801a460:	d821      	bhi.n	801a4a6 <coap_pdu_encode_header+0x4e>
    assert(pdu->max_hdr_size >= 4);
 801a462:	7883      	ldrb	r3, [r0, #2]
 801a464:	2b03      	cmp	r3, #3
 801a466:	d806      	bhi.n	801a476 <coap_pdu_encode_header+0x1e>
 801a468:	4b53      	ldr	r3, [pc, #332]	; (801a5b8 <coap_pdu_encode_header+0x160>)
 801a46a:	4a54      	ldr	r2, [pc, #336]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a46c:	f44f 7112 	mov.w	r1, #584	; 0x248
    pdu->token[-2] = (uint8_t)(pdu->tid >> 8);
    pdu->token[-1] = (uint8_t)(pdu->tid);
    pdu->hdr_size = 4;
  } else if (proto == COAP_PROTO_TCP || proto == COAP_PROTO_TLS) {
    size_t len;
    assert(pdu->used_size >= pdu->token_length);
 801a470:	4853      	ldr	r0, [pc, #332]	; (801a5c0 <coap_pdu_encode_header+0x168>)
 801a472:	f001 fb03 	bl	801ba7c <__assert_func>
                   | pdu->type << 4
 801a476:	7801      	ldrb	r1, [r0, #0]
                   | pdu->token_length;
 801a478:	7903      	ldrb	r3, [r0, #4]
    pdu->token[-4] = COAP_DEFAULT_VERSION << 6
 801a47a:	6982      	ldr	r2, [r0, #24]
                   | pdu->token_length;
 801a47c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801a480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    pdu->token[-4] = COAP_DEFAULT_VERSION << 6
 801a484:	f802 3c04 	strb.w	r3, [r2, #-4]
    pdu->token[-3] = pdu->code;
 801a488:	6983      	ldr	r3, [r0, #24]
 801a48a:	7842      	ldrb	r2, [r0, #1]
 801a48c:	f803 2c03 	strb.w	r2, [r3, #-3]
    pdu->token[-2] = (uint8_t)(pdu->tid >> 8);
 801a490:	88c3      	ldrh	r3, [r0, #6]
 801a492:	6982      	ldr	r2, [r0, #24]
 801a494:	0a1b      	lsrs	r3, r3, #8
 801a496:	f802 3c02 	strb.w	r3, [r2, #-2]
    pdu->token[-1] = (uint8_t)(pdu->tid);
 801a49a:	6983      	ldr	r3, [r0, #24]
 801a49c:	88c2      	ldrh	r2, [r0, #6]
        return 0;
      }
      pdu->token[-4] = 14 << 4 | pdu->token_length;
      pdu->token[-3] = (uint8_t)((len - COAP_MESSAGE_SIZE_OFFSET_TCP16) >> 8);
      pdu->token[-2] = (uint8_t)(len - COAP_MESSAGE_SIZE_OFFSET_TCP16);
      pdu->token[-1] = pdu->code;
 801a49e:	f803 2c01 	strb.w	r2, [r3, #-1]
      pdu->hdr_size = 4;
 801a4a2:	2304      	movs	r3, #4
 801a4a4:	e020      	b.n	801a4e8 <coap_pdu_encode_header+0x90>
  } else if (proto == COAP_PROTO_TCP || proto == COAP_PROTO_TLS) {
 801a4a6:	3903      	subs	r1, #3
 801a4a8:	2901      	cmp	r1, #1
 801a4aa:	d87c      	bhi.n	801a5a6 <coap_pdu_encode_header+0x14e>
    assert(pdu->used_size >= pdu->token_length);
 801a4ac:	6903      	ldr	r3, [r0, #16]
 801a4ae:	7902      	ldrb	r2, [r0, #4]
 801a4b0:	4293      	cmp	r3, r2
 801a4b2:	d204      	bcs.n	801a4be <coap_pdu_encode_header+0x66>
 801a4b4:	4b43      	ldr	r3, [pc, #268]	; (801a5c4 <coap_pdu_encode_header+0x16c>)
 801a4b6:	4a41      	ldr	r2, [pc, #260]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a4b8:	f240 2157 	movw	r1, #599	; 0x257
 801a4bc:	e7d8      	b.n	801a470 <coap_pdu_encode_header+0x18>
    len = pdu->used_size - pdu->token_length;
 801a4be:	1a9b      	subs	r3, r3, r2
    if (len <= COAP_MAX_MESSAGE_SIZE_TCP0) {
 801a4c0:	2b0c      	cmp	r3, #12
 801a4c2:	7881      	ldrb	r1, [r0, #2]
 801a4c4:	d813      	bhi.n	801a4ee <coap_pdu_encode_header+0x96>
      assert(pdu->max_hdr_size >= 2);
 801a4c6:	2901      	cmp	r1, #1
 801a4c8:	d804      	bhi.n	801a4d4 <coap_pdu_encode_header+0x7c>
 801a4ca:	4b3f      	ldr	r3, [pc, #252]	; (801a5c8 <coap_pdu_encode_header+0x170>)
 801a4cc:	4a3b      	ldr	r2, [pc, #236]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a4ce:	f240 215e 	movw	r1, #606	; 0x25e
 801a4d2:	e7cd      	b.n	801a470 <coap_pdu_encode_header+0x18>
      pdu->token[-2] = (uint8_t)len << 4
 801a4d4:	6981      	ldr	r1, [r0, #24]
                     | pdu->token_length;
 801a4d6:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      pdu->token[-2] = (uint8_t)len << 4
 801a4da:	f801 3c02 	strb.w	r3, [r1, #-2]
      pdu->token[-1] = pdu->code;
 801a4de:	6983      	ldr	r3, [r0, #24]
 801a4e0:	7842      	ldrb	r2, [r0, #1]
 801a4e2:	f803 2c01 	strb.w	r2, [r3, #-1]
      pdu->hdr_size = 2;
 801a4e6:	2302      	movs	r3, #2
      pdu->hdr_size = 3;
 801a4e8:	70e3      	strb	r3, [r4, #3]
    }
  } else {
    coap_log(LOG_WARNING, "coap_pdu_encode_header: unsupported protocol\n");
  }
  return pdu->hdr_size;
}
 801a4ea:	78e0      	ldrb	r0, [r4, #3]
 801a4ec:	bd38      	pop	{r3, r4, r5, pc}
    } else if (len <= COAP_MAX_MESSAGE_SIZE_TCP8) {
 801a4ee:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 801a4f2:	f1a3 000d 	sub.w	r0, r3, #13
 801a4f6:	d814      	bhi.n	801a522 <coap_pdu_encode_header+0xca>
      assert(pdu->max_hdr_size >= 3);
 801a4f8:	2902      	cmp	r1, #2
 801a4fa:	d804      	bhi.n	801a506 <coap_pdu_encode_header+0xae>
 801a4fc:	4b33      	ldr	r3, [pc, #204]	; (801a5cc <coap_pdu_encode_header+0x174>)
 801a4fe:	4a2f      	ldr	r2, [pc, #188]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a500:	f240 2169 	movw	r1, #617	; 0x269
 801a504:	e7b4      	b.n	801a470 <coap_pdu_encode_header+0x18>
      pdu->token[-3] = 13 << 4 | pdu->token_length;
 801a506:	69a3      	ldr	r3, [r4, #24]
 801a508:	f062 022f 	orn	r2, r2, #47	; 0x2f
 801a50c:	f803 2c03 	strb.w	r2, [r3, #-3]
      pdu->token[-2] = (uint8_t)(len - COAP_MESSAGE_SIZE_OFFSET_TCP8);
 801a510:	69a3      	ldr	r3, [r4, #24]
 801a512:	f803 0c02 	strb.w	r0, [r3, #-2]
      pdu->token[-1] = pdu->code;
 801a516:	69a3      	ldr	r3, [r4, #24]
 801a518:	7862      	ldrb	r2, [r4, #1]
 801a51a:	f803 2c01 	strb.w	r2, [r3, #-1]
      pdu->hdr_size = 3;
 801a51e:	2303      	movs	r3, #3
 801a520:	e7e2      	b.n	801a4e8 <coap_pdu_encode_header+0x90>
    } else if (len <= COAP_MAX_MESSAGE_SIZE_TCP16) {
 801a522:	4d2b      	ldr	r5, [pc, #172]	; (801a5d0 <coap_pdu_encode_header+0x178>)
 801a524:	42ab      	cmp	r3, r5
 801a526:	d818      	bhi.n	801a55a <coap_pdu_encode_header+0x102>
      assert(pdu->max_hdr_size >= 4);
 801a528:	2903      	cmp	r1, #3
 801a52a:	d804      	bhi.n	801a536 <coap_pdu_encode_header+0xde>
 801a52c:	4b22      	ldr	r3, [pc, #136]	; (801a5b8 <coap_pdu_encode_header+0x160>)
 801a52e:	4a23      	ldr	r2, [pc, #140]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a530:	f44f 711d 	mov.w	r1, #628	; 0x274
 801a534:	e79c      	b.n	801a470 <coap_pdu_encode_header+0x18>
      pdu->token[-4] = 14 << 4 | pdu->token_length;
 801a536:	69a1      	ldr	r1, [r4, #24]
 801a538:	f062 021f 	orn	r2, r2, #31
 801a53c:	f801 2c04 	strb.w	r2, [r1, #-4]
      pdu->token[-3] = (uint8_t)((len - COAP_MESSAGE_SIZE_OFFSET_TCP16) >> 8);
 801a540:	f46f 7186 	mvn.w	r1, #268	; 0x10c
 801a544:	69a2      	ldr	r2, [r4, #24]
 801a546:	440b      	add	r3, r1
 801a548:	0a1b      	lsrs	r3, r3, #8
 801a54a:	f802 3c03 	strb.w	r3, [r2, #-3]
      pdu->token[-2] = (uint8_t)(len - COAP_MESSAGE_SIZE_OFFSET_TCP16);
 801a54e:	69a3      	ldr	r3, [r4, #24]
 801a550:	f803 0c02 	strb.w	r0, [r3, #-2]
      pdu->token[-1] = pdu->code;
 801a554:	69a3      	ldr	r3, [r4, #24]
 801a556:	7862      	ldrb	r2, [r4, #1]
 801a558:	e7a1      	b.n	801a49e <coap_pdu_encode_header+0x46>
      assert(pdu->max_hdr_size >= 6);
 801a55a:	2905      	cmp	r1, #5
 801a55c:	d804      	bhi.n	801a568 <coap_pdu_encode_header+0x110>
 801a55e:	4b1d      	ldr	r3, [pc, #116]	; (801a5d4 <coap_pdu_encode_header+0x17c>)
 801a560:	4a16      	ldr	r2, [pc, #88]	; (801a5bc <coap_pdu_encode_header+0x164>)
 801a562:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a566:	e783      	b.n	801a470 <coap_pdu_encode_header+0x18>
      pdu->token[-6] = 15 << 4 | pdu->token_length;
 801a568:	69a1      	ldr	r1, [r4, #24]
 801a56a:	f062 020f 	orn	r2, r2, #15
 801a56e:	f801 2c06 	strb.w	r2, [r1, #-6]
      pdu->token[-5] = (uint8_t)((len - COAP_MESSAGE_SIZE_OFFSET_TCP32) >> 24);
 801a572:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 801a576:	f46f 7286 	mvn.w	r2, #268	; 0x10c
 801a57a:	4413      	add	r3, r2
 801a57c:	69a2      	ldr	r2, [r4, #24]
 801a57e:	0e19      	lsrs	r1, r3, #24
 801a580:	f802 1c05 	strb.w	r1, [r2, #-5]
      pdu->token[-4] = (uint8_t)((len - COAP_MESSAGE_SIZE_OFFSET_TCP32) >> 16);
 801a584:	69a2      	ldr	r2, [r4, #24]
 801a586:	0c19      	lsrs	r1, r3, #16
 801a588:	f802 1c04 	strb.w	r1, [r2, #-4]
      pdu->token[-3] = (uint8_t)((len - COAP_MESSAGE_SIZE_OFFSET_TCP32) >> 8);
 801a58c:	69a2      	ldr	r2, [r4, #24]
 801a58e:	0a1b      	lsrs	r3, r3, #8
 801a590:	f802 3c03 	strb.w	r3, [r2, #-3]
      pdu->token[-2] = (uint8_t)(len - COAP_MESSAGE_SIZE_OFFSET_TCP32);
 801a594:	69a3      	ldr	r3, [r4, #24]
 801a596:	f803 0c02 	strb.w	r0, [r3, #-2]
      pdu->token[-1] = pdu->code;
 801a59a:	69a3      	ldr	r3, [r4, #24]
 801a59c:	7862      	ldrb	r2, [r4, #1]
 801a59e:	f803 2c01 	strb.w	r2, [r3, #-1]
      pdu->hdr_size = 6;
 801a5a2:	2306      	movs	r3, #6
 801a5a4:	e7a0      	b.n	801a4e8 <coap_pdu_encode_header+0x90>
    coap_log(LOG_WARNING, "coap_pdu_encode_header: unsupported protocol\n");
 801a5a6:	f7fa fd1d 	bl	8014fe4 <coap_get_log_level>
 801a5aa:	2803      	cmp	r0, #3
 801a5ac:	d99d      	bls.n	801a4ea <coap_pdu_encode_header+0x92>
 801a5ae:	490a      	ldr	r1, [pc, #40]	; (801a5d8 <coap_pdu_encode_header+0x180>)
 801a5b0:	2004      	movs	r0, #4
 801a5b2:	f7fa fd81 	bl	80150b8 <coap_log_impl>
 801a5b6:	e798      	b.n	801a4ea <coap_pdu_encode_header+0x92>
 801a5b8:	080314a9 	.word	0x080314a9
 801a5bc:	0802ad48 	.word	0x0802ad48
 801a5c0:	08031101 	.word	0x08031101
 801a5c4:	080314c0 	.word	0x080314c0
 801a5c8:	080314e4 	.word	0x080314e4
 801a5cc:	080314fb 	.word	0x080314fb
 801a5d0:	0001010c 	.word	0x0001010c
 801a5d4:	08031512 	.word	0x08031512
 801a5d8:	08031529 	.word	0x08031529

0801a5dc <match>:
  }

static int
match(const coap_str_const_t *text, const coap_str_const_t *pattern, int match_prefix,
  int match_substring
) {
 801a5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e0:	460f      	mov	r7, r1
 801a5e2:	4691      	mov	r9, r2
 801a5e4:	461c      	mov	r4, r3
  assert(text); assert(pattern);
 801a5e6:	b928      	cbnz	r0, 801a5f4 <match+0x18>
 801a5e8:	4b1e      	ldr	r3, [pc, #120]	; (801a664 <match+0x88>)
 801a5ea:	4a1f      	ldr	r2, [pc, #124]	; (801a668 <match+0x8c>)
 801a5ec:	481f      	ldr	r0, [pc, #124]	; (801a66c <match+0x90>)
 801a5ee:	216c      	movs	r1, #108	; 0x6c
 801a5f0:	f001 fa44 	bl	801ba7c <__assert_func>

  if (text->length < pattern->length)
 801a5f4:	6805      	ldr	r5, [r0, #0]
 801a5f6:	f8d1 8000 	ldr.w	r8, [r1]
 801a5fa:	4545      	cmp	r5, r8
 801a5fc:	d303      	bcc.n	801a606 <match+0x2a>
    return 0;

  if (match_substring) {
 801a5fe:	b313      	cbz	r3, 801a646 <match+0x6a>
    const uint8_t *next_token = text->s;
 801a600:	f8d0 a004 	ldr.w	sl, [r0, #4]
    size_t remaining_length = text->length;
    while (remaining_length) {
 801a604:	b90d      	cbnz	r5, 801a60a <match+0x2e>
        return 1;
    }
    return 0;
  }

  return (match_prefix || pattern->length == text->length) &&
 801a606:	2400      	movs	r4, #0
 801a608:	e028      	b.n	801a65c <match+0x80>
      next_token = (unsigned char *)memchr(token, ' ', remaining_length);
 801a60a:	462a      	mov	r2, r5
 801a60c:	2120      	movs	r1, #32
 801a60e:	4650      	mov	r0, sl
 801a610:	f7e5 fdde 	bl	80001d0 <memchr>
      if (next_token) {
 801a614:	4606      	mov	r6, r0
 801a616:	b1a0      	cbz	r0, 801a642 <match+0x66>
        token_length = next_token - token;
 801a618:	eba0 030a 	sub.w	r3, r0, sl
        remaining_length -= (token_length + 1);
 801a61c:	3d01      	subs	r5, #1
 801a61e:	eba5 0b03 	sub.w	fp, r5, r3
        next_token++;
 801a622:	3601      	adds	r6, #1
        token_length = next_token - token;
 801a624:	461d      	mov	r5, r3
      if ((match_prefix || pattern->length == token_length) &&
 801a626:	f1b9 0f00 	cmp.w	r9, #0
 801a62a:	d101      	bne.n	801a630 <match+0x54>
 801a62c:	45a8      	cmp	r8, r5
 801a62e:	d105      	bne.n	801a63c <match+0x60>
            memcmp(token, pattern->s, pattern->length) == 0)
 801a630:	6879      	ldr	r1, [r7, #4]
 801a632:	4642      	mov	r2, r8
 801a634:	4650      	mov	r0, sl
 801a636:	f001 fdf5 	bl	801c224 <memcmp>
      if ((match_prefix || pattern->length == token_length) &&
 801a63a:	b178      	cbz	r0, 801a65c <match+0x80>
        remaining_length = 0;
 801a63c:	465d      	mov	r5, fp
 801a63e:	46b2      	mov	sl, r6
 801a640:	e7e0      	b.n	801a604 <match+0x28>
 801a642:	4683      	mov	fp, r0
 801a644:	e7ef      	b.n	801a626 <match+0x4a>
  return (match_prefix || pattern->length == text->length) &&
 801a646:	b90a      	cbnz	r2, 801a64c <match+0x70>
 801a648:	4545      	cmp	r5, r8
 801a64a:	d107      	bne.n	801a65c <match+0x80>
    memcmp(text->s, pattern->s, pattern->length) == 0;
 801a64c:	6879      	ldr	r1, [r7, #4]
 801a64e:	6840      	ldr	r0, [r0, #4]
 801a650:	4642      	mov	r2, r8
 801a652:	f001 fde7 	bl	801c224 <memcmp>
  return (match_prefix || pattern->length == text->length) &&
 801a656:	fab0 f480 	clz	r4, r0
 801a65a:	0964      	lsrs	r4, r4, #5
}
 801a65c:	4620      	mov	r0, r4
 801a65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a662:	bf00      	nop
 801a664:	080300ae 	.word	0x080300ae
 801a668:	0802ad60 	.word	0x0802ad60
 801a66c:	080316af 	.word	0x080316af

0801a670 <coap_resource_init>:
}

static coap_str_const_t *null_path = coap_make_str_const("");

coap_resource_t *
coap_resource_init(coap_str_const_t *uri_path, int flags) {
 801a670:	b570      	push	{r4, r5, r6, lr}
 801a672:	4604      	mov	r4, r0
 801a674:	460e      	mov	r6, r1
  coap_resource_t *r;

  r = (coap_resource_t *)coap_malloc_type(COAP_RESOURCE, sizeof(coap_resource_t));
 801a676:	2009      	movs	r0, #9
 801a678:	2158      	movs	r1, #88	; 0x58
 801a67a:	f7fd fa43 	bl	8017b04 <coap_malloc_type>
  if (r) {
 801a67e:	4605      	mov	r5, r0
 801a680:	b1b0      	cbz	r0, 801a6b0 <coap_resource_init+0x40>
    memset(r, 0, sizeof(coap_resource_t));
 801a682:	2258      	movs	r2, #88	; 0x58
 801a684:	2100      	movs	r1, #0
 801a686:	f001 fe03 	bl	801c290 <memset>

    if (!(flags & COAP_RESOURCE_FLAGS_RELEASE_URI)) {
 801a68a:	07f3      	lsls	r3, r6, #31
 801a68c:	d40a      	bmi.n	801a6a4 <coap_resource_init+0x34>
      /* Need to take a copy if caller is not providing a release request */
      if (uri_path)
 801a68e:	b15c      	cbz	r4, 801a6a8 <coap_resource_init+0x38>
        uri_path = coap_new_str_const(uri_path->s, uri_path->length);
 801a690:	e9d4 1000 	ldrd	r1, r0, [r4]
      else
        uri_path = coap_new_str_const(null_path->s, null_path->length);
 801a694:	f001 f8ae 	bl	801b7f4 <coap_new_str_const>
 801a698:	4604      	mov	r4, r0
    else if (!uri_path) {
      /* Do not expecte this, but ... */
      uri_path = coap_new_str_const(null_path->s, null_path->length);
    }

    if (uri_path)
 801a69a:	b100      	cbz	r0, 801a69e <coap_resource_init+0x2e>
      r->uri_path = uri_path;
 801a69c:	64ac      	str	r4, [r5, #72]	; 0x48

    r->flags = flags;
 801a69e:	64ee      	str	r6, [r5, #76]	; 0x4c
  } else {
    coap_log(LOG_DEBUG, "coap_resource_init: no memory left\n");
  }

  return r;
}
 801a6a0:	4628      	mov	r0, r5
 801a6a2:	bd70      	pop	{r4, r5, r6, pc}
    else if (!uri_path) {
 801a6a4:	2c00      	cmp	r4, #0
 801a6a6:	d1f9      	bne.n	801a69c <coap_resource_init+0x2c>
        uri_path = coap_new_str_const(null_path->s, null_path->length);
 801a6a8:	4b06      	ldr	r3, [pc, #24]	; (801a6c4 <coap_resource_init+0x54>)
 801a6aa:	e9d3 1000 	ldrd	r1, r0, [r3]
 801a6ae:	e7f1      	b.n	801a694 <coap_resource_init+0x24>
    coap_log(LOG_DEBUG, "coap_resource_init: no memory left\n");
 801a6b0:	f7fa fc98 	bl	8014fe4 <coap_get_log_level>
 801a6b4:	2806      	cmp	r0, #6
 801a6b6:	d9f3      	bls.n	801a6a0 <coap_resource_init+0x30>
 801a6b8:	4903      	ldr	r1, [pc, #12]	; (801a6c8 <coap_resource_init+0x58>)
 801a6ba:	2007      	movs	r0, #7
 801a6bc:	f7fa fcfc 	bl	80150b8 <coap_log_impl>
  return r;
 801a6c0:	e7ee      	b.n	801a6a0 <coap_resource_init+0x30>
 801a6c2:	bf00      	nop
 801a6c4:	20000114 	.word	0x20000114
 801a6c8:	0803171a 	.word	0x0803171a

0801a6cc <coap_find_attr>:
  return attr;
}

coap_attr_t *
coap_find_attr(coap_resource_t *resource,
               coap_str_const_t *name) {
 801a6cc:	b538      	push	{r3, r4, r5, lr}
 801a6ce:	460d      	mov	r5, r1
  coap_attr_t *attr;

  if (!resource || !name)
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	b110      	cbz	r0, 801a6da <coap_find_attr+0xe>
 801a6d4:	b181      	cbz	r1, 801a6f8 <coap_find_attr+0x2c>
    return NULL;

  LL_FOREACH(resource->link_attr, attr) {
 801a6d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801a6d8:	b90c      	cbnz	r4, 801a6de <coap_find_attr+0x12>
        memcmp(attr->name->s, name->s, name->length) == 0)
      return attr;
  }

  return NULL;
}
 801a6da:	4620      	mov	r0, r4
 801a6dc:	bd38      	pop	{r3, r4, r5, pc}
    if (attr->name->length == name->length &&
 801a6de:	6863      	ldr	r3, [r4, #4]
 801a6e0:	6829      	ldr	r1, [r5, #0]
 801a6e2:	681a      	ldr	r2, [r3, #0]
 801a6e4:	428a      	cmp	r2, r1
 801a6e6:	d105      	bne.n	801a6f4 <coap_find_attr+0x28>
        memcmp(attr->name->s, name->s, name->length) == 0)
 801a6e8:	6869      	ldr	r1, [r5, #4]
 801a6ea:	6858      	ldr	r0, [r3, #4]
 801a6ec:	f001 fd9a 	bl	801c224 <memcmp>
    if (attr->name->length == name->length &&
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	d0f2      	beq.n	801a6da <coap_find_attr+0xe>
  LL_FOREACH(resource->link_attr, attr) {
 801a6f4:	6824      	ldr	r4, [r4, #0]
 801a6f6:	e7ef      	b.n	801a6d8 <coap_find_attr+0xc>
    return NULL;
 801a6f8:	460c      	mov	r4, r1
 801a6fa:	e7ee      	b.n	801a6da <coap_find_attr+0xe>

0801a6fc <coap_delete_attr>:

void
coap_delete_attr(coap_attr_t *attr) {
 801a6fc:	b510      	push	{r4, lr}
  if (!attr)
 801a6fe:	4604      	mov	r4, r0
 801a700:	b160      	cbz	r0, 801a71c <coap_delete_attr+0x20>
    return;
  coap_delete_str_const(attr->name);
 801a702:	6840      	ldr	r0, [r0, #4]
 801a704:	f001 f886 	bl	801b814 <coap_delete_str_const>
  if (attr->value) {
 801a708:	68a0      	ldr	r0, [r4, #8]
 801a70a:	b108      	cbz	r0, 801a710 <coap_delete_attr+0x14>
    coap_delete_str_const(attr->value);
 801a70c:	f001 f882 	bl	801b814 <coap_delete_str_const>

#ifdef WITH_LWIP
  memp_free(MEMP_COAP_RESOURCEATTR, attr);
#endif
#ifndef WITH_LWIP
  coap_free_type(COAP_RESOURCEATTR, attr);
 801a710:	4621      	mov	r1, r4
 801a712:	200a      	movs	r0, #10
#endif
}
 801a714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  coap_free_type(COAP_RESOURCEATTR, attr);
 801a718:	f7fd b9f7 	b.w	8017b0a <coap_free_type>
}
 801a71c:	bd10      	pop	{r4, pc}
	...

0801a720 <coap_free_resource>:

static void
coap_free_resource(coap_resource_t *resource) {
 801a720:	b570      	push	{r4, r5, r6, lr}
  coap_attr_t *attr, *tmp;
  coap_subscription_t *obs, *otmp;

  assert(resource);
 801a722:	4604      	mov	r4, r0
 801a724:	b930      	cbnz	r0, 801a734 <coap_free_resource+0x14>
 801a726:	4b13      	ldr	r3, [pc, #76]	; (801a774 <coap_free_resource+0x54>)
 801a728:	4a13      	ldr	r2, [pc, #76]	; (801a778 <coap_free_resource+0x58>)
 801a72a:	4814      	ldr	r0, [pc, #80]	; (801a77c <coap_free_resource+0x5c>)
 801a72c:	f240 11ab 	movw	r1, #427	; 0x1ab
 801a730:	f001 f9a4 	bl	801ba7c <__assert_func>

  /* delete registered attributes */
  LL_FOREACH_SAFE(resource->link_attr, attr, tmp) coap_delete_attr(attr);
 801a734:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a736:	b120      	cbz	r0, 801a742 <coap_free_resource+0x22>
 801a738:	6805      	ldr	r5, [r0, #0]
 801a73a:	f7ff ffdf 	bl	801a6fc <coap_delete_attr>
 801a73e:	4628      	mov	r0, r5
 801a740:	e7f9      	b.n	801a736 <coap_free_resource+0x16>

  /* Either the application provided or libcoap copied - need to delete it */
  coap_delete_str_const(resource->uri_path);
 801a742:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a744:	f001 f866 	bl	801b814 <coap_delete_str_const>

  /* free all elements from resource->subscribers */
  LL_FOREACH_SAFE( resource->subscribers, obs, otmp ) {
 801a748:	6c65      	ldr	r5, [r4, #68]	; 0x44
 801a74a:	b16d      	cbz	r5, 801a768 <coap_free_resource+0x48>
    coap_session_release( obs->session );
 801a74c:	e9d5 6000 	ldrd	r6, r0, [r5]
 801a750:	f7fc fbce 	bl	8016ef0 <coap_session_release>
    if (obs->query)
 801a754:	6a28      	ldr	r0, [r5, #32]
 801a756:	b108      	cbz	r0, 801a75c <coap_free_resource+0x3c>
      coap_delete_string(obs->query);
 801a758:	f001 f848 	bl	801b7ec <coap_delete_string>
 801a75c:	4629      	mov	r1, r5
 801a75e:	2000      	movs	r0, #0
 801a760:	f7fd f9d3 	bl	8017b0a <coap_free_type>
  LL_FOREACH_SAFE( resource->subscribers, obs, otmp ) {
 801a764:	4635      	mov	r5, r6
}
 801a766:	e7f0      	b.n	801a74a <coap_free_resource+0x2a>

#ifdef WITH_LWIP
  memp_free(MEMP_COAP_RESOURCE, resource);
#endif
#ifndef WITH_LWIP
  coap_free_type(COAP_RESOURCE, resource);
 801a768:	4621      	mov	r1, r4
 801a76a:	2009      	movs	r0, #9
#endif /* WITH_CONTIKI */
}
 801a76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  coap_free_type(COAP_RESOURCE, resource);
 801a770:	f7fd b9cb 	b.w	8017b0a <coap_free_type>
 801a774:	0803175d 	.word	0x0803175d
 801a778:	0802ad66 	.word	0x0802ad66
 801a77c:	080316af 	.word	0x080316af

0801a780 <coap_delete_resource>:
    RESOURCES_ADD(context->resources, resource);
  }
}

int
coap_delete_resource(coap_context_t *context, coap_resource_t *resource) {
 801a780:	b570      	push	{r4, r5, r6, lr}
 801a782:	460c      	mov	r4, r1
  if (!context || !resource)
 801a784:	4605      	mov	r5, r0
 801a786:	b160      	cbz	r0, 801a7a2 <coap_delete_resource+0x22>
 801a788:	2900      	cmp	r1, #0
 801a78a:	d04c      	beq.n	801a826 <coap_delete_resource+0xa6>
    return 0;

  if (resource->is_unknown && (context->unknown_resource == resource)) {
 801a78c:	780b      	ldrb	r3, [r1, #0]
 801a78e:	06db      	lsls	r3, r3, #27
 801a790:	d508      	bpl.n	801a7a4 <coap_delete_resource+0x24>
 801a792:	6900      	ldr	r0, [r0, #16]
 801a794:	4288      	cmp	r0, r1
 801a796:	d105      	bne.n	801a7a4 <coap_delete_resource+0x24>
    coap_free_resource(context->unknown_resource);
 801a798:	f7ff ffc2 	bl	801a720 <coap_free_resource>
    context->unknown_resource = NULL;
 801a79c:	2300      	movs	r3, #0
 801a79e:	612b      	str	r3, [r5, #16]

  /* remove resource from list */
  RESOURCES_DELETE(context->resources, resource);

  /* and free its allocated memory */
  coap_free_resource(resource);
 801a7a0:	2001      	movs	r0, #1

  return 1;
}
 801a7a2:	bd70      	pop	{r4, r5, r6, pc}
  RESOURCES_DELETE(context->resources, resource);
 801a7a4:	e9d4 2609 	ldrd	r2, r6, [r4, #36]	; 0x24
 801a7a8:	68eb      	ldr	r3, [r5, #12]
 801a7aa:	f104 0020 	add.w	r0, r4, #32
 801a7ae:	6a1b      	ldr	r3, [r3, #32]
 801a7b0:	b962      	cbnz	r2, 801a7cc <coap_delete_resource+0x4c>
 801a7b2:	b95e      	cbnz	r6, 801a7cc <coap_delete_resource+0x4c>
 801a7b4:	6818      	ldr	r0, [r3, #0]
 801a7b6:	f001 fd2d 	bl	801c214 <free>
 801a7ba:	68eb      	ldr	r3, [r5, #12]
 801a7bc:	6a18      	ldr	r0, [r3, #32]
 801a7be:	f001 fd29 	bl	801c214 <free>
 801a7c2:	60ee      	str	r6, [r5, #12]
  coap_free_resource(resource);
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	f7ff ffab 	bl	801a720 <coap_free_resource>
 801a7ca:	e7e9      	b.n	801a7a0 <coap_delete_resource+0x20>
  RESOURCES_DELETE(context->resources, resource);
 801a7cc:	6919      	ldr	r1, [r3, #16]
 801a7ce:	4288      	cmp	r0, r1
 801a7d0:	bf02      	ittt	eq
 801a7d2:	6959      	ldreq	r1, [r3, #20]
 801a7d4:	1889      	addeq	r1, r1, r2
 801a7d6:	6119      	streq	r1, [r3, #16]
 801a7d8:	b31a      	cbz	r2, 801a822 <coap_delete_resource+0xa2>
 801a7da:	695b      	ldr	r3, [r3, #20]
 801a7dc:	4413      	add	r3, r2
 801a7de:	609e      	str	r6, [r3, #8]
 801a7e0:	68eb      	ldr	r3, [r5, #12]
 801a7e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a7e4:	6a1b      	ldr	r3, [r3, #32]
 801a7e6:	b111      	cbz	r1, 801a7ee <coap_delete_resource+0x6e>
 801a7e8:	695d      	ldr	r5, [r3, #20]
 801a7ea:	4429      	add	r1, r5
 801a7ec:	604a      	str	r2, [r1, #4]
 801a7ee:	685a      	ldr	r2, [r3, #4]
 801a7f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a7f2:	3a01      	subs	r2, #1
 801a7f4:	4011      	ands	r1, r2
 801a7f6:	220c      	movs	r2, #12
 801a7f8:	434a      	muls	r2, r1
 801a7fa:	6819      	ldr	r1, [r3, #0]
 801a7fc:	188e      	adds	r6, r1, r2
 801a7fe:	6875      	ldr	r5, [r6, #4]
 801a800:	3d01      	subs	r5, #1
 801a802:	6075      	str	r5, [r6, #4]
 801a804:	588e      	ldr	r6, [r1, r2]
 801a806:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801a808:	42b0      	cmp	r0, r6
 801a80a:	bf08      	it	eq
 801a80c:	508d      	streq	r5, [r1, r2]
 801a80e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a810:	b102      	cbz	r2, 801a814 <coap_delete_resource+0x94>
 801a812:	6115      	str	r5, [r2, #16]
 801a814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a816:	b101      	cbz	r1, 801a81a <coap_delete_resource+0x9a>
 801a818:	60ca      	str	r2, [r1, #12]
 801a81a:	68da      	ldr	r2, [r3, #12]
 801a81c:	3a01      	subs	r2, #1
 801a81e:	60da      	str	r2, [r3, #12]
 801a820:	e7d0      	b.n	801a7c4 <coap_delete_resource+0x44>
 801a822:	60ee      	str	r6, [r5, #12]
 801a824:	e7dc      	b.n	801a7e0 <coap_delete_resource+0x60>
    return 0;
 801a826:	4608      	mov	r0, r1
 801a828:	e7bb      	b.n	801a7a2 <coap_delete_resource+0x22>

0801a82a <coap_delete_all_resources>:

void
coap_delete_all_resources(coap_context_t *context) {
 801a82a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  coap_resource_t *rtmp;

  /* Cannot call RESOURCES_ITER because coap_free_resource() releases
   * the allocated storage. */

  HASH_ITER(hh, context->resources, res, rtmp) {
 801a82e:	68c4      	ldr	r4, [r0, #12]
coap_delete_all_resources(coap_context_t *context) {
 801a830:	4605      	mov	r5, r0
  HASH_ITER(hh, context->resources, res, rtmp) {
 801a832:	b934      	cbnz	r4, 801a842 <coap_delete_all_resources+0x18>
    coap_free_resource(res);
  }

  context->resources = NULL;

  if (context->unknown_resource) {
 801a834:	6928      	ldr	r0, [r5, #16]
  context->resources = NULL;
 801a836:	2400      	movs	r4, #0
 801a838:	60ec      	str	r4, [r5, #12]
  if (context->unknown_resource) {
 801a83a:	2800      	cmp	r0, #0
 801a83c:	d151      	bne.n	801a8e2 <coap_delete_all_resources+0xb8>
    coap_free_resource(context->unknown_resource);
    context->unknown_resource = NULL;
  }
}
 801a83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HASH_ITER(hh, context->resources, res, rtmp) {
 801a842:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    HASH_DELETE(hh, context->resources, res);
 801a844:	f04f 090c 	mov.w	r9, #12
 801a848:	e9d4 3809 	ldrd	r3, r8, [r4, #36]	; 0x24
 801a84c:	68ea      	ldr	r2, [r5, #12]
 801a84e:	f104 0c20 	add.w	ip, r4, #32
 801a852:	6a12      	ldr	r2, [r2, #32]
 801a854:	b99b      	cbnz	r3, 801a87e <coap_delete_all_resources+0x54>
 801a856:	f1b8 0f00 	cmp.w	r8, #0
 801a85a:	d110      	bne.n	801a87e <coap_delete_all_resources+0x54>
 801a85c:	6810      	ldr	r0, [r2, #0]
 801a85e:	f001 fcd9 	bl	801c214 <free>
 801a862:	68eb      	ldr	r3, [r5, #12]
 801a864:	6a18      	ldr	r0, [r3, #32]
 801a866:	f001 fcd5 	bl	801c214 <free>
 801a86a:	f8c5 800c 	str.w	r8, [r5, #12]
    coap_free_resource(res);
 801a86e:	4620      	mov	r0, r4
 801a870:	f7ff ff56 	bl	801a720 <coap_free_resource>
  HASH_ITER(hh, context->resources, res, rtmp) {
 801a874:	2f00      	cmp	r7, #0
 801a876:	d0dd      	beq.n	801a834 <coap_delete_all_resources+0xa>
 801a878:	463c      	mov	r4, r7
 801a87a:	6abf      	ldr	r7, [r7, #40]	; 0x28
 801a87c:	e7e4      	b.n	801a848 <coap_delete_all_resources+0x1e>
    HASH_DELETE(hh, context->resources, res);
 801a87e:	6911      	ldr	r1, [r2, #16]
 801a880:	4561      	cmp	r1, ip
 801a882:	bf02      	ittt	eq
 801a884:	6951      	ldreq	r1, [r2, #20]
 801a886:	18c9      	addeq	r1, r1, r3
 801a888:	6111      	streq	r1, [r2, #16]
 801a88a:	b33b      	cbz	r3, 801a8dc <coap_delete_all_resources+0xb2>
 801a88c:	6952      	ldr	r2, [r2, #20]
 801a88e:	441a      	add	r2, r3
 801a890:	f8c2 8008 	str.w	r8, [r2, #8]
 801a894:	68ea      	ldr	r2, [r5, #12]
 801a896:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a898:	6a12      	ldr	r2, [r2, #32]
 801a89a:	b111      	cbz	r1, 801a8a2 <coap_delete_all_resources+0x78>
 801a89c:	6950      	ldr	r0, [r2, #20]
 801a89e:	4401      	add	r1, r0
 801a8a0:	604b      	str	r3, [r1, #4]
 801a8a2:	6853      	ldr	r3, [r2, #4]
 801a8a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a8a6:	6810      	ldr	r0, [r2, #0]
 801a8a8:	3b01      	subs	r3, #1
 801a8aa:	400b      	ands	r3, r1
 801a8ac:	fb09 f303 	mul.w	r3, r9, r3
 801a8b0:	eb00 0e03 	add.w	lr, r0, r3
 801a8b4:	58c6      	ldr	r6, [r0, r3]
 801a8b6:	f8de 1004 	ldr.w	r1, [lr, #4]
 801a8ba:	3901      	subs	r1, #1
 801a8bc:	f8ce 1004 	str.w	r1, [lr, #4]
 801a8c0:	4566      	cmp	r6, ip
 801a8c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a8c4:	bf08      	it	eq
 801a8c6:	50c1      	streq	r1, [r0, r3]
 801a8c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a8ca:	b103      	cbz	r3, 801a8ce <coap_delete_all_resources+0xa4>
 801a8cc:	6119      	str	r1, [r3, #16]
 801a8ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a8d0:	b101      	cbz	r1, 801a8d4 <coap_delete_all_resources+0xaa>
 801a8d2:	60cb      	str	r3, [r1, #12]
 801a8d4:	68d3      	ldr	r3, [r2, #12]
 801a8d6:	3b01      	subs	r3, #1
 801a8d8:	60d3      	str	r3, [r2, #12]
 801a8da:	e7c8      	b.n	801a86e <coap_delete_all_resources+0x44>
 801a8dc:	f8c5 800c 	str.w	r8, [r5, #12]
 801a8e0:	e7d8      	b.n	801a894 <coap_delete_all_resources+0x6a>
    coap_free_resource(context->unknown_resource);
 801a8e2:	f7ff ff1d 	bl	801a720 <coap_free_resource>
    context->unknown_resource = NULL;
 801a8e6:	612c      	str	r4, [r5, #16]
}
 801a8e8:	e7a9      	b.n	801a83e <coap_delete_all_resources+0x14>
	...

0801a8ec <coap_get_resource_from_uri_path>:

coap_resource_t *
coap_get_resource_from_uri_path(coap_context_t *context, coap_str_const_t *uri_path) {
 801a8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  coap_resource_t *result;

  RESOURCES_FIND(context->resources, uri_path, result);
 801a8f0:	e9d1 4500 	ldrd	r4, r5, [r1]
 801a8f4:	4b6e      	ldr	r3, [pc, #440]	; (801aab0 <coap_get_resource_from_uri_path+0x1c4>)
 801a8f6:	4a6f      	ldr	r2, [pc, #444]	; (801aab4 <coap_get_resource_from_uri_path+0x1c8>)
 801a8f8:	462e      	mov	r6, r5
 801a8fa:	4627      	mov	r7, r4
 801a8fc:	469c      	mov	ip, r3
 801a8fe:	2f0b      	cmp	r7, #11
 801a900:	46b6      	mov	lr, r6
 801a902:	f106 060c 	add.w	r6, r6, #12
 801a906:	d80c      	bhi.n	801a922 <coap_get_resource_from_uri_path+0x36>
 801a908:	3f01      	subs	r7, #1
 801a90a:	1911      	adds	r1, r2, r4
 801a90c:	2f0a      	cmp	r7, #10
 801a90e:	f200 8088 	bhi.w	801aa22 <coap_get_resource_from_uri_path+0x136>
 801a912:	e8df f007 	tbb	[pc, r7]
 801a916:	7f83      	.short	0x7f83
 801a918:	7074777b 	.word	0x7074777b
 801a91c:	6064686c 	.word	0x6064686c
 801a920:	5c          	.byte	0x5c
 801a921:	00          	.byte	0x00
 801a922:	f816 1c0c 	ldrb.w	r1, [r6, #-12]
 801a926:	f816 ec0b 	ldrb.w	lr, [r6, #-11]
 801a92a:	448c      	add	ip, r1
 801a92c:	f816 1c0a 	ldrb.w	r1, [r6, #-10]
 801a930:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
 801a934:	eb0c 4c01 	add.w	ip, ip, r1, lsl #16
 801a938:	f816 1c09 	ldrb.w	r1, [r6, #-9]
 801a93c:	f816 ec07 	ldrb.w	lr, [r6, #-7]
 801a940:	eb0c 6c01 	add.w	ip, ip, r1, lsl #24
 801a944:	f816 1c08 	ldrb.w	r1, [r6, #-8]
 801a948:	440b      	add	r3, r1
 801a94a:	f816 1c06 	ldrb.w	r1, [r6, #-6]
 801a94e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 801a952:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801a956:	f816 1c05 	ldrb.w	r1, [r6, #-5]
 801a95a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801a95e:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 801a962:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801a966:	4411      	add	r1, r2
 801a968:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 801a96c:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 801a970:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801a974:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a978:	eb01 6102 	add.w	r1, r1, r2, lsl #24
 801a97c:	ebac 0203 	sub.w	r2, ip, r3
 801a980:	1a52      	subs	r2, r2, r1
 801a982:	ea82 3251 	eor.w	r2, r2, r1, lsr #13
 801a986:	1a5b      	subs	r3, r3, r1
 801a988:	1a9b      	subs	r3, r3, r2
 801a98a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 801a98e:	1a89      	subs	r1, r1, r2
 801a990:	1ac9      	subs	r1, r1, r3
 801a992:	ea81 3153 	eor.w	r1, r1, r3, lsr #13
 801a996:	1ad2      	subs	r2, r2, r3
 801a998:	1a52      	subs	r2, r2, r1
 801a99a:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 801a99e:	1a5b      	subs	r3, r3, r1
 801a9a0:	1a9b      	subs	r3, r3, r2
 801a9a2:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
 801a9a6:	1a89      	subs	r1, r1, r2
 801a9a8:	1ac9      	subs	r1, r1, r3
 801a9aa:	ea81 1153 	eor.w	r1, r1, r3, lsr #5
 801a9ae:	1ad2      	subs	r2, r2, r3
 801a9b0:	1a52      	subs	r2, r2, r1
 801a9b2:	ea82 0cd1 	eor.w	ip, r2, r1, lsr #3
 801a9b6:	1a5b      	subs	r3, r3, r1
 801a9b8:	eba3 030c 	sub.w	r3, r3, ip
 801a9bc:	ea83 238c 	eor.w	r3, r3, ip, lsl #10
 801a9c0:	eba1 010c 	sub.w	r1, r1, ip
 801a9c4:	1ac9      	subs	r1, r1, r3
 801a9c6:	ea81 32d3 	eor.w	r2, r1, r3, lsr #15
 801a9ca:	3f0c      	subs	r7, #12
 801a9cc:	e797      	b.n	801a8fe <coap_get_resource_from_uri_path+0x12>
 801a9ce:	f89e 200a 	ldrb.w	r2, [lr, #10]
 801a9d2:	eb01 6102 	add.w	r1, r1, r2, lsl #24
 801a9d6:	f89e 2009 	ldrb.w	r2, [lr, #9]
 801a9da:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801a9de:	f89e 2008 	ldrb.w	r2, [lr, #8]
 801a9e2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 801a9e6:	f89e 2007 	ldrb.w	r2, [lr, #7]
 801a9ea:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 801a9ee:	f89e 2006 	ldrb.w	r2, [lr, #6]
 801a9f2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801a9f6:	f89e 2005 	ldrb.w	r2, [lr, #5]
 801a9fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a9fe:	f89e 2004 	ldrb.w	r2, [lr, #4]
 801aa02:	4413      	add	r3, r2
 801aa04:	f89e 2003 	ldrb.w	r2, [lr, #3]
 801aa08:	eb0c 6c02 	add.w	ip, ip, r2, lsl #24
 801aa0c:	f89e 2002 	ldrb.w	r2, [lr, #2]
 801aa10:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 801aa14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801aa18:	eb0c 2c02 	add.w	ip, ip, r2, lsl #8
 801aa1c:	f89e 2000 	ldrb.w	r2, [lr]
 801aa20:	4494      	add	ip, r2
 801aa22:	18ca      	adds	r2, r1, r3
 801aa24:	ebac 0202 	sub.w	r2, ip, r2
 801aa28:	ea82 3251 	eor.w	r2, r2, r1, lsr #13
 801aa2c:	1a5b      	subs	r3, r3, r1
 801aa2e:	1a9b      	subs	r3, r3, r2
 801aa30:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
 801aa34:	1a89      	subs	r1, r1, r2
 801aa36:	1ac9      	subs	r1, r1, r3
 801aa38:	ea81 3153 	eor.w	r1, r1, r3, lsr #13
 801aa3c:	1ad2      	subs	r2, r2, r3
 801aa3e:	1a52      	subs	r2, r2, r1
 801aa40:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 801aa44:	1a5b      	subs	r3, r3, r1
 801aa46:	1a9b      	subs	r3, r3, r2
 801aa48:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
 801aa4c:	1a89      	subs	r1, r1, r2
 801aa4e:	1ac9      	subs	r1, r1, r3
 801aa50:	ea81 1153 	eor.w	r1, r1, r3, lsr #5
 801aa54:	1ad2      	subs	r2, r2, r3
 801aa56:	1a52      	subs	r2, r2, r1
 801aa58:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
 801aa5c:	1a5b      	subs	r3, r3, r1
 801aa5e:	1a9b      	subs	r3, r3, r2
 801aa60:	ea83 2382 	eor.w	r3, r3, r2, lsl #10
 801aa64:	1a8e      	subs	r6, r1, r2
 801aa66:	68c7      	ldr	r7, [r0, #12]
 801aa68:	1af6      	subs	r6, r6, r3
 801aa6a:	ea86 36d3 	eor.w	r6, r6, r3, lsr #15
 801aa6e:	b1e7      	cbz	r7, 801aaaa <coap_get_resource_from_uri_path+0x1be>
 801aa70:	6a3a      	ldr	r2, [r7, #32]
 801aa72:	6853      	ldr	r3, [r2, #4]
 801aa74:	6810      	ldr	r0, [r2, #0]
 801aa76:	3b01      	subs	r3, #1
 801aa78:	4033      	ands	r3, r6
 801aa7a:	210c      	movs	r1, #12
 801aa7c:	434b      	muls	r3, r1
 801aa7e:	58c7      	ldr	r7, [r0, r3]
 801aa80:	b19f      	cbz	r7, 801aaaa <coap_get_resource_from_uri_path+0x1be>
 801aa82:	6953      	ldr	r3, [r2, #20]
 801aa84:	f1c3 0800 	rsb	r8, r3, #0
 801aa88:	1aff      	subs	r7, r7, r3
 801aa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa8c:	42b3      	cmp	r3, r6
 801aa8e:	d108      	bne.n	801aaa2 <coap_get_resource_from_uri_path+0x1b6>
 801aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa92:	42a3      	cmp	r3, r4
 801aa94:	d105      	bne.n	801aaa2 <coap_get_resource_from_uri_path+0x1b6>
 801aa96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aa98:	4622      	mov	r2, r4
 801aa9a:	4629      	mov	r1, r5
 801aa9c:	f001 fbc2 	bl	801c224 <memcmp>
 801aaa0:	b118      	cbz	r0, 801aaaa <coap_get_resource_from_uri_path+0x1be>
 801aaa2:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 801aaa4:	b10f      	cbz	r7, 801aaaa <coap_get_resource_from_uri_path+0x1be>
 801aaa6:	4447      	add	r7, r8
 801aaa8:	e7ef      	b.n	801aa8a <coap_get_resource_from_uri_path+0x19e>

  return result;
}
 801aaaa:	4638      	mov	r0, r7
 801aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab0:	9e3779b9 	.word	0x9e3779b9
 801aab4:	feedbeef 	.word	0xfeedbeef

0801aab8 <coap_add_resource>:
coap_add_resource(coap_context_t *context, coap_resource_t *resource) {
 801aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (resource->is_unknown) {
 801aabc:	780b      	ldrb	r3, [r1, #0]
 801aabe:	06db      	lsls	r3, r3, #27
coap_add_resource(coap_context_t *context, coap_resource_t *resource) {
 801aac0:	b085      	sub	sp, #20
 801aac2:	4605      	mov	r5, r0
 801aac4:	460c      	mov	r4, r1
  if (resource->is_unknown) {
 801aac6:	d507      	bpl.n	801aad8 <coap_add_resource+0x20>
    if (context->unknown_resource)
 801aac8:	6900      	ldr	r0, [r0, #16]
 801aaca:	b108      	cbz	r0, 801aad0 <coap_add_resource+0x18>
      coap_free_resource(context->unknown_resource);
 801aacc:	f7ff fe28 	bl	801a720 <coap_free_resource>
    context->unknown_resource = resource;
 801aad0:	612c      	str	r4, [r5, #16]
}
 801aad2:	b005      	add	sp, #20
 801aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    coap_resource_t *r = coap_get_resource_from_uri_path(context,
 801aad8:	6c89      	ldr	r1, [r1, #72]	; 0x48
 801aada:	f7ff ff07 	bl	801a8ec <coap_get_resource_from_uri_path>
    if (r) {
 801aade:	4606      	mov	r6, r0
 801aae0:	b180      	cbz	r0, 801ab04 <coap_add_resource+0x4c>
      coap_log(LOG_WARNING,
 801aae2:	f7fa fa7f 	bl	8014fe4 <coap_get_log_level>
 801aae6:	2803      	cmp	r0, #3
 801aae8:	d908      	bls.n	801aafc <coap_add_resource+0x44>
 801aaea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801aaec:	49b8      	ldr	r1, [pc, #736]	; (801add0 <coap_add_resource+0x318>)
 801aaee:	e9d2 3200 	ldrd	r3, r2, [r2]
 801aaf2:	2004      	movs	r0, #4
 801aaf4:	9200      	str	r2, [sp, #0]
 801aaf6:	461a      	mov	r2, r3
 801aaf8:	f7fa fade 	bl	80150b8 <coap_log_impl>
      coap_delete_resource(context, r);
 801aafc:	4631      	mov	r1, r6
 801aafe:	4628      	mov	r0, r5
 801ab00:	f7ff fe3e 	bl	801a780 <coap_delete_resource>
    RESOURCES_ADD(context->resources, resource);
 801ab04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ab06:	4ab3      	ldr	r2, [pc, #716]	; (801add4 <coap_add_resource+0x31c>)
 801ab08:	e9d3 1000 	ldrd	r1, r0, [r3]
 801ab0c:	4bb2      	ldr	r3, [pc, #712]	; (801add8 <coap_add_resource+0x320>)
 801ab0e:	4686      	mov	lr, r0
 801ab10:	468c      	mov	ip, r1
 801ab12:	4616      	mov	r6, r2
 801ab14:	f1bc 0f0b 	cmp.w	ip, #11
 801ab18:	4677      	mov	r7, lr
 801ab1a:	f10e 0e0c 	add.w	lr, lr, #12
 801ab1e:	d80e      	bhi.n	801ab3e <coap_add_resource+0x86>
 801ab20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab24:	440b      	add	r3, r1
 801ab26:	f1bc 0f0a 	cmp.w	ip, #10
 801ab2a:	f200 8085 	bhi.w	801ac38 <coap_add_resource+0x180>
 801ab2e:	e8df f00c 	tbb	[pc, ip]
 801ab32:	7d81      	.short	0x7d81
 801ab34:	6e727579 	.word	0x6e727579
 801ab38:	5e62666a 	.word	0x5e62666a
 801ab3c:	5a          	.byte	0x5a
 801ab3d:	00          	.byte	0x00
 801ab3e:	f81e 7c0c 	ldrb.w	r7, [lr, #-12]
 801ab42:	f81e 8c0b 	ldrb.w	r8, [lr, #-11]
 801ab46:	443e      	add	r6, r7
 801ab48:	f81e 7c0a 	ldrb.w	r7, [lr, #-10]
 801ab4c:	eb06 2608 	add.w	r6, r6, r8, lsl #8
 801ab50:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 801ab54:	f81e 7c09 	ldrb.w	r7, [lr, #-9]
 801ab58:	f81e 8c07 	ldrb.w	r8, [lr, #-7]
 801ab5c:	eb06 6607 	add.w	r6, r6, r7, lsl #24
 801ab60:	f81e 7c08 	ldrb.w	r7, [lr, #-8]
 801ab64:	443a      	add	r2, r7
 801ab66:	f81e 7c06 	ldrb.w	r7, [lr, #-6]
 801ab6a:	eb02 2208 	add.w	r2, r2, r8, lsl #8
 801ab6e:	eb02 4207 	add.w	r2, r2, r7, lsl #16
 801ab72:	f81e 7c05 	ldrb.w	r7, [lr, #-5]
 801ab76:	f81e 8c03 	ldrb.w	r8, [lr, #-3]
 801ab7a:	eb02 6207 	add.w	r2, r2, r7, lsl #24
 801ab7e:	f81e 7c04 	ldrb.w	r7, [lr, #-4]
 801ab82:	443b      	add	r3, r7
 801ab84:	f81e 7c02 	ldrb.w	r7, [lr, #-2]
 801ab88:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 801ab8c:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 801ab90:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 801ab94:	1ab6      	subs	r6, r6, r2
 801ab96:	eb03 6307 	add.w	r3, r3, r7, lsl #24
 801ab9a:	1af6      	subs	r6, r6, r3
 801ab9c:	ea86 3653 	eor.w	r6, r6, r3, lsr #13
 801aba0:	1ad2      	subs	r2, r2, r3
 801aba2:	1b92      	subs	r2, r2, r6
 801aba4:	ea82 2206 	eor.w	r2, r2, r6, lsl #8
 801aba8:	1b9b      	subs	r3, r3, r6
 801abaa:	1a9b      	subs	r3, r3, r2
 801abac:	ea83 3352 	eor.w	r3, r3, r2, lsr #13
 801abb0:	1ab6      	subs	r6, r6, r2
 801abb2:	1af6      	subs	r6, r6, r3
 801abb4:	ea86 3613 	eor.w	r6, r6, r3, lsr #12
 801abb8:	1ad2      	subs	r2, r2, r3
 801abba:	1b92      	subs	r2, r2, r6
 801abbc:	ea82 4206 	eor.w	r2, r2, r6, lsl #16
 801abc0:	1b9b      	subs	r3, r3, r6
 801abc2:	1a9b      	subs	r3, r3, r2
 801abc4:	ea83 1352 	eor.w	r3, r3, r2, lsr #5
 801abc8:	1ab6      	subs	r6, r6, r2
 801abca:	1af6      	subs	r6, r6, r3
 801abcc:	ea86 06d3 	eor.w	r6, r6, r3, lsr #3
 801abd0:	1ad2      	subs	r2, r2, r3
 801abd2:	1b92      	subs	r2, r2, r6
 801abd4:	ea82 2286 	eor.w	r2, r2, r6, lsl #10
 801abd8:	1b9b      	subs	r3, r3, r6
 801abda:	1a9b      	subs	r3, r3, r2
 801abdc:	ea83 33d2 	eor.w	r3, r3, r2, lsr #15
 801abe0:	f1ac 0c0c 	sub.w	ip, ip, #12
 801abe4:	e796      	b.n	801ab14 <coap_add_resource+0x5c>
 801abe6:	f897 c00a 	ldrb.w	ip, [r7, #10]
 801abea:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 801abee:	f897 c009 	ldrb.w	ip, [r7, #9]
 801abf2:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 801abf6:	f897 c008 	ldrb.w	ip, [r7, #8]
 801abfa:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 801abfe:	f897 c007 	ldrb.w	ip, [r7, #7]
 801ac02:	eb02 620c 	add.w	r2, r2, ip, lsl #24
 801ac06:	f897 c006 	ldrb.w	ip, [r7, #6]
 801ac0a:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 801ac0e:	f897 c005 	ldrb.w	ip, [r7, #5]
 801ac12:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 801ac16:	f897 c004 	ldrb.w	ip, [r7, #4]
 801ac1a:	4462      	add	r2, ip
 801ac1c:	f897 c003 	ldrb.w	ip, [r7, #3]
 801ac20:	eb06 660c 	add.w	r6, r6, ip, lsl #24
 801ac24:	f897 c002 	ldrb.w	ip, [r7, #2]
 801ac28:	eb06 460c 	add.w	r6, r6, ip, lsl #16
 801ac2c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ac30:	eb06 260c 	add.w	r6, r6, ip, lsl #8
 801ac34:	783f      	ldrb	r7, [r7, #0]
 801ac36:	443e      	add	r6, r7
 801ac38:	189f      	adds	r7, r3, r2
 801ac3a:	1bf6      	subs	r6, r6, r7
 801ac3c:	ea86 3653 	eor.w	r6, r6, r3, lsr #13
 801ac40:	1ad2      	subs	r2, r2, r3
 801ac42:	1b92      	subs	r2, r2, r6
 801ac44:	ea82 2206 	eor.w	r2, r2, r6, lsl #8
 801ac48:	1b9b      	subs	r3, r3, r6
 801ac4a:	1a9b      	subs	r3, r3, r2
 801ac4c:	ea83 3352 	eor.w	r3, r3, r2, lsr #13
 801ac50:	1ab6      	subs	r6, r6, r2
 801ac52:	1af6      	subs	r6, r6, r3
 801ac54:	ea86 3613 	eor.w	r6, r6, r3, lsr #12
 801ac58:	1ad2      	subs	r2, r2, r3
 801ac5a:	1b92      	subs	r2, r2, r6
 801ac5c:	ea82 4206 	eor.w	r2, r2, r6, lsl #16
 801ac60:	1b9b      	subs	r3, r3, r6
 801ac62:	1a9b      	subs	r3, r3, r2
 801ac64:	ea83 1352 	eor.w	r3, r3, r2, lsr #5
 801ac68:	1ab6      	subs	r6, r6, r2
 801ac6a:	1af6      	subs	r6, r6, r3
 801ac6c:	ea86 06d3 	eor.w	r6, r6, r3, lsr #3
 801ac70:	1ad2      	subs	r2, r2, r3
 801ac72:	1b92      	subs	r2, r2, r6
 801ac74:	ea82 2286 	eor.w	r2, r2, r6, lsl #10
 801ac78:	1b9e      	subs	r6, r3, r6
 801ac7a:	1ab6      	subs	r6, r6, r2
 801ac7c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801ac80:	ea86 36d2 	eor.w	r6, r6, r2, lsr #15
 801ac84:	e9c4 010d 	strd	r0, r1, [r4, #52]	; 0x34
 801ac88:	63e6      	str	r6, [r4, #60]	; 0x3c
 801ac8a:	f104 0920 	add.w	r9, r4, #32
 801ac8e:	f1b8 0f00 	cmp.w	r8, #0
 801ac92:	f040 8087 	bne.w	801ada4 <coap_add_resource+0x2ec>
 801ac96:	e9c4 8809 	strd	r8, r8, [r4, #36]	; 0x24
 801ac9a:	202c      	movs	r0, #44	; 0x2c
 801ac9c:	60ec      	str	r4, [r5, #12]
 801ac9e:	f001 fab1 	bl	801c204 <malloc>
 801aca2:	4607      	mov	r7, r0
 801aca4:	6220      	str	r0, [r4, #32]
 801aca6:	b918      	cbnz	r0, 801acb0 <coap_add_resource+0x1f8>
 801aca8:	f04f 30ff 	mov.w	r0, #4294967295
 801acac:	f000 ff0e 	bl	801bacc <exit>
 801acb0:	f04f 0a20 	mov.w	sl, #32
 801acb4:	4652      	mov	r2, sl
 801acb6:	4641      	mov	r1, r8
 801acb8:	300c      	adds	r0, #12
 801acba:	f001 fae9 	bl	801c290 <memset>
 801acbe:	2305      	movs	r3, #5
 801acc0:	f8c7 9010 	str.w	r9, [r7, #16]
 801acc4:	f8c7 a004 	str.w	sl, [r7, #4]
 801acc8:	60bb      	str	r3, [r7, #8]
 801acca:	f8c7 a014 	str.w	sl, [r7, #20]
 801acce:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801acd2:	f001 fa97 	bl	801c204 <malloc>
 801acd6:	6038      	str	r0, [r7, #0]
 801acd8:	2800      	cmp	r0, #0
 801acda:	d0e5      	beq.n	801aca8 <coap_add_resource+0x1f0>
 801acdc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801ace0:	4641      	mov	r1, r8
 801ace2:	f001 fad5 	bl	801c290 <memset>
 801ace6:	4b3d      	ldr	r3, [pc, #244]	; (801addc <coap_add_resource+0x324>)
 801ace8:	62bb      	str	r3, [r7, #40]	; 0x28
 801acea:	68eb      	ldr	r3, [r5, #12]
 801acec:	6a1b      	ldr	r3, [r3, #32]
 801acee:	68da      	ldr	r2, [r3, #12]
 801acf0:	6819      	ldr	r1, [r3, #0]
 801acf2:	3201      	adds	r2, #1
 801acf4:	60da      	str	r2, [r3, #12]
 801acf6:	685a      	ldr	r2, [r3, #4]
 801acf8:	3a01      	subs	r2, #1
 801acfa:	4032      	ands	r2, r6
 801acfc:	260c      	movs	r6, #12
 801acfe:	4356      	muls	r6, r2
 801ad00:	198b      	adds	r3, r1, r6
 801ad02:	5988      	ldr	r0, [r1, r6]
 801ad04:	685a      	ldr	r2, [r3, #4]
 801ad06:	2500      	movs	r5, #0
 801ad08:	3201      	adds	r2, #1
 801ad0a:	605a      	str	r2, [r3, #4]
 801ad0c:	6320      	str	r0, [r4, #48]	; 0x30
 801ad0e:	62e5      	str	r5, [r4, #44]	; 0x2c
 801ad10:	b108      	cbz	r0, 801ad16 <coap_add_resource+0x25e>
 801ad12:	f8c0 900c 	str.w	r9, [r0, #12]
 801ad16:	f841 9006 	str.w	r9, [r1, r6]
 801ad1a:	6899      	ldr	r1, [r3, #8]
 801ad1c:	230a      	movs	r3, #10
 801ad1e:	fb01 3303 	mla	r3, r1, r3, r3
 801ad22:	429a      	cmp	r2, r3
 801ad24:	f4ff aed5 	bcc.w	801aad2 <coap_add_resource+0x1a>
 801ad28:	6a25      	ldr	r5, [r4, #32]
 801ad2a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801ad2c:	2e00      	cmp	r6, #0
 801ad2e:	f47f aed0 	bne.w	801aad2 <coap_add_resource+0x1a>
 801ad32:	686b      	ldr	r3, [r5, #4]
 801ad34:	2218      	movs	r2, #24
 801ad36:	435a      	muls	r2, r3
 801ad38:	4610      	mov	r0, r2
 801ad3a:	9202      	str	r2, [sp, #8]
 801ad3c:	f001 fa62 	bl	801c204 <malloc>
 801ad40:	4607      	mov	r7, r0
 801ad42:	2800      	cmp	r0, #0
 801ad44:	d0b0      	beq.n	801aca8 <coap_add_resource+0x1f0>
 801ad46:	9a02      	ldr	r2, [sp, #8]
 801ad48:	4631      	mov	r1, r6
 801ad4a:	f001 faa1 	bl	801c290 <memset>
 801ad4e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 801ad52:	68aa      	ldr	r2, [r5, #8]
 801ad54:	68e9      	ldr	r1, [r5, #12]
 801ad56:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 801ad5a:	1c53      	adds	r3, r2, #1
 801ad5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ad60:	fa21 f303 	lsr.w	r3, r1, r3
 801ad64:	ea01 010c 	and.w	r1, r1, ip
 801ad68:	2900      	cmp	r1, #0
 801ad6a:	bf18      	it	ne
 801ad6c:	3301      	addne	r3, #1
 801ad6e:	e9c5 3606 	strd	r3, r6, [r5, #24]
 801ad72:	682a      	ldr	r2, [r5, #0]
 801ad74:	9202      	str	r2, [sp, #8]
 801ad76:	f04f 080c 	mov.w	r8, #12
 801ad7a:	45b6      	cmp	lr, r6
 801ad7c:	d121      	bne.n	801adc2 <coap_add_resource+0x30a>
 801ad7e:	9802      	ldr	r0, [sp, #8]
 801ad80:	f001 fa48 	bl	801c214 <free>
 801ad84:	6a23      	ldr	r3, [r4, #32]
 801ad86:	685a      	ldr	r2, [r3, #4]
 801ad88:	68d9      	ldr	r1, [r3, #12]
 801ad8a:	601f      	str	r7, [r3, #0]
 801ad8c:	0052      	lsls	r2, r2, #1
 801ad8e:	605a      	str	r2, [r3, #4]
 801ad90:	689a      	ldr	r2, [r3, #8]
 801ad92:	3201      	adds	r2, #1
 801ad94:	609a      	str	r2, [r3, #8]
 801ad96:	69da      	ldr	r2, [r3, #28]
 801ad98:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
 801ad9c:	d848      	bhi.n	801ae30 <coap_add_resource+0x378>
 801ad9e:	2200      	movs	r2, #0
 801ada0:	621a      	str	r2, [r3, #32]
 801ada2:	e696      	b.n	801aad2 <coap_add_resource+0x1a>
 801ada4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801ada8:	6223      	str	r3, [r4, #32]
 801adaa:	2300      	movs	r3, #0
 801adac:	62a3      	str	r3, [r4, #40]	; 0x28
 801adae:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801adb2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801adb6:	1a8a      	subs	r2, r1, r2
 801adb8:	6262      	str	r2, [r4, #36]	; 0x24
 801adba:	608c      	str	r4, [r1, #8]
 801adbc:	f8c3 9010 	str.w	r9, [r3, #16]
 801adc0:	e793      	b.n	801acea <coap_add_resource+0x232>
 801adc2:	9902      	ldr	r1, [sp, #8]
 801adc4:	fb08 f206 	mul.w	r2, r8, r6
 801adc8:	588a      	ldr	r2, [r1, r2]
 801adca:	b94a      	cbnz	r2, 801ade0 <coap_add_resource+0x328>
 801adcc:	3601      	adds	r6, #1
 801adce:	e7d4      	b.n	801ad7a <coap_add_resource+0x2c2>
 801add0:	08031766 	.word	0x08031766
 801add4:	9e3779b9 	.word	0x9e3779b9
 801add8:	feedbeef 	.word	0xfeedbeef
 801addc:	a0111fe1 	.word	0xa0111fe1
 801ade0:	6911      	ldr	r1, [r2, #16]
 801ade2:	9103      	str	r1, [sp, #12]
 801ade4:	69d1      	ldr	r1, [r2, #28]
 801ade6:	ea0c 0101 	and.w	r1, ip, r1
 801adea:	fb08 f101 	mul.w	r1, r8, r1
 801adee:	eb07 0901 	add.w	r9, r7, r1
 801adf2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801adf6:	f100 0a01 	add.w	sl, r0, #1
 801adfa:	4553      	cmp	r3, sl
 801adfc:	f8c9 a004 	str.w	sl, [r9, #4]
 801ae00:	d208      	bcs.n	801ae14 <coap_add_resource+0x35c>
 801ae02:	fbba faf3 	udiv	sl, sl, r3
 801ae06:	69e8      	ldr	r0, [r5, #28]
 801ae08:	f100 0b01 	add.w	fp, r0, #1
 801ae0c:	f8c5 b01c 	str.w	fp, [r5, #28]
 801ae10:	f8c9 a008 	str.w	sl, [r9, #8]
 801ae14:	f857 9001 	ldr.w	r9, [r7, r1]
 801ae18:	f8c2 9010 	str.w	r9, [r2, #16]
 801ae1c:	2000      	movs	r0, #0
 801ae1e:	60d0      	str	r0, [r2, #12]
 801ae20:	f1b9 0f00 	cmp.w	r9, #0
 801ae24:	d001      	beq.n	801ae2a <coap_add_resource+0x372>
 801ae26:	f8c9 200c 	str.w	r2, [r9, #12]
 801ae2a:	507a      	str	r2, [r7, r1]
 801ae2c:	9a03      	ldr	r2, [sp, #12]
 801ae2e:	e7cc      	b.n	801adca <coap_add_resource+0x312>
 801ae30:	6a1a      	ldr	r2, [r3, #32]
 801ae32:	3201      	adds	r2, #1
 801ae34:	2a01      	cmp	r2, #1
 801ae36:	621a      	str	r2, [r3, #32]
 801ae38:	bf84      	itt	hi
 801ae3a:	2201      	movhi	r2, #1
 801ae3c:	625a      	strhi	r2, [r3, #36]	; 0x24
}
 801ae3e:	e648      	b.n	801aad2 <coap_add_resource+0x1a>

0801ae40 <coap_print_link>:

coap_print_status_t
coap_print_link(const coap_resource_t *resource,
                unsigned char *buf, size_t *len, size_t *offset) {
 801ae40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  unsigned char *p = buf;
  const uint8_t *bufend = buf + *len;
 801ae44:	6816      	ldr	r6, [r2, #0]
  coap_attr_t *attr;
  coap_print_status_t result = 0;
  size_t output_length = 0;
  const size_t old_offset = *offset;
 801ae46:	f8d3 8000 	ldr.w	r8, [r3]
  const uint8_t *bufend = buf + *len;
 801ae4a:	440e      	add	r6, r1
                unsigned char *buf, size_t *len, size_t *offset) {
 801ae4c:	4607      	mov	r7, r0

  *len = 0;
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '<', *len);
 801ae4e:	42b1      	cmp	r1, r6
  *len = 0;
 801ae50:	f04f 0000 	mov.w	r0, #0
 801ae54:	6010      	str	r0, [r2, #0]
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '<', *len);
 801ae56:	d252      	bcs.n	801aefe <coap_print_link+0xbe>
 801ae58:	6818      	ldr	r0, [r3, #0]
 801ae5a:	2800      	cmp	r0, #0
 801ae5c:	d14d      	bne.n	801aefa <coap_print_link+0xba>
 801ae5e:	460c      	mov	r4, r1
 801ae60:	203c      	movs	r0, #60	; 0x3c
 801ae62:	f804 0b01 	strb.w	r0, [r4], #1
 801ae66:	6810      	ldr	r0, [r2, #0]
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '/', *len);
 801ae68:	42b4      	cmp	r4, r6
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '<', *len);
 801ae6a:	f100 0001 	add.w	r0, r0, #1
 801ae6e:	6010      	str	r0, [r2, #0]
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '/', *len);
 801ae70:	d205      	bcs.n	801ae7e <coap_print_link+0x3e>
 801ae72:	6818      	ldr	r0, [r3, #0]
 801ae74:	2800      	cmp	r0, #0
 801ae76:	d144      	bne.n	801af02 <coap_print_link+0xc2>
 801ae78:	202f      	movs	r0, #47	; 0x2f
 801ae7a:	f804 0b01 	strb.w	r0, [r4], #1
 801ae7e:	6810      	ldr	r0, [r2, #0]
 801ae80:	3001      	adds	r0, #1
 801ae82:	6010      	str	r0, [r2, #0]

  COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801ae84:	2500      	movs	r5, #0
 801ae86:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
 801ae8a:	f8dc 0000 	ldr.w	r0, [ip]
 801ae8e:	42a8      	cmp	r0, r5
 801ae90:	d83a      	bhi.n	801af08 <coap_print_link+0xc8>
                        resource->uri_path->s, resource->uri_path->length, *len);

  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '>', *len);
 801ae92:	42b4      	cmp	r4, r6
 801ae94:	d205      	bcs.n	801aea2 <coap_print_link+0x62>
 801ae96:	6818      	ldr	r0, [r3, #0]
 801ae98:	2800      	cmp	r0, #0
 801ae9a:	d146      	bne.n	801af2a <coap_print_link+0xea>
 801ae9c:	203e      	movs	r0, #62	; 0x3e
 801ae9e:	f804 0b01 	strb.w	r0, [r4], #1
 801aea2:	6810      	ldr	r0, [r2, #0]

  LL_FOREACH(resource->link_attr, attr) {
 801aea4:	6c3d      	ldr	r5, [r7, #64]	; 0x40
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '>', *len);
 801aea6:	3001      	adds	r0, #1
 801aea8:	6010      	str	r0, [r2, #0]

    PRINT_COND_WITH_OFFSET(p, bufend, *offset, ';', *len);
 801aeaa:	f04f 0e3b 	mov.w	lr, #59	; 0x3b

    COPY_COND_WITH_OFFSET(p, bufend, *offset,
                          attr->name->s, attr->name->length, *len);

    if (attr->value && attr->value->s) {
      PRINT_COND_WITH_OFFSET(p, bufend, *offset, '=', *len);
 801aeae:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
  LL_FOREACH(resource->link_attr, attr) {
 801aeb2:	2d00      	cmp	r5, #0
 801aeb4:	d13c      	bne.n	801af30 <coap_print_link+0xf0>
      COPY_COND_WITH_OFFSET(p, bufend, *offset,
                            attr->value->s, attr->value->length, *len);
    }

  }
  if (resource->observable) {
 801aeb6:	7838      	ldrb	r0, [r7, #0]
 801aeb8:	0740      	lsls	r0, r0, #29
 801aeba:	d50f      	bpl.n	801aedc <coap_print_link+0x9c>
    COPY_COND_WITH_OFFSET(p, bufend, *offset, ";obs", 4, *len);
 801aebc:	4f49      	ldr	r7, [pc, #292]	; (801afe4 <coap_print_link+0x1a4>)
 801aebe:	42a6      	cmp	r6, r4
 801aec0:	d906      	bls.n	801aed0 <coap_print_link+0x90>
 801aec2:	6818      	ldr	r0, [r3, #0]
 801aec4:	2800      	cmp	r0, #0
 801aec6:	f040 8087 	bne.w	801afd8 <coap_print_link+0x198>
 801aeca:	5de8      	ldrb	r0, [r5, r7]
 801aecc:	f804 0b01 	strb.w	r0, [r4], #1
 801aed0:	6810      	ldr	r0, [r2, #0]
 801aed2:	3501      	adds	r5, #1
 801aed4:	3001      	adds	r0, #1
 801aed6:	2d04      	cmp	r5, #4
 801aed8:	6010      	str	r0, [r2, #0]
 801aeda:	d1f0      	bne.n	801aebe <coap_print_link+0x7e>
  }

  output_length = p - buf;
 801aedc:	1a60      	subs	r0, r4, r1

  if (output_length > COAP_PRINT_STATUS_MAX) {
 801aede:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 801aee2:	d27c      	bcs.n	801afde <coap_print_link+0x19e>
    return COAP_PRINT_STATUS_ERROR;
  }

  result = (coap_print_status_t)output_length;

  if (result + old_offset - *offset < *len) {
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	eba8 0803 	sub.w	r8, r8, r3
 801aeea:	6813      	ldr	r3, [r2, #0]
 801aeec:	4480      	add	r8, r0
 801aeee:	4598      	cmp	r8, r3
 801aef0:	d201      	bcs.n	801aef6 <coap_print_link+0xb6>
    result |= COAP_PRINT_STATUS_TRUNC;
 801aef2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
  }

  return result;
}
 801aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '<', *len);
 801aefa:	3801      	subs	r0, #1
 801aefc:	6018      	str	r0, [r3, #0]
 801aefe:	460c      	mov	r4, r1
 801af00:	e7b1      	b.n	801ae66 <coap_print_link+0x26>
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '/', *len);
 801af02:	3801      	subs	r0, #1
 801af04:	6018      	str	r0, [r3, #0]
 801af06:	e7ba      	b.n	801ae7e <coap_print_link+0x3e>
  COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801af08:	42b4      	cmp	r4, r6
 801af0a:	d206      	bcs.n	801af1a <coap_print_link+0xda>
 801af0c:	6818      	ldr	r0, [r3, #0]
 801af0e:	b948      	cbnz	r0, 801af24 <coap_print_link+0xe4>
 801af10:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801af14:	5d40      	ldrb	r0, [r0, r5]
 801af16:	f804 0b01 	strb.w	r0, [r4], #1
 801af1a:	6810      	ldr	r0, [r2, #0]
 801af1c:	3001      	adds	r0, #1
 801af1e:	6010      	str	r0, [r2, #0]
 801af20:	3501      	adds	r5, #1
 801af22:	e7b0      	b.n	801ae86 <coap_print_link+0x46>
 801af24:	3801      	subs	r0, #1
 801af26:	6018      	str	r0, [r3, #0]
 801af28:	e7f7      	b.n	801af1a <coap_print_link+0xda>
  PRINT_COND_WITH_OFFSET(p, bufend, *offset, '>', *len);
 801af2a:	3801      	subs	r0, #1
 801af2c:	6018      	str	r0, [r3, #0]
 801af2e:	e7b8      	b.n	801aea2 <coap_print_link+0x62>
    PRINT_COND_WITH_OFFSET(p, bufend, *offset, ';', *len);
 801af30:	42b4      	cmp	r4, r6
 801af32:	d203      	bcs.n	801af3c <coap_print_link+0xfc>
 801af34:	6818      	ldr	r0, [r3, #0]
 801af36:	bb18      	cbnz	r0, 801af80 <coap_print_link+0x140>
 801af38:	f804 eb01 	strb.w	lr, [r4], #1
 801af3c:	6810      	ldr	r0, [r2, #0]
 801af3e:	3001      	adds	r0, #1
 801af40:	6010      	str	r0, [r2, #0]
    COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801af42:	f04f 0900 	mov.w	r9, #0
 801af46:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801af4a:	f8da 0000 	ldr.w	r0, [sl]
 801af4e:	4548      	cmp	r0, r9
 801af50:	d819      	bhi.n	801af86 <coap_print_link+0x146>
    if (attr->value && attr->value->s) {
 801af52:	68a8      	ldr	r0, [r5, #8]
 801af54:	b190      	cbz	r0, 801af7c <coap_print_link+0x13c>
 801af56:	6840      	ldr	r0, [r0, #4]
 801af58:	b180      	cbz	r0, 801af7c <coap_print_link+0x13c>
      PRINT_COND_WITH_OFFSET(p, bufend, *offset, '=', *len);
 801af5a:	42b4      	cmp	r4, r6
 801af5c:	d203      	bcs.n	801af66 <coap_print_link+0x126>
 801af5e:	6818      	ldr	r0, [r3, #0]
 801af60:	bb20      	cbnz	r0, 801afac <coap_print_link+0x16c>
 801af62:	f804 cb01 	strb.w	ip, [r4], #1
 801af66:	6810      	ldr	r0, [r2, #0]
 801af68:	3001      	adds	r0, #1
 801af6a:	6010      	str	r0, [r2, #0]
      COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801af6c:	f04f 0900 	mov.w	r9, #0
 801af70:	f8d5 a008 	ldr.w	sl, [r5, #8]
 801af74:	f8da 0000 	ldr.w	r0, [sl]
 801af78:	4548      	cmp	r0, r9
 801af7a:	d81a      	bhi.n	801afb2 <coap_print_link+0x172>
  LL_FOREACH(resource->link_attr, attr) {
 801af7c:	682d      	ldr	r5, [r5, #0]
 801af7e:	e798      	b.n	801aeb2 <coap_print_link+0x72>
    PRINT_COND_WITH_OFFSET(p, bufend, *offset, ';', *len);
 801af80:	3801      	subs	r0, #1
 801af82:	6018      	str	r0, [r3, #0]
 801af84:	e7da      	b.n	801af3c <coap_print_link+0xfc>
    COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801af86:	42b4      	cmp	r4, r6
 801af88:	d207      	bcs.n	801af9a <coap_print_link+0x15a>
 801af8a:	6818      	ldr	r0, [r3, #0]
 801af8c:	b958      	cbnz	r0, 801afa6 <coap_print_link+0x166>
 801af8e:	f8da 0004 	ldr.w	r0, [sl, #4]
 801af92:	f810 0009 	ldrb.w	r0, [r0, r9]
 801af96:	f804 0b01 	strb.w	r0, [r4], #1
 801af9a:	6810      	ldr	r0, [r2, #0]
 801af9c:	3001      	adds	r0, #1
 801af9e:	6010      	str	r0, [r2, #0]
 801afa0:	f109 0901 	add.w	r9, r9, #1
 801afa4:	e7cf      	b.n	801af46 <coap_print_link+0x106>
 801afa6:	3801      	subs	r0, #1
 801afa8:	6018      	str	r0, [r3, #0]
 801afaa:	e7f6      	b.n	801af9a <coap_print_link+0x15a>
      PRINT_COND_WITH_OFFSET(p, bufend, *offset, '=', *len);
 801afac:	3801      	subs	r0, #1
 801afae:	6018      	str	r0, [r3, #0]
 801afb0:	e7d9      	b.n	801af66 <coap_print_link+0x126>
      COPY_COND_WITH_OFFSET(p, bufend, *offset,
 801afb2:	42b4      	cmp	r4, r6
 801afb4:	d207      	bcs.n	801afc6 <coap_print_link+0x186>
 801afb6:	6818      	ldr	r0, [r3, #0]
 801afb8:	b958      	cbnz	r0, 801afd2 <coap_print_link+0x192>
 801afba:	f8da 0004 	ldr.w	r0, [sl, #4]
 801afbe:	f810 0009 	ldrb.w	r0, [r0, r9]
 801afc2:	f804 0b01 	strb.w	r0, [r4], #1
 801afc6:	6810      	ldr	r0, [r2, #0]
 801afc8:	3001      	adds	r0, #1
 801afca:	6010      	str	r0, [r2, #0]
 801afcc:	f109 0901 	add.w	r9, r9, #1
 801afd0:	e7ce      	b.n	801af70 <coap_print_link+0x130>
 801afd2:	3801      	subs	r0, #1
 801afd4:	6018      	str	r0, [r3, #0]
 801afd6:	e7f6      	b.n	801afc6 <coap_print_link+0x186>
    COPY_COND_WITH_OFFSET(p, bufend, *offset, ";obs", 4, *len);
 801afd8:	3801      	subs	r0, #1
 801afda:	6018      	str	r0, [r3, #0]
 801afdc:	e778      	b.n	801aed0 <coap_print_link+0x90>
    return COAP_PRINT_STATUS_ERROR;
 801afde:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801afe2:	e788      	b.n	801aef6 <coap_print_link+0xb6>
 801afe4:	080317ab 	.word	0x080317ab

0801afe8 <coap_print_wellknown>:
                size_t offset, coap_opt_t *query_filter) {
 801afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afec:	b08d      	sub	sp, #52	; 0x34
 801afee:	4682      	mov	sl, r0
 801aff0:	9201      	str	r2, [sp, #4]
  const uint8_t *bufend = buf + *buflen;
 801aff2:	6812      	ldr	r2, [r2, #0]
                size_t offset, coap_opt_t *query_filter) {
 801aff4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801aff6:	9303      	str	r3, [sp, #12]
  const uint8_t *bufend = buf + *buflen;
 801aff8:	188a      	adds	r2, r1, r2
  const size_t old_offset = offset;
 801affa:	9302      	str	r3, [sp, #8]
  coap_str_const_t resource_param = { 0, NULL }, query_pattern = { 0, NULL };
 801affc:	2300      	movs	r3, #0
 801affe:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801b002:	e9cd 3308 	strd	r3, r3, [sp, #32]
                size_t offset, coap_opt_t *query_filter) {
 801b006:	4688      	mov	r8, r1
  const uint8_t *bufend = buf + *buflen;
 801b008:	9200      	str	r2, [sp, #0]
  if (query_filter) {
 801b00a:	2e00      	cmp	r6, #0
 801b00c:	d156      	bne.n	801b0bc <coap_print_wellknown+0xd4>
  int flags = 0; /* MATCH_SUBSTRING, MATCH_PREFIX, MATCH_URI */
 801b00e:	2500      	movs	r5, #0
  RESOURCES_ITER(context->resources, r) {
 801b010:	f8da 600c 	ldr.w	r6, [sl, #12]
 801b014:	2e00      	cmp	r6, #0
 801b016:	f000 80dc 	beq.w	801b1d2 <coap_print_wellknown+0x1ea>
 801b01a:	f04f 0a00 	mov.w	sl, #0
 801b01e:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
 801b022:	4644      	mov	r4, r8
 801b024:	4657      	mov	r7, sl
        if (!(match(&unquoted_val, &query_pattern,
 801b026:	f3c5 0b80 	ubfx	fp, r5, #2, #1
    if (resource_param.length) { /* there is a query filter */
 801b02a:	9b06      	ldr	r3, [sp, #24]
 801b02c:	b153      	cbz	r3, 801b044 <coap_print_wellknown+0x5c>
      if (flags & MATCH_URI) {        /* match resource URI */
 801b02e:	07eb      	lsls	r3, r5, #31
 801b030:	f140 80ac 	bpl.w	801b18c <coap_print_wellknown+0x1a4>
        if (!match(r->uri_path, &query_pattern, (flags & MATCH_PREFIX) != 0,
 801b034:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 801b036:	465b      	mov	r3, fp
 801b038:	f3c5 0240 	ubfx	r2, r5, #1, #1
 801b03c:	a908      	add	r1, sp, #32
        if (!(match(&unquoted_val, &query_pattern,
 801b03e:	f7ff facd 	bl	801a5dc <match>
 801b042:	b1f8      	cbz	r0, 801b084 <coap_print_wellknown+0x9c>
    if (!subsequent_resource) {        /* this is the first resource  */
 801b044:	f1ba 0f00 	cmp.w	sl, #0
 801b048:	d00a      	beq.n	801b060 <coap_print_wellknown+0x78>
      PRINT_COND_WITH_OFFSET(p, bufend, offset, ',', written);
 801b04a:	9b00      	ldr	r3, [sp, #0]
 801b04c:	42a3      	cmp	r3, r4
 801b04e:	d906      	bls.n	801b05e <coap_print_wellknown+0x76>
 801b050:	9b03      	ldr	r3, [sp, #12]
 801b052:	2b00      	cmp	r3, #0
 801b054:	f040 80b8 	bne.w	801b1c8 <coap_print_wellknown+0x1e0>
 801b058:	232c      	movs	r3, #44	; 0x2c
 801b05a:	f804 3b01 	strb.w	r3, [r4], #1
 801b05e:	3701      	adds	r7, #1
    left = bufend - p; /* calculate available space */
 801b060:	9b00      	ldr	r3, [sp, #0]
 801b062:	1b1b      	subs	r3, r3, r4
 801b064:	9305      	str	r3, [sp, #20]
    result = coap_print_link(r, p, &left, &offset);
 801b066:	aa05      	add	r2, sp, #20
 801b068:	ab03      	add	r3, sp, #12
 801b06a:	4621      	mov	r1, r4
 801b06c:	4630      	mov	r0, r6
 801b06e:	f7ff fee7 	bl	801ae40 <coap_print_link>
    if (result & COAP_PRINT_STATUS_ERROR) {
 801b072:	2800      	cmp	r0, #0
 801b074:	db0f      	blt.n	801b096 <coap_print_wellknown+0xae>
    written += left;
 801b076:	9b05      	ldr	r3, [sp, #20]
    p += COAP_PRINT_OUTPUT_LENGTH(result);
 801b078:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 801b07c:	4404      	add	r4, r0
    written += left;
 801b07e:	441f      	add	r7, r3
 801b080:	f04f 0a01 	mov.w	sl, #1
  RESOURCES_ITER(context->resources, r) {
 801b084:	f1b9 0f00 	cmp.w	r9, #0
 801b088:	f000 80a1 	beq.w	801b1ce <coap_print_wellknown+0x1e6>
 801b08c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 801b090:	464e      	mov	r6, r9
 801b092:	2e00      	cmp	r6, #0
 801b094:	d178      	bne.n	801b188 <coap_print_wellknown+0x1a0>
  *buflen = written;
 801b096:	9b01      	ldr	r3, [sp, #4]
  output_length = p - buf;
 801b098:	eba4 0008 	sub.w	r0, r4, r8
  if (output_length > COAP_PRINT_STATUS_MAX) {
 801b09c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
  *buflen = written;
 801b0a0:	601f      	str	r7, [r3, #0]
  if (output_length > COAP_PRINT_STATUS_MAX) {
 801b0a2:	f080 8099 	bcs.w	801b1d8 <coap_print_wellknown+0x1f0>
  if (result + old_offset - offset < *buflen) {
 801b0a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b0aa:	1ad3      	subs	r3, r2, r3
 801b0ac:	4403      	add	r3, r0
 801b0ae:	42bb      	cmp	r3, r7
 801b0b0:	d201      	bcs.n	801b0b6 <coap_print_wellknown+0xce>
    result |= COAP_PRINT_STATUS_TRUNC;
 801b0b2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
}
 801b0b6:	b00d      	add	sp, #52	; 0x34
 801b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    resource_param.s = coap_opt_value(query_filter);
 801b0bc:	4630      	mov	r0, r6
 801b0be:	f7fe fd29 	bl	8019b14 <coap_opt_value>
 801b0c2:	4607      	mov	r7, r0
 801b0c4:	9007      	str	r0, [sp, #28]
    while (resource_param.length < coap_opt_length(query_filter)
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	9c06      	ldr	r4, [sp, #24]
 801b0ca:	f7fe fce9 	bl	8019aa0 <coap_opt_length>
 801b0ce:	4284      	cmp	r4, r0
 801b0d0:	d202      	bcs.n	801b0d8 <coap_print_wellknown+0xf0>
           && resource_param.s[resource_param.length] != '=')
 801b0d2:	5d3b      	ldrb	r3, [r7, r4]
 801b0d4:	2b3d      	cmp	r3, #61	; 0x3d
 801b0d6:	d132      	bne.n	801b13e <coap_print_wellknown+0x156>
    if (resource_param.length < coap_opt_length(query_filter)) {
 801b0d8:	4630      	mov	r0, r6
 801b0da:	f7fe fce1 	bl	8019aa0 <coap_opt_length>
 801b0de:	4284      	cmp	r4, r0
 801b0e0:	d295      	bcs.n	801b00e <coap_print_wellknown+0x26>
      if (resource_param.length == 4 &&
 801b0e2:	2c04      	cmp	r4, #4
 801b0e4:	d12e      	bne.n	801b144 <coap_print_wellknown+0x15c>
          memcmp(resource_param.s, "href", 4) == 0)
 801b0e6:	493e      	ldr	r1, [pc, #248]	; (801b1e0 <coap_print_wellknown+0x1f8>)
 801b0e8:	4622      	mov	r2, r4
 801b0ea:	4638      	mov	r0, r7
 801b0ec:	f001 f89a 	bl	801c224 <memcmp>
      if (resource_param.length == 4 &&
 801b0f0:	fab0 f580 	clz	r5, r0
 801b0f4:	096d      	lsrs	r5, r5, #5
      for (rt_attributes = _rt_attributes; rt_attributes->s; rt_attributes++) {
 801b0f6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801b1f0 <coap_print_wellknown+0x208>
 801b0fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b0fe:	b151      	cbz	r1, 801b116 <coap_print_wellknown+0x12e>
        if (resource_param.length == rt_attributes->length &&
 801b100:	f8d9 3000 	ldr.w	r3, [r9]
 801b104:	429c      	cmp	r4, r3
 801b106:	d11f      	bne.n	801b148 <coap_print_wellknown+0x160>
            memcmp(resource_param.s, rt_attributes->s, rt_attributes->length) == 0) {
 801b108:	4622      	mov	r2, r4
 801b10a:	4638      	mov	r0, r7
 801b10c:	f001 f88a 	bl	801c224 <memcmp>
        if (resource_param.length == rt_attributes->length &&
 801b110:	b9d0      	cbnz	r0, 801b148 <coap_print_wellknown+0x160>
          flags |= MATCH_SUBSTRING;
 801b112:	f045 0504 	orr.w	r5, r5, #4
        coap_opt_value(query_filter) + resource_param.length + 1;
 801b116:	4630      	mov	r0, r6
 801b118:	f7fe fcfc 	bl	8019b14 <coap_opt_value>
 801b11c:	f104 0b01 	add.w	fp, r4, #1
 801b120:	eb00 070b 	add.w	r7, r0, fp
 801b124:	4681      	mov	r9, r0
      assert((resource_param.length + 1) <= coap_opt_length(query_filter));
 801b126:	4630      	mov	r0, r6
      query_pattern.s =
 801b128:	9709      	str	r7, [sp, #36]	; 0x24
      assert((resource_param.length + 1) <= coap_opt_length(query_filter));
 801b12a:	f7fe fcb9 	bl	8019aa0 <coap_opt_length>
 801b12e:	4583      	cmp	fp, r0
 801b130:	d90d      	bls.n	801b14e <coap_print_wellknown+0x166>
 801b132:	4b2c      	ldr	r3, [pc, #176]	; (801b1e4 <coap_print_wellknown+0x1fc>)
 801b134:	4a2c      	ldr	r2, [pc, #176]	; (801b1e8 <coap_print_wellknown+0x200>)
 801b136:	482d      	ldr	r0, [pc, #180]	; (801b1ec <coap_print_wellknown+0x204>)
 801b138:	21da      	movs	r1, #218	; 0xda
 801b13a:	f000 fc9f 	bl	801ba7c <__assert_func>
      resource_param.length++;
 801b13e:	3401      	adds	r4, #1
 801b140:	9406      	str	r4, [sp, #24]
 801b142:	e7c0      	b.n	801b0c6 <coap_print_wellknown+0xde>
  int flags = 0; /* MATCH_SUBSTRING, MATCH_PREFIX, MATCH_URI */
 801b144:	2500      	movs	r5, #0
 801b146:	e7d6      	b.n	801b0f6 <coap_print_wellknown+0x10e>
      for (rt_attributes = _rt_attributes; rt_attributes->s; rt_attributes++) {
 801b148:	f109 0908 	add.w	r9, r9, #8
 801b14c:	e7d5      	b.n	801b0fa <coap_print_wellknown+0x112>
        coap_opt_length(query_filter) - (resource_param.length + 1);
 801b14e:	4630      	mov	r0, r6
 801b150:	f7fe fca6 	bl	8019aa0 <coap_opt_length>
 801b154:	1b00      	subs	r0, r0, r4
 801b156:	1e43      	subs	r3, r0, #1
      query_pattern.length =
 801b158:	9308      	str	r3, [sp, #32]
     if ((query_pattern.s[0] == '/') && ((flags & MATCH_URI) == MATCH_URI)) {
 801b15a:	f819 300b 	ldrb.w	r3, [r9, fp]
 801b15e:	2b2f      	cmp	r3, #47	; 0x2f
 801b160:	d105      	bne.n	801b16e <coap_print_wellknown+0x186>
 801b162:	07ea      	lsls	r2, r5, #31
       query_pattern.s++;
 801b164:	bf41      	itttt	mi
 801b166:	3701      	addmi	r7, #1
       query_pattern.length--;
 801b168:	3802      	submi	r0, #2
       query_pattern.s++;
 801b16a:	9709      	strmi	r7, [sp, #36]	; 0x24
       query_pattern.length--;
 801b16c:	9008      	strmi	r0, [sp, #32]
      if (query_pattern.length &&
 801b16e:	9b08      	ldr	r3, [sp, #32]
 801b170:	2b00      	cmp	r3, #0
 801b172:	f43f af4d 	beq.w	801b010 <coap_print_wellknown+0x28>
          query_pattern.s[query_pattern.length-1] == '*') {
 801b176:	3b01      	subs	r3, #1
 801b178:	9a09      	ldr	r2, [sp, #36]	; 0x24
      if (query_pattern.length &&
 801b17a:	5cd2      	ldrb	r2, [r2, r3]
 801b17c:	2a2a      	cmp	r2, #42	; 0x2a
        query_pattern.length--;
 801b17e:	bf04      	itt	eq
 801b180:	9308      	streq	r3, [sp, #32]
        flags |= MATCH_PREFIX;
 801b182:	f045 0502 	orreq.w	r5, r5, #2
 801b186:	e743      	b.n	801b010 <coap_print_wellknown+0x28>
 801b188:	4699      	mov	r9, r3
 801b18a:	e74e      	b.n	801b02a <coap_print_wellknown+0x42>
        attr = coap_find_attr(r, &resource_param);
 801b18c:	a906      	add	r1, sp, #24
 801b18e:	4630      	mov	r0, r6
 801b190:	f7ff fa9c 	bl	801a6cc <coap_find_attr>
        if (!attr || !attr->value) continue;
 801b194:	2800      	cmp	r0, #0
 801b196:	f43f af75 	beq.w	801b084 <coap_print_wellknown+0x9c>
 801b19a:	6883      	ldr	r3, [r0, #8]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	f43f af71 	beq.w	801b084 <coap_print_wellknown+0x9c>
        unquoted_val = *attr->value;
 801b1a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1a6:	ab0c      	add	r3, sp, #48	; 0x30
 801b1a8:	e903 0003 	stmdb	r3, {r0, r1}
        if (attr->value->s[0] == '"') {          /* if attribute has a quoted value, remove double quotes */
 801b1ac:	780b      	ldrb	r3, [r1, #0]
 801b1ae:	2b22      	cmp	r3, #34	; 0x22
 801b1b0:	d104      	bne.n	801b1bc <coap_print_wellknown+0x1d4>
          unquoted_val.length -= 2;
 801b1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          unquoted_val.s += 1;
 801b1b4:	3101      	adds	r1, #1
          unquoted_val.length -= 2;
 801b1b6:	3b02      	subs	r3, #2
 801b1b8:	930a      	str	r3, [sp, #40]	; 0x28
          unquoted_val.s += 1;
 801b1ba:	910b      	str	r1, [sp, #44]	; 0x2c
        if (!(match(&unquoted_val, &query_pattern,
 801b1bc:	465b      	mov	r3, fp
 801b1be:	f3c5 0240 	ubfx	r2, r5, #1, #1
 801b1c2:	a908      	add	r1, sp, #32
 801b1c4:	a80a      	add	r0, sp, #40	; 0x28
 801b1c6:	e73a      	b.n	801b03e <coap_print_wellknown+0x56>
      PRINT_COND_WITH_OFFSET(p, bufend, offset, ',', written);
 801b1c8:	3b01      	subs	r3, #1
 801b1ca:	9303      	str	r3, [sp, #12]
 801b1cc:	e747      	b.n	801b05e <coap_print_wellknown+0x76>
  RESOURCES_ITER(context->resources, r) {
 801b1ce:	464b      	mov	r3, r9
 801b1d0:	e75e      	b.n	801b090 <coap_print_wellknown+0xa8>
 801b1d2:	4644      	mov	r4, r8
 801b1d4:	4637      	mov	r7, r6
 801b1d6:	e75e      	b.n	801b096 <coap_print_wellknown+0xae>
    return COAP_PRINT_STATUS_ERROR;
 801b1d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801b1dc:	e76b      	b.n	801b0b6 <coap_print_wellknown+0xce>
 801b1de:	bf00      	nop
 801b1e0:	080317b0 	.word	0x080317b0
 801b1e4:	080317b5 	.word	0x080317b5
 801b1e8:	0802ad9c 	.word	0x0802ad9c
 801b1ec:	080316af 	.word	0x080316af
 801b1f0:	0802ad7c 	.word	0x0802ad7c

0801b1f4 <coap_register_handler>:

void
coap_register_handler(coap_resource_t *resource,
                      unsigned char method,
                      coap_method_handler_t handler) {
 801b1f4:	b508      	push	{r3, lr}
  assert(resource);
 801b1f6:	b930      	cbnz	r0, 801b206 <coap_register_handler+0x12>
 801b1f8:	4b09      	ldr	r3, [pc, #36]	; (801b220 <coap_register_handler+0x2c>)
 801b1fa:	4a0a      	ldr	r2, [pc, #40]	; (801b224 <coap_register_handler+0x30>)
 801b1fc:	f44f 7111 	mov.w	r1, #580	; 0x244
  assert(method > 0 && (size_t)(method-1) < sizeof(resource->handler)/sizeof(coap_method_handler_t));
 801b200:	4809      	ldr	r0, [pc, #36]	; (801b228 <coap_register_handler+0x34>)
 801b202:	f000 fc3b 	bl	801ba7c <__assert_func>
 801b206:	3901      	subs	r1, #1
 801b208:	b2cb      	uxtb	r3, r1
 801b20a:	2b06      	cmp	r3, #6
 801b20c:	d904      	bls.n	801b218 <coap_register_handler+0x24>
 801b20e:	4b07      	ldr	r3, [pc, #28]	; (801b22c <coap_register_handler+0x38>)
 801b210:	4a04      	ldr	r2, [pc, #16]	; (801b224 <coap_register_handler+0x30>)
 801b212:	f240 2145 	movw	r1, #581	; 0x245
 801b216:	e7f3      	b.n	801b200 <coap_register_handler+0xc>
  resource->handler[method-1] = handler;
 801b218:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801b21c:	6042      	str	r2, [r0, #4]
}
 801b21e:	bd08      	pop	{r3, pc}
 801b220:	0803175d 	.word	0x0803175d
 801b224:	0802adb1 	.word	0x0802adb1
 801b228:	080316af 	.word	0x080316af
 801b22c:	080317f2 	.word	0x080317f2

0801b230 <coap_find_observer>:

#ifndef WITHOUT_OBSERVE
coap_subscription_t *
coap_find_observer(coap_resource_t *resource, coap_session_t *session,
                     const coap_binary_t *token) {
 801b230:	b570      	push	{r4, r5, r6, lr}
 801b232:	460e      	mov	r6, r1
 801b234:	4615      	mov	r5, r2
  coap_subscription_t *s;

  assert(resource);
 801b236:	b930      	cbnz	r0, 801b246 <coap_find_observer+0x16>
 801b238:	4b11      	ldr	r3, [pc, #68]	; (801b280 <coap_find_observer+0x50>)
 801b23a:	4a12      	ldr	r2, [pc, #72]	; (801b284 <coap_find_observer+0x54>)
 801b23c:	f240 214f 	movw	r1, #591	; 0x24f
  assert(session);
 801b240:	4811      	ldr	r0, [pc, #68]	; (801b288 <coap_find_observer+0x58>)
 801b242:	f000 fc1b 	bl	801ba7c <__assert_func>
 801b246:	b921      	cbnz	r1, 801b252 <coap_find_observer+0x22>
 801b248:	4b10      	ldr	r3, [pc, #64]	; (801b28c <coap_find_observer+0x5c>)
 801b24a:	4a0e      	ldr	r2, [pc, #56]	; (801b284 <coap_find_observer+0x54>)
 801b24c:	f44f 7114 	mov.w	r1, #592	; 0x250
 801b250:	e7f6      	b.n	801b240 <coap_find_observer+0x10>

  LL_FOREACH(resource->subscribers, s) {
 801b252:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801b254:	b90c      	cbnz	r4, 801b25a <coap_find_observer+0x2a>
                       && memcmp(token->s, s->token, token->length) == 0)))
      return s;
  }

  return NULL;
}
 801b256:	4620      	mov	r0, r4
 801b258:	bd70      	pop	{r4, r5, r6, pc}
    if (s->session == session
 801b25a:	6863      	ldr	r3, [r4, #4]
 801b25c:	42b3      	cmp	r3, r6
 801b25e:	d10c      	bne.n	801b27a <coap_find_observer+0x4a>
        && (!token || (token->length == s->token_length
 801b260:	2d00      	cmp	r5, #0
 801b262:	d0f8      	beq.n	801b256 <coap_find_observer+0x26>
 801b264:	682a      	ldr	r2, [r5, #0]
 801b266:	6963      	ldr	r3, [r4, #20]
 801b268:	429a      	cmp	r2, r3
 801b26a:	d106      	bne.n	801b27a <coap_find_observer+0x4a>
                       && memcmp(token->s, s->token, token->length) == 0)))
 801b26c:	6868      	ldr	r0, [r5, #4]
 801b26e:	f104 0118 	add.w	r1, r4, #24
 801b272:	f000 ffd7 	bl	801c224 <memcmp>
 801b276:	2800      	cmp	r0, #0
 801b278:	d0ed      	beq.n	801b256 <coap_find_observer+0x26>
  LL_FOREACH(resource->subscribers, s) {
 801b27a:	6824      	ldr	r4, [r4, #0]
 801b27c:	e7ea      	b.n	801b254 <coap_find_observer+0x24>
 801b27e:	bf00      	nop
 801b280:	0803175d 	.word	0x0803175d
 801b284:	0802add3 	.word	0x0802add3
 801b288:	080316af 	.word	0x080316af
 801b28c:	0802fdf5 	.word	0x0802fdf5

0801b290 <coap_touch_observer>:
void
coap_touch_observer(coap_context_t *context, coap_session_t *session,
                    const coap_binary_t *token) {
  coap_subscription_t *s;

  RESOURCES_ITER(context->resources, r) {
 801b290:	68c0      	ldr	r0, [r0, #12]
                    const coap_binary_t *token) {
 801b292:	b570      	push	{r4, r5, r6, lr}
 801b294:	460d      	mov	r5, r1
 801b296:	4616      	mov	r6, r2
  RESOURCES_ITER(context->resources, r) {
 801b298:	b168      	cbz	r0, 801b2b6 <coap_touch_observer+0x26>
 801b29a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    s = coap_find_observer(r, session, token);
 801b29c:	4632      	mov	r2, r6
 801b29e:	4629      	mov	r1, r5
 801b2a0:	f7ff ffc6 	bl	801b230 <coap_find_observer>
    if (s) {
 801b2a4:	b118      	cbz	r0, 801b2ae <coap_touch_observer+0x1e>
      s->fail_cnt = 0;
 801b2a6:	7a03      	ldrb	r3, [r0, #8]
 801b2a8:	f36f 1305 	bfc	r3, #4, #2
 801b2ac:	7203      	strb	r3, [r0, #8]
  RESOURCES_ITER(context->resources, r) {
 801b2ae:	b114      	cbz	r4, 801b2b6 <coap_touch_observer+0x26>
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 801b2b4:	e7f2      	b.n	801b29c <coap_touch_observer+0xc>
    }
  }
}
 801b2b6:	bd70      	pop	{r4, r5, r6, pc}

0801b2b8 <coap_delete_observer>:

int
coap_delete_observer(coap_resource_t *resource, coap_session_t *session,
                     const coap_binary_t *token) {
 801b2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2bc:	b087      	sub	sp, #28
 801b2be:	4606      	mov	r6, r0
 801b2c0:	460f      	mov	r7, r1
  coap_subscription_t *s;

  s = coap_find_observer(resource, session, token);
 801b2c2:	f7ff ffb5 	bl	801b230 <coap_find_observer>

  if ( s && coap_get_log_level() >= LOG_DEBUG ) {
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	b1d0      	cbz	r0, 801b300 <coap_delete_observer+0x48>
 801b2ca:	f7f9 fe8b 	bl	8014fe4 <coap_get_log_level>
 801b2ce:	2806      	cmp	r0, #6
 801b2d0:	d916      	bls.n	801b300 <coap_delete_observer+0x48>
    char outbuf[2 * 8 + 1] = "";
 801b2d2:	2500      	movs	r5, #0
 801b2d4:	220d      	movs	r2, #13
 801b2d6:	4629      	mov	r1, r5
 801b2d8:	a802      	add	r0, sp, #8
 801b2da:	9501      	str	r5, [sp, #4]
 801b2dc:	f000 ffd8 	bl	801c290 <memset>
    unsigned int i;
    for ( i = 0; i < s->token_length; i++ )
      snprintf( &outbuf[2 * i], 3, "%02x", s->token[i] );
 801b2e0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 801b35c <coap_delete_observer+0xa4>
 801b2e4:	f104 0818 	add.w	r8, r4, #24
    for ( i = 0; i < s->token_length; i++ )
 801b2e8:	6963      	ldr	r3, [r4, #20]
 801b2ea:	42ab      	cmp	r3, r5
 801b2ec:	d820      	bhi.n	801b330 <coap_delete_observer+0x78>
    coap_log(LOG_DEBUG, "removed observer tid %s\n", outbuf);
 801b2ee:	f7f9 fe79 	bl	8014fe4 <coap_get_log_level>
 801b2f2:	2806      	cmp	r0, #6
 801b2f4:	d904      	bls.n	801b300 <coap_delete_observer+0x48>
 801b2f6:	4918      	ldr	r1, [pc, #96]	; (801b358 <coap_delete_observer+0xa0>)
 801b2f8:	aa01      	add	r2, sp, #4
 801b2fa:	2007      	movs	r0, #7
 801b2fc:	f7f9 fedc 	bl	80150b8 <coap_log_impl>
  }

  if (resource->subscribers && s) {
 801b300:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801b302:	b17b      	cbz	r3, 801b324 <coap_delete_observer+0x6c>
 801b304:	b174      	cbz	r4, 801b324 <coap_delete_observer+0x6c>
    LL_DELETE(resource->subscribers, s);
 801b306:	42a3      	cmp	r3, r4
 801b308:	d11d      	bne.n	801b346 <coap_delete_observer+0x8e>
 801b30a:	6823      	ldr	r3, [r4, #0]
 801b30c:	6473      	str	r3, [r6, #68]	; 0x44
    coap_session_release( session );
 801b30e:	4638      	mov	r0, r7
 801b310:	f7fb fdee 	bl	8016ef0 <coap_session_release>
    if (s->query)
 801b314:	6a20      	ldr	r0, [r4, #32]
 801b316:	b108      	cbz	r0, 801b31c <coap_delete_observer+0x64>
      coap_delete_string(s->query);
 801b318:	f000 fa68 	bl	801b7ec <coap_delete_string>
  coap_free_type(COAP_STRING, object);
 801b31c:	4621      	mov	r1, r4
 801b31e:	2000      	movs	r0, #0
 801b320:	f7fc fbf3 	bl	8017b0a <coap_free_type>
    COAP_FREE_TYPE(subscription,s);
  }

  return s != NULL;
 801b324:	1e20      	subs	r0, r4, #0
 801b326:	bf18      	it	ne
 801b328:	2001      	movne	r0, #1
}
 801b32a:	b007      	add	sp, #28
 801b32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      snprintf( &outbuf[2 * i], 3, "%02x", s->token[i] );
 801b330:	a801      	add	r0, sp, #4
 801b332:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 801b336:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b33a:	464a      	mov	r2, r9
 801b33c:	2103      	movs	r1, #3
 801b33e:	f001 fc91 	bl	801cc64 <sniprintf>
    for ( i = 0; i < s->token_length; i++ )
 801b342:	3501      	adds	r5, #1
 801b344:	e7d0      	b.n	801b2e8 <coap_delete_observer+0x30>
    LL_DELETE(resource->subscribers, s);
 801b346:	461a      	mov	r2, r3
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d0df      	beq.n	801b30e <coap_delete_observer+0x56>
 801b34e:	42a3      	cmp	r3, r4
 801b350:	d1f9      	bne.n	801b346 <coap_delete_observer+0x8e>
 801b352:	6823      	ldr	r3, [r4, #0]
 801b354:	6013      	str	r3, [r2, #0]
 801b356:	e7da      	b.n	801b30e <coap_delete_observer+0x56>
 801b358:	08031879 	.word	0x08031879
 801b35c:	0802f19d 	.word	0x0802f19d

0801b360 <coap_add_observer>:
                  coap_block_t block2) {
 801b360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b364:	4606      	mov	r6, r0
 801b366:	4690      	mov	r8, r2
 801b368:	461d      	mov	r5, r3
  assert( session );
 801b36a:	460f      	mov	r7, r1
 801b36c:	b931      	cbnz	r1, 801b37c <coap_add_observer+0x1c>
 801b36e:	4b3b      	ldr	r3, [pc, #236]	; (801b45c <coap_add_observer+0xfc>)
 801b370:	4a3b      	ldr	r2, [pc, #236]	; (801b460 <coap_add_observer+0x100>)
 801b372:	f240 2177 	movw	r1, #631	; 0x277
  assert(resource);
 801b376:	483b      	ldr	r0, [pc, #236]	; (801b464 <coap_add_observer+0x104>)
 801b378:	f000 fb80 	bl	801ba7c <__assert_func>
  s = coap_find_observer(resource, session, token);
 801b37c:	f7ff ff58 	bl	801b230 <coap_find_observer>
  if (!s) {
 801b380:	4604      	mov	r4, r0
 801b382:	2800      	cmp	r0, #0
 801b384:	d160      	bne.n	801b448 <coap_add_observer+0xe8>
  assert(resource);
 801b386:	b926      	cbnz	r6, 801b392 <coap_add_observer+0x32>
 801b388:	4b37      	ldr	r3, [pc, #220]	; (801b468 <coap_add_observer+0x108>)
 801b38a:	4a38      	ldr	r2, [pc, #224]	; (801b46c <coap_add_observer+0x10c>)
 801b38c:	f240 2161 	movw	r1, #609	; 0x261
 801b390:	e7f1      	b.n	801b376 <coap_add_observer+0x16>
  LL_FOREACH(resource->subscribers, s) {
 801b392:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801b394:	b95c      	cbnz	r4, 801b3ae <coap_add_observer+0x4e>
  return coap_malloc_type(COAP_STRING, size);
 801b396:	2124      	movs	r1, #36	; 0x24
 801b398:	2000      	movs	r0, #0
 801b39a:	f7fc fbb3 	bl	8017b04 <coap_malloc_type>
  if (!s) {
 801b39e:	4604      	mov	r4, r0
 801b3a0:	bb20      	cbnz	r0, 801b3ec <coap_add_observer+0x8c>
    if (query)
 801b3a2:	2d00      	cmp	r5, #0
 801b3a4:	d055      	beq.n	801b452 <coap_add_observer+0xf2>
      coap_delete_string(query);
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	f000 fa20 	bl	801b7ec <coap_delete_string>
 801b3ac:	e051      	b.n	801b452 <coap_add_observer+0xf2>
    if (s->session == session
 801b3ae:	6863      	ldr	r3, [r4, #4]
 801b3b0:	429f      	cmp	r7, r3
 801b3b2:	d119      	bne.n	801b3e8 <coap_add_observer+0x88>
 801b3b4:	6a23      	ldr	r3, [r4, #32]
        && ((!query && !s->query)
 801b3b6:	b955      	cbnz	r5, 801b3ce <coap_add_observer+0x6e>
 801b3b8:	b9b3      	cbnz	r3, 801b3e8 <coap_add_observer+0x88>
      coap_binary_t tmp_token = { s->token_length, s->token };
 801b3ba:	6963      	ldr	r3, [r4, #20]
 801b3bc:	9300      	str	r3, [sp, #0]
 801b3be:	3418      	adds	r4, #24
      coap_delete_observer(resource, session, &tmp_token);
 801b3c0:	466a      	mov	r2, sp
 801b3c2:	4639      	mov	r1, r7
 801b3c4:	4630      	mov	r0, r6
      coap_binary_t tmp_token = { s->token_length, s->token };
 801b3c6:	9401      	str	r4, [sp, #4]
      coap_delete_observer(resource, session, &tmp_token);
 801b3c8:	f7ff ff76 	bl	801b2b8 <coap_delete_observer>
  if (s) {
 801b3cc:	e7e3      	b.n	801b396 <coap_add_observer+0x36>
             || (query && s->query && coap_string_equal(query, s->query))))
 801b3ce:	b15b      	cbz	r3, 801b3e8 <coap_add_observer+0x88>
 801b3d0:	682a      	ldr	r2, [r5, #0]
 801b3d2:	6819      	ldr	r1, [r3, #0]
 801b3d4:	428a      	cmp	r2, r1
 801b3d6:	d107      	bne.n	801b3e8 <coap_add_observer+0x88>
 801b3d8:	2a00      	cmp	r2, #0
 801b3da:	d0ee      	beq.n	801b3ba <coap_add_observer+0x5a>
 801b3dc:	6859      	ldr	r1, [r3, #4]
 801b3de:	6868      	ldr	r0, [r5, #4]
 801b3e0:	f000 ff20 	bl	801c224 <memcmp>
 801b3e4:	2800      	cmp	r0, #0
 801b3e6:	d0e8      	beq.n	801b3ba <coap_add_observer+0x5a>
  LL_FOREACH(resource->subscribers, s) {
 801b3e8:	6824      	ldr	r4, [r4, #0]
 801b3ea:	e7d3      	b.n	801b394 <coap_add_observer+0x34>
  coap_subscription_init(s);
 801b3ec:	f000 fa16 	bl	801b81c <coap_subscription_init>
  s->session = coap_session_reference( session );
 801b3f0:	4638      	mov	r0, r7
 801b3f2:	f7fb fc41 	bl	8016c78 <coap_session_reference>
 801b3f6:	6060      	str	r0, [r4, #4]
  if (token && token->length) {
 801b3f8:	f1b8 0f00 	cmp.w	r8, #0
 801b3fc:	d00c      	beq.n	801b418 <coap_add_observer+0xb8>
 801b3fe:	f8d8 2000 	ldr.w	r2, [r8]
 801b402:	b14a      	cbz	r2, 801b418 <coap_add_observer+0xb8>
    memcpy(s->token, token->s, min(s->token_length, 8));
 801b404:	2a08      	cmp	r2, #8
    s->token_length = token->length;
 801b406:	6162      	str	r2, [r4, #20]
    memcpy(s->token, token->s, min(s->token_length, 8));
 801b408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b40c:	bf28      	it	cs
 801b40e:	2208      	movcs	r2, #8
 801b410:	f104 0018 	add.w	r0, r4, #24
 801b414:	f000 ff14 	bl	801c240 <memcpy>
  s->has_block2 = has_block2;
 801b418:	7a23      	ldrb	r3, [r4, #8]
 801b41a:	9a08      	ldr	r2, [sp, #32]
  s->query = query;
 801b41c:	6225      	str	r5, [r4, #32]
  s->block2 = block2;
 801b41e:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
  s->has_block2 = has_block2;
 801b422:	f362 13c7 	bfi	r3, r2, #7, #1
 801b426:	7223      	strb	r3, [r4, #8]
  s->block2 = block2;
 801b428:	f104 030c 	add.w	r3, r4, #12
 801b42c:	e883 0003 	stmia.w	r3, {r0, r1}
  LL_PREPEND(resource->subscribers, s);
 801b430:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801b432:	6023      	str	r3, [r4, #0]
 801b434:	6474      	str	r4, [r6, #68]	; 0x44
  coap_log(LOG_DEBUG, "create new subscription\n");
 801b436:	f7f9 fdd5 	bl	8014fe4 <coap_get_log_level>
 801b43a:	2806      	cmp	r0, #6
 801b43c:	d909      	bls.n	801b452 <coap_add_observer+0xf2>
 801b43e:	490c      	ldr	r1, [pc, #48]	; (801b470 <coap_add_observer+0x110>)
 801b440:	2007      	movs	r0, #7
 801b442:	f7f9 fe39 	bl	80150b8 <coap_log_impl>
 801b446:	e004      	b.n	801b452 <coap_add_observer+0xf2>
    if (s->query)
 801b448:	6a00      	ldr	r0, [r0, #32]
 801b44a:	b108      	cbz	r0, 801b450 <coap_add_observer+0xf0>
      coap_delete_string(s->query);
 801b44c:	f000 f9ce 	bl	801b7ec <coap_delete_string>
    s->query = query;
 801b450:	6225      	str	r5, [r4, #32]
}
 801b452:	4620      	mov	r0, r4
 801b454:	b002      	add	sp, #8
 801b456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b45a:	bf00      	nop
 801b45c:	0802fdf5 	.word	0x0802fdf5
 801b460:	0802ade6 	.word	0x0802ade6
 801b464:	080316af 	.word	0x080316af
 801b468:	0803175d 	.word	0x0803175d
 801b46c:	0802adf8 	.word	0x0802adf8
 801b470:	08031892 	.word	0x08031892

0801b474 <coap_delete_observers>:

void
coap_delete_observers(coap_context_t *context, coap_session_t *session) {
 801b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RESOURCES_ITER(context->resources, resource) {
 801b478:	68c5      	ldr	r5, [r0, #12]
coap_delete_observers(coap_context_t *context, coap_session_t *session) {
 801b47a:	460f      	mov	r7, r1
  RESOURCES_ITER(context->resources, resource) {
 801b47c:	b32d      	cbz	r5, 801b4ca <coap_delete_observers+0x56>
 801b47e:	6aae      	ldr	r6, [r5, #40]	; 0x28
    coap_subscription_t *s, *tmp;
    LL_FOREACH_SAFE(resource->subscribers, s, tmp) {
 801b480:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 801b482:	b1f4      	cbz	r4, 801b4c2 <coap_delete_observers+0x4e>
      if (s->session == session) {
 801b484:	e9d4 8300 	ldrd	r8, r3, [r4]
 801b488:	42bb      	cmp	r3, r7
 801b48a:	d10f      	bne.n	801b4ac <coap_delete_observers+0x38>
        LL_DELETE(resource->subscribers, s);
 801b48c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801b48e:	42a3      	cmp	r3, r4
 801b490:	d10e      	bne.n	801b4b0 <coap_delete_observers+0x3c>
 801b492:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
        coap_session_release(session);
 801b496:	4638      	mov	r0, r7
 801b498:	f7fb fd2a 	bl	8016ef0 <coap_session_release>
        if (s->query)
 801b49c:	6a20      	ldr	r0, [r4, #32]
 801b49e:	b108      	cbz	r0, 801b4a4 <coap_delete_observers+0x30>
          coap_delete_string(s->query);
 801b4a0:	f000 f9a4 	bl	801b7ec <coap_delete_string>
  coap_free_type(COAP_STRING, object);
 801b4a4:	4621      	mov	r1, r4
 801b4a6:	2000      	movs	r0, #0
 801b4a8:	f7fc fb2f 	bl	8017b0a <coap_free_type>
  RESOURCES_ITER(context->resources, resource) {
 801b4ac:	4644      	mov	r4, r8
 801b4ae:	e7e8      	b.n	801b482 <coap_delete_observers+0xe>
        LL_DELETE(resource->subscribers, s);
 801b4b0:	461a      	mov	r2, r3
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d0ee      	beq.n	801b496 <coap_delete_observers+0x22>
 801b4b8:	42a3      	cmp	r3, r4
 801b4ba:	d1f9      	bne.n	801b4b0 <coap_delete_observers+0x3c>
 801b4bc:	f8c2 8000 	str.w	r8, [r2]
 801b4c0:	e7e9      	b.n	801b496 <coap_delete_observers+0x22>
  RESOURCES_ITER(context->resources, resource) {
 801b4c2:	b116      	cbz	r6, 801b4ca <coap_delete_observers+0x56>
 801b4c4:	4635      	mov	r5, r6
 801b4c6:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 801b4c8:	e7da      	b.n	801b480 <coap_delete_observers+0xc>
        COAP_FREE_TYPE(subscription, s);
      }
    }
  }
}
 801b4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b4ce <coap_resource_notify_observers>:
coap_resource_set_dirty(coap_resource_t *r, const coap_string_t *query) {
  return coap_resource_notify_observers(r, query);
}

int
coap_resource_notify_observers(coap_resource_t *r, const coap_string_t *query) {
 801b4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!r->observable)
 801b4d0:	7803      	ldrb	r3, [r0, #0]
coap_resource_notify_observers(coap_resource_t *r, const coap_string_t *query) {
 801b4d2:	4604      	mov	r4, r0
  if (!r->observable)
 801b4d4:	0758      	lsls	r0, r3, #29
coap_resource_notify_observers(coap_resource_t *r, const coap_string_t *query) {
 801b4d6:	460e      	mov	r6, r1
  if (!r->observable)
 801b4d8:	d401      	bmi.n	801b4de <coap_resource_notify_observers+0x10>
    return 0;
 801b4da:	2000      	movs	r0, #0

  /* Increment value for next Observe use. Observe value must be < 2^24 */
  r->observe = (r->observe + 1) & 0xFFFFFF;

  return 1;
}
 801b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (query) {
 801b4de:	6c65      	ldr	r5, [r4, #68]	; 0x44
 801b4e0:	bb51      	cbnz	r1, 801b538 <coap_resource_notify_observers+0x6a>
    if ( !r->subscribers )
 801b4e2:	2d00      	cmp	r5, #0
 801b4e4:	d0f9      	beq.n	801b4da <coap_resource_notify_observers+0xc>
    r->dirty = 1;
 801b4e6:	f043 0301 	orr.w	r3, r3, #1
 801b4ea:	7023      	strb	r3, [r4, #0]
 801b4ec:	e01d      	b.n	801b52a <coap_resource_notify_observers+0x5c>
      if (obs->query
 801b4ee:	6a2b      	ldr	r3, [r5, #32]
 801b4f0:	b1b3      	cbz	r3, 801b520 <coap_resource_notify_observers+0x52>
       && obs->query->length==query->length
 801b4f2:	6831      	ldr	r1, [r6, #0]
 801b4f4:	681a      	ldr	r2, [r3, #0]
 801b4f6:	428a      	cmp	r2, r1
 801b4f8:	d112      	bne.n	801b520 <coap_resource_notify_observers+0x52>
       && memcmp(obs->query->s, query->s, query->length)==0 ) {
 801b4fa:	6871      	ldr	r1, [r6, #4]
 801b4fc:	6858      	ldr	r0, [r3, #4]
 801b4fe:	f000 fe91 	bl	801c224 <memcmp>
 801b502:	b968      	cbnz	r0, 801b520 <coap_resource_notify_observers+0x52>
        if (!r->dirty && !obs->dirty) {
 801b504:	7823      	ldrb	r3, [r4, #0]
 801b506:	07d9      	lsls	r1, r3, #31
 801b508:	d409      	bmi.n	801b51e <coap_resource_notify_observers+0x50>
 801b50a:	7a2b      	ldrb	r3, [r5, #8]
 801b50c:	065a      	lsls	r2, r3, #25
 801b50e:	d406      	bmi.n	801b51e <coap_resource_notify_observers+0x50>
          obs->dirty = 1;
 801b510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b514:	722b      	strb	r3, [r5, #8]
          r->partiallydirty = 1;
 801b516:	7823      	ldrb	r3, [r4, #0]
 801b518:	f043 0302 	orr.w	r3, r3, #2
 801b51c:	7023      	strb	r3, [r4, #0]
        found = 1;
 801b51e:	2701      	movs	r7, #1
    LL_FOREACH(r->subscribers, obs) {
 801b520:	682d      	ldr	r5, [r5, #0]
 801b522:	2d00      	cmp	r5, #0
 801b524:	d1e3      	bne.n	801b4ee <coap_resource_notify_observers+0x20>
    if (!found)
 801b526:	2f00      	cmp	r7, #0
 801b528:	d0d7      	beq.n	801b4da <coap_resource_notify_observers+0xc>
  r->observe = (r->observe + 1) & 0xFFFFFF;
 801b52a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801b52c:	3301      	adds	r3, #1
 801b52e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801b532:	6523      	str	r3, [r4, #80]	; 0x50
  return 1;
 801b534:	2001      	movs	r0, #1
 801b536:	e7d1      	b.n	801b4dc <coap_resource_notify_observers+0xe>
    int found = 0;
 801b538:	2700      	movs	r7, #0
 801b53a:	e7f2      	b.n	801b522 <coap_resource_notify_observers+0x54>

0801b53c <coap_check_notify>:

void
coap_check_notify(coap_context_t *context) {
 801b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RESOURCES_ITER(context->resources, r) {
 801b540:	68c5      	ldr	r5, [r0, #12]
coap_check_notify(coap_context_t *context) {
 801b542:	b089      	sub	sp, #36	; 0x24
 801b544:	4680      	mov	r8, r0
  RESOURCES_ITER(context->resources, r) {
 801b546:	b175      	cbz	r5, 801b566 <coap_check_notify+0x2a>
 801b548:	6aaf      	ldr	r7, [r5, #40]	; 0x28
        coap_log(LOG_DEBUG,
 801b54a:	f8df a180 	ldr.w	sl, [pc, #384]	; 801b6cc <coap_check_notify+0x190>
        coap_log(LOG_DEBUG,
 801b54e:	f8df b180 	ldr.w	fp, [pc, #384]	; 801b6d0 <coap_check_notify+0x194>
  if (r->observable && (r->dirty || r->partiallydirty)) {
 801b552:	782b      	ldrb	r3, [r5, #0]
 801b554:	075e      	lsls	r6, r3, #29
 801b556:	d409      	bmi.n	801b56c <coap_check_notify+0x30>
  r->dirty = 0;
 801b558:	782b      	ldrb	r3, [r5, #0]
 801b55a:	f36f 0300 	bfc	r3, #0, #1
 801b55e:	702b      	strb	r3, [r5, #0]
  RESOURCES_ITER(context->resources, r) {
 801b560:	2f00      	cmp	r7, #0
 801b562:	f040 80a8 	bne.w	801b6b6 <coap_check_notify+0x17a>
    coap_notify_observers(context, r);
  }
}
 801b566:	b009      	add	sp, #36	; 0x24
 801b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (r->observable && (r->dirty || r->partiallydirty)) {
 801b56c:	079c      	lsls	r4, r3, #30
 801b56e:	d0f3      	beq.n	801b558 <coap_check_notify+0x1c>
    h = r->handler[COAP_REQUEST_GET - 1];
 801b570:	f8d5 9004 	ldr.w	r9, [r5, #4]
    r->partiallydirty = 0;
 801b574:	f36f 0341 	bfc	r3, #1, #1
 801b578:	702b      	strb	r3, [r5, #0]
    assert(h);                /* we do not allow subscriptions if no
 801b57a:	f1b9 0f00 	cmp.w	r9, #0
 801b57e:	d106      	bne.n	801b58e <coap_check_notify+0x52>
 801b580:	4b4e      	ldr	r3, [pc, #312]	; (801b6bc <coap_check_notify+0x180>)
 801b582:	4a4f      	ldr	r2, [pc, #316]	; (801b6c0 <coap_check_notify+0x184>)
 801b584:	484f      	ldr	r0, [pc, #316]	; (801b6c4 <coap_check_notify+0x188>)
 801b586:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 801b58a:	f000 fa77 	bl	801ba7c <__assert_func>
    LL_FOREACH(r->subscribers, obs) {
 801b58e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 801b590:	2c00      	cmp	r4, #0
 801b592:	d0e1      	beq.n	801b558 <coap_check_notify+0x1c>
      if (r->dirty == 0 && obs->dirty == 0)
 801b594:	782b      	ldrb	r3, [r5, #0]
 801b596:	07d8      	lsls	r0, r3, #31
 801b598:	d402      	bmi.n	801b5a0 <coap_check_notify+0x64>
 801b59a:	7a23      	ldrb	r3, [r4, #8]
 801b59c:	0659      	lsls	r1, r3, #25
 801b59e:	d529      	bpl.n	801b5f4 <coap_check_notify+0xb8>
      if (obs->session->con_active >= COAP_DEFAULT_NSTART &&
 801b5a0:	6860      	ldr	r0, [r4, #4]
 801b5a2:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
 801b5a6:	b13b      	cbz	r3, 801b5b8 <coap_check_notify+0x7c>
          ((r->flags & COAP_RESOURCE_FLAGS_NOTIFY_CON) ||
 801b5a8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      if (obs->session->con_active >= COAP_DEFAULT_NSTART &&
 801b5aa:	079a      	lsls	r2, r3, #30
 801b5ac:	d422      	bmi.n	801b5f4 <coap_check_notify+0xb8>
           (obs->non_cnt >= COAP_OBS_MAX_NON)))
 801b5ae:	7a23      	ldrb	r3, [r4, #8]
          ((r->flags & COAP_RESOURCE_FLAGS_NOTIFY_CON) ||
 801b5b0:	f003 030f 	and.w	r3, r3, #15
 801b5b4:	2b04      	cmp	r3, #4
 801b5b6:	d81d      	bhi.n	801b5f4 <coap_check_notify+0xb8>
      obs->dirty = 0;
 801b5b8:	7a23      	ldrb	r3, [r4, #8]
 801b5ba:	f36f 1386 	bfc	r3, #6, #1
 801b5be:	7223      	strb	r3, [r4, #8]
      response = coap_pdu_init(COAP_MESSAGE_CON, 0, 0, coap_session_max_pdu_size(obs->session));
 801b5c0:	f7fb fba0 	bl	8016d04 <coap_session_max_pdu_size>
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	4611      	mov	r1, r2
 801b5ca:	4610      	mov	r0, r2
 801b5cc:	f7fe fc2e 	bl	8019e2c <coap_pdu_init>
      if (!response) {
 801b5d0:	4606      	mov	r6, r0
 801b5d2:	b988      	cbnz	r0, 801b5f8 <coap_check_notify+0xbc>
        obs->dirty = 1;
 801b5d4:	7a23      	ldrb	r3, [r4, #8]
 801b5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5da:	7223      	strb	r3, [r4, #8]
        r->partiallydirty = 1;
 801b5dc:	782b      	ldrb	r3, [r5, #0]
 801b5de:	f043 0302 	orr.w	r3, r3, #2
 801b5e2:	702b      	strb	r3, [r5, #0]
        coap_log(LOG_DEBUG,
 801b5e4:	f7f9 fcfe 	bl	8014fe4 <coap_get_log_level>
 801b5e8:	2806      	cmp	r0, #6
 801b5ea:	d903      	bls.n	801b5f4 <coap_check_notify+0xb8>
 801b5ec:	4659      	mov	r1, fp
 801b5ee:	2007      	movs	r0, #7
 801b5f0:	f7f9 fd62 	bl	80150b8 <coap_log_impl>
    LL_FOREACH(r->subscribers, obs) {
 801b5f4:	6824      	ldr	r4, [r4, #0]
 801b5f6:	e7cb      	b.n	801b590 <coap_check_notify+0x54>
      if (!coap_add_token(response, obs->token_length, obs->token)) {
 801b5f8:	f104 0218 	add.w	r2, r4, #24
 801b5fc:	6961      	ldr	r1, [r4, #20]
 801b5fe:	9205      	str	r2, [sp, #20]
 801b600:	f7fe fcba 	bl	8019f78 <coap_add_token>
 801b604:	9a05      	ldr	r2, [sp, #20]
 801b606:	b998      	cbnz	r0, 801b630 <coap_check_notify+0xf4>
        obs->dirty = 1;
 801b608:	7a23      	ldrb	r3, [r4, #8]
 801b60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b60e:	7223      	strb	r3, [r4, #8]
        r->partiallydirty = 1;
 801b610:	782b      	ldrb	r3, [r5, #0]
 801b612:	f043 0302 	orr.w	r3, r3, #2
 801b616:	702b      	strb	r3, [r5, #0]
        coap_log(LOG_DEBUG,
 801b618:	f7f9 fce4 	bl	8014fe4 <coap_get_log_level>
 801b61c:	2806      	cmp	r0, #6
 801b61e:	d903      	bls.n	801b628 <coap_check_notify+0xec>
 801b620:	4651      	mov	r1, sl
 801b622:	2007      	movs	r0, #7
 801b624:	f7f9 fd48 	bl	80150b8 <coap_log_impl>
        coap_delete_pdu(response);
 801b628:	4630      	mov	r0, r6
 801b62a:	f7fe fc30 	bl	8019e8e <coap_delete_pdu>
        continue;
 801b62e:	e7e1      	b.n	801b5f4 <coap_check_notify+0xb8>
      token.length = obs->token_length;
 801b630:	6963      	ldr	r3, [r4, #20]
      token.s = obs->token;
 801b632:	e9cd 3206 	strd	r3, r2, [sp, #24]
      obs->tid = response->tid = coap_new_message_id(obs->session);
 801b636:	6862      	ldr	r2, [r4, #4]
 *
 * @return        Incremented message id in network byte order.
 */
COAP_STATIC_INLINE uint16_t
coap_new_message_id(coap_session_t *session) {
  return ++session->tx_mid;
 801b638:	f8b2 308c 	ldrh.w	r3, [r2, #140]	; 0x8c
 801b63c:	3301      	adds	r3, #1
 801b63e:	b29b      	uxth	r3, r3
 801b640:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
 801b644:	80f3      	strh	r3, [r6, #6]
 801b646:	8163      	strh	r3, [r4, #10]
      if ((r->flags & COAP_RESOURCE_FLAGS_NOTIFY_CON) == 0
 801b648:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801b64a:	079b      	lsls	r3, r3, #30
 801b64c:	d431      	bmi.n	801b6b2 <coap_check_notify+0x176>
          && obs->non_cnt < COAP_OBS_MAX_NON) {
 801b64e:	7a23      	ldrb	r3, [r4, #8]
 801b650:	f003 030f 	and.w	r3, r3, #15
        response->type = COAP_MESSAGE_CON;
 801b654:	2b04      	cmp	r3, #4
 801b656:	bf8c      	ite	hi
 801b658:	2300      	movhi	r3, #0
 801b65a:	2301      	movls	r3, #1
 801b65c:	7033      	strb	r3, [r6, #0]
      h(context, r, obs->session, NULL, &token, obs->query, response);
 801b65e:	9602      	str	r6, [sp, #8]
 801b660:	6a23      	ldr	r3, [r4, #32]
 801b662:	9301      	str	r3, [sp, #4]
 801b664:	ab06      	add	r3, sp, #24
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	4629      	mov	r1, r5
 801b66a:	2300      	movs	r3, #0
 801b66c:	4640      	mov	r0, r8
 801b66e:	47c8      	blx	r9
      if (response->type == COAP_MESSAGE_CON) {
 801b670:	7833      	ldrb	r3, [r6, #0]
 801b672:	b11b      	cbz	r3, 801b67c <coap_check_notify+0x140>
        obs->non_cnt++;
 801b674:	7a23      	ldrb	r3, [r4, #8]
 801b676:	3301      	adds	r3, #1
 801b678:	f003 030f 	and.w	r3, r3, #15
 801b67c:	7a22      	ldrb	r2, [r4, #8]
      tid = coap_send( obs->session, response );
 801b67e:	6860      	ldr	r0, [r4, #4]
 801b680:	f363 0203 	bfi	r2, r3, #0, #4
 801b684:	7222      	strb	r2, [r4, #8]
 801b686:	4631      	mov	r1, r6
 801b688:	f7fd f914 	bl	80188b4 <coap_send>
      if (COAP_INVALID_TID == tid) {
 801b68c:	3001      	adds	r0, #1
 801b68e:	d1b1      	bne.n	801b5f4 <coap_check_notify+0xb8>
        coap_log(LOG_DEBUG,
 801b690:	f7f9 fca8 	bl	8014fe4 <coap_get_log_level>
 801b694:	2806      	cmp	r0, #6
 801b696:	d903      	bls.n	801b6a0 <coap_check_notify+0x164>
 801b698:	490b      	ldr	r1, [pc, #44]	; (801b6c8 <coap_check_notify+0x18c>)
 801b69a:	2007      	movs	r0, #7
 801b69c:	f7f9 fd0c 	bl	80150b8 <coap_log_impl>
        obs->dirty = 1;
 801b6a0:	7a23      	ldrb	r3, [r4, #8]
 801b6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b6a6:	7223      	strb	r3, [r4, #8]
        r->partiallydirty = 1;
 801b6a8:	782b      	ldrb	r3, [r5, #0]
 801b6aa:	f043 0302 	orr.w	r3, r3, #2
 801b6ae:	702b      	strb	r3, [r5, #0]
 801b6b0:	e7a0      	b.n	801b5f4 <coap_check_notify+0xb8>
        response->type = COAP_MESSAGE_CON;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e7d2      	b.n	801b65c <coap_check_notify+0x120>
  RESOURCES_ITER(context->resources, r) {
 801b6b6:	463d      	mov	r5, r7
 801b6b8:	6abf      	ldr	r7, [r7, #40]	; 0x28
 801b6ba:	e74a      	b.n	801b552 <coap_check_notify+0x16>
 801b6bc:	08032445 	.word	0x08032445
 801b6c0:	0802ae11 	.word	0x0802ae11
 801b6c4:	080316af 	.word	0x080316af
 801b6c8:	08031934 	.word	0x08031934
 801b6cc:	080318ef 	.word	0x080318ef
 801b6d0:	080318ab 	.word	0x080318ab

0801b6d4 <coap_handle_failed_notify>:
}

void
coap_handle_failed_notify(coap_context_t *context,
                          coap_session_t *session,
                          const coap_binary_t *token) {
 801b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RESOURCES_ITER(context->resources, r) {
 801b6d8:	68c6      	ldr	r6, [r0, #12]
                          const coap_binary_t *token) {
 801b6da:	b091      	sub	sp, #68	; 0x44
 801b6dc:	4680      	mov	r8, r0
 801b6de:	9100      	str	r1, [sp, #0]
 801b6e0:	4691      	mov	r9, r2
  RESOURCES_ITER(context->resources, r) {
 801b6e2:	2e00      	cmp	r6, #0
 801b6e4:	d061      	beq.n	801b7aa <coap_handle_failed_notify+0xd6>
 801b6e6:	6ab7      	ldr	r7, [r6, #40]	; 0x28
            coap_log(LOG_DEBUG, "** removed observer %s\n", addr);
 801b6e8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801b7b0 <coap_handle_failed_notify+0xdc>
  LL_FOREACH_SAFE(resource->subscribers, obs, otmp) {
 801b6ec:	6c75      	ldr	r5, [r6, #68]	; 0x44
 801b6ee:	462c      	mov	r4, r5
 801b6f0:	b1fc      	cbz	r4, 801b732 <coap_handle_failed_notify+0x5e>
    if ( obs->session == session &&
 801b6f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 801b6f6:	9900      	ldr	r1, [sp, #0]
 801b6f8:	4291      	cmp	r1, r2
 801b6fa:	d154      	bne.n	801b7a6 <coap_handle_failed_notify+0xd2>
        token->length == obs->token_length &&
 801b6fc:	f8d9 2000 	ldr.w	r2, [r9]
    if ( obs->session == session &&
 801b700:	6961      	ldr	r1, [r4, #20]
 801b702:	428a      	cmp	r2, r1
 801b704:	d14f      	bne.n	801b7a6 <coap_handle_failed_notify+0xd2>
        memcmp(token->s, obs->token, token->length) == 0) {
 801b706:	f104 0a18 	add.w	sl, r4, #24
 801b70a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b70e:	9301      	str	r3, [sp, #4]
 801b710:	4651      	mov	r1, sl
 801b712:	f000 fd87 	bl	801c224 <memcmp>
        token->length == obs->token_length &&
 801b716:	9b01      	ldr	r3, [sp, #4]
 801b718:	2800      	cmp	r0, #0
 801b71a:	d144      	bne.n	801b7a6 <coap_handle_failed_notify+0xd2>
      if (obs->fail_cnt < COAP_OBS_MAX_FAIL)
 801b71c:	7a22      	ldrb	r2, [r4, #8]
 801b71e:	f002 0130 	and.w	r1, r2, #48	; 0x30
 801b722:	2930      	cmp	r1, #48	; 0x30
 801b724:	d00a      	beq.n	801b73c <coap_handle_failed_notify+0x68>
        obs->fail_cnt++;
 801b726:	f3c2 1301 	ubfx	r3, r2, #4, #2
 801b72a:	3301      	adds	r3, #1
 801b72c:	f363 1205 	bfi	r2, r3, #4, #2
 801b730:	7222      	strb	r2, [r4, #8]
  RESOURCES_ITER(context->resources, r) {
 801b732:	2f00      	cmp	r7, #0
 801b734:	d039      	beq.n	801b7aa <coap_handle_failed_notify+0xd6>
 801b736:	463e      	mov	r6, r7
 801b738:	6abf      	ldr	r7, [r7, #40]	; 0x28
 801b73a:	e7d7      	b.n	801b6ec <coap_handle_failed_notify+0x18>
        LL_DELETE(resource->subscribers, obs);
 801b73c:	42a5      	cmp	r5, r4
 801b73e:	d12a      	bne.n	801b796 <coap_handle_failed_notify+0xc2>
 801b740:	6473      	str	r3, [r6, #68]	; 0x44
        obs->fail_cnt = 0;
 801b742:	7a23      	ldrb	r3, [r4, #8]
 801b744:	f36f 1305 	bfc	r3, #4, #2
 801b748:	7223      	strb	r3, [r4, #8]
        if (LOG_DEBUG <= coap_get_log_level()) {
 801b74a:	f7f9 fc4b 	bl	8014fe4 <coap_get_log_level>
 801b74e:	2806      	cmp	r0, #6
 801b750:	d90f      	bls.n	801b772 <coap_handle_failed_notify+0x9e>
          if (coap_print_addr(&obs->session->remote_addr, addr, INET6_ADDRSTRLEN+8))
 801b752:	6860      	ldr	r0, [r4, #4]
 801b754:	2236      	movs	r2, #54	; 0x36
 801b756:	a902      	add	r1, sp, #8
 801b758:	3034      	adds	r0, #52	; 0x34
 801b75a:	f7f9 fc4f 	bl	8014ffc <coap_print_addr>
 801b75e:	b140      	cbz	r0, 801b772 <coap_handle_failed_notify+0x9e>
            coap_log(LOG_DEBUG, "** removed observer %s\n", addr);
 801b760:	f7f9 fc40 	bl	8014fe4 <coap_get_log_level>
 801b764:	2806      	cmp	r0, #6
 801b766:	d904      	bls.n	801b772 <coap_handle_failed_notify+0x9e>
 801b768:	aa02      	add	r2, sp, #8
 801b76a:	4659      	mov	r1, fp
 801b76c:	2007      	movs	r0, #7
 801b76e:	f7f9 fca3 	bl	80150b8 <coap_log_impl>
        coap_cancel_all_messages(context, obs->session,
 801b772:	6963      	ldr	r3, [r4, #20]
 801b774:	6861      	ldr	r1, [r4, #4]
 801b776:	4652      	mov	r2, sl
 801b778:	4640      	mov	r0, r8
 801b77a:	f7fc fd87 	bl	801828c <coap_cancel_all_messages>
        coap_session_release( obs->session );
 801b77e:	6860      	ldr	r0, [r4, #4]
 801b780:	f7fb fbb6 	bl	8016ef0 <coap_session_release>
        if (obs->query)
 801b784:	6a20      	ldr	r0, [r4, #32]
 801b786:	b108      	cbz	r0, 801b78c <coap_handle_failed_notify+0xb8>
          coap_delete_string(obs->query);
 801b788:	f000 f830 	bl	801b7ec <coap_delete_string>
 801b78c:	4621      	mov	r1, r4
 801b78e:	2000      	movs	r0, #0
 801b790:	f7fc f9bb 	bl	8017b0a <coap_free_type>
}
 801b794:	e7cd      	b.n	801b732 <coap_handle_failed_notify+0x5e>
        LL_DELETE(resource->subscribers, obs);
 801b796:	462a      	mov	r2, r5
 801b798:	682d      	ldr	r5, [r5, #0]
 801b79a:	2d00      	cmp	r5, #0
 801b79c:	d0d1      	beq.n	801b742 <coap_handle_failed_notify+0x6e>
 801b79e:	42ac      	cmp	r4, r5
 801b7a0:	d1f9      	bne.n	801b796 <coap_handle_failed_notify+0xc2>
 801b7a2:	6013      	str	r3, [r2, #0]
 801b7a4:	e7cd      	b.n	801b742 <coap_handle_failed_notify+0x6e>
  RESOURCES_ITER(context->resources, r) {
 801b7a6:	461c      	mov	r4, r3
 801b7a8:	e7a2      	b.n	801b6f0 <coap_handle_failed_notify+0x1c>
        coap_remove_failed_observers(context, r, session, token);
  }
}
 801b7aa:	b011      	add	sp, #68	; 0x44
 801b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7b0:	08031977 	.word	0x08031977

0801b7b4 <coap_new_string>:
#include "libcoap.h"
#include "coap_debug.h"
#include "mem.h"
#include "str.h"

coap_string_t *coap_new_string(size_t size) {
 801b7b4:	b538      	push	{r3, r4, r5, lr}
  coap_string_t *s =
            (coap_string_t *)coap_malloc_type(COAP_STRING, sizeof(coap_string_t) + size + 1);
 801b7b6:	f100 0109 	add.w	r1, r0, #9
coap_string_t *coap_new_string(size_t size) {
 801b7ba:	4605      	mov	r5, r0
            (coap_string_t *)coap_malloc_type(COAP_STRING, sizeof(coap_string_t) + size + 1);
 801b7bc:	2000      	movs	r0, #0
 801b7be:	f7fc f9a1 	bl	8017b04 <coap_malloc_type>
  if ( !s ) {
 801b7c2:	4604      	mov	r4, r0
 801b7c4:	b948      	cbnz	r0, 801b7da <coap_new_string+0x26>
#ifndef NDEBUG
    coap_log(LOG_CRIT, "coap_new_string: malloc\n");
 801b7c6:	f7f9 fc0d 	bl	8014fe4 <coap_get_log_level>
 801b7ca:	2801      	cmp	r0, #1
 801b7cc:	d903      	bls.n	801b7d6 <coap_new_string+0x22>
 801b7ce:	4906      	ldr	r1, [pc, #24]	; (801b7e8 <coap_new_string+0x34>)
 801b7d0:	2002      	movs	r0, #2
 801b7d2:	f7f9 fc71 	bl	80150b8 <coap_log_impl>

  memset(s, 0, sizeof(coap_string_t));
  s->s = ((unsigned char *)s) + sizeof(coap_string_t);
  s->s[size] = '\000';
  return s;
}
 801b7d6:	4620      	mov	r0, r4
 801b7d8:	bd38      	pop	{r3, r4, r5, pc}
  memset(s, 0, sizeof(coap_string_t));
 801b7da:	4603      	mov	r3, r0
 801b7dc:	2200      	movs	r2, #0
 801b7de:	f843 2b08 	str.w	r2, [r3], #8
  s->s = ((unsigned char *)s) + sizeof(coap_string_t);
 801b7e2:	6043      	str	r3, [r0, #4]
  s->s[size] = '\000';
 801b7e4:	555a      	strb	r2, [r3, r5]
  return s;
 801b7e6:	e7f6      	b.n	801b7d6 <coap_new_string+0x22>
 801b7e8:	08031993 	.word	0x08031993

0801b7ec <coap_delete_string>:

void coap_delete_string(coap_string_t *s) {
 801b7ec:	4601      	mov	r1, r0
  coap_free_type(COAP_STRING, s);
 801b7ee:	2000      	movs	r0, #0
 801b7f0:	f7fc b98b 	b.w	8017b0a <coap_free_type>

0801b7f4 <coap_new_str_const>:
}

coap_str_const_t *coap_new_str_const(const uint8_t *data, size_t size) {
 801b7f4:	b570      	push	{r4, r5, r6, lr}
 801b7f6:	4606      	mov	r6, r0
  coap_string_t *s = coap_new_string(size);
 801b7f8:	4608      	mov	r0, r1
coap_str_const_t *coap_new_str_const(const uint8_t *data, size_t size) {
 801b7fa:	460d      	mov	r5, r1
  coap_string_t *s = coap_new_string(size);
 801b7fc:	f7ff ffda 	bl	801b7b4 <coap_new_string>
  if (!s)
 801b800:	4604      	mov	r4, r0
 801b802:	b128      	cbz	r0, 801b810 <coap_new_str_const+0x1c>
    return NULL;
  memcpy (s->s, data, size);
 801b804:	6840      	ldr	r0, [r0, #4]
 801b806:	462a      	mov	r2, r5
 801b808:	4631      	mov	r1, r6
 801b80a:	f000 fd19 	bl	801c240 <memcpy>
  s->length = size;
 801b80e:	6025      	str	r5, [r4, #0]
  return (coap_str_const_t *)s;
}
 801b810:	4620      	mov	r0, r4
 801b812:	bd70      	pop	{r4, r5, r6, pc}

0801b814 <coap_delete_str_const>:

void coap_delete_str_const(coap_str_const_t *s) {
 801b814:	4601      	mov	r1, r0
  coap_free_type(COAP_STRING, s);
 801b816:	2000      	movs	r0, #0
 801b818:	f7fc b977 	b.w	8017b0a <coap_free_type>

0801b81c <coap_subscription_init>:
#endif

#include "subscribe.h"

void
coap_subscription_init(coap_subscription_t *s) {
 801b81c:	b508      	push	{r3, lr}
  assert(s);
 801b81e:	b928      	cbnz	r0, 801b82c <coap_subscription_init+0x10>
 801b820:	4b05      	ldr	r3, [pc, #20]	; (801b838 <coap_subscription_init+0x1c>)
 801b822:	4a06      	ldr	r2, [pc, #24]	; (801b83c <coap_subscription_init+0x20>)
 801b824:	4806      	ldr	r0, [pc, #24]	; (801b840 <coap_subscription_init+0x24>)
 801b826:	2115      	movs	r1, #21
 801b828:	f000 f928 	bl	801ba7c <__assert_func>
  memset(s, 0, sizeof(coap_subscription_t));
}
 801b82c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memset(s, 0, sizeof(coap_subscription_t));
 801b830:	2224      	movs	r2, #36	; 0x24
 801b832:	2100      	movs	r1, #0
 801b834:	f000 bd2c 	b.w	801c290 <memset>
 801b838:	0802f0f0 	.word	0x0802f0f0
 801b83c:	0802ae27 	.word	0x0802ae27
 801b840:	080319ac 	.word	0x080319ac

0801b844 <is_unescaped_in_path>:
}

COAP_STATIC_INLINE int
is_unescaped_in_path(const uint8_t c) {
  return ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' )
      || ( c >= '0' && c <= '9' ) || c == '-' || c == '.' || c == '_'
 801b844:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
 801b848:	b2db      	uxtb	r3, r3
 801b84a:	2b1f      	cmp	r3, #31
 801b84c:	d804      	bhi.n	801b858 <is_unescaped_in_path+0x14>
 801b84e:	4a0b      	ldr	r2, [pc, #44]	; (801b87c <is_unescaped_in_path+0x38>)
 801b850:	fa22 f303 	lsr.w	r3, r2, r3
 801b854:	07db      	lsls	r3, r3, #31
 801b856:	d40f      	bmi.n	801b878 <is_unescaped_in_path+0x34>
      || c == '~' || c == '!' || c == '$' || c == '\'' || c == '('
 801b858:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
 801b85c:	b2db      	uxtb	r3, r3
 801b85e:	2b1c      	cmp	r3, #28
 801b860:	d905      	bls.n	801b86e <is_unescaped_in_path+0x2a>
      || c == ')' || c == '*' || c == '+' || c == ',' || c == ';' || c=='='
      || c==':' || c=='@' || c == '&';
 801b862:	3840      	subs	r0, #64	; 0x40
 801b864:	281a      	cmp	r0, #26
 801b866:	bf8c      	ite	hi
 801b868:	2000      	movhi	r0, #0
 801b86a:	2001      	movls	r0, #1
 801b86c:	4770      	bx	lr
      || c == '~' || c == '!' || c == '$' || c == '\'' || c == '('
 801b86e:	4804      	ldr	r0, [pc, #16]	; (801b880 <is_unescaped_in_path+0x3c>)
 801b870:	40d8      	lsrs	r0, r3
      || c==':' || c=='@' || c == '&';
 801b872:	f000 0001 	and.w	r0, r0, #1
 801b876:	4770      	bx	lr
 801b878:	2001      	movs	r0, #1
}
 801b87a:	4770      	bx	lr
 801b87c:	8ffffffd 	.word	0x8ffffffd
 801b880:	17ffbfe9 	.word	0x17ffbfe9

0801b884 <coap_get_query>:
COAP_STATIC_INLINE int
is_unescaped_in_query(const uint8_t c) {
  return is_unescaped_in_path(c) || c=='/' || c=='?';
}

coap_string_t *coap_get_query(const coap_pdu_t *request) {
 801b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b888:	b08a      	sub	sp, #40	; 0x28
 801b88a:	4606      	mov	r6, r0
  memset(f, 0, sizeof(coap_opt_filter_t));
 801b88c:	2400      	movs	r4, #0
  coap_string_t *query = NULL;
  size_t length = 0;
  static const uint8_t hex[] = "0123456789ABCDEF";

  coap_option_filter_clear(f);
  coap_option_filter_set(f, COAP_OPTION_URI_QUERY);
 801b88e:	210f      	movs	r1, #15
 801b890:	a801      	add	r0, sp, #4
 801b892:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801b896:	9403      	str	r4, [sp, #12]
 801b898:	f7fe fa2c 	bl	8019cf4 <coap_option_filter_set>
  coap_option_iterator_init(request, &opt_iter, f);
 801b89c:	aa01      	add	r2, sp, #4
 801b89e:	a904      	add	r1, sp, #16
 801b8a0:	4630      	mov	r0, r6
 801b8a2:	f7fe f8b9 	bl	8019a18 <coap_option_iterator_init>
  while ((q = coap_option_next(&opt_iter))) {
 801b8a6:	a804      	add	r0, sp, #16
 801b8a8:	f7fe fa2e 	bl	8019d08 <coap_option_next>
 801b8ac:	4607      	mov	r7, r0
 801b8ae:	b928      	cbnz	r0, 801b8bc <coap_get_query+0x38>
      else
        length += 3;
    }
    length += 1;
  }
  if (length > 0)
 801b8b0:	b9f4      	cbnz	r4, 801b8f0 <coap_get_query+0x6c>
  coap_string_t *query = NULL;
 801b8b2:	2500      	movs	r5, #0
        }
      }
    }
  }
  return query;
}
 801b8b4:	4628      	mov	r0, r5
 801b8b6:	b00a      	add	sp, #40	; 0x28
 801b8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint16_t seg_len = coap_opt_length(q), i;
 801b8bc:	f7fe f8f0 	bl	8019aa0 <coap_opt_length>
 801b8c0:	4605      	mov	r5, r0
    const uint8_t *seg= coap_opt_value(q);
 801b8c2:	4638      	mov	r0, r7
 801b8c4:	f7fe f926 	bl	8019b14 <coap_opt_value>
 801b8c8:	4601      	mov	r1, r0
    for (i = 0; i < seg_len; i++) {
 801b8ca:	4405      	add	r5, r0
 801b8cc:	42a9      	cmp	r1, r5
 801b8ce:	d101      	bne.n	801b8d4 <coap_get_query+0x50>
    length += 1;
 801b8d0:	3401      	adds	r4, #1
 801b8d2:	e7e8      	b.n	801b8a6 <coap_get_query+0x22>
      if (is_unescaped_in_query(seg[i]))
 801b8d4:	f811 7b01 	ldrb.w	r7, [r1], #1
  return is_unescaped_in_path(c) || c=='/' || c=='?';
 801b8d8:	4638      	mov	r0, r7
 801b8da:	f7ff ffb3 	bl	801b844 <is_unescaped_in_path>
 801b8de:	b928      	cbnz	r0, 801b8ec <coap_get_query+0x68>
 801b8e0:	f007 07ef 	and.w	r7, r7, #239	; 0xef
 801b8e4:	2f2f      	cmp	r7, #47	; 0x2f
 801b8e6:	d001      	beq.n	801b8ec <coap_get_query+0x68>
        length += 3;
 801b8e8:	3403      	adds	r4, #3
 801b8ea:	e7ef      	b.n	801b8cc <coap_get_query+0x48>
        length += 1;
 801b8ec:	3401      	adds	r4, #1
    for (i = 0; i < seg_len; i++) {
 801b8ee:	e7ed      	b.n	801b8cc <coap_get_query+0x48>
  if (length > 0) {
 801b8f0:	3c01      	subs	r4, #1
 801b8f2:	d0de      	beq.n	801b8b2 <coap_get_query+0x2e>
    query = coap_new_string(length);
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f7ff ff5d 	bl	801b7b4 <coap_new_string>
    if (query) {
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	d0d8      	beq.n	801b8b2 <coap_get_query+0x2e>
      query->length = length;
 801b900:	6004      	str	r4, [r0, #0]
      coap_option_iterator_init(request, &opt_iter, f);
 801b902:	aa01      	add	r2, sp, #4
      unsigned char *s = query->s;
 801b904:	6844      	ldr	r4, [r0, #4]
            *s++ = hex[seg[i]>>4];
 801b906:	4f20      	ldr	r7, [pc, #128]	; (801b988 <coap_get_query+0x104>)
      coap_option_iterator_init(request, &opt_iter, f);
 801b908:	a904      	add	r1, sp, #16
 801b90a:	4630      	mov	r0, r6
 801b90c:	f7fe f884 	bl	8019a18 <coap_option_iterator_init>
          *s++ = '&';
 801b910:	f04f 0826 	mov.w	r8, #38	; 0x26
      while ((q = coap_option_next(&opt_iter))) {
 801b914:	a804      	add	r0, sp, #16
 801b916:	f7fe f9f7 	bl	8019d08 <coap_option_next>
 801b91a:	4606      	mov	r6, r0
 801b91c:	2800      	cmp	r0, #0
 801b91e:	d0c9      	beq.n	801b8b4 <coap_get_query+0x30>
        if (s != query->s)
 801b920:	686b      	ldr	r3, [r5, #4]
 801b922:	42a3      	cmp	r3, r4
          *s++ = '&';
 801b924:	bf18      	it	ne
 801b926:	f804 8b01 	strbne.w	r8, [r4], #1
        uint16_t seg_len = coap_opt_length(q), i;
 801b92a:	4630      	mov	r0, r6
 801b92c:	f7fe f8b8 	bl	8019aa0 <coap_opt_length>
 801b930:	4681      	mov	r9, r0
        const uint8_t *seg= coap_opt_value(q);
 801b932:	4630      	mov	r0, r6
 801b934:	f7fe f8ee 	bl	8019b14 <coap_opt_value>
 801b938:	eb09 0600 	add.w	r6, r9, r0
 801b93c:	4601      	mov	r1, r0
            *s++ = '%';
 801b93e:	f04f 0925 	mov.w	r9, #37	; 0x25
        for (i = 0; i < seg_len; i++) {
 801b942:	42b1      	cmp	r1, r6
 801b944:	d0e6      	beq.n	801b914 <coap_get_query+0x90>
          if (is_unescaped_in_query(seg[i])) {
 801b946:	f891 a000 	ldrb.w	sl, [r1]
  return is_unescaped_in_path(c) || c=='/' || c=='?';
 801b94a:	4650      	mov	r0, sl
 801b94c:	f7ff ff7a 	bl	801b844 <is_unescaped_in_path>
 801b950:	b9b8      	cbnz	r0, 801b982 <coap_get_query+0xfe>
 801b952:	f00a 03ef 	and.w	r3, sl, #239	; 0xef
 801b956:	2b2f      	cmp	r3, #47	; 0x2f
 801b958:	d013      	beq.n	801b982 <coap_get_query+0xfe>
            *s++ = '%';
 801b95a:	f884 9000 	strb.w	r9, [r4]
            *s++ = hex[seg[i]>>4];
 801b95e:	780b      	ldrb	r3, [r1, #0]
 801b960:	eb07 1313 	add.w	r3, r7, r3, lsr #4
            *s++ = hex[seg[i]&0x0F];
 801b964:	3403      	adds	r4, #3
            *s++ = hex[seg[i]>>4];
 801b966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b96a:	f804 3c02 	strb.w	r3, [r4, #-2]
            *s++ = hex[seg[i]&0x0F];
 801b96e:	780b      	ldrb	r3, [r1, #0]
 801b970:	f003 030f 	and.w	r3, r3, #15
 801b974:	443b      	add	r3, r7
 801b976:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b97a:	f804 3c01 	strb.w	r3, [r4, #-1]
        for (i = 0; i < seg_len; i++) {
 801b97e:	3101      	adds	r1, #1
 801b980:	e7df      	b.n	801b942 <coap_get_query+0xbe>
            *s++ = seg[i];
 801b982:	f804 ab01 	strb.w	sl, [r4], #1
 801b986:	e7fa      	b.n	801b97e <coap_get_query+0xfa>
 801b988:	0802ae3e 	.word	0x0802ae3e

0801b98c <coap_get_uri_path>:

coap_string_t *coap_get_uri_path(const coap_pdu_t *request) {
 801b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b990:	b08b      	sub	sp, #44	; 0x2c
 801b992:	4606      	mov	r6, r0
 801b994:	2400      	movs	r4, #0
  coap_string_t *uri_path = NULL;
  size_t length = 0;
  static const uint8_t hex[] = "0123456789ABCDEF";

  coap_option_filter_clear(f);
  coap_option_filter_set(f, COAP_OPTION_URI_PATH);
 801b996:	210b      	movs	r1, #11
 801b998:	a801      	add	r0, sp, #4
 801b99a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801b99e:	9403      	str	r4, [sp, #12]
 801b9a0:	f7fe f9a8 	bl	8019cf4 <coap_option_filter_set>
  coap_option_iterator_init(request, &opt_iter, f);
 801b9a4:	aa01      	add	r2, sp, #4
 801b9a6:	a904      	add	r1, sp, #16
 801b9a8:	4630      	mov	r0, r6
 801b9aa:	f7fe f835 	bl	8019a18 <coap_option_iterator_init>
  while ((q = coap_option_next(&opt_iter))) {
 801b9ae:	a804      	add	r0, sp, #16
 801b9b0:	f7fe f9aa 	bl	8019d08 <coap_option_next>
 801b9b4:	4607      	mov	r7, r0
 801b9b6:	b9d8      	cbnz	r0, 801b9f0 <coap_get_uri_path+0x64>
    }
    /* bump for the leading "/" */
    length += 1;
  }
  /* The first entry does not have a leading "/" */
  if (length > 0)
 801b9b8:	b104      	cbz	r4, 801b9bc <coap_get_uri_path+0x30>
    length -= 1;
 801b9ba:	3c01      	subs	r4, #1

  /* if 0, either no URI_PATH Option, or the first one was empty */
  uri_path = coap_new_string(length);
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ff fef9 	bl	801b7b4 <coap_new_string>
  if (uri_path) {
 801b9c2:	4607      	mov	r7, r0
 801b9c4:	b180      	cbz	r0, 801b9e8 <coap_get_uri_path+0x5c>
    uri_path->length = length;
 801b9c6:	6004      	str	r4, [r0, #0]
    unsigned char *s = uri_path->s;
    int n = 0;
    coap_option_iterator_init(request, &opt_iter, f);
 801b9c8:	aa01      	add	r2, sp, #4
    unsigned char *s = uri_path->s;
 801b9ca:	6844      	ldr	r4, [r0, #4]
      for (i = 0; i < seg_len; i++) {
        if (is_unescaped_in_path(seg[i])) {
          *s++ = seg[i];
        } else {
          *s++ = '%';
          *s++ = hex[seg[i]>>4];
 801b9cc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 801ba78 <coap_get_uri_path+0xec>
    coap_option_iterator_init(request, &opt_iter, f);
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	a904      	add	r1, sp, #16
 801b9d4:	f7fe f820 	bl	8019a18 <coap_option_iterator_init>
    while ((q = coap_option_next(&opt_iter))) {
 801b9d8:	2600      	movs	r6, #0
        *s++ = '/';
 801b9da:	f04f 092f 	mov.w	r9, #47	; 0x2f
    while ((q = coap_option_next(&opt_iter))) {
 801b9de:	a804      	add	r0, sp, #16
 801b9e0:	f7fe f992 	bl	8019d08 <coap_option_next>
 801b9e4:	4605      	mov	r5, r0
 801b9e6:	b9c0      	cbnz	r0, 801ba1a <coap_get_uri_path+0x8e>
        }
      }
    }
  }
  return uri_path;
}
 801b9e8:	4638      	mov	r0, r7
 801b9ea:	b00b      	add	sp, #44	; 0x2c
 801b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint16_t seg_len = coap_opt_length(q), i;
 801b9f0:	f7fe f856 	bl	8019aa0 <coap_opt_length>
 801b9f4:	4605      	mov	r5, r0
    const uint8_t *seg= coap_opt_value(q);
 801b9f6:	4638      	mov	r0, r7
 801b9f8:	f7fe f88c 	bl	8019b14 <coap_opt_value>
 801b9fc:	4601      	mov	r1, r0
    for (i = 0; i < seg_len; i++) {
 801b9fe:	4405      	add	r5, r0
 801ba00:	42a9      	cmp	r1, r5
 801ba02:	d101      	bne.n	801ba08 <coap_get_uri_path+0x7c>
    length += 1;
 801ba04:	3401      	adds	r4, #1
 801ba06:	e7d2      	b.n	801b9ae <coap_get_uri_path+0x22>
      if (is_unescaped_in_path(seg[i]))
 801ba08:	f811 0b01 	ldrb.w	r0, [r1], #1
 801ba0c:	f7ff ff1a 	bl	801b844 <is_unescaped_in_path>
 801ba10:	b108      	cbz	r0, 801ba16 <coap_get_uri_path+0x8a>
        length += 1;
 801ba12:	3401      	adds	r4, #1
 801ba14:	e7f4      	b.n	801ba00 <coap_get_uri_path+0x74>
        length += 3;
 801ba16:	3403      	adds	r4, #3
    for (i = 0; i < seg_len; i++) {
 801ba18:	e7f2      	b.n	801ba00 <coap_get_uri_path+0x74>
      if (n++) {
 801ba1a:	b10e      	cbz	r6, 801ba20 <coap_get_uri_path+0x94>
        *s++ = '/';
 801ba1c:	f804 9b01 	strb.w	r9, [r4], #1
      uint16_t seg_len = coap_opt_length(q), i;
 801ba20:	4628      	mov	r0, r5
 801ba22:	f7fe f83d 	bl	8019aa0 <coap_opt_length>
 801ba26:	4682      	mov	sl, r0
      const uint8_t *seg= coap_opt_value(q);
 801ba28:	4628      	mov	r0, r5
 801ba2a:	f7fe f873 	bl	8019b14 <coap_opt_value>
 801ba2e:	eb0a 0500 	add.w	r5, sl, r0
 801ba32:	4601      	mov	r1, r0
          *s++ = '%';
 801ba34:	f04f 0a25 	mov.w	sl, #37	; 0x25
      for (i = 0; i < seg_len; i++) {
 801ba38:	42a9      	cmp	r1, r5
 801ba3a:	d101      	bne.n	801ba40 <coap_get_uri_path+0xb4>
 801ba3c:	3601      	adds	r6, #1
 801ba3e:	e7ce      	b.n	801b9de <coap_get_uri_path+0x52>
        if (is_unescaped_in_path(seg[i])) {
 801ba40:	f891 b000 	ldrb.w	fp, [r1]
 801ba44:	4658      	mov	r0, fp
 801ba46:	f7ff fefd 	bl	801b844 <is_unescaped_in_path>
 801ba4a:	b118      	cbz	r0, 801ba54 <coap_get_uri_path+0xc8>
          *s++ = seg[i];
 801ba4c:	f804 bb01 	strb.w	fp, [r4], #1
      for (i = 0; i < seg_len; i++) {
 801ba50:	3101      	adds	r1, #1
 801ba52:	e7f1      	b.n	801ba38 <coap_get_uri_path+0xac>
          *s++ = '%';
 801ba54:	f884 a000 	strb.w	sl, [r4]
          *s++ = hex[seg[i]>>4];
 801ba58:	780b      	ldrb	r3, [r1, #0]
 801ba5a:	091b      	lsrs	r3, r3, #4
          *s++ = hex[seg[i]&0x0F];
 801ba5c:	3403      	adds	r4, #3
          *s++ = hex[seg[i]>>4];
 801ba5e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ba62:	f804 3c02 	strb.w	r3, [r4, #-2]
          *s++ = hex[seg[i]&0x0F];
 801ba66:	780b      	ldrb	r3, [r1, #0]
 801ba68:	f003 030f 	and.w	r3, r3, #15
 801ba6c:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ba70:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ba74:	e7ec      	b.n	801ba50 <coap_get_uri_path+0xc4>
 801ba76:	bf00      	nop
 801ba78:	0802ae5f 	.word	0x0802ae5f

0801ba7c <__assert_func>:
 801ba7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba7e:	4614      	mov	r4, r2
 801ba80:	461a      	mov	r2, r3
 801ba82:	4b09      	ldr	r3, [pc, #36]	; (801baa8 <__assert_func+0x2c>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4605      	mov	r5, r0
 801ba88:	68d8      	ldr	r0, [r3, #12]
 801ba8a:	b14c      	cbz	r4, 801baa0 <__assert_func+0x24>
 801ba8c:	4b07      	ldr	r3, [pc, #28]	; (801baac <__assert_func+0x30>)
 801ba8e:	9100      	str	r1, [sp, #0]
 801ba90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba94:	4906      	ldr	r1, [pc, #24]	; (801bab0 <__assert_func+0x34>)
 801ba96:	462b      	mov	r3, r5
 801ba98:	f000 f9d6 	bl	801be48 <fiprintf>
 801ba9c:	f002 fd5a 	bl	801e554 <abort>
 801baa0:	4b04      	ldr	r3, [pc, #16]	; (801bab4 <__assert_func+0x38>)
 801baa2:	461c      	mov	r4, r3
 801baa4:	e7f3      	b.n	801ba8e <__assert_func+0x12>
 801baa6:	bf00      	nop
 801baa8:	2000011c 	.word	0x2000011c
 801baac:	08031a18 	.word	0x08031a18
 801bab0:	08031a25 	.word	0x08031a25
 801bab4:	08030bea 	.word	0x08030bea

0801bab8 <atoi>:
 801bab8:	220a      	movs	r2, #10
 801baba:	2100      	movs	r1, #0
 801babc:	f002 b974 	b.w	801dda8 <strtol>

0801bac0 <__errno>:
 801bac0:	4b01      	ldr	r3, [pc, #4]	; (801bac8 <__errno+0x8>)
 801bac2:	6818      	ldr	r0, [r3, #0]
 801bac4:	4770      	bx	lr
 801bac6:	bf00      	nop
 801bac8:	2000011c 	.word	0x2000011c

0801bacc <exit>:
 801bacc:	b508      	push	{r3, lr}
 801bace:	4b07      	ldr	r3, [pc, #28]	; (801baec <exit+0x20>)
 801bad0:	4604      	mov	r4, r0
 801bad2:	b113      	cbz	r3, 801bada <exit+0xe>
 801bad4:	2100      	movs	r1, #0
 801bad6:	f3af 8000 	nop.w
 801bada:	4b05      	ldr	r3, [pc, #20]	; (801baf0 <exit+0x24>)
 801badc:	6818      	ldr	r0, [r3, #0]
 801bade:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801bae0:	b103      	cbz	r3, 801bae4 <exit+0x18>
 801bae2:	4798      	blx	r3
 801bae4:	4620      	mov	r0, r4
 801bae6:	f7e5 f919 	bl	8000d1c <_exit>
 801baea:	bf00      	nop
 801baec:	00000000 	.word	0x00000000
 801baf0:	08031bb8 	.word	0x08031bb8

0801baf4 <__sflush_r>:
 801baf4:	898a      	ldrh	r2, [r1, #12]
 801baf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bafa:	4605      	mov	r5, r0
 801bafc:	0710      	lsls	r0, r2, #28
 801bafe:	460c      	mov	r4, r1
 801bb00:	d458      	bmi.n	801bbb4 <__sflush_r+0xc0>
 801bb02:	684b      	ldr	r3, [r1, #4]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	dc05      	bgt.n	801bb14 <__sflush_r+0x20>
 801bb08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	dc02      	bgt.n	801bb14 <__sflush_r+0x20>
 801bb0e:	2000      	movs	r0, #0
 801bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb16:	2e00      	cmp	r6, #0
 801bb18:	d0f9      	beq.n	801bb0e <__sflush_r+0x1a>
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb20:	682f      	ldr	r7, [r5, #0]
 801bb22:	602b      	str	r3, [r5, #0]
 801bb24:	d032      	beq.n	801bb8c <__sflush_r+0x98>
 801bb26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bb28:	89a3      	ldrh	r3, [r4, #12]
 801bb2a:	075a      	lsls	r2, r3, #29
 801bb2c:	d505      	bpl.n	801bb3a <__sflush_r+0x46>
 801bb2e:	6863      	ldr	r3, [r4, #4]
 801bb30:	1ac0      	subs	r0, r0, r3
 801bb32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb34:	b10b      	cbz	r3, 801bb3a <__sflush_r+0x46>
 801bb36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb38:	1ac0      	subs	r0, r0, r3
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb40:	6a21      	ldr	r1, [r4, #32]
 801bb42:	4628      	mov	r0, r5
 801bb44:	47b0      	blx	r6
 801bb46:	1c43      	adds	r3, r0, #1
 801bb48:	89a3      	ldrh	r3, [r4, #12]
 801bb4a:	d106      	bne.n	801bb5a <__sflush_r+0x66>
 801bb4c:	6829      	ldr	r1, [r5, #0]
 801bb4e:	291d      	cmp	r1, #29
 801bb50:	d82c      	bhi.n	801bbac <__sflush_r+0xb8>
 801bb52:	4a2a      	ldr	r2, [pc, #168]	; (801bbfc <__sflush_r+0x108>)
 801bb54:	40ca      	lsrs	r2, r1
 801bb56:	07d6      	lsls	r6, r2, #31
 801bb58:	d528      	bpl.n	801bbac <__sflush_r+0xb8>
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	6062      	str	r2, [r4, #4]
 801bb5e:	04d9      	lsls	r1, r3, #19
 801bb60:	6922      	ldr	r2, [r4, #16]
 801bb62:	6022      	str	r2, [r4, #0]
 801bb64:	d504      	bpl.n	801bb70 <__sflush_r+0x7c>
 801bb66:	1c42      	adds	r2, r0, #1
 801bb68:	d101      	bne.n	801bb6e <__sflush_r+0x7a>
 801bb6a:	682b      	ldr	r3, [r5, #0]
 801bb6c:	b903      	cbnz	r3, 801bb70 <__sflush_r+0x7c>
 801bb6e:	6560      	str	r0, [r4, #84]	; 0x54
 801bb70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb72:	602f      	str	r7, [r5, #0]
 801bb74:	2900      	cmp	r1, #0
 801bb76:	d0ca      	beq.n	801bb0e <__sflush_r+0x1a>
 801bb78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb7c:	4299      	cmp	r1, r3
 801bb7e:	d002      	beq.n	801bb86 <__sflush_r+0x92>
 801bb80:	4628      	mov	r0, r5
 801bb82:	f000 fb8d 	bl	801c2a0 <_free_r>
 801bb86:	2000      	movs	r0, #0
 801bb88:	6360      	str	r0, [r4, #52]	; 0x34
 801bb8a:	e7c1      	b.n	801bb10 <__sflush_r+0x1c>
 801bb8c:	6a21      	ldr	r1, [r4, #32]
 801bb8e:	2301      	movs	r3, #1
 801bb90:	4628      	mov	r0, r5
 801bb92:	47b0      	blx	r6
 801bb94:	1c41      	adds	r1, r0, #1
 801bb96:	d1c7      	bne.n	801bb28 <__sflush_r+0x34>
 801bb98:	682b      	ldr	r3, [r5, #0]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d0c4      	beq.n	801bb28 <__sflush_r+0x34>
 801bb9e:	2b1d      	cmp	r3, #29
 801bba0:	d001      	beq.n	801bba6 <__sflush_r+0xb2>
 801bba2:	2b16      	cmp	r3, #22
 801bba4:	d101      	bne.n	801bbaa <__sflush_r+0xb6>
 801bba6:	602f      	str	r7, [r5, #0]
 801bba8:	e7b1      	b.n	801bb0e <__sflush_r+0x1a>
 801bbaa:	89a3      	ldrh	r3, [r4, #12]
 801bbac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbb0:	81a3      	strh	r3, [r4, #12]
 801bbb2:	e7ad      	b.n	801bb10 <__sflush_r+0x1c>
 801bbb4:	690f      	ldr	r7, [r1, #16]
 801bbb6:	2f00      	cmp	r7, #0
 801bbb8:	d0a9      	beq.n	801bb0e <__sflush_r+0x1a>
 801bbba:	0793      	lsls	r3, r2, #30
 801bbbc:	680e      	ldr	r6, [r1, #0]
 801bbbe:	bf08      	it	eq
 801bbc0:	694b      	ldreq	r3, [r1, #20]
 801bbc2:	600f      	str	r7, [r1, #0]
 801bbc4:	bf18      	it	ne
 801bbc6:	2300      	movne	r3, #0
 801bbc8:	eba6 0807 	sub.w	r8, r6, r7
 801bbcc:	608b      	str	r3, [r1, #8]
 801bbce:	f1b8 0f00 	cmp.w	r8, #0
 801bbd2:	dd9c      	ble.n	801bb0e <__sflush_r+0x1a>
 801bbd4:	6a21      	ldr	r1, [r4, #32]
 801bbd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bbd8:	4643      	mov	r3, r8
 801bbda:	463a      	mov	r2, r7
 801bbdc:	4628      	mov	r0, r5
 801bbde:	47b0      	blx	r6
 801bbe0:	2800      	cmp	r0, #0
 801bbe2:	dc06      	bgt.n	801bbf2 <__sflush_r+0xfe>
 801bbe4:	89a3      	ldrh	r3, [r4, #12]
 801bbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbea:	81a3      	strh	r3, [r4, #12]
 801bbec:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf0:	e78e      	b.n	801bb10 <__sflush_r+0x1c>
 801bbf2:	4407      	add	r7, r0
 801bbf4:	eba8 0800 	sub.w	r8, r8, r0
 801bbf8:	e7e9      	b.n	801bbce <__sflush_r+0xda>
 801bbfa:	bf00      	nop
 801bbfc:	20400001 	.word	0x20400001

0801bc00 <_fflush_r>:
 801bc00:	b538      	push	{r3, r4, r5, lr}
 801bc02:	690b      	ldr	r3, [r1, #16]
 801bc04:	4605      	mov	r5, r0
 801bc06:	460c      	mov	r4, r1
 801bc08:	b913      	cbnz	r3, 801bc10 <_fflush_r+0x10>
 801bc0a:	2500      	movs	r5, #0
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	bd38      	pop	{r3, r4, r5, pc}
 801bc10:	b118      	cbz	r0, 801bc1a <_fflush_r+0x1a>
 801bc12:	6983      	ldr	r3, [r0, #24]
 801bc14:	b90b      	cbnz	r3, 801bc1a <_fflush_r+0x1a>
 801bc16:	f000 f899 	bl	801bd4c <__sinit>
 801bc1a:	4b14      	ldr	r3, [pc, #80]	; (801bc6c <_fflush_r+0x6c>)
 801bc1c:	429c      	cmp	r4, r3
 801bc1e:	d11b      	bne.n	801bc58 <_fflush_r+0x58>
 801bc20:	686c      	ldr	r4, [r5, #4]
 801bc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d0ef      	beq.n	801bc0a <_fflush_r+0xa>
 801bc2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bc2c:	07d0      	lsls	r0, r2, #31
 801bc2e:	d404      	bmi.n	801bc3a <_fflush_r+0x3a>
 801bc30:	0599      	lsls	r1, r3, #22
 801bc32:	d402      	bmi.n	801bc3a <_fflush_r+0x3a>
 801bc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc36:	f000 fae1 	bl	801c1fc <__retarget_lock_acquire_recursive>
 801bc3a:	4628      	mov	r0, r5
 801bc3c:	4621      	mov	r1, r4
 801bc3e:	f7ff ff59 	bl	801baf4 <__sflush_r>
 801bc42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bc44:	07da      	lsls	r2, r3, #31
 801bc46:	4605      	mov	r5, r0
 801bc48:	d4e0      	bmi.n	801bc0c <_fflush_r+0xc>
 801bc4a:	89a3      	ldrh	r3, [r4, #12]
 801bc4c:	059b      	lsls	r3, r3, #22
 801bc4e:	d4dd      	bmi.n	801bc0c <_fflush_r+0xc>
 801bc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc52:	f000 fad5 	bl	801c200 <__retarget_lock_release_recursive>
 801bc56:	e7d9      	b.n	801bc0c <_fflush_r+0xc>
 801bc58:	4b05      	ldr	r3, [pc, #20]	; (801bc70 <_fflush_r+0x70>)
 801bc5a:	429c      	cmp	r4, r3
 801bc5c:	d101      	bne.n	801bc62 <_fflush_r+0x62>
 801bc5e:	68ac      	ldr	r4, [r5, #8]
 801bc60:	e7df      	b.n	801bc22 <_fflush_r+0x22>
 801bc62:	4b04      	ldr	r3, [pc, #16]	; (801bc74 <_fflush_r+0x74>)
 801bc64:	429c      	cmp	r4, r3
 801bc66:	bf08      	it	eq
 801bc68:	68ec      	ldreq	r4, [r5, #12]
 801bc6a:	e7da      	b.n	801bc22 <_fflush_r+0x22>
 801bc6c:	08031b78 	.word	0x08031b78
 801bc70:	08031b98 	.word	0x08031b98
 801bc74:	08031b58 	.word	0x08031b58

0801bc78 <fflush>:
 801bc78:	4601      	mov	r1, r0
 801bc7a:	b920      	cbnz	r0, 801bc86 <fflush+0xe>
 801bc7c:	4b04      	ldr	r3, [pc, #16]	; (801bc90 <fflush+0x18>)
 801bc7e:	4905      	ldr	r1, [pc, #20]	; (801bc94 <fflush+0x1c>)
 801bc80:	6818      	ldr	r0, [r3, #0]
 801bc82:	f000 b961 	b.w	801bf48 <_fwalk_reent>
 801bc86:	4b04      	ldr	r3, [pc, #16]	; (801bc98 <fflush+0x20>)
 801bc88:	6818      	ldr	r0, [r3, #0]
 801bc8a:	f7ff bfb9 	b.w	801bc00 <_fflush_r>
 801bc8e:	bf00      	nop
 801bc90:	08031bb8 	.word	0x08031bb8
 801bc94:	0801bc01 	.word	0x0801bc01
 801bc98:	2000011c 	.word	0x2000011c

0801bc9c <std>:
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	b510      	push	{r4, lr}
 801bca0:	4604      	mov	r4, r0
 801bca2:	e9c0 3300 	strd	r3, r3, [r0]
 801bca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bcaa:	6083      	str	r3, [r0, #8]
 801bcac:	8181      	strh	r1, [r0, #12]
 801bcae:	6643      	str	r3, [r0, #100]	; 0x64
 801bcb0:	81c2      	strh	r2, [r0, #14]
 801bcb2:	6183      	str	r3, [r0, #24]
 801bcb4:	4619      	mov	r1, r3
 801bcb6:	2208      	movs	r2, #8
 801bcb8:	305c      	adds	r0, #92	; 0x5c
 801bcba:	f000 fae9 	bl	801c290 <memset>
 801bcbe:	4b05      	ldr	r3, [pc, #20]	; (801bcd4 <std+0x38>)
 801bcc0:	6263      	str	r3, [r4, #36]	; 0x24
 801bcc2:	4b05      	ldr	r3, [pc, #20]	; (801bcd8 <std+0x3c>)
 801bcc4:	62a3      	str	r3, [r4, #40]	; 0x28
 801bcc6:	4b05      	ldr	r3, [pc, #20]	; (801bcdc <std+0x40>)
 801bcc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bcca:	4b05      	ldr	r3, [pc, #20]	; (801bce0 <std+0x44>)
 801bccc:	6224      	str	r4, [r4, #32]
 801bcce:	6323      	str	r3, [r4, #48]	; 0x30
 801bcd0:	bd10      	pop	{r4, pc}
 801bcd2:	bf00      	nop
 801bcd4:	0801cd0d 	.word	0x0801cd0d
 801bcd8:	0801cd33 	.word	0x0801cd33
 801bcdc:	0801cd6b 	.word	0x0801cd6b
 801bce0:	0801cd8f 	.word	0x0801cd8f

0801bce4 <_cleanup_r>:
 801bce4:	4901      	ldr	r1, [pc, #4]	; (801bcec <_cleanup_r+0x8>)
 801bce6:	f000 b92f 	b.w	801bf48 <_fwalk_reent>
 801bcea:	bf00      	nop
 801bcec:	0801bc01 	.word	0x0801bc01

0801bcf0 <__sfmoreglue>:
 801bcf0:	b570      	push	{r4, r5, r6, lr}
 801bcf2:	1e4a      	subs	r2, r1, #1
 801bcf4:	2568      	movs	r5, #104	; 0x68
 801bcf6:	4355      	muls	r5, r2
 801bcf8:	460e      	mov	r6, r1
 801bcfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bcfe:	f000 fb1f 	bl	801c340 <_malloc_r>
 801bd02:	4604      	mov	r4, r0
 801bd04:	b140      	cbz	r0, 801bd18 <__sfmoreglue+0x28>
 801bd06:	2100      	movs	r1, #0
 801bd08:	e9c0 1600 	strd	r1, r6, [r0]
 801bd0c:	300c      	adds	r0, #12
 801bd0e:	60a0      	str	r0, [r4, #8]
 801bd10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bd14:	f000 fabc 	bl	801c290 <memset>
 801bd18:	4620      	mov	r0, r4
 801bd1a:	bd70      	pop	{r4, r5, r6, pc}

0801bd1c <__sfp_lock_acquire>:
 801bd1c:	4801      	ldr	r0, [pc, #4]	; (801bd24 <__sfp_lock_acquire+0x8>)
 801bd1e:	f000 ba6d 	b.w	801c1fc <__retarget_lock_acquire_recursive>
 801bd22:	bf00      	nop
 801bd24:	20016140 	.word	0x20016140

0801bd28 <__sfp_lock_release>:
 801bd28:	4801      	ldr	r0, [pc, #4]	; (801bd30 <__sfp_lock_release+0x8>)
 801bd2a:	f000 ba69 	b.w	801c200 <__retarget_lock_release_recursive>
 801bd2e:	bf00      	nop
 801bd30:	20016140 	.word	0x20016140

0801bd34 <__sinit_lock_acquire>:
 801bd34:	4801      	ldr	r0, [pc, #4]	; (801bd3c <__sinit_lock_acquire+0x8>)
 801bd36:	f000 ba61 	b.w	801c1fc <__retarget_lock_acquire_recursive>
 801bd3a:	bf00      	nop
 801bd3c:	2001613b 	.word	0x2001613b

0801bd40 <__sinit_lock_release>:
 801bd40:	4801      	ldr	r0, [pc, #4]	; (801bd48 <__sinit_lock_release+0x8>)
 801bd42:	f000 ba5d 	b.w	801c200 <__retarget_lock_release_recursive>
 801bd46:	bf00      	nop
 801bd48:	2001613b 	.word	0x2001613b

0801bd4c <__sinit>:
 801bd4c:	b510      	push	{r4, lr}
 801bd4e:	4604      	mov	r4, r0
 801bd50:	f7ff fff0 	bl	801bd34 <__sinit_lock_acquire>
 801bd54:	69a3      	ldr	r3, [r4, #24]
 801bd56:	b11b      	cbz	r3, 801bd60 <__sinit+0x14>
 801bd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd5c:	f7ff bff0 	b.w	801bd40 <__sinit_lock_release>
 801bd60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bd64:	6523      	str	r3, [r4, #80]	; 0x50
 801bd66:	4b13      	ldr	r3, [pc, #76]	; (801bdb4 <__sinit+0x68>)
 801bd68:	4a13      	ldr	r2, [pc, #76]	; (801bdb8 <__sinit+0x6c>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	62a2      	str	r2, [r4, #40]	; 0x28
 801bd6e:	42a3      	cmp	r3, r4
 801bd70:	bf04      	itt	eq
 801bd72:	2301      	moveq	r3, #1
 801bd74:	61a3      	streq	r3, [r4, #24]
 801bd76:	4620      	mov	r0, r4
 801bd78:	f000 f820 	bl	801bdbc <__sfp>
 801bd7c:	6060      	str	r0, [r4, #4]
 801bd7e:	4620      	mov	r0, r4
 801bd80:	f000 f81c 	bl	801bdbc <__sfp>
 801bd84:	60a0      	str	r0, [r4, #8]
 801bd86:	4620      	mov	r0, r4
 801bd88:	f000 f818 	bl	801bdbc <__sfp>
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	60e0      	str	r0, [r4, #12]
 801bd90:	2104      	movs	r1, #4
 801bd92:	6860      	ldr	r0, [r4, #4]
 801bd94:	f7ff ff82 	bl	801bc9c <std>
 801bd98:	68a0      	ldr	r0, [r4, #8]
 801bd9a:	2201      	movs	r2, #1
 801bd9c:	2109      	movs	r1, #9
 801bd9e:	f7ff ff7d 	bl	801bc9c <std>
 801bda2:	68e0      	ldr	r0, [r4, #12]
 801bda4:	2202      	movs	r2, #2
 801bda6:	2112      	movs	r1, #18
 801bda8:	f7ff ff78 	bl	801bc9c <std>
 801bdac:	2301      	movs	r3, #1
 801bdae:	61a3      	str	r3, [r4, #24]
 801bdb0:	e7d2      	b.n	801bd58 <__sinit+0xc>
 801bdb2:	bf00      	nop
 801bdb4:	08031bb8 	.word	0x08031bb8
 801bdb8:	0801bce5 	.word	0x0801bce5

0801bdbc <__sfp>:
 801bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdbe:	4607      	mov	r7, r0
 801bdc0:	f7ff ffac 	bl	801bd1c <__sfp_lock_acquire>
 801bdc4:	4b1e      	ldr	r3, [pc, #120]	; (801be40 <__sfp+0x84>)
 801bdc6:	681e      	ldr	r6, [r3, #0]
 801bdc8:	69b3      	ldr	r3, [r6, #24]
 801bdca:	b913      	cbnz	r3, 801bdd2 <__sfp+0x16>
 801bdcc:	4630      	mov	r0, r6
 801bdce:	f7ff ffbd 	bl	801bd4c <__sinit>
 801bdd2:	3648      	adds	r6, #72	; 0x48
 801bdd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bdd8:	3b01      	subs	r3, #1
 801bdda:	d503      	bpl.n	801bde4 <__sfp+0x28>
 801bddc:	6833      	ldr	r3, [r6, #0]
 801bdde:	b30b      	cbz	r3, 801be24 <__sfp+0x68>
 801bde0:	6836      	ldr	r6, [r6, #0]
 801bde2:	e7f7      	b.n	801bdd4 <__sfp+0x18>
 801bde4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bde8:	b9d5      	cbnz	r5, 801be20 <__sfp+0x64>
 801bdea:	4b16      	ldr	r3, [pc, #88]	; (801be44 <__sfp+0x88>)
 801bdec:	60e3      	str	r3, [r4, #12]
 801bdee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bdf2:	6665      	str	r5, [r4, #100]	; 0x64
 801bdf4:	f000 fa00 	bl	801c1f8 <__retarget_lock_init_recursive>
 801bdf8:	f7ff ff96 	bl	801bd28 <__sfp_lock_release>
 801bdfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801be00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801be04:	6025      	str	r5, [r4, #0]
 801be06:	61a5      	str	r5, [r4, #24]
 801be08:	2208      	movs	r2, #8
 801be0a:	4629      	mov	r1, r5
 801be0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801be10:	f000 fa3e 	bl	801c290 <memset>
 801be14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801be18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801be1c:	4620      	mov	r0, r4
 801be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be20:	3468      	adds	r4, #104	; 0x68
 801be22:	e7d9      	b.n	801bdd8 <__sfp+0x1c>
 801be24:	2104      	movs	r1, #4
 801be26:	4638      	mov	r0, r7
 801be28:	f7ff ff62 	bl	801bcf0 <__sfmoreglue>
 801be2c:	4604      	mov	r4, r0
 801be2e:	6030      	str	r0, [r6, #0]
 801be30:	2800      	cmp	r0, #0
 801be32:	d1d5      	bne.n	801bde0 <__sfp+0x24>
 801be34:	f7ff ff78 	bl	801bd28 <__sfp_lock_release>
 801be38:	230c      	movs	r3, #12
 801be3a:	603b      	str	r3, [r7, #0]
 801be3c:	e7ee      	b.n	801be1c <__sfp+0x60>
 801be3e:	bf00      	nop
 801be40:	08031bb8 	.word	0x08031bb8
 801be44:	ffff0001 	.word	0xffff0001

0801be48 <fiprintf>:
 801be48:	b40e      	push	{r1, r2, r3}
 801be4a:	b503      	push	{r0, r1, lr}
 801be4c:	4601      	mov	r1, r0
 801be4e:	ab03      	add	r3, sp, #12
 801be50:	4805      	ldr	r0, [pc, #20]	; (801be68 <fiprintf+0x20>)
 801be52:	f853 2b04 	ldr.w	r2, [r3], #4
 801be56:	6800      	ldr	r0, [r0, #0]
 801be58:	9301      	str	r3, [sp, #4]
 801be5a:	f000 faf5 	bl	801c448 <_vfiprintf_r>
 801be5e:	b002      	add	sp, #8
 801be60:	f85d eb04 	ldr.w	lr, [sp], #4
 801be64:	b003      	add	sp, #12
 801be66:	4770      	bx	lr
 801be68:	2000011c 	.word	0x2000011c

0801be6c <_fputs_r>:
 801be6c:	b570      	push	{r4, r5, r6, lr}
 801be6e:	460e      	mov	r6, r1
 801be70:	4614      	mov	r4, r2
 801be72:	4605      	mov	r5, r0
 801be74:	b118      	cbz	r0, 801be7e <_fputs_r+0x12>
 801be76:	6983      	ldr	r3, [r0, #24]
 801be78:	b90b      	cbnz	r3, 801be7e <_fputs_r+0x12>
 801be7a:	f7ff ff67 	bl	801bd4c <__sinit>
 801be7e:	4b2b      	ldr	r3, [pc, #172]	; (801bf2c <_fputs_r+0xc0>)
 801be80:	429c      	cmp	r4, r3
 801be82:	d11e      	bne.n	801bec2 <_fputs_r+0x56>
 801be84:	686c      	ldr	r4, [r5, #4]
 801be86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be88:	07da      	lsls	r2, r3, #31
 801be8a:	d405      	bmi.n	801be98 <_fputs_r+0x2c>
 801be8c:	89a3      	ldrh	r3, [r4, #12]
 801be8e:	059b      	lsls	r3, r3, #22
 801be90:	d402      	bmi.n	801be98 <_fputs_r+0x2c>
 801be92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be94:	f000 f9b2 	bl	801c1fc <__retarget_lock_acquire_recursive>
 801be98:	89a3      	ldrh	r3, [r4, #12]
 801be9a:	0718      	lsls	r0, r3, #28
 801be9c:	d51b      	bpl.n	801bed6 <_fputs_r+0x6a>
 801be9e:	6923      	ldr	r3, [r4, #16]
 801bea0:	b1cb      	cbz	r3, 801bed6 <_fputs_r+0x6a>
 801bea2:	3e01      	subs	r6, #1
 801bea4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bea8:	bb39      	cbnz	r1, 801befa <_fputs_r+0x8e>
 801beaa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801beac:	f015 0501 	ands.w	r5, r5, #1
 801beb0:	d139      	bne.n	801bf26 <_fputs_r+0xba>
 801beb2:	89a3      	ldrh	r3, [r4, #12]
 801beb4:	0599      	lsls	r1, r3, #22
 801beb6:	d402      	bmi.n	801bebe <_fputs_r+0x52>
 801beb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801beba:	f000 f9a1 	bl	801c200 <__retarget_lock_release_recursive>
 801bebe:	4628      	mov	r0, r5
 801bec0:	bd70      	pop	{r4, r5, r6, pc}
 801bec2:	4b1b      	ldr	r3, [pc, #108]	; (801bf30 <_fputs_r+0xc4>)
 801bec4:	429c      	cmp	r4, r3
 801bec6:	d101      	bne.n	801becc <_fputs_r+0x60>
 801bec8:	68ac      	ldr	r4, [r5, #8]
 801beca:	e7dc      	b.n	801be86 <_fputs_r+0x1a>
 801becc:	4b19      	ldr	r3, [pc, #100]	; (801bf34 <_fputs_r+0xc8>)
 801bece:	429c      	cmp	r4, r3
 801bed0:	bf08      	it	eq
 801bed2:	68ec      	ldreq	r4, [r5, #12]
 801bed4:	e7d7      	b.n	801be86 <_fputs_r+0x1a>
 801bed6:	4621      	mov	r1, r4
 801bed8:	4628      	mov	r0, r5
 801beda:	f002 facd 	bl	801e478 <__swsetup_r>
 801bede:	2800      	cmp	r0, #0
 801bee0:	d0df      	beq.n	801bea2 <_fputs_r+0x36>
 801bee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bee4:	07da      	lsls	r2, r3, #31
 801bee6:	d405      	bmi.n	801bef4 <_fputs_r+0x88>
 801bee8:	89a3      	ldrh	r3, [r4, #12]
 801beea:	059b      	lsls	r3, r3, #22
 801beec:	d402      	bmi.n	801bef4 <_fputs_r+0x88>
 801beee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bef0:	f000 f986 	bl	801c200 <__retarget_lock_release_recursive>
 801bef4:	f04f 35ff 	mov.w	r5, #4294967295
 801bef8:	e7e1      	b.n	801bebe <_fputs_r+0x52>
 801befa:	68a3      	ldr	r3, [r4, #8]
 801befc:	3b01      	subs	r3, #1
 801befe:	2b00      	cmp	r3, #0
 801bf00:	60a3      	str	r3, [r4, #8]
 801bf02:	da04      	bge.n	801bf0e <_fputs_r+0xa2>
 801bf04:	69a2      	ldr	r2, [r4, #24]
 801bf06:	4293      	cmp	r3, r2
 801bf08:	db06      	blt.n	801bf18 <_fputs_r+0xac>
 801bf0a:	290a      	cmp	r1, #10
 801bf0c:	d004      	beq.n	801bf18 <_fputs_r+0xac>
 801bf0e:	6823      	ldr	r3, [r4, #0]
 801bf10:	1c5a      	adds	r2, r3, #1
 801bf12:	6022      	str	r2, [r4, #0]
 801bf14:	7019      	strb	r1, [r3, #0]
 801bf16:	e7c5      	b.n	801bea4 <_fputs_r+0x38>
 801bf18:	4622      	mov	r2, r4
 801bf1a:	4628      	mov	r0, r5
 801bf1c:	f002 fa48 	bl	801e3b0 <__swbuf_r>
 801bf20:	3001      	adds	r0, #1
 801bf22:	d1bf      	bne.n	801bea4 <_fputs_r+0x38>
 801bf24:	e7dd      	b.n	801bee2 <_fputs_r+0x76>
 801bf26:	460d      	mov	r5, r1
 801bf28:	e7c9      	b.n	801bebe <_fputs_r+0x52>
 801bf2a:	bf00      	nop
 801bf2c:	08031b78 	.word	0x08031b78
 801bf30:	08031b98 	.word	0x08031b98
 801bf34:	08031b58 	.word	0x08031b58

0801bf38 <fputs>:
 801bf38:	4b02      	ldr	r3, [pc, #8]	; (801bf44 <fputs+0xc>)
 801bf3a:	460a      	mov	r2, r1
 801bf3c:	4601      	mov	r1, r0
 801bf3e:	6818      	ldr	r0, [r3, #0]
 801bf40:	f7ff bf94 	b.w	801be6c <_fputs_r>
 801bf44:	2000011c 	.word	0x2000011c

0801bf48 <_fwalk_reent>:
 801bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf4c:	4606      	mov	r6, r0
 801bf4e:	4688      	mov	r8, r1
 801bf50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf54:	2700      	movs	r7, #0
 801bf56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf5a:	f1b9 0901 	subs.w	r9, r9, #1
 801bf5e:	d505      	bpl.n	801bf6c <_fwalk_reent+0x24>
 801bf60:	6824      	ldr	r4, [r4, #0]
 801bf62:	2c00      	cmp	r4, #0
 801bf64:	d1f7      	bne.n	801bf56 <_fwalk_reent+0xe>
 801bf66:	4638      	mov	r0, r7
 801bf68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf6c:	89ab      	ldrh	r3, [r5, #12]
 801bf6e:	2b01      	cmp	r3, #1
 801bf70:	d907      	bls.n	801bf82 <_fwalk_reent+0x3a>
 801bf72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf76:	3301      	adds	r3, #1
 801bf78:	d003      	beq.n	801bf82 <_fwalk_reent+0x3a>
 801bf7a:	4629      	mov	r1, r5
 801bf7c:	4630      	mov	r0, r6
 801bf7e:	47c0      	blx	r8
 801bf80:	4307      	orrs	r7, r0
 801bf82:	3568      	adds	r5, #104	; 0x68
 801bf84:	e7e9      	b.n	801bf5a <_fwalk_reent+0x12>
	...

0801bf88 <__libc_init_array>:
 801bf88:	b570      	push	{r4, r5, r6, lr}
 801bf8a:	4d0d      	ldr	r5, [pc, #52]	; (801bfc0 <__libc_init_array+0x38>)
 801bf8c:	4c0d      	ldr	r4, [pc, #52]	; (801bfc4 <__libc_init_array+0x3c>)
 801bf8e:	1b64      	subs	r4, r4, r5
 801bf90:	10a4      	asrs	r4, r4, #2
 801bf92:	2600      	movs	r6, #0
 801bf94:	42a6      	cmp	r6, r4
 801bf96:	d109      	bne.n	801bfac <__libc_init_array+0x24>
 801bf98:	4d0b      	ldr	r5, [pc, #44]	; (801bfc8 <__libc_init_array+0x40>)
 801bf9a:	4c0c      	ldr	r4, [pc, #48]	; (801bfcc <__libc_init_array+0x44>)
 801bf9c:	f003 fa9c 	bl	801f4d8 <_init>
 801bfa0:	1b64      	subs	r4, r4, r5
 801bfa2:	10a4      	asrs	r4, r4, #2
 801bfa4:	2600      	movs	r6, #0
 801bfa6:	42a6      	cmp	r6, r4
 801bfa8:	d105      	bne.n	801bfb6 <__libc_init_array+0x2e>
 801bfaa:	bd70      	pop	{r4, r5, r6, pc}
 801bfac:	f855 3b04 	ldr.w	r3, [r5], #4
 801bfb0:	4798      	blx	r3
 801bfb2:	3601      	adds	r6, #1
 801bfb4:	e7ee      	b.n	801bf94 <__libc_init_array+0xc>
 801bfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 801bfba:	4798      	blx	r3
 801bfbc:	3601      	adds	r6, #1
 801bfbe:	e7f2      	b.n	801bfa6 <__libc_init_array+0x1e>
 801bfc0:	08032684 	.word	0x08032684
 801bfc4:	08032684 	.word	0x08032684
 801bfc8:	08032684 	.word	0x08032684
 801bfcc:	08032688 	.word	0x08032688

0801bfd0 <localtime>:
 801bfd0:	b538      	push	{r3, r4, r5, lr}
 801bfd2:	4b0b      	ldr	r3, [pc, #44]	; (801c000 <localtime+0x30>)
 801bfd4:	681d      	ldr	r5, [r3, #0]
 801bfd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801bfd8:	4604      	mov	r4, r0
 801bfda:	b953      	cbnz	r3, 801bff2 <localtime+0x22>
 801bfdc:	2024      	movs	r0, #36	; 0x24
 801bfde:	f000 f911 	bl	801c204 <malloc>
 801bfe2:	4602      	mov	r2, r0
 801bfe4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801bfe6:	b920      	cbnz	r0, 801bff2 <localtime+0x22>
 801bfe8:	4b06      	ldr	r3, [pc, #24]	; (801c004 <localtime+0x34>)
 801bfea:	4807      	ldr	r0, [pc, #28]	; (801c008 <localtime+0x38>)
 801bfec:	2132      	movs	r1, #50	; 0x32
 801bfee:	f7ff fd45 	bl	801ba7c <__assert_func>
 801bff2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801bff4:	4620      	mov	r0, r4
 801bff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bffa:	f000 b807 	b.w	801c00c <localtime_r>
 801bffe:	bf00      	nop
 801c000:	2000011c 	.word	0x2000011c
 801c004:	08031bbc 	.word	0x08031bbc
 801c008:	08031bd3 	.word	0x08031bd3

0801c00c <localtime_r>:
 801c00c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801c010:	4607      	mov	r7, r0
 801c012:	9101      	str	r1, [sp, #4]
 801c014:	f002 fb3a 	bl	801e68c <__gettzinfo>
 801c018:	9901      	ldr	r1, [sp, #4]
 801c01a:	4680      	mov	r8, r0
 801c01c:	4638      	mov	r0, r7
 801c01e:	f002 fb39 	bl	801e694 <gmtime_r>
 801c022:	6943      	ldr	r3, [r0, #20]
 801c024:	079a      	lsls	r2, r3, #30
 801c026:	4604      	mov	r4, r0
 801c028:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801c02c:	d105      	bne.n	801c03a <localtime_r+0x2e>
 801c02e:	2264      	movs	r2, #100	; 0x64
 801c030:	fb96 f3f2 	sdiv	r3, r6, r2
 801c034:	fb02 6313 	mls	r3, r2, r3, r6
 801c038:	bb7b      	cbnz	r3, 801c09a <localtime_r+0x8e>
 801c03a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801c03e:	fb96 f5f3 	sdiv	r5, r6, r3
 801c042:	fb03 6515 	mls	r5, r3, r5, r6
 801c046:	fab5 f585 	clz	r5, r5
 801c04a:	096d      	lsrs	r5, r5, #5
 801c04c:	4b68      	ldr	r3, [pc, #416]	; (801c1f0 <localtime_r+0x1e4>)
 801c04e:	2230      	movs	r2, #48	; 0x30
 801c050:	fb02 3505 	mla	r5, r2, r5, r3
 801c054:	f001 ffe2 	bl	801e01c <__tz_lock>
 801c058:	f001 ffec 	bl	801e034 <_tzset_unlocked>
 801c05c:	4b65      	ldr	r3, [pc, #404]	; (801c1f4 <localtime_r+0x1e8>)
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	b353      	cbz	r3, 801c0b8 <localtime_r+0xac>
 801c062:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c066:	42b3      	cmp	r3, r6
 801c068:	d119      	bne.n	801c09e <localtime_r+0x92>
 801c06a:	f8d8 1000 	ldr.w	r1, [r8]
 801c06e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801c072:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801c076:	b9d1      	cbnz	r1, 801c0ae <localtime_r+0xa2>
 801c078:	4296      	cmp	r6, r2
 801c07a:	eb77 0303 	sbcs.w	r3, r7, r3
 801c07e:	da23      	bge.n	801c0c8 <localtime_r+0xbc>
 801c080:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801c084:	4296      	cmp	r6, r2
 801c086:	eb77 0303 	sbcs.w	r3, r7, r3
 801c08a:	bfb4      	ite	lt
 801c08c:	2301      	movlt	r3, #1
 801c08e:	2300      	movge	r3, #0
 801c090:	6223      	str	r3, [r4, #32]
 801c092:	db1b      	blt.n	801c0cc <localtime_r+0xc0>
 801c094:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801c098:	e01a      	b.n	801c0d0 <localtime_r+0xc4>
 801c09a:	2501      	movs	r5, #1
 801c09c:	e7d6      	b.n	801c04c <localtime_r+0x40>
 801c09e:	4630      	mov	r0, r6
 801c0a0:	f001 ff14 	bl	801decc <__tzcalc_limits>
 801c0a4:	2800      	cmp	r0, #0
 801c0a6:	d1e0      	bne.n	801c06a <localtime_r+0x5e>
 801c0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c0ac:	e004      	b.n	801c0b8 <localtime_r+0xac>
 801c0ae:	4296      	cmp	r6, r2
 801c0b0:	eb77 0303 	sbcs.w	r3, r7, r3
 801c0b4:	da02      	bge.n	801c0bc <localtime_r+0xb0>
 801c0b6:	2300      	movs	r3, #0
 801c0b8:	6223      	str	r3, [r4, #32]
 801c0ba:	e7eb      	b.n	801c094 <localtime_r+0x88>
 801c0bc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801c0c0:	4296      	cmp	r6, r2
 801c0c2:	eb77 0303 	sbcs.w	r3, r7, r3
 801c0c6:	daf6      	bge.n	801c0b6 <localtime_r+0xaa>
 801c0c8:	2301      	movs	r3, #1
 801c0ca:	6223      	str	r3, [r4, #32]
 801c0cc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801c0d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801c0d4:	203c      	movs	r0, #60	; 0x3c
 801c0d6:	fb91 f6f3 	sdiv	r6, r1, r3
 801c0da:	fb03 1316 	mls	r3, r3, r6, r1
 801c0de:	6861      	ldr	r1, [r4, #4]
 801c0e0:	fb93 f2f0 	sdiv	r2, r3, r0
 801c0e4:	fb00 3012 	mls	r0, r0, r2, r3
 801c0e8:	6823      	ldr	r3, [r4, #0]
 801c0ea:	1a89      	subs	r1, r1, r2
 801c0ec:	68a2      	ldr	r2, [r4, #8]
 801c0ee:	6061      	str	r1, [r4, #4]
 801c0f0:	1a1b      	subs	r3, r3, r0
 801c0f2:	1b92      	subs	r2, r2, r6
 801c0f4:	2b3b      	cmp	r3, #59	; 0x3b
 801c0f6:	6023      	str	r3, [r4, #0]
 801c0f8:	60a2      	str	r2, [r4, #8]
 801c0fa:	dd35      	ble.n	801c168 <localtime_r+0x15c>
 801c0fc:	3101      	adds	r1, #1
 801c0fe:	6061      	str	r1, [r4, #4]
 801c100:	3b3c      	subs	r3, #60	; 0x3c
 801c102:	6023      	str	r3, [r4, #0]
 801c104:	6863      	ldr	r3, [r4, #4]
 801c106:	2b3b      	cmp	r3, #59	; 0x3b
 801c108:	dd34      	ble.n	801c174 <localtime_r+0x168>
 801c10a:	3201      	adds	r2, #1
 801c10c:	60a2      	str	r2, [r4, #8]
 801c10e:	3b3c      	subs	r3, #60	; 0x3c
 801c110:	6063      	str	r3, [r4, #4]
 801c112:	68a3      	ldr	r3, [r4, #8]
 801c114:	2b17      	cmp	r3, #23
 801c116:	dd33      	ble.n	801c180 <localtime_r+0x174>
 801c118:	69e2      	ldr	r2, [r4, #28]
 801c11a:	3201      	adds	r2, #1
 801c11c:	61e2      	str	r2, [r4, #28]
 801c11e:	69a2      	ldr	r2, [r4, #24]
 801c120:	3201      	adds	r2, #1
 801c122:	2a06      	cmp	r2, #6
 801c124:	bfc8      	it	gt
 801c126:	2200      	movgt	r2, #0
 801c128:	61a2      	str	r2, [r4, #24]
 801c12a:	68e2      	ldr	r2, [r4, #12]
 801c12c:	3b18      	subs	r3, #24
 801c12e:	3201      	adds	r2, #1
 801c130:	60a3      	str	r3, [r4, #8]
 801c132:	6923      	ldr	r3, [r4, #16]
 801c134:	60e2      	str	r2, [r4, #12]
 801c136:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801c13a:	428a      	cmp	r2, r1
 801c13c:	dd0e      	ble.n	801c15c <localtime_r+0x150>
 801c13e:	2b0b      	cmp	r3, #11
 801c140:	eba2 0201 	sub.w	r2, r2, r1
 801c144:	60e2      	str	r2, [r4, #12]
 801c146:	f103 0201 	add.w	r2, r3, #1
 801c14a:	bf09      	itett	eq
 801c14c:	6963      	ldreq	r3, [r4, #20]
 801c14e:	6122      	strne	r2, [r4, #16]
 801c150:	2200      	moveq	r2, #0
 801c152:	3301      	addeq	r3, #1
 801c154:	bf02      	ittt	eq
 801c156:	6122      	streq	r2, [r4, #16]
 801c158:	6163      	streq	r3, [r4, #20]
 801c15a:	61e2      	streq	r2, [r4, #28]
 801c15c:	f001 ff64 	bl	801e028 <__tz_unlock>
 801c160:	4620      	mov	r0, r4
 801c162:	b002      	add	sp, #8
 801c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c168:	2b00      	cmp	r3, #0
 801c16a:	dacb      	bge.n	801c104 <localtime_r+0xf8>
 801c16c:	3901      	subs	r1, #1
 801c16e:	6061      	str	r1, [r4, #4]
 801c170:	333c      	adds	r3, #60	; 0x3c
 801c172:	e7c6      	b.n	801c102 <localtime_r+0xf6>
 801c174:	2b00      	cmp	r3, #0
 801c176:	dacc      	bge.n	801c112 <localtime_r+0x106>
 801c178:	3a01      	subs	r2, #1
 801c17a:	60a2      	str	r2, [r4, #8]
 801c17c:	333c      	adds	r3, #60	; 0x3c
 801c17e:	e7c7      	b.n	801c110 <localtime_r+0x104>
 801c180:	2b00      	cmp	r3, #0
 801c182:	daeb      	bge.n	801c15c <localtime_r+0x150>
 801c184:	69e2      	ldr	r2, [r4, #28]
 801c186:	3a01      	subs	r2, #1
 801c188:	61e2      	str	r2, [r4, #28]
 801c18a:	69a2      	ldr	r2, [r4, #24]
 801c18c:	3a01      	subs	r2, #1
 801c18e:	bf48      	it	mi
 801c190:	2206      	movmi	r2, #6
 801c192:	61a2      	str	r2, [r4, #24]
 801c194:	68e2      	ldr	r2, [r4, #12]
 801c196:	3318      	adds	r3, #24
 801c198:	3a01      	subs	r2, #1
 801c19a:	60e2      	str	r2, [r4, #12]
 801c19c:	60a3      	str	r3, [r4, #8]
 801c19e:	2a00      	cmp	r2, #0
 801c1a0:	d1dc      	bne.n	801c15c <localtime_r+0x150>
 801c1a2:	6923      	ldr	r3, [r4, #16]
 801c1a4:	3b01      	subs	r3, #1
 801c1a6:	d405      	bmi.n	801c1b4 <localtime_r+0x1a8>
 801c1a8:	6123      	str	r3, [r4, #16]
 801c1aa:	6923      	ldr	r3, [r4, #16]
 801c1ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c1b0:	60e3      	str	r3, [r4, #12]
 801c1b2:	e7d3      	b.n	801c15c <localtime_r+0x150>
 801c1b4:	230b      	movs	r3, #11
 801c1b6:	6123      	str	r3, [r4, #16]
 801c1b8:	6963      	ldr	r3, [r4, #20]
 801c1ba:	1e5a      	subs	r2, r3, #1
 801c1bc:	6162      	str	r2, [r4, #20]
 801c1be:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801c1c2:	0793      	lsls	r3, r2, #30
 801c1c4:	d105      	bne.n	801c1d2 <localtime_r+0x1c6>
 801c1c6:	2164      	movs	r1, #100	; 0x64
 801c1c8:	fb92 f3f1 	sdiv	r3, r2, r1
 801c1cc:	fb01 2313 	mls	r3, r1, r3, r2
 801c1d0:	b963      	cbnz	r3, 801c1ec <localtime_r+0x1e0>
 801c1d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801c1d6:	fb92 f3f1 	sdiv	r3, r2, r1
 801c1da:	fb01 2313 	mls	r3, r1, r3, r2
 801c1de:	fab3 f383 	clz	r3, r3
 801c1e2:	095b      	lsrs	r3, r3, #5
 801c1e4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801c1e8:	61e3      	str	r3, [r4, #28]
 801c1ea:	e7de      	b.n	801c1aa <localtime_r+0x19e>
 801c1ec:	2301      	movs	r3, #1
 801c1ee:	e7f9      	b.n	801c1e4 <localtime_r+0x1d8>
 801c1f0:	08031c34 	.word	0x08031c34
 801c1f4:	20007328 	.word	0x20007328

0801c1f8 <__retarget_lock_init_recursive>:
 801c1f8:	4770      	bx	lr

0801c1fa <__retarget_lock_acquire>:
 801c1fa:	4770      	bx	lr

0801c1fc <__retarget_lock_acquire_recursive>:
 801c1fc:	4770      	bx	lr

0801c1fe <__retarget_lock_release>:
 801c1fe:	4770      	bx	lr

0801c200 <__retarget_lock_release_recursive>:
 801c200:	4770      	bx	lr
	...

0801c204 <malloc>:
 801c204:	4b02      	ldr	r3, [pc, #8]	; (801c210 <malloc+0xc>)
 801c206:	4601      	mov	r1, r0
 801c208:	6818      	ldr	r0, [r3, #0]
 801c20a:	f000 b899 	b.w	801c340 <_malloc_r>
 801c20e:	bf00      	nop
 801c210:	2000011c 	.word	0x2000011c

0801c214 <free>:
 801c214:	4b02      	ldr	r3, [pc, #8]	; (801c220 <free+0xc>)
 801c216:	4601      	mov	r1, r0
 801c218:	6818      	ldr	r0, [r3, #0]
 801c21a:	f000 b841 	b.w	801c2a0 <_free_r>
 801c21e:	bf00      	nop
 801c220:	2000011c 	.word	0x2000011c

0801c224 <memcmp>:
 801c224:	b530      	push	{r4, r5, lr}
 801c226:	3901      	subs	r1, #1
 801c228:	2400      	movs	r4, #0
 801c22a:	42a2      	cmp	r2, r4
 801c22c:	d101      	bne.n	801c232 <memcmp+0xe>
 801c22e:	2000      	movs	r0, #0
 801c230:	e005      	b.n	801c23e <memcmp+0x1a>
 801c232:	5d03      	ldrb	r3, [r0, r4]
 801c234:	3401      	adds	r4, #1
 801c236:	5d0d      	ldrb	r5, [r1, r4]
 801c238:	42ab      	cmp	r3, r5
 801c23a:	d0f6      	beq.n	801c22a <memcmp+0x6>
 801c23c:	1b58      	subs	r0, r3, r5
 801c23e:	bd30      	pop	{r4, r5, pc}

0801c240 <memcpy>:
 801c240:	440a      	add	r2, r1
 801c242:	4291      	cmp	r1, r2
 801c244:	f100 33ff 	add.w	r3, r0, #4294967295
 801c248:	d100      	bne.n	801c24c <memcpy+0xc>
 801c24a:	4770      	bx	lr
 801c24c:	b510      	push	{r4, lr}
 801c24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c252:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c256:	4291      	cmp	r1, r2
 801c258:	d1f9      	bne.n	801c24e <memcpy+0xe>
 801c25a:	bd10      	pop	{r4, pc}

0801c25c <memmove>:
 801c25c:	4288      	cmp	r0, r1
 801c25e:	b510      	push	{r4, lr}
 801c260:	eb01 0402 	add.w	r4, r1, r2
 801c264:	d902      	bls.n	801c26c <memmove+0x10>
 801c266:	4284      	cmp	r4, r0
 801c268:	4623      	mov	r3, r4
 801c26a:	d807      	bhi.n	801c27c <memmove+0x20>
 801c26c:	1e43      	subs	r3, r0, #1
 801c26e:	42a1      	cmp	r1, r4
 801c270:	d008      	beq.n	801c284 <memmove+0x28>
 801c272:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c276:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c27a:	e7f8      	b.n	801c26e <memmove+0x12>
 801c27c:	4402      	add	r2, r0
 801c27e:	4601      	mov	r1, r0
 801c280:	428a      	cmp	r2, r1
 801c282:	d100      	bne.n	801c286 <memmove+0x2a>
 801c284:	bd10      	pop	{r4, pc}
 801c286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c28e:	e7f7      	b.n	801c280 <memmove+0x24>

0801c290 <memset>:
 801c290:	4402      	add	r2, r0
 801c292:	4603      	mov	r3, r0
 801c294:	4293      	cmp	r3, r2
 801c296:	d100      	bne.n	801c29a <memset+0xa>
 801c298:	4770      	bx	lr
 801c29a:	f803 1b01 	strb.w	r1, [r3], #1
 801c29e:	e7f9      	b.n	801c294 <memset+0x4>

0801c2a0 <_free_r>:
 801c2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c2a2:	2900      	cmp	r1, #0
 801c2a4:	d048      	beq.n	801c338 <_free_r+0x98>
 801c2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2aa:	9001      	str	r0, [sp, #4]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	f1a1 0404 	sub.w	r4, r1, #4
 801c2b2:	bfb8      	it	lt
 801c2b4:	18e4      	addlt	r4, r4, r3
 801c2b6:	f002 fb29 	bl	801e90c <__malloc_lock>
 801c2ba:	4a20      	ldr	r2, [pc, #128]	; (801c33c <_free_r+0x9c>)
 801c2bc:	9801      	ldr	r0, [sp, #4]
 801c2be:	6813      	ldr	r3, [r2, #0]
 801c2c0:	4615      	mov	r5, r2
 801c2c2:	b933      	cbnz	r3, 801c2d2 <_free_r+0x32>
 801c2c4:	6063      	str	r3, [r4, #4]
 801c2c6:	6014      	str	r4, [r2, #0]
 801c2c8:	b003      	add	sp, #12
 801c2ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2ce:	f002 bb23 	b.w	801e918 <__malloc_unlock>
 801c2d2:	42a3      	cmp	r3, r4
 801c2d4:	d90b      	bls.n	801c2ee <_free_r+0x4e>
 801c2d6:	6821      	ldr	r1, [r4, #0]
 801c2d8:	1862      	adds	r2, r4, r1
 801c2da:	4293      	cmp	r3, r2
 801c2dc:	bf04      	itt	eq
 801c2de:	681a      	ldreq	r2, [r3, #0]
 801c2e0:	685b      	ldreq	r3, [r3, #4]
 801c2e2:	6063      	str	r3, [r4, #4]
 801c2e4:	bf04      	itt	eq
 801c2e6:	1852      	addeq	r2, r2, r1
 801c2e8:	6022      	streq	r2, [r4, #0]
 801c2ea:	602c      	str	r4, [r5, #0]
 801c2ec:	e7ec      	b.n	801c2c8 <_free_r+0x28>
 801c2ee:	461a      	mov	r2, r3
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	b10b      	cbz	r3, 801c2f8 <_free_r+0x58>
 801c2f4:	42a3      	cmp	r3, r4
 801c2f6:	d9fa      	bls.n	801c2ee <_free_r+0x4e>
 801c2f8:	6811      	ldr	r1, [r2, #0]
 801c2fa:	1855      	adds	r5, r2, r1
 801c2fc:	42a5      	cmp	r5, r4
 801c2fe:	d10b      	bne.n	801c318 <_free_r+0x78>
 801c300:	6824      	ldr	r4, [r4, #0]
 801c302:	4421      	add	r1, r4
 801c304:	1854      	adds	r4, r2, r1
 801c306:	42a3      	cmp	r3, r4
 801c308:	6011      	str	r1, [r2, #0]
 801c30a:	d1dd      	bne.n	801c2c8 <_free_r+0x28>
 801c30c:	681c      	ldr	r4, [r3, #0]
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	6053      	str	r3, [r2, #4]
 801c312:	4421      	add	r1, r4
 801c314:	6011      	str	r1, [r2, #0]
 801c316:	e7d7      	b.n	801c2c8 <_free_r+0x28>
 801c318:	d902      	bls.n	801c320 <_free_r+0x80>
 801c31a:	230c      	movs	r3, #12
 801c31c:	6003      	str	r3, [r0, #0]
 801c31e:	e7d3      	b.n	801c2c8 <_free_r+0x28>
 801c320:	6825      	ldr	r5, [r4, #0]
 801c322:	1961      	adds	r1, r4, r5
 801c324:	428b      	cmp	r3, r1
 801c326:	bf04      	itt	eq
 801c328:	6819      	ldreq	r1, [r3, #0]
 801c32a:	685b      	ldreq	r3, [r3, #4]
 801c32c:	6063      	str	r3, [r4, #4]
 801c32e:	bf04      	itt	eq
 801c330:	1949      	addeq	r1, r1, r5
 801c332:	6021      	streq	r1, [r4, #0]
 801c334:	6054      	str	r4, [r2, #4]
 801c336:	e7c7      	b.n	801c2c8 <_free_r+0x28>
 801c338:	b003      	add	sp, #12
 801c33a:	bd30      	pop	{r4, r5, pc}
 801c33c:	20007304 	.word	0x20007304

0801c340 <_malloc_r>:
 801c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c342:	1ccd      	adds	r5, r1, #3
 801c344:	f025 0503 	bic.w	r5, r5, #3
 801c348:	3508      	adds	r5, #8
 801c34a:	2d0c      	cmp	r5, #12
 801c34c:	bf38      	it	cc
 801c34e:	250c      	movcc	r5, #12
 801c350:	2d00      	cmp	r5, #0
 801c352:	4606      	mov	r6, r0
 801c354:	db01      	blt.n	801c35a <_malloc_r+0x1a>
 801c356:	42a9      	cmp	r1, r5
 801c358:	d903      	bls.n	801c362 <_malloc_r+0x22>
 801c35a:	230c      	movs	r3, #12
 801c35c:	6033      	str	r3, [r6, #0]
 801c35e:	2000      	movs	r0, #0
 801c360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c362:	f002 fad3 	bl	801e90c <__malloc_lock>
 801c366:	4921      	ldr	r1, [pc, #132]	; (801c3ec <_malloc_r+0xac>)
 801c368:	680a      	ldr	r2, [r1, #0]
 801c36a:	4614      	mov	r4, r2
 801c36c:	b99c      	cbnz	r4, 801c396 <_malloc_r+0x56>
 801c36e:	4f20      	ldr	r7, [pc, #128]	; (801c3f0 <_malloc_r+0xb0>)
 801c370:	683b      	ldr	r3, [r7, #0]
 801c372:	b923      	cbnz	r3, 801c37e <_malloc_r+0x3e>
 801c374:	4621      	mov	r1, r4
 801c376:	4630      	mov	r0, r6
 801c378:	f000 fc64 	bl	801cc44 <_sbrk_r>
 801c37c:	6038      	str	r0, [r7, #0]
 801c37e:	4629      	mov	r1, r5
 801c380:	4630      	mov	r0, r6
 801c382:	f000 fc5f 	bl	801cc44 <_sbrk_r>
 801c386:	1c43      	adds	r3, r0, #1
 801c388:	d123      	bne.n	801c3d2 <_malloc_r+0x92>
 801c38a:	230c      	movs	r3, #12
 801c38c:	6033      	str	r3, [r6, #0]
 801c38e:	4630      	mov	r0, r6
 801c390:	f002 fac2 	bl	801e918 <__malloc_unlock>
 801c394:	e7e3      	b.n	801c35e <_malloc_r+0x1e>
 801c396:	6823      	ldr	r3, [r4, #0]
 801c398:	1b5b      	subs	r3, r3, r5
 801c39a:	d417      	bmi.n	801c3cc <_malloc_r+0x8c>
 801c39c:	2b0b      	cmp	r3, #11
 801c39e:	d903      	bls.n	801c3a8 <_malloc_r+0x68>
 801c3a0:	6023      	str	r3, [r4, #0]
 801c3a2:	441c      	add	r4, r3
 801c3a4:	6025      	str	r5, [r4, #0]
 801c3a6:	e004      	b.n	801c3b2 <_malloc_r+0x72>
 801c3a8:	6863      	ldr	r3, [r4, #4]
 801c3aa:	42a2      	cmp	r2, r4
 801c3ac:	bf0c      	ite	eq
 801c3ae:	600b      	streq	r3, [r1, #0]
 801c3b0:	6053      	strne	r3, [r2, #4]
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	f002 fab0 	bl	801e918 <__malloc_unlock>
 801c3b8:	f104 000b 	add.w	r0, r4, #11
 801c3bc:	1d23      	adds	r3, r4, #4
 801c3be:	f020 0007 	bic.w	r0, r0, #7
 801c3c2:	1ac2      	subs	r2, r0, r3
 801c3c4:	d0cc      	beq.n	801c360 <_malloc_r+0x20>
 801c3c6:	1a1b      	subs	r3, r3, r0
 801c3c8:	50a3      	str	r3, [r4, r2]
 801c3ca:	e7c9      	b.n	801c360 <_malloc_r+0x20>
 801c3cc:	4622      	mov	r2, r4
 801c3ce:	6864      	ldr	r4, [r4, #4]
 801c3d0:	e7cc      	b.n	801c36c <_malloc_r+0x2c>
 801c3d2:	1cc4      	adds	r4, r0, #3
 801c3d4:	f024 0403 	bic.w	r4, r4, #3
 801c3d8:	42a0      	cmp	r0, r4
 801c3da:	d0e3      	beq.n	801c3a4 <_malloc_r+0x64>
 801c3dc:	1a21      	subs	r1, r4, r0
 801c3de:	4630      	mov	r0, r6
 801c3e0:	f000 fc30 	bl	801cc44 <_sbrk_r>
 801c3e4:	3001      	adds	r0, #1
 801c3e6:	d1dd      	bne.n	801c3a4 <_malloc_r+0x64>
 801c3e8:	e7cf      	b.n	801c38a <_malloc_r+0x4a>
 801c3ea:	bf00      	nop
 801c3ec:	20007304 	.word	0x20007304
 801c3f0:	20007308 	.word	0x20007308

0801c3f4 <__sfputc_r>:
 801c3f4:	6893      	ldr	r3, [r2, #8]
 801c3f6:	3b01      	subs	r3, #1
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	b410      	push	{r4}
 801c3fc:	6093      	str	r3, [r2, #8]
 801c3fe:	da08      	bge.n	801c412 <__sfputc_r+0x1e>
 801c400:	6994      	ldr	r4, [r2, #24]
 801c402:	42a3      	cmp	r3, r4
 801c404:	db01      	blt.n	801c40a <__sfputc_r+0x16>
 801c406:	290a      	cmp	r1, #10
 801c408:	d103      	bne.n	801c412 <__sfputc_r+0x1e>
 801c40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c40e:	f001 bfcf 	b.w	801e3b0 <__swbuf_r>
 801c412:	6813      	ldr	r3, [r2, #0]
 801c414:	1c58      	adds	r0, r3, #1
 801c416:	6010      	str	r0, [r2, #0]
 801c418:	7019      	strb	r1, [r3, #0]
 801c41a:	4608      	mov	r0, r1
 801c41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c420:	4770      	bx	lr

0801c422 <__sfputs_r>:
 801c422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c424:	4606      	mov	r6, r0
 801c426:	460f      	mov	r7, r1
 801c428:	4614      	mov	r4, r2
 801c42a:	18d5      	adds	r5, r2, r3
 801c42c:	42ac      	cmp	r4, r5
 801c42e:	d101      	bne.n	801c434 <__sfputs_r+0x12>
 801c430:	2000      	movs	r0, #0
 801c432:	e007      	b.n	801c444 <__sfputs_r+0x22>
 801c434:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c438:	463a      	mov	r2, r7
 801c43a:	4630      	mov	r0, r6
 801c43c:	f7ff ffda 	bl	801c3f4 <__sfputc_r>
 801c440:	1c43      	adds	r3, r0, #1
 801c442:	d1f3      	bne.n	801c42c <__sfputs_r+0xa>
 801c444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c448 <_vfiprintf_r>:
 801c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c44c:	460d      	mov	r5, r1
 801c44e:	b09d      	sub	sp, #116	; 0x74
 801c450:	4614      	mov	r4, r2
 801c452:	4698      	mov	r8, r3
 801c454:	4606      	mov	r6, r0
 801c456:	b118      	cbz	r0, 801c460 <_vfiprintf_r+0x18>
 801c458:	6983      	ldr	r3, [r0, #24]
 801c45a:	b90b      	cbnz	r3, 801c460 <_vfiprintf_r+0x18>
 801c45c:	f7ff fc76 	bl	801bd4c <__sinit>
 801c460:	4b89      	ldr	r3, [pc, #548]	; (801c688 <_vfiprintf_r+0x240>)
 801c462:	429d      	cmp	r5, r3
 801c464:	d11b      	bne.n	801c49e <_vfiprintf_r+0x56>
 801c466:	6875      	ldr	r5, [r6, #4]
 801c468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c46a:	07d9      	lsls	r1, r3, #31
 801c46c:	d405      	bmi.n	801c47a <_vfiprintf_r+0x32>
 801c46e:	89ab      	ldrh	r3, [r5, #12]
 801c470:	059a      	lsls	r2, r3, #22
 801c472:	d402      	bmi.n	801c47a <_vfiprintf_r+0x32>
 801c474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c476:	f7ff fec1 	bl	801c1fc <__retarget_lock_acquire_recursive>
 801c47a:	89ab      	ldrh	r3, [r5, #12]
 801c47c:	071b      	lsls	r3, r3, #28
 801c47e:	d501      	bpl.n	801c484 <_vfiprintf_r+0x3c>
 801c480:	692b      	ldr	r3, [r5, #16]
 801c482:	b9eb      	cbnz	r3, 801c4c0 <_vfiprintf_r+0x78>
 801c484:	4629      	mov	r1, r5
 801c486:	4630      	mov	r0, r6
 801c488:	f001 fff6 	bl	801e478 <__swsetup_r>
 801c48c:	b1c0      	cbz	r0, 801c4c0 <_vfiprintf_r+0x78>
 801c48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c490:	07dc      	lsls	r4, r3, #31
 801c492:	d50e      	bpl.n	801c4b2 <_vfiprintf_r+0x6a>
 801c494:	f04f 30ff 	mov.w	r0, #4294967295
 801c498:	b01d      	add	sp, #116	; 0x74
 801c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c49e:	4b7b      	ldr	r3, [pc, #492]	; (801c68c <_vfiprintf_r+0x244>)
 801c4a0:	429d      	cmp	r5, r3
 801c4a2:	d101      	bne.n	801c4a8 <_vfiprintf_r+0x60>
 801c4a4:	68b5      	ldr	r5, [r6, #8]
 801c4a6:	e7df      	b.n	801c468 <_vfiprintf_r+0x20>
 801c4a8:	4b79      	ldr	r3, [pc, #484]	; (801c690 <_vfiprintf_r+0x248>)
 801c4aa:	429d      	cmp	r5, r3
 801c4ac:	bf08      	it	eq
 801c4ae:	68f5      	ldreq	r5, [r6, #12]
 801c4b0:	e7da      	b.n	801c468 <_vfiprintf_r+0x20>
 801c4b2:	89ab      	ldrh	r3, [r5, #12]
 801c4b4:	0598      	lsls	r0, r3, #22
 801c4b6:	d4ed      	bmi.n	801c494 <_vfiprintf_r+0x4c>
 801c4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4ba:	f7ff fea1 	bl	801c200 <__retarget_lock_release_recursive>
 801c4be:	e7e9      	b.n	801c494 <_vfiprintf_r+0x4c>
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	9309      	str	r3, [sp, #36]	; 0x24
 801c4c4:	2320      	movs	r3, #32
 801c4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 801c4ce:	2330      	movs	r3, #48	; 0x30
 801c4d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c694 <_vfiprintf_r+0x24c>
 801c4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c4d8:	f04f 0901 	mov.w	r9, #1
 801c4dc:	4623      	mov	r3, r4
 801c4de:	469a      	mov	sl, r3
 801c4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c4e4:	b10a      	cbz	r2, 801c4ea <_vfiprintf_r+0xa2>
 801c4e6:	2a25      	cmp	r2, #37	; 0x25
 801c4e8:	d1f9      	bne.n	801c4de <_vfiprintf_r+0x96>
 801c4ea:	ebba 0b04 	subs.w	fp, sl, r4
 801c4ee:	d00b      	beq.n	801c508 <_vfiprintf_r+0xc0>
 801c4f0:	465b      	mov	r3, fp
 801c4f2:	4622      	mov	r2, r4
 801c4f4:	4629      	mov	r1, r5
 801c4f6:	4630      	mov	r0, r6
 801c4f8:	f7ff ff93 	bl	801c422 <__sfputs_r>
 801c4fc:	3001      	adds	r0, #1
 801c4fe:	f000 80aa 	beq.w	801c656 <_vfiprintf_r+0x20e>
 801c502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c504:	445a      	add	r2, fp
 801c506:	9209      	str	r2, [sp, #36]	; 0x24
 801c508:	f89a 3000 	ldrb.w	r3, [sl]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	f000 80a2 	beq.w	801c656 <_vfiprintf_r+0x20e>
 801c512:	2300      	movs	r3, #0
 801c514:	f04f 32ff 	mov.w	r2, #4294967295
 801c518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c51c:	f10a 0a01 	add.w	sl, sl, #1
 801c520:	9304      	str	r3, [sp, #16]
 801c522:	9307      	str	r3, [sp, #28]
 801c524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c528:	931a      	str	r3, [sp, #104]	; 0x68
 801c52a:	4654      	mov	r4, sl
 801c52c:	2205      	movs	r2, #5
 801c52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c532:	4858      	ldr	r0, [pc, #352]	; (801c694 <_vfiprintf_r+0x24c>)
 801c534:	f7e3 fe4c 	bl	80001d0 <memchr>
 801c538:	9a04      	ldr	r2, [sp, #16]
 801c53a:	b9d8      	cbnz	r0, 801c574 <_vfiprintf_r+0x12c>
 801c53c:	06d1      	lsls	r1, r2, #27
 801c53e:	bf44      	itt	mi
 801c540:	2320      	movmi	r3, #32
 801c542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c546:	0713      	lsls	r3, r2, #28
 801c548:	bf44      	itt	mi
 801c54a:	232b      	movmi	r3, #43	; 0x2b
 801c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c550:	f89a 3000 	ldrb.w	r3, [sl]
 801c554:	2b2a      	cmp	r3, #42	; 0x2a
 801c556:	d015      	beq.n	801c584 <_vfiprintf_r+0x13c>
 801c558:	9a07      	ldr	r2, [sp, #28]
 801c55a:	4654      	mov	r4, sl
 801c55c:	2000      	movs	r0, #0
 801c55e:	f04f 0c0a 	mov.w	ip, #10
 801c562:	4621      	mov	r1, r4
 801c564:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c568:	3b30      	subs	r3, #48	; 0x30
 801c56a:	2b09      	cmp	r3, #9
 801c56c:	d94e      	bls.n	801c60c <_vfiprintf_r+0x1c4>
 801c56e:	b1b0      	cbz	r0, 801c59e <_vfiprintf_r+0x156>
 801c570:	9207      	str	r2, [sp, #28]
 801c572:	e014      	b.n	801c59e <_vfiprintf_r+0x156>
 801c574:	eba0 0308 	sub.w	r3, r0, r8
 801c578:	fa09 f303 	lsl.w	r3, r9, r3
 801c57c:	4313      	orrs	r3, r2
 801c57e:	9304      	str	r3, [sp, #16]
 801c580:	46a2      	mov	sl, r4
 801c582:	e7d2      	b.n	801c52a <_vfiprintf_r+0xe2>
 801c584:	9b03      	ldr	r3, [sp, #12]
 801c586:	1d19      	adds	r1, r3, #4
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	9103      	str	r1, [sp, #12]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	bfbb      	ittet	lt
 801c590:	425b      	neglt	r3, r3
 801c592:	f042 0202 	orrlt.w	r2, r2, #2
 801c596:	9307      	strge	r3, [sp, #28]
 801c598:	9307      	strlt	r3, [sp, #28]
 801c59a:	bfb8      	it	lt
 801c59c:	9204      	strlt	r2, [sp, #16]
 801c59e:	7823      	ldrb	r3, [r4, #0]
 801c5a0:	2b2e      	cmp	r3, #46	; 0x2e
 801c5a2:	d10c      	bne.n	801c5be <_vfiprintf_r+0x176>
 801c5a4:	7863      	ldrb	r3, [r4, #1]
 801c5a6:	2b2a      	cmp	r3, #42	; 0x2a
 801c5a8:	d135      	bne.n	801c616 <_vfiprintf_r+0x1ce>
 801c5aa:	9b03      	ldr	r3, [sp, #12]
 801c5ac:	1d1a      	adds	r2, r3, #4
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	9203      	str	r2, [sp, #12]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	bfb8      	it	lt
 801c5b6:	f04f 33ff 	movlt.w	r3, #4294967295
 801c5ba:	3402      	adds	r4, #2
 801c5bc:	9305      	str	r3, [sp, #20]
 801c5be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c6a4 <_vfiprintf_r+0x25c>
 801c5c2:	7821      	ldrb	r1, [r4, #0]
 801c5c4:	2203      	movs	r2, #3
 801c5c6:	4650      	mov	r0, sl
 801c5c8:	f7e3 fe02 	bl	80001d0 <memchr>
 801c5cc:	b140      	cbz	r0, 801c5e0 <_vfiprintf_r+0x198>
 801c5ce:	2340      	movs	r3, #64	; 0x40
 801c5d0:	eba0 000a 	sub.w	r0, r0, sl
 801c5d4:	fa03 f000 	lsl.w	r0, r3, r0
 801c5d8:	9b04      	ldr	r3, [sp, #16]
 801c5da:	4303      	orrs	r3, r0
 801c5dc:	3401      	adds	r4, #1
 801c5de:	9304      	str	r3, [sp, #16]
 801c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5e4:	482c      	ldr	r0, [pc, #176]	; (801c698 <_vfiprintf_r+0x250>)
 801c5e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c5ea:	2206      	movs	r2, #6
 801c5ec:	f7e3 fdf0 	bl	80001d0 <memchr>
 801c5f0:	2800      	cmp	r0, #0
 801c5f2:	d03f      	beq.n	801c674 <_vfiprintf_r+0x22c>
 801c5f4:	4b29      	ldr	r3, [pc, #164]	; (801c69c <_vfiprintf_r+0x254>)
 801c5f6:	bb1b      	cbnz	r3, 801c640 <_vfiprintf_r+0x1f8>
 801c5f8:	9b03      	ldr	r3, [sp, #12]
 801c5fa:	3307      	adds	r3, #7
 801c5fc:	f023 0307 	bic.w	r3, r3, #7
 801c600:	3308      	adds	r3, #8
 801c602:	9303      	str	r3, [sp, #12]
 801c604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c606:	443b      	add	r3, r7
 801c608:	9309      	str	r3, [sp, #36]	; 0x24
 801c60a:	e767      	b.n	801c4dc <_vfiprintf_r+0x94>
 801c60c:	fb0c 3202 	mla	r2, ip, r2, r3
 801c610:	460c      	mov	r4, r1
 801c612:	2001      	movs	r0, #1
 801c614:	e7a5      	b.n	801c562 <_vfiprintf_r+0x11a>
 801c616:	2300      	movs	r3, #0
 801c618:	3401      	adds	r4, #1
 801c61a:	9305      	str	r3, [sp, #20]
 801c61c:	4619      	mov	r1, r3
 801c61e:	f04f 0c0a 	mov.w	ip, #10
 801c622:	4620      	mov	r0, r4
 801c624:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c628:	3a30      	subs	r2, #48	; 0x30
 801c62a:	2a09      	cmp	r2, #9
 801c62c:	d903      	bls.n	801c636 <_vfiprintf_r+0x1ee>
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d0c5      	beq.n	801c5be <_vfiprintf_r+0x176>
 801c632:	9105      	str	r1, [sp, #20]
 801c634:	e7c3      	b.n	801c5be <_vfiprintf_r+0x176>
 801c636:	fb0c 2101 	mla	r1, ip, r1, r2
 801c63a:	4604      	mov	r4, r0
 801c63c:	2301      	movs	r3, #1
 801c63e:	e7f0      	b.n	801c622 <_vfiprintf_r+0x1da>
 801c640:	ab03      	add	r3, sp, #12
 801c642:	9300      	str	r3, [sp, #0]
 801c644:	462a      	mov	r2, r5
 801c646:	4b16      	ldr	r3, [pc, #88]	; (801c6a0 <_vfiprintf_r+0x258>)
 801c648:	a904      	add	r1, sp, #16
 801c64a:	4630      	mov	r0, r6
 801c64c:	f3af 8000 	nop.w
 801c650:	4607      	mov	r7, r0
 801c652:	1c78      	adds	r0, r7, #1
 801c654:	d1d6      	bne.n	801c604 <_vfiprintf_r+0x1bc>
 801c656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c658:	07d9      	lsls	r1, r3, #31
 801c65a:	d405      	bmi.n	801c668 <_vfiprintf_r+0x220>
 801c65c:	89ab      	ldrh	r3, [r5, #12]
 801c65e:	059a      	lsls	r2, r3, #22
 801c660:	d402      	bmi.n	801c668 <_vfiprintf_r+0x220>
 801c662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c664:	f7ff fdcc 	bl	801c200 <__retarget_lock_release_recursive>
 801c668:	89ab      	ldrh	r3, [r5, #12]
 801c66a:	065b      	lsls	r3, r3, #25
 801c66c:	f53f af12 	bmi.w	801c494 <_vfiprintf_r+0x4c>
 801c670:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c672:	e711      	b.n	801c498 <_vfiprintf_r+0x50>
 801c674:	ab03      	add	r3, sp, #12
 801c676:	9300      	str	r3, [sp, #0]
 801c678:	462a      	mov	r2, r5
 801c67a:	4b09      	ldr	r3, [pc, #36]	; (801c6a0 <_vfiprintf_r+0x258>)
 801c67c:	a904      	add	r1, sp, #16
 801c67e:	4630      	mov	r0, r6
 801c680:	f000 f88a 	bl	801c798 <_printf_i>
 801c684:	e7e4      	b.n	801c650 <_vfiprintf_r+0x208>
 801c686:	bf00      	nop
 801c688:	08031b78 	.word	0x08031b78
 801c68c:	08031b98 	.word	0x08031b98
 801c690:	08031b58 	.word	0x08031b58
 801c694:	08031c94 	.word	0x08031c94
 801c698:	08031c9e 	.word	0x08031c9e
 801c69c:	00000000 	.word	0x00000000
 801c6a0:	0801c423 	.word	0x0801c423
 801c6a4:	08031c9a 	.word	0x08031c9a

0801c6a8 <vfiprintf>:
 801c6a8:	4613      	mov	r3, r2
 801c6aa:	460a      	mov	r2, r1
 801c6ac:	4601      	mov	r1, r0
 801c6ae:	4802      	ldr	r0, [pc, #8]	; (801c6b8 <vfiprintf+0x10>)
 801c6b0:	6800      	ldr	r0, [r0, #0]
 801c6b2:	f7ff bec9 	b.w	801c448 <_vfiprintf_r>
 801c6b6:	bf00      	nop
 801c6b8:	2000011c 	.word	0x2000011c

0801c6bc <_printf_common>:
 801c6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6c0:	4616      	mov	r6, r2
 801c6c2:	4699      	mov	r9, r3
 801c6c4:	688a      	ldr	r2, [r1, #8]
 801c6c6:	690b      	ldr	r3, [r1, #16]
 801c6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c6cc:	4293      	cmp	r3, r2
 801c6ce:	bfb8      	it	lt
 801c6d0:	4613      	movlt	r3, r2
 801c6d2:	6033      	str	r3, [r6, #0]
 801c6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c6d8:	4607      	mov	r7, r0
 801c6da:	460c      	mov	r4, r1
 801c6dc:	b10a      	cbz	r2, 801c6e2 <_printf_common+0x26>
 801c6de:	3301      	adds	r3, #1
 801c6e0:	6033      	str	r3, [r6, #0]
 801c6e2:	6823      	ldr	r3, [r4, #0]
 801c6e4:	0699      	lsls	r1, r3, #26
 801c6e6:	bf42      	ittt	mi
 801c6e8:	6833      	ldrmi	r3, [r6, #0]
 801c6ea:	3302      	addmi	r3, #2
 801c6ec:	6033      	strmi	r3, [r6, #0]
 801c6ee:	6825      	ldr	r5, [r4, #0]
 801c6f0:	f015 0506 	ands.w	r5, r5, #6
 801c6f4:	d106      	bne.n	801c704 <_printf_common+0x48>
 801c6f6:	f104 0a19 	add.w	sl, r4, #25
 801c6fa:	68e3      	ldr	r3, [r4, #12]
 801c6fc:	6832      	ldr	r2, [r6, #0]
 801c6fe:	1a9b      	subs	r3, r3, r2
 801c700:	42ab      	cmp	r3, r5
 801c702:	dc26      	bgt.n	801c752 <_printf_common+0x96>
 801c704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c708:	1e13      	subs	r3, r2, #0
 801c70a:	6822      	ldr	r2, [r4, #0]
 801c70c:	bf18      	it	ne
 801c70e:	2301      	movne	r3, #1
 801c710:	0692      	lsls	r2, r2, #26
 801c712:	d42b      	bmi.n	801c76c <_printf_common+0xb0>
 801c714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c718:	4649      	mov	r1, r9
 801c71a:	4638      	mov	r0, r7
 801c71c:	47c0      	blx	r8
 801c71e:	3001      	adds	r0, #1
 801c720:	d01e      	beq.n	801c760 <_printf_common+0xa4>
 801c722:	6823      	ldr	r3, [r4, #0]
 801c724:	68e5      	ldr	r5, [r4, #12]
 801c726:	6832      	ldr	r2, [r6, #0]
 801c728:	f003 0306 	and.w	r3, r3, #6
 801c72c:	2b04      	cmp	r3, #4
 801c72e:	bf08      	it	eq
 801c730:	1aad      	subeq	r5, r5, r2
 801c732:	68a3      	ldr	r3, [r4, #8]
 801c734:	6922      	ldr	r2, [r4, #16]
 801c736:	bf0c      	ite	eq
 801c738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c73c:	2500      	movne	r5, #0
 801c73e:	4293      	cmp	r3, r2
 801c740:	bfc4      	itt	gt
 801c742:	1a9b      	subgt	r3, r3, r2
 801c744:	18ed      	addgt	r5, r5, r3
 801c746:	2600      	movs	r6, #0
 801c748:	341a      	adds	r4, #26
 801c74a:	42b5      	cmp	r5, r6
 801c74c:	d11a      	bne.n	801c784 <_printf_common+0xc8>
 801c74e:	2000      	movs	r0, #0
 801c750:	e008      	b.n	801c764 <_printf_common+0xa8>
 801c752:	2301      	movs	r3, #1
 801c754:	4652      	mov	r2, sl
 801c756:	4649      	mov	r1, r9
 801c758:	4638      	mov	r0, r7
 801c75a:	47c0      	blx	r8
 801c75c:	3001      	adds	r0, #1
 801c75e:	d103      	bne.n	801c768 <_printf_common+0xac>
 801c760:	f04f 30ff 	mov.w	r0, #4294967295
 801c764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c768:	3501      	adds	r5, #1
 801c76a:	e7c6      	b.n	801c6fa <_printf_common+0x3e>
 801c76c:	18e1      	adds	r1, r4, r3
 801c76e:	1c5a      	adds	r2, r3, #1
 801c770:	2030      	movs	r0, #48	; 0x30
 801c772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c776:	4422      	add	r2, r4
 801c778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c780:	3302      	adds	r3, #2
 801c782:	e7c7      	b.n	801c714 <_printf_common+0x58>
 801c784:	2301      	movs	r3, #1
 801c786:	4622      	mov	r2, r4
 801c788:	4649      	mov	r1, r9
 801c78a:	4638      	mov	r0, r7
 801c78c:	47c0      	blx	r8
 801c78e:	3001      	adds	r0, #1
 801c790:	d0e6      	beq.n	801c760 <_printf_common+0xa4>
 801c792:	3601      	adds	r6, #1
 801c794:	e7d9      	b.n	801c74a <_printf_common+0x8e>
	...

0801c798 <_printf_i>:
 801c798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c79c:	460c      	mov	r4, r1
 801c79e:	4691      	mov	r9, r2
 801c7a0:	7e27      	ldrb	r7, [r4, #24]
 801c7a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c7a4:	2f78      	cmp	r7, #120	; 0x78
 801c7a6:	4680      	mov	r8, r0
 801c7a8:	469a      	mov	sl, r3
 801c7aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c7ae:	d807      	bhi.n	801c7c0 <_printf_i+0x28>
 801c7b0:	2f62      	cmp	r7, #98	; 0x62
 801c7b2:	d80a      	bhi.n	801c7ca <_printf_i+0x32>
 801c7b4:	2f00      	cmp	r7, #0
 801c7b6:	f000 80d8 	beq.w	801c96a <_printf_i+0x1d2>
 801c7ba:	2f58      	cmp	r7, #88	; 0x58
 801c7bc:	f000 80a3 	beq.w	801c906 <_printf_i+0x16e>
 801c7c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c7c8:	e03a      	b.n	801c840 <_printf_i+0xa8>
 801c7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c7ce:	2b15      	cmp	r3, #21
 801c7d0:	d8f6      	bhi.n	801c7c0 <_printf_i+0x28>
 801c7d2:	a001      	add	r0, pc, #4	; (adr r0, 801c7d8 <_printf_i+0x40>)
 801c7d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c7d8:	0801c831 	.word	0x0801c831
 801c7dc:	0801c845 	.word	0x0801c845
 801c7e0:	0801c7c1 	.word	0x0801c7c1
 801c7e4:	0801c7c1 	.word	0x0801c7c1
 801c7e8:	0801c7c1 	.word	0x0801c7c1
 801c7ec:	0801c7c1 	.word	0x0801c7c1
 801c7f0:	0801c845 	.word	0x0801c845
 801c7f4:	0801c7c1 	.word	0x0801c7c1
 801c7f8:	0801c7c1 	.word	0x0801c7c1
 801c7fc:	0801c7c1 	.word	0x0801c7c1
 801c800:	0801c7c1 	.word	0x0801c7c1
 801c804:	0801c951 	.word	0x0801c951
 801c808:	0801c875 	.word	0x0801c875
 801c80c:	0801c933 	.word	0x0801c933
 801c810:	0801c7c1 	.word	0x0801c7c1
 801c814:	0801c7c1 	.word	0x0801c7c1
 801c818:	0801c973 	.word	0x0801c973
 801c81c:	0801c7c1 	.word	0x0801c7c1
 801c820:	0801c875 	.word	0x0801c875
 801c824:	0801c7c1 	.word	0x0801c7c1
 801c828:	0801c7c1 	.word	0x0801c7c1
 801c82c:	0801c93b 	.word	0x0801c93b
 801c830:	680b      	ldr	r3, [r1, #0]
 801c832:	1d1a      	adds	r2, r3, #4
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	600a      	str	r2, [r1, #0]
 801c838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c840:	2301      	movs	r3, #1
 801c842:	e0a3      	b.n	801c98c <_printf_i+0x1f4>
 801c844:	6825      	ldr	r5, [r4, #0]
 801c846:	6808      	ldr	r0, [r1, #0]
 801c848:	062e      	lsls	r6, r5, #24
 801c84a:	f100 0304 	add.w	r3, r0, #4
 801c84e:	d50a      	bpl.n	801c866 <_printf_i+0xce>
 801c850:	6805      	ldr	r5, [r0, #0]
 801c852:	600b      	str	r3, [r1, #0]
 801c854:	2d00      	cmp	r5, #0
 801c856:	da03      	bge.n	801c860 <_printf_i+0xc8>
 801c858:	232d      	movs	r3, #45	; 0x2d
 801c85a:	426d      	negs	r5, r5
 801c85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c860:	485e      	ldr	r0, [pc, #376]	; (801c9dc <_printf_i+0x244>)
 801c862:	230a      	movs	r3, #10
 801c864:	e019      	b.n	801c89a <_printf_i+0x102>
 801c866:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c86a:	6805      	ldr	r5, [r0, #0]
 801c86c:	600b      	str	r3, [r1, #0]
 801c86e:	bf18      	it	ne
 801c870:	b22d      	sxthne	r5, r5
 801c872:	e7ef      	b.n	801c854 <_printf_i+0xbc>
 801c874:	680b      	ldr	r3, [r1, #0]
 801c876:	6825      	ldr	r5, [r4, #0]
 801c878:	1d18      	adds	r0, r3, #4
 801c87a:	6008      	str	r0, [r1, #0]
 801c87c:	0628      	lsls	r0, r5, #24
 801c87e:	d501      	bpl.n	801c884 <_printf_i+0xec>
 801c880:	681d      	ldr	r5, [r3, #0]
 801c882:	e002      	b.n	801c88a <_printf_i+0xf2>
 801c884:	0669      	lsls	r1, r5, #25
 801c886:	d5fb      	bpl.n	801c880 <_printf_i+0xe8>
 801c888:	881d      	ldrh	r5, [r3, #0]
 801c88a:	4854      	ldr	r0, [pc, #336]	; (801c9dc <_printf_i+0x244>)
 801c88c:	2f6f      	cmp	r7, #111	; 0x6f
 801c88e:	bf0c      	ite	eq
 801c890:	2308      	moveq	r3, #8
 801c892:	230a      	movne	r3, #10
 801c894:	2100      	movs	r1, #0
 801c896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c89a:	6866      	ldr	r6, [r4, #4]
 801c89c:	60a6      	str	r6, [r4, #8]
 801c89e:	2e00      	cmp	r6, #0
 801c8a0:	bfa2      	ittt	ge
 801c8a2:	6821      	ldrge	r1, [r4, #0]
 801c8a4:	f021 0104 	bicge.w	r1, r1, #4
 801c8a8:	6021      	strge	r1, [r4, #0]
 801c8aa:	b90d      	cbnz	r5, 801c8b0 <_printf_i+0x118>
 801c8ac:	2e00      	cmp	r6, #0
 801c8ae:	d04d      	beq.n	801c94c <_printf_i+0x1b4>
 801c8b0:	4616      	mov	r6, r2
 801c8b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801c8b6:	fb03 5711 	mls	r7, r3, r1, r5
 801c8ba:	5dc7      	ldrb	r7, [r0, r7]
 801c8bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c8c0:	462f      	mov	r7, r5
 801c8c2:	42bb      	cmp	r3, r7
 801c8c4:	460d      	mov	r5, r1
 801c8c6:	d9f4      	bls.n	801c8b2 <_printf_i+0x11a>
 801c8c8:	2b08      	cmp	r3, #8
 801c8ca:	d10b      	bne.n	801c8e4 <_printf_i+0x14c>
 801c8cc:	6823      	ldr	r3, [r4, #0]
 801c8ce:	07df      	lsls	r7, r3, #31
 801c8d0:	d508      	bpl.n	801c8e4 <_printf_i+0x14c>
 801c8d2:	6923      	ldr	r3, [r4, #16]
 801c8d4:	6861      	ldr	r1, [r4, #4]
 801c8d6:	4299      	cmp	r1, r3
 801c8d8:	bfde      	ittt	le
 801c8da:	2330      	movle	r3, #48	; 0x30
 801c8dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c8e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c8e4:	1b92      	subs	r2, r2, r6
 801c8e6:	6122      	str	r2, [r4, #16]
 801c8e8:	f8cd a000 	str.w	sl, [sp]
 801c8ec:	464b      	mov	r3, r9
 801c8ee:	aa03      	add	r2, sp, #12
 801c8f0:	4621      	mov	r1, r4
 801c8f2:	4640      	mov	r0, r8
 801c8f4:	f7ff fee2 	bl	801c6bc <_printf_common>
 801c8f8:	3001      	adds	r0, #1
 801c8fa:	d14c      	bne.n	801c996 <_printf_i+0x1fe>
 801c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 801c900:	b004      	add	sp, #16
 801c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c906:	4835      	ldr	r0, [pc, #212]	; (801c9dc <_printf_i+0x244>)
 801c908:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c90c:	6823      	ldr	r3, [r4, #0]
 801c90e:	680e      	ldr	r6, [r1, #0]
 801c910:	061f      	lsls	r7, r3, #24
 801c912:	f856 5b04 	ldr.w	r5, [r6], #4
 801c916:	600e      	str	r6, [r1, #0]
 801c918:	d514      	bpl.n	801c944 <_printf_i+0x1ac>
 801c91a:	07d9      	lsls	r1, r3, #31
 801c91c:	bf44      	itt	mi
 801c91e:	f043 0320 	orrmi.w	r3, r3, #32
 801c922:	6023      	strmi	r3, [r4, #0]
 801c924:	b91d      	cbnz	r5, 801c92e <_printf_i+0x196>
 801c926:	6823      	ldr	r3, [r4, #0]
 801c928:	f023 0320 	bic.w	r3, r3, #32
 801c92c:	6023      	str	r3, [r4, #0]
 801c92e:	2310      	movs	r3, #16
 801c930:	e7b0      	b.n	801c894 <_printf_i+0xfc>
 801c932:	6823      	ldr	r3, [r4, #0]
 801c934:	f043 0320 	orr.w	r3, r3, #32
 801c938:	6023      	str	r3, [r4, #0]
 801c93a:	2378      	movs	r3, #120	; 0x78
 801c93c:	4828      	ldr	r0, [pc, #160]	; (801c9e0 <_printf_i+0x248>)
 801c93e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c942:	e7e3      	b.n	801c90c <_printf_i+0x174>
 801c944:	065e      	lsls	r6, r3, #25
 801c946:	bf48      	it	mi
 801c948:	b2ad      	uxthmi	r5, r5
 801c94a:	e7e6      	b.n	801c91a <_printf_i+0x182>
 801c94c:	4616      	mov	r6, r2
 801c94e:	e7bb      	b.n	801c8c8 <_printf_i+0x130>
 801c950:	680b      	ldr	r3, [r1, #0]
 801c952:	6826      	ldr	r6, [r4, #0]
 801c954:	6960      	ldr	r0, [r4, #20]
 801c956:	1d1d      	adds	r5, r3, #4
 801c958:	600d      	str	r5, [r1, #0]
 801c95a:	0635      	lsls	r5, r6, #24
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	d501      	bpl.n	801c964 <_printf_i+0x1cc>
 801c960:	6018      	str	r0, [r3, #0]
 801c962:	e002      	b.n	801c96a <_printf_i+0x1d2>
 801c964:	0671      	lsls	r1, r6, #25
 801c966:	d5fb      	bpl.n	801c960 <_printf_i+0x1c8>
 801c968:	8018      	strh	r0, [r3, #0]
 801c96a:	2300      	movs	r3, #0
 801c96c:	6123      	str	r3, [r4, #16]
 801c96e:	4616      	mov	r6, r2
 801c970:	e7ba      	b.n	801c8e8 <_printf_i+0x150>
 801c972:	680b      	ldr	r3, [r1, #0]
 801c974:	1d1a      	adds	r2, r3, #4
 801c976:	600a      	str	r2, [r1, #0]
 801c978:	681e      	ldr	r6, [r3, #0]
 801c97a:	6862      	ldr	r2, [r4, #4]
 801c97c:	2100      	movs	r1, #0
 801c97e:	4630      	mov	r0, r6
 801c980:	f7e3 fc26 	bl	80001d0 <memchr>
 801c984:	b108      	cbz	r0, 801c98a <_printf_i+0x1f2>
 801c986:	1b80      	subs	r0, r0, r6
 801c988:	6060      	str	r0, [r4, #4]
 801c98a:	6863      	ldr	r3, [r4, #4]
 801c98c:	6123      	str	r3, [r4, #16]
 801c98e:	2300      	movs	r3, #0
 801c990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c994:	e7a8      	b.n	801c8e8 <_printf_i+0x150>
 801c996:	6923      	ldr	r3, [r4, #16]
 801c998:	4632      	mov	r2, r6
 801c99a:	4649      	mov	r1, r9
 801c99c:	4640      	mov	r0, r8
 801c99e:	47d0      	blx	sl
 801c9a0:	3001      	adds	r0, #1
 801c9a2:	d0ab      	beq.n	801c8fc <_printf_i+0x164>
 801c9a4:	6823      	ldr	r3, [r4, #0]
 801c9a6:	079b      	lsls	r3, r3, #30
 801c9a8:	d413      	bmi.n	801c9d2 <_printf_i+0x23a>
 801c9aa:	68e0      	ldr	r0, [r4, #12]
 801c9ac:	9b03      	ldr	r3, [sp, #12]
 801c9ae:	4298      	cmp	r0, r3
 801c9b0:	bfb8      	it	lt
 801c9b2:	4618      	movlt	r0, r3
 801c9b4:	e7a4      	b.n	801c900 <_printf_i+0x168>
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	4632      	mov	r2, r6
 801c9ba:	4649      	mov	r1, r9
 801c9bc:	4640      	mov	r0, r8
 801c9be:	47d0      	blx	sl
 801c9c0:	3001      	adds	r0, #1
 801c9c2:	d09b      	beq.n	801c8fc <_printf_i+0x164>
 801c9c4:	3501      	adds	r5, #1
 801c9c6:	68e3      	ldr	r3, [r4, #12]
 801c9c8:	9903      	ldr	r1, [sp, #12]
 801c9ca:	1a5b      	subs	r3, r3, r1
 801c9cc:	42ab      	cmp	r3, r5
 801c9ce:	dcf2      	bgt.n	801c9b6 <_printf_i+0x21e>
 801c9d0:	e7eb      	b.n	801c9aa <_printf_i+0x212>
 801c9d2:	2500      	movs	r5, #0
 801c9d4:	f104 0619 	add.w	r6, r4, #25
 801c9d8:	e7f5      	b.n	801c9c6 <_printf_i+0x22e>
 801c9da:	bf00      	nop
 801c9dc:	0802efdf 	.word	0x0802efdf
 801c9e0:	08031ca5 	.word	0x08031ca5

0801c9e4 <_perror_r>:
 801c9e4:	6983      	ldr	r3, [r0, #24]
 801c9e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9e8:	68c4      	ldr	r4, [r0, #12]
 801c9ea:	4605      	mov	r5, r0
 801c9ec:	460e      	mov	r6, r1
 801c9ee:	b90b      	cbnz	r3, 801c9f4 <_perror_r+0x10>
 801c9f0:	f7ff f9ac 	bl	801bd4c <__sinit>
 801c9f4:	4b43      	ldr	r3, [pc, #268]	; (801cb04 <_perror_r+0x120>)
 801c9f6:	429c      	cmp	r4, r3
 801c9f8:	d132      	bne.n	801ca60 <_perror_r+0x7c>
 801c9fa:	686c      	ldr	r4, [r5, #4]
 801c9fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c9fe:	07d8      	lsls	r0, r3, #31
 801ca00:	d405      	bmi.n	801ca0e <_perror_r+0x2a>
 801ca02:	89a3      	ldrh	r3, [r4, #12]
 801ca04:	0599      	lsls	r1, r3, #22
 801ca06:	d402      	bmi.n	801ca0e <_perror_r+0x2a>
 801ca08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca0a:	f7ff fbf7 	bl	801c1fc <__retarget_lock_acquire_recursive>
 801ca0e:	4621      	mov	r1, r4
 801ca10:	4628      	mov	r0, r5
 801ca12:	f7ff f8f5 	bl	801bc00 <_fflush_r>
 801ca16:	bb6e      	cbnz	r6, 801ca74 <_perror_r+0x90>
 801ca18:	6829      	ldr	r1, [r5, #0]
 801ca1a:	ab01      	add	r3, sp, #4
 801ca1c:	2201      	movs	r2, #1
 801ca1e:	4628      	mov	r0, r5
 801ca20:	f000 f9d0 	bl	801cdc4 <_strerror_r>
 801ca24:	4607      	mov	r7, r0
 801ca26:	2800      	cmp	r0, #0
 801ca28:	d14f      	bne.n	801caca <_perror_r+0xe6>
 801ca2a:	4837      	ldr	r0, [pc, #220]	; (801cb08 <_perror_r+0x124>)
 801ca2c:	4f36      	ldr	r7, [pc, #216]	; (801cb08 <_perror_r+0x124>)
 801ca2e:	f7e3 fc29 	bl	8000284 <strlen>
 801ca32:	4606      	mov	r6, r0
 801ca34:	b156      	cbz	r6, 801ca4c <_perror_r+0x68>
 801ca36:	4620      	mov	r0, r4
 801ca38:	f001 fda8 	bl	801e58c <fileno>
 801ca3c:	4633      	mov	r3, r6
 801ca3e:	4601      	mov	r1, r0
 801ca40:	463a      	mov	r2, r7
 801ca42:	4628      	mov	r0, r5
 801ca44:	f001 fd06 	bl	801e454 <_write_r>
 801ca48:	2800      	cmp	r0, #0
 801ca4a:	da51      	bge.n	801caf0 <_perror_r+0x10c>
 801ca4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ca52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ca56:	07d2      	lsls	r2, r2, #31
 801ca58:	81a3      	strh	r3, [r4, #12]
 801ca5a:	d54c      	bpl.n	801caf6 <_perror_r+0x112>
 801ca5c:	b003      	add	sp, #12
 801ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca60:	4b2a      	ldr	r3, [pc, #168]	; (801cb0c <_perror_r+0x128>)
 801ca62:	429c      	cmp	r4, r3
 801ca64:	d101      	bne.n	801ca6a <_perror_r+0x86>
 801ca66:	68ac      	ldr	r4, [r5, #8]
 801ca68:	e7c8      	b.n	801c9fc <_perror_r+0x18>
 801ca6a:	4b29      	ldr	r3, [pc, #164]	; (801cb10 <_perror_r+0x12c>)
 801ca6c:	429c      	cmp	r4, r3
 801ca6e:	bf08      	it	eq
 801ca70:	68ec      	ldreq	r4, [r5, #12]
 801ca72:	e7c3      	b.n	801c9fc <_perror_r+0x18>
 801ca74:	7833      	ldrb	r3, [r6, #0]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d0ce      	beq.n	801ca18 <_perror_r+0x34>
 801ca7a:	4630      	mov	r0, r6
 801ca7c:	f7e3 fc02 	bl	8000284 <strlen>
 801ca80:	4607      	mov	r7, r0
 801ca82:	b157      	cbz	r7, 801ca9a <_perror_r+0xb6>
 801ca84:	4620      	mov	r0, r4
 801ca86:	f001 fd81 	bl	801e58c <fileno>
 801ca8a:	463b      	mov	r3, r7
 801ca8c:	4601      	mov	r1, r0
 801ca8e:	4632      	mov	r2, r6
 801ca90:	4628      	mov	r0, r5
 801ca92:	f001 fcdf 	bl	801e454 <_write_r>
 801ca96:	2800      	cmp	r0, #0
 801ca98:	da14      	bge.n	801cac4 <_perror_r+0xe0>
 801ca9a:	481e      	ldr	r0, [pc, #120]	; (801cb14 <_perror_r+0x130>)
 801ca9c:	4f1d      	ldr	r7, [pc, #116]	; (801cb14 <_perror_r+0x130>)
 801ca9e:	f7e3 fbf1 	bl	8000284 <strlen>
 801caa2:	4606      	mov	r6, r0
 801caa4:	2e00      	cmp	r6, #0
 801caa6:	d0b7      	beq.n	801ca18 <_perror_r+0x34>
 801caa8:	4620      	mov	r0, r4
 801caaa:	f001 fd6f 	bl	801e58c <fileno>
 801caae:	4633      	mov	r3, r6
 801cab0:	4601      	mov	r1, r0
 801cab2:	463a      	mov	r2, r7
 801cab4:	4628      	mov	r0, r5
 801cab6:	f001 fccd 	bl	801e454 <_write_r>
 801caba:	2800      	cmp	r0, #0
 801cabc:	dbac      	blt.n	801ca18 <_perror_r+0x34>
 801cabe:	1a36      	subs	r6, r6, r0
 801cac0:	4407      	add	r7, r0
 801cac2:	e7ef      	b.n	801caa4 <_perror_r+0xc0>
 801cac4:	1a3f      	subs	r7, r7, r0
 801cac6:	4406      	add	r6, r0
 801cac8:	e7db      	b.n	801ca82 <_perror_r+0x9e>
 801caca:	f7e3 fbdb 	bl	8000284 <strlen>
 801cace:	4606      	mov	r6, r0
 801cad0:	2e00      	cmp	r6, #0
 801cad2:	d0aa      	beq.n	801ca2a <_perror_r+0x46>
 801cad4:	4620      	mov	r0, r4
 801cad6:	f001 fd59 	bl	801e58c <fileno>
 801cada:	4633      	mov	r3, r6
 801cadc:	4601      	mov	r1, r0
 801cade:	463a      	mov	r2, r7
 801cae0:	4628      	mov	r0, r5
 801cae2:	f001 fcb7 	bl	801e454 <_write_r>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	db9f      	blt.n	801ca2a <_perror_r+0x46>
 801caea:	1a36      	subs	r6, r6, r0
 801caec:	4407      	add	r7, r0
 801caee:	e7ef      	b.n	801cad0 <_perror_r+0xec>
 801caf0:	1a36      	subs	r6, r6, r0
 801caf2:	4407      	add	r7, r0
 801caf4:	e79e      	b.n	801ca34 <_perror_r+0x50>
 801caf6:	059b      	lsls	r3, r3, #22
 801caf8:	d4b0      	bmi.n	801ca5c <_perror_r+0x78>
 801cafa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cafc:	f7ff fb80 	bl	801c200 <__retarget_lock_release_recursive>
 801cb00:	e7ac      	b.n	801ca5c <_perror_r+0x78>
 801cb02:	bf00      	nop
 801cb04:	08031b78 	.word	0x08031b78
 801cb08:	08030be9 	.word	0x08030be9
 801cb0c:	08031b98 	.word	0x08031b98
 801cb10:	08031b58 	.word	0x08031b58
 801cb14:	0802f1c0 	.word	0x0802f1c0

0801cb18 <perror>:
 801cb18:	4b02      	ldr	r3, [pc, #8]	; (801cb24 <perror+0xc>)
 801cb1a:	4601      	mov	r1, r0
 801cb1c:	6818      	ldr	r0, [r3, #0]
 801cb1e:	f7ff bf61 	b.w	801c9e4 <_perror_r>
 801cb22:	bf00      	nop
 801cb24:	2000011c 	.word	0x2000011c

0801cb28 <iprintf>:
 801cb28:	b40f      	push	{r0, r1, r2, r3}
 801cb2a:	4b0a      	ldr	r3, [pc, #40]	; (801cb54 <iprintf+0x2c>)
 801cb2c:	b513      	push	{r0, r1, r4, lr}
 801cb2e:	681c      	ldr	r4, [r3, #0]
 801cb30:	b124      	cbz	r4, 801cb3c <iprintf+0x14>
 801cb32:	69a3      	ldr	r3, [r4, #24]
 801cb34:	b913      	cbnz	r3, 801cb3c <iprintf+0x14>
 801cb36:	4620      	mov	r0, r4
 801cb38:	f7ff f908 	bl	801bd4c <__sinit>
 801cb3c:	ab05      	add	r3, sp, #20
 801cb3e:	9a04      	ldr	r2, [sp, #16]
 801cb40:	68a1      	ldr	r1, [r4, #8]
 801cb42:	9301      	str	r3, [sp, #4]
 801cb44:	4620      	mov	r0, r4
 801cb46:	f7ff fc7f 	bl	801c448 <_vfiprintf_r>
 801cb4a:	b002      	add	sp, #8
 801cb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb50:	b004      	add	sp, #16
 801cb52:	4770      	bx	lr
 801cb54:	2000011c 	.word	0x2000011c

0801cb58 <srand>:
 801cb58:	b538      	push	{r3, r4, r5, lr}
 801cb5a:	4b10      	ldr	r3, [pc, #64]	; (801cb9c <srand+0x44>)
 801cb5c:	681d      	ldr	r5, [r3, #0]
 801cb5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801cb60:	4604      	mov	r4, r0
 801cb62:	b9b3      	cbnz	r3, 801cb92 <srand+0x3a>
 801cb64:	2018      	movs	r0, #24
 801cb66:	f7ff fb4d 	bl	801c204 <malloc>
 801cb6a:	4602      	mov	r2, r0
 801cb6c:	63a8      	str	r0, [r5, #56]	; 0x38
 801cb6e:	b920      	cbnz	r0, 801cb7a <srand+0x22>
 801cb70:	4b0b      	ldr	r3, [pc, #44]	; (801cba0 <srand+0x48>)
 801cb72:	480c      	ldr	r0, [pc, #48]	; (801cba4 <srand+0x4c>)
 801cb74:	2142      	movs	r1, #66	; 0x42
 801cb76:	f7fe ff81 	bl	801ba7c <__assert_func>
 801cb7a:	490b      	ldr	r1, [pc, #44]	; (801cba8 <srand+0x50>)
 801cb7c:	4b0b      	ldr	r3, [pc, #44]	; (801cbac <srand+0x54>)
 801cb7e:	e9c0 1300 	strd	r1, r3, [r0]
 801cb82:	4b0b      	ldr	r3, [pc, #44]	; (801cbb0 <srand+0x58>)
 801cb84:	6083      	str	r3, [r0, #8]
 801cb86:	230b      	movs	r3, #11
 801cb88:	8183      	strh	r3, [r0, #12]
 801cb8a:	2100      	movs	r1, #0
 801cb8c:	2001      	movs	r0, #1
 801cb8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cb92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801cb94:	2200      	movs	r2, #0
 801cb96:	611c      	str	r4, [r3, #16]
 801cb98:	615a      	str	r2, [r3, #20]
 801cb9a:	bd38      	pop	{r3, r4, r5, pc}
 801cb9c:	2000011c 	.word	0x2000011c
 801cba0:	08031bbc 	.word	0x08031bbc
 801cba4:	08031cb6 	.word	0x08031cb6
 801cba8:	abcd330e 	.word	0xabcd330e
 801cbac:	e66d1234 	.word	0xe66d1234
 801cbb0:	0005deec 	.word	0x0005deec

0801cbb4 <rand>:
 801cbb4:	4b17      	ldr	r3, [pc, #92]	; (801cc14 <rand+0x60>)
 801cbb6:	b510      	push	{r4, lr}
 801cbb8:	681c      	ldr	r4, [r3, #0]
 801cbba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cbbc:	b9b3      	cbnz	r3, 801cbec <rand+0x38>
 801cbbe:	2018      	movs	r0, #24
 801cbc0:	f7ff fb20 	bl	801c204 <malloc>
 801cbc4:	63a0      	str	r0, [r4, #56]	; 0x38
 801cbc6:	b928      	cbnz	r0, 801cbd4 <rand+0x20>
 801cbc8:	4602      	mov	r2, r0
 801cbca:	4b13      	ldr	r3, [pc, #76]	; (801cc18 <rand+0x64>)
 801cbcc:	4813      	ldr	r0, [pc, #76]	; (801cc1c <rand+0x68>)
 801cbce:	214e      	movs	r1, #78	; 0x4e
 801cbd0:	f7fe ff54 	bl	801ba7c <__assert_func>
 801cbd4:	4a12      	ldr	r2, [pc, #72]	; (801cc20 <rand+0x6c>)
 801cbd6:	4b13      	ldr	r3, [pc, #76]	; (801cc24 <rand+0x70>)
 801cbd8:	e9c0 2300 	strd	r2, r3, [r0]
 801cbdc:	4b12      	ldr	r3, [pc, #72]	; (801cc28 <rand+0x74>)
 801cbde:	6083      	str	r3, [r0, #8]
 801cbe0:	230b      	movs	r3, #11
 801cbe2:	8183      	strh	r3, [r0, #12]
 801cbe4:	2201      	movs	r2, #1
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cbec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cbee:	480f      	ldr	r0, [pc, #60]	; (801cc2c <rand+0x78>)
 801cbf0:	690a      	ldr	r2, [r1, #16]
 801cbf2:	694b      	ldr	r3, [r1, #20]
 801cbf4:	4c0e      	ldr	r4, [pc, #56]	; (801cc30 <rand+0x7c>)
 801cbf6:	4350      	muls	r0, r2
 801cbf8:	fb04 0003 	mla	r0, r4, r3, r0
 801cbfc:	fba2 3404 	umull	r3, r4, r2, r4
 801cc00:	1c5a      	adds	r2, r3, #1
 801cc02:	4404      	add	r4, r0
 801cc04:	f144 0000 	adc.w	r0, r4, #0
 801cc08:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801cc0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cc10:	bd10      	pop	{r4, pc}
 801cc12:	bf00      	nop
 801cc14:	2000011c 	.word	0x2000011c
 801cc18:	08031bbc 	.word	0x08031bbc
 801cc1c:	08031cb6 	.word	0x08031cb6
 801cc20:	abcd330e 	.word	0xabcd330e
 801cc24:	e66d1234 	.word	0xe66d1234
 801cc28:	0005deec 	.word	0x0005deec
 801cc2c:	5851f42d 	.word	0x5851f42d
 801cc30:	4c957f2d 	.word	0x4c957f2d

0801cc34 <realloc>:
 801cc34:	4b02      	ldr	r3, [pc, #8]	; (801cc40 <realloc+0xc>)
 801cc36:	460a      	mov	r2, r1
 801cc38:	4601      	mov	r1, r0
 801cc3a:	6818      	ldr	r0, [r3, #0]
 801cc3c:	f001 be72 	b.w	801e924 <_realloc_r>
 801cc40:	2000011c 	.word	0x2000011c

0801cc44 <_sbrk_r>:
 801cc44:	b538      	push	{r3, r4, r5, lr}
 801cc46:	4d06      	ldr	r5, [pc, #24]	; (801cc60 <_sbrk_r+0x1c>)
 801cc48:	2300      	movs	r3, #0
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	4608      	mov	r0, r1
 801cc4e:	602b      	str	r3, [r5, #0]
 801cc50:	f7e4 f83a 	bl	8000cc8 <_sbrk>
 801cc54:	1c43      	adds	r3, r0, #1
 801cc56:	d102      	bne.n	801cc5e <_sbrk_r+0x1a>
 801cc58:	682b      	ldr	r3, [r5, #0]
 801cc5a:	b103      	cbz	r3, 801cc5e <_sbrk_r+0x1a>
 801cc5c:	6023      	str	r3, [r4, #0]
 801cc5e:	bd38      	pop	{r3, r4, r5, pc}
 801cc60:	20016130 	.word	0x20016130

0801cc64 <sniprintf>:
 801cc64:	b40c      	push	{r2, r3}
 801cc66:	b530      	push	{r4, r5, lr}
 801cc68:	4b17      	ldr	r3, [pc, #92]	; (801ccc8 <sniprintf+0x64>)
 801cc6a:	1e0c      	subs	r4, r1, #0
 801cc6c:	681d      	ldr	r5, [r3, #0]
 801cc6e:	b09d      	sub	sp, #116	; 0x74
 801cc70:	da08      	bge.n	801cc84 <sniprintf+0x20>
 801cc72:	238b      	movs	r3, #139	; 0x8b
 801cc74:	602b      	str	r3, [r5, #0]
 801cc76:	f04f 30ff 	mov.w	r0, #4294967295
 801cc7a:	b01d      	add	sp, #116	; 0x74
 801cc7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc80:	b002      	add	sp, #8
 801cc82:	4770      	bx	lr
 801cc84:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cc88:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cc8c:	bf14      	ite	ne
 801cc8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cc92:	4623      	moveq	r3, r4
 801cc94:	9304      	str	r3, [sp, #16]
 801cc96:	9307      	str	r3, [sp, #28]
 801cc98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc9c:	9002      	str	r0, [sp, #8]
 801cc9e:	9006      	str	r0, [sp, #24]
 801cca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cca6:	ab21      	add	r3, sp, #132	; 0x84
 801cca8:	a902      	add	r1, sp, #8
 801ccaa:	4628      	mov	r0, r5
 801ccac:	9301      	str	r3, [sp, #4]
 801ccae:	f001 febb 	bl	801ea28 <_svfiprintf_r>
 801ccb2:	1c43      	adds	r3, r0, #1
 801ccb4:	bfbc      	itt	lt
 801ccb6:	238b      	movlt	r3, #139	; 0x8b
 801ccb8:	602b      	strlt	r3, [r5, #0]
 801ccba:	2c00      	cmp	r4, #0
 801ccbc:	d0dd      	beq.n	801cc7a <sniprintf+0x16>
 801ccbe:	9b02      	ldr	r3, [sp, #8]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	701a      	strb	r2, [r3, #0]
 801ccc4:	e7d9      	b.n	801cc7a <sniprintf+0x16>
 801ccc6:	bf00      	nop
 801ccc8:	2000011c 	.word	0x2000011c

0801cccc <siprintf>:
 801cccc:	b40e      	push	{r1, r2, r3}
 801ccce:	b500      	push	{lr}
 801ccd0:	b09c      	sub	sp, #112	; 0x70
 801ccd2:	ab1d      	add	r3, sp, #116	; 0x74
 801ccd4:	9002      	str	r0, [sp, #8]
 801ccd6:	9006      	str	r0, [sp, #24]
 801ccd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ccdc:	4809      	ldr	r0, [pc, #36]	; (801cd04 <siprintf+0x38>)
 801ccde:	9107      	str	r1, [sp, #28]
 801cce0:	9104      	str	r1, [sp, #16]
 801cce2:	4909      	ldr	r1, [pc, #36]	; (801cd08 <siprintf+0x3c>)
 801cce4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cce8:	9105      	str	r1, [sp, #20]
 801ccea:	6800      	ldr	r0, [r0, #0]
 801ccec:	9301      	str	r3, [sp, #4]
 801ccee:	a902      	add	r1, sp, #8
 801ccf0:	f001 fe9a 	bl	801ea28 <_svfiprintf_r>
 801ccf4:	9b02      	ldr	r3, [sp, #8]
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	701a      	strb	r2, [r3, #0]
 801ccfa:	b01c      	add	sp, #112	; 0x70
 801ccfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd00:	b003      	add	sp, #12
 801cd02:	4770      	bx	lr
 801cd04:	2000011c 	.word	0x2000011c
 801cd08:	ffff0208 	.word	0xffff0208

0801cd0c <__sread>:
 801cd0c:	b510      	push	{r4, lr}
 801cd0e:	460c      	mov	r4, r1
 801cd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd14:	f001 ff88 	bl	801ec28 <_read_r>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	bfab      	itete	ge
 801cd1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cd1e:	89a3      	ldrhlt	r3, [r4, #12]
 801cd20:	181b      	addge	r3, r3, r0
 801cd22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cd26:	bfac      	ite	ge
 801cd28:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd2a:	81a3      	strhlt	r3, [r4, #12]
 801cd2c:	bd10      	pop	{r4, pc}

0801cd2e <__seofread>:
 801cd2e:	2000      	movs	r0, #0
 801cd30:	4770      	bx	lr

0801cd32 <__swrite>:
 801cd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd36:	461f      	mov	r7, r3
 801cd38:	898b      	ldrh	r3, [r1, #12]
 801cd3a:	05db      	lsls	r3, r3, #23
 801cd3c:	4605      	mov	r5, r0
 801cd3e:	460c      	mov	r4, r1
 801cd40:	4616      	mov	r6, r2
 801cd42:	d505      	bpl.n	801cd50 <__swrite+0x1e>
 801cd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd48:	2302      	movs	r3, #2
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	f001 fd56 	bl	801e7fc <_lseek_r>
 801cd50:	89a3      	ldrh	r3, [r4, #12]
 801cd52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd5a:	81a3      	strh	r3, [r4, #12]
 801cd5c:	4632      	mov	r2, r6
 801cd5e:	463b      	mov	r3, r7
 801cd60:	4628      	mov	r0, r5
 801cd62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd66:	f001 bb75 	b.w	801e454 <_write_r>

0801cd6a <__sseek>:
 801cd6a:	b510      	push	{r4, lr}
 801cd6c:	460c      	mov	r4, r1
 801cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd72:	f001 fd43 	bl	801e7fc <_lseek_r>
 801cd76:	1c43      	adds	r3, r0, #1
 801cd78:	89a3      	ldrh	r3, [r4, #12]
 801cd7a:	bf15      	itete	ne
 801cd7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd86:	81a3      	strheq	r3, [r4, #12]
 801cd88:	bf18      	it	ne
 801cd8a:	81a3      	strhne	r3, [r4, #12]
 801cd8c:	bd10      	pop	{r4, pc}

0801cd8e <__sclose>:
 801cd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd92:	f001 bbeb 	b.w	801e56c <_close_r>

0801cd96 <strcat>:
 801cd96:	b510      	push	{r4, lr}
 801cd98:	4602      	mov	r2, r0
 801cd9a:	7814      	ldrb	r4, [r2, #0]
 801cd9c:	4613      	mov	r3, r2
 801cd9e:	3201      	adds	r2, #1
 801cda0:	2c00      	cmp	r4, #0
 801cda2:	d1fa      	bne.n	801cd9a <strcat+0x4>
 801cda4:	3b01      	subs	r3, #1
 801cda6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cdaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cdae:	2a00      	cmp	r2, #0
 801cdb0:	d1f9      	bne.n	801cda6 <strcat+0x10>
 801cdb2:	bd10      	pop	{r4, pc}

0801cdb4 <strcpy>:
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cdba:	f803 2b01 	strb.w	r2, [r3], #1
 801cdbe:	2a00      	cmp	r2, #0
 801cdc0:	d1f9      	bne.n	801cdb6 <strcpy+0x2>
 801cdc2:	4770      	bx	lr

0801cdc4 <_strerror_r>:
 801cdc4:	b510      	push	{r4, lr}
 801cdc6:	4604      	mov	r4, r0
 801cdc8:	4608      	mov	r0, r1
 801cdca:	4611      	mov	r1, r2
 801cdcc:	288e      	cmp	r0, #142	; 0x8e
 801cdce:	f200 812f 	bhi.w	801d030 <_strerror_r+0x26c>
 801cdd2:	e8df f010 	tbh	[pc, r0, lsl #1]
 801cdd6:	0138      	.short	0x0138
 801cdd8:	0091008f 	.word	0x0091008f
 801cddc:	00950093 	.word	0x00950093
 801cde0:	00990097 	.word	0x00990097
 801cde4:	009d009b 	.word	0x009d009b
 801cde8:	00a300a1 	.word	0x00a300a1
 801cdec:	00a900a7 	.word	0x00a900a7
 801cdf0:	00ad00ab 	.word	0x00ad00ab
 801cdf4:	00af012d 	.word	0x00af012d
 801cdf8:	00b300b1 	.word	0x00b300b1
 801cdfc:	00b700b5 	.word	0x00b700b5
 801ce00:	00bf00bd 	.word	0x00bf00bd
 801ce04:	00c700c5 	.word	0x00c700c5
 801ce08:	00cb00c9 	.word	0x00cb00c9
 801ce0c:	00d100cd 	.word	0x00d100cd
 801ce10:	00d700d5 	.word	0x00d700d5
 801ce14:	00db00d9 	.word	0x00db00d9
 801ce18:	00df00dd 	.word	0x00df00dd
 801ce1c:	00e300e1 	.word	0x00e300e1
 801ce20:	012d012d 	.word	0x012d012d
 801ce24:	012d012d 	.word	0x012d012d
 801ce28:	012d012d 	.word	0x012d012d
 801ce2c:	012d012d 	.word	0x012d012d
 801ce30:	00eb00e7 	.word	0x00eb00e7
 801ce34:	012d012d 	.word	0x012d012d
 801ce38:	012d012d 	.word	0x012d012d
 801ce3c:	012d012d 	.word	0x012d012d
 801ce40:	012d012d 	.word	0x012d012d
 801ce44:	012d012d 	.word	0x012d012d
 801ce48:	012d012d 	.word	0x012d012d
 801ce4c:	00ed012d 	.word	0x00ed012d
 801ce50:	00ef0107 	.word	0x00ef0107
 801ce54:	012d00f1 	.word	0x012d00f1
 801ce58:	012d012d 	.word	0x012d012d
 801ce5c:	012d00f3 	.word	0x012d00f3
 801ce60:	012d012d 	.word	0x012d012d
 801ce64:	012d00f5 	.word	0x012d00f5
 801ce68:	00f9012d 	.word	0x00f9012d
 801ce6c:	012d012d 	.word	0x012d012d
 801ce70:	012d00fb 	.word	0x012d00fb
 801ce74:	012d012d 	.word	0x012d012d
 801ce78:	012d012d 	.word	0x012d012d
 801ce7c:	012d012d 	.word	0x012d012d
 801ce80:	012d012d 	.word	0x012d012d
 801ce84:	00fd012d 	.word	0x00fd012d
 801ce88:	00ff012d 	.word	0x00ff012d
 801ce8c:	01030101 	.word	0x01030101
 801ce90:	012d012d 	.word	0x012d012d
 801ce94:	012d0125 	.word	0x012d0125
 801ce98:	012d012d 	.word	0x012d012d
 801ce9c:	012d012d 	.word	0x012d012d
 801cea0:	012d012d 	.word	0x012d012d
 801cea4:	0113012d 	.word	0x0113012d
 801cea8:	01090105 	.word	0x01090105
 801ceac:	010d010b 	.word	0x010d010b
 801ceb0:	012d010f 	.word	0x012d010f
 801ceb4:	01150111 	.word	0x01150111
 801ceb8:	00e90119 	.word	0x00e90119
 801cebc:	012b00c1 	.word	0x012b00c1
 801cec0:	00cf00b9 	.word	0x00cf00b9
 801cec4:	009f00bb 	.word	0x009f00bb
 801cec8:	012900a5 	.word	0x012900a5
 801cecc:	012d00f7 	.word	0x012d00f7
 801ced0:	00c30117 	.word	0x00c30117
 801ced4:	011b011d 	.word	0x011b011d
 801ced8:	012d012d 	.word	0x012d012d
 801cedc:	012d012d 	.word	0x012d012d
 801cee0:	00d3012d 	.word	0x00d3012d
 801cee4:	012d012d 	.word	0x012d012d
 801cee8:	00e5012d 	.word	0x00e5012d
 801ceec:	011f0127 	.word	0x011f0127
 801cef0:	01230121 	.word	0x01230121
 801cef4:	4855      	ldr	r0, [pc, #340]	; (801d04c <_strerror_r+0x288>)
 801cef6:	bd10      	pop	{r4, pc}
 801cef8:	4855      	ldr	r0, [pc, #340]	; (801d050 <_strerror_r+0x28c>)
 801cefa:	e7fc      	b.n	801cef6 <_strerror_r+0x132>
 801cefc:	4855      	ldr	r0, [pc, #340]	; (801d054 <_strerror_r+0x290>)
 801cefe:	e7fa      	b.n	801cef6 <_strerror_r+0x132>
 801cf00:	4855      	ldr	r0, [pc, #340]	; (801d058 <_strerror_r+0x294>)
 801cf02:	e7f8      	b.n	801cef6 <_strerror_r+0x132>
 801cf04:	4855      	ldr	r0, [pc, #340]	; (801d05c <_strerror_r+0x298>)
 801cf06:	e7f6      	b.n	801cef6 <_strerror_r+0x132>
 801cf08:	4855      	ldr	r0, [pc, #340]	; (801d060 <_strerror_r+0x29c>)
 801cf0a:	e7f4      	b.n	801cef6 <_strerror_r+0x132>
 801cf0c:	4855      	ldr	r0, [pc, #340]	; (801d064 <_strerror_r+0x2a0>)
 801cf0e:	e7f2      	b.n	801cef6 <_strerror_r+0x132>
 801cf10:	4855      	ldr	r0, [pc, #340]	; (801d068 <_strerror_r+0x2a4>)
 801cf12:	e7f0      	b.n	801cef6 <_strerror_r+0x132>
 801cf14:	4855      	ldr	r0, [pc, #340]	; (801d06c <_strerror_r+0x2a8>)
 801cf16:	e7ee      	b.n	801cef6 <_strerror_r+0x132>
 801cf18:	4855      	ldr	r0, [pc, #340]	; (801d070 <_strerror_r+0x2ac>)
 801cf1a:	e7ec      	b.n	801cef6 <_strerror_r+0x132>
 801cf1c:	4855      	ldr	r0, [pc, #340]	; (801d074 <_strerror_r+0x2b0>)
 801cf1e:	e7ea      	b.n	801cef6 <_strerror_r+0x132>
 801cf20:	4855      	ldr	r0, [pc, #340]	; (801d078 <_strerror_r+0x2b4>)
 801cf22:	e7e8      	b.n	801cef6 <_strerror_r+0x132>
 801cf24:	4855      	ldr	r0, [pc, #340]	; (801d07c <_strerror_r+0x2b8>)
 801cf26:	e7e6      	b.n	801cef6 <_strerror_r+0x132>
 801cf28:	4855      	ldr	r0, [pc, #340]	; (801d080 <_strerror_r+0x2bc>)
 801cf2a:	e7e4      	b.n	801cef6 <_strerror_r+0x132>
 801cf2c:	4855      	ldr	r0, [pc, #340]	; (801d084 <_strerror_r+0x2c0>)
 801cf2e:	e7e2      	b.n	801cef6 <_strerror_r+0x132>
 801cf30:	4855      	ldr	r0, [pc, #340]	; (801d088 <_strerror_r+0x2c4>)
 801cf32:	e7e0      	b.n	801cef6 <_strerror_r+0x132>
 801cf34:	4855      	ldr	r0, [pc, #340]	; (801d08c <_strerror_r+0x2c8>)
 801cf36:	e7de      	b.n	801cef6 <_strerror_r+0x132>
 801cf38:	4855      	ldr	r0, [pc, #340]	; (801d090 <_strerror_r+0x2cc>)
 801cf3a:	e7dc      	b.n	801cef6 <_strerror_r+0x132>
 801cf3c:	4855      	ldr	r0, [pc, #340]	; (801d094 <_strerror_r+0x2d0>)
 801cf3e:	e7da      	b.n	801cef6 <_strerror_r+0x132>
 801cf40:	4855      	ldr	r0, [pc, #340]	; (801d098 <_strerror_r+0x2d4>)
 801cf42:	e7d8      	b.n	801cef6 <_strerror_r+0x132>
 801cf44:	4855      	ldr	r0, [pc, #340]	; (801d09c <_strerror_r+0x2d8>)
 801cf46:	e7d6      	b.n	801cef6 <_strerror_r+0x132>
 801cf48:	4855      	ldr	r0, [pc, #340]	; (801d0a0 <_strerror_r+0x2dc>)
 801cf4a:	e7d4      	b.n	801cef6 <_strerror_r+0x132>
 801cf4c:	4855      	ldr	r0, [pc, #340]	; (801d0a4 <_strerror_r+0x2e0>)
 801cf4e:	e7d2      	b.n	801cef6 <_strerror_r+0x132>
 801cf50:	4855      	ldr	r0, [pc, #340]	; (801d0a8 <_strerror_r+0x2e4>)
 801cf52:	e7d0      	b.n	801cef6 <_strerror_r+0x132>
 801cf54:	4855      	ldr	r0, [pc, #340]	; (801d0ac <_strerror_r+0x2e8>)
 801cf56:	e7ce      	b.n	801cef6 <_strerror_r+0x132>
 801cf58:	4855      	ldr	r0, [pc, #340]	; (801d0b0 <_strerror_r+0x2ec>)
 801cf5a:	e7cc      	b.n	801cef6 <_strerror_r+0x132>
 801cf5c:	4855      	ldr	r0, [pc, #340]	; (801d0b4 <_strerror_r+0x2f0>)
 801cf5e:	e7ca      	b.n	801cef6 <_strerror_r+0x132>
 801cf60:	4855      	ldr	r0, [pc, #340]	; (801d0b8 <_strerror_r+0x2f4>)
 801cf62:	e7c8      	b.n	801cef6 <_strerror_r+0x132>
 801cf64:	4855      	ldr	r0, [pc, #340]	; (801d0bc <_strerror_r+0x2f8>)
 801cf66:	e7c6      	b.n	801cef6 <_strerror_r+0x132>
 801cf68:	4855      	ldr	r0, [pc, #340]	; (801d0c0 <_strerror_r+0x2fc>)
 801cf6a:	e7c4      	b.n	801cef6 <_strerror_r+0x132>
 801cf6c:	4855      	ldr	r0, [pc, #340]	; (801d0c4 <_strerror_r+0x300>)
 801cf6e:	e7c2      	b.n	801cef6 <_strerror_r+0x132>
 801cf70:	4855      	ldr	r0, [pc, #340]	; (801d0c8 <_strerror_r+0x304>)
 801cf72:	e7c0      	b.n	801cef6 <_strerror_r+0x132>
 801cf74:	4855      	ldr	r0, [pc, #340]	; (801d0cc <_strerror_r+0x308>)
 801cf76:	e7be      	b.n	801cef6 <_strerror_r+0x132>
 801cf78:	4855      	ldr	r0, [pc, #340]	; (801d0d0 <_strerror_r+0x30c>)
 801cf7a:	e7bc      	b.n	801cef6 <_strerror_r+0x132>
 801cf7c:	4855      	ldr	r0, [pc, #340]	; (801d0d4 <_strerror_r+0x310>)
 801cf7e:	e7ba      	b.n	801cef6 <_strerror_r+0x132>
 801cf80:	4855      	ldr	r0, [pc, #340]	; (801d0d8 <_strerror_r+0x314>)
 801cf82:	e7b8      	b.n	801cef6 <_strerror_r+0x132>
 801cf84:	4855      	ldr	r0, [pc, #340]	; (801d0dc <_strerror_r+0x318>)
 801cf86:	e7b6      	b.n	801cef6 <_strerror_r+0x132>
 801cf88:	4855      	ldr	r0, [pc, #340]	; (801d0e0 <_strerror_r+0x31c>)
 801cf8a:	e7b4      	b.n	801cef6 <_strerror_r+0x132>
 801cf8c:	4855      	ldr	r0, [pc, #340]	; (801d0e4 <_strerror_r+0x320>)
 801cf8e:	e7b2      	b.n	801cef6 <_strerror_r+0x132>
 801cf90:	4855      	ldr	r0, [pc, #340]	; (801d0e8 <_strerror_r+0x324>)
 801cf92:	e7b0      	b.n	801cef6 <_strerror_r+0x132>
 801cf94:	4855      	ldr	r0, [pc, #340]	; (801d0ec <_strerror_r+0x328>)
 801cf96:	e7ae      	b.n	801cef6 <_strerror_r+0x132>
 801cf98:	4855      	ldr	r0, [pc, #340]	; (801d0f0 <_strerror_r+0x32c>)
 801cf9a:	e7ac      	b.n	801cef6 <_strerror_r+0x132>
 801cf9c:	4855      	ldr	r0, [pc, #340]	; (801d0f4 <_strerror_r+0x330>)
 801cf9e:	e7aa      	b.n	801cef6 <_strerror_r+0x132>
 801cfa0:	4855      	ldr	r0, [pc, #340]	; (801d0f8 <_strerror_r+0x334>)
 801cfa2:	e7a8      	b.n	801cef6 <_strerror_r+0x132>
 801cfa4:	4855      	ldr	r0, [pc, #340]	; (801d0fc <_strerror_r+0x338>)
 801cfa6:	e7a6      	b.n	801cef6 <_strerror_r+0x132>
 801cfa8:	4855      	ldr	r0, [pc, #340]	; (801d100 <_strerror_r+0x33c>)
 801cfaa:	e7a4      	b.n	801cef6 <_strerror_r+0x132>
 801cfac:	4855      	ldr	r0, [pc, #340]	; (801d104 <_strerror_r+0x340>)
 801cfae:	e7a2      	b.n	801cef6 <_strerror_r+0x132>
 801cfb0:	4855      	ldr	r0, [pc, #340]	; (801d108 <_strerror_r+0x344>)
 801cfb2:	e7a0      	b.n	801cef6 <_strerror_r+0x132>
 801cfb4:	4855      	ldr	r0, [pc, #340]	; (801d10c <_strerror_r+0x348>)
 801cfb6:	e79e      	b.n	801cef6 <_strerror_r+0x132>
 801cfb8:	4855      	ldr	r0, [pc, #340]	; (801d110 <_strerror_r+0x34c>)
 801cfba:	e79c      	b.n	801cef6 <_strerror_r+0x132>
 801cfbc:	4855      	ldr	r0, [pc, #340]	; (801d114 <_strerror_r+0x350>)
 801cfbe:	e79a      	b.n	801cef6 <_strerror_r+0x132>
 801cfc0:	4855      	ldr	r0, [pc, #340]	; (801d118 <_strerror_r+0x354>)
 801cfc2:	e798      	b.n	801cef6 <_strerror_r+0x132>
 801cfc4:	4855      	ldr	r0, [pc, #340]	; (801d11c <_strerror_r+0x358>)
 801cfc6:	e796      	b.n	801cef6 <_strerror_r+0x132>
 801cfc8:	4855      	ldr	r0, [pc, #340]	; (801d120 <_strerror_r+0x35c>)
 801cfca:	e794      	b.n	801cef6 <_strerror_r+0x132>
 801cfcc:	4855      	ldr	r0, [pc, #340]	; (801d124 <_strerror_r+0x360>)
 801cfce:	e792      	b.n	801cef6 <_strerror_r+0x132>
 801cfd0:	4855      	ldr	r0, [pc, #340]	; (801d128 <_strerror_r+0x364>)
 801cfd2:	e790      	b.n	801cef6 <_strerror_r+0x132>
 801cfd4:	4855      	ldr	r0, [pc, #340]	; (801d12c <_strerror_r+0x368>)
 801cfd6:	e78e      	b.n	801cef6 <_strerror_r+0x132>
 801cfd8:	4855      	ldr	r0, [pc, #340]	; (801d130 <_strerror_r+0x36c>)
 801cfda:	e78c      	b.n	801cef6 <_strerror_r+0x132>
 801cfdc:	4855      	ldr	r0, [pc, #340]	; (801d134 <_strerror_r+0x370>)
 801cfde:	e78a      	b.n	801cef6 <_strerror_r+0x132>
 801cfe0:	4855      	ldr	r0, [pc, #340]	; (801d138 <_strerror_r+0x374>)
 801cfe2:	e788      	b.n	801cef6 <_strerror_r+0x132>
 801cfe4:	4855      	ldr	r0, [pc, #340]	; (801d13c <_strerror_r+0x378>)
 801cfe6:	e786      	b.n	801cef6 <_strerror_r+0x132>
 801cfe8:	4855      	ldr	r0, [pc, #340]	; (801d140 <_strerror_r+0x37c>)
 801cfea:	e784      	b.n	801cef6 <_strerror_r+0x132>
 801cfec:	4855      	ldr	r0, [pc, #340]	; (801d144 <_strerror_r+0x380>)
 801cfee:	e782      	b.n	801cef6 <_strerror_r+0x132>
 801cff0:	4855      	ldr	r0, [pc, #340]	; (801d148 <_strerror_r+0x384>)
 801cff2:	e780      	b.n	801cef6 <_strerror_r+0x132>
 801cff4:	4855      	ldr	r0, [pc, #340]	; (801d14c <_strerror_r+0x388>)
 801cff6:	e77e      	b.n	801cef6 <_strerror_r+0x132>
 801cff8:	4855      	ldr	r0, [pc, #340]	; (801d150 <_strerror_r+0x38c>)
 801cffa:	e77c      	b.n	801cef6 <_strerror_r+0x132>
 801cffc:	4855      	ldr	r0, [pc, #340]	; (801d154 <_strerror_r+0x390>)
 801cffe:	e77a      	b.n	801cef6 <_strerror_r+0x132>
 801d000:	4855      	ldr	r0, [pc, #340]	; (801d158 <_strerror_r+0x394>)
 801d002:	e778      	b.n	801cef6 <_strerror_r+0x132>
 801d004:	4855      	ldr	r0, [pc, #340]	; (801d15c <_strerror_r+0x398>)
 801d006:	e776      	b.n	801cef6 <_strerror_r+0x132>
 801d008:	4855      	ldr	r0, [pc, #340]	; (801d160 <_strerror_r+0x39c>)
 801d00a:	e774      	b.n	801cef6 <_strerror_r+0x132>
 801d00c:	4855      	ldr	r0, [pc, #340]	; (801d164 <_strerror_r+0x3a0>)
 801d00e:	e772      	b.n	801cef6 <_strerror_r+0x132>
 801d010:	4855      	ldr	r0, [pc, #340]	; (801d168 <_strerror_r+0x3a4>)
 801d012:	e770      	b.n	801cef6 <_strerror_r+0x132>
 801d014:	4855      	ldr	r0, [pc, #340]	; (801d16c <_strerror_r+0x3a8>)
 801d016:	e76e      	b.n	801cef6 <_strerror_r+0x132>
 801d018:	4855      	ldr	r0, [pc, #340]	; (801d170 <_strerror_r+0x3ac>)
 801d01a:	e76c      	b.n	801cef6 <_strerror_r+0x132>
 801d01c:	4855      	ldr	r0, [pc, #340]	; (801d174 <_strerror_r+0x3b0>)
 801d01e:	e76a      	b.n	801cef6 <_strerror_r+0x132>
 801d020:	4855      	ldr	r0, [pc, #340]	; (801d178 <_strerror_r+0x3b4>)
 801d022:	e768      	b.n	801cef6 <_strerror_r+0x132>
 801d024:	4855      	ldr	r0, [pc, #340]	; (801d17c <_strerror_r+0x3b8>)
 801d026:	e766      	b.n	801cef6 <_strerror_r+0x132>
 801d028:	4855      	ldr	r0, [pc, #340]	; (801d180 <_strerror_r+0x3bc>)
 801d02a:	e764      	b.n	801cef6 <_strerror_r+0x132>
 801d02c:	4855      	ldr	r0, [pc, #340]	; (801d184 <_strerror_r+0x3c0>)
 801d02e:	e762      	b.n	801cef6 <_strerror_r+0x132>
 801d030:	2b00      	cmp	r3, #0
 801d032:	bf14      	ite	ne
 801d034:	461a      	movne	r2, r3
 801d036:	4622      	moveq	r2, r4
 801d038:	f001 f97e 	bl	801e338 <_user_strerror>
 801d03c:	4b52      	ldr	r3, [pc, #328]	; (801d188 <_strerror_r+0x3c4>)
 801d03e:	2800      	cmp	r0, #0
 801d040:	bf08      	it	eq
 801d042:	4618      	moveq	r0, r3
 801d044:	e757      	b.n	801cef6 <_strerror_r+0x132>
 801d046:	4851      	ldr	r0, [pc, #324]	; (801d18c <_strerror_r+0x3c8>)
 801d048:	e755      	b.n	801cef6 <_strerror_r+0x132>
 801d04a:	bf00      	nop
 801d04c:	08031d15 	.word	0x08031d15
 801d050:	08031d1f 	.word	0x08031d1f
 801d054:	08031d39 	.word	0x08031d39
 801d058:	08031d49 	.word	0x08031d49
 801d05c:	08031d61 	.word	0x08031d61
 801d060:	08031d6b 	.word	0x08031d6b
 801d064:	08031d85 	.word	0x08031d85
 801d068:	08031d97 	.word	0x08031d97
 801d06c:	08031da9 	.word	0x08031da9
 801d070:	08031dc2 	.word	0x08031dc2
 801d074:	08031dd2 	.word	0x08031dd2
 801d078:	08031dde 	.word	0x08031dde
 801d07c:	08031dfb 	.word	0x08031dfb
 801d080:	08031e0d 	.word	0x08031e0d
 801d084:	08031e1e 	.word	0x08031e1e
 801d088:	08031e30 	.word	0x08031e30
 801d08c:	08031e3c 	.word	0x08031e3c
 801d090:	08031e54 	.word	0x08031e54
 801d094:	08031e60 	.word	0x08031e60
 801d098:	08031e72 	.word	0x08031e72
 801d09c:	08031e81 	.word	0x08031e81
 801d0a0:	08031e91 	.word	0x08031e91
 801d0a4:	08031e9e 	.word	0x08031e9e
 801d0a8:	08031ebd 	.word	0x08031ebd
 801d0ac:	08031ecc 	.word	0x08031ecc
 801d0b0:	08031edd 	.word	0x08031edd
 801d0b4:	08031f01 	.word	0x08031f01
 801d0b8:	08031f1f 	.word	0x08031f1f
 801d0bc:	08031f3d 	.word	0x08031f3d
 801d0c0:	08031f5d 	.word	0x08031f5d
 801d0c4:	08031f74 	.word	0x08031f74
 801d0c8:	08031f83 	.word	0x08031f83
 801d0cc:	08031f92 	.word	0x08031f92
 801d0d0:	08031fa6 	.word	0x08031fa6
 801d0d4:	08031fbe 	.word	0x08031fbe
 801d0d8:	08031fcc 	.word	0x08031fcc
 801d0dc:	08031fd9 	.word	0x08031fd9
 801d0e0:	08031fef 	.word	0x08031fef
 801d0e4:	08031ffe 	.word	0x08031ffe
 801d0e8:	0803200a 	.word	0x0803200a
 801d0ec:	08032039 	.word	0x08032039
 801d0f0:	0803204a 	.word	0x0803204a
 801d0f4:	08032065 	.word	0x08032065
 801d0f8:	08032078 	.word	0x08032078
 801d0fc:	0803208e 	.word	0x0803208e
 801d100:	08032097 	.word	0x08032097
 801d104:	080320ae 	.word	0x080320ae
 801d108:	080320b6 	.word	0x080320b6
 801d10c:	080320c3 	.word	0x080320c3
 801d110:	080320d8 	.word	0x080320d8
 801d114:	080320ec 	.word	0x080320ec
 801d118:	08032104 	.word	0x08032104
 801d11c:	08032113 	.word	0x08032113
 801d120:	08032124 	.word	0x08032124
 801d124:	08032137 	.word	0x08032137
 801d128:	08032143 	.word	0x08032143
 801d12c:	0803215c 	.word	0x0803215c
 801d130:	08032170 	.word	0x08032170
 801d134:	0803218b 	.word	0x0803218b
 801d138:	080321a3 	.word	0x080321a3
 801d13c:	080321bd 	.word	0x080321bd
 801d140:	080321c5 	.word	0x080321c5
 801d144:	080321f5 	.word	0x080321f5
 801d148:	08032214 	.word	0x08032214
 801d14c:	08032233 	.word	0x08032233
 801d150:	0803224a 	.word	0x0803224a
 801d154:	0803225d 	.word	0x0803225d
 801d158:	08032276 	.word	0x08032276
 801d15c:	0803228d 	.word	0x0803228d
 801d160:	080322a3 	.word	0x080322a3
 801d164:	080322c4 	.word	0x080322c4
 801d168:	080322dc 	.word	0x080322dc
 801d16c:	080322f8 	.word	0x080322f8
 801d170:	0803230b 	.word	0x0803230b
 801d174:	08032321 	.word	0x08032321
 801d178:	08032335 	.word	0x08032335
 801d17c:	08032357 	.word	0x08032357
 801d180:	0803237d 	.word	0x0803237d
 801d184:	0803238e 	.word	0x0803238e
 801d188:	08030bea 	.word	0x08030bea
 801d18c:	080323a3 	.word	0x080323a3

0801d190 <strerror>:
 801d190:	4601      	mov	r1, r0
 801d192:	4803      	ldr	r0, [pc, #12]	; (801d1a0 <strerror+0x10>)
 801d194:	2300      	movs	r3, #0
 801d196:	6800      	ldr	r0, [r0, #0]
 801d198:	461a      	mov	r2, r3
 801d19a:	f7ff be13 	b.w	801cdc4 <_strerror_r>
 801d19e:	bf00      	nop
 801d1a0:	2000011c 	.word	0x2000011c

0801d1a4 <iso_year_adjust>:
 801d1a4:	6941      	ldr	r1, [r0, #20]
 801d1a6:	2900      	cmp	r1, #0
 801d1a8:	f240 736c 	movw	r3, #1900	; 0x76c
 801d1ac:	bfa8      	it	ge
 801d1ae:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801d1b2:	18ca      	adds	r2, r1, r3
 801d1b4:	078b      	lsls	r3, r1, #30
 801d1b6:	d105      	bne.n	801d1c4 <iso_year_adjust+0x20>
 801d1b8:	2164      	movs	r1, #100	; 0x64
 801d1ba:	fb92 f3f1 	sdiv	r3, r2, r1
 801d1be:	fb01 2313 	mls	r3, r1, r3, r2
 801d1c2:	b9db      	cbnz	r3, 801d1fc <iso_year_adjust+0x58>
 801d1c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d1c8:	fb92 f3f1 	sdiv	r3, r2, r1
 801d1cc:	fb01 2313 	mls	r3, r1, r3, r2
 801d1d0:	fab3 f383 	clz	r3, r3
 801d1d4:	095b      	lsrs	r3, r3, #5
 801d1d6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801d1da:	0040      	lsls	r0, r0, #1
 801d1dc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801d1e0:	4418      	add	r0, r3
 801d1e2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801d1e6:	4298      	cmp	r0, r3
 801d1e8:	d03a      	beq.n	801d260 <iso_year_adjust+0xbc>
 801d1ea:	dc21      	bgt.n	801d230 <iso_year_adjust+0x8c>
 801d1ec:	2801      	cmp	r0, #1
 801d1ee:	dc1a      	bgt.n	801d226 <iso_year_adjust+0x82>
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	bfb4      	ite	lt
 801d1f4:	2000      	movlt	r0, #0
 801d1f6:	f04f 30ff 	movge.w	r0, #4294967295
 801d1fa:	4770      	bx	lr
 801d1fc:	2301      	movs	r3, #1
 801d1fe:	e7ea      	b.n	801d1d6 <iso_year_adjust+0x32>
 801d200:	2817      	cmp	r0, #23
 801d202:	d813      	bhi.n	801d22c <iso_year_adjust+0x88>
 801d204:	e8df f000 	tbb	[pc, r0]
 801d208:	0c0c0c0c 	.word	0x0c0c0c0c
 801d20c:	0c0c1212 	.word	0x0c0c1212
 801d210:	12121212 	.word	0x12121212
 801d214:	12121212 	.word	0x12121212
 801d218:	0c0c1212 	.word	0x0c0c1212
 801d21c:	0c0c1212 	.word	0x0c0c1212
 801d220:	f04f 30ff 	mov.w	r0, #4294967295
 801d224:	4770      	bx	lr
 801d226:	380a      	subs	r0, #10
 801d228:	2817      	cmp	r0, #23
 801d22a:	d9e9      	bls.n	801d200 <iso_year_adjust+0x5c>
 801d22c:	2000      	movs	r0, #0
 801d22e:	4770      	bx	lr
 801d230:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801d234:	4298      	cmp	r0, r3
 801d236:	dc06      	bgt.n	801d246 <iso_year_adjust+0xa2>
 801d238:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801d23c:	4298      	cmp	r0, r3
 801d23e:	bfd4      	ite	le
 801d240:	2000      	movle	r0, #0
 801d242:	2001      	movgt	r0, #1
 801d244:	4770      	bx	lr
 801d246:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801d24a:	3802      	subs	r0, #2
 801d24c:	2815      	cmp	r0, #21
 801d24e:	d8ed      	bhi.n	801d22c <iso_year_adjust+0x88>
 801d250:	2301      	movs	r3, #1
 801d252:	4083      	lsls	r3, r0
 801d254:	4803      	ldr	r0, [pc, #12]	; (801d264 <iso_year_adjust+0xc0>)
 801d256:	4018      	ands	r0, r3
 801d258:	3800      	subs	r0, #0
 801d25a:	bf18      	it	ne
 801d25c:	2001      	movne	r0, #1
 801d25e:	4770      	bx	lr
 801d260:	2001      	movs	r0, #1
 801d262:	4770      	bx	lr
 801d264:	002a001f 	.word	0x002a001f

0801d268 <__strftime>:
 801d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d26c:	b091      	sub	sp, #68	; 0x44
 801d26e:	461d      	mov	r5, r3
 801d270:	2300      	movs	r3, #0
 801d272:	4681      	mov	r9, r0
 801d274:	4688      	mov	r8, r1
 801d276:	9304      	str	r3, [sp, #16]
 801d278:	461c      	mov	r4, r3
 801d27a:	7813      	ldrb	r3, [r2, #0]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f000 84d1 	beq.w	801dc24 <__strftime+0x9bc>
 801d282:	2b25      	cmp	r3, #37	; 0x25
 801d284:	d11b      	bne.n	801d2be <__strftime+0x56>
 801d286:	7857      	ldrb	r7, [r2, #1]
 801d288:	2f30      	cmp	r7, #48	; 0x30
 801d28a:	d024      	beq.n	801d2d6 <__strftime+0x6e>
 801d28c:	2f2b      	cmp	r7, #43	; 0x2b
 801d28e:	d022      	beq.n	801d2d6 <__strftime+0x6e>
 801d290:	f102 0b01 	add.w	fp, r2, #1
 801d294:	2700      	movs	r7, #0
 801d296:	f89b 3000 	ldrb.w	r3, [fp]
 801d29a:	3b31      	subs	r3, #49	; 0x31
 801d29c:	2b08      	cmp	r3, #8
 801d29e:	d81d      	bhi.n	801d2dc <__strftime+0x74>
 801d2a0:	4658      	mov	r0, fp
 801d2a2:	220a      	movs	r2, #10
 801d2a4:	a908      	add	r1, sp, #32
 801d2a6:	f000 fe07 	bl	801deb8 <strtoul>
 801d2aa:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d2ae:	4606      	mov	r6, r0
 801d2b0:	f89b 3000 	ldrb.w	r3, [fp]
 801d2b4:	2b45      	cmp	r3, #69	; 0x45
 801d2b6:	d113      	bne.n	801d2e0 <__strftime+0x78>
 801d2b8:	f10b 0b01 	add.w	fp, fp, #1
 801d2bc:	e012      	b.n	801d2e4 <__strftime+0x7c>
 801d2be:	f108 31ff 	add.w	r1, r8, #4294967295
 801d2c2:	42a1      	cmp	r1, r4
 801d2c4:	d802      	bhi.n	801d2cc <__strftime+0x64>
 801d2c6:	2400      	movs	r4, #0
 801d2c8:	f000 bcb2 	b.w	801dc30 <__strftime+0x9c8>
 801d2cc:	f809 3004 	strb.w	r3, [r9, r4]
 801d2d0:	3201      	adds	r2, #1
 801d2d2:	3401      	adds	r4, #1
 801d2d4:	e7d1      	b.n	801d27a <__strftime+0x12>
 801d2d6:	f102 0b02 	add.w	fp, r2, #2
 801d2da:	e7dc      	b.n	801d296 <__strftime+0x2e>
 801d2dc:	2600      	movs	r6, #0
 801d2de:	e7e7      	b.n	801d2b0 <__strftime+0x48>
 801d2e0:	2b4f      	cmp	r3, #79	; 0x4f
 801d2e2:	d0e9      	beq.n	801d2b8 <__strftime+0x50>
 801d2e4:	f89b 0000 	ldrb.w	r0, [fp]
 801d2e8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801d2ec:	2b55      	cmp	r3, #85	; 0x55
 801d2ee:	d8ea      	bhi.n	801d2c6 <__strftime+0x5e>
 801d2f0:	a201      	add	r2, pc, #4	; (adr r2, 801d2f8 <__strftime+0x90>)
 801d2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2f6:	bf00      	nop
 801d2f8:	0801dc17 	.word	0x0801dc17
 801d2fc:	0801d2c7 	.word	0x0801d2c7
 801d300:	0801d2c7 	.word	0x0801d2c7
 801d304:	0801d2c7 	.word	0x0801d2c7
 801d308:	0801d2c7 	.word	0x0801d2c7
 801d30c:	0801d2c7 	.word	0x0801d2c7
 801d310:	0801d2c7 	.word	0x0801d2c7
 801d314:	0801d2c7 	.word	0x0801d2c7
 801d318:	0801d2c7 	.word	0x0801d2c7
 801d31c:	0801d2c7 	.word	0x0801d2c7
 801d320:	0801d2c7 	.word	0x0801d2c7
 801d324:	0801d2c7 	.word	0x0801d2c7
 801d328:	0801d2c7 	.word	0x0801d2c7
 801d32c:	0801d2c7 	.word	0x0801d2c7
 801d330:	0801d2c7 	.word	0x0801d2c7
 801d334:	0801d2c7 	.word	0x0801d2c7
 801d338:	0801d2c7 	.word	0x0801d2c7
 801d33c:	0801d2c7 	.word	0x0801d2c7
 801d340:	0801d2c7 	.word	0x0801d2c7
 801d344:	0801d2c7 	.word	0x0801d2c7
 801d348:	0801d2c7 	.word	0x0801d2c7
 801d34c:	0801d2c7 	.word	0x0801d2c7
 801d350:	0801d2c7 	.word	0x0801d2c7
 801d354:	0801d2c7 	.word	0x0801d2c7
 801d358:	0801d2c7 	.word	0x0801d2c7
 801d35c:	0801d2c7 	.word	0x0801d2c7
 801d360:	0801d2c7 	.word	0x0801d2c7
 801d364:	0801d2c7 	.word	0x0801d2c7
 801d368:	0801d48f 	.word	0x0801d48f
 801d36c:	0801d4e9 	.word	0x0801d4e9
 801d370:	0801d55f 	.word	0x0801d55f
 801d374:	0801d5f9 	.word	0x0801d5f9
 801d378:	0801d2c7 	.word	0x0801d2c7
 801d37c:	0801d645 	.word	0x0801d645
 801d380:	0801d725 	.word	0x0801d725
 801d384:	0801d827 	.word	0x0801d827
 801d388:	0801d835 	.word	0x0801d835
 801d38c:	0801d2c7 	.word	0x0801d2c7
 801d390:	0801d2c7 	.word	0x0801d2c7
 801d394:	0801d2c7 	.word	0x0801d2c7
 801d398:	0801d865 	.word	0x0801d865
 801d39c:	0801d2c7 	.word	0x0801d2c7
 801d3a0:	0801d2c7 	.word	0x0801d2c7
 801d3a4:	0801d87d 	.word	0x0801d87d
 801d3a8:	0801d2c7 	.word	0x0801d2c7
 801d3ac:	0801d8cb 	.word	0x0801d8cb
 801d3b0:	0801d9e1 	.word	0x0801d9e1
 801d3b4:	0801d9f3 	.word	0x0801d9f3
 801d3b8:	0801da4b 	.word	0x0801da4b
 801d3bc:	0801da5b 	.word	0x0801da5b
 801d3c0:	0801dad1 	.word	0x0801dad1
 801d3c4:	0801d557 	.word	0x0801d557
 801d3c8:	0801db05 	.word	0x0801db05
 801d3cc:	0801dbc3 	.word	0x0801dbc3
 801d3d0:	0801d2c7 	.word	0x0801d2c7
 801d3d4:	0801d2c7 	.word	0x0801d2c7
 801d3d8:	0801d2c7 	.word	0x0801d2c7
 801d3dc:	0801d2c7 	.word	0x0801d2c7
 801d3e0:	0801d2c7 	.word	0x0801d2c7
 801d3e4:	0801d2c7 	.word	0x0801d2c7
 801d3e8:	0801d451 	.word	0x0801d451
 801d3ec:	0801d4bd 	.word	0x0801d4bd
 801d3f0:	0801d517 	.word	0x0801d517
 801d3f4:	0801d5d1 	.word	0x0801d5d1
 801d3f8:	0801d5d1 	.word	0x0801d5d1
 801d3fc:	0801d2c7 	.word	0x0801d2c7
 801d400:	0801d68d 	.word	0x0801d68d
 801d404:	0801d4bd 	.word	0x0801d4bd
 801d408:	0801d2c7 	.word	0x0801d2c7
 801d40c:	0801d857 	.word	0x0801d857
 801d410:	0801d827 	.word	0x0801d827
 801d414:	0801d835 	.word	0x0801d835
 801d418:	0801d85f 	.word	0x0801d85f
 801d41c:	0801d869 	.word	0x0801d869
 801d420:	0801d2c7 	.word	0x0801d2c7
 801d424:	0801d87d 	.word	0x0801d87d
 801d428:	0801d2c7 	.word	0x0801d2c7
 801d42c:	0801d547 	.word	0x0801d547
 801d430:	0801d8e1 	.word	0x0801d8e1
 801d434:	0801d9e5 	.word	0x0801d9e5
 801d438:	0801da2d 	.word	0x0801da2d
 801d43c:	0801d2c7 	.word	0x0801d2c7
 801d440:	0801dac1 	.word	0x0801dac1
 801d444:	0801d54f 	.word	0x0801d54f
 801d448:	0801dae9 	.word	0x0801dae9
 801d44c:	0801db55 	.word	0x0801db55
 801d450:	69ab      	ldr	r3, [r5, #24]
 801d452:	4aa7      	ldr	r2, [pc, #668]	; (801d6f0 <__strftime+0x488>)
 801d454:	3318      	adds	r3, #24
 801d456:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801d45a:	4630      	mov	r0, r6
 801d45c:	f7e2 ff12 	bl	8000284 <strlen>
 801d460:	3e01      	subs	r6, #1
 801d462:	4420      	add	r0, r4
 801d464:	f108 33ff 	add.w	r3, r8, #4294967295
 801d468:	42a0      	cmp	r0, r4
 801d46a:	d107      	bne.n	801d47c <__strftime+0x214>
 801d46c:	f89b 3000 	ldrb.w	r3, [fp]
 801d470:	2b00      	cmp	r3, #0
 801d472:	f000 83d7 	beq.w	801dc24 <__strftime+0x9bc>
 801d476:	f10b 0201 	add.w	r2, fp, #1
 801d47a:	e6fe      	b.n	801d27a <__strftime+0x12>
 801d47c:	42a3      	cmp	r3, r4
 801d47e:	f67f af22 	bls.w	801d2c6 <__strftime+0x5e>
 801d482:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d486:	f809 2004 	strb.w	r2, [r9, r4]
 801d48a:	3401      	adds	r4, #1
 801d48c:	e7ec      	b.n	801d468 <__strftime+0x200>
 801d48e:	69aa      	ldr	r2, [r5, #24]
 801d490:	4b97      	ldr	r3, [pc, #604]	; (801d6f0 <__strftime+0x488>)
 801d492:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d496:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801d498:	4630      	mov	r0, r6
 801d49a:	f7e2 fef3 	bl	8000284 <strlen>
 801d49e:	3e01      	subs	r6, #1
 801d4a0:	4420      	add	r0, r4
 801d4a2:	f108 33ff 	add.w	r3, r8, #4294967295
 801d4a6:	42a0      	cmp	r0, r4
 801d4a8:	d0e0      	beq.n	801d46c <__strftime+0x204>
 801d4aa:	42a3      	cmp	r3, r4
 801d4ac:	f67f af0b 	bls.w	801d2c6 <__strftime+0x5e>
 801d4b0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d4b4:	f809 2004 	strb.w	r2, [r9, r4]
 801d4b8:	3401      	adds	r4, #1
 801d4ba:	e7f4      	b.n	801d4a6 <__strftime+0x23e>
 801d4bc:	4b8c      	ldr	r3, [pc, #560]	; (801d6f0 <__strftime+0x488>)
 801d4be:	692a      	ldr	r2, [r5, #16]
 801d4c0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d4c4:	4630      	mov	r0, r6
 801d4c6:	f7e2 fedd 	bl	8000284 <strlen>
 801d4ca:	3e01      	subs	r6, #1
 801d4cc:	4420      	add	r0, r4
 801d4ce:	f108 33ff 	add.w	r3, r8, #4294967295
 801d4d2:	42a0      	cmp	r0, r4
 801d4d4:	d0ca      	beq.n	801d46c <__strftime+0x204>
 801d4d6:	42a3      	cmp	r3, r4
 801d4d8:	f67f aef5 	bls.w	801d2c6 <__strftime+0x5e>
 801d4dc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d4e0:	f809 2004 	strb.w	r2, [r9, r4]
 801d4e4:	3401      	adds	r4, #1
 801d4e6:	e7f4      	b.n	801d4d2 <__strftime+0x26a>
 801d4e8:	692b      	ldr	r3, [r5, #16]
 801d4ea:	4a81      	ldr	r2, [pc, #516]	; (801d6f0 <__strftime+0x488>)
 801d4ec:	330c      	adds	r3, #12
 801d4ee:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801d4f2:	4630      	mov	r0, r6
 801d4f4:	f7e2 fec6 	bl	8000284 <strlen>
 801d4f8:	3e01      	subs	r6, #1
 801d4fa:	4420      	add	r0, r4
 801d4fc:	f108 33ff 	add.w	r3, r8, #4294967295
 801d500:	42a0      	cmp	r0, r4
 801d502:	d0b3      	beq.n	801d46c <__strftime+0x204>
 801d504:	42a3      	cmp	r3, r4
 801d506:	f67f aede 	bls.w	801d2c6 <__strftime+0x5e>
 801d50a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d50e:	f809 2004 	strb.w	r2, [r9, r4]
 801d512:	3401      	adds	r4, #1
 801d514:	e7f4      	b.n	801d500 <__strftime+0x298>
 801d516:	4b76      	ldr	r3, [pc, #472]	; (801d6f0 <__strftime+0x488>)
 801d518:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801d51c:	4630      	mov	r0, r6
 801d51e:	f7e2 feb1 	bl	8000284 <strlen>
 801d522:	7833      	ldrb	r3, [r6, #0]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d0a1      	beq.n	801d46c <__strftime+0x204>
 801d528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d52a:	9300      	str	r3, [sp, #0]
 801d52c:	4632      	mov	r2, r6
 801d52e:	462b      	mov	r3, r5
 801d530:	eba8 0104 	sub.w	r1, r8, r4
 801d534:	eb09 0004 	add.w	r0, r9, r4
 801d538:	f7ff fe96 	bl	801d268 <__strftime>
 801d53c:	2800      	cmp	r0, #0
 801d53e:	f77f aec2 	ble.w	801d2c6 <__strftime+0x5e>
 801d542:	4404      	add	r4, r0
 801d544:	e792      	b.n	801d46c <__strftime+0x204>
 801d546:	4b6a      	ldr	r3, [pc, #424]	; (801d6f0 <__strftime+0x488>)
 801d548:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801d54c:	e7e6      	b.n	801d51c <__strftime+0x2b4>
 801d54e:	4b68      	ldr	r3, [pc, #416]	; (801d6f0 <__strftime+0x488>)
 801d550:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801d554:	e7e2      	b.n	801d51c <__strftime+0x2b4>
 801d556:	4b66      	ldr	r3, [pc, #408]	; (801d6f0 <__strftime+0x488>)
 801d558:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801d55c:	e7de      	b.n	801d51c <__strftime+0x2b4>
 801d55e:	4965      	ldr	r1, [pc, #404]	; (801d6f4 <__strftime+0x48c>)
 801d560:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801d564:	458a      	cmp	sl, r1
 801d566:	bfac      	ite	ge
 801d568:	2100      	movge	r1, #0
 801d56a:	2101      	movlt	r1, #1
 801d56c:	f1ba 0f00 	cmp.w	sl, #0
 801d570:	db0e      	blt.n	801d590 <__strftime+0x328>
 801d572:	2064      	movs	r0, #100	; 0x64
 801d574:	fb9a f0f0 	sdiv	r0, sl, r0
 801d578:	3013      	adds	r0, #19
 801d57a:	b19f      	cbz	r7, 801d5a4 <__strftime+0x33c>
 801d57c:	2863      	cmp	r0, #99	; 0x63
 801d57e:	dd25      	ble.n	801d5cc <__strftime+0x364>
 801d580:	4a5d      	ldr	r2, [pc, #372]	; (801d6f8 <__strftime+0x490>)
 801d582:	4b5e      	ldr	r3, [pc, #376]	; (801d6fc <__strftime+0x494>)
 801d584:	2f2b      	cmp	r7, #43	; 0x2b
 801d586:	bf14      	ite	ne
 801d588:	4617      	movne	r7, r2
 801d58a:	461f      	moveq	r7, r3
 801d58c:	4a5c      	ldr	r2, [pc, #368]	; (801d700 <__strftime+0x498>)
 801d58e:	e00b      	b.n	801d5a8 <__strftime+0x340>
 801d590:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801d594:	9105      	str	r1, [sp, #20]
 801d596:	f000 ffe4 	bl	801e562 <abs>
 801d59a:	2364      	movs	r3, #100	; 0x64
 801d59c:	9905      	ldr	r1, [sp, #20]
 801d59e:	fb90 f0f3 	sdiv	r0, r0, r3
 801d5a2:	e7ea      	b.n	801d57a <__strftime+0x312>
 801d5a4:	4f54      	ldr	r7, [pc, #336]	; (801d6f8 <__strftime+0x490>)
 801d5a6:	4a57      	ldr	r2, [pc, #348]	; (801d704 <__strftime+0x49c>)
 801d5a8:	4b57      	ldr	r3, [pc, #348]	; (801d708 <__strftime+0x4a0>)
 801d5aa:	9001      	str	r0, [sp, #4]
 801d5ac:	2e02      	cmp	r6, #2
 801d5ae:	bf2c      	ite	cs
 801d5b0:	ebc1 0606 	rsbcs	r6, r1, r6
 801d5b4:	f1c1 0602 	rsbcc	r6, r1, #2
 801d5b8:	494e      	ldr	r1, [pc, #312]	; (801d6f4 <__strftime+0x48c>)
 801d5ba:	9600      	str	r6, [sp, #0]
 801d5bc:	458a      	cmp	sl, r1
 801d5be:	bfa8      	it	ge
 801d5c0:	463b      	movge	r3, r7
 801d5c2:	eba8 0104 	sub.w	r1, r8, r4
 801d5c6:	eb09 0004 	add.w	r0, r9, r4
 801d5ca:	e02a      	b.n	801d622 <__strftime+0x3ba>
 801d5cc:	4f4a      	ldr	r7, [pc, #296]	; (801d6f8 <__strftime+0x490>)
 801d5ce:	e7dd      	b.n	801d58c <__strftime+0x324>
 801d5d0:	494e      	ldr	r1, [pc, #312]	; (801d70c <__strftime+0x4a4>)
 801d5d2:	4a4f      	ldr	r2, [pc, #316]	; (801d710 <__strftime+0x4a8>)
 801d5d4:	68eb      	ldr	r3, [r5, #12]
 801d5d6:	2864      	cmp	r0, #100	; 0x64
 801d5d8:	bf08      	it	eq
 801d5da:	460a      	moveq	r2, r1
 801d5dc:	eba8 0104 	sub.w	r1, r8, r4
 801d5e0:	eb09 0004 	add.w	r0, r9, r4
 801d5e4:	f7ff fb3e 	bl	801cc64 <sniprintf>
 801d5e8:	2800      	cmp	r0, #0
 801d5ea:	f6ff ae6c 	blt.w	801d2c6 <__strftime+0x5e>
 801d5ee:	4404      	add	r4, r0
 801d5f0:	45a0      	cmp	r8, r4
 801d5f2:	f63f af3b 	bhi.w	801d46c <__strftime+0x204>
 801d5f6:	e666      	b.n	801d2c6 <__strftime+0x5e>
 801d5f8:	6968      	ldr	r0, [r5, #20]
 801d5fa:	692b      	ldr	r3, [r5, #16]
 801d5fc:	68ef      	ldr	r7, [r5, #12]
 801d5fe:	2800      	cmp	r0, #0
 801d600:	eb09 0604 	add.w	r6, r9, r4
 801d604:	eba8 0104 	sub.w	r1, r8, r4
 801d608:	f103 0301 	add.w	r3, r3, #1
 801d60c:	db0c      	blt.n	801d628 <__strftime+0x3c0>
 801d60e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801d612:	fb90 f2fc 	sdiv	r2, r0, ip
 801d616:	fb0c 0212 	mls	r2, ip, r2, r0
 801d61a:	e9cd 7200 	strd	r7, r2, [sp]
 801d61e:	4a3d      	ldr	r2, [pc, #244]	; (801d714 <__strftime+0x4ac>)
 801d620:	4630      	mov	r0, r6
 801d622:	f7ff fb1f 	bl	801cc64 <sniprintf>
 801d626:	e7df      	b.n	801d5e8 <__strftime+0x380>
 801d628:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801d62c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d630:	f000 ff97 	bl	801e562 <abs>
 801d634:	2264      	movs	r2, #100	; 0x64
 801d636:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801d63a:	fb90 fcf2 	sdiv	ip, r0, r2
 801d63e:	fb0c 0212 	mls	r2, ip, r2, r0
 801d642:	e7ea      	b.n	801d61a <__strftime+0x3b2>
 801d644:	2325      	movs	r3, #37	; 0x25
 801d646:	f88d 3020 	strb.w	r3, [sp, #32]
 801d64a:	b187      	cbz	r7, 801d66e <__strftime+0x406>
 801d64c:	2e06      	cmp	r6, #6
 801d64e:	bf38      	it	cc
 801d650:	2606      	movcc	r6, #6
 801d652:	1fb3      	subs	r3, r6, #6
 801d654:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801d658:	d10c      	bne.n	801d674 <__strftime+0x40c>
 801d65a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801d65e:	492e      	ldr	r1, [pc, #184]	; (801d718 <__strftime+0x4b0>)
 801d660:	f7ff fba8 	bl	801cdb4 <strcpy>
 801d664:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d666:	9300      	str	r3, [sp, #0]
 801d668:	aa08      	add	r2, sp, #32
 801d66a:	462b      	mov	r3, r5
 801d66c:	e760      	b.n	801d530 <__strftime+0x2c8>
 801d66e:	272b      	movs	r7, #43	; 0x2b
 801d670:	260a      	movs	r6, #10
 801d672:	e7ee      	b.n	801d652 <__strftime+0x3ea>
 801d674:	4a29      	ldr	r2, [pc, #164]	; (801d71c <__strftime+0x4b4>)
 801d676:	211e      	movs	r1, #30
 801d678:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801d67c:	f7ff faf2 	bl	801cc64 <sniprintf>
 801d680:	2800      	cmp	r0, #0
 801d682:	ddea      	ble.n	801d65a <__strftime+0x3f2>
 801d684:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801d688:	4418      	add	r0, r3
 801d68a:	e7e8      	b.n	801d65e <__strftime+0x3f6>
 801d68c:	4628      	mov	r0, r5
 801d68e:	f7ff fd89 	bl	801d1a4 <iso_year_adjust>
 801d692:	4606      	mov	r6, r0
 801d694:	6968      	ldr	r0, [r5, #20]
 801d696:	2800      	cmp	r0, #0
 801d698:	db11      	blt.n	801d6be <__strftime+0x456>
 801d69a:	2264      	movs	r2, #100	; 0x64
 801d69c:	fb90 f3f2 	sdiv	r3, r0, r2
 801d6a0:	fb02 0313 	mls	r3, r2, r3, r0
 801d6a4:	441e      	add	r6, r3
 801d6a6:	2364      	movs	r3, #100	; 0x64
 801d6a8:	fb96 f0f3 	sdiv	r0, r6, r3
 801d6ac:	fb03 6610 	mls	r6, r3, r0, r6
 801d6b0:	441e      	add	r6, r3
 801d6b2:	fbb6 f2f3 	udiv	r2, r6, r3
 801d6b6:	fb03 6312 	mls	r3, r3, r2, r6
 801d6ba:	4a14      	ldr	r2, [pc, #80]	; (801d70c <__strftime+0x4a4>)
 801d6bc:	e78e      	b.n	801d5dc <__strftime+0x374>
 801d6be:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801d6c2:	f000 ff4e 	bl	801e562 <abs>
 801d6c6:	2364      	movs	r3, #100	; 0x64
 801d6c8:	2e00      	cmp	r6, #0
 801d6ca:	fb90 f2f3 	sdiv	r2, r0, r3
 801d6ce:	fb02 0313 	mls	r3, r2, r3, r0
 801d6d2:	da05      	bge.n	801d6e0 <__strftime+0x478>
 801d6d4:	6969      	ldr	r1, [r5, #20]
 801d6d6:	4a12      	ldr	r2, [pc, #72]	; (801d720 <__strftime+0x4b8>)
 801d6d8:	4291      	cmp	r1, r2
 801d6da:	bfb8      	it	lt
 801d6dc:	2601      	movlt	r6, #1
 801d6de:	e7e1      	b.n	801d6a4 <__strftime+0x43c>
 801d6e0:	d0e0      	beq.n	801d6a4 <__strftime+0x43c>
 801d6e2:	6969      	ldr	r1, [r5, #20]
 801d6e4:	4a03      	ldr	r2, [pc, #12]	; (801d6f4 <__strftime+0x48c>)
 801d6e6:	4291      	cmp	r1, r2
 801d6e8:	bfb8      	it	lt
 801d6ea:	f04f 36ff 	movlt.w	r6, #4294967295
 801d6ee:	e7d9      	b.n	801d6a4 <__strftime+0x43c>
 801d6f0:	08032524 	.word	0x08032524
 801d6f4:	fffff894 	.word	0xfffff894
 801d6f8:	08030bea 	.word	0x08030bea
 801d6fc:	080323ba 	.word	0x080323ba
 801d700:	080323b2 	.word	0x080323b2
 801d704:	080323ab 	.word	0x080323ab
 801d708:	08032665 	.word	0x08032665
 801d70c:	080323ca 	.word	0x080323ca
 801d710:	080323bc 	.word	0x080323bc
 801d714:	080323c0 	.word	0x080323c0
 801d718:	080323cf 	.word	0x080323cf
 801d71c:	0802f091 	.word	0x0802f091
 801d720:	fffff895 	.word	0xfffff895
 801d724:	4bb6      	ldr	r3, [pc, #728]	; (801da00 <__strftime+0x798>)
 801d726:	6969      	ldr	r1, [r5, #20]
 801d728:	4299      	cmp	r1, r3
 801d72a:	bfac      	ite	ge
 801d72c:	2300      	movge	r3, #0
 801d72e:	2301      	movlt	r3, #1
 801d730:	4628      	mov	r0, r5
 801d732:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801d736:	f7ff fd35 	bl	801d1a4 <iso_year_adjust>
 801d73a:	9906      	ldr	r1, [sp, #24]
 801d73c:	2900      	cmp	r1, #0
 801d73e:	4682      	mov	sl, r0
 801d740:	db27      	blt.n	801d792 <__strftime+0x52a>
 801d742:	2264      	movs	r2, #100	; 0x64
 801d744:	fb91 f2f2 	sdiv	r2, r1, r2
 801d748:	3213      	adds	r2, #19
 801d74a:	6968      	ldr	r0, [r5, #20]
 801d74c:	2800      	cmp	r0, #0
 801d74e:	db2b      	blt.n	801d7a8 <__strftime+0x540>
 801d750:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801d754:	fb90 fefc 	sdiv	lr, r0, ip
 801d758:	fb0c 001e 	mls	r0, ip, lr, r0
 801d75c:	f1ba 0f00 	cmp.w	sl, #0
 801d760:	da31      	bge.n	801d7c6 <__strftime+0x55e>
 801d762:	6969      	ldr	r1, [r5, #20]
 801d764:	4ba7      	ldr	r3, [pc, #668]	; (801da04 <__strftime+0x79c>)
 801d766:	4299      	cmp	r1, r3
 801d768:	db38      	blt.n	801d7dc <__strftime+0x574>
 801d76a:	eb0a 0300 	add.w	r3, sl, r0
 801d76e:	1c59      	adds	r1, r3, #1
 801d770:	d139      	bne.n	801d7e6 <__strftime+0x57e>
 801d772:	3a01      	subs	r2, #1
 801d774:	2363      	movs	r3, #99	; 0x63
 801d776:	2064      	movs	r0, #100	; 0x64
 801d778:	fb00 3202 	mla	r2, r0, r2, r3
 801d77c:	9b05      	ldr	r3, [sp, #20]
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d036      	beq.n	801d7f0 <__strftime+0x588>
 801d782:	232d      	movs	r3, #45	; 0x2d
 801d784:	f88d 3020 	strb.w	r3, [sp, #32]
 801d788:	b106      	cbz	r6, 801d78c <__strftime+0x524>
 801d78a:	3e01      	subs	r6, #1
 801d78c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801d790:	e038      	b.n	801d804 <__strftime+0x59c>
 801d792:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801d796:	9106      	str	r1, [sp, #24]
 801d798:	f000 fee3 	bl	801e562 <abs>
 801d79c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801d7a0:	9906      	ldr	r1, [sp, #24]
 801d7a2:	fb90 f2fc 	sdiv	r2, r0, ip
 801d7a6:	e7d0      	b.n	801d74a <__strftime+0x4e2>
 801d7a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801d7ac:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801d7b0:	f000 fed7 	bl	801e562 <abs>
 801d7b4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801d7b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d7bc:	fb90 fefc 	sdiv	lr, r0, ip
 801d7c0:	fb0e 001c 	mls	r0, lr, ip, r0
 801d7c4:	e7ca      	b.n	801d75c <__strftime+0x4f4>
 801d7c6:	d0d0      	beq.n	801d76a <__strftime+0x502>
 801d7c8:	4b8d      	ldr	r3, [pc, #564]	; (801da00 <__strftime+0x798>)
 801d7ca:	4299      	cmp	r1, r3
 801d7cc:	bfb4      	ite	lt
 801d7ce:	2301      	movlt	r3, #1
 801d7d0:	2300      	movge	r3, #0
 801d7d2:	9305      	str	r3, [sp, #20]
 801d7d4:	bfb8      	it	lt
 801d7d6:	f04f 3aff 	movlt.w	sl, #4294967295
 801d7da:	e7c6      	b.n	801d76a <__strftime+0x502>
 801d7dc:	f04f 0a01 	mov.w	sl, #1
 801d7e0:	f8cd a014 	str.w	sl, [sp, #20]
 801d7e4:	e7c1      	b.n	801d76a <__strftime+0x502>
 801d7e6:	2b64      	cmp	r3, #100	; 0x64
 801d7e8:	bf04      	itt	eq
 801d7ea:	3201      	addeq	r2, #1
 801d7ec:	2300      	moveq	r3, #0
 801d7ee:	e7c2      	b.n	801d776 <__strftime+0x50e>
 801d7f0:	2f2b      	cmp	r7, #43	; 0x2b
 801d7f2:	d106      	bne.n	801d802 <__strftime+0x59a>
 801d7f4:	f242 730f 	movw	r3, #9999	; 0x270f
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d902      	bls.n	801d802 <__strftime+0x59a>
 801d7fc:	f88d 7020 	strb.w	r7, [sp, #32]
 801d800:	e7c2      	b.n	801d788 <__strftime+0x520>
 801d802:	ab08      	add	r3, sp, #32
 801d804:	2125      	movs	r1, #37	; 0x25
 801d806:	7019      	strb	r1, [r3, #0]
 801d808:	b94f      	cbnz	r7, 801d81e <__strftime+0x5b6>
 801d80a:	1c58      	adds	r0, r3, #1
 801d80c:	497e      	ldr	r1, [pc, #504]	; (801da08 <__strftime+0x7a0>)
 801d80e:	9205      	str	r2, [sp, #20]
 801d810:	f7ff fad0 	bl	801cdb4 <strcpy>
 801d814:	9a05      	ldr	r2, [sp, #20]
 801d816:	9200      	str	r2, [sp, #0]
 801d818:	4633      	mov	r3, r6
 801d81a:	aa08      	add	r2, sp, #32
 801d81c:	e059      	b.n	801d8d2 <__strftime+0x66a>
 801d81e:	2130      	movs	r1, #48	; 0x30
 801d820:	1c98      	adds	r0, r3, #2
 801d822:	7059      	strb	r1, [r3, #1]
 801d824:	e7f2      	b.n	801d80c <__strftime+0x5a4>
 801d826:	4979      	ldr	r1, [pc, #484]	; (801da0c <__strftime+0x7a4>)
 801d828:	4a79      	ldr	r2, [pc, #484]	; (801da10 <__strftime+0x7a8>)
 801d82a:	68ab      	ldr	r3, [r5, #8]
 801d82c:	286b      	cmp	r0, #107	; 0x6b
 801d82e:	bf08      	it	eq
 801d830:	460a      	moveq	r2, r1
 801d832:	e6d3      	b.n	801d5dc <__strftime+0x374>
 801d834:	68ab      	ldr	r3, [r5, #8]
 801d836:	b163      	cbz	r3, 801d852 <__strftime+0x5ea>
 801d838:	2b0c      	cmp	r3, #12
 801d83a:	d004      	beq.n	801d846 <__strftime+0x5de>
 801d83c:	210c      	movs	r1, #12
 801d83e:	fb93 f2f1 	sdiv	r2, r3, r1
 801d842:	fb01 3312 	mls	r3, r1, r2, r3
 801d846:	4972      	ldr	r1, [pc, #456]	; (801da10 <__strftime+0x7a8>)
 801d848:	4a70      	ldr	r2, [pc, #448]	; (801da0c <__strftime+0x7a4>)
 801d84a:	2849      	cmp	r0, #73	; 0x49
 801d84c:	bf08      	it	eq
 801d84e:	460a      	moveq	r2, r1
 801d850:	e6c4      	b.n	801d5dc <__strftime+0x374>
 801d852:	230c      	movs	r3, #12
 801d854:	e7f7      	b.n	801d846 <__strftime+0x5de>
 801d856:	69eb      	ldr	r3, [r5, #28]
 801d858:	4a6e      	ldr	r2, [pc, #440]	; (801da14 <__strftime+0x7ac>)
 801d85a:	3301      	adds	r3, #1
 801d85c:	e6be      	b.n	801d5dc <__strftime+0x374>
 801d85e:	692b      	ldr	r3, [r5, #16]
 801d860:	3301      	adds	r3, #1
 801d862:	e72a      	b.n	801d6ba <__strftime+0x452>
 801d864:	686b      	ldr	r3, [r5, #4]
 801d866:	e728      	b.n	801d6ba <__strftime+0x452>
 801d868:	f108 33ff 	add.w	r3, r8, #4294967295
 801d86c:	42a3      	cmp	r3, r4
 801d86e:	f67f ad2a 	bls.w	801d2c6 <__strftime+0x5e>
 801d872:	230a      	movs	r3, #10
 801d874:	f809 3004 	strb.w	r3, [r9, r4]
 801d878:	3401      	adds	r4, #1
 801d87a:	e5f7      	b.n	801d46c <__strftime+0x204>
 801d87c:	68ab      	ldr	r3, [r5, #8]
 801d87e:	2b0b      	cmp	r3, #11
 801d880:	bfcc      	ite	gt
 801d882:	22a4      	movgt	r2, #164	; 0xa4
 801d884:	22a0      	movle	r2, #160	; 0xa0
 801d886:	4b64      	ldr	r3, [pc, #400]	; (801da18 <__strftime+0x7b0>)
 801d888:	4413      	add	r3, r2
 801d88a:	685e      	ldr	r6, [r3, #4]
 801d88c:	4630      	mov	r0, r6
 801d88e:	f7e2 fcf9 	bl	8000284 <strlen>
 801d892:	1e72      	subs	r2, r6, #1
 801d894:	4420      	add	r0, r4
 801d896:	f108 36ff 	add.w	r6, r8, #4294967295
 801d89a:	42a0      	cmp	r0, r4
 801d89c:	f43f ade6 	beq.w	801d46c <__strftime+0x204>
 801d8a0:	42a6      	cmp	r6, r4
 801d8a2:	f67f ad10 	bls.w	801d2c6 <__strftime+0x5e>
 801d8a6:	f89b 1000 	ldrb.w	r1, [fp]
 801d8aa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801d8ae:	2950      	cmp	r1, #80	; 0x50
 801d8b0:	d107      	bne.n	801d8c2 <__strftime+0x65a>
 801d8b2:	495a      	ldr	r1, [pc, #360]	; (801da1c <__strftime+0x7b4>)
 801d8b4:	5cc9      	ldrb	r1, [r1, r3]
 801d8b6:	f001 0103 	and.w	r1, r1, #3
 801d8ba:	2901      	cmp	r1, #1
 801d8bc:	bf08      	it	eq
 801d8be:	3320      	addeq	r3, #32
 801d8c0:	b2db      	uxtb	r3, r3
 801d8c2:	f809 3004 	strb.w	r3, [r9, r4]
 801d8c6:	3401      	adds	r4, #1
 801d8c8:	e7e7      	b.n	801d89a <__strftime+0x632>
 801d8ca:	686b      	ldr	r3, [r5, #4]
 801d8cc:	9300      	str	r3, [sp, #0]
 801d8ce:	4a54      	ldr	r2, [pc, #336]	; (801da20 <__strftime+0x7b8>)
 801d8d0:	68ab      	ldr	r3, [r5, #8]
 801d8d2:	eba8 0104 	sub.w	r1, r8, r4
 801d8d6:	eb09 0004 	add.w	r0, r9, r4
 801d8da:	f7ff f9c3 	bl	801cc64 <sniprintf>
 801d8de:	e683      	b.n	801d5e8 <__strftime+0x380>
 801d8e0:	6a2b      	ldr	r3, [r5, #32]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	db79      	blt.n	801d9da <__strftime+0x772>
 801d8e6:	f000 fb99 	bl	801e01c <__tz_lock>
 801d8ea:	9b04      	ldr	r3, [sp, #16]
 801d8ec:	b90b      	cbnz	r3, 801d8f2 <__strftime+0x68a>
 801d8ee:	f000 fba1 	bl	801e034 <_tzset_unlocked>
 801d8f2:	f000 fecb 	bl	801e68c <__gettzinfo>
 801d8f6:	6a2b      	ldr	r3, [r5, #32]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	bfcc      	ite	gt
 801d8fc:	2350      	movgt	r3, #80	; 0x50
 801d8fe:	2328      	movle	r3, #40	; 0x28
 801d900:	58c3      	ldr	r3, [r0, r3]
 801d902:	f1c3 0a00 	rsb	sl, r3, #0
 801d906:	f000 fb8f 	bl	801e028 <__tz_unlock>
 801d90a:	2301      	movs	r3, #1
 801d90c:	9304      	str	r3, [sp, #16]
 801d90e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801d912:	4662      	mov	r2, ip
 801d914:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801d918:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d91c:	9602      	str	r6, [sp, #8]
 801d91e:	f143 36ff 	adc.w	r6, r3, #4294967295
 801d922:	9603      	str	r6, [sp, #12]
 801d924:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d928:	2e00      	cmp	r6, #0
 801d92a:	f177 0600 	sbcs.w	r6, r7, #0
 801d92e:	eba8 0104 	sub.w	r1, r8, r4
 801d932:	eb09 0004 	add.w	r0, r9, r4
 801d936:	da05      	bge.n	801d944 <__strftime+0x6dc>
 801d938:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801d93c:	f143 33ff 	adc.w	r3, r3, #4294967295
 801d940:	9602      	str	r6, [sp, #8]
 801d942:	9303      	str	r3, [sp, #12]
 801d944:	9b02      	ldr	r3, [sp, #8]
 801d946:	089e      	lsrs	r6, r3, #2
 801d948:	9b03      	ldr	r3, [sp, #12]
 801d94a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801d94e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d952:	109f      	asrs	r7, r3, #2
 801d954:	2364      	movs	r3, #100	; 0x64
 801d956:	fb92 f3f3 	sdiv	r3, r2, r3
 801d95a:	1af6      	subs	r6, r6, r3
 801d95c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801d960:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801d964:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d968:	fb92 f3f3 	sdiv	r3, r2, r3
 801d96c:	18f6      	adds	r6, r6, r3
 801d96e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801d972:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801d976:	f240 136d 	movw	r3, #365	; 0x16d
 801d97a:	fb03 fc0c 	mul.w	ip, r3, ip
 801d97e:	69eb      	ldr	r3, [r5, #28]
 801d980:	eb16 060c 	adds.w	r6, r6, ip
 801d984:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801d988:	18f6      	adds	r6, r6, r3
 801d98a:	f04f 0c18 	mov.w	ip, #24
 801d98e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801d992:	fba6 230c 	umull	r2, r3, r6, ip
 801d996:	68ae      	ldr	r6, [r5, #8]
 801d998:	fb0c 3307 	mla	r3, ip, r7, r3
 801d99c:	1992      	adds	r2, r2, r6
 801d99e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801d9a2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801d9a6:	fba2 670c 	umull	r6, r7, r2, ip
 801d9aa:	fb0c 7703 	mla	r7, ip, r3, r7
 801d9ae:	686b      	ldr	r3, [r5, #4]
 801d9b0:	18f6      	adds	r6, r6, r3
 801d9b2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801d9b6:	fba6 230c 	umull	r2, r3, r6, ip
 801d9ba:	682e      	ldr	r6, [r5, #0]
 801d9bc:	fb0c 3307 	mla	r3, ip, r7, r3
 801d9c0:	1992      	adds	r2, r2, r6
 801d9c2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801d9c6:	ebb2 020a 	subs.w	r2, r2, sl
 801d9ca:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801d9ce:	e9cd 2300 	strd	r2, r3, [sp]
 801d9d2:	4a14      	ldr	r2, [pc, #80]	; (801da24 <__strftime+0x7bc>)
 801d9d4:	f7ff f946 	bl	801cc64 <sniprintf>
 801d9d8:	e606      	b.n	801d5e8 <__strftime+0x380>
 801d9da:	f04f 0a00 	mov.w	sl, #0
 801d9de:	e796      	b.n	801d90e <__strftime+0x6a6>
 801d9e0:	682b      	ldr	r3, [r5, #0]
 801d9e2:	e66a      	b.n	801d6ba <__strftime+0x452>
 801d9e4:	f108 33ff 	add.w	r3, r8, #4294967295
 801d9e8:	42a3      	cmp	r3, r4
 801d9ea:	f67f ac6c 	bls.w	801d2c6 <__strftime+0x5e>
 801d9ee:	2309      	movs	r3, #9
 801d9f0:	e740      	b.n	801d874 <__strftime+0x60c>
 801d9f2:	682b      	ldr	r3, [r5, #0]
 801d9f4:	9301      	str	r3, [sp, #4]
 801d9f6:	686b      	ldr	r3, [r5, #4]
 801d9f8:	9300      	str	r3, [sp, #0]
 801d9fa:	4a0b      	ldr	r2, [pc, #44]	; (801da28 <__strftime+0x7c0>)
 801d9fc:	68ab      	ldr	r3, [r5, #8]
 801d9fe:	e5e0      	b.n	801d5c2 <__strftime+0x35a>
 801da00:	fffff894 	.word	0xfffff894
 801da04:	fffff895 	.word	0xfffff895
 801da08:	080323d7 	.word	0x080323d7
 801da0c:	080323bc 	.word	0x080323bc
 801da10:	080323ca 	.word	0x080323ca
 801da14:	080323db 	.word	0x080323db
 801da18:	08032524 	.word	0x08032524
 801da1c:	08031a55 	.word	0x08031a55
 801da20:	080323ea 	.word	0x080323ea
 801da24:	080323e0 	.word	0x080323e0
 801da28:	080323e5 	.word	0x080323e5
 801da2c:	f108 33ff 	add.w	r3, r8, #4294967295
 801da30:	42a3      	cmp	r3, r4
 801da32:	f67f ac48 	bls.w	801d2c6 <__strftime+0x5e>
 801da36:	69ab      	ldr	r3, [r5, #24]
 801da38:	eb09 0204 	add.w	r2, r9, r4
 801da3c:	3401      	adds	r4, #1
 801da3e:	b913      	cbnz	r3, 801da46 <__strftime+0x7de>
 801da40:	2337      	movs	r3, #55	; 0x37
 801da42:	7013      	strb	r3, [r2, #0]
 801da44:	e512      	b.n	801d46c <__strftime+0x204>
 801da46:	3330      	adds	r3, #48	; 0x30
 801da48:	e7fb      	b.n	801da42 <__strftime+0x7da>
 801da4a:	69eb      	ldr	r3, [r5, #28]
 801da4c:	69aa      	ldr	r2, [r5, #24]
 801da4e:	3307      	adds	r3, #7
 801da50:	1a9b      	subs	r3, r3, r2
 801da52:	2207      	movs	r2, #7
 801da54:	fb93 f3f2 	sdiv	r3, r3, r2
 801da58:	e62f      	b.n	801d6ba <__strftime+0x452>
 801da5a:	4628      	mov	r0, r5
 801da5c:	f7ff fba2 	bl	801d1a4 <iso_year_adjust>
 801da60:	69aa      	ldr	r2, [r5, #24]
 801da62:	b132      	cbz	r2, 801da72 <__strftime+0x80a>
 801da64:	3a01      	subs	r2, #1
 801da66:	2800      	cmp	r0, #0
 801da68:	dc28      	bgt.n	801dabc <__strftime+0x854>
 801da6a:	69eb      	ldr	r3, [r5, #28]
 801da6c:	d103      	bne.n	801da76 <__strftime+0x80e>
 801da6e:	330a      	adds	r3, #10
 801da70:	e7ee      	b.n	801da50 <__strftime+0x7e8>
 801da72:	2206      	movs	r2, #6
 801da74:	e7f7      	b.n	801da66 <__strftime+0x7fe>
 801da76:	6968      	ldr	r0, [r5, #20]
 801da78:	2800      	cmp	r0, #0
 801da7a:	eba2 0303 	sub.w	r3, r2, r3
 801da7e:	f240 726b 	movw	r2, #1899	; 0x76b
 801da82:	bfa8      	it	ge
 801da84:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801da88:	4410      	add	r0, r2
 801da8a:	0782      	lsls	r2, r0, #30
 801da8c:	d105      	bne.n	801da9a <__strftime+0x832>
 801da8e:	2264      	movs	r2, #100	; 0x64
 801da90:	fb90 f1f2 	sdiv	r1, r0, r2
 801da94:	fb02 0111 	mls	r1, r2, r1, r0
 801da98:	b971      	cbnz	r1, 801dab8 <__strftime+0x850>
 801da9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801da9e:	fb90 f2f1 	sdiv	r2, r0, r1
 801daa2:	fb01 0212 	mls	r2, r1, r2, r0
 801daa6:	fab2 f282 	clz	r2, r2
 801daaa:	0952      	lsrs	r2, r2, #5
 801daac:	1a9a      	subs	r2, r3, r2
 801daae:	2a05      	cmp	r2, #5
 801dab0:	bfb4      	ite	lt
 801dab2:	2335      	movlt	r3, #53	; 0x35
 801dab4:	2334      	movge	r3, #52	; 0x34
 801dab6:	e600      	b.n	801d6ba <__strftime+0x452>
 801dab8:	2201      	movs	r2, #1
 801daba:	e7f7      	b.n	801daac <__strftime+0x844>
 801dabc:	2301      	movs	r3, #1
 801dabe:	e5fc      	b.n	801d6ba <__strftime+0x452>
 801dac0:	f108 33ff 	add.w	r3, r8, #4294967295
 801dac4:	42a3      	cmp	r3, r4
 801dac6:	f67f abfe 	bls.w	801d2c6 <__strftime+0x5e>
 801daca:	69ab      	ldr	r3, [r5, #24]
 801dacc:	3330      	adds	r3, #48	; 0x30
 801dace:	e6d1      	b.n	801d874 <__strftime+0x60c>
 801dad0:	69ab      	ldr	r3, [r5, #24]
 801dad2:	b13b      	cbz	r3, 801dae4 <__strftime+0x87c>
 801dad4:	3b01      	subs	r3, #1
 801dad6:	69ea      	ldr	r2, [r5, #28]
 801dad8:	3207      	adds	r2, #7
 801dada:	1ad2      	subs	r2, r2, r3
 801dadc:	2307      	movs	r3, #7
 801dade:	fb92 f3f3 	sdiv	r3, r2, r3
 801dae2:	e5ea      	b.n	801d6ba <__strftime+0x452>
 801dae4:	2306      	movs	r3, #6
 801dae6:	e7f6      	b.n	801dad6 <__strftime+0x86e>
 801dae8:	6968      	ldr	r0, [r5, #20]
 801daea:	2800      	cmp	r0, #0
 801daec:	db05      	blt.n	801dafa <__strftime+0x892>
 801daee:	2264      	movs	r2, #100	; 0x64
 801daf0:	fb90 f3f2 	sdiv	r3, r0, r2
 801daf4:	fb03 0312 	mls	r3, r3, r2, r0
 801daf8:	e5df      	b.n	801d6ba <__strftime+0x452>
 801dafa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801dafe:	f000 fd30 	bl	801e562 <abs>
 801db02:	e7f4      	b.n	801daee <__strftime+0x886>
 801db04:	696b      	ldr	r3, [r5, #20]
 801db06:	4a4c      	ldr	r2, [pc, #304]	; (801dc38 <__strftime+0x9d0>)
 801db08:	4293      	cmp	r3, r2
 801db0a:	da09      	bge.n	801db20 <__strftime+0x8b8>
 801db0c:	212d      	movs	r1, #45	; 0x2d
 801db0e:	f88d 1020 	strb.w	r1, [sp, #32]
 801db12:	eba2 0a03 	sub.w	sl, r2, r3
 801db16:	b106      	cbz	r6, 801db1a <__strftime+0x8b2>
 801db18:	3e01      	subs	r6, #1
 801db1a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801db1e:	e00b      	b.n	801db38 <__strftime+0x8d0>
 801db20:	2f2b      	cmp	r7, #43	; 0x2b
 801db22:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801db26:	d106      	bne.n	801db36 <__strftime+0x8ce>
 801db28:	f242 730f 	movw	r3, #9999	; 0x270f
 801db2c:	459a      	cmp	sl, r3
 801db2e:	d902      	bls.n	801db36 <__strftime+0x8ce>
 801db30:	f88d 7020 	strb.w	r7, [sp, #32]
 801db34:	e7ef      	b.n	801db16 <__strftime+0x8ae>
 801db36:	ab08      	add	r3, sp, #32
 801db38:	2225      	movs	r2, #37	; 0x25
 801db3a:	701a      	strb	r2, [r3, #0]
 801db3c:	b937      	cbnz	r7, 801db4c <__strftime+0x8e4>
 801db3e:	1c58      	adds	r0, r3, #1
 801db40:	493e      	ldr	r1, [pc, #248]	; (801dc3c <__strftime+0x9d4>)
 801db42:	f7ff f937 	bl	801cdb4 <strcpy>
 801db46:	f8cd a000 	str.w	sl, [sp]
 801db4a:	e665      	b.n	801d818 <__strftime+0x5b0>
 801db4c:	2230      	movs	r2, #48	; 0x30
 801db4e:	1c98      	adds	r0, r3, #2
 801db50:	705a      	strb	r2, [r3, #1]
 801db52:	e7f5      	b.n	801db40 <__strftime+0x8d8>
 801db54:	6a2b      	ldr	r3, [r5, #32]
 801db56:	2b00      	cmp	r3, #0
 801db58:	f6ff ac88 	blt.w	801d46c <__strftime+0x204>
 801db5c:	f000 fa5e 	bl	801e01c <__tz_lock>
 801db60:	9b04      	ldr	r3, [sp, #16]
 801db62:	b90b      	cbnz	r3, 801db68 <__strftime+0x900>
 801db64:	f000 fa66 	bl	801e034 <_tzset_unlocked>
 801db68:	f000 fd90 	bl	801e68c <__gettzinfo>
 801db6c:	6a2b      	ldr	r3, [r5, #32]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	bfcc      	ite	gt
 801db72:	2350      	movgt	r3, #80	; 0x50
 801db74:	2328      	movle	r3, #40	; 0x28
 801db76:	eb09 0704 	add.w	r7, r9, r4
 801db7a:	58c6      	ldr	r6, [r0, r3]
 801db7c:	f000 fa54 	bl	801e028 <__tz_unlock>
 801db80:	4276      	negs	r6, r6
 801db82:	233c      	movs	r3, #60	; 0x3c
 801db84:	fb96 f0f3 	sdiv	r0, r6, r3
 801db88:	f000 fe34 	bl	801e7f4 <labs>
 801db8c:	233c      	movs	r3, #60	; 0x3c
 801db8e:	eba8 0a04 	sub.w	sl, r8, r4
 801db92:	fb90 f2f3 	sdiv	r2, r0, r3
 801db96:	fb02 0013 	mls	r0, r2, r3, r0
 801db9a:	9000      	str	r0, [sp, #0]
 801db9c:	4a28      	ldr	r2, [pc, #160]	; (801dc40 <__strftime+0x9d8>)
 801db9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801dba2:	4651      	mov	r1, sl
 801dba4:	4638      	mov	r0, r7
 801dba6:	fb96 f3f3 	sdiv	r3, r6, r3
 801dbaa:	f7ff f85b 	bl	801cc64 <sniprintf>
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	f6ff ab89 	blt.w	801d2c6 <__strftime+0x5e>
 801dbb4:	4404      	add	r4, r0
 801dbb6:	45a0      	cmp	r8, r4
 801dbb8:	f67f ab85 	bls.w	801d2c6 <__strftime+0x5e>
 801dbbc:	2301      	movs	r3, #1
 801dbbe:	9304      	str	r3, [sp, #16]
 801dbc0:	e454      	b.n	801d46c <__strftime+0x204>
 801dbc2:	6a2b      	ldr	r3, [r5, #32]
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	f6ff ac51 	blt.w	801d46c <__strftime+0x204>
 801dbca:	f000 fa27 	bl	801e01c <__tz_lock>
 801dbce:	9b04      	ldr	r3, [sp, #16]
 801dbd0:	b90b      	cbnz	r3, 801dbd6 <__strftime+0x96e>
 801dbd2:	f000 fa2f 	bl	801e034 <_tzset_unlocked>
 801dbd6:	6a2b      	ldr	r3, [r5, #32]
 801dbd8:	4a1a      	ldr	r2, [pc, #104]	; (801dc44 <__strftime+0x9dc>)
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	bfd4      	ite	le
 801dbde:	2300      	movle	r3, #0
 801dbe0:	2301      	movgt	r3, #1
 801dbe2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801dbe6:	4630      	mov	r0, r6
 801dbe8:	f7e2 fb4c 	bl	8000284 <strlen>
 801dbec:	3e01      	subs	r6, #1
 801dbee:	4420      	add	r0, r4
 801dbf0:	f108 33ff 	add.w	r3, r8, #4294967295
 801dbf4:	42a0      	cmp	r0, r4
 801dbf6:	d102      	bne.n	801dbfe <__strftime+0x996>
 801dbf8:	f000 fa16 	bl	801e028 <__tz_unlock>
 801dbfc:	e7de      	b.n	801dbbc <__strftime+0x954>
 801dbfe:	42a3      	cmp	r3, r4
 801dc00:	d905      	bls.n	801dc0e <__strftime+0x9a6>
 801dc02:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dc06:	f809 2004 	strb.w	r2, [r9, r4]
 801dc0a:	3401      	adds	r4, #1
 801dc0c:	e7f2      	b.n	801dbf4 <__strftime+0x98c>
 801dc0e:	f000 fa0b 	bl	801e028 <__tz_unlock>
 801dc12:	f7ff bb58 	b.w	801d2c6 <__strftime+0x5e>
 801dc16:	f108 33ff 	add.w	r3, r8, #4294967295
 801dc1a:	42a3      	cmp	r3, r4
 801dc1c:	f67f ab53 	bls.w	801d2c6 <__strftime+0x5e>
 801dc20:	2325      	movs	r3, #37	; 0x25
 801dc22:	e627      	b.n	801d874 <__strftime+0x60c>
 801dc24:	f1b8 0f00 	cmp.w	r8, #0
 801dc28:	d002      	beq.n	801dc30 <__strftime+0x9c8>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	f809 3004 	strb.w	r3, [r9, r4]
 801dc30:	4620      	mov	r0, r4
 801dc32:	b011      	add	sp, #68	; 0x44
 801dc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc38:	fffff894 	.word	0xfffff894
 801dc3c:	080323d7 	.word	0x080323d7
 801dc40:	080323f4 	.word	0x080323f4
 801dc44:	20000180 	.word	0x20000180

0801dc48 <strftime>:
 801dc48:	b513      	push	{r0, r1, r4, lr}
 801dc4a:	4c03      	ldr	r4, [pc, #12]	; (801dc58 <strftime+0x10>)
 801dc4c:	9400      	str	r4, [sp, #0]
 801dc4e:	f7ff fb0b 	bl	801d268 <__strftime>
 801dc52:	b002      	add	sp, #8
 801dc54:	bd10      	pop	{r4, pc}
 801dc56:	bf00      	nop
 801dc58:	200001e0 	.word	0x200001e0

0801dc5c <strncmp>:
 801dc5c:	b510      	push	{r4, lr}
 801dc5e:	b16a      	cbz	r2, 801dc7c <strncmp+0x20>
 801dc60:	3901      	subs	r1, #1
 801dc62:	1884      	adds	r4, r0, r2
 801dc64:	f810 3b01 	ldrb.w	r3, [r0], #1
 801dc68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d103      	bne.n	801dc78 <strncmp+0x1c>
 801dc70:	42a0      	cmp	r0, r4
 801dc72:	d001      	beq.n	801dc78 <strncmp+0x1c>
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d1f5      	bne.n	801dc64 <strncmp+0x8>
 801dc78:	1a98      	subs	r0, r3, r2
 801dc7a:	bd10      	pop	{r4, pc}
 801dc7c:	4610      	mov	r0, r2
 801dc7e:	e7fc      	b.n	801dc7a <strncmp+0x1e>

0801dc80 <strnlen>:
 801dc80:	b510      	push	{r4, lr}
 801dc82:	4602      	mov	r2, r0
 801dc84:	4401      	add	r1, r0
 801dc86:	428a      	cmp	r2, r1
 801dc88:	4613      	mov	r3, r2
 801dc8a:	d101      	bne.n	801dc90 <strnlen+0x10>
 801dc8c:	1a18      	subs	r0, r3, r0
 801dc8e:	bd10      	pop	{r4, pc}
 801dc90:	781c      	ldrb	r4, [r3, #0]
 801dc92:	3201      	adds	r2, #1
 801dc94:	2c00      	cmp	r4, #0
 801dc96:	d1f6      	bne.n	801dc86 <strnlen+0x6>
 801dc98:	e7f8      	b.n	801dc8c <strnlen+0xc>
	...

0801dc9c <_strtol_l.isra.0>:
 801dc9c:	2b01      	cmp	r3, #1
 801dc9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dca2:	d001      	beq.n	801dca8 <_strtol_l.isra.0+0xc>
 801dca4:	2b24      	cmp	r3, #36	; 0x24
 801dca6:	d906      	bls.n	801dcb6 <_strtol_l.isra.0+0x1a>
 801dca8:	f7fd ff0a 	bl	801bac0 <__errno>
 801dcac:	2316      	movs	r3, #22
 801dcae:	6003      	str	r3, [r0, #0]
 801dcb0:	2000      	movs	r0, #0
 801dcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcb6:	4f3a      	ldr	r7, [pc, #232]	; (801dda0 <_strtol_l.isra.0+0x104>)
 801dcb8:	468e      	mov	lr, r1
 801dcba:	4676      	mov	r6, lr
 801dcbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801dcc0:	5de5      	ldrb	r5, [r4, r7]
 801dcc2:	f015 0508 	ands.w	r5, r5, #8
 801dcc6:	d1f8      	bne.n	801dcba <_strtol_l.isra.0+0x1e>
 801dcc8:	2c2d      	cmp	r4, #45	; 0x2d
 801dcca:	d134      	bne.n	801dd36 <_strtol_l.isra.0+0x9a>
 801dccc:	f89e 4000 	ldrb.w	r4, [lr]
 801dcd0:	f04f 0801 	mov.w	r8, #1
 801dcd4:	f106 0e02 	add.w	lr, r6, #2
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d05c      	beq.n	801dd96 <_strtol_l.isra.0+0xfa>
 801dcdc:	2b10      	cmp	r3, #16
 801dcde:	d10c      	bne.n	801dcfa <_strtol_l.isra.0+0x5e>
 801dce0:	2c30      	cmp	r4, #48	; 0x30
 801dce2:	d10a      	bne.n	801dcfa <_strtol_l.isra.0+0x5e>
 801dce4:	f89e 4000 	ldrb.w	r4, [lr]
 801dce8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801dcec:	2c58      	cmp	r4, #88	; 0x58
 801dcee:	d14d      	bne.n	801dd8c <_strtol_l.isra.0+0xf0>
 801dcf0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801dcf4:	2310      	movs	r3, #16
 801dcf6:	f10e 0e02 	add.w	lr, lr, #2
 801dcfa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801dcfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dd02:	2600      	movs	r6, #0
 801dd04:	fbbc f9f3 	udiv	r9, ip, r3
 801dd08:	4635      	mov	r5, r6
 801dd0a:	fb03 ca19 	mls	sl, r3, r9, ip
 801dd0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801dd12:	2f09      	cmp	r7, #9
 801dd14:	d818      	bhi.n	801dd48 <_strtol_l.isra.0+0xac>
 801dd16:	463c      	mov	r4, r7
 801dd18:	42a3      	cmp	r3, r4
 801dd1a:	dd24      	ble.n	801dd66 <_strtol_l.isra.0+0xca>
 801dd1c:	2e00      	cmp	r6, #0
 801dd1e:	db1f      	blt.n	801dd60 <_strtol_l.isra.0+0xc4>
 801dd20:	45a9      	cmp	r9, r5
 801dd22:	d31d      	bcc.n	801dd60 <_strtol_l.isra.0+0xc4>
 801dd24:	d101      	bne.n	801dd2a <_strtol_l.isra.0+0x8e>
 801dd26:	45a2      	cmp	sl, r4
 801dd28:	db1a      	blt.n	801dd60 <_strtol_l.isra.0+0xc4>
 801dd2a:	fb05 4503 	mla	r5, r5, r3, r4
 801dd2e:	2601      	movs	r6, #1
 801dd30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801dd34:	e7eb      	b.n	801dd0e <_strtol_l.isra.0+0x72>
 801dd36:	2c2b      	cmp	r4, #43	; 0x2b
 801dd38:	bf08      	it	eq
 801dd3a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801dd3e:	46a8      	mov	r8, r5
 801dd40:	bf08      	it	eq
 801dd42:	f106 0e02 	addeq.w	lr, r6, #2
 801dd46:	e7c7      	b.n	801dcd8 <_strtol_l.isra.0+0x3c>
 801dd48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801dd4c:	2f19      	cmp	r7, #25
 801dd4e:	d801      	bhi.n	801dd54 <_strtol_l.isra.0+0xb8>
 801dd50:	3c37      	subs	r4, #55	; 0x37
 801dd52:	e7e1      	b.n	801dd18 <_strtol_l.isra.0+0x7c>
 801dd54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801dd58:	2f19      	cmp	r7, #25
 801dd5a:	d804      	bhi.n	801dd66 <_strtol_l.isra.0+0xca>
 801dd5c:	3c57      	subs	r4, #87	; 0x57
 801dd5e:	e7db      	b.n	801dd18 <_strtol_l.isra.0+0x7c>
 801dd60:	f04f 36ff 	mov.w	r6, #4294967295
 801dd64:	e7e4      	b.n	801dd30 <_strtol_l.isra.0+0x94>
 801dd66:	2e00      	cmp	r6, #0
 801dd68:	da05      	bge.n	801dd76 <_strtol_l.isra.0+0xda>
 801dd6a:	2322      	movs	r3, #34	; 0x22
 801dd6c:	6003      	str	r3, [r0, #0]
 801dd6e:	4665      	mov	r5, ip
 801dd70:	b942      	cbnz	r2, 801dd84 <_strtol_l.isra.0+0xe8>
 801dd72:	4628      	mov	r0, r5
 801dd74:	e79d      	b.n	801dcb2 <_strtol_l.isra.0+0x16>
 801dd76:	f1b8 0f00 	cmp.w	r8, #0
 801dd7a:	d000      	beq.n	801dd7e <_strtol_l.isra.0+0xe2>
 801dd7c:	426d      	negs	r5, r5
 801dd7e:	2a00      	cmp	r2, #0
 801dd80:	d0f7      	beq.n	801dd72 <_strtol_l.isra.0+0xd6>
 801dd82:	b10e      	cbz	r6, 801dd88 <_strtol_l.isra.0+0xec>
 801dd84:	f10e 31ff 	add.w	r1, lr, #4294967295
 801dd88:	6011      	str	r1, [r2, #0]
 801dd8a:	e7f2      	b.n	801dd72 <_strtol_l.isra.0+0xd6>
 801dd8c:	2430      	movs	r4, #48	; 0x30
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d1b3      	bne.n	801dcfa <_strtol_l.isra.0+0x5e>
 801dd92:	2308      	movs	r3, #8
 801dd94:	e7b1      	b.n	801dcfa <_strtol_l.isra.0+0x5e>
 801dd96:	2c30      	cmp	r4, #48	; 0x30
 801dd98:	d0a4      	beq.n	801dce4 <_strtol_l.isra.0+0x48>
 801dd9a:	230a      	movs	r3, #10
 801dd9c:	e7ad      	b.n	801dcfa <_strtol_l.isra.0+0x5e>
 801dd9e:	bf00      	nop
 801dda0:	08031a55 	.word	0x08031a55

0801dda4 <_strtol_r>:
 801dda4:	f7ff bf7a 	b.w	801dc9c <_strtol_l.isra.0>

0801dda8 <strtol>:
 801dda8:	4613      	mov	r3, r2
 801ddaa:	460a      	mov	r2, r1
 801ddac:	4601      	mov	r1, r0
 801ddae:	4802      	ldr	r0, [pc, #8]	; (801ddb8 <strtol+0x10>)
 801ddb0:	6800      	ldr	r0, [r0, #0]
 801ddb2:	f7ff bf73 	b.w	801dc9c <_strtol_l.isra.0>
 801ddb6:	bf00      	nop
 801ddb8:	2000011c 	.word	0x2000011c

0801ddbc <_strtoul_l.isra.0>:
 801ddbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddc0:	4e3b      	ldr	r6, [pc, #236]	; (801deb0 <_strtoul_l.isra.0+0xf4>)
 801ddc2:	4686      	mov	lr, r0
 801ddc4:	468c      	mov	ip, r1
 801ddc6:	4660      	mov	r0, ip
 801ddc8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ddcc:	5da5      	ldrb	r5, [r4, r6]
 801ddce:	f015 0508 	ands.w	r5, r5, #8
 801ddd2:	d1f8      	bne.n	801ddc6 <_strtoul_l.isra.0+0xa>
 801ddd4:	2c2d      	cmp	r4, #45	; 0x2d
 801ddd6:	d134      	bne.n	801de42 <_strtoul_l.isra.0+0x86>
 801ddd8:	f89c 4000 	ldrb.w	r4, [ip]
 801dddc:	f04f 0801 	mov.w	r8, #1
 801dde0:	f100 0c02 	add.w	ip, r0, #2
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	d05e      	beq.n	801dea6 <_strtoul_l.isra.0+0xea>
 801dde8:	2b10      	cmp	r3, #16
 801ddea:	d10c      	bne.n	801de06 <_strtoul_l.isra.0+0x4a>
 801ddec:	2c30      	cmp	r4, #48	; 0x30
 801ddee:	d10a      	bne.n	801de06 <_strtoul_l.isra.0+0x4a>
 801ddf0:	f89c 0000 	ldrb.w	r0, [ip]
 801ddf4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ddf8:	2858      	cmp	r0, #88	; 0x58
 801ddfa:	d14f      	bne.n	801de9c <_strtoul_l.isra.0+0xe0>
 801ddfc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801de00:	2310      	movs	r3, #16
 801de02:	f10c 0c02 	add.w	ip, ip, #2
 801de06:	f04f 37ff 	mov.w	r7, #4294967295
 801de0a:	2500      	movs	r5, #0
 801de0c:	fbb7 f7f3 	udiv	r7, r7, r3
 801de10:	fb03 f907 	mul.w	r9, r3, r7
 801de14:	ea6f 0909 	mvn.w	r9, r9
 801de18:	4628      	mov	r0, r5
 801de1a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801de1e:	2e09      	cmp	r6, #9
 801de20:	d818      	bhi.n	801de54 <_strtoul_l.isra.0+0x98>
 801de22:	4634      	mov	r4, r6
 801de24:	42a3      	cmp	r3, r4
 801de26:	dd24      	ble.n	801de72 <_strtoul_l.isra.0+0xb6>
 801de28:	2d00      	cmp	r5, #0
 801de2a:	db1f      	blt.n	801de6c <_strtoul_l.isra.0+0xb0>
 801de2c:	4287      	cmp	r7, r0
 801de2e:	d31d      	bcc.n	801de6c <_strtoul_l.isra.0+0xb0>
 801de30:	d101      	bne.n	801de36 <_strtoul_l.isra.0+0x7a>
 801de32:	45a1      	cmp	r9, r4
 801de34:	db1a      	blt.n	801de6c <_strtoul_l.isra.0+0xb0>
 801de36:	fb00 4003 	mla	r0, r0, r3, r4
 801de3a:	2501      	movs	r5, #1
 801de3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801de40:	e7eb      	b.n	801de1a <_strtoul_l.isra.0+0x5e>
 801de42:	2c2b      	cmp	r4, #43	; 0x2b
 801de44:	bf08      	it	eq
 801de46:	f89c 4000 	ldrbeq.w	r4, [ip]
 801de4a:	46a8      	mov	r8, r5
 801de4c:	bf08      	it	eq
 801de4e:	f100 0c02 	addeq.w	ip, r0, #2
 801de52:	e7c7      	b.n	801dde4 <_strtoul_l.isra.0+0x28>
 801de54:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801de58:	2e19      	cmp	r6, #25
 801de5a:	d801      	bhi.n	801de60 <_strtoul_l.isra.0+0xa4>
 801de5c:	3c37      	subs	r4, #55	; 0x37
 801de5e:	e7e1      	b.n	801de24 <_strtoul_l.isra.0+0x68>
 801de60:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801de64:	2e19      	cmp	r6, #25
 801de66:	d804      	bhi.n	801de72 <_strtoul_l.isra.0+0xb6>
 801de68:	3c57      	subs	r4, #87	; 0x57
 801de6a:	e7db      	b.n	801de24 <_strtoul_l.isra.0+0x68>
 801de6c:	f04f 35ff 	mov.w	r5, #4294967295
 801de70:	e7e4      	b.n	801de3c <_strtoul_l.isra.0+0x80>
 801de72:	2d00      	cmp	r5, #0
 801de74:	da07      	bge.n	801de86 <_strtoul_l.isra.0+0xca>
 801de76:	2322      	movs	r3, #34	; 0x22
 801de78:	f8ce 3000 	str.w	r3, [lr]
 801de7c:	f04f 30ff 	mov.w	r0, #4294967295
 801de80:	b942      	cbnz	r2, 801de94 <_strtoul_l.isra.0+0xd8>
 801de82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de86:	f1b8 0f00 	cmp.w	r8, #0
 801de8a:	d000      	beq.n	801de8e <_strtoul_l.isra.0+0xd2>
 801de8c:	4240      	negs	r0, r0
 801de8e:	2a00      	cmp	r2, #0
 801de90:	d0f7      	beq.n	801de82 <_strtoul_l.isra.0+0xc6>
 801de92:	b10d      	cbz	r5, 801de98 <_strtoul_l.isra.0+0xdc>
 801de94:	f10c 31ff 	add.w	r1, ip, #4294967295
 801de98:	6011      	str	r1, [r2, #0]
 801de9a:	e7f2      	b.n	801de82 <_strtoul_l.isra.0+0xc6>
 801de9c:	2430      	movs	r4, #48	; 0x30
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d1b1      	bne.n	801de06 <_strtoul_l.isra.0+0x4a>
 801dea2:	2308      	movs	r3, #8
 801dea4:	e7af      	b.n	801de06 <_strtoul_l.isra.0+0x4a>
 801dea6:	2c30      	cmp	r4, #48	; 0x30
 801dea8:	d0a2      	beq.n	801ddf0 <_strtoul_l.isra.0+0x34>
 801deaa:	230a      	movs	r3, #10
 801deac:	e7ab      	b.n	801de06 <_strtoul_l.isra.0+0x4a>
 801deae:	bf00      	nop
 801deb0:	08031a55 	.word	0x08031a55

0801deb4 <_strtoul_r>:
 801deb4:	f7ff bf82 	b.w	801ddbc <_strtoul_l.isra.0>

0801deb8 <strtoul>:
 801deb8:	4613      	mov	r3, r2
 801deba:	460a      	mov	r2, r1
 801debc:	4601      	mov	r1, r0
 801debe:	4802      	ldr	r0, [pc, #8]	; (801dec8 <strtoul+0x10>)
 801dec0:	6800      	ldr	r0, [r0, #0]
 801dec2:	f7ff bf7b 	b.w	801ddbc <_strtoul_l.isra.0>
 801dec6:	bf00      	nop
 801dec8:	2000011c 	.word	0x2000011c

0801decc <__tzcalc_limits>:
 801decc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ded0:	4680      	mov	r8, r0
 801ded2:	f000 fbdb 	bl	801e68c <__gettzinfo>
 801ded6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801deda:	4598      	cmp	r8, r3
 801dedc:	f340 8098 	ble.w	801e010 <__tzcalc_limits+0x144>
 801dee0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801dee4:	4443      	add	r3, r8
 801dee6:	109b      	asrs	r3, r3, #2
 801dee8:	f240 126d 	movw	r2, #365	; 0x16d
 801deec:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801def0:	fb02 3505 	mla	r5, r2, r5, r3
 801def4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801def8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801defc:	fb93 f3f2 	sdiv	r3, r3, r2
 801df00:	441d      	add	r5, r3
 801df02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801df06:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801df0a:	fb98 f7f3 	sdiv	r7, r8, r3
 801df0e:	fb03 8717 	mls	r7, r3, r7, r8
 801df12:	4442      	add	r2, r8
 801df14:	fab7 fc87 	clz	ip, r7
 801df18:	fbb2 f2f3 	udiv	r2, r2, r3
 801df1c:	f008 0303 	and.w	r3, r8, #3
 801df20:	4415      	add	r5, r2
 801df22:	2264      	movs	r2, #100	; 0x64
 801df24:	f8c0 8004 	str.w	r8, [r0, #4]
 801df28:	fb98 f6f2 	sdiv	r6, r8, r2
 801df2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801df30:	fb02 8616 	mls	r6, r2, r6, r8
 801df34:	4604      	mov	r4, r0
 801df36:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801df3a:	9300      	str	r3, [sp, #0]
 801df3c:	f04f 0e07 	mov.w	lr, #7
 801df40:	7a22      	ldrb	r2, [r4, #8]
 801df42:	6963      	ldr	r3, [r4, #20]
 801df44:	2a4a      	cmp	r2, #74	; 0x4a
 801df46:	d128      	bne.n	801df9a <__tzcalc_limits+0xce>
 801df48:	9900      	ldr	r1, [sp, #0]
 801df4a:	18ea      	adds	r2, r5, r3
 801df4c:	b901      	cbnz	r1, 801df50 <__tzcalc_limits+0x84>
 801df4e:	b906      	cbnz	r6, 801df52 <__tzcalc_limits+0x86>
 801df50:	bb0f      	cbnz	r7, 801df96 <__tzcalc_limits+0xca>
 801df52:	2b3b      	cmp	r3, #59	; 0x3b
 801df54:	bfd4      	ite	le
 801df56:	2300      	movle	r3, #0
 801df58:	2301      	movgt	r3, #1
 801df5a:	4413      	add	r3, r2
 801df5c:	1e5a      	subs	r2, r3, #1
 801df5e:	69a3      	ldr	r3, [r4, #24]
 801df60:	492c      	ldr	r1, [pc, #176]	; (801e014 <__tzcalc_limits+0x148>)
 801df62:	fb01 3202 	mla	r2, r1, r2, r3
 801df66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801df68:	4413      	add	r3, r2
 801df6a:	461a      	mov	r2, r3
 801df6c:	17db      	asrs	r3, r3, #31
 801df6e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801df72:	3428      	adds	r4, #40	; 0x28
 801df74:	45a3      	cmp	fp, r4
 801df76:	d1e3      	bne.n	801df40 <__tzcalc_limits+0x74>
 801df78:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801df7c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801df80:	4294      	cmp	r4, r2
 801df82:	eb75 0303 	sbcs.w	r3, r5, r3
 801df86:	bfb4      	ite	lt
 801df88:	2301      	movlt	r3, #1
 801df8a:	2300      	movge	r3, #0
 801df8c:	6003      	str	r3, [r0, #0]
 801df8e:	2001      	movs	r0, #1
 801df90:	b003      	add	sp, #12
 801df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df96:	2300      	movs	r3, #0
 801df98:	e7df      	b.n	801df5a <__tzcalc_limits+0x8e>
 801df9a:	2a44      	cmp	r2, #68	; 0x44
 801df9c:	d101      	bne.n	801dfa2 <__tzcalc_limits+0xd6>
 801df9e:	18ea      	adds	r2, r5, r3
 801dfa0:	e7dd      	b.n	801df5e <__tzcalc_limits+0x92>
 801dfa2:	9a00      	ldr	r2, [sp, #0]
 801dfa4:	bb72      	cbnz	r2, 801e004 <__tzcalc_limits+0x138>
 801dfa6:	2e00      	cmp	r6, #0
 801dfa8:	bf0c      	ite	eq
 801dfaa:	46e0      	moveq	r8, ip
 801dfac:	f04f 0801 	movne.w	r8, #1
 801dfb0:	4919      	ldr	r1, [pc, #100]	; (801e018 <__tzcalc_limits+0x14c>)
 801dfb2:	68e2      	ldr	r2, [r4, #12]
 801dfb4:	9201      	str	r2, [sp, #4]
 801dfb6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801dfba:	fb0a 1808 	mla	r8, sl, r8, r1
 801dfbe:	462a      	mov	r2, r5
 801dfc0:	f04f 0900 	mov.w	r9, #0
 801dfc4:	f1a8 0804 	sub.w	r8, r8, #4
 801dfc8:	9901      	ldr	r1, [sp, #4]
 801dfca:	f109 0901 	add.w	r9, r9, #1
 801dfce:	4549      	cmp	r1, r9
 801dfd0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801dfd4:	dc18      	bgt.n	801e008 <__tzcalc_limits+0x13c>
 801dfd6:	f102 0804 	add.w	r8, r2, #4
 801dfda:	fb98 f9fe 	sdiv	r9, r8, lr
 801dfde:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801dfe2:	eba8 0909 	sub.w	r9, r8, r9
 801dfe6:	ebb3 0909 	subs.w	r9, r3, r9
 801dfea:	6923      	ldr	r3, [r4, #16]
 801dfec:	f103 33ff 	add.w	r3, r3, #4294967295
 801dff0:	bf48      	it	mi
 801dff2:	f109 0907 	addmi.w	r9, r9, #7
 801dff6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801dffa:	444b      	add	r3, r9
 801dffc:	4553      	cmp	r3, sl
 801dffe:	da05      	bge.n	801e00c <__tzcalc_limits+0x140>
 801e000:	441a      	add	r2, r3
 801e002:	e7ac      	b.n	801df5e <__tzcalc_limits+0x92>
 801e004:	46e0      	mov	r8, ip
 801e006:	e7d3      	b.n	801dfb0 <__tzcalc_limits+0xe4>
 801e008:	4452      	add	r2, sl
 801e00a:	e7dd      	b.n	801dfc8 <__tzcalc_limits+0xfc>
 801e00c:	3b07      	subs	r3, #7
 801e00e:	e7f5      	b.n	801dffc <__tzcalc_limits+0x130>
 801e010:	2000      	movs	r0, #0
 801e012:	e7bd      	b.n	801df90 <__tzcalc_limits+0xc4>
 801e014:	00015180 	.word	0x00015180
 801e018:	08031c34 	.word	0x08031c34

0801e01c <__tz_lock>:
 801e01c:	4801      	ldr	r0, [pc, #4]	; (801e024 <__tz_lock+0x8>)
 801e01e:	f7fe b8ec 	b.w	801c1fa <__retarget_lock_acquire>
 801e022:	bf00      	nop
 801e024:	2001613f 	.word	0x2001613f

0801e028 <__tz_unlock>:
 801e028:	4801      	ldr	r0, [pc, #4]	; (801e030 <__tz_unlock+0x8>)
 801e02a:	f7fe b8e8 	b.w	801c1fe <__retarget_lock_release>
 801e02e:	bf00      	nop
 801e030:	2001613f 	.word	0x2001613f

0801e034 <_tzset_unlocked>:
 801e034:	4b01      	ldr	r3, [pc, #4]	; (801e03c <_tzset_unlocked+0x8>)
 801e036:	6818      	ldr	r0, [r3, #0]
 801e038:	f000 b802 	b.w	801e040 <_tzset_unlocked_r>
 801e03c:	2000011c 	.word	0x2000011c

0801e040 <_tzset_unlocked_r>:
 801e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e044:	b08d      	sub	sp, #52	; 0x34
 801e046:	4607      	mov	r7, r0
 801e048:	f000 fb20 	bl	801e68c <__gettzinfo>
 801e04c:	49ae      	ldr	r1, [pc, #696]	; (801e308 <_tzset_unlocked_r+0x2c8>)
 801e04e:	4eaf      	ldr	r6, [pc, #700]	; (801e30c <_tzset_unlocked_r+0x2cc>)
 801e050:	4605      	mov	r5, r0
 801e052:	4638      	mov	r0, r7
 801e054:	f000 fb12 	bl	801e67c <_getenv_r>
 801e058:	4604      	mov	r4, r0
 801e05a:	b970      	cbnz	r0, 801e07a <_tzset_unlocked_r+0x3a>
 801e05c:	4bac      	ldr	r3, [pc, #688]	; (801e310 <_tzset_unlocked_r+0x2d0>)
 801e05e:	4aad      	ldr	r2, [pc, #692]	; (801e314 <_tzset_unlocked_r+0x2d4>)
 801e060:	6018      	str	r0, [r3, #0]
 801e062:	4bad      	ldr	r3, [pc, #692]	; (801e318 <_tzset_unlocked_r+0x2d8>)
 801e064:	6018      	str	r0, [r3, #0]
 801e066:	4bad      	ldr	r3, [pc, #692]	; (801e31c <_tzset_unlocked_r+0x2dc>)
 801e068:	6830      	ldr	r0, [r6, #0]
 801e06a:	e9c3 2200 	strd	r2, r2, [r3]
 801e06e:	f7fe f8d1 	bl	801c214 <free>
 801e072:	6034      	str	r4, [r6, #0]
 801e074:	b00d      	add	sp, #52	; 0x34
 801e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e07a:	6831      	ldr	r1, [r6, #0]
 801e07c:	2900      	cmp	r1, #0
 801e07e:	d15f      	bne.n	801e140 <_tzset_unlocked_r+0x100>
 801e080:	6830      	ldr	r0, [r6, #0]
 801e082:	f7fe f8c7 	bl	801c214 <free>
 801e086:	4620      	mov	r0, r4
 801e088:	f7e2 f8fc 	bl	8000284 <strlen>
 801e08c:	1c41      	adds	r1, r0, #1
 801e08e:	4638      	mov	r0, r7
 801e090:	f7fe f956 	bl	801c340 <_malloc_r>
 801e094:	6030      	str	r0, [r6, #0]
 801e096:	2800      	cmp	r0, #0
 801e098:	d157      	bne.n	801e14a <_tzset_unlocked_r+0x10a>
 801e09a:	7823      	ldrb	r3, [r4, #0]
 801e09c:	4aa0      	ldr	r2, [pc, #640]	; (801e320 <_tzset_unlocked_r+0x2e0>)
 801e09e:	49a1      	ldr	r1, [pc, #644]	; (801e324 <_tzset_unlocked_r+0x2e4>)
 801e0a0:	2b3a      	cmp	r3, #58	; 0x3a
 801e0a2:	bf08      	it	eq
 801e0a4:	3401      	addeq	r4, #1
 801e0a6:	ae0a      	add	r6, sp, #40	; 0x28
 801e0a8:	4633      	mov	r3, r6
 801e0aa:	4620      	mov	r0, r4
 801e0ac:	f000 fe12 	bl	801ecd4 <siscanf>
 801e0b0:	2800      	cmp	r0, #0
 801e0b2:	dddf      	ble.n	801e074 <_tzset_unlocked_r+0x34>
 801e0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0b6:	18e7      	adds	r7, r4, r3
 801e0b8:	5ce3      	ldrb	r3, [r4, r3]
 801e0ba:	2b2d      	cmp	r3, #45	; 0x2d
 801e0bc:	d149      	bne.n	801e152 <_tzset_unlocked_r+0x112>
 801e0be:	3701      	adds	r7, #1
 801e0c0:	f04f 34ff 	mov.w	r4, #4294967295
 801e0c4:	f10d 0a20 	add.w	sl, sp, #32
 801e0c8:	f10d 0b1e 	add.w	fp, sp, #30
 801e0cc:	f04f 0800 	mov.w	r8, #0
 801e0d0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801e0d4:	4994      	ldr	r1, [pc, #592]	; (801e328 <_tzset_unlocked_r+0x2e8>)
 801e0d6:	9603      	str	r6, [sp, #12]
 801e0d8:	f8cd b000 	str.w	fp, [sp]
 801e0dc:	4633      	mov	r3, r6
 801e0de:	aa07      	add	r2, sp, #28
 801e0e0:	4638      	mov	r0, r7
 801e0e2:	f8ad 801e 	strh.w	r8, [sp, #30]
 801e0e6:	f8ad 8020 	strh.w	r8, [sp, #32]
 801e0ea:	f000 fdf3 	bl	801ecd4 <siscanf>
 801e0ee:	4540      	cmp	r0, r8
 801e0f0:	ddc0      	ble.n	801e074 <_tzset_unlocked_r+0x34>
 801e0f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e0f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e0fa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801e334 <_tzset_unlocked_r+0x2f4>
 801e0fe:	213c      	movs	r1, #60	; 0x3c
 801e100:	fb01 2203 	mla	r2, r1, r3, r2
 801e104:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e108:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e10c:	fb01 2303 	mla	r3, r1, r3, r2
 801e110:	435c      	muls	r4, r3
 801e112:	62ac      	str	r4, [r5, #40]	; 0x28
 801e114:	4c81      	ldr	r4, [pc, #516]	; (801e31c <_tzset_unlocked_r+0x2dc>)
 801e116:	4b82      	ldr	r3, [pc, #520]	; (801e320 <_tzset_unlocked_r+0x2e0>)
 801e118:	6023      	str	r3, [r4, #0]
 801e11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e11c:	4981      	ldr	r1, [pc, #516]	; (801e324 <_tzset_unlocked_r+0x2e4>)
 801e11e:	441f      	add	r7, r3
 801e120:	464a      	mov	r2, r9
 801e122:	4633      	mov	r3, r6
 801e124:	4638      	mov	r0, r7
 801e126:	f000 fdd5 	bl	801ecd4 <siscanf>
 801e12a:	4540      	cmp	r0, r8
 801e12c:	dc16      	bgt.n	801e15c <_tzset_unlocked_r+0x11c>
 801e12e:	6823      	ldr	r3, [r4, #0]
 801e130:	6063      	str	r3, [r4, #4]
 801e132:	4b77      	ldr	r3, [pc, #476]	; (801e310 <_tzset_unlocked_r+0x2d0>)
 801e134:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e136:	601a      	str	r2, [r3, #0]
 801e138:	4b77      	ldr	r3, [pc, #476]	; (801e318 <_tzset_unlocked_r+0x2d8>)
 801e13a:	f8c3 8000 	str.w	r8, [r3]
 801e13e:	e799      	b.n	801e074 <_tzset_unlocked_r+0x34>
 801e140:	f7e2 f896 	bl	8000270 <strcmp>
 801e144:	2800      	cmp	r0, #0
 801e146:	d19b      	bne.n	801e080 <_tzset_unlocked_r+0x40>
 801e148:	e794      	b.n	801e074 <_tzset_unlocked_r+0x34>
 801e14a:	4621      	mov	r1, r4
 801e14c:	f7fe fe32 	bl	801cdb4 <strcpy>
 801e150:	e7a3      	b.n	801e09a <_tzset_unlocked_r+0x5a>
 801e152:	2b2b      	cmp	r3, #43	; 0x2b
 801e154:	bf08      	it	eq
 801e156:	3701      	addeq	r7, #1
 801e158:	2401      	movs	r4, #1
 801e15a:	e7b3      	b.n	801e0c4 <_tzset_unlocked_r+0x84>
 801e15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e15e:	f8c4 9004 	str.w	r9, [r4, #4]
 801e162:	18fc      	adds	r4, r7, r3
 801e164:	5cfb      	ldrb	r3, [r7, r3]
 801e166:	2b2d      	cmp	r3, #45	; 0x2d
 801e168:	f040 808b 	bne.w	801e282 <_tzset_unlocked_r+0x242>
 801e16c:	3401      	adds	r4, #1
 801e16e:	f04f 37ff 	mov.w	r7, #4294967295
 801e172:	2300      	movs	r3, #0
 801e174:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e178:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e17c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e180:	930a      	str	r3, [sp, #40]	; 0x28
 801e182:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e186:	e9cd b600 	strd	fp, r6, [sp]
 801e18a:	4967      	ldr	r1, [pc, #412]	; (801e328 <_tzset_unlocked_r+0x2e8>)
 801e18c:	4633      	mov	r3, r6
 801e18e:	aa07      	add	r2, sp, #28
 801e190:	4620      	mov	r0, r4
 801e192:	f000 fd9f 	bl	801ecd4 <siscanf>
 801e196:	2800      	cmp	r0, #0
 801e198:	dc78      	bgt.n	801e28c <_tzset_unlocked_r+0x24c>
 801e19a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801e19c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801e1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e1a2:	652f      	str	r7, [r5, #80]	; 0x50
 801e1a4:	441c      	add	r4, r3
 801e1a6:	462f      	mov	r7, r5
 801e1a8:	f04f 0900 	mov.w	r9, #0
 801e1ac:	7823      	ldrb	r3, [r4, #0]
 801e1ae:	2b2c      	cmp	r3, #44	; 0x2c
 801e1b0:	bf08      	it	eq
 801e1b2:	3401      	addeq	r4, #1
 801e1b4:	f894 8000 	ldrb.w	r8, [r4]
 801e1b8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801e1bc:	d178      	bne.n	801e2b0 <_tzset_unlocked_r+0x270>
 801e1be:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801e1c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801e1c6:	ab09      	add	r3, sp, #36	; 0x24
 801e1c8:	9300      	str	r3, [sp, #0]
 801e1ca:	4958      	ldr	r1, [pc, #352]	; (801e32c <_tzset_unlocked_r+0x2ec>)
 801e1cc:	9603      	str	r6, [sp, #12]
 801e1ce:	4633      	mov	r3, r6
 801e1d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	f000 fd7d 	bl	801ecd4 <siscanf>
 801e1da:	2803      	cmp	r0, #3
 801e1dc:	f47f af4a 	bne.w	801e074 <_tzset_unlocked_r+0x34>
 801e1e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e1e4:	1e4b      	subs	r3, r1, #1
 801e1e6:	2b0b      	cmp	r3, #11
 801e1e8:	f63f af44 	bhi.w	801e074 <_tzset_unlocked_r+0x34>
 801e1ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e1f0:	1e53      	subs	r3, r2, #1
 801e1f2:	2b04      	cmp	r3, #4
 801e1f4:	f63f af3e 	bhi.w	801e074 <_tzset_unlocked_r+0x34>
 801e1f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801e1fc:	2b06      	cmp	r3, #6
 801e1fe:	f63f af39 	bhi.w	801e074 <_tzset_unlocked_r+0x34>
 801e202:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801e206:	f887 8008 	strb.w	r8, [r7, #8]
 801e20a:	617b      	str	r3, [r7, #20]
 801e20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e20e:	eb04 0803 	add.w	r8, r4, r3
 801e212:	2302      	movs	r3, #2
 801e214:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e218:	2300      	movs	r3, #0
 801e21a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e21e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e222:	930a      	str	r3, [sp, #40]	; 0x28
 801e224:	f898 3000 	ldrb.w	r3, [r8]
 801e228:	2b2f      	cmp	r3, #47	; 0x2f
 801e22a:	d109      	bne.n	801e240 <_tzset_unlocked_r+0x200>
 801e22c:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e230:	e9cd b600 	strd	fp, r6, [sp]
 801e234:	493e      	ldr	r1, [pc, #248]	; (801e330 <_tzset_unlocked_r+0x2f0>)
 801e236:	4633      	mov	r3, r6
 801e238:	aa07      	add	r2, sp, #28
 801e23a:	4640      	mov	r0, r8
 801e23c:	f000 fd4a 	bl	801ecd4 <siscanf>
 801e240:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e244:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e248:	213c      	movs	r1, #60	; 0x3c
 801e24a:	fb01 2203 	mla	r2, r1, r3, r2
 801e24e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e252:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e256:	fb01 2303 	mla	r3, r1, r3, r2
 801e25a:	61bb      	str	r3, [r7, #24]
 801e25c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e25e:	3728      	adds	r7, #40	; 0x28
 801e260:	4444      	add	r4, r8
 801e262:	f1b9 0f00 	cmp.w	r9, #0
 801e266:	d020      	beq.n	801e2aa <_tzset_unlocked_r+0x26a>
 801e268:	6868      	ldr	r0, [r5, #4]
 801e26a:	f7ff fe2f 	bl	801decc <__tzcalc_limits>
 801e26e:	4b28      	ldr	r3, [pc, #160]	; (801e310 <_tzset_unlocked_r+0x2d0>)
 801e270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e272:	601a      	str	r2, [r3, #0]
 801e274:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e276:	1a9b      	subs	r3, r3, r2
 801e278:	4a27      	ldr	r2, [pc, #156]	; (801e318 <_tzset_unlocked_r+0x2d8>)
 801e27a:	bf18      	it	ne
 801e27c:	2301      	movne	r3, #1
 801e27e:	6013      	str	r3, [r2, #0]
 801e280:	e6f8      	b.n	801e074 <_tzset_unlocked_r+0x34>
 801e282:	2b2b      	cmp	r3, #43	; 0x2b
 801e284:	bf08      	it	eq
 801e286:	3401      	addeq	r4, #1
 801e288:	2701      	movs	r7, #1
 801e28a:	e772      	b.n	801e172 <_tzset_unlocked_r+0x132>
 801e28c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e290:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e294:	213c      	movs	r1, #60	; 0x3c
 801e296:	fb01 2203 	mla	r2, r1, r3, r2
 801e29a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e29e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e2a2:	fb01 2303 	mla	r3, r1, r3, r2
 801e2a6:	435f      	muls	r7, r3
 801e2a8:	e77a      	b.n	801e1a0 <_tzset_unlocked_r+0x160>
 801e2aa:	f04f 0901 	mov.w	r9, #1
 801e2ae:	e77d      	b.n	801e1ac <_tzset_unlocked_r+0x16c>
 801e2b0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801e2b4:	bf06      	itte	eq
 801e2b6:	3401      	addeq	r4, #1
 801e2b8:	4643      	moveq	r3, r8
 801e2ba:	2344      	movne	r3, #68	; 0x44
 801e2bc:	220a      	movs	r2, #10
 801e2be:	a90b      	add	r1, sp, #44	; 0x2c
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	9305      	str	r3, [sp, #20]
 801e2c4:	f7ff fdf8 	bl	801deb8 <strtoul>
 801e2c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801e2cc:	9b05      	ldr	r3, [sp, #20]
 801e2ce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801e2d2:	45a0      	cmp	r8, r4
 801e2d4:	d114      	bne.n	801e300 <_tzset_unlocked_r+0x2c0>
 801e2d6:	234d      	movs	r3, #77	; 0x4d
 801e2d8:	f1b9 0f00 	cmp.w	r9, #0
 801e2dc:	d107      	bne.n	801e2ee <_tzset_unlocked_r+0x2ae>
 801e2de:	722b      	strb	r3, [r5, #8]
 801e2e0:	2103      	movs	r1, #3
 801e2e2:	2302      	movs	r3, #2
 801e2e4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801e2e8:	f8c5 9014 	str.w	r9, [r5, #20]
 801e2ec:	e791      	b.n	801e212 <_tzset_unlocked_r+0x1d2>
 801e2ee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801e2f2:	220b      	movs	r2, #11
 801e2f4:	2301      	movs	r3, #1
 801e2f6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e2fe:	e788      	b.n	801e212 <_tzset_unlocked_r+0x1d2>
 801e300:	b280      	uxth	r0, r0
 801e302:	723b      	strb	r3, [r7, #8]
 801e304:	6178      	str	r0, [r7, #20]
 801e306:	e784      	b.n	801e212 <_tzset_unlocked_r+0x1d2>
 801e308:	08032620 	.word	0x08032620
 801e30c:	20007324 	.word	0x20007324
 801e310:	2000732c 	.word	0x2000732c
 801e314:	08032623 	.word	0x08032623
 801e318:	20007328 	.word	0x20007328
 801e31c:	20000180 	.word	0x20000180
 801e320:	20007317 	.word	0x20007317
 801e324:	08032627 	.word	0x08032627
 801e328:	0803264a 	.word	0x0803264a
 801e32c:	08032636 	.word	0x08032636
 801e330:	08032649 	.word	0x08032649
 801e334:	2000730c 	.word	0x2000730c

0801e338 <_user_strerror>:
 801e338:	2000      	movs	r0, #0
 801e33a:	4770      	bx	lr

0801e33c <_vsniprintf_r>:
 801e33c:	b530      	push	{r4, r5, lr}
 801e33e:	1e14      	subs	r4, r2, #0
 801e340:	4605      	mov	r5, r0
 801e342:	b09b      	sub	sp, #108	; 0x6c
 801e344:	4618      	mov	r0, r3
 801e346:	da05      	bge.n	801e354 <_vsniprintf_r+0x18>
 801e348:	238b      	movs	r3, #139	; 0x8b
 801e34a:	602b      	str	r3, [r5, #0]
 801e34c:	f04f 30ff 	mov.w	r0, #4294967295
 801e350:	b01b      	add	sp, #108	; 0x6c
 801e352:	bd30      	pop	{r4, r5, pc}
 801e354:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e358:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e35c:	bf14      	ite	ne
 801e35e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e362:	4623      	moveq	r3, r4
 801e364:	9302      	str	r3, [sp, #8]
 801e366:	9305      	str	r3, [sp, #20]
 801e368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e36c:	9100      	str	r1, [sp, #0]
 801e36e:	9104      	str	r1, [sp, #16]
 801e370:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e374:	4602      	mov	r2, r0
 801e376:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e378:	4669      	mov	r1, sp
 801e37a:	4628      	mov	r0, r5
 801e37c:	f000 fb54 	bl	801ea28 <_svfiprintf_r>
 801e380:	1c43      	adds	r3, r0, #1
 801e382:	bfbc      	itt	lt
 801e384:	238b      	movlt	r3, #139	; 0x8b
 801e386:	602b      	strlt	r3, [r5, #0]
 801e388:	2c00      	cmp	r4, #0
 801e38a:	d0e1      	beq.n	801e350 <_vsniprintf_r+0x14>
 801e38c:	9b00      	ldr	r3, [sp, #0]
 801e38e:	2200      	movs	r2, #0
 801e390:	701a      	strb	r2, [r3, #0]
 801e392:	e7dd      	b.n	801e350 <_vsniprintf_r+0x14>

0801e394 <vsniprintf>:
 801e394:	b507      	push	{r0, r1, r2, lr}
 801e396:	9300      	str	r3, [sp, #0]
 801e398:	4613      	mov	r3, r2
 801e39a:	460a      	mov	r2, r1
 801e39c:	4601      	mov	r1, r0
 801e39e:	4803      	ldr	r0, [pc, #12]	; (801e3ac <vsniprintf+0x18>)
 801e3a0:	6800      	ldr	r0, [r0, #0]
 801e3a2:	f7ff ffcb 	bl	801e33c <_vsniprintf_r>
 801e3a6:	b003      	add	sp, #12
 801e3a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801e3ac:	2000011c 	.word	0x2000011c

0801e3b0 <__swbuf_r>:
 801e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3b2:	460e      	mov	r6, r1
 801e3b4:	4614      	mov	r4, r2
 801e3b6:	4605      	mov	r5, r0
 801e3b8:	b118      	cbz	r0, 801e3c2 <__swbuf_r+0x12>
 801e3ba:	6983      	ldr	r3, [r0, #24]
 801e3bc:	b90b      	cbnz	r3, 801e3c2 <__swbuf_r+0x12>
 801e3be:	f7fd fcc5 	bl	801bd4c <__sinit>
 801e3c2:	4b21      	ldr	r3, [pc, #132]	; (801e448 <__swbuf_r+0x98>)
 801e3c4:	429c      	cmp	r4, r3
 801e3c6:	d12b      	bne.n	801e420 <__swbuf_r+0x70>
 801e3c8:	686c      	ldr	r4, [r5, #4]
 801e3ca:	69a3      	ldr	r3, [r4, #24]
 801e3cc:	60a3      	str	r3, [r4, #8]
 801e3ce:	89a3      	ldrh	r3, [r4, #12]
 801e3d0:	071a      	lsls	r2, r3, #28
 801e3d2:	d52f      	bpl.n	801e434 <__swbuf_r+0x84>
 801e3d4:	6923      	ldr	r3, [r4, #16]
 801e3d6:	b36b      	cbz	r3, 801e434 <__swbuf_r+0x84>
 801e3d8:	6923      	ldr	r3, [r4, #16]
 801e3da:	6820      	ldr	r0, [r4, #0]
 801e3dc:	1ac0      	subs	r0, r0, r3
 801e3de:	6963      	ldr	r3, [r4, #20]
 801e3e0:	b2f6      	uxtb	r6, r6
 801e3e2:	4283      	cmp	r3, r0
 801e3e4:	4637      	mov	r7, r6
 801e3e6:	dc04      	bgt.n	801e3f2 <__swbuf_r+0x42>
 801e3e8:	4621      	mov	r1, r4
 801e3ea:	4628      	mov	r0, r5
 801e3ec:	f7fd fc08 	bl	801bc00 <_fflush_r>
 801e3f0:	bb30      	cbnz	r0, 801e440 <__swbuf_r+0x90>
 801e3f2:	68a3      	ldr	r3, [r4, #8]
 801e3f4:	3b01      	subs	r3, #1
 801e3f6:	60a3      	str	r3, [r4, #8]
 801e3f8:	6823      	ldr	r3, [r4, #0]
 801e3fa:	1c5a      	adds	r2, r3, #1
 801e3fc:	6022      	str	r2, [r4, #0]
 801e3fe:	701e      	strb	r6, [r3, #0]
 801e400:	6963      	ldr	r3, [r4, #20]
 801e402:	3001      	adds	r0, #1
 801e404:	4283      	cmp	r3, r0
 801e406:	d004      	beq.n	801e412 <__swbuf_r+0x62>
 801e408:	89a3      	ldrh	r3, [r4, #12]
 801e40a:	07db      	lsls	r3, r3, #31
 801e40c:	d506      	bpl.n	801e41c <__swbuf_r+0x6c>
 801e40e:	2e0a      	cmp	r6, #10
 801e410:	d104      	bne.n	801e41c <__swbuf_r+0x6c>
 801e412:	4621      	mov	r1, r4
 801e414:	4628      	mov	r0, r5
 801e416:	f7fd fbf3 	bl	801bc00 <_fflush_r>
 801e41a:	b988      	cbnz	r0, 801e440 <__swbuf_r+0x90>
 801e41c:	4638      	mov	r0, r7
 801e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e420:	4b0a      	ldr	r3, [pc, #40]	; (801e44c <__swbuf_r+0x9c>)
 801e422:	429c      	cmp	r4, r3
 801e424:	d101      	bne.n	801e42a <__swbuf_r+0x7a>
 801e426:	68ac      	ldr	r4, [r5, #8]
 801e428:	e7cf      	b.n	801e3ca <__swbuf_r+0x1a>
 801e42a:	4b09      	ldr	r3, [pc, #36]	; (801e450 <__swbuf_r+0xa0>)
 801e42c:	429c      	cmp	r4, r3
 801e42e:	bf08      	it	eq
 801e430:	68ec      	ldreq	r4, [r5, #12]
 801e432:	e7ca      	b.n	801e3ca <__swbuf_r+0x1a>
 801e434:	4621      	mov	r1, r4
 801e436:	4628      	mov	r0, r5
 801e438:	f000 f81e 	bl	801e478 <__swsetup_r>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	d0cb      	beq.n	801e3d8 <__swbuf_r+0x28>
 801e440:	f04f 37ff 	mov.w	r7, #4294967295
 801e444:	e7ea      	b.n	801e41c <__swbuf_r+0x6c>
 801e446:	bf00      	nop
 801e448:	08031b78 	.word	0x08031b78
 801e44c:	08031b98 	.word	0x08031b98
 801e450:	08031b58 	.word	0x08031b58

0801e454 <_write_r>:
 801e454:	b538      	push	{r3, r4, r5, lr}
 801e456:	4d07      	ldr	r5, [pc, #28]	; (801e474 <_write_r+0x20>)
 801e458:	4604      	mov	r4, r0
 801e45a:	4608      	mov	r0, r1
 801e45c:	4611      	mov	r1, r2
 801e45e:	2200      	movs	r2, #0
 801e460:	602a      	str	r2, [r5, #0]
 801e462:	461a      	mov	r2, r3
 801e464:	f7e2 fc60 	bl	8000d28 <_write>
 801e468:	1c43      	adds	r3, r0, #1
 801e46a:	d102      	bne.n	801e472 <_write_r+0x1e>
 801e46c:	682b      	ldr	r3, [r5, #0]
 801e46e:	b103      	cbz	r3, 801e472 <_write_r+0x1e>
 801e470:	6023      	str	r3, [r4, #0]
 801e472:	bd38      	pop	{r3, r4, r5, pc}
 801e474:	20016130 	.word	0x20016130

0801e478 <__swsetup_r>:
 801e478:	4b32      	ldr	r3, [pc, #200]	; (801e544 <__swsetup_r+0xcc>)
 801e47a:	b570      	push	{r4, r5, r6, lr}
 801e47c:	681d      	ldr	r5, [r3, #0]
 801e47e:	4606      	mov	r6, r0
 801e480:	460c      	mov	r4, r1
 801e482:	b125      	cbz	r5, 801e48e <__swsetup_r+0x16>
 801e484:	69ab      	ldr	r3, [r5, #24]
 801e486:	b913      	cbnz	r3, 801e48e <__swsetup_r+0x16>
 801e488:	4628      	mov	r0, r5
 801e48a:	f7fd fc5f 	bl	801bd4c <__sinit>
 801e48e:	4b2e      	ldr	r3, [pc, #184]	; (801e548 <__swsetup_r+0xd0>)
 801e490:	429c      	cmp	r4, r3
 801e492:	d10f      	bne.n	801e4b4 <__swsetup_r+0x3c>
 801e494:	686c      	ldr	r4, [r5, #4]
 801e496:	89a3      	ldrh	r3, [r4, #12]
 801e498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e49c:	0719      	lsls	r1, r3, #28
 801e49e:	d42c      	bmi.n	801e4fa <__swsetup_r+0x82>
 801e4a0:	06dd      	lsls	r5, r3, #27
 801e4a2:	d411      	bmi.n	801e4c8 <__swsetup_r+0x50>
 801e4a4:	2309      	movs	r3, #9
 801e4a6:	6033      	str	r3, [r6, #0]
 801e4a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e4ac:	81a3      	strh	r3, [r4, #12]
 801e4ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e4b2:	e03e      	b.n	801e532 <__swsetup_r+0xba>
 801e4b4:	4b25      	ldr	r3, [pc, #148]	; (801e54c <__swsetup_r+0xd4>)
 801e4b6:	429c      	cmp	r4, r3
 801e4b8:	d101      	bne.n	801e4be <__swsetup_r+0x46>
 801e4ba:	68ac      	ldr	r4, [r5, #8]
 801e4bc:	e7eb      	b.n	801e496 <__swsetup_r+0x1e>
 801e4be:	4b24      	ldr	r3, [pc, #144]	; (801e550 <__swsetup_r+0xd8>)
 801e4c0:	429c      	cmp	r4, r3
 801e4c2:	bf08      	it	eq
 801e4c4:	68ec      	ldreq	r4, [r5, #12]
 801e4c6:	e7e6      	b.n	801e496 <__swsetup_r+0x1e>
 801e4c8:	0758      	lsls	r0, r3, #29
 801e4ca:	d512      	bpl.n	801e4f2 <__swsetup_r+0x7a>
 801e4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e4ce:	b141      	cbz	r1, 801e4e2 <__swsetup_r+0x6a>
 801e4d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e4d4:	4299      	cmp	r1, r3
 801e4d6:	d002      	beq.n	801e4de <__swsetup_r+0x66>
 801e4d8:	4630      	mov	r0, r6
 801e4da:	f7fd fee1 	bl	801c2a0 <_free_r>
 801e4de:	2300      	movs	r3, #0
 801e4e0:	6363      	str	r3, [r4, #52]	; 0x34
 801e4e2:	89a3      	ldrh	r3, [r4, #12]
 801e4e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e4e8:	81a3      	strh	r3, [r4, #12]
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	6063      	str	r3, [r4, #4]
 801e4ee:	6923      	ldr	r3, [r4, #16]
 801e4f0:	6023      	str	r3, [r4, #0]
 801e4f2:	89a3      	ldrh	r3, [r4, #12]
 801e4f4:	f043 0308 	orr.w	r3, r3, #8
 801e4f8:	81a3      	strh	r3, [r4, #12]
 801e4fa:	6923      	ldr	r3, [r4, #16]
 801e4fc:	b94b      	cbnz	r3, 801e512 <__swsetup_r+0x9a>
 801e4fe:	89a3      	ldrh	r3, [r4, #12]
 801e500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e508:	d003      	beq.n	801e512 <__swsetup_r+0x9a>
 801e50a:	4621      	mov	r1, r4
 801e50c:	4630      	mov	r0, r6
 801e50e:	f000 f9ab 	bl	801e868 <__smakebuf_r>
 801e512:	89a0      	ldrh	r0, [r4, #12]
 801e514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e518:	f010 0301 	ands.w	r3, r0, #1
 801e51c:	d00a      	beq.n	801e534 <__swsetup_r+0xbc>
 801e51e:	2300      	movs	r3, #0
 801e520:	60a3      	str	r3, [r4, #8]
 801e522:	6963      	ldr	r3, [r4, #20]
 801e524:	425b      	negs	r3, r3
 801e526:	61a3      	str	r3, [r4, #24]
 801e528:	6923      	ldr	r3, [r4, #16]
 801e52a:	b943      	cbnz	r3, 801e53e <__swsetup_r+0xc6>
 801e52c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e530:	d1ba      	bne.n	801e4a8 <__swsetup_r+0x30>
 801e532:	bd70      	pop	{r4, r5, r6, pc}
 801e534:	0781      	lsls	r1, r0, #30
 801e536:	bf58      	it	pl
 801e538:	6963      	ldrpl	r3, [r4, #20]
 801e53a:	60a3      	str	r3, [r4, #8]
 801e53c:	e7f4      	b.n	801e528 <__swsetup_r+0xb0>
 801e53e:	2000      	movs	r0, #0
 801e540:	e7f7      	b.n	801e532 <__swsetup_r+0xba>
 801e542:	bf00      	nop
 801e544:	2000011c 	.word	0x2000011c
 801e548:	08031b78 	.word	0x08031b78
 801e54c:	08031b98 	.word	0x08031b98
 801e550:	08031b58 	.word	0x08031b58

0801e554 <abort>:
 801e554:	b508      	push	{r3, lr}
 801e556:	2006      	movs	r0, #6
 801e558:	f000 fba0 	bl	801ec9c <raise>
 801e55c:	2001      	movs	r0, #1
 801e55e:	f7e2 fbdd 	bl	8000d1c <_exit>

0801e562 <abs>:
 801e562:	2800      	cmp	r0, #0
 801e564:	bfb8      	it	lt
 801e566:	4240      	neglt	r0, r0
 801e568:	4770      	bx	lr
	...

0801e56c <_close_r>:
 801e56c:	b538      	push	{r3, r4, r5, lr}
 801e56e:	4d06      	ldr	r5, [pc, #24]	; (801e588 <_close_r+0x1c>)
 801e570:	2300      	movs	r3, #0
 801e572:	4604      	mov	r4, r0
 801e574:	4608      	mov	r0, r1
 801e576:	602b      	str	r3, [r5, #0]
 801e578:	f7e2 fbe3 	bl	8000d42 <_close>
 801e57c:	1c43      	adds	r3, r0, #1
 801e57e:	d102      	bne.n	801e586 <_close_r+0x1a>
 801e580:	682b      	ldr	r3, [r5, #0]
 801e582:	b103      	cbz	r3, 801e586 <_close_r+0x1a>
 801e584:	6023      	str	r3, [r4, #0]
 801e586:	bd38      	pop	{r3, r4, r5, pc}
 801e588:	20016130 	.word	0x20016130

0801e58c <fileno>:
 801e58c:	b570      	push	{r4, r5, r6, lr}
 801e58e:	4e1a      	ldr	r6, [pc, #104]	; (801e5f8 <fileno+0x6c>)
 801e590:	6835      	ldr	r5, [r6, #0]
 801e592:	4604      	mov	r4, r0
 801e594:	b125      	cbz	r5, 801e5a0 <fileno+0x14>
 801e596:	69ab      	ldr	r3, [r5, #24]
 801e598:	b913      	cbnz	r3, 801e5a0 <fileno+0x14>
 801e59a:	4628      	mov	r0, r5
 801e59c:	f7fd fbd6 	bl	801bd4c <__sinit>
 801e5a0:	4b16      	ldr	r3, [pc, #88]	; (801e5fc <fileno+0x70>)
 801e5a2:	429c      	cmp	r4, r3
 801e5a4:	d118      	bne.n	801e5d8 <fileno+0x4c>
 801e5a6:	686c      	ldr	r4, [r5, #4]
 801e5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e5aa:	07d8      	lsls	r0, r3, #31
 801e5ac:	d405      	bmi.n	801e5ba <fileno+0x2e>
 801e5ae:	89a3      	ldrh	r3, [r4, #12]
 801e5b0:	0599      	lsls	r1, r3, #22
 801e5b2:	d402      	bmi.n	801e5ba <fileno+0x2e>
 801e5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5b6:	f7fd fe21 	bl	801c1fc <__retarget_lock_acquire_recursive>
 801e5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5be:	b1ab      	cbz	r3, 801e5ec <fileno+0x60>
 801e5c0:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 801e5c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e5c6:	07d2      	lsls	r2, r2, #31
 801e5c8:	d404      	bmi.n	801e5d4 <fileno+0x48>
 801e5ca:	059b      	lsls	r3, r3, #22
 801e5cc:	d402      	bmi.n	801e5d4 <fileno+0x48>
 801e5ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5d0:	f7fd fe16 	bl	801c200 <__retarget_lock_release_recursive>
 801e5d4:	4628      	mov	r0, r5
 801e5d6:	bd70      	pop	{r4, r5, r6, pc}
 801e5d8:	4b09      	ldr	r3, [pc, #36]	; (801e600 <fileno+0x74>)
 801e5da:	429c      	cmp	r4, r3
 801e5dc:	d101      	bne.n	801e5e2 <fileno+0x56>
 801e5de:	68ac      	ldr	r4, [r5, #8]
 801e5e0:	e7e2      	b.n	801e5a8 <fileno+0x1c>
 801e5e2:	4b08      	ldr	r3, [pc, #32]	; (801e604 <fileno+0x78>)
 801e5e4:	429c      	cmp	r4, r3
 801e5e6:	bf08      	it	eq
 801e5e8:	68ec      	ldreq	r4, [r5, #12]
 801e5ea:	e7dd      	b.n	801e5a8 <fileno+0x1c>
 801e5ec:	6832      	ldr	r2, [r6, #0]
 801e5ee:	2109      	movs	r1, #9
 801e5f0:	6011      	str	r1, [r2, #0]
 801e5f2:	f04f 35ff 	mov.w	r5, #4294967295
 801e5f6:	e7e5      	b.n	801e5c4 <fileno+0x38>
 801e5f8:	2000011c 	.word	0x2000011c
 801e5fc:	08031b78 	.word	0x08031b78
 801e600:	08031b98 	.word	0x08031b98
 801e604:	08031b58 	.word	0x08031b58

0801e608 <_findenv_r>:
 801e608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e60c:	4607      	mov	r7, r0
 801e60e:	4689      	mov	r9, r1
 801e610:	4616      	mov	r6, r2
 801e612:	f000 fb99 	bl	801ed48 <__env_lock>
 801e616:	4b18      	ldr	r3, [pc, #96]	; (801e678 <_findenv_r+0x70>)
 801e618:	681c      	ldr	r4, [r3, #0]
 801e61a:	469a      	mov	sl, r3
 801e61c:	b134      	cbz	r4, 801e62c <_findenv_r+0x24>
 801e61e:	464b      	mov	r3, r9
 801e620:	4698      	mov	r8, r3
 801e622:	f813 1b01 	ldrb.w	r1, [r3], #1
 801e626:	b139      	cbz	r1, 801e638 <_findenv_r+0x30>
 801e628:	293d      	cmp	r1, #61	; 0x3d
 801e62a:	d1f9      	bne.n	801e620 <_findenv_r+0x18>
 801e62c:	4638      	mov	r0, r7
 801e62e:	f000 fb91 	bl	801ed54 <__env_unlock>
 801e632:	2000      	movs	r0, #0
 801e634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e638:	eba8 0809 	sub.w	r8, r8, r9
 801e63c:	46a3      	mov	fp, r4
 801e63e:	f854 0b04 	ldr.w	r0, [r4], #4
 801e642:	2800      	cmp	r0, #0
 801e644:	d0f2      	beq.n	801e62c <_findenv_r+0x24>
 801e646:	4642      	mov	r2, r8
 801e648:	4649      	mov	r1, r9
 801e64a:	f7ff fb07 	bl	801dc5c <strncmp>
 801e64e:	2800      	cmp	r0, #0
 801e650:	d1f4      	bne.n	801e63c <_findenv_r+0x34>
 801e652:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e656:	eb03 0508 	add.w	r5, r3, r8
 801e65a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e65e:	2b3d      	cmp	r3, #61	; 0x3d
 801e660:	d1ec      	bne.n	801e63c <_findenv_r+0x34>
 801e662:	f8da 3000 	ldr.w	r3, [sl]
 801e666:	ebab 0303 	sub.w	r3, fp, r3
 801e66a:	109b      	asrs	r3, r3, #2
 801e66c:	4638      	mov	r0, r7
 801e66e:	6033      	str	r3, [r6, #0]
 801e670:	f000 fb70 	bl	801ed54 <__env_unlock>
 801e674:	1c68      	adds	r0, r5, #1
 801e676:	e7dd      	b.n	801e634 <_findenv_r+0x2c>
 801e678:	2000034c 	.word	0x2000034c

0801e67c <_getenv_r>:
 801e67c:	b507      	push	{r0, r1, r2, lr}
 801e67e:	aa01      	add	r2, sp, #4
 801e680:	f7ff ffc2 	bl	801e608 <_findenv_r>
 801e684:	b003      	add	sp, #12
 801e686:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e68c <__gettzinfo>:
 801e68c:	4800      	ldr	r0, [pc, #0]	; (801e690 <__gettzinfo+0x4>)
 801e68e:	4770      	bx	lr
 801e690:	20000188 	.word	0x20000188

0801e694 <gmtime_r>:
 801e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e698:	e9d0 6700 	ldrd	r6, r7, [r0]
 801e69c:	460c      	mov	r4, r1
 801e69e:	4a51      	ldr	r2, [pc, #324]	; (801e7e4 <gmtime_r+0x150>)
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	4630      	mov	r0, r6
 801e6a4:	4639      	mov	r1, r7
 801e6a6:	f7e2 f8db 	bl	8000860 <__aeabi_ldivmod>
 801e6aa:	4639      	mov	r1, r7
 801e6ac:	4605      	mov	r5, r0
 801e6ae:	4a4d      	ldr	r2, [pc, #308]	; (801e7e4 <gmtime_r+0x150>)
 801e6b0:	4630      	mov	r0, r6
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	f7e2 f8d4 	bl	8000860 <__aeabi_ldivmod>
 801e6b8:	2a00      	cmp	r2, #0
 801e6ba:	bfbc      	itt	lt
 801e6bc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801e6c0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801e6c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e6c8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801e6cc:	fbb2 f3f1 	udiv	r3, r2, r1
 801e6d0:	fb01 2213 	mls	r2, r1, r3, r2
 801e6d4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801e6d8:	bfac      	ite	ge
 801e6da:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801e6de:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801e6e2:	60a3      	str	r3, [r4, #8]
 801e6e4:	fbb2 f3f1 	udiv	r3, r2, r1
 801e6e8:	fb01 2213 	mls	r2, r1, r3, r2
 801e6ec:	6063      	str	r3, [r4, #4]
 801e6ee:	6022      	str	r2, [r4, #0]
 801e6f0:	1cc3      	adds	r3, r0, #3
 801e6f2:	2207      	movs	r2, #7
 801e6f4:	fb93 f2f2 	sdiv	r2, r3, r2
 801e6f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801e6fc:	1a9b      	subs	r3, r3, r2
 801e6fe:	bf48      	it	mi
 801e700:	3307      	addmi	r3, #7
 801e702:	2800      	cmp	r0, #0
 801e704:	61a3      	str	r3, [r4, #24]
 801e706:	bfb8      	it	lt
 801e708:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801e70c:	4936      	ldr	r1, [pc, #216]	; (801e7e8 <gmtime_r+0x154>)
 801e70e:	bfae      	itee	ge
 801e710:	fb90 f1f1 	sdivge	r1, r0, r1
 801e714:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801e718:	fb93 f1f1 	sdivlt	r1, r3, r1
 801e71c:	4b33      	ldr	r3, [pc, #204]	; (801e7ec <gmtime_r+0x158>)
 801e71e:	fb03 0001 	mla	r0, r3, r1, r0
 801e722:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801e726:	fbb0 f2f2 	udiv	r2, r0, r2
 801e72a:	4402      	add	r2, r0
 801e72c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801e730:	fbb0 f3fc 	udiv	r3, r0, ip
 801e734:	1ad2      	subs	r2, r2, r3
 801e736:	f240 176d 	movw	r7, #365	; 0x16d
 801e73a:	4b2d      	ldr	r3, [pc, #180]	; (801e7f0 <gmtime_r+0x15c>)
 801e73c:	fbb0 f3f3 	udiv	r3, r0, r3
 801e740:	2664      	movs	r6, #100	; 0x64
 801e742:	1ad3      	subs	r3, r2, r3
 801e744:	fbb3 f5f7 	udiv	r5, r3, r7
 801e748:	fbb3 f3fc 	udiv	r3, r3, ip
 801e74c:	fbb5 f2f6 	udiv	r2, r5, r6
 801e750:	1ad3      	subs	r3, r2, r3
 801e752:	4403      	add	r3, r0
 801e754:	fb07 3315 	mls	r3, r7, r5, r3
 801e758:	2099      	movs	r0, #153	; 0x99
 801e75a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801e75e:	f10c 0c02 	add.w	ip, ip, #2
 801e762:	f103 0e01 	add.w	lr, r3, #1
 801e766:	fbbc f7f0 	udiv	r7, ip, r0
 801e76a:	4378      	muls	r0, r7
 801e76c:	3002      	adds	r0, #2
 801e76e:	f04f 0805 	mov.w	r8, #5
 801e772:	fbb0 f0f8 	udiv	r0, r0, r8
 801e776:	ebae 0000 	sub.w	r0, lr, r0
 801e77a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801e77e:	45f4      	cmp	ip, lr
 801e780:	bf94      	ite	ls
 801e782:	f04f 0c02 	movls.w	ip, #2
 801e786:	f06f 0c09 	mvnhi.w	ip, #9
 801e78a:	4467      	add	r7, ip
 801e78c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801e790:	fb0c 5101 	mla	r1, ip, r1, r5
 801e794:	2f01      	cmp	r7, #1
 801e796:	bf98      	it	ls
 801e798:	3101      	addls	r1, #1
 801e79a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801e79e:	d30c      	bcc.n	801e7ba <gmtime_r+0x126>
 801e7a0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801e7a4:	61e3      	str	r3, [r4, #28]
 801e7a6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	60e0      	str	r0, [r4, #12]
 801e7ae:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801e7b2:	6223      	str	r3, [r4, #32]
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7ba:	f015 0f03 	tst.w	r5, #3
 801e7be:	d102      	bne.n	801e7c6 <gmtime_r+0x132>
 801e7c0:	fb06 5212 	mls	r2, r6, r2, r5
 801e7c4:	b95a      	cbnz	r2, 801e7de <gmtime_r+0x14a>
 801e7c6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801e7ca:	fbb5 f2f6 	udiv	r2, r5, r6
 801e7ce:	fb06 5212 	mls	r2, r6, r2, r5
 801e7d2:	fab2 f282 	clz	r2, r2
 801e7d6:	0952      	lsrs	r2, r2, #5
 801e7d8:	333b      	adds	r3, #59	; 0x3b
 801e7da:	4413      	add	r3, r2
 801e7dc:	e7e2      	b.n	801e7a4 <gmtime_r+0x110>
 801e7de:	2201      	movs	r2, #1
 801e7e0:	e7fa      	b.n	801e7d8 <gmtime_r+0x144>
 801e7e2:	bf00      	nop
 801e7e4:	00015180 	.word	0x00015180
 801e7e8:	00023ab1 	.word	0x00023ab1
 801e7ec:	fffdc54f 	.word	0xfffdc54f
 801e7f0:	00023ab0 	.word	0x00023ab0

0801e7f4 <labs>:
 801e7f4:	2800      	cmp	r0, #0
 801e7f6:	bfb8      	it	lt
 801e7f8:	4240      	neglt	r0, r0
 801e7fa:	4770      	bx	lr

0801e7fc <_lseek_r>:
 801e7fc:	b538      	push	{r3, r4, r5, lr}
 801e7fe:	4d07      	ldr	r5, [pc, #28]	; (801e81c <_lseek_r+0x20>)
 801e800:	4604      	mov	r4, r0
 801e802:	4608      	mov	r0, r1
 801e804:	4611      	mov	r1, r2
 801e806:	2200      	movs	r2, #0
 801e808:	602a      	str	r2, [r5, #0]
 801e80a:	461a      	mov	r2, r3
 801e80c:	f7e2 faa3 	bl	8000d56 <_lseek>
 801e810:	1c43      	adds	r3, r0, #1
 801e812:	d102      	bne.n	801e81a <_lseek_r+0x1e>
 801e814:	682b      	ldr	r3, [r5, #0]
 801e816:	b103      	cbz	r3, 801e81a <_lseek_r+0x1e>
 801e818:	6023      	str	r3, [r4, #0]
 801e81a:	bd38      	pop	{r3, r4, r5, pc}
 801e81c:	20016130 	.word	0x20016130

0801e820 <__swhatbuf_r>:
 801e820:	b570      	push	{r4, r5, r6, lr}
 801e822:	460e      	mov	r6, r1
 801e824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e828:	2900      	cmp	r1, #0
 801e82a:	b096      	sub	sp, #88	; 0x58
 801e82c:	4614      	mov	r4, r2
 801e82e:	461d      	mov	r5, r3
 801e830:	da07      	bge.n	801e842 <__swhatbuf_r+0x22>
 801e832:	2300      	movs	r3, #0
 801e834:	602b      	str	r3, [r5, #0]
 801e836:	89b3      	ldrh	r3, [r6, #12]
 801e838:	061a      	lsls	r2, r3, #24
 801e83a:	d410      	bmi.n	801e85e <__swhatbuf_r+0x3e>
 801e83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e840:	e00e      	b.n	801e860 <__swhatbuf_r+0x40>
 801e842:	466a      	mov	r2, sp
 801e844:	f000 fa8c 	bl	801ed60 <_fstat_r>
 801e848:	2800      	cmp	r0, #0
 801e84a:	dbf2      	blt.n	801e832 <__swhatbuf_r+0x12>
 801e84c:	9a01      	ldr	r2, [sp, #4]
 801e84e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e852:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e856:	425a      	negs	r2, r3
 801e858:	415a      	adcs	r2, r3
 801e85a:	602a      	str	r2, [r5, #0]
 801e85c:	e7ee      	b.n	801e83c <__swhatbuf_r+0x1c>
 801e85e:	2340      	movs	r3, #64	; 0x40
 801e860:	2000      	movs	r0, #0
 801e862:	6023      	str	r3, [r4, #0]
 801e864:	b016      	add	sp, #88	; 0x58
 801e866:	bd70      	pop	{r4, r5, r6, pc}

0801e868 <__smakebuf_r>:
 801e868:	898b      	ldrh	r3, [r1, #12]
 801e86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e86c:	079d      	lsls	r5, r3, #30
 801e86e:	4606      	mov	r6, r0
 801e870:	460c      	mov	r4, r1
 801e872:	d507      	bpl.n	801e884 <__smakebuf_r+0x1c>
 801e874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e878:	6023      	str	r3, [r4, #0]
 801e87a:	6123      	str	r3, [r4, #16]
 801e87c:	2301      	movs	r3, #1
 801e87e:	6163      	str	r3, [r4, #20]
 801e880:	b002      	add	sp, #8
 801e882:	bd70      	pop	{r4, r5, r6, pc}
 801e884:	ab01      	add	r3, sp, #4
 801e886:	466a      	mov	r2, sp
 801e888:	f7ff ffca 	bl	801e820 <__swhatbuf_r>
 801e88c:	9900      	ldr	r1, [sp, #0]
 801e88e:	4605      	mov	r5, r0
 801e890:	4630      	mov	r0, r6
 801e892:	f7fd fd55 	bl	801c340 <_malloc_r>
 801e896:	b948      	cbnz	r0, 801e8ac <__smakebuf_r+0x44>
 801e898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e89c:	059a      	lsls	r2, r3, #22
 801e89e:	d4ef      	bmi.n	801e880 <__smakebuf_r+0x18>
 801e8a0:	f023 0303 	bic.w	r3, r3, #3
 801e8a4:	f043 0302 	orr.w	r3, r3, #2
 801e8a8:	81a3      	strh	r3, [r4, #12]
 801e8aa:	e7e3      	b.n	801e874 <__smakebuf_r+0xc>
 801e8ac:	4b0d      	ldr	r3, [pc, #52]	; (801e8e4 <__smakebuf_r+0x7c>)
 801e8ae:	62b3      	str	r3, [r6, #40]	; 0x28
 801e8b0:	89a3      	ldrh	r3, [r4, #12]
 801e8b2:	6020      	str	r0, [r4, #0]
 801e8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8b8:	81a3      	strh	r3, [r4, #12]
 801e8ba:	9b00      	ldr	r3, [sp, #0]
 801e8bc:	6163      	str	r3, [r4, #20]
 801e8be:	9b01      	ldr	r3, [sp, #4]
 801e8c0:	6120      	str	r0, [r4, #16]
 801e8c2:	b15b      	cbz	r3, 801e8dc <__smakebuf_r+0x74>
 801e8c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	f000 fa5b 	bl	801ed84 <_isatty_r>
 801e8ce:	b128      	cbz	r0, 801e8dc <__smakebuf_r+0x74>
 801e8d0:	89a3      	ldrh	r3, [r4, #12]
 801e8d2:	f023 0303 	bic.w	r3, r3, #3
 801e8d6:	f043 0301 	orr.w	r3, r3, #1
 801e8da:	81a3      	strh	r3, [r4, #12]
 801e8dc:	89a0      	ldrh	r0, [r4, #12]
 801e8de:	4305      	orrs	r5, r0
 801e8e0:	81a5      	strh	r5, [r4, #12]
 801e8e2:	e7cd      	b.n	801e880 <__smakebuf_r+0x18>
 801e8e4:	0801bce5 	.word	0x0801bce5

0801e8e8 <__ascii_mbtowc>:
 801e8e8:	b082      	sub	sp, #8
 801e8ea:	b901      	cbnz	r1, 801e8ee <__ascii_mbtowc+0x6>
 801e8ec:	a901      	add	r1, sp, #4
 801e8ee:	b142      	cbz	r2, 801e902 <__ascii_mbtowc+0x1a>
 801e8f0:	b14b      	cbz	r3, 801e906 <__ascii_mbtowc+0x1e>
 801e8f2:	7813      	ldrb	r3, [r2, #0]
 801e8f4:	600b      	str	r3, [r1, #0]
 801e8f6:	7812      	ldrb	r2, [r2, #0]
 801e8f8:	1e10      	subs	r0, r2, #0
 801e8fa:	bf18      	it	ne
 801e8fc:	2001      	movne	r0, #1
 801e8fe:	b002      	add	sp, #8
 801e900:	4770      	bx	lr
 801e902:	4610      	mov	r0, r2
 801e904:	e7fb      	b.n	801e8fe <__ascii_mbtowc+0x16>
 801e906:	f06f 0001 	mvn.w	r0, #1
 801e90a:	e7f8      	b.n	801e8fe <__ascii_mbtowc+0x16>

0801e90c <__malloc_lock>:
 801e90c:	4801      	ldr	r0, [pc, #4]	; (801e914 <__malloc_lock+0x8>)
 801e90e:	f7fd bc75 	b.w	801c1fc <__retarget_lock_acquire_recursive>
 801e912:	bf00      	nop
 801e914:	2001613c 	.word	0x2001613c

0801e918 <__malloc_unlock>:
 801e918:	4801      	ldr	r0, [pc, #4]	; (801e920 <__malloc_unlock+0x8>)
 801e91a:	f7fd bc71 	b.w	801c200 <__retarget_lock_release_recursive>
 801e91e:	bf00      	nop
 801e920:	2001613c 	.word	0x2001613c

0801e924 <_realloc_r>:
 801e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e926:	4607      	mov	r7, r0
 801e928:	4614      	mov	r4, r2
 801e92a:	460e      	mov	r6, r1
 801e92c:	b921      	cbnz	r1, 801e938 <_realloc_r+0x14>
 801e92e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e932:	4611      	mov	r1, r2
 801e934:	f7fd bd04 	b.w	801c340 <_malloc_r>
 801e938:	b922      	cbnz	r2, 801e944 <_realloc_r+0x20>
 801e93a:	f7fd fcb1 	bl	801c2a0 <_free_r>
 801e93e:	4625      	mov	r5, r4
 801e940:	4628      	mov	r0, r5
 801e942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e944:	f000 fa2e 	bl	801eda4 <_malloc_usable_size_r>
 801e948:	42a0      	cmp	r0, r4
 801e94a:	d20f      	bcs.n	801e96c <_realloc_r+0x48>
 801e94c:	4621      	mov	r1, r4
 801e94e:	4638      	mov	r0, r7
 801e950:	f7fd fcf6 	bl	801c340 <_malloc_r>
 801e954:	4605      	mov	r5, r0
 801e956:	2800      	cmp	r0, #0
 801e958:	d0f2      	beq.n	801e940 <_realloc_r+0x1c>
 801e95a:	4631      	mov	r1, r6
 801e95c:	4622      	mov	r2, r4
 801e95e:	f7fd fc6f 	bl	801c240 <memcpy>
 801e962:	4631      	mov	r1, r6
 801e964:	4638      	mov	r0, r7
 801e966:	f7fd fc9b 	bl	801c2a0 <_free_r>
 801e96a:	e7e9      	b.n	801e940 <_realloc_r+0x1c>
 801e96c:	4635      	mov	r5, r6
 801e96e:	e7e7      	b.n	801e940 <_realloc_r+0x1c>

0801e970 <__ssputs_r>:
 801e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e974:	688e      	ldr	r6, [r1, #8]
 801e976:	429e      	cmp	r6, r3
 801e978:	4682      	mov	sl, r0
 801e97a:	460c      	mov	r4, r1
 801e97c:	4690      	mov	r8, r2
 801e97e:	461f      	mov	r7, r3
 801e980:	d838      	bhi.n	801e9f4 <__ssputs_r+0x84>
 801e982:	898a      	ldrh	r2, [r1, #12]
 801e984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e988:	d032      	beq.n	801e9f0 <__ssputs_r+0x80>
 801e98a:	6825      	ldr	r5, [r4, #0]
 801e98c:	6909      	ldr	r1, [r1, #16]
 801e98e:	eba5 0901 	sub.w	r9, r5, r1
 801e992:	6965      	ldr	r5, [r4, #20]
 801e994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e99c:	3301      	adds	r3, #1
 801e99e:	444b      	add	r3, r9
 801e9a0:	106d      	asrs	r5, r5, #1
 801e9a2:	429d      	cmp	r5, r3
 801e9a4:	bf38      	it	cc
 801e9a6:	461d      	movcc	r5, r3
 801e9a8:	0553      	lsls	r3, r2, #21
 801e9aa:	d531      	bpl.n	801ea10 <__ssputs_r+0xa0>
 801e9ac:	4629      	mov	r1, r5
 801e9ae:	f7fd fcc7 	bl	801c340 <_malloc_r>
 801e9b2:	4606      	mov	r6, r0
 801e9b4:	b950      	cbnz	r0, 801e9cc <__ssputs_r+0x5c>
 801e9b6:	230c      	movs	r3, #12
 801e9b8:	f8ca 3000 	str.w	r3, [sl]
 801e9bc:	89a3      	ldrh	r3, [r4, #12]
 801e9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9c2:	81a3      	strh	r3, [r4, #12]
 801e9c4:	f04f 30ff 	mov.w	r0, #4294967295
 801e9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9cc:	6921      	ldr	r1, [r4, #16]
 801e9ce:	464a      	mov	r2, r9
 801e9d0:	f7fd fc36 	bl	801c240 <memcpy>
 801e9d4:	89a3      	ldrh	r3, [r4, #12]
 801e9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e9de:	81a3      	strh	r3, [r4, #12]
 801e9e0:	6126      	str	r6, [r4, #16]
 801e9e2:	6165      	str	r5, [r4, #20]
 801e9e4:	444e      	add	r6, r9
 801e9e6:	eba5 0509 	sub.w	r5, r5, r9
 801e9ea:	6026      	str	r6, [r4, #0]
 801e9ec:	60a5      	str	r5, [r4, #8]
 801e9ee:	463e      	mov	r6, r7
 801e9f0:	42be      	cmp	r6, r7
 801e9f2:	d900      	bls.n	801e9f6 <__ssputs_r+0x86>
 801e9f4:	463e      	mov	r6, r7
 801e9f6:	4632      	mov	r2, r6
 801e9f8:	6820      	ldr	r0, [r4, #0]
 801e9fa:	4641      	mov	r1, r8
 801e9fc:	f7fd fc2e 	bl	801c25c <memmove>
 801ea00:	68a3      	ldr	r3, [r4, #8]
 801ea02:	6822      	ldr	r2, [r4, #0]
 801ea04:	1b9b      	subs	r3, r3, r6
 801ea06:	4432      	add	r2, r6
 801ea08:	60a3      	str	r3, [r4, #8]
 801ea0a:	6022      	str	r2, [r4, #0]
 801ea0c:	2000      	movs	r0, #0
 801ea0e:	e7db      	b.n	801e9c8 <__ssputs_r+0x58>
 801ea10:	462a      	mov	r2, r5
 801ea12:	f7ff ff87 	bl	801e924 <_realloc_r>
 801ea16:	4606      	mov	r6, r0
 801ea18:	2800      	cmp	r0, #0
 801ea1a:	d1e1      	bne.n	801e9e0 <__ssputs_r+0x70>
 801ea1c:	6921      	ldr	r1, [r4, #16]
 801ea1e:	4650      	mov	r0, sl
 801ea20:	f7fd fc3e 	bl	801c2a0 <_free_r>
 801ea24:	e7c7      	b.n	801e9b6 <__ssputs_r+0x46>
	...

0801ea28 <_svfiprintf_r>:
 801ea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea2c:	4698      	mov	r8, r3
 801ea2e:	898b      	ldrh	r3, [r1, #12]
 801ea30:	061b      	lsls	r3, r3, #24
 801ea32:	b09d      	sub	sp, #116	; 0x74
 801ea34:	4607      	mov	r7, r0
 801ea36:	460d      	mov	r5, r1
 801ea38:	4614      	mov	r4, r2
 801ea3a:	d50e      	bpl.n	801ea5a <_svfiprintf_r+0x32>
 801ea3c:	690b      	ldr	r3, [r1, #16]
 801ea3e:	b963      	cbnz	r3, 801ea5a <_svfiprintf_r+0x32>
 801ea40:	2140      	movs	r1, #64	; 0x40
 801ea42:	f7fd fc7d 	bl	801c340 <_malloc_r>
 801ea46:	6028      	str	r0, [r5, #0]
 801ea48:	6128      	str	r0, [r5, #16]
 801ea4a:	b920      	cbnz	r0, 801ea56 <_svfiprintf_r+0x2e>
 801ea4c:	230c      	movs	r3, #12
 801ea4e:	603b      	str	r3, [r7, #0]
 801ea50:	f04f 30ff 	mov.w	r0, #4294967295
 801ea54:	e0d1      	b.n	801ebfa <_svfiprintf_r+0x1d2>
 801ea56:	2340      	movs	r3, #64	; 0x40
 801ea58:	616b      	str	r3, [r5, #20]
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea5e:	2320      	movs	r3, #32
 801ea60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ea64:	f8cd 800c 	str.w	r8, [sp, #12]
 801ea68:	2330      	movs	r3, #48	; 0x30
 801ea6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ec14 <_svfiprintf_r+0x1ec>
 801ea6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ea72:	f04f 0901 	mov.w	r9, #1
 801ea76:	4623      	mov	r3, r4
 801ea78:	469a      	mov	sl, r3
 801ea7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea7e:	b10a      	cbz	r2, 801ea84 <_svfiprintf_r+0x5c>
 801ea80:	2a25      	cmp	r2, #37	; 0x25
 801ea82:	d1f9      	bne.n	801ea78 <_svfiprintf_r+0x50>
 801ea84:	ebba 0b04 	subs.w	fp, sl, r4
 801ea88:	d00b      	beq.n	801eaa2 <_svfiprintf_r+0x7a>
 801ea8a:	465b      	mov	r3, fp
 801ea8c:	4622      	mov	r2, r4
 801ea8e:	4629      	mov	r1, r5
 801ea90:	4638      	mov	r0, r7
 801ea92:	f7ff ff6d 	bl	801e970 <__ssputs_r>
 801ea96:	3001      	adds	r0, #1
 801ea98:	f000 80aa 	beq.w	801ebf0 <_svfiprintf_r+0x1c8>
 801ea9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea9e:	445a      	add	r2, fp
 801eaa0:	9209      	str	r2, [sp, #36]	; 0x24
 801eaa2:	f89a 3000 	ldrb.w	r3, [sl]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	f000 80a2 	beq.w	801ebf0 <_svfiprintf_r+0x1c8>
 801eaac:	2300      	movs	r3, #0
 801eaae:	f04f 32ff 	mov.w	r2, #4294967295
 801eab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eab6:	f10a 0a01 	add.w	sl, sl, #1
 801eaba:	9304      	str	r3, [sp, #16]
 801eabc:	9307      	str	r3, [sp, #28]
 801eabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801eac2:	931a      	str	r3, [sp, #104]	; 0x68
 801eac4:	4654      	mov	r4, sl
 801eac6:	2205      	movs	r2, #5
 801eac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eacc:	4851      	ldr	r0, [pc, #324]	; (801ec14 <_svfiprintf_r+0x1ec>)
 801eace:	f7e1 fb7f 	bl	80001d0 <memchr>
 801ead2:	9a04      	ldr	r2, [sp, #16]
 801ead4:	b9d8      	cbnz	r0, 801eb0e <_svfiprintf_r+0xe6>
 801ead6:	06d0      	lsls	r0, r2, #27
 801ead8:	bf44      	itt	mi
 801eada:	2320      	movmi	r3, #32
 801eadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eae0:	0711      	lsls	r1, r2, #28
 801eae2:	bf44      	itt	mi
 801eae4:	232b      	movmi	r3, #43	; 0x2b
 801eae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eaea:	f89a 3000 	ldrb.w	r3, [sl]
 801eaee:	2b2a      	cmp	r3, #42	; 0x2a
 801eaf0:	d015      	beq.n	801eb1e <_svfiprintf_r+0xf6>
 801eaf2:	9a07      	ldr	r2, [sp, #28]
 801eaf4:	4654      	mov	r4, sl
 801eaf6:	2000      	movs	r0, #0
 801eaf8:	f04f 0c0a 	mov.w	ip, #10
 801eafc:	4621      	mov	r1, r4
 801eafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eb02:	3b30      	subs	r3, #48	; 0x30
 801eb04:	2b09      	cmp	r3, #9
 801eb06:	d94e      	bls.n	801eba6 <_svfiprintf_r+0x17e>
 801eb08:	b1b0      	cbz	r0, 801eb38 <_svfiprintf_r+0x110>
 801eb0a:	9207      	str	r2, [sp, #28]
 801eb0c:	e014      	b.n	801eb38 <_svfiprintf_r+0x110>
 801eb0e:	eba0 0308 	sub.w	r3, r0, r8
 801eb12:	fa09 f303 	lsl.w	r3, r9, r3
 801eb16:	4313      	orrs	r3, r2
 801eb18:	9304      	str	r3, [sp, #16]
 801eb1a:	46a2      	mov	sl, r4
 801eb1c:	e7d2      	b.n	801eac4 <_svfiprintf_r+0x9c>
 801eb1e:	9b03      	ldr	r3, [sp, #12]
 801eb20:	1d19      	adds	r1, r3, #4
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	9103      	str	r1, [sp, #12]
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	bfbb      	ittet	lt
 801eb2a:	425b      	neglt	r3, r3
 801eb2c:	f042 0202 	orrlt.w	r2, r2, #2
 801eb30:	9307      	strge	r3, [sp, #28]
 801eb32:	9307      	strlt	r3, [sp, #28]
 801eb34:	bfb8      	it	lt
 801eb36:	9204      	strlt	r2, [sp, #16]
 801eb38:	7823      	ldrb	r3, [r4, #0]
 801eb3a:	2b2e      	cmp	r3, #46	; 0x2e
 801eb3c:	d10c      	bne.n	801eb58 <_svfiprintf_r+0x130>
 801eb3e:	7863      	ldrb	r3, [r4, #1]
 801eb40:	2b2a      	cmp	r3, #42	; 0x2a
 801eb42:	d135      	bne.n	801ebb0 <_svfiprintf_r+0x188>
 801eb44:	9b03      	ldr	r3, [sp, #12]
 801eb46:	1d1a      	adds	r2, r3, #4
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	9203      	str	r2, [sp, #12]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	bfb8      	it	lt
 801eb50:	f04f 33ff 	movlt.w	r3, #4294967295
 801eb54:	3402      	adds	r4, #2
 801eb56:	9305      	str	r3, [sp, #20]
 801eb58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ec24 <_svfiprintf_r+0x1fc>
 801eb5c:	7821      	ldrb	r1, [r4, #0]
 801eb5e:	2203      	movs	r2, #3
 801eb60:	4650      	mov	r0, sl
 801eb62:	f7e1 fb35 	bl	80001d0 <memchr>
 801eb66:	b140      	cbz	r0, 801eb7a <_svfiprintf_r+0x152>
 801eb68:	2340      	movs	r3, #64	; 0x40
 801eb6a:	eba0 000a 	sub.w	r0, r0, sl
 801eb6e:	fa03 f000 	lsl.w	r0, r3, r0
 801eb72:	9b04      	ldr	r3, [sp, #16]
 801eb74:	4303      	orrs	r3, r0
 801eb76:	3401      	adds	r4, #1
 801eb78:	9304      	str	r3, [sp, #16]
 801eb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb7e:	4826      	ldr	r0, [pc, #152]	; (801ec18 <_svfiprintf_r+0x1f0>)
 801eb80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eb84:	2206      	movs	r2, #6
 801eb86:	f7e1 fb23 	bl	80001d0 <memchr>
 801eb8a:	2800      	cmp	r0, #0
 801eb8c:	d038      	beq.n	801ec00 <_svfiprintf_r+0x1d8>
 801eb8e:	4b23      	ldr	r3, [pc, #140]	; (801ec1c <_svfiprintf_r+0x1f4>)
 801eb90:	bb1b      	cbnz	r3, 801ebda <_svfiprintf_r+0x1b2>
 801eb92:	9b03      	ldr	r3, [sp, #12]
 801eb94:	3307      	adds	r3, #7
 801eb96:	f023 0307 	bic.w	r3, r3, #7
 801eb9a:	3308      	adds	r3, #8
 801eb9c:	9303      	str	r3, [sp, #12]
 801eb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eba0:	4433      	add	r3, r6
 801eba2:	9309      	str	r3, [sp, #36]	; 0x24
 801eba4:	e767      	b.n	801ea76 <_svfiprintf_r+0x4e>
 801eba6:	fb0c 3202 	mla	r2, ip, r2, r3
 801ebaa:	460c      	mov	r4, r1
 801ebac:	2001      	movs	r0, #1
 801ebae:	e7a5      	b.n	801eafc <_svfiprintf_r+0xd4>
 801ebb0:	2300      	movs	r3, #0
 801ebb2:	3401      	adds	r4, #1
 801ebb4:	9305      	str	r3, [sp, #20]
 801ebb6:	4619      	mov	r1, r3
 801ebb8:	f04f 0c0a 	mov.w	ip, #10
 801ebbc:	4620      	mov	r0, r4
 801ebbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ebc2:	3a30      	subs	r2, #48	; 0x30
 801ebc4:	2a09      	cmp	r2, #9
 801ebc6:	d903      	bls.n	801ebd0 <_svfiprintf_r+0x1a8>
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d0c5      	beq.n	801eb58 <_svfiprintf_r+0x130>
 801ebcc:	9105      	str	r1, [sp, #20]
 801ebce:	e7c3      	b.n	801eb58 <_svfiprintf_r+0x130>
 801ebd0:	fb0c 2101 	mla	r1, ip, r1, r2
 801ebd4:	4604      	mov	r4, r0
 801ebd6:	2301      	movs	r3, #1
 801ebd8:	e7f0      	b.n	801ebbc <_svfiprintf_r+0x194>
 801ebda:	ab03      	add	r3, sp, #12
 801ebdc:	9300      	str	r3, [sp, #0]
 801ebde:	462a      	mov	r2, r5
 801ebe0:	4b0f      	ldr	r3, [pc, #60]	; (801ec20 <_svfiprintf_r+0x1f8>)
 801ebe2:	a904      	add	r1, sp, #16
 801ebe4:	4638      	mov	r0, r7
 801ebe6:	f3af 8000 	nop.w
 801ebea:	1c42      	adds	r2, r0, #1
 801ebec:	4606      	mov	r6, r0
 801ebee:	d1d6      	bne.n	801eb9e <_svfiprintf_r+0x176>
 801ebf0:	89ab      	ldrh	r3, [r5, #12]
 801ebf2:	065b      	lsls	r3, r3, #25
 801ebf4:	f53f af2c 	bmi.w	801ea50 <_svfiprintf_r+0x28>
 801ebf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebfa:	b01d      	add	sp, #116	; 0x74
 801ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec00:	ab03      	add	r3, sp, #12
 801ec02:	9300      	str	r3, [sp, #0]
 801ec04:	462a      	mov	r2, r5
 801ec06:	4b06      	ldr	r3, [pc, #24]	; (801ec20 <_svfiprintf_r+0x1f8>)
 801ec08:	a904      	add	r1, sp, #16
 801ec0a:	4638      	mov	r0, r7
 801ec0c:	f7fd fdc4 	bl	801c798 <_printf_i>
 801ec10:	e7eb      	b.n	801ebea <_svfiprintf_r+0x1c2>
 801ec12:	bf00      	nop
 801ec14:	08031c94 	.word	0x08031c94
 801ec18:	08031c9e 	.word	0x08031c9e
 801ec1c:	00000000 	.word	0x00000000
 801ec20:	0801e971 	.word	0x0801e971
 801ec24:	08031c9a 	.word	0x08031c9a

0801ec28 <_read_r>:
 801ec28:	b538      	push	{r3, r4, r5, lr}
 801ec2a:	4d07      	ldr	r5, [pc, #28]	; (801ec48 <_read_r+0x20>)
 801ec2c:	4604      	mov	r4, r0
 801ec2e:	4608      	mov	r0, r1
 801ec30:	4611      	mov	r1, r2
 801ec32:	2200      	movs	r2, #0
 801ec34:	602a      	str	r2, [r5, #0]
 801ec36:	461a      	mov	r2, r3
 801ec38:	f7e2 f88f 	bl	8000d5a <_read>
 801ec3c:	1c43      	adds	r3, r0, #1
 801ec3e:	d102      	bne.n	801ec46 <_read_r+0x1e>
 801ec40:	682b      	ldr	r3, [r5, #0]
 801ec42:	b103      	cbz	r3, 801ec46 <_read_r+0x1e>
 801ec44:	6023      	str	r3, [r4, #0]
 801ec46:	bd38      	pop	{r3, r4, r5, pc}
 801ec48:	20016130 	.word	0x20016130

0801ec4c <_raise_r>:
 801ec4c:	291f      	cmp	r1, #31
 801ec4e:	b538      	push	{r3, r4, r5, lr}
 801ec50:	4604      	mov	r4, r0
 801ec52:	460d      	mov	r5, r1
 801ec54:	d904      	bls.n	801ec60 <_raise_r+0x14>
 801ec56:	2316      	movs	r3, #22
 801ec58:	6003      	str	r3, [r0, #0]
 801ec5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ec5e:	bd38      	pop	{r3, r4, r5, pc}
 801ec60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ec62:	b112      	cbz	r2, 801ec6a <_raise_r+0x1e>
 801ec64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ec68:	b94b      	cbnz	r3, 801ec7e <_raise_r+0x32>
 801ec6a:	4620      	mov	r0, r4
 801ec6c:	f000 f830 	bl	801ecd0 <_getpid_r>
 801ec70:	462a      	mov	r2, r5
 801ec72:	4601      	mov	r1, r0
 801ec74:	4620      	mov	r0, r4
 801ec76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec7a:	f000 b817 	b.w	801ecac <_kill_r>
 801ec7e:	2b01      	cmp	r3, #1
 801ec80:	d00a      	beq.n	801ec98 <_raise_r+0x4c>
 801ec82:	1c59      	adds	r1, r3, #1
 801ec84:	d103      	bne.n	801ec8e <_raise_r+0x42>
 801ec86:	2316      	movs	r3, #22
 801ec88:	6003      	str	r3, [r0, #0]
 801ec8a:	2001      	movs	r0, #1
 801ec8c:	e7e7      	b.n	801ec5e <_raise_r+0x12>
 801ec8e:	2400      	movs	r4, #0
 801ec90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ec94:	4628      	mov	r0, r5
 801ec96:	4798      	blx	r3
 801ec98:	2000      	movs	r0, #0
 801ec9a:	e7e0      	b.n	801ec5e <_raise_r+0x12>

0801ec9c <raise>:
 801ec9c:	4b02      	ldr	r3, [pc, #8]	; (801eca8 <raise+0xc>)
 801ec9e:	4601      	mov	r1, r0
 801eca0:	6818      	ldr	r0, [r3, #0]
 801eca2:	f7ff bfd3 	b.w	801ec4c <_raise_r>
 801eca6:	bf00      	nop
 801eca8:	2000011c 	.word	0x2000011c

0801ecac <_kill_r>:
 801ecac:	b538      	push	{r3, r4, r5, lr}
 801ecae:	4d07      	ldr	r5, [pc, #28]	; (801eccc <_kill_r+0x20>)
 801ecb0:	2300      	movs	r3, #0
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	4608      	mov	r0, r1
 801ecb6:	4611      	mov	r1, r2
 801ecb8:	602b      	str	r3, [r5, #0]
 801ecba:	f7e2 f827 	bl	8000d0c <_kill>
 801ecbe:	1c43      	adds	r3, r0, #1
 801ecc0:	d102      	bne.n	801ecc8 <_kill_r+0x1c>
 801ecc2:	682b      	ldr	r3, [r5, #0]
 801ecc4:	b103      	cbz	r3, 801ecc8 <_kill_r+0x1c>
 801ecc6:	6023      	str	r3, [r4, #0]
 801ecc8:	bd38      	pop	{r3, r4, r5, pc}
 801ecca:	bf00      	nop
 801eccc:	20016130 	.word	0x20016130

0801ecd0 <_getpid_r>:
 801ecd0:	f7e2 b81a 	b.w	8000d08 <_getpid>

0801ecd4 <siscanf>:
 801ecd4:	b40e      	push	{r1, r2, r3}
 801ecd6:	b510      	push	{r4, lr}
 801ecd8:	b09f      	sub	sp, #124	; 0x7c
 801ecda:	ac21      	add	r4, sp, #132	; 0x84
 801ecdc:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ece0:	f854 2b04 	ldr.w	r2, [r4], #4
 801ece4:	9201      	str	r2, [sp, #4]
 801ece6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ecea:	9004      	str	r0, [sp, #16]
 801ecec:	9008      	str	r0, [sp, #32]
 801ecee:	f7e1 fac9 	bl	8000284 <strlen>
 801ecf2:	4b0c      	ldr	r3, [pc, #48]	; (801ed24 <siscanf+0x50>)
 801ecf4:	9005      	str	r0, [sp, #20]
 801ecf6:	9009      	str	r0, [sp, #36]	; 0x24
 801ecf8:	930d      	str	r3, [sp, #52]	; 0x34
 801ecfa:	480b      	ldr	r0, [pc, #44]	; (801ed28 <siscanf+0x54>)
 801ecfc:	9a01      	ldr	r2, [sp, #4]
 801ecfe:	6800      	ldr	r0, [r0, #0]
 801ed00:	9403      	str	r4, [sp, #12]
 801ed02:	2300      	movs	r3, #0
 801ed04:	9311      	str	r3, [sp, #68]	; 0x44
 801ed06:	9316      	str	r3, [sp, #88]	; 0x58
 801ed08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ed0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ed10:	a904      	add	r1, sp, #16
 801ed12:	4623      	mov	r3, r4
 801ed14:	f000 f8a8 	bl	801ee68 <__ssvfiscanf_r>
 801ed18:	b01f      	add	sp, #124	; 0x7c
 801ed1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed1e:	b003      	add	sp, #12
 801ed20:	4770      	bx	lr
 801ed22:	bf00      	nop
 801ed24:	0801cd2f 	.word	0x0801cd2f
 801ed28:	2000011c 	.word	0x2000011c

0801ed2c <__ascii_wctomb>:
 801ed2c:	b149      	cbz	r1, 801ed42 <__ascii_wctomb+0x16>
 801ed2e:	2aff      	cmp	r2, #255	; 0xff
 801ed30:	bf85      	ittet	hi
 801ed32:	238a      	movhi	r3, #138	; 0x8a
 801ed34:	6003      	strhi	r3, [r0, #0]
 801ed36:	700a      	strbls	r2, [r1, #0]
 801ed38:	f04f 30ff 	movhi.w	r0, #4294967295
 801ed3c:	bf98      	it	ls
 801ed3e:	2001      	movls	r0, #1
 801ed40:	4770      	bx	lr
 801ed42:	4608      	mov	r0, r1
 801ed44:	4770      	bx	lr
	...

0801ed48 <__env_lock>:
 801ed48:	4801      	ldr	r0, [pc, #4]	; (801ed50 <__env_lock+0x8>)
 801ed4a:	f7fd ba57 	b.w	801c1fc <__retarget_lock_acquire_recursive>
 801ed4e:	bf00      	nop
 801ed50:	2001613a 	.word	0x2001613a

0801ed54 <__env_unlock>:
 801ed54:	4801      	ldr	r0, [pc, #4]	; (801ed5c <__env_unlock+0x8>)
 801ed56:	f7fd ba53 	b.w	801c200 <__retarget_lock_release_recursive>
 801ed5a:	bf00      	nop
 801ed5c:	2001613a 	.word	0x2001613a

0801ed60 <_fstat_r>:
 801ed60:	b538      	push	{r3, r4, r5, lr}
 801ed62:	4d07      	ldr	r5, [pc, #28]	; (801ed80 <_fstat_r+0x20>)
 801ed64:	2300      	movs	r3, #0
 801ed66:	4604      	mov	r4, r0
 801ed68:	4608      	mov	r0, r1
 801ed6a:	4611      	mov	r1, r2
 801ed6c:	602b      	str	r3, [r5, #0]
 801ed6e:	f7e1 ffeb 	bl	8000d48 <_fstat>
 801ed72:	1c43      	adds	r3, r0, #1
 801ed74:	d102      	bne.n	801ed7c <_fstat_r+0x1c>
 801ed76:	682b      	ldr	r3, [r5, #0]
 801ed78:	b103      	cbz	r3, 801ed7c <_fstat_r+0x1c>
 801ed7a:	6023      	str	r3, [r4, #0]
 801ed7c:	bd38      	pop	{r3, r4, r5, pc}
 801ed7e:	bf00      	nop
 801ed80:	20016130 	.word	0x20016130

0801ed84 <_isatty_r>:
 801ed84:	b538      	push	{r3, r4, r5, lr}
 801ed86:	4d06      	ldr	r5, [pc, #24]	; (801eda0 <_isatty_r+0x1c>)
 801ed88:	2300      	movs	r3, #0
 801ed8a:	4604      	mov	r4, r0
 801ed8c:	4608      	mov	r0, r1
 801ed8e:	602b      	str	r3, [r5, #0]
 801ed90:	f7e1 ffdf 	bl	8000d52 <_isatty>
 801ed94:	1c43      	adds	r3, r0, #1
 801ed96:	d102      	bne.n	801ed9e <_isatty_r+0x1a>
 801ed98:	682b      	ldr	r3, [r5, #0]
 801ed9a:	b103      	cbz	r3, 801ed9e <_isatty_r+0x1a>
 801ed9c:	6023      	str	r3, [r4, #0]
 801ed9e:	bd38      	pop	{r3, r4, r5, pc}
 801eda0:	20016130 	.word	0x20016130

0801eda4 <_malloc_usable_size_r>:
 801eda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eda8:	1f18      	subs	r0, r3, #4
 801edaa:	2b00      	cmp	r3, #0
 801edac:	bfbc      	itt	lt
 801edae:	580b      	ldrlt	r3, [r1, r0]
 801edb0:	18c0      	addlt	r0, r0, r3
 801edb2:	4770      	bx	lr

0801edb4 <_sungetc_r>:
 801edb4:	b538      	push	{r3, r4, r5, lr}
 801edb6:	1c4b      	adds	r3, r1, #1
 801edb8:	4614      	mov	r4, r2
 801edba:	d103      	bne.n	801edc4 <_sungetc_r+0x10>
 801edbc:	f04f 35ff 	mov.w	r5, #4294967295
 801edc0:	4628      	mov	r0, r5
 801edc2:	bd38      	pop	{r3, r4, r5, pc}
 801edc4:	8993      	ldrh	r3, [r2, #12]
 801edc6:	f023 0320 	bic.w	r3, r3, #32
 801edca:	8193      	strh	r3, [r2, #12]
 801edcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801edce:	6852      	ldr	r2, [r2, #4]
 801edd0:	b2cd      	uxtb	r5, r1
 801edd2:	b18b      	cbz	r3, 801edf8 <_sungetc_r+0x44>
 801edd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801edd6:	4293      	cmp	r3, r2
 801edd8:	dd08      	ble.n	801edec <_sungetc_r+0x38>
 801edda:	6823      	ldr	r3, [r4, #0]
 801eddc:	1e5a      	subs	r2, r3, #1
 801edde:	6022      	str	r2, [r4, #0]
 801ede0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ede4:	6863      	ldr	r3, [r4, #4]
 801ede6:	3301      	adds	r3, #1
 801ede8:	6063      	str	r3, [r4, #4]
 801edea:	e7e9      	b.n	801edc0 <_sungetc_r+0xc>
 801edec:	4621      	mov	r1, r4
 801edee:	f000 fb39 	bl	801f464 <__submore>
 801edf2:	2800      	cmp	r0, #0
 801edf4:	d0f1      	beq.n	801edda <_sungetc_r+0x26>
 801edf6:	e7e1      	b.n	801edbc <_sungetc_r+0x8>
 801edf8:	6921      	ldr	r1, [r4, #16]
 801edfa:	6823      	ldr	r3, [r4, #0]
 801edfc:	b151      	cbz	r1, 801ee14 <_sungetc_r+0x60>
 801edfe:	4299      	cmp	r1, r3
 801ee00:	d208      	bcs.n	801ee14 <_sungetc_r+0x60>
 801ee02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ee06:	42a9      	cmp	r1, r5
 801ee08:	d104      	bne.n	801ee14 <_sungetc_r+0x60>
 801ee0a:	3b01      	subs	r3, #1
 801ee0c:	3201      	adds	r2, #1
 801ee0e:	6023      	str	r3, [r4, #0]
 801ee10:	6062      	str	r2, [r4, #4]
 801ee12:	e7d5      	b.n	801edc0 <_sungetc_r+0xc>
 801ee14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ee18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee1c:	6363      	str	r3, [r4, #52]	; 0x34
 801ee1e:	2303      	movs	r3, #3
 801ee20:	63a3      	str	r3, [r4, #56]	; 0x38
 801ee22:	4623      	mov	r3, r4
 801ee24:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ee28:	6023      	str	r3, [r4, #0]
 801ee2a:	2301      	movs	r3, #1
 801ee2c:	e7dc      	b.n	801ede8 <_sungetc_r+0x34>

0801ee2e <__ssrefill_r>:
 801ee2e:	b510      	push	{r4, lr}
 801ee30:	460c      	mov	r4, r1
 801ee32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ee34:	b169      	cbz	r1, 801ee52 <__ssrefill_r+0x24>
 801ee36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee3a:	4299      	cmp	r1, r3
 801ee3c:	d001      	beq.n	801ee42 <__ssrefill_r+0x14>
 801ee3e:	f7fd fa2f 	bl	801c2a0 <_free_r>
 801ee42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ee44:	6063      	str	r3, [r4, #4]
 801ee46:	2000      	movs	r0, #0
 801ee48:	6360      	str	r0, [r4, #52]	; 0x34
 801ee4a:	b113      	cbz	r3, 801ee52 <__ssrefill_r+0x24>
 801ee4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ee4e:	6023      	str	r3, [r4, #0]
 801ee50:	bd10      	pop	{r4, pc}
 801ee52:	6923      	ldr	r3, [r4, #16]
 801ee54:	6023      	str	r3, [r4, #0]
 801ee56:	2300      	movs	r3, #0
 801ee58:	6063      	str	r3, [r4, #4]
 801ee5a:	89a3      	ldrh	r3, [r4, #12]
 801ee5c:	f043 0320 	orr.w	r3, r3, #32
 801ee60:	81a3      	strh	r3, [r4, #12]
 801ee62:	f04f 30ff 	mov.w	r0, #4294967295
 801ee66:	e7f3      	b.n	801ee50 <__ssrefill_r+0x22>

0801ee68 <__ssvfiscanf_r>:
 801ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee6c:	460c      	mov	r4, r1
 801ee6e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801ee72:	2100      	movs	r1, #0
 801ee74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ee78:	49b2      	ldr	r1, [pc, #712]	; (801f144 <__ssvfiscanf_r+0x2dc>)
 801ee7a:	91a0      	str	r1, [sp, #640]	; 0x280
 801ee7c:	f10d 0804 	add.w	r8, sp, #4
 801ee80:	49b1      	ldr	r1, [pc, #708]	; (801f148 <__ssvfiscanf_r+0x2e0>)
 801ee82:	4fb2      	ldr	r7, [pc, #712]	; (801f14c <__ssvfiscanf_r+0x2e4>)
 801ee84:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f150 <__ssvfiscanf_r+0x2e8>
 801ee88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ee8c:	4606      	mov	r6, r0
 801ee8e:	91a1      	str	r1, [sp, #644]	; 0x284
 801ee90:	9300      	str	r3, [sp, #0]
 801ee92:	f892 a000 	ldrb.w	sl, [r2]
 801ee96:	f1ba 0f00 	cmp.w	sl, #0
 801ee9a:	f000 8151 	beq.w	801f140 <__ssvfiscanf_r+0x2d8>
 801ee9e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801eea2:	f013 0308 	ands.w	r3, r3, #8
 801eea6:	f102 0501 	add.w	r5, r2, #1
 801eeaa:	d019      	beq.n	801eee0 <__ssvfiscanf_r+0x78>
 801eeac:	6863      	ldr	r3, [r4, #4]
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	dd0f      	ble.n	801eed2 <__ssvfiscanf_r+0x6a>
 801eeb2:	6823      	ldr	r3, [r4, #0]
 801eeb4:	781a      	ldrb	r2, [r3, #0]
 801eeb6:	5cba      	ldrb	r2, [r7, r2]
 801eeb8:	0712      	lsls	r2, r2, #28
 801eeba:	d401      	bmi.n	801eec0 <__ssvfiscanf_r+0x58>
 801eebc:	462a      	mov	r2, r5
 801eebe:	e7e8      	b.n	801ee92 <__ssvfiscanf_r+0x2a>
 801eec0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801eec2:	3201      	adds	r2, #1
 801eec4:	9245      	str	r2, [sp, #276]	; 0x114
 801eec6:	6862      	ldr	r2, [r4, #4]
 801eec8:	3301      	adds	r3, #1
 801eeca:	3a01      	subs	r2, #1
 801eecc:	6062      	str	r2, [r4, #4]
 801eece:	6023      	str	r3, [r4, #0]
 801eed0:	e7ec      	b.n	801eeac <__ssvfiscanf_r+0x44>
 801eed2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801eed4:	4621      	mov	r1, r4
 801eed6:	4630      	mov	r0, r6
 801eed8:	4798      	blx	r3
 801eeda:	2800      	cmp	r0, #0
 801eedc:	d0e9      	beq.n	801eeb2 <__ssvfiscanf_r+0x4a>
 801eede:	e7ed      	b.n	801eebc <__ssvfiscanf_r+0x54>
 801eee0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801eee4:	f040 8083 	bne.w	801efee <__ssvfiscanf_r+0x186>
 801eee8:	9341      	str	r3, [sp, #260]	; 0x104
 801eeea:	9343      	str	r3, [sp, #268]	; 0x10c
 801eeec:	7853      	ldrb	r3, [r2, #1]
 801eeee:	2b2a      	cmp	r3, #42	; 0x2a
 801eef0:	bf02      	ittt	eq
 801eef2:	2310      	moveq	r3, #16
 801eef4:	1c95      	addeq	r5, r2, #2
 801eef6:	9341      	streq	r3, [sp, #260]	; 0x104
 801eef8:	220a      	movs	r2, #10
 801eefa:	46ab      	mov	fp, r5
 801eefc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ef00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ef04:	2b09      	cmp	r3, #9
 801ef06:	d91d      	bls.n	801ef44 <__ssvfiscanf_r+0xdc>
 801ef08:	4891      	ldr	r0, [pc, #580]	; (801f150 <__ssvfiscanf_r+0x2e8>)
 801ef0a:	2203      	movs	r2, #3
 801ef0c:	f7e1 f960 	bl	80001d0 <memchr>
 801ef10:	b140      	cbz	r0, 801ef24 <__ssvfiscanf_r+0xbc>
 801ef12:	2301      	movs	r3, #1
 801ef14:	eba0 0009 	sub.w	r0, r0, r9
 801ef18:	fa03 f000 	lsl.w	r0, r3, r0
 801ef1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ef1e:	4318      	orrs	r0, r3
 801ef20:	9041      	str	r0, [sp, #260]	; 0x104
 801ef22:	465d      	mov	r5, fp
 801ef24:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef28:	2b78      	cmp	r3, #120	; 0x78
 801ef2a:	d806      	bhi.n	801ef3a <__ssvfiscanf_r+0xd2>
 801ef2c:	2b57      	cmp	r3, #87	; 0x57
 801ef2e:	d810      	bhi.n	801ef52 <__ssvfiscanf_r+0xea>
 801ef30:	2b25      	cmp	r3, #37	; 0x25
 801ef32:	d05c      	beq.n	801efee <__ssvfiscanf_r+0x186>
 801ef34:	d856      	bhi.n	801efe4 <__ssvfiscanf_r+0x17c>
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d074      	beq.n	801f024 <__ssvfiscanf_r+0x1bc>
 801ef3a:	2303      	movs	r3, #3
 801ef3c:	9347      	str	r3, [sp, #284]	; 0x11c
 801ef3e:	230a      	movs	r3, #10
 801ef40:	9342      	str	r3, [sp, #264]	; 0x108
 801ef42:	e081      	b.n	801f048 <__ssvfiscanf_r+0x1e0>
 801ef44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ef46:	fb02 1303 	mla	r3, r2, r3, r1
 801ef4a:	3b30      	subs	r3, #48	; 0x30
 801ef4c:	9343      	str	r3, [sp, #268]	; 0x10c
 801ef4e:	465d      	mov	r5, fp
 801ef50:	e7d3      	b.n	801eefa <__ssvfiscanf_r+0x92>
 801ef52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ef56:	2a20      	cmp	r2, #32
 801ef58:	d8ef      	bhi.n	801ef3a <__ssvfiscanf_r+0xd2>
 801ef5a:	a101      	add	r1, pc, #4	; (adr r1, 801ef60 <__ssvfiscanf_r+0xf8>)
 801ef5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ef60:	0801f033 	.word	0x0801f033
 801ef64:	0801ef3b 	.word	0x0801ef3b
 801ef68:	0801ef3b 	.word	0x0801ef3b
 801ef6c:	0801f091 	.word	0x0801f091
 801ef70:	0801ef3b 	.word	0x0801ef3b
 801ef74:	0801ef3b 	.word	0x0801ef3b
 801ef78:	0801ef3b 	.word	0x0801ef3b
 801ef7c:	0801ef3b 	.word	0x0801ef3b
 801ef80:	0801ef3b 	.word	0x0801ef3b
 801ef84:	0801ef3b 	.word	0x0801ef3b
 801ef88:	0801ef3b 	.word	0x0801ef3b
 801ef8c:	0801f0a7 	.word	0x0801f0a7
 801ef90:	0801f07d 	.word	0x0801f07d
 801ef94:	0801efeb 	.word	0x0801efeb
 801ef98:	0801efeb 	.word	0x0801efeb
 801ef9c:	0801efeb 	.word	0x0801efeb
 801efa0:	0801ef3b 	.word	0x0801ef3b
 801efa4:	0801f081 	.word	0x0801f081
 801efa8:	0801ef3b 	.word	0x0801ef3b
 801efac:	0801ef3b 	.word	0x0801ef3b
 801efb0:	0801ef3b 	.word	0x0801ef3b
 801efb4:	0801ef3b 	.word	0x0801ef3b
 801efb8:	0801f0b7 	.word	0x0801f0b7
 801efbc:	0801f089 	.word	0x0801f089
 801efc0:	0801f02b 	.word	0x0801f02b
 801efc4:	0801ef3b 	.word	0x0801ef3b
 801efc8:	0801ef3b 	.word	0x0801ef3b
 801efcc:	0801f0b3 	.word	0x0801f0b3
 801efd0:	0801ef3b 	.word	0x0801ef3b
 801efd4:	0801f07d 	.word	0x0801f07d
 801efd8:	0801ef3b 	.word	0x0801ef3b
 801efdc:	0801ef3b 	.word	0x0801ef3b
 801efe0:	0801f033 	.word	0x0801f033
 801efe4:	3b45      	subs	r3, #69	; 0x45
 801efe6:	2b02      	cmp	r3, #2
 801efe8:	d8a7      	bhi.n	801ef3a <__ssvfiscanf_r+0xd2>
 801efea:	2305      	movs	r3, #5
 801efec:	e02b      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801efee:	6863      	ldr	r3, [r4, #4]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	dd0d      	ble.n	801f010 <__ssvfiscanf_r+0x1a8>
 801eff4:	6823      	ldr	r3, [r4, #0]
 801eff6:	781a      	ldrb	r2, [r3, #0]
 801eff8:	4552      	cmp	r2, sl
 801effa:	f040 80a1 	bne.w	801f140 <__ssvfiscanf_r+0x2d8>
 801effe:	3301      	adds	r3, #1
 801f000:	6862      	ldr	r2, [r4, #4]
 801f002:	6023      	str	r3, [r4, #0]
 801f004:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f006:	3a01      	subs	r2, #1
 801f008:	3301      	adds	r3, #1
 801f00a:	6062      	str	r2, [r4, #4]
 801f00c:	9345      	str	r3, [sp, #276]	; 0x114
 801f00e:	e755      	b.n	801eebc <__ssvfiscanf_r+0x54>
 801f010:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f012:	4621      	mov	r1, r4
 801f014:	4630      	mov	r0, r6
 801f016:	4798      	blx	r3
 801f018:	2800      	cmp	r0, #0
 801f01a:	d0eb      	beq.n	801eff4 <__ssvfiscanf_r+0x18c>
 801f01c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f01e:	2800      	cmp	r0, #0
 801f020:	f040 8084 	bne.w	801f12c <__ssvfiscanf_r+0x2c4>
 801f024:	f04f 30ff 	mov.w	r0, #4294967295
 801f028:	e086      	b.n	801f138 <__ssvfiscanf_r+0x2d0>
 801f02a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f02c:	f042 0220 	orr.w	r2, r2, #32
 801f030:	9241      	str	r2, [sp, #260]	; 0x104
 801f032:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f038:	9241      	str	r2, [sp, #260]	; 0x104
 801f03a:	2210      	movs	r2, #16
 801f03c:	2b6f      	cmp	r3, #111	; 0x6f
 801f03e:	9242      	str	r2, [sp, #264]	; 0x108
 801f040:	bf34      	ite	cc
 801f042:	2303      	movcc	r3, #3
 801f044:	2304      	movcs	r3, #4
 801f046:	9347      	str	r3, [sp, #284]	; 0x11c
 801f048:	6863      	ldr	r3, [r4, #4]
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	dd41      	ble.n	801f0d2 <__ssvfiscanf_r+0x26a>
 801f04e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f050:	0659      	lsls	r1, r3, #25
 801f052:	d404      	bmi.n	801f05e <__ssvfiscanf_r+0x1f6>
 801f054:	6823      	ldr	r3, [r4, #0]
 801f056:	781a      	ldrb	r2, [r3, #0]
 801f058:	5cba      	ldrb	r2, [r7, r2]
 801f05a:	0712      	lsls	r2, r2, #28
 801f05c:	d440      	bmi.n	801f0e0 <__ssvfiscanf_r+0x278>
 801f05e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f060:	2b02      	cmp	r3, #2
 801f062:	dc4f      	bgt.n	801f104 <__ssvfiscanf_r+0x29c>
 801f064:	466b      	mov	r3, sp
 801f066:	4622      	mov	r2, r4
 801f068:	a941      	add	r1, sp, #260	; 0x104
 801f06a:	4630      	mov	r0, r6
 801f06c:	f000 f874 	bl	801f158 <_scanf_chars>
 801f070:	2801      	cmp	r0, #1
 801f072:	d065      	beq.n	801f140 <__ssvfiscanf_r+0x2d8>
 801f074:	2802      	cmp	r0, #2
 801f076:	f47f af21 	bne.w	801eebc <__ssvfiscanf_r+0x54>
 801f07a:	e7cf      	b.n	801f01c <__ssvfiscanf_r+0x1b4>
 801f07c:	220a      	movs	r2, #10
 801f07e:	e7dd      	b.n	801f03c <__ssvfiscanf_r+0x1d4>
 801f080:	2300      	movs	r3, #0
 801f082:	9342      	str	r3, [sp, #264]	; 0x108
 801f084:	2303      	movs	r3, #3
 801f086:	e7de      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801f088:	2308      	movs	r3, #8
 801f08a:	9342      	str	r3, [sp, #264]	; 0x108
 801f08c:	2304      	movs	r3, #4
 801f08e:	e7da      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801f090:	4629      	mov	r1, r5
 801f092:	4640      	mov	r0, r8
 801f094:	f000 f9ac 	bl	801f3f0 <__sccl>
 801f098:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f09e:	9341      	str	r3, [sp, #260]	; 0x104
 801f0a0:	4605      	mov	r5, r0
 801f0a2:	2301      	movs	r3, #1
 801f0a4:	e7cf      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801f0a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0ac:	9341      	str	r3, [sp, #260]	; 0x104
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	e7c9      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801f0b2:	2302      	movs	r3, #2
 801f0b4:	e7c7      	b.n	801f046 <__ssvfiscanf_r+0x1de>
 801f0b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f0b8:	06c3      	lsls	r3, r0, #27
 801f0ba:	f53f aeff 	bmi.w	801eebc <__ssvfiscanf_r+0x54>
 801f0be:	9b00      	ldr	r3, [sp, #0]
 801f0c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f0c2:	1d19      	adds	r1, r3, #4
 801f0c4:	9100      	str	r1, [sp, #0]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	07c0      	lsls	r0, r0, #31
 801f0ca:	bf4c      	ite	mi
 801f0cc:	801a      	strhmi	r2, [r3, #0]
 801f0ce:	601a      	strpl	r2, [r3, #0]
 801f0d0:	e6f4      	b.n	801eebc <__ssvfiscanf_r+0x54>
 801f0d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	4798      	blx	r3
 801f0da:	2800      	cmp	r0, #0
 801f0dc:	d0b7      	beq.n	801f04e <__ssvfiscanf_r+0x1e6>
 801f0de:	e79d      	b.n	801f01c <__ssvfiscanf_r+0x1b4>
 801f0e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f0e2:	3201      	adds	r2, #1
 801f0e4:	9245      	str	r2, [sp, #276]	; 0x114
 801f0e6:	6862      	ldr	r2, [r4, #4]
 801f0e8:	3a01      	subs	r2, #1
 801f0ea:	2a00      	cmp	r2, #0
 801f0ec:	6062      	str	r2, [r4, #4]
 801f0ee:	dd02      	ble.n	801f0f6 <__ssvfiscanf_r+0x28e>
 801f0f0:	3301      	adds	r3, #1
 801f0f2:	6023      	str	r3, [r4, #0]
 801f0f4:	e7ae      	b.n	801f054 <__ssvfiscanf_r+0x1ec>
 801f0f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f0f8:	4621      	mov	r1, r4
 801f0fa:	4630      	mov	r0, r6
 801f0fc:	4798      	blx	r3
 801f0fe:	2800      	cmp	r0, #0
 801f100:	d0a8      	beq.n	801f054 <__ssvfiscanf_r+0x1ec>
 801f102:	e78b      	b.n	801f01c <__ssvfiscanf_r+0x1b4>
 801f104:	2b04      	cmp	r3, #4
 801f106:	dc06      	bgt.n	801f116 <__ssvfiscanf_r+0x2ae>
 801f108:	466b      	mov	r3, sp
 801f10a:	4622      	mov	r2, r4
 801f10c:	a941      	add	r1, sp, #260	; 0x104
 801f10e:	4630      	mov	r0, r6
 801f110:	f000 f87a 	bl	801f208 <_scanf_i>
 801f114:	e7ac      	b.n	801f070 <__ssvfiscanf_r+0x208>
 801f116:	4b0f      	ldr	r3, [pc, #60]	; (801f154 <__ssvfiscanf_r+0x2ec>)
 801f118:	2b00      	cmp	r3, #0
 801f11a:	f43f aecf 	beq.w	801eebc <__ssvfiscanf_r+0x54>
 801f11e:	466b      	mov	r3, sp
 801f120:	4622      	mov	r2, r4
 801f122:	a941      	add	r1, sp, #260	; 0x104
 801f124:	4630      	mov	r0, r6
 801f126:	f3af 8000 	nop.w
 801f12a:	e7a1      	b.n	801f070 <__ssvfiscanf_r+0x208>
 801f12c:	89a3      	ldrh	r3, [r4, #12]
 801f12e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f132:	bf18      	it	ne
 801f134:	f04f 30ff 	movne.w	r0, #4294967295
 801f138:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f140:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f142:	e7f9      	b.n	801f138 <__ssvfiscanf_r+0x2d0>
 801f144:	0801edb5 	.word	0x0801edb5
 801f148:	0801ee2f 	.word	0x0801ee2f
 801f14c:	08031a55 	.word	0x08031a55
 801f150:	08031c9a 	.word	0x08031c9a
 801f154:	00000000 	.word	0x00000000

0801f158 <_scanf_chars>:
 801f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f15c:	4615      	mov	r5, r2
 801f15e:	688a      	ldr	r2, [r1, #8]
 801f160:	4680      	mov	r8, r0
 801f162:	460c      	mov	r4, r1
 801f164:	b932      	cbnz	r2, 801f174 <_scanf_chars+0x1c>
 801f166:	698a      	ldr	r2, [r1, #24]
 801f168:	2a00      	cmp	r2, #0
 801f16a:	bf0c      	ite	eq
 801f16c:	2201      	moveq	r2, #1
 801f16e:	f04f 32ff 	movne.w	r2, #4294967295
 801f172:	608a      	str	r2, [r1, #8]
 801f174:	6822      	ldr	r2, [r4, #0]
 801f176:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f204 <_scanf_chars+0xac>
 801f17a:	06d1      	lsls	r1, r2, #27
 801f17c:	bf5f      	itttt	pl
 801f17e:	681a      	ldrpl	r2, [r3, #0]
 801f180:	1d11      	addpl	r1, r2, #4
 801f182:	6019      	strpl	r1, [r3, #0]
 801f184:	6816      	ldrpl	r6, [r2, #0]
 801f186:	2700      	movs	r7, #0
 801f188:	69a0      	ldr	r0, [r4, #24]
 801f18a:	b188      	cbz	r0, 801f1b0 <_scanf_chars+0x58>
 801f18c:	2801      	cmp	r0, #1
 801f18e:	d107      	bne.n	801f1a0 <_scanf_chars+0x48>
 801f190:	682b      	ldr	r3, [r5, #0]
 801f192:	781a      	ldrb	r2, [r3, #0]
 801f194:	6963      	ldr	r3, [r4, #20]
 801f196:	5c9b      	ldrb	r3, [r3, r2]
 801f198:	b953      	cbnz	r3, 801f1b0 <_scanf_chars+0x58>
 801f19a:	bb27      	cbnz	r7, 801f1e6 <_scanf_chars+0x8e>
 801f19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1a0:	2802      	cmp	r0, #2
 801f1a2:	d120      	bne.n	801f1e6 <_scanf_chars+0x8e>
 801f1a4:	682b      	ldr	r3, [r5, #0]
 801f1a6:	781b      	ldrb	r3, [r3, #0]
 801f1a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 801f1ac:	071b      	lsls	r3, r3, #28
 801f1ae:	d41a      	bmi.n	801f1e6 <_scanf_chars+0x8e>
 801f1b0:	6823      	ldr	r3, [r4, #0]
 801f1b2:	06da      	lsls	r2, r3, #27
 801f1b4:	bf5e      	ittt	pl
 801f1b6:	682b      	ldrpl	r3, [r5, #0]
 801f1b8:	781b      	ldrbpl	r3, [r3, #0]
 801f1ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f1be:	682a      	ldr	r2, [r5, #0]
 801f1c0:	686b      	ldr	r3, [r5, #4]
 801f1c2:	3201      	adds	r2, #1
 801f1c4:	602a      	str	r2, [r5, #0]
 801f1c6:	68a2      	ldr	r2, [r4, #8]
 801f1c8:	3b01      	subs	r3, #1
 801f1ca:	3a01      	subs	r2, #1
 801f1cc:	606b      	str	r3, [r5, #4]
 801f1ce:	3701      	adds	r7, #1
 801f1d0:	60a2      	str	r2, [r4, #8]
 801f1d2:	b142      	cbz	r2, 801f1e6 <_scanf_chars+0x8e>
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	dcd7      	bgt.n	801f188 <_scanf_chars+0x30>
 801f1d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f1dc:	4629      	mov	r1, r5
 801f1de:	4640      	mov	r0, r8
 801f1e0:	4798      	blx	r3
 801f1e2:	2800      	cmp	r0, #0
 801f1e4:	d0d0      	beq.n	801f188 <_scanf_chars+0x30>
 801f1e6:	6823      	ldr	r3, [r4, #0]
 801f1e8:	f013 0310 	ands.w	r3, r3, #16
 801f1ec:	d105      	bne.n	801f1fa <_scanf_chars+0xa2>
 801f1ee:	68e2      	ldr	r2, [r4, #12]
 801f1f0:	3201      	adds	r2, #1
 801f1f2:	60e2      	str	r2, [r4, #12]
 801f1f4:	69a2      	ldr	r2, [r4, #24]
 801f1f6:	b102      	cbz	r2, 801f1fa <_scanf_chars+0xa2>
 801f1f8:	7033      	strb	r3, [r6, #0]
 801f1fa:	6923      	ldr	r3, [r4, #16]
 801f1fc:	441f      	add	r7, r3
 801f1fe:	6127      	str	r7, [r4, #16]
 801f200:	2000      	movs	r0, #0
 801f202:	e7cb      	b.n	801f19c <_scanf_chars+0x44>
 801f204:	08031a55 	.word	0x08031a55

0801f208 <_scanf_i>:
 801f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f20c:	4698      	mov	r8, r3
 801f20e:	4b74      	ldr	r3, [pc, #464]	; (801f3e0 <_scanf_i+0x1d8>)
 801f210:	460c      	mov	r4, r1
 801f212:	4682      	mov	sl, r0
 801f214:	4616      	mov	r6, r2
 801f216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f21a:	b087      	sub	sp, #28
 801f21c:	ab03      	add	r3, sp, #12
 801f21e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f222:	4b70      	ldr	r3, [pc, #448]	; (801f3e4 <_scanf_i+0x1dc>)
 801f224:	69a1      	ldr	r1, [r4, #24]
 801f226:	4a70      	ldr	r2, [pc, #448]	; (801f3e8 <_scanf_i+0x1e0>)
 801f228:	2903      	cmp	r1, #3
 801f22a:	bf18      	it	ne
 801f22c:	461a      	movne	r2, r3
 801f22e:	68a3      	ldr	r3, [r4, #8]
 801f230:	9201      	str	r2, [sp, #4]
 801f232:	1e5a      	subs	r2, r3, #1
 801f234:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f238:	bf88      	it	hi
 801f23a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f23e:	4627      	mov	r7, r4
 801f240:	bf82      	ittt	hi
 801f242:	eb03 0905 	addhi.w	r9, r3, r5
 801f246:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f24a:	60a3      	strhi	r3, [r4, #8]
 801f24c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f250:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f254:	bf98      	it	ls
 801f256:	f04f 0900 	movls.w	r9, #0
 801f25a:	6023      	str	r3, [r4, #0]
 801f25c:	463d      	mov	r5, r7
 801f25e:	f04f 0b00 	mov.w	fp, #0
 801f262:	6831      	ldr	r1, [r6, #0]
 801f264:	ab03      	add	r3, sp, #12
 801f266:	7809      	ldrb	r1, [r1, #0]
 801f268:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f26c:	2202      	movs	r2, #2
 801f26e:	f7e0 ffaf 	bl	80001d0 <memchr>
 801f272:	b328      	cbz	r0, 801f2c0 <_scanf_i+0xb8>
 801f274:	f1bb 0f01 	cmp.w	fp, #1
 801f278:	d159      	bne.n	801f32e <_scanf_i+0x126>
 801f27a:	6862      	ldr	r2, [r4, #4]
 801f27c:	b92a      	cbnz	r2, 801f28a <_scanf_i+0x82>
 801f27e:	6822      	ldr	r2, [r4, #0]
 801f280:	2308      	movs	r3, #8
 801f282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f286:	6063      	str	r3, [r4, #4]
 801f288:	6022      	str	r2, [r4, #0]
 801f28a:	6822      	ldr	r2, [r4, #0]
 801f28c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f290:	6022      	str	r2, [r4, #0]
 801f292:	68a2      	ldr	r2, [r4, #8]
 801f294:	1e51      	subs	r1, r2, #1
 801f296:	60a1      	str	r1, [r4, #8]
 801f298:	b192      	cbz	r2, 801f2c0 <_scanf_i+0xb8>
 801f29a:	6832      	ldr	r2, [r6, #0]
 801f29c:	1c51      	adds	r1, r2, #1
 801f29e:	6031      	str	r1, [r6, #0]
 801f2a0:	7812      	ldrb	r2, [r2, #0]
 801f2a2:	f805 2b01 	strb.w	r2, [r5], #1
 801f2a6:	6872      	ldr	r2, [r6, #4]
 801f2a8:	3a01      	subs	r2, #1
 801f2aa:	2a00      	cmp	r2, #0
 801f2ac:	6072      	str	r2, [r6, #4]
 801f2ae:	dc07      	bgt.n	801f2c0 <_scanf_i+0xb8>
 801f2b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f2b4:	4631      	mov	r1, r6
 801f2b6:	4650      	mov	r0, sl
 801f2b8:	4790      	blx	r2
 801f2ba:	2800      	cmp	r0, #0
 801f2bc:	f040 8085 	bne.w	801f3ca <_scanf_i+0x1c2>
 801f2c0:	f10b 0b01 	add.w	fp, fp, #1
 801f2c4:	f1bb 0f03 	cmp.w	fp, #3
 801f2c8:	d1cb      	bne.n	801f262 <_scanf_i+0x5a>
 801f2ca:	6863      	ldr	r3, [r4, #4]
 801f2cc:	b90b      	cbnz	r3, 801f2d2 <_scanf_i+0xca>
 801f2ce:	230a      	movs	r3, #10
 801f2d0:	6063      	str	r3, [r4, #4]
 801f2d2:	6863      	ldr	r3, [r4, #4]
 801f2d4:	4945      	ldr	r1, [pc, #276]	; (801f3ec <_scanf_i+0x1e4>)
 801f2d6:	6960      	ldr	r0, [r4, #20]
 801f2d8:	1ac9      	subs	r1, r1, r3
 801f2da:	f000 f889 	bl	801f3f0 <__sccl>
 801f2de:	f04f 0b00 	mov.w	fp, #0
 801f2e2:	68a3      	ldr	r3, [r4, #8]
 801f2e4:	6822      	ldr	r2, [r4, #0]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d03d      	beq.n	801f366 <_scanf_i+0x15e>
 801f2ea:	6831      	ldr	r1, [r6, #0]
 801f2ec:	6960      	ldr	r0, [r4, #20]
 801f2ee:	f891 c000 	ldrb.w	ip, [r1]
 801f2f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f2f6:	2800      	cmp	r0, #0
 801f2f8:	d035      	beq.n	801f366 <_scanf_i+0x15e>
 801f2fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f2fe:	d124      	bne.n	801f34a <_scanf_i+0x142>
 801f300:	0510      	lsls	r0, r2, #20
 801f302:	d522      	bpl.n	801f34a <_scanf_i+0x142>
 801f304:	f10b 0b01 	add.w	fp, fp, #1
 801f308:	f1b9 0f00 	cmp.w	r9, #0
 801f30c:	d003      	beq.n	801f316 <_scanf_i+0x10e>
 801f30e:	3301      	adds	r3, #1
 801f310:	f109 39ff 	add.w	r9, r9, #4294967295
 801f314:	60a3      	str	r3, [r4, #8]
 801f316:	6873      	ldr	r3, [r6, #4]
 801f318:	3b01      	subs	r3, #1
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	6073      	str	r3, [r6, #4]
 801f31e:	dd1b      	ble.n	801f358 <_scanf_i+0x150>
 801f320:	6833      	ldr	r3, [r6, #0]
 801f322:	3301      	adds	r3, #1
 801f324:	6033      	str	r3, [r6, #0]
 801f326:	68a3      	ldr	r3, [r4, #8]
 801f328:	3b01      	subs	r3, #1
 801f32a:	60a3      	str	r3, [r4, #8]
 801f32c:	e7d9      	b.n	801f2e2 <_scanf_i+0xda>
 801f32e:	f1bb 0f02 	cmp.w	fp, #2
 801f332:	d1ae      	bne.n	801f292 <_scanf_i+0x8a>
 801f334:	6822      	ldr	r2, [r4, #0]
 801f336:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f33a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f33e:	d1bf      	bne.n	801f2c0 <_scanf_i+0xb8>
 801f340:	2310      	movs	r3, #16
 801f342:	6063      	str	r3, [r4, #4]
 801f344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f348:	e7a2      	b.n	801f290 <_scanf_i+0x88>
 801f34a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f34e:	6022      	str	r2, [r4, #0]
 801f350:	780b      	ldrb	r3, [r1, #0]
 801f352:	f805 3b01 	strb.w	r3, [r5], #1
 801f356:	e7de      	b.n	801f316 <_scanf_i+0x10e>
 801f358:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f35c:	4631      	mov	r1, r6
 801f35e:	4650      	mov	r0, sl
 801f360:	4798      	blx	r3
 801f362:	2800      	cmp	r0, #0
 801f364:	d0df      	beq.n	801f326 <_scanf_i+0x11e>
 801f366:	6823      	ldr	r3, [r4, #0]
 801f368:	05d9      	lsls	r1, r3, #23
 801f36a:	d50d      	bpl.n	801f388 <_scanf_i+0x180>
 801f36c:	42bd      	cmp	r5, r7
 801f36e:	d909      	bls.n	801f384 <_scanf_i+0x17c>
 801f370:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f378:	4632      	mov	r2, r6
 801f37a:	4650      	mov	r0, sl
 801f37c:	4798      	blx	r3
 801f37e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f382:	464d      	mov	r5, r9
 801f384:	42bd      	cmp	r5, r7
 801f386:	d028      	beq.n	801f3da <_scanf_i+0x1d2>
 801f388:	6822      	ldr	r2, [r4, #0]
 801f38a:	f012 0210 	ands.w	r2, r2, #16
 801f38e:	d113      	bne.n	801f3b8 <_scanf_i+0x1b0>
 801f390:	702a      	strb	r2, [r5, #0]
 801f392:	6863      	ldr	r3, [r4, #4]
 801f394:	9e01      	ldr	r6, [sp, #4]
 801f396:	4639      	mov	r1, r7
 801f398:	4650      	mov	r0, sl
 801f39a:	47b0      	blx	r6
 801f39c:	f8d8 3000 	ldr.w	r3, [r8]
 801f3a0:	6821      	ldr	r1, [r4, #0]
 801f3a2:	1d1a      	adds	r2, r3, #4
 801f3a4:	f8c8 2000 	str.w	r2, [r8]
 801f3a8:	f011 0f20 	tst.w	r1, #32
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	d00f      	beq.n	801f3d0 <_scanf_i+0x1c8>
 801f3b0:	6018      	str	r0, [r3, #0]
 801f3b2:	68e3      	ldr	r3, [r4, #12]
 801f3b4:	3301      	adds	r3, #1
 801f3b6:	60e3      	str	r3, [r4, #12]
 801f3b8:	1bed      	subs	r5, r5, r7
 801f3ba:	44ab      	add	fp, r5
 801f3bc:	6925      	ldr	r5, [r4, #16]
 801f3be:	445d      	add	r5, fp
 801f3c0:	6125      	str	r5, [r4, #16]
 801f3c2:	2000      	movs	r0, #0
 801f3c4:	b007      	add	sp, #28
 801f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3ca:	f04f 0b00 	mov.w	fp, #0
 801f3ce:	e7ca      	b.n	801f366 <_scanf_i+0x15e>
 801f3d0:	07ca      	lsls	r2, r1, #31
 801f3d2:	bf4c      	ite	mi
 801f3d4:	8018      	strhmi	r0, [r3, #0]
 801f3d6:	6018      	strpl	r0, [r3, #0]
 801f3d8:	e7eb      	b.n	801f3b2 <_scanf_i+0x1aa>
 801f3da:	2001      	movs	r0, #1
 801f3dc:	e7f2      	b.n	801f3c4 <_scanf_i+0x1bc>
 801f3de:	bf00      	nop
 801f3e0:	0802ae70 	.word	0x0802ae70
 801f3e4:	0801deb5 	.word	0x0801deb5
 801f3e8:	0801dda5 	.word	0x0801dda5
 801f3ec:	0803267a 	.word	0x0803267a

0801f3f0 <__sccl>:
 801f3f0:	b570      	push	{r4, r5, r6, lr}
 801f3f2:	780b      	ldrb	r3, [r1, #0]
 801f3f4:	4604      	mov	r4, r0
 801f3f6:	2b5e      	cmp	r3, #94	; 0x5e
 801f3f8:	bf0b      	itete	eq
 801f3fa:	784b      	ldrbeq	r3, [r1, #1]
 801f3fc:	1c48      	addne	r0, r1, #1
 801f3fe:	1c88      	addeq	r0, r1, #2
 801f400:	2200      	movne	r2, #0
 801f402:	bf08      	it	eq
 801f404:	2201      	moveq	r2, #1
 801f406:	1e61      	subs	r1, r4, #1
 801f408:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f40c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801f410:	42a9      	cmp	r1, r5
 801f412:	d1fb      	bne.n	801f40c <__sccl+0x1c>
 801f414:	b90b      	cbnz	r3, 801f41a <__sccl+0x2a>
 801f416:	3801      	subs	r0, #1
 801f418:	bd70      	pop	{r4, r5, r6, pc}
 801f41a:	f082 0101 	eor.w	r1, r2, #1
 801f41e:	54e1      	strb	r1, [r4, r3]
 801f420:	1c42      	adds	r2, r0, #1
 801f422:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801f426:	2d2d      	cmp	r5, #45	; 0x2d
 801f428:	f102 36ff 	add.w	r6, r2, #4294967295
 801f42c:	4610      	mov	r0, r2
 801f42e:	d006      	beq.n	801f43e <__sccl+0x4e>
 801f430:	2d5d      	cmp	r5, #93	; 0x5d
 801f432:	d0f1      	beq.n	801f418 <__sccl+0x28>
 801f434:	b90d      	cbnz	r5, 801f43a <__sccl+0x4a>
 801f436:	4630      	mov	r0, r6
 801f438:	e7ee      	b.n	801f418 <__sccl+0x28>
 801f43a:	462b      	mov	r3, r5
 801f43c:	e7ef      	b.n	801f41e <__sccl+0x2e>
 801f43e:	7816      	ldrb	r6, [r2, #0]
 801f440:	2e5d      	cmp	r6, #93	; 0x5d
 801f442:	d0fa      	beq.n	801f43a <__sccl+0x4a>
 801f444:	42b3      	cmp	r3, r6
 801f446:	dcf8      	bgt.n	801f43a <__sccl+0x4a>
 801f448:	4618      	mov	r0, r3
 801f44a:	3001      	adds	r0, #1
 801f44c:	4286      	cmp	r6, r0
 801f44e:	5421      	strb	r1, [r4, r0]
 801f450:	dcfb      	bgt.n	801f44a <__sccl+0x5a>
 801f452:	43d8      	mvns	r0, r3
 801f454:	4430      	add	r0, r6
 801f456:	1c5d      	adds	r5, r3, #1
 801f458:	42b3      	cmp	r3, r6
 801f45a:	bfa8      	it	ge
 801f45c:	2000      	movge	r0, #0
 801f45e:	182b      	adds	r3, r5, r0
 801f460:	3202      	adds	r2, #2
 801f462:	e7de      	b.n	801f422 <__sccl+0x32>

0801f464 <__submore>:
 801f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f468:	460c      	mov	r4, r1
 801f46a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f470:	4299      	cmp	r1, r3
 801f472:	d11d      	bne.n	801f4b0 <__submore+0x4c>
 801f474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f478:	f7fc ff62 	bl	801c340 <_malloc_r>
 801f47c:	b918      	cbnz	r0, 801f486 <__submore+0x22>
 801f47e:	f04f 30ff 	mov.w	r0, #4294967295
 801f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f48a:	63a3      	str	r3, [r4, #56]	; 0x38
 801f48c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f490:	6360      	str	r0, [r4, #52]	; 0x34
 801f492:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f496:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f49a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f49e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f4a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f4a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f4aa:	6020      	str	r0, [r4, #0]
 801f4ac:	2000      	movs	r0, #0
 801f4ae:	e7e8      	b.n	801f482 <__submore+0x1e>
 801f4b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f4b2:	0077      	lsls	r7, r6, #1
 801f4b4:	463a      	mov	r2, r7
 801f4b6:	f7ff fa35 	bl	801e924 <_realloc_r>
 801f4ba:	4605      	mov	r5, r0
 801f4bc:	2800      	cmp	r0, #0
 801f4be:	d0de      	beq.n	801f47e <__submore+0x1a>
 801f4c0:	eb00 0806 	add.w	r8, r0, r6
 801f4c4:	4601      	mov	r1, r0
 801f4c6:	4632      	mov	r2, r6
 801f4c8:	4640      	mov	r0, r8
 801f4ca:	f7fc feb9 	bl	801c240 <memcpy>
 801f4ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f4d2:	f8c4 8000 	str.w	r8, [r4]
 801f4d6:	e7e9      	b.n	801f4ac <__submore+0x48>

0801f4d8 <_init>:
 801f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4da:	bf00      	nop
 801f4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4de:	bc08      	pop	{r3}
 801f4e0:	469e      	mov	lr, r3
 801f4e2:	4770      	bx	lr

0801f4e4 <_fini>:
 801f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4e6:	bf00      	nop
 801f4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4ea:	bc08      	pop	{r3}
 801f4ec:	469e      	mov	lr, r3
 801f4ee:	4770      	bx	lr
